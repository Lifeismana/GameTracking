 AssertValidStringPtr
 B AI_CriteriaSet::sm_CriteriaSymbols
 B AI_ResponseParams_DataDescInit::g_DataMapHolder
 B AI_Response_DataDescInit::g_DataMapHolder
 B AI_TalkIdleEnabled
 B AcquireTimeVarianceFactor
 B AimTolerance
 B AllowAllBotTeam
 B BBQMin
 B BBQRate
 B BoomerExposedTimeTolerance
 B BoomerNearDist
 B BoomerShoveInterval
 B BoomerShoveMax
 B BoomerShoveMin
 B BoomerVomitDelay
 B Boomer_DataDescInit::g_DataMapHolder
 B BossZombieBotCrouch
 B BulletFFThroughWalls
 B BurnMax
 B BurnRate
 B CAISound_DataDescInit::g_DataMapHolder
 B CAI_BehaviorBase_DataDescInit::g_DataMapHolder
 B CAI_ChangeHintGroup_DataDescInit::g_DataMapHolder
 B CAI_ChangeTarget_DataDescInit::g_DataMapHolder
 B CAI_Expresser_DataDescInit::g_DataMapHolder
 B CAmbientGeneric_DataDescInit::g_DataMapHolder
 B CAnimationLayer_DataDescInit::g_DataMapHolder
 B CAreaPortal_DataDescInit::g_DataMapHolder
 B CAssaultRifle_DataDescInit::g_DataMapHolder
 B CAutoShotgun_DataDescInit::g_DataMapHolder
 B CBaseAbility_DataDescInit::g_DataMapHolder
 B CBaseAchievement_DataDescInit::g_DataMapHolder
 B CBaseAnimatingOverlay_DataDescInit::g_DataMapHolder
 B CBaseAnimating_DataDescInit::g_DataMapHolder
 B CBaseButton_DataDescInit::g_DataMapHolder
 B CBaseCSGrenadeProjectile_DataDescInit::g_DataMapHolder
 B CBaseCSGrenade_DataDescInit::g_DataMapHolder
 B CBaseCombatCharacter::m_DefaultRelationship
 B CBaseCombatCharacter_DataDescInit::g_DataMapHolder
 B CBaseCombatWeapon_DataDescInit::g_DataMapHolder
 B CBaseDMStart_DataDescInit::g_DataMapHolder
 B CBaseDoor_DataDescInit::g_DataMapHolder
 B CBaseEntity::m_bAllowPrecache
 B CBaseEntity::m_bDebugPause
 B CBaseEntity::m_bInDebugSelect
 B CBaseEntity::m_pPredictionPlayer
 B CBaseEntity::sm_bDisableTouchFuncs
 B CBaseEntityOutput_DataDescInit::g_DataMapHolder
 B CBaseEntity_DataDescInit::g_DataMapHolder
 B CBaseFilter_DataDescInit::g_DataMapHolder
 B CBaseFire_DataDescInit::g_DataMapHolder
 B CBaseFlex_DataDescInit::g_DataMapHolder
 B CBaseGrenade_DataDescInit::g_DataMapHolder
 B CBaseMoveBehavior_DataDescInit::g_DataMapHolder
 B CBasePlatTrain_DataDescInit::g_DataMapHolder
 B CBasePlayer::s_PlayerEdict
 B CBasePlayer_DataDescInit::g_DataMapHolder
 B CBasePropDoor_DataDescInit::g_DataMapHolder
 B CBaseServerVehicle_DataDescInit::g_DataMapHolder
 B CBaseShotgun_DataDescInit::g_DataMapHolder
 B CBaseTeamObjectiveResource_DataDescInit::g_DataMapHolder
 B CBaseTempEntity::s_pTempEntities
 B CBaseToggle_DataDescInit::g_DataMapHolder
 B CBaseTrigger_DataDescInit::g_DataMapHolder
 B CBaseVPhysicsTrigger_DataDescInit::g_DataMapHolder
 B CBaseViewModel_DataDescInit::g_DataMapHolder
 B CBeamSpotlight_DataDescInit::g_DataMapHolder
 B CBeam_DataDescInit::g_DataMapHolder
 B CBlood_DataDescInit::g_DataMapHolder
 B CBoneFollowerManager_DataDescInit::g_DataMapHolder
 B CBoneFollower_DataDescInit::g_DataMapHolder
 B CBoomerClaw_DataDescInit::g_DataMapHolder
 B CBreakableProp_DataDescInit::g_DataMapHolder
 B CBreakableSurface_DataDescInit::g_DataMapHolder
 B CBreakable_DataDescInit::g_DataMapHolder
 B CBubbling_DataDescInit::g_DataMapHolder
 B CButtonTimed_DataDescInit::g_DataMapHolder
 B CCSPlayer_DataDescInit::g_DataMapHolder
 B CCSRagdoll_DataDescInit::g_DataMapHolder
 B CCarProp_DataDescInit::g_DataMapHolder
 B CChangeLevel_DataDescInit::g_DataMapHolder
 B CChoreoScene::s_bEditingDisabled
 B CClaw_DataDescInit::g_DataMapHolder
 B CClientPath_DataDescInit::g_DataMapHolder
 B CCollisionProperty_DataDescInit::g_DataMapHolder
 B CColorCorrectionVolume_DataDescInit::g_DataMapHolder
 B CColorCorrection_DataDescInit::g_DataMapHolder
 B CCommentaryAuto_DataDescInit::g_DataMapHolder
 B CCommentaryDummy_DataDescInit::g_DataMapHolder
 B CCommentarySystem_DataDescInit::g_DataMapHolder
 B CCommentaryZombieSpawner_DataDescInit::g_DataMapHolder
 B CConstantForceController_DataDescInit::g_DataMapHolder
 B CConstraintAnchor_DataDescInit::g_DataMapHolder
 B CCopyRecipientFilter_DataDescInit::g_DataMapHolder
 B CDeathFallCamera_DataDescInit::g_DataMapHolder
 B CDebugHistory_DataDescInit::g_DataMapHolder
 B CDecal_DataDescInit::g_DataMapHolder
 B CDmxAttribute::s_AttributeNameSymbols
 B CDmxElement::s_TypeSymbols
 B CDmxKeyValues2ErrorStack::m_ErrorSymbolTable
 B CDynamicLight_DataDescInit::g_DataMapHolder
 B CDynamicProp_DataDescInit::g_DataMapHolder
 B CEmbers_DataDescInit::g_DataMapHolder
 B CEntityClassList<CPhysicsNPCSolver>::m_pClassList
 B CEntityClassList<CSkyCamera>::m_pClassList
 B CEntityDissolve_DataDescInit::g_DataMapHolder
 B CEntityFlame_DataDescInit::g_DataMapHolder
 B CEntityParticleTrail_DataDescInit::g_DataMapHolder
 B CEnvBeam_DataDescInit::g_DataMapHolder
 B CEnvBeverage_DataDescInit::g_DataMapHolder
 B CEnvCredits_DataDescInit::g_DataMapHolder
 B CEnvDOFController_DataDescInit::g_DataMapHolder
 B CEnvDustPuff_DataDescInit::g_DataMapHolder
 B CEnvEffectsScript_DataDescInit::g_DataMapHolder
 B CEnvEntityMaker_DataDescInit::g_DataMapHolder
 B CEnvExplosion_DataDescInit::g_DataMapHolder
 B CEnvFade_DataDescInit::g_DataMapHolder
 B CEnvFireSensor_DataDescInit::g_DataMapHolder
 B CEnvFireSource_DataDescInit::g_DataMapHolder
 B CEnvFunnel_DataDescInit::g_DataMapHolder
 B CEnvGlobal_DataDescInit::g_DataMapHolder
 B CEnvGunfire_DataDescInit::g_DataMapHolder
 B CEnvHudHint_DataDescInit::g_DataMapHolder
 B CEnvLaser_DataDescInit::g_DataMapHolder
 B CEnvMicrophone_DataDescInit::g_DataMapHolder
 B CEnvMuzzleFlash_DataDescInit::g_DataMapHolder
 B CEnvParticleScript_DataDescInit::g_DataMapHolder
 B CEnvPlayerSurfaceTrigger_DataDescInit::g_DataMapHolder
 B CEnvProjectedTexture_DataDescInit::g_DataMapHolder
 B CEnvQuadraticBeam_DataDescInit::g_DataMapHolder
 B CEnvRockLauncher_DataDescInit::g_DataMapHolder
 B CEnvScreenEffect_DataDescInit::g_DataMapHolder
 B CEnvScreenOverlay_DataDescInit::g_DataMapHolder
 B CEnvShake_DataDescInit::g_DataMapHolder
 B CEnvShooter_DataDescInit::g_DataMapHolder
 B CEnvSoundscapeProxy_DataDescInit::g_DataMapHolder
 B CEnvSoundscapeTriggerable_DataDescInit::g_DataMapHolder
 B CEnvSoundscape_DataDescInit::g_DataMapHolder
 B CEnvSpark_DataDescInit::g_DataMapHolder
 B CEnvSplash_DataDescInit::g_DataMapHolder
 B CEnvTonemapController_DataDescInit::g_DataMapHolder
 B CEnvTracer_DataDescInit::g_DataMapHolder
 B CEnvViewPunch_DataDescInit::g_DataMapHolder
 B CEnvWeaponfire_DataDescInit::g_DataMapHolder
 B CEnvWind_DataDescInit::g_DataMapHolder
 B CEnvZoom_DataDescInit::g_DataMapHolder
 B CEnv_Blocker_DataDescInit::g_DataMapHolder
 B CEscapeRoute_DataDescInit::g_DataMapHolder
 B CEventAction::s_iNextIDStamp
 B CEventAction_DataDescInit::g_DataMapHolder
 B CEventQueue_DataDescInit::g_DataMapHolder
 B CFailableAchievement_DataDescInit::g_DataMapHolder
 B CFilterClass_DataDescInit::g_DataMapHolder
 B CFilterContext_DataDescInit::g_DataMapHolder
 B CFilterEnemy_DataDescInit::g_DataMapHolder
 B CFilterMassGreater_DataDescInit::g_DataMapHolder
 B CFilterModel_DataDescInit::g_DataMapHolder
 B CFilterMultiple_DataDescInit::g_DataMapHolder
 B CFilterName_DataDescInit::g_DataMapHolder
 B CFinaleTrigger_DataDescInit::g_DataMapHolder
 B CFireSmoke_DataDescInit::g_DataMapHolder
 B CFireTrail_DataDescInit::g_DataMapHolder
 B CFire_DataDescInit::g_DataMapHolder
 B CFirstAidKit_DataDescInit::g_DataMapHolder
 B CFishPool_DataDescInit::g_DataMapHolder
 B CFish_DataDescInit::g_DataMapHolder
 B CFlexCycler_DataDescInit::g_DataMapHolder
 B CFlexExpresser_DataDescInit::g_DataMapHolder
 B CFogController_DataDescInit::g_DataMapHolder
 B CFogTrigger_DataDescInit::g_DataMapHolder
 B CFogVolume::ms_bEnableDisableSupported
 B CFogVolume_DataDescInit::g_DataMapHolder
 B CFourWheelServerVehicle_DataDescInit::g_DataMapHolder
 B CFourWheelVehiclePhysics_DataDescInit::g_DataMapHolder
 B CFuelBarrelProp_DataDescInit::g_DataMapHolder
 B CFuncAreaPortalBase_DataDescInit::g_DataMapHolder
 B CFuncAreaPortalWindow_DataDescInit::g_DataMapHolder
 B CFuncBrush_DataDescInit::g_DataMapHolder
 B CFuncConveyor_DataDescInit::g_DataMapHolder
 B CFuncElevator_DataDescInit::g_DataMapHolder
 B CFuncFireExtinguisher_DataDescInit::g_DataMapHolder
 B CFuncLadder::s_Ladders
 B CFuncLadder_DataDescInit::g_DataMapHolder
 B CFuncMoveLinear_DataDescInit::g_DataMapHolder
 B CFuncNavAttributeRegion_DataDescInit::g_DataMapHolder
 B CFuncNavBlocker_DataDescInit::g_DataMapHolder
 B CFuncNavObstruction_DataDescInit::g_DataMapHolder
 B CFuncNavStairsToggle_DataDescInit::g_DataMapHolder
 B CFuncOccluder_DataDescInit::g_DataMapHolder
 B CFuncPlatRot_DataDescInit::g_DataMapHolder
 B CFuncPlat_DataDescInit::g_DataMapHolder
 B CFuncPlayerInfectedClip_DataDescInit::g_DataMapHolder
 B CFuncRagdollFader_DataDescInit::g_DataMapHolder
 B CFuncReflectiveGlass_DataDescInit::g_DataMapHolder
 B CFuncRotating_DataDescInit::g_DataMapHolder
 B CFuncSimpleLadder_DataDescInit::g_DataMapHolder
 B CFuncSmokeVolume_DataDescInit::g_DataMapHolder
 B CFuncSpawnVolume::s_ActiveAreaSet
 B CFuncSpawnVolume::s_bVolumeActive
 B CFuncSpawnVolume_DataDescInit::g_DataMapHolder
 B CFuncTankTrain_DataDescInit::g_DataMapHolder
 B CFuncTrackAuto_DataDescInit::g_DataMapHolder
 B CFuncTrackChange_DataDescInit::g_DataMapHolder
 B CFuncTrackTrain_DataDescInit::g_DataMapHolder
 B CFuncTrainControls_DataDescInit::g_DataMapHolder
 B CFuncTrain_DataDescInit::g_DataMapHolder
 B CFuncVPhysicsClip_DataDescInit::g_DataMapHolder
 B CFuncVehicleClip_DataDescInit::g_DataMapHolder
 B CFuncWallToggle_DataDescInit::g_DataMapHolder
 B CFuncWall_DataDescInit::g_DataMapHolder
 B CFunc_Dust_DataDescInit::g_DataMapHolder
 B CFunc_LOD_DataDescInit::g_DataMapHolder
 B CGameEnd_DataDescInit::g_DataMapHolder
 B CGameGibManager_DataDescInit::g_DataMapHolder
 B CGamePlayerEquip_DataDescInit::g_DataMapHolder
 B CGamePlayerZone_DataDescInit::g_DataMapHolder
 B CGameRulesProxy::s_pGameRulesProxy
 B CGameRulesRegister::s_pHead
 B CGameScore_DataDescInit::g_DataMapHolder
 B CGameText_DataDescInit::g_DataMapHolder
 B CGameUI_DataDescInit::g_DataMapHolder
 B CGameWeaponManager_DataDescInit::g_DataMapHolder
 B CGasCan_DataDescInit::g_DataMapHolder
 B CGibShooter_DataDescInit::g_DataMapHolder
 B CGib_DataDescInit::g_DataMapHolder
 B CGlobalState_DataDescInit::g_DataMapHolder
 B CGunTarget_DataDescInit::g_DataMapHolder
 B CHunterClaw_DataDescInit::g_DataMapHolder
 B CInfectedZooMaker_DataDescInit::g_DataMapHolder
 B CInferno_DataDescInit::g_DataMapHolder
 B CInfoDirector_DataDescInit::g_DataMapHolder
 B CInfoElevatorFloor_DataDescInit::g_DataMapHolder
 B CInfoGameEventProxy_DataDescInit::g_DataMapHolder
 B CInfoGameMode_DataDescInit::g_DataMapHolder
 B CInfoGoalInfectedChase_DataDescInit::g_DataMapHolder
 B CInfoOverlayAccessor_DataDescInit::g_DataMapHolder
 B CInfoRemarkable_DataDescInit::g_DataMapHolder
 B CInfoViewParameters_DataDescInit::g_DataMapHolder
 B CInfoZombieSpawn_DataDescInit::g_DataMapHolder
 B CInstancedSceneEntity_DataDescInit::g_DataMapHolder
 B CItemSoda_DataDescInit::g_DataMapHolder
 B CItem_DataDescInit::g_DataMapHolder
 B CKeepUpright_DataDescInit::g_DataMapHolder
 B CL4D_GameStats
 B CLightGlow_DataDescInit::g_DataMapHolder
 B CLight_DataDescInit::g_DataMapHolder
 B CLogicActiveAutosave_DataDescInit::g_DataMapHolder
 B CLogicAuto_DataDescInit::g_DataMapHolder
 B CLogicAutosave_DataDescInit::g_DataMapHolder
 B CLogicBranchList_DataDescInit::g_DataMapHolder
 B CLogicBranch_DataDescInit::g_DataMapHolder
 B CLogicCase_DataDescInit::g_DataMapHolder
 B CLogicCollisionPair_DataDescInit::g_DataMapHolder
 B CLogicCompareInteger_DataDescInit::g_DataMapHolder
 B CLogicCompare_DataDescInit::g_DataMapHolder
 B CLogicLineToEntity_DataDescInit::g_DataMapHolder
 B CLogicMeasureMovement_DataDescInit::g_DataMapHolder
 B CLogicNavigation_DataDescInit::g_DataMapHolder
 B CLogicRelay_DataDescInit::g_DataMapHolder
 B CLunge_DataDescInit::g_DataMapHolder
 B CMapInfo_DataDescInit::g_DataMapHolder
 B CMaterialModifyControl_DataDescInit::g_DataMapHolder
 B CMathColorBlend_DataDescInit::g_DataMapHolder
 B CMathCounter_DataDescInit::g_DataMapHolder
 B CMathRemap_DataDescInit::g_DataMapHolder
 B CMessageEntity_DataDescInit::g_DataMapHolder
 B CMessage_DataDescInit::g_DataMapHolder
 B CMolotov_DataDescInit::g_DataMapHolder
 B CMomentaryRotButton_DataDescInit::g_DataMapHolder
 B CMotorController_DataDescInit::g_DataMapHolder
 B CMovementSpeedMod_DataDescInit::g_DataMapHolder
 B CMultiDamage_DataDescInit::g_DataMapHolder
 B CMultiSource_DataDescInit::g_DataMapHolder
 B CMultiplayRules::m_MapList
 B CMultiplayRules::m_nMapCycleTimeStamp
 B CMultiplayRules::m_nMapCycleindex
 B CNavArea::m_isReset
 B CNavArea::m_openList
 B CNavArea::m_openListTail
 B CNavNode::m_list
 B CNavNode::m_listLength
 B CNavVectorNoEditAllocator::m_memory
 B CNavVectorNoEditAllocator::m_nBytesCurrent
 B CNavVectorNoEditAllocator::m_pCurrent
 B CNodeEnt::m_nNodeCount
 B COrnamentProp_DataDescInit::g_DataMapHolder
 B COuttroStats_DataDescInit::g_DataMapHolder
 B COxygenTank_DataDescInit::g_DataMapHolder
 B CPainPills_DataDescInit::g_DataMapHolder
 B CParticleFire_DataDescInit::g_DataMapHolder
 B CParticleLight_DataDescInit::g_DataMapHolder
 B CParticlePerformanceMonitor_DataDescInit::g_DataMapHolder
 B CParticleSystem_DataDescInit::g_DataMapHolder
 B CPassengerInfo_DataDescInit::g_DataMapHolder
 B CPathCorner_DataDescInit::g_DataMapHolder
 B CPathKeyFrame_DataDescInit::g_DataMapHolder
 B CPathTrack_DataDescInit::g_DataMapHolder
 B CPhysBoxMultiplayer_DataDescInit::g_DataMapHolder
 B CPhysBox_DataDescInit::g_DataMapHolder
 B CPhysConstraintSystem_DataDescInit::g_DataMapHolder
 B CPhysConstraint_DataDescInit::g_DataMapHolder
 B CPhysConvert_DataDescInit::g_DataMapHolder
 B CPhysExplosion_DataDescInit::g_DataMapHolder
 B CPhysForce_DataDescInit::g_DataMapHolder
 B CPhysHinge_DataDescInit::g_DataMapHolder
 B CPhysImpact_DataDescInit::g_DataMapHolder
 B CPhysLength_DataDescInit::g_DataMapHolder
 B CPhysMagnet_DataDescInit::g_DataMapHolder
 B CPhysMotor_DataDescInit::g_DataMapHolder
 B CPhysPulley_DataDescInit::g_DataMapHolder
 B CPhysSlideConstraint_DataDescInit::g_DataMapHolder
 B CPhysThruster_DataDescInit::g_DataMapHolder
 B CPhysTorque_DataDescInit::g_DataMapHolder
 B CPhysicsCannister_DataDescInit::g_DataMapHolder
 B CPhysicsEntitySolver_DataDescInit::g_DataMapHolder
 B CPhysicsNPCSolver_DataDescInit::g_DataMapHolder
 B CPhysicsPropRespawnable_DataDescInit::g_DataMapHolder
 B CPhysicsProp_DataDescInit::g_DataMapHolder
 B CPhysicsShake_DataDescInit::g_DataMapHolder
 B CPhysicsSpring_DataDescInit::g_DataMapHolder
 B CPhysicsWind_DataDescInit::g_DataMapHolder
 B CPhysicsWire_DataDescInit::g_DataMapHolder
 B CPipeBomb_DataDescInit::g_DataMapHolder
 B CPistol_DataDescInit::g_DataMapHolder
 B CPlasma_DataDescInit::g_DataMapHolder
 B CPlayerLocalData_DataDescInit::g_DataMapHolder
 B CPlayerResource_DataDescInit::g_DataMapHolder
 B CPlayerState_DataDescInit::g_DataMapHolder
 B CPointAngleSensor_DataDescInit::g_DataMapHolder
 B CPointAngularVelocitySensor_DataDescInit::g_DataMapHolder
 B CPointBonusMapsAccessor_DataDescInit::g_DataMapHolder
 B CPointBroadcastClientCommand_DataDescInit::g_DataMapHolder
 B CPointClientCommand_DataDescInit::g_DataMapHolder
 B CPointCommentaryNode_DataDescInit::g_DataMapHolder
 B CPointDevShotCamera_DataDescInit::g_DataMapHolder
 B CPointEntityFinder_DataDescInit::g_DataMapHolder
 B CPointGamestatsCounter_DataDescInit::g_DataMapHolder
 B CPointHurt_DataDescInit::g_DataMapHolder
 B CPointPlayerMoveConstraint_DataDescInit::g_DataMapHolder
 B CPointProximitySensor_DataDescInit::g_DataMapHolder
 B CPointPush_DataDescInit::g_DataMapHolder
 B CPointServerCommand_DataDescInit::g_DataMapHolder
 B CPointSpotlight_DataDescInit::g_DataMapHolder
 B CPointTeleport_DataDescInit::g_DataMapHolder
 B CPointTemplate_DataDescInit::g_DataMapHolder
 B CPointVelocitySensor_DataDescInit::g_DataMapHolder
 B CPortalTouchScope::m_CallQueue
 B CPoseController_DataDescInit::g_DataMapHolder
 B CPostProcessController_DataDescInit::g_DataMapHolder
 B CPrecipitationBlocker_DataDescInit::g_DataMapHolder
 B CPrecipitation_DataDescInit::g_DataMapHolder
 B CProjectedDecal_DataDescInit::g_DataMapHolder
 B CPropDoorRotatingBreakable_DataDescInit::g_DataMapHolder
 B CPropDoorRotatingCheckpoint_DataDescInit::g_DataMapHolder
 B CPropDoorRotating_DataDescInit::g_DataMapHolder
 B CPropGlowingObject_DataDescInit::g_DataMapHolder
 B CPropHealthCabinet_DataDescInit::g_DataMapHolder
 B CPropMinigun_DataDescInit::g_DataMapHolder
 B CPropMountedGun_DataDescInit::g_DataMapHolder
 B CPropVehicleDriveable_DataDescInit::g_DataMapHolder
 B CPropVehicle_DataDescInit::g_DataMapHolder
 B CPropaneTank_DataDescInit::g_DataMapHolder
 B CPumpShotgun_DataDescInit::g_DataMapHolder
 B CPushBlockerEnum::s_nEnumCount
 B CRagdollBoogie_DataDescInit::g_DataMapHolder
 B CRagdollConstraint_DataDescInit::g_DataMapHolder
 B CRagdollMagnet_DataDescInit::g_DataMapHolder
 B CRagdollManager_DataDescInit::g_DataMapHolder
 B CRagdollPropAttached_DataDescInit::g_DataMapHolder
 B CRagdollProp_DataDescInit::g_DataMapHolder
 B CRandSimTimer_DataDescInit::g_DataMapHolder
 B CRandStopwatch_DataDescInit::g_DataMapHolder
 B CRevertSaved_DataDescInit::g_DataMapHolder
 B CRopeKeyframe_DataDescInit::g_DataMapHolder
 B CRotDoor_DataDescInit::g_DataMapHolder
 B CRotorWashShooter_DataDescInit::g_DataMapHolder
 B CRuleEntity_DataDescInit::g_DataMapHolder
 B CRulePointEntity_DataDescInit::g_DataMapHolder
 B CSceneEntity::m_pcvSndMixahead
 B CSceneEntity_DataDescInit::g_DataMapHolder
 B CSceneListManager_DataDescInit::g_DataMapHolder
 B CSceneManager_DataDescInit::g_DataMapHolder
 B CServerNetworkProperty_DataDescInit::g_DataMapHolder
 B CShadowControl_DataDescInit::g_DataMapHolder
 B CSimTimer_DataDescInit::g_DataMapHolder
 B CSimpleSimTimer_DataDescInit::g_DataMapHolder
 B CSkyCamera_DataDescInit::g_DataMapHolder
 B CSlideshowDisplay_DataDescInit::g_DataMapHolder
 B CSmokeStackLightInfo_DataDescInit::g_DataMapHolder
 B CSmokeStack_DataDescInit::g_DataMapHolder
 B CSmokerClaw_DataDescInit::g_DataMapHolder
 B CSniperRifle_DataDescInit::g_DataMapHolder
 B CSoundEnt_DataDescInit::g_DataMapHolder
 B CSoundEnvelope_DataDescInit::g_DataMapHolder
 B CSoundPatch::g_SoundPatchCount
 B CSoundPatch::s_Allocator
 B CSoundPatch_DataDescInit::g_DataMapHolder
 B CSound_DataDescInit::g_DataMapHolder
 B CSpotlightEnd_DataDescInit::g_DataMapHolder
 B CSpriteTrail_DataDescInit::g_DataMapHolder
 B CSprite_DataDescInit::g_DataMapHolder
 B CSteamJet_DataDescInit::g_DataMapHolder
 B CStopwatchBase_DataDescInit::g_DataMapHolder
 B CStopwatch_DataDescInit::g_DataMapHolder
 B CStressEntityReg::s_pHead
 B CStripWeapons_DataDescInit::g_DataMapHolder
 B CSubMachinegun_DataDescInit::g_DataMapHolder
 B CSun_DataDescInit::g_DataMapHolder
 B CSurroundTest_DataDescInit::g_DataMapHolder
 B CSurvivorCamera_DataDescInit::g_DataMapHolder
 B CSurvivorPosition_DataDescInit::g_DataMapHolder
 B CSurvivorRescue_DataDescInit::g_DataMapHolder
 B CTPlayerModels
 B CTakeDamageInfo_DataDescInit::g_DataMapHolder
 B CTankClaw_DataDescInit::g_DataMapHolder
 B CTankRock_DataDescInit::g_DataMapHolder
 B CTankTargetChange_DataDescInit::g_DataMapHolder
 B CTankTrainAI_DataDescInit::g_DataMapHolder
 B CTargetCDAudioRep_DataDescInit::g_DataMapHolder
 B CTargetChangeGravity_DataDescInit::g_DataMapHolder
 B CTeamSpawnPoint_DataDescInit::g_DataMapHolder
 B CTeamVehicleSpawnPoint_DataDescInit::g_DataMapHolder
 B CTeamplayRoundBasedRulesProxy_DataDescInit::g_DataMapHolder
 B CTerrorGun_DataDescInit::g_DataMapHolder
 B CTerrorPlayer::m_sCurrentPlayerReportID
 B CTerrorPlayerResource_DataDescInit::g_DataMapHolder
 B CTerrorPlayer_DataDescInit::g_DataMapHolder
 B CTerrorWeapon_DataDescInit::g_DataMapHolder
 B CTestTraceline_DataDescInit::g_DataMapHolder
 B CTextStatFile::s_pHead
 B CTextureToggle_DataDescInit::g_DataMapHolder
 B CThrow_DataDescInit::g_DataMapHolder
 B CThrustController_DataDescInit::g_DataMapHolder
 B CTimerEntity_DataDescInit::g_DataMapHolder
 B CTonemapTrigger_DataDescInit::g_DataMapHolder
 B CTongue_DataDescInit::g_DataMapHolder
 B CTransitioningPlayer_DataDescInit::g_DataMapHolder
 B CTriggerAutoCrouch_DataDescInit::g_DataMapHolder
 B CTriggerBrush_DataDescInit::g_DataMapHolder
 B CTriggerCameraMultiplayer_DataDescInit::g_DataMapHolder
 B CTriggerCamera_DataDescInit::g_DataMapHolder
 B CTriggerEscape_DataDescInit::g_DataMapHolder
 B CTriggerGravity_DataDescInit::g_DataMapHolder
 B CTriggerHurt_DataDescInit::g_DataMapHolder
 B CTriggerImpact_DataDescInit::g_DataMapHolder
 B CTriggerLook_DataDescInit::g_DataMapHolder
 B CTriggerMultiple_DataDescInit::g_DataMapHolder
 B CTriggerPlayerMovement_DataDescInit::g_DataMapHolder
 B CTriggerProximity_DataDescInit::g_DataMapHolder
 B CTriggerPush_DataDescInit::g_DataMapHolder
 B CTriggerRemove_DataDescInit::g_DataMapHolder
 B CTriggerSave_DataDescInit::g_DataMapHolder
 B CTriggerSoundscape_DataDescInit::g_DataMapHolder
 B CTriggerTeleport_DataDescInit::g_DataMapHolder
 B CTriggerToggleSave_DataDescInit::g_DataMapHolder
 B CTriggerVPhysicsMotion_DataDescInit::g_DataMapHolder
 B CTriggerWind_DataDescInit::g_DataMapHolder
 B CUtlMemoryPool::g_ReportFunc
 B CUtlSymbol::s_pSymbolTable
 B CVGuiScreen_DataDescInit::g_DataMapHolder
 B CVersusRandom_DataDescInit::g_DataMapHolder
 B CVomit_DataDescInit::g_DataMapHolder
 B CVoteController_DataDescInit::g_DataMapHolder
 B CWC_UpdateIgnoreList_DataDescInit::g_DataMapHolder
 B CWaterBullet_DataDescInit::g_DataMapHolder
 B CWaterLODControl_DataDescInit::g_DataMapHolder
 B CWeaponAmmoSpawn_DataDescInit::g_DataMapHolder
 B CWeaponCSBase_DataDescInit::g_DataMapHolder
 B CWeaponSpawn_DataDescInit::g_DataMapHolder
 B CWeightButton_DataDescInit::g_DataMapHolder
 B CWindowPane_DataDescInit::g_DataMapHolder
 B CWorldItem_DataDescInit::g_DataMapHolder
 B CWorld_DataDescInit::g_DataMapHolder
 B CaptionLookup_t_DataDescInit::g_DataMapHolder
 B ChangeLevelInhibit
 B ChangeLevelPauseInterval
 B ChaseLeadTime
 B ClawForce
 B ClawPlayerBoomerDamage
 B ClawPlayerHunterDamage
 B ClawPlayerSmokerDamage
 B ClawPlaysHitAnims
 B ClawRange
 B ClawRangeDown
 B ClawSwingDuration
 B ClawSwingInterval
 B ClawSwingMissInterval
 B ClearAreaRange
 B ClientPrecachePrecache::s_ResourcePrecacher
 B CmdDumpReports
 B CompiledCaptionHeader_t_DataDescInit::g_DataMapHolder
 B ConCommandBase::s_pAccessor
 B ConCommandBase::s_pConCommandBases
 B ConceptHistory_t_DataDescInit::g_DataMapHolder
 B CreditsInterval
 B DLC3FinaleEscapeHordeDelay
 B DLC3FinaleStageDelay
 B DT_AbilityBase::g_SendTable
 B DT_AbilityBase::g_SendTableInit
 B DT_AbilityThrow::g_SendTable
 B DT_AbilityThrow::g_SendTableInit
 B DT_AbilityTongue::g_SendTable
 B DT_AbilityTongue::g_SendTableInit
 B DT_AbilityVomit::g_SendTable
 B DT_AbilityVomit::g_SendTableInit
 B DT_AnimTimeMustBeFirst::g_SendTable
 B DT_AnimTimeMustBeFirst::g_SendTableInit
 B DT_Animationlayer::g_SendTable
 B DT_Animationlayer::g_SendTableInit
 B DT_AssaultRifle::g_SendTable
 B DT_AssaultRifle::g_SendTableInit
 B DT_AutoShotgun::g_SendTable
 B DT_AutoShotgun::g_SendTableInit
 B DT_BCCLocalPlayerExclusive::g_SendTable
 B DT_BCCLocalPlayerExclusive::g_SendTableInit
 B DT_BaseAnimating::g_SendTable
 B DT_BaseAnimating::g_SendTableInit
 B DT_BaseAnimatingOverlay::g_SendTable
 B DT_BaseAnimatingOverlay::g_SendTableInit
 B DT_BaseBeam::g_SendTable
 B DT_BaseBeam::g_SendTableInit
 B DT_BaseButton::g_SendTable
 B DT_BaseButton::g_SendTableInit
 B DT_BaseCSGrenade::g_SendTable
 B DT_BaseCSGrenade::g_SendTableInit
 B DT_BaseCSGrenadeProjectile::g_SendTable
 B DT_BaseCSGrenadeProjectile::g_SendTableInit
 B DT_BaseCombatCharacter::g_SendTable
 B DT_BaseCombatCharacter::g_SendTableInit
 B DT_BaseCombatWeapon::g_SendTable
 B DT_BaseCombatWeapon::g_SendTableInit
 B DT_BaseDoor::g_SendTable
 B DT_BaseDoor::g_SendTableInit
 B DT_BaseEntity::g_SendTable
 B DT_BaseEntity::g_SendTableInit
 B DT_BaseFlex::g_SendTable
 B DT_BaseFlex::g_SendTableInit
 B DT_BaseGrenade::g_SendTable
 B DT_BaseGrenade::g_SendTableInit
 B DT_BaseParticleEntity::g_SendTable
 B DT_BaseParticleEntity::g_SendTableInit
 B DT_BasePlayer::g_SendTable
 B DT_BasePlayer::g_SendTableInit
 B DT_BasePropDoor::g_SendTable
 B DT_BasePropDoor::g_SendTableInit
 B DT_BaseShotgun::g_SendTable
 B DT_BaseShotgun::g_SendTableInit
 B DT_BaseTeamObjectiveResource::g_SendTable
 B DT_BaseTeamObjectiveResource::g_SendTableInit
 B DT_BaseTempEntity::g_SendTable
 B DT_BaseTempEntity::g_SendTableInit
 B DT_BaseToggle::g_SendTable
 B DT_BaseToggle::g_SendTableInit
 B DT_BaseTrigger::g_SendTable
 B DT_BaseTrigger::g_SendTableInit
 B DT_BaseViewModel::g_SendTable
 B DT_BaseViewModel::g_SendTableInit
 B DT_Beam::g_SendTable
 B DT_Beam::g_SendTableInit
 B DT_BeamSpotlight::g_SendTable
 B DT_BeamSpotlight::g_SendTableInit
 B DT_BoneFollower::g_SendTable
 B DT_BoneFollower::g_SendTableInit
 B DT_Boomer::g_SendTable
 B DT_Boomer::g_SendTableInit
 B DT_Breakable::g_SendTable
 B DT_Breakable::g_SendTableInit
 B DT_BreakableProp::g_SendTable
 B DT_BreakableProp::g_SendTableInit
 B DT_BreakableSurface::g_SendTable
 B DT_BreakableSurface::g_SendTableInit
 B DT_CFish::g_SendTable
 B DT_CFish::g_SendTableInit
 B DT_CSGameRules::g_SendTable
 B DT_CSGameRules::g_SendTableInit
 B DT_CSGameRulesProxy::g_SendTable
 B DT_CSGameRulesProxy::g_SendTableInit
 B DT_CSLocalPlayerExclusive::g_SendTable
 B DT_CSLocalPlayerExclusive::g_SendTableInit
 B DT_CSNonLocalPlayerExclusive::g_SendTable
 B DT_CSNonLocalPlayerExclusive::g_SendTableInit
 B DT_CSPlayer::g_SendTable
 B DT_CSPlayer::g_SendTableInit
 B DT_CSRagdoll::g_SendTable
 B DT_CSRagdoll::g_SendTableInit
 B DT_CSTeam::g_SendTable
 B DT_CSTeam::g_SendTableInit
 B DT_ClientPath::g_SendTable
 B DT_ClientPath::g_SendTableInit
 B DT_CollisionProperty::g_SendTable
 B DT_CollisionProperty::g_SendTableInit
 B DT_ColorCorrection::g_SendTable
 B DT_ColorCorrection::g_SendTableInit
 B DT_ColorCorrectionVolume::g_SendTable
 B DT_ColorCorrectionVolume::g_SendTableInit
 B DT_CountdownTimer::g_SendTable
 B DT_CountdownTimer::g_SendTableInit
 B DT_DetailController::g_SendTable
 B DT_DetailController::g_SendTableInit
 B DT_DustTrail::g_SendTable
 B DT_DustTrail::g_SendTableInit
 B DT_DynamicLight::g_SendTable
 B DT_DynamicLight::g_SendTableInit
 B DT_DynamicProp::g_SendTable
 B DT_DynamicProp::g_SendTableInit
 B DT_EffectData::g_SendTable
 B DT_EffectData::g_SendTableInit
 B DT_Embers::g_SendTable
 B DT_Embers::g_SendTableInit
 B DT_EntityDissolve::g_SendTable
 B DT_EntityDissolve::g_SendTableInit
 B DT_EntityFlame::g_SendTable
 B DT_EntityFlame::g_SendTableInit
 B DT_EntityParticleTrail::g_SendTable
 B DT_EntityParticleTrail::g_SendTableInit
 B DT_EntityParticleTrailInfo::g_SendTable
 B DT_EntityParticleTrailInfo::g_SendTableInit
 B DT_EnvDOFController::g_SendTable
 B DT_EnvDOFController::g_SendTableInit
 B DT_EnvParticleScript::g_SendTable
 B DT_EnvParticleScript::g_SendTableInit
 B DT_EnvProjectedTexture::g_SendTable
 B DT_EnvProjectedTexture::g_SendTableInit
 B DT_EnvScreenEffect::g_SendTable
 B DT_EnvScreenEffect::g_SendTableInit
 B DT_EnvScreenOverlay::g_SendTable
 B DT_EnvScreenOverlay::g_SendTableInit
 B DT_EnvTonemapController::g_SendTable
 B DT_EnvTonemapController::g_SendTableInit
 B DT_EnvWeaponfire::g_SendTable
 B DT_EnvWeaponfire::g_SendTableInit
 B DT_EnvWind::g_SendTable
 B DT_EnvWind::g_SendTableInit
 B DT_EnvWindShared::g_SendTable
 B DT_EnvWindShared::g_SendTableInit
 B DT_FinaleTrigger::g_SendTable
 B DT_FinaleTrigger::g_SendTableInit
 B DT_FireSmoke::g_SendTable
 B DT_FireSmoke::g_SendTableInit
 B DT_FireTrail::g_SendTable
 B DT_FireTrail::g_SendTableInit
 B DT_FogController::g_SendTable
 B DT_FogController::g_SendTableInit
 B DT_FuncAreaPortalWindow::g_SendTable
 B DT_FuncAreaPortalWindow::g_SendTableInit
 B DT_FuncBrush::g_SendTable
 B DT_FuncBrush::g_SendTableInit
 B DT_FuncConveyor::g_SendTable
 B DT_FuncConveyor::g_SendTableInit
 B DT_FuncElevator::g_SendTable
 B DT_FuncElevator::g_SendTableInit
 B DT_FuncLadder::g_SendTable
 B DT_FuncLadder::g_SendTableInit
 B DT_FuncMoveLinear::g_SendTable
 B DT_FuncMoveLinear::g_SendTableInit
 B DT_FuncOccluder::g_SendTable
 B DT_FuncOccluder::g_SendTableInit
 B DT_FuncPlayerInfectedClip::g_SendTable
 B DT_FuncPlayerInfectedClip::g_SendTableInit
 B DT_FuncRagdollFader::g_SendTable
 B DT_FuncRagdollFader::g_SendTableInit
 B DT_FuncReflectiveGlass::g_SendTable
 B DT_FuncReflectiveGlass::g_SendTableInit
 B DT_FuncRotating::g_SendTable
 B DT_FuncRotating::g_SendTableInit
 B DT_FuncSimpleLadder::g_SendTable
 B DT_FuncSimpleLadder::g_SendTableInit
 B DT_FuncSmokeVolume::g_SendTable
 B DT_FuncSmokeVolume::g_SendTableInit
 B DT_FuncTrackTrain::g_SendTable
 B DT_FuncTrackTrain::g_SendTableInit
 B DT_Func_Dust::g_SendTable
 B DT_Func_Dust::g_SendTableInit
 B DT_Func_LOD::g_SendTable
 B DT_Func_LOD::g_SendTableInit
 B DT_GameRulesProxy::g_SendTable
 B DT_GameRulesProxy::g_SendTableInit
 B DT_GasCan::g_SendTable
 B DT_GasCan::g_SendTableInit
 B DT_HandleTest::g_SendTable
 B DT_HandleTest::g_SendTableInit
 B DT_Hunter::g_SendTable
 B DT_Hunter::g_SendTableInit
 B DT_Infected::g_SendTable
 B DT_Infected::g_SendTableInit
 B DT_InfectedAnimationLayer::g_SendTable
 B DT_InfectedAnimationLayer::g_SendTableInit
 B DT_Inferno::g_SendTable
 B DT_Inferno::g_SendTableInit
 B DT_InfoLadderDismount::g_SendTable
 B DT_InfoLadderDismount::g_SendTableInit
 B DT_InfoOverlayAccessor::g_SendTable
 B DT_InfoOverlayAccessor::g_SendTableInit
 B DT_IntervalTimer::g_SendTable
 B DT_IntervalTimer::g_SendTableInit
 B DT_LightGlow::g_SendTable
 B DT_LightGlow::g_SendTableInit
 B DT_Local::g_SendTable
 B DT_Local::g_SendTableInit
 B DT_LocalActiveL4DWeaponData::g_SendTable
 B DT_LocalActiveL4DWeaponData::g_SendTableInit
 B DT_LocalActiveShotgunData::g_SendTable
 B DT_LocalActiveShotgunData::g_SendTableInit
 B DT_LocalActiveWeaponData::g_SendTable
 B DT_LocalActiveWeaponData::g_SendTableInit
 B DT_LocalPlayerExclusive::g_SendTable
 B DT_LocalPlayerExclusive::g_SendTableInit
 B DT_LocalWeaponData::g_SendTable
 B DT_LocalWeaponData::g_SendTableInit
 B DT_Lunge::g_SendTable
 B DT_Lunge::g_SendTableInit
 B DT_MaterialModifyControl::g_SendTable
 B DT_MaterialModifyControl::g_SendTableInit
 B DT_Molotov::g_SendTable
 B DT_Molotov::g_SendTableInit
 B DT_MolotovProjectile::g_SendTable
 B DT_MolotovProjectile::g_SendTableInit
 B DT_MovieExplosion::g_SendTable
 B DT_MovieExplosion::g_SendTableInit
 B DT_Music::g_SendTable
 B DT_Music::g_SendTableInit
 B DT_NextBot::g_SendTable
 B DT_NextBot::g_SendTableInit
 B DT_OverlayVars::g_SendTable
 B DT_OverlayVars::g_SendTableInit
 B DT_OxygenTank::g_SendTable
 B DT_OxygenTank::g_SendTableInit
 B DT_ParticleFire::g_SendTable
 B DT_ParticleFire::g_SendTableInit
 B DT_ParticlePerformanceMonitor::g_SendTable
 B DT_ParticlePerformanceMonitor::g_SendTableInit
 B DT_ParticleSmokeGrenade::g_SendTable
 B DT_ParticleSmokeGrenade::g_SendTableInit
 B DT_ParticleSystem::g_SendTable
 B DT_ParticleSystem::g_SendTableInit
 B DT_PhysBox::g_SendTable
 B DT_PhysBox::g_SendTableInit
 B DT_PhysBoxMultiplayer::g_SendTable
 B DT_PhysBoxMultiplayer::g_SendTableInit
 B DT_PhysMagnet::g_SendTable
 B DT_PhysMagnet::g_SendTableInit
 B DT_PhysicsProp::g_SendTable
 B DT_PhysicsProp::g_SendTableInit
 B DT_PipeBomb::g_SendTable
 B DT_PipeBomb::g_SendTableInit
 B DT_PipeBombProjectile::g_SendTable
 B DT_PipeBombProjectile::g_SendTableInit
 B DT_Pistol::g_SendTable
 B DT_Pistol::g_SendTableInit
 B DT_Plasma::g_SendTable
 B DT_Plasma::g_SendTableInit
 B DT_PlayerResource::g_SendTable
 B DT_PlayerResource::g_SendTableInit
 B DT_PlayerState::g_SendTable
 B DT_PlayerState::g_SendTableInit
 B DT_PointCommentaryNode::g_SendTable
 B DT_PointCommentaryNode::g_SendTableInit
 B DT_PoseController::g_SendTable
 B DT_PoseController::g_SendTableInit
 B DT_PostProcessController::g_SendTable
 B DT_PostProcessController::g_SendTableInit
 B DT_Precipitation::g_SendTable
 B DT_Precipitation::g_SendTableInit
 B DT_PrecipitationBlocker::g_SendTable
 B DT_PrecipitationBlocker::g_SendTableInit
 B DT_PredictedViewModel::g_SendTable
 B DT_PredictedViewModel::g_SendTableInit
 B DT_PropDoorRotatingCheckpoint::g_SendTable
 B DT_PropDoorRotatingCheckpoint::g_SendTableInit
 B DT_PropGlowingObject::g_SendTable
 B DT_PropGlowingObject::g_SendTableInit
 B DT_PropHealthCabinet::g_SendTable
 B DT_PropHealthCabinet::g_SendTableInit
 B DT_PropMinigun::g_SendTable
 B DT_PropMinigun::g_SendTableInit
 B DT_PropMountedGun::g_SendTable
 B DT_PropMountedGun::g_SendTableInit
 B DT_PropVehicleDriveable::g_SendTable
 B DT_PropVehicleDriveable::g_SendTableInit
 B DT_PropaneTank::g_SendTable
 B DT_PropaneTank::g_SendTableInit
 B DT_ProxyToggle::g_SendTable
 B DT_ProxyToggle::g_SendTableInit
 B DT_ProxyToggle_ProxiedData::g_SendTable
 B DT_ProxyToggle_ProxiedData::g_SendTableInit
 B DT_PumpShotgun::g_SendTable
 B DT_PumpShotgun::g_SendTableInit
 B DT_QuadraticBeam::g_SendTable
 B DT_QuadraticBeam::g_SendTableInit
 B DT_Ragdoll::g_SendTable
 B DT_Ragdoll::g_SendTableInit
 B DT_RagdollManager::g_SendTable
 B DT_RagdollManager::g_SendTableInit
 B DT_Ragdoll_Attached::g_SendTable
 B DT_Ragdoll_Attached::g_SendTableInit
 B DT_RocketTrail::g_SendTable
 B DT_RocketTrail::g_SendTableInit
 B DT_RopeKeyframe::g_SendTable
 B DT_RopeKeyframe::g_SendTableInit
 B DT_SceneEntity::g_SendTable
 B DT_SceneEntity::g_SendTableInit
 B DT_ServerAnimationData::g_SendTable
 B DT_ServerAnimationData::g_SendTableInit
 B DT_ShadowControl::g_SendTable
 B DT_ShadowControl::g_SendTableInit
 B DT_SlideshowDisplay::g_SendTable
 B DT_SlideshowDisplay::g_SendTableInit
 B DT_SmokeStack::g_SendTable
 B DT_SmokeStack::g_SendTableInit
 B DT_SmokeTrail::g_SendTable
 B DT_SmokeTrail::g_SendTableInit
 B DT_Smoker::g_SendTable
 B DT_Smoker::g_SendTableInit
 B DT_SniperRifle::g_SendTable
 B DT_SniperRifle::g_SendTableInit
 B DT_SporeExplosion::g_SendTable
 B DT_SporeExplosion::g_SendTableInit
 B DT_SporeTrail::g_SendTable
 B DT_SporeTrail::g_SendTableInit
 B DT_SpotlightEnd::g_SendTable
 B DT_SpotlightEnd::g_SendTableInit
 B DT_Sprite::g_SendTable
 B DT_Sprite::g_SendTableInit
 B DT_SpriteOriented::g_SendTable
 B DT_SpriteOriented::g_SendTableInit
 B DT_SpriteTrail::g_SendTable
 B DT_SpriteTrail::g_SendTableInit
 B DT_SteamJet::g_SendTable
 B DT_SteamJet::g_SendTableInit
 B DT_SubMachinegun::g_SendTable
 B DT_SubMachinegun::g_SendTableInit
 B DT_Sun::g_SendTable
 B DT_Sun::g_SendTableInit
 B DT_SurvivorBot::g_SendTable
 B DT_SurvivorBot::g_SendTableInit
 B DT_SurvivorPosition::g_SendTable
 B DT_SurvivorPosition::g_SendTableInit
 B DT_SurvivorRescue::g_SendTable
 B DT_SurvivorRescue::g_SendTableInit
 B DT_TEArmorRicochet::g_SendTable
 B DT_TEArmorRicochet::g_SendTableInit
 B DT_TEBSPDecal::g_SendTable
 B DT_TEBSPDecal::g_SendTableInit
 B DT_TEBeamEntPoint::g_SendTable
 B DT_TEBeamEntPoint::g_SendTableInit
 B DT_TEBeamEnts::g_SendTable
 B DT_TEBeamEnts::g_SendTableInit
 B DT_TEBeamFollow::g_SendTable
 B DT_TEBeamFollow::g_SendTableInit
 B DT_TEBeamLaser::g_SendTable
 B DT_TEBeamLaser::g_SendTableInit
 B DT_TEBeamPoints::g_SendTable
 B DT_TEBeamPoints::g_SendTableInit
 B DT_TEBeamRing::g_SendTable
 B DT_TEBeamRing::g_SendTableInit
 B DT_TEBeamRingPoint::g_SendTable
 B DT_TEBeamRingPoint::g_SendTableInit
 B DT_TEBeamSpline::g_SendTable
 B DT_TEBeamSpline::g_SendTableInit
 B DT_TEBloodSprite::g_SendTable
 B DT_TEBloodSprite::g_SendTableInit
 B DT_TEBloodStream::g_SendTable
 B DT_TEBloodStream::g_SendTableInit
 B DT_TEBreakModel::g_SendTable
 B DT_TEBreakModel::g_SendTableInit
 B DT_TEBubbleTrail::g_SendTable
 B DT_TEBubbleTrail::g_SendTableInit
 B DT_TEBubbles::g_SendTable
 B DT_TEBubbles::g_SendTableInit
 B DT_TEBullets::g_SendTable
 B DT_TEBullets::g_SendTableInit
 B DT_TEClientProjectile::g_SendTable
 B DT_TEClientProjectile::g_SendTableInit
 B DT_TEDecal::g_SendTable
 B DT_TEDecal::g_SendTableInit
 B DT_TEDust::g_SendTable
 B DT_TEDust::g_SendTableInit
 B DT_TEDynamicLight::g_SendTable
 B DT_TEDynamicLight::g_SendTableInit
 B DT_TEEffectDispatch::g_SendTable
 B DT_TEEffectDispatch::g_SendTableInit
 B DT_TEEnergySplash::g_SendTable
 B DT_TEEnergySplash::g_SendTableInit
 B DT_TEExplosion::g_SendTable
 B DT_TEExplosion::g_SendTableInit
 B DT_TEFizz::g_SendTable
 B DT_TEFizz::g_SendTableInit
 B DT_TEFootprintDecal::g_SendTable
 B DT_TEFootprintDecal::g_SendTableInit
 B DT_TEFoundryHelpers::g_SendTable
 B DT_TEFoundryHelpers::g_SendTableInit
 B DT_TEGaussExplosion::g_SendTable
 B DT_TEGaussExplosion::g_SendTableInit
 B DT_TEGlowSprite::g_SendTable
 B DT_TEGlowSprite::g_SendTableInit
 B DT_TEImpact::g_SendTable
 B DT_TEImpact::g_SendTableInit
 B DT_TEKillPlayerAttachments::g_SendTable
 B DT_TEKillPlayerAttachments::g_SendTableInit
 B DT_TELargeFunnel::g_SendTable
 B DT_TELargeFunnel::g_SendTableInit
 B DT_TEMetalSparks::g_SendTable
 B DT_TEMetalSparks::g_SendTableInit
 B DT_TEMuzzleFlash::g_SendTable
 B DT_TEMuzzleFlash::g_SendTableInit
 B DT_TEParticleSystem::g_SendTable
 B DT_TEParticleSystem::g_SendTableInit
 B DT_TEPhysicsProp::g_SendTable
 B DT_TEPhysicsProp::g_SendTableInit
 B DT_TEPlayerAnimEvent::g_SendTable
 B DT_TEPlayerAnimEvent::g_SendTableInit
 B DT_TEPlayerDecal::g_SendTable
 B DT_TEPlayerDecal::g_SendTableInit
 B DT_TEProjectedDecal::g_SendTable
 B DT_TEProjectedDecal::g_SendTableInit
 B DT_TEShatterSurface::g_SendTable
 B DT_TEShatterSurface::g_SendTableInit
 B DT_TEShowLine::g_SendTable
 B DT_TEShowLine::g_SendTableInit
 B DT_TESmoke::g_SendTable
 B DT_TESmoke::g_SendTableInit
 B DT_TESparks::g_SendTable
 B DT_TESparks::g_SendTableInit
 B DT_TESprite::g_SendTable
 B DT_TESprite::g_SendTableInit
 B DT_TESpriteSpray::g_SendTable
 B DT_TESpriteSpray::g_SendTableInit
 B DT_TETutorLesson::g_SendTable
 B DT_TETutorLesson::g_SendTableInit
 B DT_TEWorldDecal::g_SendTable
 B DT_TEWorldDecal::g_SendTableInit
 B DT_Tank::g_SendTable
 B DT_Tank::g_SendTableInit
 B DT_Team::g_SendTable
 B DT_Team::g_SendTableInit
 B DT_TeamplayRoundBasedRules::g_SendTable
 B DT_TeamplayRoundBasedRules::g_SendTableInit
 B DT_TeamplayRoundBasedRulesProxy::g_SendTable
 B DT_TeamplayRoundBasedRulesProxy::g_SendTableInit
 B DT_TerrorGameRules::g_SendTable
 B DT_TerrorGameRules::g_SendTableInit
 B DT_TerrorGameRulesProxy::g_SendTable
 B DT_TerrorGameRulesProxy::g_SendTableInit
 B DT_TerrorGun::g_SendTable
 B DT_TerrorGun::g_SendTableInit
 B DT_TerrorLocalPlayerExclusive::g_SendTable
 B DT_TerrorLocalPlayerExclusive::g_SendTableInit
 B DT_TerrorPlayer::g_SendTable
 B DT_TerrorPlayer::g_SendTableInit
 B DT_TerrorPlayerResource::g_SendTable
 B DT_TerrorPlayerResource::g_SendTableInit
 B DT_TerrorViewModel::g_SendTable
 B DT_TerrorViewModel::g_SendTableInit
 B DT_TerrorWeapon::g_SendTable
 B DT_TerrorWeapon::g_SendTableInit
 B DT_TestTraceline::g_SendTable
 B DT_TestTraceline::g_SendTableInit
 B DT_TransitioningPlayer::g_SendTable
 B DT_TransitioningPlayer::g_SendTableInit
 B DT_TriggerPlayerMovement::g_SendTable
 B DT_TriggerPlayerMovement::g_SendTableInit
 B DT_VGuiScreen::g_SendTable
 B DT_VGuiScreen::g_SendTableInit
 B DT_VoteController::g_SendTable
 B DT_VoteController::g_SendTableInit
 B DT_WORLD::g_SendTable
 B DT_WORLD::g_SendTableInit
 B DT_WaterBullet::g_SendTable
 B DT_WaterBullet::g_SendTableInit
 B DT_WaterLODControl::g_SendTable
 B DT_WaterLODControl::g_SendTableInit
 B DT_WeaponAmmoSpawn::g_SendTable
 B DT_WeaponAmmoSpawn::g_SendTableInit
 B DT_WeaponBoomerClaw::g_SendTable
 B DT_WeaponBoomerClaw::g_SendTableInit
 B DT_WeaponCSBase::g_SendTable
 B DT_WeaponCSBase::g_SendTableInit
 B DT_WeaponCSBaseGun::g_SendTable
 B DT_WeaponCSBaseGun::g_SendTableInit
 B DT_WeaponClaw::g_SendTable
 B DT_WeaponClaw::g_SendTableInit
 B DT_WeaponFirstAidKit::g_SendTable
 B DT_WeaponFirstAidKit::g_SendTableInit
 B DT_WeaponHunterClaw::g_SendTable
 B DT_WeaponHunterClaw::g_SendTableInit
 B DT_WeaponPainPills::g_SendTable
 B DT_WeaponPainPills::g_SendTableInit
 B DT_WeaponSmokerClaw::g_SendTable
 B DT_WeaponSmokerClaw::g_SendTableInit
 B DT_WeaponSpawn::g_SendTable
 B DT_WeaponSpawn::g_SendTableInit
 B DT_WeaponTankClaw::g_SendTable
 B DT_WeaponTankClaw::g_SendTableInit
 B DT_Witch::g_SendTable
 B DT_Witch::g_SendTableInit
 B DebugZombieBreakables
 B DevShotSystem
 B Director::m_isScenarioRestart
 B Director::m_isTransitioning
 B DirectorAFKTimeout
 B DirectorAITanks
 B DirectorBuildUpMinInterval
 B DirectorConvertPills
 B DirectorConvertPillsCriticalHealth
 B DirectorDebug
 B DirectorDebugScavengeItems
 B DirectorDebugThreatPlacement
 B DirectorFinaleInfinite
 B DirectorFinaleItemClusterCount
 B DirectorFinaleMaxLoops
 B DirectorFinaleMobMaxInterval
 B DirectorFinaleMobMinInterval
 B DirectorFinaleMobRelaxInterval
 B DirectorFinaleStageDelay
 B DirectorForceBackground
 B DirectorForcePanicEvent
 B DirectorForceTank
 B DirectorForceWitch
 B DirectorGasCanDensity
 B DirectorIngressRange
 B DirectorIntensityRelaxAllowWanderersThreshold
 B DirectorIntensityRelaxAllowWanderersThresholdExpert
 B DirectorIntensityRelaxAllowWanderersThresholdHard
 B DirectorIntensityRelaxThreshold
 B DirectorIntensityThreshold
 B DirectorItemClusterRange
 B DirectorMinStartPlayers
 B DirectorMolotovDensity
 B DirectorMustCreateAllScavengeItems
 B DirectorNoBosses
 B DirectorNoDeathCheck
 B DirectorNoMobs
 B DirectorNoSpecials
 B DirectorNoSurvivorBots
 B DirectorOxygenTankDensity
 B DirectorPainPillDensity
 B DirectorPanicForever
 B DirectorPipeBombDensity
 B DirectorPistolDensity
 B DirectorPropaneTankDensity
 B DirectorReadyDuration
 B DirectorReadyRadius
 B DirectorRelaxMaxFlowTravel
 B DirectorRelaxMaxInterval
 B DirectorRelaxMinInterval
 B DirectorReportScreenDelay
 B DirectorScavengeItemOverride
 B DirectorShortFinale
 B DirectorSoloLoad
 B DirectorSoloMode
 B DirectorSpecialBattlefieldRespawnInterval
 B DirectorSpecialFinaleOfferLength
 B DirectorSpecialInitialSpawnDelayMax
 B DirectorSpecialInitialSpawnDelayMaxExtra
 B DirectorSpecialInitialSpawnDelayMin
 B DirectorSpecialOriginalOfferLength
 B DirectorSpecialRespawnInterval
 B DirectorSpecialSpawnDelay
 B DirectorSpectateSpecials
 B DirectorSustainPeakMaxTime
 B DirectorSustainPeakMinTime
 B DirectorSwapTeams
 B DirectorTankBypassMaxFlowTravel
 B DirectorTankCheckpointInterval
 B DirectorTankLotteryEntryTime
 B DirectorTankLotterySelectionTime
 B DirectorTankMaxInterval
 B DirectorTankMinInterval
 B DirectorTankOffer
 B DirectorTankOfferDebug
 B DirectorThreatClearRadius
 B DirectorThreatMaxSeparation
 B DirectorThreatMinSeparation
 B DirectorThreatRadius
 B DirectorTransitionTimeout
 B DirectorUnfreezeTime
 B DirectorVSConvertPills
 B DirectorVSRaceMode
 B DirectorWeaponDensity
 B DisableDynamicPropLoading
 B DustTrail_DataDescInit::g_DataMapHolder
 B EditNav_PrecachePrecache::s_ResourcePrecacher
 B EffectsPrecachePrecache::s_ResourcePrecacher
 B EndRound
 B EntityParticleTrailInfo_t_DataDescInit::g_DataMapHolder
 B EventQueuePrioritizedEvent_t::s_Allocator
 B EventQueuePrioritizedEvent_t_DataDescInit::g_DataMapHolder
 B FarAcquireRange
 B FarAcquireTime
 B FilterDamageType_DataDescInit::g_DataMapHolder
 B FilterInfectedClass_DataDescInit::g_DataMapHolder
 B FilterTeam_DataDescInit::g_DataMapHolder
 B FirstAidKitContinuousFire
 B FirstAidKitHealOtherAttack2
 B FirstAidKitHealPercent
 B FirstAidKitMaxHeal
 B FirstAidKitRange
 B FirstAidKitUseDuration
 B FriendlyFireForgiveness
 B GoingToDieInterval
 B GunDebugPlayerIndex
 B GunStartEmpty
 B HidingSpot::m_masterMarker
 B HoldoutBoomerLimitIncrease
 B HoldoutHordeStageInterval
 B HoldoutHordeStageIntervalDecay
 B HoldoutHunterLimitIncrease
 B HoldoutMaxBoomers
 B HoldoutMaxHunters
 B HoldoutMaxSmokers
 B HoldoutMaxSpecials
 B HoldoutRoundRestartDelay
 B HoldoutSmokerLimitIncrease
 B HoldoutSpecialSpawnInterval
 B HoldoutSpecialSpawnIntervalDecay
 B HoldoutSpecialStageInterval
 B HoldoutTankStageInterval
 B HoldoutTankStageIntervalDecay
 B HulkAttackRange
 B HulkAutoSwing
 B HulkFistRadius
 B HulkPZForward
 B HulkSwingArc
 B HulkSwingDuration
 B HulkSwingFastInterval
 B HulkSwingInterval
 B HulkSwingMissInterval
 B HulkSwingPhysicsPropForce
 B HulkSwingRange
 B HulkSwingYaw
 B HulkWindupTime
 B Human_Hull
 B HunterClawBuildupGrowlPercent
 B HunterClawForce
 B HunterClawMaxBuildupTime
 B HunterClawPlaysHitAnims
 B HunterClawRange
 B HunterClawRangeDown
 B HunterClawStartBuildupTime
 B HunterClawSwingDuration
 B HunterClawSwingInterval
 B HunterClawSwingMissInterval
 B HunterCommittedAttackRange
 B HunterLeapAwayGiveUpRange
 B HunterPounceAirSpeed
 B HunterPounceLoftRate
 B HunterPounceMaxLoftAngle
 B HunterPounceReadyRange
 B Hunter_DataDescInit::g_DataMapHolder
 B IMoveHelper::sm_pSingleton
 B IPredictionSystem::g_pPredictionSystems
 B InfectedModels
 B InfernoChildSpawnIntervalMultiplier
 B InfernoChildSpawnMaxDepth
 B InfernoDamage
 B InfernoDebug
 B InfernoFlameLifetime
 B InfernoFlameSpacing
 B InfernoFriendlyFireDuration
 B InfernoInitialSpawnInterval
 B InfernoMaxChildSpawnInterval
 B InfernoMaxFlames
 B InfernoMaxRange
 B InfernoParticles
 B InfernoPerFlameSpawnDuration
 B InfernoSpawnAngle
 B InfernoSurfaceOffset
 B InfernoVelocityDecayFactor
 B InfernoVelocityFactor
 B InfernoVelocityNormalFactor
 B InfoChangelevel_DataDescInit::g_DataMapHolder
 B IntensityAveragingDamp
 B IntensityDecay
 B IntensityEnemyDeathFarRange
 B IntensityEnemyDeathNearRange
 B IntensityFactor
 B IntensityLock
 B InterfaceReg::s_pInterfaceRegs
 B Large_Centered_Hull
 B Large_Hull
 B ListIssues
 B MakeWayInterval
 B MaxWarnRange
 B Medium_Hull
 B Medium_Tall_Hull
 B MinSpecialWarnInterval
 B MinUseRange
 B MinWarnInterval
 B MinigunCooldownTime
 B MinigunDamageRate
 B MinigunDebug
 B MinigunFireAnim
 B MinigunFireAnimSpeed
 B MinigunFireThinkInterval
 B MinigunFiringSpeed
 B MinigunOverheatTime
 B MinigunRateOfFire
 B MinigunSpinDownSpeed
 B MinigunSpinUpSpeed
 B MinigunSpread
 B MinigunStandDistance
 B MixDynamicCullMaxCIEmitters
 B MixDynamicDebugCI
 B MixDynamicMaxCIEmitters
 B MixDynamicNumAttackVoxCI
 B MountedGunFireThinkInterval
 B MountedGunRateOfFire
 B MusicBankMaxDuration
 B MusicBankMinDuration
 B MusicCalmMinInterval
 B MusicDebug
 B MusicDynamicASGSpeed
 B MusicDynamicActionDecay
 B MusicDynamicAmbientDecay
 B MusicDynamicAmbientInMax
 B MusicDynamicAmbientInMin
 B MusicDynamicAmbientOutMax
 B MusicDynamicAmbientOutMin
 B MusicDynamicAmbientVolMinAlert
 B MusicDynamicAttackCICloseDecay
 B MusicDynamicAttackCICloseMax
 B MusicDynamicAttackCINearDecay
 B MusicDynamicAttackCINearMax
 B MusicDynamicAttackCIRangeMax
 B MusicDynamicAttackCIRangeNum
 B MusicDynamicAttackCIVeryCloseDecay
 B MusicDynamicAttackCIVeryCloseMax
 B MusicDynamicBoomerIntervalBeats
 B MusicDynamicCIDuckDamageMax
 B MusicDynamicCIDuckDamageMin
 B MusicDynamicCIDuckMax
 B MusicDynamicCIDuckMin
 B MusicDynamicCISightDecayTime
 B MusicDynamicCalmDecay
 B MusicDynamicDamageDecayTime
 B MusicDynamicDamageIncrement
 B MusicDynamicDataDebug
 B MusicDynamicDoDamageDecayTime
 B MusicDynamicDoDamageIncrement
 B MusicDynamicGunFireDecayTime
 B MusicDynamicGunFireIncrement
 B MusicDynamicGunFireSlowDecayTime
 B MusicDynamicGunFireSlowIncrement
 B MusicDynamicHuntRifleSpeed
 B MusicDynamicHunterIntervalBeats
 B MusicDynamicL4DRadio
 B MusicDynamicMGunSpeed
 B MusicDynamicMeleeSpeed
 B MusicDynamicMobActionCloseMax
 B MusicDynamicMobActionCloseMin
 B MusicDynamicMobActionDecayTime
 B MusicDynamicMobActionIncrement
 B MusicDynamicMobActionMax
 B MusicDynamicMobActionMin
 B MusicDynamicMobChoirBPM
 B MusicDynamicMobChoirIntervalBeats
 B MusicDynamicMobChoirIntervalRandMultMax
 B MusicDynamicMobDamageMax
 B MusicDynamicMobDamageMin
 B MusicDynamicMobDecayTime
 B MusicDynamicMobIncrement
 B MusicDynamicMobLarge
 B MusicDynamicMobMax
 B MusicDynamicMobMed
 B MusicDynamicMobMin
 B MusicDynamicMobScanStopSize
 B MusicDynamicMobSmall
 B MusicDynamicMobSpawnSize
 B MusicDynamicMobStopSize
 B MusicDynamicOn
 B MusicDynamicPSGSpeed
 B MusicDynamicPZBPM
 B MusicDynamicPZIntervalRandMultMax
 B MusicDynamicPistolSpeed
 B MusicDynamicRifleSpeed
 B MusicDynamicSICloseMax
 B MusicDynamicSIFarMin
 B MusicDynamicSIInRangeMax
 B MusicDynamicSMGSpeed
 B MusicDynamicSmokerIntervalBeats
 B MusicDynamicSoloSuccessDamageMin
 B MusicDynamicSoloSuccessDecayTime
 B MusicDynamicSoloSuccessIncrement
 B MusicDynamicThreatDecay
 B MusicDynamicUpdateInterval
 B MusicDynamicWitchAlertInterval
 B MusicDynamicWitchNearMax
 B MusicDynamicWitchNearMin
 B MusicIntensityOverride
 B MusicIntensityThreshold
 B MusicLargeAreaRevealRepeatInterval
 B MusicLargeAreaRevealThreshold
 B MusicManagerOn
 B MusicMinPendingThreatTime
 B MusicMinSafeTime
 B MusicMomentOfSilenceRepeatInterval
 B MusicMomentOfSilenceStartDelay
 B NavDebugFinaleArea
 B NavFogEdit
 B NavMaxViewDistance
 B NavMaxVisDeltaListLength
 B NavObscureRange
 B NavPotentiallyVisibleDotTolerance
 B NavTraceMaxs
 B NavTraceMins
 B NavUpdateVisibilityOnEdit
 B NearAcquireRange
 B NearAcquireTime
 B NextBotAcceleration
 B NextBotAllowAvoiding
 B NextBotAllowClimbing
 B NextBotAllowGapJumping
 B NextBotAvoid
 B NextBotAvoidInterval
 B NextBotBlind
 B NextBotCombatCharacter_DataDescInit::g_DataMapHolder
 B NextBotDebugClimbing
 B NextBotDebugHistory
 B NextBotFrictionForward
 B NextBotFrictionSideways
 B NextBotGoalLookAheadRange
 B NextBotGravity
 B NextBotHeadAimSettleDuration
 B NextBotHeadAimSteadyMaxRate
 B NextBotIgnoreSurvivors
 B NextBotLadderAlignRange
 B NextBotLeanForwardAccel
 B NextBotLeanMaxAngle
 B NextBotLeanRate
 B NextBotPathDrawIncrement
 B NextBotPathSegmentInfluenceRadius
 B NextBotPlayerCrouch
 B NextBotPlayerMove
 B NextBotPlayerMoveDirect
 B NextBotPlayerStop
 B NextBotPlayerWalk
 B NextBotSaccadeSpeed
 B NextBotSaccadeTime
 B NextBotSpeedLookAheadRange
 B NextBotStop
 B NextBotVisionNoticeHiddenRange
 B NextBotYawRate
 B PainPillsDecayRate
 B PainPillsHealthThreshold
 B PainPillsHealthValue
 B ParticleSmokeGrenade_DataDescInit::g_DataMapHolder
 B PhysBlockHeader_t_DataDescInit::g_DataMapHolder
 B PhysFrictionEffectPrecache::s_ResourcePrecacher
 B PhysObjectHeader_t_DataDescInit::g_DataMapHolder
 B PipeBombBeepIntervalDelta
 B PipeBombBeepMinInterval
 B PipeBombInitialBeepInterval
 B PipeBombShakeAmplitude
 B PipeBombShakeRadius
 B PipeBombTimerDuration
 B PrecachePointCommentaryNodePrecache::s_ResourcePrecacher
 B PumpShotgunPelletScatter
 B PunchAngleDecayRate
 B Relationship_t_DataDescInit::g_DataMapHolder
 B RemoveTransitioningPlayers
 B RescueDistance
 B RescueFinaleIgnoreDistance
 B RescueFinaleSpawnRange
 B RescueIgnoreDistance
 B RescueInterval
 B RescueMinDeadTime
 B RescueRange
 B RescueSpawnFlow
 B RescueSpawnRange
 B RescueVs
 B RescueYellDelay
 B RescueYellInterval
 B ResponseContext_t_DataDescInit::g_DataMapHolder
 B ResponseGroup_DataDescInit::g_DataMapHolder
 B Response_DataDescInit::g_DataMapHolder
 B RocketTrail_DataDescInit::g_DataMapHolder
 B SaveRestoreBlockHeader_t_DataDescInit::g_DataMapHolder
 B ShowInfected
 B ShowPoseParams
 B ShriekShakeAmplitude
 B ShriekShakeDuration
 B ShriekShakeFrequency
 B SinCosTable
 B Small_Centered_Hull
 B SmokeCloudSystem
 B SmokeTrail_DataDescInit::g_DataMapHolder
 B SmokerEscapeRange
 B SmokerTongueDelay
 B Smoker_DataDescInit::g_DataMapHolder
 B SoundCommand_t::s_Allocator
 B SoundCommand_t_DataDescInit::g_DataMapHolder
 B SporeExplosion_DataDescInit::g_DataMapHolder
 B SporeTrail_DataDescInit::g_DataMapHolder
 B StillVelLimit
 B StillViewAccelLimit
 B StumbleMaxCurveAccel
 B StumbleMaxCurveRate
 B SurvivorAccuracyUpgradeFactor
 B SurvivorAllowCrawling
 B SurvivorBot::m_isReachableCache
 B SurvivorBotAllowLeading
 B SurvivorBotAlwaysHurryVS
 B SurvivorBotBattlestationGiveUpRangeFromHuman
 B SurvivorBotBattlestationHumanHoldTime
 B SurvivorBotCloseCheckpointDoorInterval
 B SurvivorBotCloseThreatRange
 B SurvivorBotCombatSaccadeSpeed
 B SurvivorBotCrouch
 B SurvivorBotDebugApproachWaitTime
 B SurvivorBotDebugBuddy
 B SurvivorBotDebugLocomotion
 B SurvivorBotDebugRetreat
 B SurvivorBotDebugTeamMovement
 B SurvivorBotDontBash
 B SurvivorBotDontShoot
 B SurvivorBotEnforceProximityLookatTimeout
 B SurvivorBotEnforceProximityRange
 B SurvivorBotFarHearingRange
 B SurvivorBotFlashlight
 B SurvivorBotFollowStressFactor
 B SurvivorBotFriendImmobilizedReactionTimeExpert
 B SurvivorBotFriendImmobilizedReactionTimeHard
 B SurvivorBotFriendImmobilizedReactionTimeNormal
 B SurvivorBotFriendImmobilizedReactionTimeVS
 B SurvivorBotFriendlyFire
 B SurvivorBotHindranceRange
 B SurvivorBotHoldPosition
 B SurvivorBotLocomotionWaitThreshold
 B SurvivorBotMaxBattlestationRangeFromHuman
 B SurvivorBotMaxScavengeSeparation
 B SurvivorBotMinAttentionNoticeTime
 B SurvivorBotMinOrphanTimeToCover
 B SurvivorBotMinimum
 B SurvivorBotMove
 B SurvivorBotNarrowCorridorWidth
 B SurvivorBotNearHearingRange
 B SurvivorBotNeighborRange
 B SurvivorBotNormalSaccadeSpeed
 B SurvivorBotOpenFire
 B SurvivorBotPathLookAheadRange
 B SurvivorBotPerfCrawl
 B SurvivorBotPerfCrawlAng
 B SurvivorBotPerfCrawlDist
 B SurvivorBotPerfCrawlTime
 B SurvivorBotPerfDump
 B SurvivorBotPerfDumpBots
 B SurvivorBotReachabilityCacheLifetime
 B SurvivorBotReplacementInterval
 B SurvivorBotRescueVehicleLoadingRange
 B SurvivorBotSeparationDangerMaxRange
 B SurvivorBotSeparationDangerMinRange
 B SurvivorBotSeparationRange
 B SurvivorBotShowThreatAreas
 B SurvivorBotSidestepForHorde
 B SurvivorBotSkill
 B SurvivorBotStop
 B SurvivorBotTempHealthConsiderFactor
 B SurvivorBotThreatCloseRange
 B SurvivorBotThreatExposureStop
 B SurvivorBotThreatExposureWalk
 B SurvivorBotThreatFarRange
 B SurvivorBotThreatMediumRange
 B SurvivorBotThreatVeryCloseRange
 B SurvivorBotThreatVeryFarRange
 B SurvivorBotToughnessBuffer
 B SurvivorBotTransition
 B SurvivorBotUnstick
 B SurvivorBotUseButtonRange
 B SurvivorBotVomitBlindTime
 B SurvivorBot_DataDescInit::g_DataMapHolder
 B SurvivorBurnFactorEasy
 B SurvivorBurnFactorExpert
 B SurvivorBurnFactorHard
 B SurvivorBurnFactorNormal
 B SurvivorCalmDamageDelay
 B SurvivorCalmDeployDelay
 B SurvivorCalmIntensity
 B SurvivorCalmNoFlashlight
 B SurvivorCalmRecentEnemyDelay
 B SurvivorCalmWeaponDelay
 B SurvivorCommandoFactor
 B SurvivorCrawlSpeed
 B SurvivorCrouchSpeed
 B SurvivorDamageSpeedFactor
 B SurvivorDeathAnims
 B SurvivorDebugActiveAreaSet
 B SurvivorDebugInCombat
 B SurvivorDebugVisibility
 B SurvivorDragContinuousFire
 B SurvivorDragSpeedMultiplier
 B SurvivorDragType
 B SurvivorExtraDamageAmmoFactor
 B SurvivorFogVocalizePercent
 B SurvivorFriendlyFireAvoidance
 B SurvivorFriendlyFireAvoidancePitch
 B SurvivorFriendlyFireAvoidanceYaw
 B SurvivorFriendlyFireFactorEasy
 B SurvivorFriendlyFireFactorExpert
 B SurvivorFriendlyFireFactorHard
 B SurvivorFriendlyFireFactorNormal
 B SurvivorFumesRunSpeed
 B SurvivorFumesWalkSpeed
 B SurvivorGroupieRange
 B SurvivorGroupieRegenerateRate
 B SurvivorHangingEyeHeight
 B SurvivorHangingFromTongueEyeHeight
 B SurvivorHelpingHandInhibitDuration
 B SurvivorIncapMaxYaw
 B SurvivorIncapRoll
 B SurvivorIncapacitatedAccuracyPenalty
 B SurvivorIncapacitatedCycleTime
 B SurvivorIncapacitatedDecayRate
 B SurvivorIncapacitatedDizzySeverity
 B SurvivorIncapacitatedDizzyTimer
 B SurvivorIncapacitatedEyeHeight
 B SurvivorIncapacitatedHealth
 B SurvivorIncapacitatedHopelessDecayRate
 B SurvivorIncapacitatedMaxFallDamage
 B SurvivorIncapacitatedReloadMultiplier
 B SurvivorIncapacitatedTonguedDecayRate
 B SurvivorIntensityDecayThreatRange
 B SurvivorIntensityRecentEnemyDuration
 B SurvivorItDuration
 B SurvivorKnockdownRoll
 B SurvivorLean
 B SurvivorLedgeGrabHealth
 B SurvivorLedgeScalesHealth
 B SurvivorLimpHealth
 B SurvivorLimpRunSpeed
 B SurvivorLimpWalkSpeed
 B SurvivorMaxIncapacitatedCount
 B SurvivorMaxLungeStaggerDistance
 B SurvivorMaxLungeStaggerSpeed
 B SurvivorMaxTongueStaggerDistance
 B SurvivorMaxTongueStaggerDuration
 B SurvivorMaxTugDistance
 B SurvivorMaxTugDuration
 B SurvivorMeleeHitSoundIntervalTimer
 B SurvivorMinLungeStaggerSpeed
 B SurvivorModelSelection
 B SurvivorModels
 B SurvivorNoPounceOrTongue
 B SurvivorPounceVictimEyeHeight
 B SurvivorReviveAfterDrag
 B SurvivorReviveContinuousFire
 B SurvivorReviveDuration
 B SurvivorReviveHealth
 B SurvivorReviveSuccessivePenalty
 B SurvivorShoveTeammates
 B SurvivorSkills
 B SurvivorSlots
 B SurvivorSpeed
 B SurvivorSpeedBoostFactor
 B SurvivorSprintMultiplier
 B SurvivorStillPenalty
 B SurvivorStunImmunityDuration
 B SurvivorTeamHitPitchMax
 B SurvivorTeamHitPitchMin
 B SurvivorTeamHitYawMax
 B SurvivorTeamHitYawMin
 B SurvivorUnstoppableSpeed
 B SurvivorUpgradeReloadDuration
 B SurvivorUpgradeReloadShotgunDuration
 B SurvivorUpgrades
 B SurvivorVisionRange
 B SurvivorVisionRangeObscured
 B SurvivorWalkSpeed
 B TankBurnDurationExpert
 B TankBurnDurationHard
 B TankBurnDurationNormal
 B TankBurnDurationVS
 B TankGroundPoundDuration
 B TankRockOverHeadPercent
 B TankStasisTimeSuicide
 B TankStuckFailsafe
 B TankStuckTimeChooseNewTarget
 B TankStuckTimeTimeSuicide
 B TankStuckVisibilityToleranceChooseNewTarget
 B TankStuckVisibilityToleranceSuicide
 B TankThrowAimError
 B TankThrowAllowRange
 B TankThrowLeadTimeFactor
 B TankThrowLoftRate
 B TankThrowMaxLoftAngle
 B TankThrowMinInterval
 B TankVisibilityToleranceSuicide
 B Tank_DataDescInit::g_DataMapHolder
 B TemplateEntityData_t_DataDescInit::g_DataMapHolder
 B TerrorAmmoMultiplier
 B TerrorNavArea::s_nCurrVisTestCounter
 B TerrorSurvivorUpgradeQuickdraw
 B TerroristPlayerModels
 B Test_EHandle
 B TheAwardPool
 B TheDirector
 B TheFogVolumes
 B TheHidingSpots
 B TheNavAreas
 B TheNavMesh
 B ThePlayerReporter
 B TheWeaponSpawns
 B TheWeapons
 B TheZombieManager
 B ThreatRange
 B Tiny_Centered_Hull
 B Tiny_Fluid_Hull
 B Tiny_Hull
 B TongueAllowVoluntaryRelease
 B TongueBendPointDeflection
 B TongueBendPointNeedsLOS
 B TongueBreakFromDamageAmount
 B TongueBulletRadius
 B TongueChokeDamageAmount
 B TongueChokeDamageInterval
 B TongueConeStartTolerance
 B TongueDebug
 B TongueDragDamageAmount
 B TongueDroppingToGroundTime
 B TongueFlySpeed
 B TongueForceBreak
 B TongueGravityForce
 B TongueHealth
 B TongueHitDelay
 B TongueKillSmokerOnDetach
 B TongueLOSForgivenessTime
 B TongueMissDelay
 B TongueNoProgressBreakInterval
 B TongueNoProgressChokeEarlyAmbushDelay
 B TongueNoProgressChokeEarlyDelay
 B TongueNoProgressChokeTime
 B TongueNoProgressDamageInterval
 B TongueNoProgressTolerance
 B TonguePlayerDroppingToGroundTime
 B TongueRange
 B TongueReleaseFatiguePenalty
 B TongueStartPullDelay
 B TongueUnbend
 B TongueVersusConeStartTolerance
 B TongueVerticalChokeDot
 B TongueVerticalChokeHeight
 B TongueVerticalChokeTimeOffGround
 B TongueVictimAcceleration
 B TongueVictimAccuracyPenalty
 B TongueVictimMaxSpeed
 B TutorEnabled
 B VersusTankDamage
 B ViewMotionThreshold
 B ViewOffset
 B ViewOffsetDown
 B ViewOffsetForward
 B ViewOffsetUp
 B ViewSmoothingData_t_DataDescInit::g_DataMapHolder
 B VisDebug
 B VisForce
 B VisibilityMonitor
 B Vocalizer::s_bAnyoneHasSaidCheckpointLine
 B WalkableTraceMaxs
 B WalkableTraceMins
 B WeaponResourcesPrecache::s_ResourcePrecacher
 B Wide_Human_Hull
 B Wide_Short_Hull
 B WitchBurnTime
 B WitchDamagePerKillHit
 B WitchDiscardRange
 B WitchMaxRetreatRange
 B WitchMinRetreatRange
 B WitchRetreatExitHiddenDuration
 B WitchRetreatExitRange
 B WitchRetreatMinDuration
 B ZombieAddedLightMax
 B ZombieAddedLightMin
 B ZombieAirborneElevator
 B ZombieAlertDot
 B ZombieAlertRange
 B ZombieAllowAIToUseAbilities
 B ZombieAnimIdleSpeedMax
 B ZombieAnimIdleSpeedMin
 B ZombieAttackChangeTargetRange
 B ZombieAttackFlowRange
 B ZombieAttackIncapacitatedDamage
 B ZombieAttackInterval
 B ZombieAttackMaxRange
 B ZombieAttackMinRange
 B ZombieAttackMovementPenalty
 B ZombieAttackOnTheRunRange
 B ZombieAttentionRangeLyingModifier
 B ZombieAttentionRangeSittingModifier
 B ZombieAvoidForce
 B ZombieAvoidMaxRange
 B ZombieAvoidMinRange
 B ZombieAvoidPower
 B ZombieAvoidTeammates
 B ZombieAwardDebug
 B ZombieBackgroundLimit
 B ZombieBlendAttackLayer
 B ZombieBoundaryClearType
 B ZombieBoundaryMaxRange
 B ZombieBoundarySpreadSpeed
 B ZombieBrawlChance
 B ZombieBreakableDamage
 B ZombieBurningLifetime
 B ZombieChance
 B ZombieCheckpointDebug
 B ZombieClawHitPitchMax
 B ZombieClawHitPitchMin
 B ZombieClawHitYawMax
 B ZombieClawHitYawMin
 B ZombieClearMaxTime
 B ZombieClearMinTime
 B ZombieClearMinTimeRange
 B ZombieClearRange
 B ZombieCloseTargetNoticeDistance
 B ZombieCommonLimit
 B ZombieCooldownSpawnSafetyRange
 B ZombieCoughCloudExpire
 B ZombieCoughCloudInitialCoughDelay
 B ZombieCoughCloudRadius
 B ZombieCoughDuration
 B ZombieCoughFatigue
 B ZombieCoughInterval
 B ZombieCrouchSpeed
 B ZombieCullTimeout
 B ZombieDamageScreenFadeAlpha
 B ZombieDamageScreenFadeDuration
 B ZombieDeafenRadiusOne
 B ZombieDeafenRadiusThree
 B ZombieDeafenRadiusTwo
 B ZombieDebug
 B ZombieDebugActivities
 B ZombieDebugAvoid
 B ZombieDebugClimb
 B ZombieDebugCull
 B ZombieDebugEscapeScan
 B ZombieDebugFallingDamage
 B ZombieDebugFog
 B ZombieDebugInfectedServerAnim
 B ZombieDebugLedges
 B ZombieDebugMobSpawn
 B ZombieDebugNeighbors
 B ZombieDebugPopulation
 B ZombieDebugSharedRandom
 B ZombieDebugSpawnAhead
 B ZombieDebugSpawnSet
 B ZombieDebugSpawnVolumes
 B ZombieDebugSpawnableAreas
 B ZombieDebugTankSpawn
 B ZombieDensityRegionLength
 B ZombieDestroyOnAttack
 B ZombieDifficulty
 B ZombieDifficultyLocked
 B ZombieDiscardMinRange
 B ZombieDiscardRange
 B ZombieDoTracers
 B ZombieDontClear
 B ZombieDoorPoundDamage
 B ZombieDoorReopenInterval
 B ZombieDoorRetryInterval
 B ZombieExplodingForce
 B ZombieExplodingHealth
 B ZombieExplodingInnerRadius
 B ZombieExplodingLimit
 B ZombieExplodingOuterRadius
 B ZombieExplodingSpeed
 B ZombieExplodingSplat
 B ZombieExplodingSplatRadius
 B ZombieExpressions
 B ZombieFallingLandForwardSpeed
 B ZombieFallingLandHardSpeed
 B ZombieFallingLandSpeed
 B ZombieFinaleChance
 B ZombieFinaleSpawnSafetyRange
 B ZombieFirstAidKitCabinets
 B ZombieForceAttackFromSoundRange
 B ZombieFrustration
 B ZombieFrustrationLOSDelay
 B ZombieFrustrationLifetime
 B ZombieFrustrationSpawnDelay
 B ZombieGasHealth
 B ZombieGasLimit
 B ZombieGasSpeed
 B ZombieGhostAheadFlow
 B ZombieGhostAllowedInBattlefield
 B ZombieGhostCheckpointSpawnInterval
 B ZombieGhostCooldown
 B ZombieGhostDelayMax
 B ZombieGhostDelayMin
 B ZombieGhostDuration
 B ZombieGhostFinaleSpawnInterval
 B ZombieGhostFriction
 B ZombieGhostGroupSpawn
 B ZombieGhostLOSExpectedProgress
 B ZombieGhostLineOfScrimmageFar
 B ZombieGhostLineOfScrimmageNear
 B ZombieGhostLineOfScrimmageSafety
 B ZombieGhostLineOfScrimmageThreatBonus
 B ZombieGhostMinSpawnTime
 B ZombieGhostOfferAcceptanceTime
 B ZombieGhostOfferSpawnSafetyTime
 B ZombieGhostSpawnDistance
 B ZombieGhostSpawnInterval
 B ZombieGhostSpeed
 B ZombieGhostTravelDistance
 B ZombieGhostsSpawnInStart
 B ZombieGibLimbDistance
 B ZombieGibLimbDistanceBuckshot
 B ZombieGibLimbDistanceHeadshot
 B ZombieGibLimbDistanceHeadshotZoomed
 B ZombieGibLimbDistanceZoomed
 B ZombieGibLimbs
 B ZombieGrabForce
 B ZombieGrabLedgesSolo
 B ZombieGunDamage
 B ZombieGunForce
 B ZombieGunHorizPunch
 B ZombieGunKick
 B ZombieGunPhysicsForce
 B ZombieGunRange
 B ZombieGunStunDuration
 B ZombieGunSurvivorForce
 B ZombieGunSurvivorFriendPush
 B ZombieGunSurvivorShoveDot
 B ZombieGunSwingDuration
 B ZombieGunSwingInterval
 B ZombieGunVerticalPunch
 B ZombieHealth
 B ZombieHearGunfireRange
 B ZombieHearRunnerFarRange
 B ZombieHearRunnerNearRange
 B ZombieHitFromBehindCosine
 B ZombieHitFromBehindFactor
 B ZombieHitIncapFactorEasy
 B ZombieHitIncapFactorExpert
 B ZombieHitIncapFactorHard
 B ZombieHitIncapFactorNormal
 B ZombieHulkDamageSlowMaxRange
 B ZombieHulkDamageSlowMinRange
 B ZombieHulkGrenadeDamage
 B ZombieHulkGrenadeRoll
 B ZombieHulkGrenadeSlowdown
 B ZombieHulkHasSpecialBlood
 B ZombieHulkIncapacitatedDecayRate
 B ZombieHulkIncapacitatedHealth
 B ZombieHulkMaxStaggerDistance
 B ZombieHulkMaxStaggerDuration
 B ZombieHulkMaxStaggerFadeDuration
 B ZombieHulkStaggerFadeAlpha
 B ZombieHulkStaggerFadeDuration
 B ZombieHulkThrowFailInterval
 B ZombieHulkThrowInterval
 B ZombieHulkWalkSpeed
 B ZombieHunterGroundNormal
 B ZombieHunterHealth
 B ZombieHunterLimit
 B ZombieHunterLungeDistance
 B ZombieHunterLungePitch
 B ZombieHunterLungeStaggerTime
 B ZombieHunterPounceStaggerDuration
 B ZombieHunterSpeed
 B ZombieInfectedFlashlight
 B ZombieInvulnerability
 B ZombieKnockOffDeath
 B ZombieLastManRunInterval
 B ZombieLeanWallAlignSpeed
 B ZombieLookAtLocalPlayer
 B ZombieLungeCooldown
 B ZombieLungeDistanceDamage
 B ZombieLungeInterval
 B ZombieLungePower
 B ZombieLungePush
 B ZombieLungeReflect
 B ZombieLungeRelease
 B ZombieLungeSpecials
 B ZombieLungeUp
 B ZombieMaxNeighborRange
 B ZombieMaxPathLength
 B ZombieMaxPlayerZombies
 B ZombieMaxStaggerDuration
 B ZombieMegaMobSize
 B ZombieMegaMobSpawnMaxTime
 B ZombieMegaMobSpawnMinTime
 B ZombieMinLadderMountDot
 B ZombieMinionAimTolerance
 B ZombieMinionLimit
 B ZombieMobMaxSize
 B ZombieMobMinNotifyCount
 B ZombieMobMinSize
 B ZombieMobMusicSize
 B ZombieMobPopulationDensity
 B ZombieMobRechargeRate
 B ZombieMobSacrificeTimeout
 B ZombieMobSpawnFinaleSize
 B ZombieMobSpawnMaxTimeEasy
 B ZombieMobSpawnMaxTimeExpert
 B ZombieMobSpawnMaxTimeHard
 B ZombieMobSpawnMaxTimeNormal
 B ZombieMobSpawnMinTimeEasy
 B ZombieMobSpawnMinTimeExpert
 B ZombieMobSpawnMinTimeHard
 B ZombieMobSpawnMinTimeNormal
 B ZombieMove
 B ZombieMustWander
 B ZombieMuteInfected
 B ZombieNavDebug
 B ZombieNoCull
 B ZombieNoiseLevelDisplay
 B ZombieNoiseLevelFadeRate
 B ZombieNoiseLevelFootstep
 B ZombieNoiseLevelFootstepInWater
 B ZombieNoiseLevelHoldTime
 B ZombieNoiseLevelMax
 B ZombieNoiseLevelVocalize
 B ZombieNonHeadDamageFactorEasy
 B ZombieNonHeadDamageFactorExpert
 B ZombieNonHeadDamageFactorHard
 B ZombieNonHeadDamageFactorNormal
 B ZombieNoticeItRange
 B ZombieNoticeNearRange
 B ZombiePlayerLungeUp
 B ZombiePlayerZombieDebug
 B ZombiePlayerZombieLandDelay
 B ZombiePlayerZombieMinDeadTime
 B ZombiePopulation
 B ZombiePounceAllowPartialHidden
 B ZombiePounceCrouchDelay
 B ZombiePounceDamage
 B ZombiePounceDamageDelay
 B ZombiePounceDamageInterrupt
 B ZombiePounceDamageInterval
 B ZombiePounceDamageRangeMax
 B ZombiePounceDamageRangeMin
 B ZombiePounceDelay
 B ZombiePounceDoorDamage
 B ZombiePounceShakeAmplitude
 B ZombiePounceShakeDuration
 B ZombiePounceShakeRadius
 B ZombiePounceSilenceRange
 B ZombiePounceStumbleForce
 B ZombiePounceStumbleRadius
 B ZombiePreventBurrowing
 B ZombiePukingEyeHeight
 B ZombiePush
 B ZombiePushAwayForce
 B ZombiePushForce
 B ZombiePushMaxMass
 B ZombieRagdollDiscardRange
 B ZombieReloadChatterDebug
 B ZombieReloadChatterIntensity
 B ZombieReloadChatterNearbyFriendRange
 B ZombieReloadChatterRecentEnemy
 B ZombieReloadChatterShotgunAmmoThreshold
 B ZombieReloadChatterShotgunInterval
 B ZombieResetPopulationCounter
 B ZombieRespawnDistance
 B ZombieRespawnInterval
 B ZombieRestrictTeamChange
 B ZombieRoundStartAttackPrevention
 B ZombieRoundStartReplacementTime
 B ZombieRunExertionInterval
 B ZombieSafeSpawnRange
 B ZombieScoutMobSpawnRange
 B ZombieScrimmageCreepDelay
 B ZombieScrimmageCreepRate
 B ZombieScrimmageSphere
 B ZombieShotgunBonusDamageMultiplier
 B ZombieShotgunBonusDamageRange
 B ZombieShoveFriendSpeed
 B ZombieShowBottlenecks
 B ZombieShowClear
 B ZombieShowCompletelyVisibleToSurvivorTeam
 B ZombieShowDamaging
 B ZombieShowEscapeRoute
 B ZombieShowFlowDelta
 B ZombieShowFlowDistance
 B ZombieShowLastArea
 B ZombieShowMutuallyVisibleSet
 B ZombieShowPopulationDensity
 B ZombieShowPotentiallyVisible
 B ZombieShowPotentiallyVisibleToSurvivorTeam
 B ZombieShowSwings
 B ZombieShowTraffic
 B ZombieSkirmishSpawnMaxSize
 B ZombieSkirmishSpawnMaxTime
 B ZombieSkirmishSpawnMinSize
 B ZombieSkirmishSpawnMinTime
 B ZombieSpawnFlowLimit
 B ZombieSpawnHeight
 B ZombieSpawnMobsBehindChance
 B ZombieSpawnMobsFromSelectedSet
 B ZombieSpawnRange
 B ZombieSpawnSafetyRange
 B ZombieSpawnSpeed
 B ZombieSpecialSpawnInterval
 B ZombieSpectatorNightVision
 B ZombieSpeed
 B ZombieSplatSurvivorPitchMax
 B ZombieSplatSurvivorPitchMin
 B ZombieSplatSurvivorShakeAmplitude
 B ZombieSplatSurvivorShakeDuration
 B ZombieSplatSurvivorShakeFrequency
 B ZombieSplatSurvivorShakeRadius
 B ZombieSplatSurvivorYawMax
 B ZombieSplatSurvivorYawMin
 B ZombieSplatterAlpha
 B ZombieSplatterDistance
 B ZombieSplatterFade
 B ZombieSplatterHold
 B ZombieStaggerImmunityTime
 B ZombieStateDebug
 B ZombieStompAlways
 B ZombieSurvivorLimit
 B ZombieSurvivorRespawnHealth
 B ZombieSurvivorUpgradeAccuracy
 B ZombieTankAttackInterval
 B ZombieTankFootstepShakeAmplitude
 B ZombieTankFootstepShakeDuration
 B ZombieTankFootstepShakeInterval
 B ZombieTankFootstepShakeRadius
 B ZombieTankGroundPoundRevealDistance
 B ZombieTankHealth
 B ZombieTankRockDebug
 B ZombieTankRockRadius
 B ZombieTankSpeed
 B ZombieTankSpeedVs
 B ZombieTankThrowForce
 B ZombieTankThrowHealth
 B ZombieTanksBlockMolotovs
 B ZombieTerrifyDuration
 B ZombieThrottleHitIntervalEasy
 B ZombieThrottleHitIntervalExpert
 B ZombieThrottleHitIntervalHard
 B ZombieThrottleHitIntervalNormal
 B ZombieTracerParticles
 B ZombieTracerSpacing
 B ZombieUseTolerance
 B ZombieVisionRange
 B ZombieVisionRangeAlert
 B ZombieVisionRangeObscured
 B ZombieVisionRangeObscuredAlert
 B ZombieVocalizeBurnMaxInterval
 B ZombieVocalizeBurnMinInterval
 B ZombieVocalizeShotInterval
 B ZombieVomit
 B ZombieVomitDuration
 B ZombieVomitFadeDuration
 B ZombieVomitFadeStart
 B ZombieVomitFatigue
 B ZombieVomitHitPitchMax
 B ZombieVomitHitPitchMin
 B ZombieVomitHitYawMax
 B ZombieVomitHitYawMin
 B ZombieVomitInterval
 B ZombieVomitRange
 B ZombieVomitSlideMult
 B ZombieVomitSlideRate
 B ZombieWalkSpeed
 B ZombieWanderingDensity
 B ZombieWitchAllowChangeVictim
 B ZombieWitchAngerRate
 B ZombieWitchAttackRange
 B ZombieWitchBerserkRange
 B ZombieWitchDamage
 B ZombieWitchFlashlightRange
 B ZombieWitchHealth
 B ZombieWitchHostileAtMeAnger
 B ZombieWitchMaxThreatTime
 B ZombieWitchMinThreatTime
 B ZombieWitchPersonalSpace
 B ZombieWitchRelaxRate
 B ZombieWitchSpeed
 B ZombieWitchSpeedInjured
 B ZombieWitchThreatHostileRange
 B ZombieWitchThreatNormalRange
 B ZombieWitchTongueRange
 B ability_throwPrecache::s_ResourcePrecacher
 B ability_vomitPrecache::s_ResourcePrecacher
 B ai_LOS_mode
 B ai_debug_los
 B ai_debug_ragdoll_magnets
 B ai_debug_shoot_positions
 B ai_debug_speech
 B ai_expression_frametime
 B ai_expression_optimization
 B ai_force_serverside_ragdoll
 B ai_post_frame_navigation
 B ai_sequence_debug
 B ai_setupbones_debug
 B ai_shot_bias_max
 B ai_shot_bias_min
 B ai_show_hull_attacks
 B ai_use_visibility_cache
 B aimcrosshair
 B allowNPCs
 B ammo_assaultrifle_max
 B ammo_buckshot_max
 B ammo_firstaid_max
 B ammo_huntingrifle_max
 B ammo_minigun_max
 B ammo_molotov_max
 B ammo_painpills_max
 B ammo_pipebomb_max
 B ammo_pistol_max
 B ammo_smg_max
 B ammo_turret_infected_damage
 B ammo_turret_max
 B ammo_turret_pz_damage
 B ammo_turret_survivor_damage
 B ammo_turret_tank_damage
 B ammo_turret_witch_damage
 B audioparams_t_DataDescInit::g_DataMapHolder
 B autoaim_max_deflect
 B autoaim_max_dist
 B autoaim_viewing_client
 B blackboxrecorder
 B boomerPrecache::s_ResourcePrecacher
 B bot_crouch
 B bot_freeze
 B bot_mimic
 B bot_mimic_yaw_offset
 B breakable_disable_gib_limit
 B breakable_multiplayer
 B buddha
 B car_alarm_chirp_distance
 B car_alarm_chirp_duration
 B car_alarm_chirp_interval
 B car_alarm_distance
 B car_alarm_duration
 B cc_CreatePredictionError
 B cc_Test_CreateEntity
 B cc_Test_InitRandomEntitySpawner
 B cc_Test_ProxyToggle_EnableProxy
 B cc_Test_ProxyToggle_SetValue
 B cc_Test_RandomPlayerPosition
 B cc_Test_RandomizeInPVS
 B cc_Test_RemoveAllRandomEntities
 B cc_Test_SpawnRandomEntities
 B cc_achievement_debug
 B cc_achievement_disable
 B cc_showmissing
 B chet_debug_idle
 B cl_backspeed
 B cl_forwardspeed
 B cl_sidespeed
 B cl_use_simd_bones
 B collision_shake_amp
 B collision_shake_freq
 B collision_shake_time
 B colorcorrection
 B commentary_available
 B cs_ShowStateTransitions
 B currenttoken
 B cvar
 B datacache
 B debug_l4dverbose
 B debug_materialmodifycontrol
 B debug_physimpact
 B debug_touchlinks
 B debug_visibility_monitor
 B debugoverlay
 B decalfrequency
 B defaultteam
 B developer
 B director_force_versus_start
 B director_garage_pistol_density
 B director_garage_weapon_density
 B displaysoundlist
 B dump_achievement_counters
 B engine
 B enginesound
 B enginetrace
 B ent_debugkeys
 B ent_messages_draw
 B ent_show_contexts
 B ent_steadystate_batchsize
 B ent_steadystate_cooldown
 B ent_steadystate_delay
 B ent_steadystate_enable
 B ent_steadystate_interval
 B entityflamePrecache::s_ResourcePrecacher
 B entitytable_t_DataDescInit::g_DataMapHolder
 B escape_routePrecache::s_ResourcePrecacher
 B fSentencesInit
 B fall_speed_fatal
 B fall_speed_safe
 B falldamage
 B filesystem
 B fire_absorbrate
 B fire_dmgbase
 B fire_dmginterval
 B fire_dmgscale
 B fire_extabsorb
 B fire_extscale
 B fire_growthrate
 B fire_heatscale
 B fire_incomingheatscale
 B fire_maxabsorb
 B fish_dormant
 B fix_versus_convars
 B flashlight
 B flex_expression
 B flex_talk
 B flexsetting_t_DataDescInit::g_DataMapHolder
 B flexsettinghdr_t_DataDescInit::g_DataMapHolder
 B flexweight_t_DataDescInit::g_DataMapHolder
 B fogparams_t_DataDescInit::g_DataMapHolder
 B fogplayerparams_t_DataDescInit::g_DataMapHolder
 B footsteps
 B forcerespawn
 B fraglimit
 B friendlyfire
 B fs_convert
 B fuel_barrel_damage_amount
 B fuel_barrel_damage_radius
 B fuel_barrel_debug
 B fuel_barrel_flame_instances
 B fuel_barrel_health
 B fuel_barrel_screen_shake_amplitude
 B fuel_barrel_screen_shake_duration
 B fuel_barrel_screen_shake_frequency
 B fuel_barrel_screen_shake_radius
 B func_break_max_pieces
 B func_break_reduction_factor
 B func_breakdmg_bullet
 B func_breakdmg_club
 B func_breakdmg_explosive
 B gEntList
 B gEvilImpulse101
 B g_AIFoesTalkSemaphore
 B g_AIFriendliesTalkSemaphore
 B g_AchievementMsgHandler
 B g_ActiveGibCount
 B g_ActiveRescue
 B g_ActivityList
 B g_ActivityStrings
 B g_AreaPortals
 B g_BanMasks
 B g_BitWriteMasks
 B g_CheckClient
 B g_Collisions
 B g_ColorSurvivor
 B g_ColorZombie
 B g_CommentarySystem
 B g_Commentary_SaveRestoreBlockHandler
 B g_DebugPathfindCounter
 B g_DefaultResponseSystemSaveRestoreBlockHandler
 B g_EntListMemPool
 B g_EntityClassnames
 B g_EntityCollisionHash
 B g_EntityListPool
 B g_EntityOrientations
 B g_EntityPositions
 B g_EntitySaveRestoreBlockHandler
 B g_EntsByClassname
 B g_EquipmentInfo
 B g_EventList
 B g_EventQueue
 B g_EventQueue_SaveRestoreBlockHandler
 B g_EventStrings
 B g_ExpressionEvaluator
 B g_ExtraMasks
 B g_FlexSceneFileManager
 B g_HandleTest
 B g_IsZombieSpawnMobRush
 B g_KeyValuesErrorStack
 B g_L4DSurvivorGroupInfo
 B g_Language
 B g_MapEntityRefs
 B g_MatrixPool
 B g_MultiDamage
 B g_NetworkPropertyEventMgr
 B g_PhysObjSaveRestoreOps
 B g_PhysSaveRestoreBlockHandler
 B g_PhysWorldObject
 B g_PhysicsHook
 B g_PlayerModEnable
 B g_PlayerSurfaceTriggers
 B g_PointTemplatePrecacher
 B g_PostSimulationQueue
 B g_PrecacheOtherList
 B g_PropDataSystem
 B g_QuaternionPool
 B g_RagdollLVManager
 B g_RemarkableList
 B g_RespawningCheckpoint
 B g_ResponseQueueManager
 B g_SaveRestoreBlockSet
 B g_SentBanMasks
 B g_SentGameRulesMasks
 B g_ServerGameDLL
 B g_SimThinkManager
 B g_SkyList
 B g_SolverList
 B g_SoundscapeSystem
 B g_StressEntities
 B g_StressEntityRegs
 B g_StringTableBlackMarket
 B g_StringTableGameRules
 B g_StudioHdrToActivityMaps
 B g_StudioHdrToActivityMapsLock
 B g_Teams
 B g_TemplateEntityHook
 B g_Template_SaveRestoreBlockHandler
 B g_TerrorEventLog
 B g_TerrorPlayerPostThinkQueue
 B g_TextStatsMgr
 B g_TokenProcessor
 B g_TransitioningPlayers
 B g_VBAllocTracker
 B g_VectorPool
 B g_VguiScreenStringOps
 B g_VoiceGameMgr
 B g_VoiceGameMgrHelper
 B g_WeaponList
 B g_ZombieClass
 B g_bDisableEhandleAccess
 B g_bInCommentaryMode
 B g_bNeedRestore
 B g_bReceivedChainedUpdateOnRemove
 B g_bUnget
 B g_bWantModEnable
 B g_bWeaponHandlesInit
 B g_cv_BlendBonesMode
 B g_debug_angularsensor
 B g_debug_constraint_sounds
 B g_debug_doors
 B g_debug_npc_vehicle_roles
 B g_debug_physcannon
 B g_debug_ragdoll_removal
 B g_debug_transitions
 B g_debug_vehiclebase
 B g_debug_vehicleexit
 B g_debug_vehiclesound
 B g_fGameOver
 B g_flGameStatsUpdateTime
 B g_flLastBodyPitch
 B g_flLastBodyYaw
 B g_hControlPointMasters
 B g_hGameGibManager
 B g_hWeaponFireTriggers
 B g_iAutoBuyAK47Purchases
 B g_iAutoBuyFamasPurchases
 B g_iAutoBuyGalilPurchases
 B g_iAutoBuyM4A1Purchases
 B g_iAutoBuyPurchases
 B g_iAutoBuyVestHelmPurchases
 B g_iAutoBuyVestPurchases
 B g_iCounterTVictories
 B g_iCurrentTemplateInstance
 B g_iDevShotCameraCount
 B g_iReBuyPurchases
 B g_iSkillLevel
 B g_iTerroristVictories
 B g_iWeaponPurchases
 B g_interactionHitByPlayerThrownPhysObj
 B g_iszFuncBrushClassname
 B g_iszPhysicsPropClassname
 B g_nInsideDispatchUpdateTransmitState
 B g_nTerrorPlayers
 B g_pAIConceptTable
 B g_pAVI
 B g_pAttributeTypeName
 B g_pBIK
 B g_pCVar
 B g_pDataCache
 B g_pDeveloper
 B g_pDmeMakefileUtils
 B g_pForceAttachEdict
 B g_pFullFileSystem
 B g_pGameRules
 B g_pInputSystem
 B g_pLastCTSpawn
 B g_pLastSpawn
 B g_pLastTerroristSpawn
 B g_pMDLCache
 B g_pMapInfo
 B g_pMapInfoVersus
 B g_pMatSystemSurface
 B g_pMatchExtL4D
 B g_pMatchFramework
 B g_pMaterialSystem
 B g_pMaterialSystemDebugTextureInfo
 B g_pMaterialSystemHardwareConfig
 B g_pNetworkSystem
 B g_pPhysicsCollision
 B g_pPlayerResource
 B g_pProcessUtils
 B g_pQueuedLoader
 B g_pQuickTime
 B g_pResourceAccessControl
 B g_pSelectedZombieSpawn
 B g_pServerClassHead
 B g_pShadowEntities
 B g_pSharedChangeInfo
 B g_pSoundEmitterSystem
 B g_pStringTableClientSideChoreoScenes
 B g_pStringTableEffectDispatch
 B g_pStringTableInfoPanel
 B g_pStringTableMaterials
 B g_pStringTableParticleEffectNames
 B g_pStringTableVguiScreen
 B g_pStudioRender
 B g_pUtlSortVectorQSortContext
 B g_pVGui
 B g_pVGuiInput
 B g_pVGuiLocalize
 B g_pVGuiPanel
 B g_pVGuiSchemeManager
 B g_pVGuiSurface
 B g_pVGuiSystem
 B g_pVoiceServer
 B g_ragdoll_max_fps
 B g_ragdoll_maxcount
 B g_ragdoll_maxcount_boss
 B g_ragdoll_maxcount_generic
 B g_ragdoll_maxcount_gib
 B g_ragdoll_maxcount_special
 B g_ragdoll_maxcount_survivor
 B g_ragdoll_min_fps
 B g_sModelIndexBloodDrop
 B g_sModelIndexBloodSpray
 B g_sModelIndexBubbles
 B g_sModelIndexFireball
 B g_sModelIndexLaser
 B g_sModelIndexSmoke
 B g_spawnPath
 B g_vecAttackDir
 B g_voteController
 B game_shadowcontrol_params_t_DataDescInit::g_DataMapHolder
 B gameeventmanager
 B gamestatsuploader
 B giPrecacheGrunt
 B globalentity_t_DataDescInit::g_DataMapHolder
 B god
 B gpGlobals
 B groundlinksallocated
 B hl2_episodic
 B holdout_lull_time
 B holdout_lull_time_increment
 B holdout_lull_time_max
 B holdout_tank_double_spawn_delay
 B hunterPrecache::s_ResourcePrecacher
 B infectedPrecache::s_ResourcePrecacher
 B infernoPrecache::s_ResourcePrecacher
 B inferno_max_trace_per_tick
 B inferno_scorch_decals
 B info_survivor_rescuePrecache::s_ResourcePrecacher
 B l4d_show_incapupdate
 B l4d_show_thinksuppression
 B l4d_show_weaponequip
 B l4d_stats_nogameplaycheck
 B ladder_autocenter
 B ladder_console_controls
 B ladder_horizon
 B lineartolightmap
 B lineartovertex
 B linksallocated
 B locksound_t_DataDescInit::g_DataMapHolder
 B lservercfgfile
 B m_debugOverlayLine
 B magnetted_objects_t_DataDescInit::g_DataMapHolder
 B mapcyclefile
 B mat_hdr_tonemapscale
 B materials
 B maxCloseAttempts
 B mdlcache
 B mdllib
 B modelinfo
 B modifiedconvars_t_DataDescInit::g_DataMapHolder
 B molotov_projectilePrecache::s_ResourcePrecacher
 B motd_enabled
 B mounted_gun_cooldown_time
 B mounted_gun_damage
 B mounted_gun_distance
 B mounted_gun_mount_cooldown_time
 B mounted_gun_overheat_penalty_time
 B mounted_gun_overheat_time
 B mp_allowspectators
 B mp_autokick
 B mp_autoteambalance
 B mp_blockstyle
 B mp_bonusroundtime
 B mp_buytime
 B mp_c4timer
 B mp_capdeteriorate_time
 B mp_capstyle
 B mp_chattime
 B mp_clan_ready_signal
 B mp_clan_readyrestart
 B mp_enableroundwaittime
 B mp_facefronttime
 B mp_fadetoblack
 B mp_feetyawrate
 B mp_feetyawrate_max
 B mp_forcecamera
 B mp_freezetime
 B mp_gamemode
 B mp_humanteam
 B mp_ik
 B mp_limitteams
 B mp_logdetail
 B mp_maxrounds
 B mp_playerid
 B mp_playerid_delay
 B mp_playerid_hold
 B mp_respawnwavetime
 B mp_restartgame
 B mp_restartround
 B mp_roundlimit
 B mp_roundtime
 B mp_showcleanedupents
 B mp_showroundtransitions
 B mp_spawnprotectiontime
 B mp_stalemate_enable
 B mp_stalemate_timelimit
 B mp_startmoney
 B mp_teams_unbalance_limit
 B mp_timelimit
 B mp_tkpunish
 B mp_waitingforplayers_cancel
 B mp_waitingforplayers_restart
 B mp_waitingforplayers_time
 B mp_weapon_ak47_price
 B mp_weapon_aug_price
 B mp_weapon_awp_price
 B mp_weapon_deagle_price
 B mp_weapon_elite_price
 B mp_weapon_famas_price
 B mp_weapon_fiveseven_price
 B mp_weapon_g3sg1_price
 B mp_weapon_galil_price
 B mp_weapon_glock_price
 B mp_weapon_m249_price
 B mp_weapon_m3_price
 B mp_weapon_m4a1_price
 B mp_weapon_mac10_price
 B mp_weapon_mp5navy_price
 B mp_weapon_p228_price
 B mp_weapon_p90_price
 B mp_weapon_scout_price
 B mp_weapon_sg550_price
 B mp_weapon_sg552_price
 B mp_weapon_tmp_price
 B mp_weapon_ump45_price
 B mp_weapon_usp_price
 B mp_weapon_xm1014_price
 B mp_winlimit
 B name
 B nav_area_bgcolor
 B nav_area_max_size
 B nav_coplanar_slope_limit
 B nav_coplanar_slope_limit_displacement
 B nav_corner_adjust_adjacent
 B nav_create_area_at_feet
 B nav_create_place_on_ground
 B nav_debug_blocked
 B nav_displacement_test
 B nav_draw_limit
 B nav_edit
 B nav_generate_fencetops
 B nav_generate_fixup_jump_areas
 B nav_generate_incremental_range
 B nav_quicksave
 B nav_selected_set_border_color
 B nav_selected_set_color
 B nav_show_approach_points
 B nav_show_area_info
 B nav_show_compass
 B nav_show_danger
 B nav_show_light_intensity
 B nav_show_node_grid
 B nav_show_node_id
 B nav_show_nodes
 B nav_show_player_area
 B nav_show_player_counts
 B nav_slope_limit
 B nav_slope_tolerance
 B nav_snap_to_grid
 B nav_solid_props
 B nav_split_place_on_ground
 B nav_test_node
 B nav_test_node_crouch
 B nav_test_node_crouch_dir
 B nav_trouble_test_area
 B nav_trouble_test_debug_duration
 B nav_trouble_walkable_backtrace
 B nav_world_center
 B nb_update_debug
 B nb_update_framelimit
 B nb_update_frequency
 B nb_update_maxslide
 B networkstringtable
 B nextlevel
 B noclip_fixup
 B notarget
 B npc_height_adjust
 B npc_vphysics
 B old_radius_damage
 B p4
 B pINetSupport
 B particle_test_attach_attachment
 B particle_test_attach_mode
 B particle_test_file
 B partition
 B perf_fire_bullet_single
 B phys_impactforcescale
 B phys_pushscale
 B phys_speeds
 B phys_stressbodyweights
 B phys_timescale
 B phys_upimpactforcescale
 B physcannon_maxmass
 B physcollision
 B physenv
 B physfollower_t_DataDescInit::g_DataMapHolder
 B physics
 B physprops
 B pipe_bomb_projectilePrecache::s_ResourcePrecacher
 B playerPrecache::s_ResourcePrecacher
 B player_debug_print_damage
 B player_max_separation_force
 B player_throwforce
 B predicted_viewmodelPrecache::s_ResourcePrecacher
 B prop_active_gib_limit
 B prop_active_gib_max_fade_time
 B props_break_max_pieces
 B props_break_max_pieces_perframe
 B r_AirboatViewDampenDamp
 B r_AirboatViewDampenFreq
 B r_AirboatViewZHeight
 B r_JeepFOV
 B r_JeepViewDampenDamp
 B r_JeepViewDampenFreq
 B r_JeepViewZHeight
 B r_VehicleViewDampen
 B r_vehicleBrakeRate
 B r_visualizetraces
 B random_valve
 B rgv3tStuckTable
 B rr_debugplayer
 B rr_debugresponseconcept
 B rr_debugresponses
 B rr_debugrule
 B rr_dumpresponses
 B rr_followup_maxdist
 B rr_remarkable_world_entities_replay_limit
 B rr_thenany_score_slop
 B s_ChildrenInfoUnpack
 B s_ColorCorrectionSystem
 B s_DMXAllocator
 B s_FogSystem
 B s_NoEscConversion
 B s_PostProcessSystem
 B s_RagdollLRU
 B s_StringCharConversion
 B s_TonemapSystem
 B s_bMathlibInitialized
 B s_csPlayerResponseSystem
 B s_pConv
 B s_pParticleSystemDefinitionUnpack
 B s_selectedSetBorderColor
 B s_selectedSetColor
 B s_testNavID
 B sb_pushscale
 B scene_clientflex
 B scene_clientplayback
 B scenefilecache
 B scriptmanager
 B servercfgfile
 B serverenginetools
 B serverfoundry
 B serverpluginhelpers
 B shotgun_reload_cancel_delay
 B showanimstate_activities
 B showanimstate_log
 B showtriggers
 B sk_autoaim_mode
 B sk_player_arm
 B sk_player_chest
 B sk_player_head
 B sk_player_leg
 B sk_player_stomach
 B skill
 B sky3dparams_t_DataDescInit::g_DataMapHolder
 B smokerPrecache::s_ResourcePrecacher
 B soundemitterbase
 B soundscape_debug
 B spec_filter
 B spec_filter_infected
 B spec_filter_survivors
 B spec_freeze_time
 B spec_freeze_traveltime
 B spraycanPrecache::s_ResourcePrecacher
 B staticpropmgr
 B step_spline
 B studiorender
 B suitvolume
 B survivor_ff_tolerance
 B survivor_respawn_with_guns
 B sv_accelerate
 B sv_airaccelerate
 B sv_allow_votes
 B sv_alltalk
 B sv_alternateticks
 B sv_autosave
 B sv_backspeed
 B sv_bonus_challenge
 B sv_bounce
 B sv_cheats
 B sv_clearhinthistory
 B sv_cycle_latch_timer
 B sv_debug_player_use
 B sv_disable_querycache
 B sv_doors_push_players
 B sv_footstepinterval
 B sv_footsteps
 B sv_force_transmit_ents
 B sv_friction
 B sv_gametypes
 B sv_gravity
 B sv_hibernate_when_empty
 B sv_infinite_ammo
 B sv_lagcompensationforcerestore
 B sv_lagflushbonecache
 B sv_massreport
 B sv_max_usercmd_future_ticks
 B sv_maxreplay
 B sv_maxspeed
 B sv_maxunlag
 B sv_maxvelocity
 B sv_netvisdist
 B sv_no_navmesh
 B sv_noclipaccelerate
 B sv_noclipduringpause
 B sv_noclipfriction
 B sv_noclipspeed
 B sv_pushaway_clientside
 B sv_pushaway_clientside_size
 B sv_pushaway_force
 B sv_pushaway_max_force
 B sv_pushaway_max_player_force
 B sv_pushaway_min_force
 B sv_pushaway_min_player_speed
 B sv_pushaway_player_force
 B sv_pvsskipanimation
 B sv_regeneration_wait_time
 B sv_rollangle
 B sv_rollspeed
 B sv_runcmds
 B sv_showanimstate
 B sv_showdamage
 B sv_showdebugtracers
 B sv_showfootsteps
 B sv_showimpacts
 B sv_showladders
 B sv_showlagcompensation
 B sv_showplayerhitboxes
 B sv_skyname
 B sv_soundemitter_trace
 B sv_specaccelerate
 B sv_specnoclip
 B sv_specspeed
 B sv_stepsize
 B sv_stopspeed
 B sv_strict_notarget
 B sv_suppress_viewpunch
 B sv_teststepsimulation
 B sv_tracereffects_limit_general
 B sv_turbophysics
 B sv_turbophysics_shadow
 B sv_unlag
 B sv_unlag_debug
 B sv_unlag_fixstuck
 B sv_unlockedchapters
 B sv_vehicle_autoaim_scale
 B sv_vote_command_delay
 B sv_vote_creation_timer
 B sv_vote_failure_timer
 B sv_vote_issue_change_difficulty_allowed
 B sv_vote_issue_change_map_later_allowed
 B sv_vote_issue_change_map_now_allowed
 B sv_vote_issue_change_mission_allowed
 B sv_vote_issue_kick_allowed
 B sv_vote_issue_restart_game_allowed
 B sv_vote_kick_ban_duration
 B sv_vote_timer_duration
 B sv_wateraccelerate
 B sv_waterdist
 B sv_waterfriction
 B sv_zoo_model_filter
 B sv_zoo_spacing
 B sv_zoo_spacing_rows
 B sv_zoo_spacing_wrap
 B sv_zoo_tint_clr
 B sv_zoo_tint_loop
 B sv_zoo_wrap_skin
 B tankPrecache::s_ResourcePrecacher
 B tank_raffle_debug
 B tank_rockPrecache::s_ResourcePrecacher
 B tauntfrequency
 B teamlist
 B teamoverride
 B teamplay
 B template_debug
 B template_t_DataDescInit::g_DataMapHolder
 B test_progression_loop
 B test_progression_loop_rotate_maps
 B test_progression_loop_time
 B test_progression_restarts_before_rotate
 B think_limit
 B thinkfunc_t_DataDescInit::g_DataMapHolder
 B token
 B tokencount
 B tp_schedule_post_think
 B trace_report
 B tv_delaymapchange
 B vehicle_crashsound_t_DataDescInit::g_DataMapHolder
 B vehicle_gear_t_DataDescInit::g_DataMapHolder
 B vehiclesounds_t_DataDescInit::g_DataMapHolder
 B versus_boss_buffer
 B versus_boss_debug
 B versus_boss_flow_max
 B versus_boss_flow_max_finale
 B versus_boss_flow_max_intro
 B versus_boss_flow_min
 B versus_boss_flow_min_finale
 B versus_boss_flow_min_intro
 B versus_boss_flow_test
 B versus_boss_padding_max
 B versus_boss_padding_min
 B versus_boss_spawning
 B versus_force_start_time
 B versus_round_restarttimer
 B versus_round_restarttimer_finale
 B versus_shove_hunter_fov
 B versus_shove_hunter_fov_pouncing
 B versus_tank_bonus_health
 B versus_tank_chance
 B versus_tank_chance_finale
 B versus_tank_chance_intro
 B versus_tank_flow_team_variation
 B versus_winning_team_goes_last
 B versus_witch_chance
 B versus_witch_chance_finale
 B versus_witch_chance_intro
 B versus_witch_flow_team_variation
 B vgui_screenPrecache::s_ResourcePrecacher
 B vismon_poll_frequency
 B vismon_trace_limit
 B voice_serverdebug
 B vprof_scope_entity_gamephys
 B vprof_scope_entity_thinks
 B vprof_think_limit
 B vs_max_team_switches
 B vs_score_pp_health
 B vs_score_pp_healthbuffer
 B vs_show_life_stats
 B vs_threat_initial_distance_first_map_max
 B vs_threat_initial_distance_first_map_min
 B vs_threat_initial_distance_max
 B vs_threat_initial_distance_min
 B vs_threat_radius
 B weapon_autoshotgunPrecache::s_ResourcePrecacher
 B weapon_boomer_clawPrecache::s_ResourcePrecacher
 B weapon_first_aid_kitPrecache::s_ResourcePrecacher
 B weapon_gascanPrecache::s_ResourcePrecacher
 B weapon_hunter_clawPrecache::s_ResourcePrecacher
 B weapon_hunting_riflePrecache::s_ResourcePrecacher
 B weapon_molotovPrecache::s_ResourcePrecacher
 B weapon_oxygentankPrecache::s_ResourcePrecacher
 B weapon_pain_pillsPrecache::s_ResourcePrecacher
 B weapon_pipe_bombPrecache::s_ResourcePrecacher
 B weapon_pistolPrecache::s_ResourcePrecacher
 B weapon_propanetankPrecache::s_ResourcePrecacher
 B weapon_pumpshotgunPrecache::s_ResourcePrecacher
 B weapon_riflePrecache::s_ResourcePrecacher
 B weapon_showproficiency
 B weapon_smgPrecache::s_ResourcePrecacher
 B weapon_smoker_clawPrecache::s_ResourcePrecacher
 B weapon_tank_clawPrecache::s_ResourcePrecacher
 B weaponstay
 B witchPrecache::s_ResourcePrecacher
 B xbox_autothrottle
 B xbox_steering_deadzone
 B xbox_throttlebias
 B xbox_throttlespoof
 B xboxsystem
 B xc_crouch_debounce
 B z_forcezombiemodel
 B z_forcezombiemodelname
 B z_hunter_max_pounce_bonus_damage
 B z_last_area_update_tolerance
 B z_max_survivor_damage
 B z_minigun_atomize
 B z_randombodygroups
 B z_randomskins
 B z_tank_autoshotgun_dmg_scale
 B z_tank_burning_lifetime
 B z_versus_boomer_limit
 B z_versus_smoker_limit
 B z_versus_wandering_density
 B z_vomit_boxsize
 B z_vomit_debug
 B z_vomit_drag
 B z_vomit_float
 B z_vomit_lifetime
 B z_vomit_maxdamagedist
 B z_vomit_vecrand
 B z_vomit_velocity
 B z_vomit_velocityfadeend
 B z_vomit_velocityfadestart
 CThreadEvent::CThreadEvent(bool)
 CThreadEvent::Set()
 CThreadFastMutex::Lock(unsigned int, unsigned int) volatile
 CThreadRWLock::LockForWrite()
 CThreadRWLock::UnlockWrite()
 CThreadRWLock::WaitForRead()
 CThreadSpinRWLock::LockForRead()
 CThreadSpinRWLock::SpinLockForWrite(unsigned int)
 CThreadSpinRWLock::UnlockRead()
 CThreadSpinRWLock::UnlockWrite()
 CThreadSyncObject::~CThreadSyncObject()
 CUniformRandomStream::CUniformRandomStream()
 CUniformRandomStream::RandomFloat(float, float)
 CUniformRandomStream::RandomInt(int, int)
 CUniformRandomStream::SetSeed(int)
 CVProfNode::EnterScope()
 CVProfNode::ExitScope()
 CVProfNode::GetSubNode(char const*, int, char const*, int)
 CVProfNode::MarkFrame()
 CVProfNode::Pause()
 CVProfNode::Reset()
 CVProfNode::Resume()
 CVProfile::FindOrCreateCounter(char const*, CounterGroup_t)
 CVProfile::OutputReport(int, char const*, int)
 CommandLine_Tier0
 ConColorMsg(Color const&, char const*, ...)
 D AI_Response::m_DataMap
 D AI_ResponseParams::m_DataMap
 D Action<Boomer>::DebugString() const::str
 D Action<Boomer>::GetFullName() const::str
 D Action<Hunter>::DebugString() const::str
 D Action<Hunter>::GetFullName() const::str
 D Action<Infected>::DebugString() const::str
 D Action<Infected>::GetFullName() const::str
 D Action<Smoker>::DebugString() const::str
 D Action<Smoker>::GetFullName() const::str
 D Action<SurvivorBot>::DebugString() const::str
 D Action<SurvivorBot>::GetFullName() const::str
 D Action<Tank>::DebugString() const::str
 D Action<Tank>::GetFullName() const::str
 D AllocTempVector()::s_nIndex
 D AllocTempVector()::s_vecTemp
 D Boomer::m_DataMap
 D CAISound::m_DataMap
 D CAI_BehaviorBase::m_DataMap
 D CAI_ChangeHintGroup::m_DataMap
 D CAI_ChangeTarget::m_DataMap
 D CAI_Expresser::m_DataMap
 D CAmbientGeneric::m_DataMap
 D CAnimationLayer::m_DataMap
 D CAreaPortal::m_DataMap
 D CAssaultRifle::m_DataMap
 D CAutoShotgun::m_DataMap
 D CBaseAbility::m_DataMap
 D CBaseAbility::m_pClassSendTable
 D CBaseAchievement::m_DataMap
 D CBaseAnimating::m_DataMap
 D CBaseAnimating::m_pClassSendTable
 D CBaseAnimatingOverlay::m_DataMap
 D CBaseAnimatingOverlay::m_pClassSendTable
 D CBaseButton::m_DataMap
 D CBaseCSGrenade::m_DataMap
 D CBaseCSGrenade::m_pClassSendTable
 D CBaseCSGrenadeProjectile::m_DataMap
 D CBaseCSGrenadeProjectile::m_pClassSendTable
 D CBaseCombatCharacter::m_DataMap
 D CBaseCombatCharacter::m_nextSpawnID
 D CBaseCombatCharacter::m_pClassSendTable
 D CBaseCombatWeapon::m_DataMap
 D CBaseCombatWeapon::m_pClassSendTable
 D CBaseDMStart::m_DataMap
 D CBaseDoor::m_DataMap
 D CBaseEntity::m_DataMap
 D CBaseEntity::m_nDebugPlayer
 D CBaseEntity::m_nDebugSteps
 D CBaseEntity::m_nPredictionRandomSeed
 D CBaseEntity::m_pClassSendTable
 D CBaseEntity::s_bAbsQueriesValid
 D CBaseEntity::sm_bAccurateTriggerBboxChecks
 D CBaseEntityOutput::m_DataMap
 D CBaseFilter::m_DataMap
 D CBaseFire::m_DataMap
 D CBaseFlex::m_DataMap
 D CBaseFlex::m_pClassSendTable
 D CBaseGrenade::m_DataMap
 D CBaseGrenade::m_pClassSendTable
 D CBaseMoveBehavior::m_DataMap
 D CBaseParticleEntity::m_pClassSendTable
 D CBasePlatTrain::m_DataMap
 D CBasePlayer::m_DataMap
 D CBasePlayer::m_pClassSendTable
 D CBasePropDoor::m_DataMap
 D CBasePropDoor::m_pClassSendTable
 D CBaseServerVehicle::m_DataMap
 D CBaseShotgun::m_DataMap
 D CBaseShotgun::m_pClassSendTable
 D CBaseTeamObjectiveResource::m_DataMap
 D CBaseTempEntity::m_pClassSendTable
 D CBaseToggle::m_DataMap
 D CBaseToggle::m_pClassSendTable
 D CBaseTrigger::m_DataMap
 D CBaseTrigger::m_pClassSendTable
 D CBaseVPhysicsTrigger::m_DataMap
 D CBaseViewModel::m_DataMap
 D CBaseViewModel::m_pClassSendTable
 D CBeam::m_DataMap
 D CBeamSpotlight::m_DataMap
 D CBlood::m_DataMap
 D CBoneFollower::m_DataMap
 D CBoneFollowerManager::m_DataMap
 D CBoomerClaw::m_DataMap
 D CBreakable::m_DataMap
 D CBreakable::m_pClassSendTable
 D CBreakable::pSpawnObjects
 D CBreakableProp::m_DataMap
 D CBreakableProp::m_pClassSendTable
 D CBreakableSurface::m_DataMap
 D CBubbling::m_DataMap
 D CButtonTimed::m_DataMap
 D CCSGameRulesProxy::m_pClassSendTable
 D CCSPlayer::m_DataMap
 D CCSPlayer::m_pClassSendTable
 D CCSRagdoll::m_DataMap
 D CCarProp::m_DataMap
 D CChangeLevel::m_DataMap
 D CChoreoEvent::s_nGlobalID
 D CClaw::m_DataMap
 D CClaw::m_pClassSendTable
 D CClientPath::m_DataMap
 D CCollisionProperty::m_DataMap
 D CColorCorrection::m_DataMap
 D CColorCorrectionVolume::m_DataMap
 D CCommentaryAuto::m_DataMap
 D CCommentaryDummy::m_DataMap
 D CCommentarySystem::InitCommentary()::commentarySpawnedSemaphoreName
 D CCommentarySystem::InitCommentary()::infoTargetStr
 D CCommentarySystem::m_DataMap
 D CCommentaryZombieSpawner::m_DataMap
 D CConstantForceController::m_DataMap
 D CConstraintAnchor::m_DataMap
 D CCopyRecipientFilter::m_DataMap
 D CDeathFallCamera::m_DataMap
 D CDebugHistory::m_DataMap
 D CDecal::m_DataMap
 D CDmxElement* const& CDmxAttribute::GetValue<CDmxElement*>() const::defaultValue
 D CDmxElement* const& CDmxElement::GetValue<CDmxElement*>(char const*) const::defaultValue
 D CDynamicLight::m_DataMap
 D CDynamicProp::m_DataMap
 D CDynamicProp::m_pClassSendTable
 D CEmbers::m_DataMap
 D CEntityDissolve::m_DataMap
 D CEntityFlame::m_DataMap
 D CEntityParticleTrail::m_DataMap
 D CEnvBeam::m_DataMap
 D CEnvBeverage::m_DataMap
 D CEnvCredits::m_DataMap
 D CEnvDOFController::m_DataMap
 D CEnvDustPuff::m_DataMap
 D CEnvEffectsScript::m_DataMap
 D CEnvEntityMaker::m_DataMap
 D CEnvExplosion::m_DataMap
 D CEnvFade::m_DataMap
 D CEnvFireSensor::m_DataMap
 D CEnvFireSource::m_DataMap
 D CEnvFunnel::m_DataMap
 D CEnvGlobal::m_DataMap
 D CEnvGunfire::m_DataMap
 D CEnvHudHint::m_DataMap
 D CEnvLaser::m_DataMap
 D CEnvMicrophone::m_DataMap
 D CEnvMuzzleFlash::m_DataMap
 D CEnvParticleScript::m_DataMap
 D CEnvPlayerSurfaceTrigger::m_DataMap
 D CEnvProjectedTexture::m_DataMap
 D CEnvQuadraticBeam::m_DataMap
 D CEnvRockLauncher::m_DataMap
 D CEnvScreenEffect::m_DataMap
 D CEnvScreenOverlay::m_DataMap
 D CEnvShake::m_DataMap
 D CEnvShooter::m_DataMap
 D CEnvSoundscape::m_DataMap
 D CEnvSoundscapeProxy::m_DataMap
 D CEnvSoundscapeTriggerable::m_DataMap
 D CEnvSpark::m_DataMap
 D CEnvSplash::m_DataMap
 D CEnvTonemapController::m_DataMap
 D CEnvTracer::m_DataMap
 D CEnvViewPunch::m_DataMap
 D CEnvWeaponfire::m_DataMap
 D CEnvWind::m_DataMap
 D CEnvZoom::m_DataMap
 D CEnv_Blocker::m_DataMap
 D CEscapeRoute::m_DataMap
 D CEventAction::m_DataMap
 D CEventQueue::m_DataMap
 D CFailableAchievement::m_DataMap
 D CFilterClass::m_DataMap
 D CFilterContext::m_DataMap
 D CFilterEnemy::m_DataMap
 D CFilterMassGreater::m_DataMap
 D CFilterModel::m_DataMap
 D CFilterMultiple::m_DataMap
 D CFilterName::m_DataMap
 D CFinaleTrigger::m_DataMap
 D CFire::m_DataMap
 D CFireSmoke::m_DataMap
 D CFireTrail::m_DataMap
 D CFirstAidKit::m_DataMap
 D CFish::m_DataMap
 D CFishPool::m_DataMap
 D CFlexCycler::m_DataMap
 D CFlexExpresser::m_DataMap
 D CFmtStrN<1024>::CFmtStrN(char const*, ...)::scAsserted
 D CFmtStrN<128>::use_Q_snprintf_instead_of_sprintf(char const*, ...)::scAsserted
 D CFmtStrN<256>::CFmtStrN(char const**, ...)::scAsserted
 D CFmtStrN<256>::CFmtStrN(char const*, ...)::scAsserted
 D CFmtStrN<256>::use_Q_snprintf_instead_of_sprintf(char const*, ...)::scAsserted
 D CFmtStrN<260>::use_Q_snprintf_instead_of_sprintf(char const*, ...)::scAsserted
 D CFmtStrN<32>::CFmtStrN(char const*, ...)::scAsserted
 D CFmtStrN<64>::CFmtStrN(char const*, ...)::scAsserted
 D CFmtStrN<80>::use_Q_snprintf_instead_of_sprintf(char const*, ...)::scAsserted
 D CFogController::m_DataMap
 D CFogTrigger::m_DataMap
 D CFogVolume::m_DataMap
 D CFourWheelServerVehicle::m_DataMap
 D CFourWheelVehiclePhysics::m_DataMap
 D CFuelBarrelProp::m_DataMap
 D CFuncAreaPortalBase::m_DataMap
 D CFuncAreaPortalWindow::m_DataMap
 D CFuncBrush::m_DataMap
 D CFuncBrush::m_pClassSendTable
 D CFuncConveyor::m_DataMap
 D CFuncElevator::m_DataMap
 D CFuncFireExtinguisher::m_DataMap
 D CFuncLadder::m_DataMap
 D CFuncMoveLinear::m_DataMap
 D CFuncNavAttributeRegion::m_DataMap
 D CFuncNavBlocker::m_DataMap
 D CFuncNavObstruction::m_DataMap
 D CFuncNavStairsToggle::m_DataMap
 D CFuncOccluder::m_DataMap
 D CFuncPlat::m_DataMap
 D CFuncPlatRot::m_DataMap
 D CFuncPlayerInfectedClip::m_DataMap
 D CFuncRagdollFader::m_DataMap
 D CFuncReflectiveGlass::m_DataMap
 D CFuncRotating::m_DataMap
 D CFuncSimpleLadder::m_DataMap
 D CFuncSmokeVolume::m_DataMap
 D CFuncSpawnVolume::m_DataMap
 D CFuncTankTrain::m_DataMap
 D CFuncTrackAuto::m_DataMap
 D CFuncTrackChange::m_DataMap
 D CFuncTrackTrain::m_DataMap
 D CFuncTrain::m_DataMap
 D CFuncTrainControls::m_DataMap
 D CFuncVPhysicsClip::m_DataMap
 D CFuncVehicleClip::m_DataMap
 D CFuncWall::m_DataMap
 D CFuncWallToggle::m_DataMap
 D CFunc_Dust::m_DataMap
 D CFunc_LOD::m_DataMap
 D CGameEnd::m_DataMap
 D CGameGibManager::m_DataMap
 D CGamePlayerEquip::m_DataMap
 D CGamePlayerZone::m_DataMap
 D CGameRulesProxy::m_pClassSendTable
 D CGameScore::m_DataMap
 D CGameString::gm_iSerialNumber
 D CGameText::m_DataMap
 D CGameUI::m_DataMap
 D CGameWeaponManager::m_DataMap
 D CGasCan::m_DataMap
 D CGib::m_DataMap
 D CGibShooter::m_DataMap
 D CGlobalState::m_DataMap
 D CGunTarget::m_DataMap
 D CHunterClaw::m_DataMap
 D CInfectedZooMaker::m_DataMap
 D CInferno::m_DataMap
 D CInfoDirector::m_DataMap
 D CInfoElevatorFloor::m_DataMap
 D CInfoGameEventProxy::m_DataMap
 D CInfoGameMode::m_DataMap
 D CInfoGoalInfectedChase::m_DataMap
 D CInfoOverlayAccessor::m_DataMap
 D CInfoRemarkable::m_DataMap
 D CInfoViewParameters::m_DataMap
 D CInfoZombieSpawn::m_DataMap
 D CInstancedSceneEntity::m_DataMap
 D CItem::m_DataMap
 D CItemSoda::m_DataMap
 D CKeepUpright::m_DataMap
 D CLight::m_DataMap
 D CLightGlow::m_DataMap
 D CLogicActiveAutosave::m_DataMap
 D CLogicAuto::m_DataMap
 D CLogicAutosave::m_DataMap
 D CLogicBranch::m_DataMap
 D CLogicBranchList::m_DataMap
 D CLogicCase::m_DataMap
 D CLogicCollisionPair::m_DataMap
 D CLogicCompare::m_DataMap
 D CLogicCompareInteger::m_DataMap
 D CLogicLineToEntity::m_DataMap
 D CLogicMeasureMovement::m_DataMap
 D CLogicNavigation::m_DataMap
 D CLogicRelay::m_DataMap
 D CLunge::m_DataMap
 D CMapInfo::m_DataMap
 D CMaterialModifyControl::m_DataMap
 D CMathColorBlend::m_DataMap
 D CMathCounter::m_DataMap
 D CMathRemap::m_DataMap
 D CMessage::m_DataMap
 D CMessageEntity::m_DataMap
 D CMolotov::m_DataMap
 D CMomentaryRotButton::m_DataMap
 D CMotorController::m_DataMap
 D CMovementSpeedMod::m_DataMap
 D CMultiDamage::m_DataMap
 D CMultiSource::m_DataMap
 D CNavArea::m_masterMarker
 D CNavArea::m_nextID
 D CNavLadder::m_nextID
 D CNavNode::m_nextID
 D COrnamentProp::m_DataMap
 D COuttroStats::m_DataMap
 D COxygenTank::m_DataMap
 D CPainPills::m_DataMap
 D CParticleFire::m_DataMap
 D CParticleLight::m_DataMap
 D CParticlePerformanceMonitor::m_DataMap
 D CParticleSystem::m_DataMap
 D CPassengerInfo::m_DataMap
 D CPathCorner::m_DataMap
 D CPathKeyFrame::m_DataMap
 D CPathTrack::m_DataMap
 D CPhysBox::m_DataMap
 D CPhysBox::m_pClassSendTable
 D CPhysBoxMultiplayer::m_DataMap
 D CPhysConstraint::m_DataMap
 D CPhysConstraintSystem::m_DataMap
 D CPhysConvert::m_DataMap
 D CPhysExplosion::m_DataMap
 D CPhysForce::m_DataMap
 D CPhysHinge::m_DataMap
 D CPhysImpact::m_DataMap
 D CPhysLength::m_DataMap
 D CPhysMagnet::m_DataMap
 D CPhysMotor::m_DataMap
 D CPhysPulley::m_DataMap
 D CPhysSlideConstraint::m_DataMap
 D CPhysThruster::m_DataMap
 D CPhysTorque::m_DataMap
 D CPhysicsCannister::m_DataMap
 D CPhysicsEntitySolver::m_DataMap
 D CPhysicsNPCSolver::m_DataMap
 D CPhysicsProp::m_DataMap
 D CPhysicsPropRespawnable::m_DataMap
 D CPhysicsShake::m_DataMap
 D CPhysicsSpring::m_DataMap
 D CPhysicsWind::m_DataMap
 D CPhysicsWire::m_DataMap
 D CPipeBomb::m_DataMap
 D CPistol::m_DataMap
 D CPlasma::m_DataMap
 D CPlayerLocalData::m_DataMap
 D CPlayerResource::m_DataMap
 D CPlayerResource::m_pClassSendTable
 D CPlayerState::m_DataMap
 D CPointAngleSensor::m_DataMap
 D CPointAngularVelocitySensor::m_DataMap
 D CPointBonusMapsAccessor::m_DataMap
 D CPointBroadcastClientCommand::m_DataMap
 D CPointClientCommand::m_DataMap
 D CPointCommentaryNode::m_DataMap
 D CPointDevShotCamera::m_DataMap
 D CPointEntityFinder::m_DataMap
 D CPointGamestatsCounter::m_DataMap
 D CPointHurt::m_DataMap
 D CPointPlayerMoveConstraint::m_DataMap
 D CPointProximitySensor::m_DataMap
 D CPointPush::m_DataMap
 D CPointServerCommand::m_DataMap
 D CPointSpotlight::m_DataMap
 D CPointTeleport::m_DataMap
 D CPointTemplate::m_DataMap
 D CPointVelocitySensor::m_DataMap
 D CPoseController::m_DataMap
 D CPostProcessController::m_DataMap
 D CPrecipitation::m_DataMap
 D CPrecipitationBlocker::m_DataMap
 D CPredictedViewModel::m_pClassSendTable
 D CProjectedDecal::m_DataMap
 D CPropDoorRotating::m_DataMap
 D CPropDoorRotatingBreakable::m_DataMap
 D CPropDoorRotatingCheckpoint::m_DataMap
 D CPropGlowingObject::m_DataMap
 D CPropHealthCabinet::m_DataMap
 D CPropMinigun::m_DataMap
 D CPropMountedGun::m_DataMap
 D CPropVehicle::m_DataMap
 D CPropVehicleDriveable::m_DataMap
 D CPropaneTank::m_DataMap
 D CPumpShotgun::m_DataMap
 D CRagdollBoogie::m_DataMap
 D CRagdollConstraint::m_DataMap
 D CRagdollMagnet::m_DataMap
 D CRagdollManager::m_DataMap
 D CRagdollProp::m_DataMap
 D CRagdollProp::m_pClassSendTable
 D CRagdollPropAttached::m_DataMap
 D CRandSimTimer::m_DataMap
 D CRandStopwatch::m_DataMap
 D CRevertSaved::m_DataMap
 D CRopeKeyframe::m_DataMap
 D CRotDoor::m_DataMap
 D CRotorWashShooter::m_DataMap
 D CRuleEntity::m_DataMap
 D CRulePointEntity::m_DataMap
 D CSceneEntity::m_DataMap
 D CSceneListManager::m_DataMap
 D CSceneManager::m_DataMap
 D CServerNetworkProperty::m_DataMap
 D CShadowControl::m_DataMap
 D CSimTimer::m_DataMap
 D CSimpleSimTimer::m_DataMap
 D CSkyCamera::m_DataMap
 D CSlideshowDisplay::m_DataMap
 D CSmokeStack::m_DataMap
 D CSmokeStackLightInfo::m_DataMap
 D CSmokerClaw::m_DataMap
 D CSniperRifle::m_DataMap
 D CSound::m_DataMap
 D CSoundEmitterSystem::GetCaptionHash(char const*, bool, unsigned int&)::s_MissingHashes
 D CSoundEmitterSystem::PrecacheScriptSound(char const*)::s_PrecacheScriptSoundFailures
 D CSoundEnt::m_DataMap
 D CSoundEnvelope::m_DataMap
 D CSoundPatch::m_DataMap
 D CSpotlightEnd::m_DataMap
 D CSprite::m_DataMap
 D CSprite::m_pClassSendTable
 D CSpriteTrail::m_DataMap
 D CSteamJet::m_DataMap
 D CStopwatch::m_DataMap
 D CStopwatchBase::m_DataMap
 D CStripWeapons::m_DataMap
 D CSubMachinegun::m_DataMap
 D CSun::m_DataMap
 D CSurroundTest::m_DataMap
 D CSurvivorCamera::m_DataMap
 D CSurvivorPosition::m_DataMap
 D CSurvivorRescue::m_DataMap
 D CTEBaseBeam::m_pClassSendTable
 D CTEMetalSparks::m_pClassSendTable
 D CTEParticleSystem::m_pClassSendTable
 D CTPlayerModelStrings
 D CTakeDamageInfo::m_DataMap
 D CTankClaw::m_DataMap
 D CTankRock::m_DataMap
 D CTankTargetChange::m_DataMap
 D CTankTrainAI::m_DataMap
 D CTargetCDAudioRep::m_DataMap
 D CTargetChangeGravity::m_DataMap
 D CTeam::m_pClassSendTable
 D CTeamSpawnPoint::m_DataMap
 D CTeamVehicleSpawnPoint::m_DataMap
 D CTeamplayRoundBasedRulesProxy::m_DataMap
 D CTerrorGun::m_DataMap
 D CTerrorGun::m_pClassSendTable
 D CTerrorPlayer::m_DataMap
 D CTerrorPlayer::m_pClassSendTable
 D CTerrorPlayerResource::m_DataMap
 D CTerrorWeapon::m_DataMap
 D CTerrorWeapon::m_pClassSendTable
 D CTestTraceline::m_DataMap
 D CTextureToggle::m_DataMap
 D CThrow::m_DataMap
 D CThrustController::m_DataMap
 D CTimerEntity::m_DataMap
 D CTonemapTrigger::m_DataMap
 D CTongue::m_DataMap
 D CTraceFilterValidForDecal::ShouldHitEntity(IHandleEntity*, int)::ppszIgnoredClasses
 D CTransitioningPlayer::m_DataMap
 D CTriggerAutoCrouch::m_DataMap
 D CTriggerBrush::m_DataMap
 D CTriggerCamera::m_DataMap
 D CTriggerCameraMultiplayer::m_DataMap
 D CTriggerEscape::m_DataMap
 D CTriggerGravity::m_DataMap
 D CTriggerHurt::m_DataMap
 D CTriggerImpact::m_DataMap
 D CTriggerLook::m_DataMap
 D CTriggerMultiple::m_DataMap
 D CTriggerPlayerMovement::m_DataMap
 D CTriggerProximity::m_DataMap
 D CTriggerPush::m_DataMap
 D CTriggerRemove::m_DataMap
 D CTriggerSave::m_DataMap
 D CTriggerSoundscape::m_DataMap
 D CTriggerTeleport::m_DataMap
 D CTriggerToggleSave::m_DataMap
 D CTriggerVPhysicsMotion::m_DataMap
 D CTriggerWind::m_DataMap
 D CUtlLinkedList<CAbandonmentAwardTemplate::RegretStruct, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CAbandonmentAwardTemplate::RegretStruct, unsigned short>, unsigned short> >::AllocInternal(bool)::__executeCount
 D CUtlLinkedList<CAwardTemplate*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CAwardTemplate*, unsigned short>, unsigned short> >::AllocInternal(bool)::__executeCount
 D CUtlLinkedList<CBaseCombatWeapon*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CBaseCombatWeapon*, unsigned short>, unsigned short> >::AllocInternal(bool)::__executeCount
 D CUtlLinkedList<CDamageRecord*, int, false, int, CUtlMemory<UtlLinkedListElem_t<CDamageRecord*, int>, int> >::AllocInternal(bool)::__executeCount
 D CUtlLinkedList<CEnvWindShared*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CEnvWindShared*, unsigned short>, unsigned short> >::AllocInternal(bool)::__executeCount
 D CUtlLinkedList<CFoundryEntitySpawnRecord*, int, false, int, CUtlMemory<UtlLinkedListElem_t<CFoundryEntitySpawnRecord*, int>, int> >::AllocInternal(bool)::__executeCount
 D CUtlLinkedList<CFriendlyFireIncident, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CFriendlyFireIncident, unsigned short>, unsigned short> >::AllocInternal(bool)::__executeCount
 D CUtlLinkedList<CFuncAreaPortalBase*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CFuncAreaPortalBase*, unsigned short>, unsigned short> >::AllocInternal(bool)::__executeCount
 D CUtlLinkedList<CHandle<CBaseAnimating>, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CHandle<CBaseAnimating>, unsigned short>, unsigned short> >::AllocInternal(bool)::__executeCount
 D CUtlLinkedList<CInfoRemarkable*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CInfoRemarkable*, unsigned short>, unsigned short> >::AllocInternal(bool)::__executeCount
 D CUtlLinkedList<CMapEntityRef, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CMapEntityRef, unsigned short>, unsigned short> >::AllocInternal(bool)::__executeCount
 D CUtlLinkedList<CPlayerCmdInfo, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CPlayerCmdInfo, unsigned short>, unsigned short> >::AllocInternal(bool)::__executeCount
 D CUtlLinkedList<CPlayerSimInfo, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CPlayerSimInfo, unsigned short>, unsigned short> >::AllocInternal(bool)::__executeCount
 D CUtlLinkedList<CResponseQueue::CDeferredResponse, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<CResponseQueue::CDeferredResponse, int> > >::AllocInternal(bool)::__executeCount
 D CUtlLinkedList<CTerrorPlayer*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CTerrorPlayer*, unsigned short>, unsigned short> >::AllocInternal(bool)::__executeCount
 D CUtlLinkedList<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short>, unsigned short> >::AllocInternal(bool)::__executeCount
 D CUtlLinkedList<CUtlMultiList<watcher_t, unsigned short>::List_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<watcher_t, unsigned short>::List_t, unsigned short>, unsigned short> >::AllocInternal(bool)::__executeCount
 D CUtlLinkedList<INextBot*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<INextBot*, unsigned short>, unsigned short> >::AllocInternal(bool)::__executeCount
 D CUtlLinkedList<L4D_PlayerStatData*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<L4D_PlayerStatData*, unsigned short>, unsigned short> >::AllocInternal(bool)::__executeCount
 D CUtlLinkedList<LagRecord, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<LagRecord, int> > >::AllocInternal(bool)::__executeCount
 D CUtlLinkedList<PlayerReport*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<PlayerReport*, unsigned short>, unsigned short> >::AllocInternal(bool)::__executeCount
 D CUtlLinkedList<Vector, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<Vector, unsigned short>, unsigned short> >::AllocInternal(bool)::__executeCount
 D CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::Alloc()::__executeCount
 D CUtlMultiList<watcher_t, unsigned short>::Alloc()::__executeCount
 D CUtlRBTree<AI_CriteriaSet::CritEntry_t, short, bool (*)(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&), CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short> >::Links(short) const::s_Sentinel
 D CUtlRBTree<AsyncCaption_t::BlockInfo_t, unsigned short, bool (*)(AsyncCaption_t::BlockInfo_t const&, AsyncCaption_t::BlockInfo_t const&), CUtlMemory<UtlRBTreeNode_t<AsyncCaption_t::BlockInfo_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CBaseFlex::FS_LocalToGlobal_t, unsigned short, bool (*)(CBaseFlex::FS_LocalToGlobal_t const&, CBaseFlex::FS_LocalToGlobal_t const&), CUtlMemory<UtlRBTreeNode_t<CBaseFlex::FS_LocalToGlobal_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, bool (*)(CBreakModelsPrecached::breakable_precache_t const&, CBreakModelsPrecached::breakable_precache_t const&), CUtlMemory<UtlRBTreeNode_t<CBreakModelsPrecached::breakable_precache_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CChoreoEvent*, unsigned short, bool (*)(CChoreoEvent* const&, CChoreoEvent* const&), CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CChoreoScene::ActiveList, int, bool (*)(CChoreoScene::ActiveList const&, CChoreoScene::ActiveList const&), CUtlMemory<UtlRBTreeNode_t<CChoreoScene::ActiveList, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CCombatCharVisCache::VisCacheEntry_t, unsigned short, CCombatCharVisCache::CVisCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<CCombatCharVisCache::VisCacheEntry_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CGameEvent, unsigned short, bool (*)(CGameEvent const&, CGameEvent const&), CUtlMemory<UtlRBTreeNode_t<CGameEvent, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, bool (*)(CSceneEntity::SpeakEventSound_t const&, CSceneEntity::SpeakEventSound_t const&), CUtlMemory<UtlRBTreeNode_t<CSceneEntity::SpeakEventSound_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short, bool (*)(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&, CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&), CUtlMemory<UtlRBTreeNode_t<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short, CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short, CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, AI_CriteriaSet::CritEntry_t const*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, AI_CriteriaSet::CritEntry_t const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, AI_CriteriaSet::CritEntry_t const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int, CUtlMap<char const*, CActivityRemapCache, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, CBitVec<32>, int>::Node_t, int, CUtlMap<char const*, CBitVec<32>, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CBitVec<32>, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int, CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int, CUtlMap<char const*, CInstancedResponseSystem*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, CNavArea*, int>::Node_t, int, CUtlMap<char const*, CNavArea*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CNavArea*, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short, CUtlMap<char const*, CResponseSystem::Enumeration, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short>, short> >::Links(short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, CUserMessage*, int>::Node_t, int, CUtlMap<char const*, CUserMessage*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUserMessage*, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int, CUtlMap<char const*, ConceptHistory_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, Criteria, short>::Node_t, short, CUtlMap<char const*, Criteria, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Criteria, short>::Node_t, short>, short> >::Links(short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, EventGroup, int>::Node_t, int, CUtlMap<char const*, EventGroup, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EventGroup, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, IEntityFactory*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, ResponseGroup, short>::Node_t, short, CUtlMap<char const*, ResponseGroup, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ResponseGroup, short>::Node_t, short>, short> >::Links(short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, Rule, short>::Node_t, short, CUtlMap<char const*, Rule, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Rule, short>::Node_t, short>, short> >::Links(short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, char const*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, char const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, char const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, float, int>::Node_t, int, CUtlMap<char const*, float, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, float, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, int, int>::Node_t, int, CUtlMap<char const*, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<edict_t const*, KeyValues*, unsigned short>::Node_t, unsigned short, CUtlMap<edict_t const*, KeyValues*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<edict_t const*, KeyValues*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<float, CTraceBulletEntityEnumerator::BulletTrace_t, unsigned short>::Node_t, unsigned short, CUtlMap<float, CTraceBulletEntityEnumerator::BulletTrace_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<float, CTraceBulletEntityEnumerator::BulletTrace_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<int, CBaseAchievement*, unsigned short>::Node_t, unsigned short, CUtlMap<int, CBaseAchievement*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CBaseAchievement*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<studiohdr_t const*, StudioHdrToActivityMapEntry_t, unsigned short>::Node_t, unsigned short, CUtlMap<studiohdr_t const*, StudioHdrToActivityMapEntry_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<studiohdr_t const*, StudioHdrToActivityMapEntry_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<unsigned int, float, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlString, unsigned short, bool (*)(CUtlString const&, CUtlString const&), CUtlMemory<UtlRBTreeNode_t<CUtlString, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<ThinkSync, unsigned short, bool (*)(ThinkSync const&, ThinkSync const&), CUtlMemory<UtlRBTreeNode_t<ThinkSync, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<VisibilityCacheEntry_t, unsigned short, CVisibilityCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<VisibilityCacheEntry_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<unsigned int, unsigned short, bool (*)(unsigned int const&, unsigned int const&), CUtlMemory<UtlRBTreeNode_t<unsigned int, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlString const& CDmxAttribute::GetValue<CUtlString>() const::defaultValue
 D CUtlString const& CDmxElement::GetValue<CUtlString>(char const*) const::defaultValue
 D CUtlVector<CDmxElement*, CUtlMemory<CDmxElement*, int> > const& CDmxAttribute::GetArray<CDmxElement*>() const::defaultArray
 D CUtlVector<CDmxElement*, CUtlMemory<CDmxElement*, int> > const& CDmxElement::GetArray<CDmxElement*>(char const*) const::defaultValue
 D CUtlVectorUltraConservative<HidingSpot*, CUtlVectorUltraConservativeAllocator>::StaticData()::staticData
 D CUtlVectorUltraConservative<NavConnect, CUtlVectorUltraConservativeAllocator>::StaticData()::staticData
 D CUtlVectorUltraConservative<NavLadderConnect, CUtlVectorUltraConservativeAllocator>::StaticData()::staticData
 D CUtlVectorUltraConservative<SpotEncounter*, CUtlVectorUltraConservativeAllocator>::StaticData()::staticData
 D CVGuiScreen::m_DataMap
 D CVersusRandom::m_DataMap
 D CVomit::m_DataMap
 D CVoteController::m_DataMap
 D CWC_UpdateIgnoreList::m_DataMap
 D CWaterBullet::m_DataMap
 D CWaterLODControl::m_DataMap
 D CWeaponAmmoSpawn::m_DataMap
 D CWeaponCSBase::m_DataMap
 D CWeaponCSBase::m_pClassSendTable
 D CWeaponSpawn::m_DataMap
 D CWeaponSpawn::m_pClassSendTable
 D CWeightButton::m_DataMap
 D CWindowPane::m_DataMap
 D CWorld::m_DataMap
 D CWorldItem::m_DataMap
 D CaptionLookup_t::m_DataMap
 D CompiledCaptionHeader_t::m_DataMap
 D ConceptHistory_t::m_DataMap
 D DmxElementUnpackStructure_t* DmxElementUnpackInit<CParticleSystemDefinition>(CParticleSystemDefinition*)::unpack
 D DmxElementUnpackStructure_t* DmxElementUnpackInit<ParticleChildrenInfo_t>(ParticleChildrenInfo_t*)::unpack
 D DustTrail::m_DataMap
 D ENTITYIO_FIXUP_STRING
 D EntityParticleTrailInfo_t::m_DataMap
 D EventQueuePrioritizedEvent_t::m_DataMap
 D FatalFallSpeed
 D FilterDamageType::m_DataMap
 D FilterInfectedClass::m_DataMap
 D FilterTeam::m_DataMap
 D FirstBitInWord(unsigned int, int)::firstBitLUT
 D GetBitForBitnum(int)::bitsForBitnum
 D GetStartBitMask(int)::g_StartMask
 D HidingSpot::m_nextID
 D Hunter::m_DataMap
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer, int> > >(CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<CPassengerInfo, CUtlMemory<CPassengerInfo, int> > >(CUtlVector<CPassengerInfo, CUtlMemory<CPassengerInfo, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<Relationship_t, CUtlMemory<Relationship_t, int> > >(CUtlVector<Relationship_t, CUtlMemory<Relationship_t, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<ResponseContext_t, CUtlMemory<ResponseContext_t, int> > >(CUtlVector<ResponseContext_t, CUtlMemory<ResponseContext_t, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<SaveRestoreBlockHeader_t, CUtlMemory<SaveRestoreBlockHeader_t, int> > >(CUtlVector<SaveRestoreBlockHeader_t, CUtlMemory<SaveRestoreBlockHeader_t, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<globalentity_t, CUtlMemory<globalentity_t, int> > >(CUtlVector<globalentity_t, CUtlMemory<globalentity_t, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<magnetted_objects_t, CUtlMemory<magnetted_objects_t, int> > >(CUtlVector<magnetted_objects_t, CUtlMemory<magnetted_objects_t, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<modifiedconvars_t, CUtlMemory<modifiedconvars_t, int> > >(CUtlVector<modifiedconvars_t, CUtlMemory<modifiedconvars_t, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<physfollower_t, CUtlMemory<physfollower_t, int> > >(CUtlVector<physfollower_t, CUtlMemory<physfollower_t, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<template_t, CUtlMemory<template_t, int> > >(CUtlVector<template_t, CUtlMemory<template_t, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<thinkfunc_t, CUtlMemory<thinkfunc_t, int> > >(CUtlVector<thinkfunc_t, CUtlMemory<thinkfunc_t, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<vehicle_crashsound_t, CUtlMemory<vehicle_crashsound_t, int> > >(CUtlVector<vehicle_crashsound_t, CUtlMemory<vehicle_crashsound_t, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<vehicle_gear_t, CUtlMemory<vehicle_gear_t, int> > >(CUtlVector<vehicle_gear_t, CUtlMemory<vehicle_gear_t, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<12>::GetDataOps<CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> > >(CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity>, int> > >(CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity>, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CBaseFlex>, CUtlMemory<CHandle<CBaseFlex>, int> > >(CUtlVector<CHandle<CBaseFlex>, CUtlMemory<CHandle<CBaseFlex>, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer>, int> > >(CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer>, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CFish>, CUtlMemory<CHandle<CFish>, int> > >(CUtlVector<CHandle<CFish>, CUtlMemory<CHandle<CFish>, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity>, int> > >(CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity>, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CSceneListManager>, CUtlMemory<CHandle<CSceneListManager>, int> > >(CUtlVector<CHandle<CSceneListManager>, CUtlMemory<CHandle<CSceneListManager>, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CVGuiScreen>, CUtlMemory<CHandle<CVGuiScreen>, int> > >(CUtlVector<CHandle<CVGuiScreen>, CUtlMemory<CHandle<CVGuiScreen>, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<5>::GetDataOps<CUtlVector<int, CUtlMemory<int, int> > >(CUtlVector<int, CUtlMemory<int, int> >*)::ops
 D Infected::m_pClassSendTable
 D InfoChangelevel::m_DataMap
 D NavColors
 D NextBotCombatCharacter::m_DataMap
 D NextBotCombatCharacter::m_pClassSendTable
 D Opposite
 D ParticleSmokeGrenade::m_DataMap
 D PhysBlockHeader_t::m_DataMap
 D PhysObjectHeader_t::m_DataMap
 D PlayerLocomotion::GetDesiredLean() const::junk
 D Relationship_t::m_DataMap
 D Response::m_DataMap
 D ResponseContext_t::m_DataMap
 D ResponseGroup::m_DataMap
 D RocketTrail::m_DataMap
 D SURFACEPROP_MANIFEST_FILE
 D SafeFallSpeed
 D SaveRestoreBlockHeader_t::m_DataMap
 D SmokeTrail::m_DataMap
 D Smoker::m_DataMap
 D SoundCommand_t::m_DataMap
 D SporeExplosion::m_DataMap
 D SporeTrail::m_DataMap
 D SurvivorBot::m_DataMap
 D SurvivorPlayerModelStrings
 D Tank::m_DataMap
 D TemplateEntityData_t::m_DataMap
 D TerrorNavArea::m_masterTerrorMark
 D TerroristPlayerModelStrings
 D TheNavAttributeTable
 D UpgradeDatabase
 D VTT for CBasePlayerAnimState
 D VTT for CCSPlayerAnimState
 D ViewSmoothingData_t::m_DataMap
 D _ZZN13CUtlMultiListI9watcher_ttE5AllocEvE14__executeCount49
 D _ZZN13CUtlMultiListIN16CDataManagerBase22resource_lru_element_tEtE5AllocEvE14__executeCount3
 D _ZZN14CUtlLinkedListI13CMapEntityReftLb0Et10CUtlMemoryI19UtlLinkedListElem_tIS0_tEtEE13AllocInternalEbE14__executeCount316
 D _ZZN14CUtlLinkedListI14CPlayerCmdInfotLb0Et10CUtlMemoryI19UtlLinkedListElem_tIS0_tEtEE13AllocInternalEbE14__executeCount449
 D _ZZN14CUtlLinkedListI14CPlayerSimInfotLb0Et10CUtlMemoryI19UtlLinkedListElem_tIS0_tEtEE13AllocInternalEbE14__executeCount451
 D _ZZN14CUtlLinkedListI21CFriendlyFireIncidenttLb0Et10CUtlMemoryI19UtlLinkedListElem_tIS0_tEtEE13AllocInternalEbE14__executeCount24
 D _ZZN14CUtlLinkedListI6VectortLb0Et10CUtlMemoryI19UtlLinkedListElem_tIS0_tEtEE13AllocInternalEbE14__executeCount1371
 D _ZZN14CUtlLinkedListI7CHandleI14CBaseAnimatingEtLb0Et10CUtlMemoryI19UtlLinkedListElem_tIS2_tEtEE13AllocInternalEbE14__executeCount134
 D _ZZN14CUtlLinkedListI9LagRecordiLb1Ei15CUtlFixedMemoryI19UtlLinkedListElem_tIS0_iEEE13AllocInternalEbE14__executeCount44
 D _ZZN14CUtlLinkedListIN13CUtlMultiListI9watcher_ttE6List_tEtLb0Et10CUtlMemoryI19UtlLinkedListElem_tIS3_tEtEE13AllocInternalEbE14__executeCount52
 D _ZZN14CUtlLinkedListIN13CUtlMultiListIN16CDataManagerBase22resource_lru_element_tEtE6List_tEtLb0Et10CUtlMemoryI19UtlLinkedListElem_tIS4_tEtEE13AllocInternalEbE14__executeCount6
 D _ZZN14CUtlLinkedListIN14CResponseQueue17CDeferredResponseEiLb1Ei15CUtlFixedMemoryI19UtlLinkedListElem_tIS1_iEEE13AllocInternalEbE14__executeCount21
 D _ZZN14CUtlLinkedListIN25CAbandonmentAwardTemplate12RegretStructEtLb0Et10CUtlMemoryI19UtlLinkedListElem_tIS1_tEtEE13AllocInternalEbE14__executeCount17
 D _ZZN14CUtlLinkedListIP12PlayerReporttLb0Et10CUtlMemoryI19UtlLinkedListElem_tIS1_tEtEE13AllocInternalEbE14__executeCount89
 D _ZZN14CUtlLinkedListIP13CDamageRecordiLb0Ei10CUtlMemoryI19UtlLinkedListElem_tIS1_iEiEE13AllocInternalEbE14__executeCount388
 D _ZZN14CUtlLinkedListIP13CTerrorPlayertLb0Et10CUtlMemoryI19UtlLinkedListElem_tIS1_tEtEE13AllocInternalEbE14__executeCount1380
 D _ZZN14CUtlLinkedListIP14CAwardTemplatetLb0Et10CUtlMemoryI19UtlLinkedListElem_tIS1_tEtEE13AllocInternalEbE14__executeCount9
 D _ZZN14CUtlLinkedListIP14CEnvWindSharedtLb0Et10CUtlMemoryI19UtlLinkedListElem_tIS1_tEtEE13AllocInternalEbE14__executeCount10
 D _ZZN14CUtlLinkedListIP15CInfoRemarkabletLb0Et10CUtlMemoryI19UtlLinkedListElem_tIS1_tEtEE13AllocInternalEbE14__executeCount17
 D _ZZN14CUtlLinkedListIP17CBaseCombatWeapontLb0Et10CUtlMemoryI19UtlLinkedListElem_tIS1_tEtEE13AllocInternalEbE14__executeCount122
 D _ZZN14CUtlLinkedListIP18L4D_PlayerStatDatatLb0Et10CUtlMemoryI19UtlLinkedListElem_tIS1_tEtEE13AllocInternalEbE14__executeCount89
 D _ZZN14CUtlLinkedListIP19CFuncAreaPortalBasetLb0Et10CUtlMemoryI19UtlLinkedListElem_tIS1_tEtEE13AllocInternalEbE14__executeCount15
 D _ZZN14CUtlLinkedListIP25CFoundryEntitySpawnRecordiLb0Ei10CUtlMemoryI19UtlLinkedListElem_tIS1_iEiEE13AllocInternalEbE14__executeCount20
 D _ZZN14CUtlLinkedListIP8INextBottLb0Et10CUtlMemoryI19UtlLinkedListElem_tIS1_tEtEE13AllocInternalEbE14__executeCount53
 D audioparams_t::m_DataMap
 D bool CNavMesh::ForAllAreasInRadius<NavAreaCollector>(NavAreaCollector&, Vector const&, float)::searchMarker
 D bool CNavMesh::ForAllAreasOverlappingExtent<CFuncNavBlocker>(CFuncNavBlocker&, Extent const&)::__executeCount
 D bool CNavMesh::ForAllAreasOverlappingExtent<CFuncNavBlocker>(CFuncNavBlocker&, Extent const&)::searchMarker
 D bool CNavMesh::ForAllAreasOverlappingExtent<CFuncNavObstruction>(CFuncNavObstruction&, Extent const&)::__executeCount
 D bool CNavMesh::ForAllAreasOverlappingExtent<CFuncNavObstruction>(CFuncNavObstruction&, Extent const&)::searchMarker
 D bool CNavMesh::ForAllAreasOverlappingExtent<CheckpointSetter>(CheckpointSetter&, Extent const&)::__executeCount
 D bool CNavMesh::ForAllAreasOverlappingExtent<CheckpointSetter>(CheckpointSetter&, Extent const&)::searchMarker
 D bool CNavMesh::ForAllAreasOverlappingExtent<CollectRespawnAreas>(CollectRespawnAreas&, Extent const&)::__executeCount
 D bool CNavMesh::ForAllAreasOverlappingExtent<CollectRespawnAreas>(CollectRespawnAreas&, Extent const&)::searchMarker
 D bool CNavMesh::ForAllAreasOverlappingExtent<DoorSetter>(DoorSetter&, Extent const&)::__executeCount
 D bool CNavMesh::ForAllAreasOverlappingExtent<DoorSetter>(DoorSetter&, Extent const&)::searchMarker
 D bool CNavMesh::ForAllAreasOverlappingExtent<NavAreaCollector>(NavAreaCollector&, Extent const&)::__executeCount
 D bool CNavMesh::ForAllAreasOverlappingExtent<NavAreaCollector>(NavAreaCollector&, Extent const&)::searchMarker
 D bool const& CDmxAttribute::GetValue<bool>() const::defaultValue
 D bool const& CDmxElement::GetValue<bool>(char const*) const::defaultValue
 D construction vtable for CBasePlayerAnimState-in-CCSPlayerAnimState
 D construction vtable for ICSPlayerAnimState-in-CCSPlayerAnimState
 D datamap_t* DataMapInit<AI_Response>(AI_Response*)::dataDesc
 D datamap_t* DataMapInit<AI_Response>(AI_Response*)::nameHolder
 D datamap_t* DataMapInit<AI_ResponseParams>(AI_ResponseParams*)::dataDesc
 D datamap_t* DataMapInit<AI_ResponseParams>(AI_ResponseParams*)::nameHolder
 D datamap_t* DataMapInit<Boomer>(Boomer*)::dataDesc
 D datamap_t* DataMapInit<Boomer>(Boomer*)::nameHolder
 D datamap_t* DataMapInit<CAISound>(CAISound*)::dataDesc
 D datamap_t* DataMapInit<CAISound>(CAISound*)::nameHolder
 D datamap_t* DataMapInit<CAI_BehaviorBase>(CAI_BehaviorBase*)::dataDesc
 D datamap_t* DataMapInit<CAI_BehaviorBase>(CAI_BehaviorBase*)::nameHolder
 D datamap_t* DataMapInit<CAI_ChangeHintGroup>(CAI_ChangeHintGroup*)::dataDesc
 D datamap_t* DataMapInit<CAI_ChangeHintGroup>(CAI_ChangeHintGroup*)::nameHolder
 D datamap_t* DataMapInit<CAI_ChangeTarget>(CAI_ChangeTarget*)::dataDesc
 D datamap_t* DataMapInit<CAI_ChangeTarget>(CAI_ChangeTarget*)::nameHolder
 D datamap_t* DataMapInit<CAI_Expresser>(CAI_Expresser*)::dataDesc
 D datamap_t* DataMapInit<CAI_Expresser>(CAI_Expresser*)::nameHolder
 D datamap_t* DataMapInit<CAmbientGeneric>(CAmbientGeneric*)::dataDesc
 D datamap_t* DataMapInit<CAmbientGeneric>(CAmbientGeneric*)::nameHolder
 D datamap_t* DataMapInit<CAnimationLayer>(CAnimationLayer*)::dataDesc
 D datamap_t* DataMapInit<CAnimationLayer>(CAnimationLayer*)::nameHolder
 D datamap_t* DataMapInit<CAreaPortal>(CAreaPortal*)::dataDesc
 D datamap_t* DataMapInit<CAreaPortal>(CAreaPortal*)::nameHolder
 D datamap_t* DataMapInit<CAssaultRifle>(CAssaultRifle*)::dataDesc
 D datamap_t* DataMapInit<CAssaultRifle>(CAssaultRifle*)::nameHolder
 D datamap_t* DataMapInit<CAutoShotgun>(CAutoShotgun*)::dataDesc
 D datamap_t* DataMapInit<CAutoShotgun>(CAutoShotgun*)::nameHolder
 D datamap_t* DataMapInit<CBaseAbility>(CBaseAbility*)::dataDesc
 D datamap_t* DataMapInit<CBaseAbility>(CBaseAbility*)::nameHolder
 D datamap_t* DataMapInit<CBaseAchievement>(CBaseAchievement*)::dataDesc
 D datamap_t* DataMapInit<CBaseAchievement>(CBaseAchievement*)::nameHolder
 D datamap_t* DataMapInit<CBaseAnimating>(CBaseAnimating*)::dataDesc
 D datamap_t* DataMapInit<CBaseAnimating>(CBaseAnimating*)::nameHolder
 D datamap_t* DataMapInit<CBaseAnimatingOverlay>(CBaseAnimatingOverlay*)::dataDesc
 D datamap_t* DataMapInit<CBaseAnimatingOverlay>(CBaseAnimatingOverlay*)::nameHolder
 D datamap_t* DataMapInit<CBaseButton>(CBaseButton*)::dataDesc
 D datamap_t* DataMapInit<CBaseButton>(CBaseButton*)::nameHolder
 D datamap_t* DataMapInit<CBaseCSGrenade>(CBaseCSGrenade*)::dataDesc
 D datamap_t* DataMapInit<CBaseCSGrenade>(CBaseCSGrenade*)::nameHolder
 D datamap_t* DataMapInit<CBaseCSGrenadeProjectile>(CBaseCSGrenadeProjectile*)::dataDesc
 D datamap_t* DataMapInit<CBaseCSGrenadeProjectile>(CBaseCSGrenadeProjectile*)::nameHolder
 D datamap_t* DataMapInit<CBaseCombatCharacter>(CBaseCombatCharacter*)::dataDesc
 D datamap_t* DataMapInit<CBaseCombatCharacter>(CBaseCombatCharacter*)::nameHolder
 D datamap_t* DataMapInit<CBaseCombatWeapon>(CBaseCombatWeapon*)::dataDesc
 D datamap_t* DataMapInit<CBaseCombatWeapon>(CBaseCombatWeapon*)::nameHolder
 D datamap_t* DataMapInit<CBaseDMStart>(CBaseDMStart*)::dataDesc
 D datamap_t* DataMapInit<CBaseDMStart>(CBaseDMStart*)::nameHolder
 D datamap_t* DataMapInit<CBaseDoor>(CBaseDoor*)::dataDesc
 D datamap_t* DataMapInit<CBaseDoor>(CBaseDoor*)::nameHolder
 D datamap_t* DataMapInit<CBaseEntity>(CBaseEntity*)::dataDesc
 D datamap_t* DataMapInit<CBaseEntity>(CBaseEntity*)::nameHolder
 D datamap_t* DataMapInit<CBaseEntityOutput>(CBaseEntityOutput*)::dataDesc
 D datamap_t* DataMapInit<CBaseEntityOutput>(CBaseEntityOutput*)::nameHolder
 D datamap_t* DataMapInit<CBaseFilter>(CBaseFilter*)::dataDesc
 D datamap_t* DataMapInit<CBaseFilter>(CBaseFilter*)::nameHolder
 D datamap_t* DataMapInit<CBaseFire>(CBaseFire*)::dataDesc
 D datamap_t* DataMapInit<CBaseFire>(CBaseFire*)::nameHolder
 D datamap_t* DataMapInit<CBaseFlex>(CBaseFlex*)::dataDesc
 D datamap_t* DataMapInit<CBaseFlex>(CBaseFlex*)::nameHolder
 D datamap_t* DataMapInit<CBaseGrenade>(CBaseGrenade*)::dataDesc
 D datamap_t* DataMapInit<CBaseGrenade>(CBaseGrenade*)::nameHolder
 D datamap_t* DataMapInit<CBaseMoveBehavior>(CBaseMoveBehavior*)::dataDesc
 D datamap_t* DataMapInit<CBaseMoveBehavior>(CBaseMoveBehavior*)::nameHolder
 D datamap_t* DataMapInit<CBasePlatTrain>(CBasePlatTrain*)::dataDesc
 D datamap_t* DataMapInit<CBasePlatTrain>(CBasePlatTrain*)::nameHolder
 D datamap_t* DataMapInit<CBasePlayer>(CBasePlayer*)::dataDesc
 D datamap_t* DataMapInit<CBasePlayer>(CBasePlayer*)::nameHolder
 D datamap_t* DataMapInit<CBasePropDoor>(CBasePropDoor*)::dataDesc
 D datamap_t* DataMapInit<CBasePropDoor>(CBasePropDoor*)::nameHolder
 D datamap_t* DataMapInit<CBaseServerVehicle>(CBaseServerVehicle*)::dataDesc
 D datamap_t* DataMapInit<CBaseServerVehicle>(CBaseServerVehicle*)::nameHolder
 D datamap_t* DataMapInit<CBaseShotgun>(CBaseShotgun*)::dataDesc
 D datamap_t* DataMapInit<CBaseShotgun>(CBaseShotgun*)::nameHolder
 D datamap_t* DataMapInit<CBaseTeamObjectiveResource>(CBaseTeamObjectiveResource*)::dataDesc
 D datamap_t* DataMapInit<CBaseTeamObjectiveResource>(CBaseTeamObjectiveResource*)::nameHolder
 D datamap_t* DataMapInit<CBaseToggle>(CBaseToggle*)::dataDesc
 D datamap_t* DataMapInit<CBaseToggle>(CBaseToggle*)::nameHolder
 D datamap_t* DataMapInit<CBaseTrigger>(CBaseTrigger*)::dataDesc
 D datamap_t* DataMapInit<CBaseTrigger>(CBaseTrigger*)::nameHolder
 D datamap_t* DataMapInit<CBaseVPhysicsTrigger>(CBaseVPhysicsTrigger*)::dataDesc
 D datamap_t* DataMapInit<CBaseVPhysicsTrigger>(CBaseVPhysicsTrigger*)::nameHolder
 D datamap_t* DataMapInit<CBaseViewModel>(CBaseViewModel*)::dataDesc
 D datamap_t* DataMapInit<CBaseViewModel>(CBaseViewModel*)::nameHolder
 D datamap_t* DataMapInit<CBeam>(CBeam*)::dataDesc
 D datamap_t* DataMapInit<CBeam>(CBeam*)::nameHolder
 D datamap_t* DataMapInit<CBeamSpotlight>(CBeamSpotlight*)::dataDesc
 D datamap_t* DataMapInit<CBeamSpotlight>(CBeamSpotlight*)::nameHolder
 D datamap_t* DataMapInit<CBlood>(CBlood*)::dataDesc
 D datamap_t* DataMapInit<CBlood>(CBlood*)::nameHolder
 D datamap_t* DataMapInit<CBoneFollower>(CBoneFollower*)::dataDesc
 D datamap_t* DataMapInit<CBoneFollower>(CBoneFollower*)::nameHolder
 D datamap_t* DataMapInit<CBoneFollowerManager>(CBoneFollowerManager*)::dataDesc
 D datamap_t* DataMapInit<CBoneFollowerManager>(CBoneFollowerManager*)::nameHolder
 D datamap_t* DataMapInit<CBoomerClaw>(CBoomerClaw*)::dataDesc
 D datamap_t* DataMapInit<CBoomerClaw>(CBoomerClaw*)::nameHolder
 D datamap_t* DataMapInit<CBreakable>(CBreakable*)::dataDesc
 D datamap_t* DataMapInit<CBreakable>(CBreakable*)::nameHolder
 D datamap_t* DataMapInit<CBreakableProp>(CBreakableProp*)::dataDesc
 D datamap_t* DataMapInit<CBreakableProp>(CBreakableProp*)::nameHolder
 D datamap_t* DataMapInit<CBreakableSurface>(CBreakableSurface*)::dataDesc
 D datamap_t* DataMapInit<CBreakableSurface>(CBreakableSurface*)::nameHolder
 D datamap_t* DataMapInit<CBubbling>(CBubbling*)::dataDesc
 D datamap_t* DataMapInit<CBubbling>(CBubbling*)::nameHolder
 D datamap_t* DataMapInit<CButtonTimed>(CButtonTimed*)::dataDesc
 D datamap_t* DataMapInit<CButtonTimed>(CButtonTimed*)::nameHolder
 D datamap_t* DataMapInit<CCSPlayer>(CCSPlayer*)::dataDesc
 D datamap_t* DataMapInit<CCSPlayer>(CCSPlayer*)::nameHolder
 D datamap_t* DataMapInit<CCSRagdoll>(CCSRagdoll*)::dataDesc
 D datamap_t* DataMapInit<CCSRagdoll>(CCSRagdoll*)::nameHolder
 D datamap_t* DataMapInit<CCarProp>(CCarProp*)::dataDesc
 D datamap_t* DataMapInit<CCarProp>(CCarProp*)::nameHolder
 D datamap_t* DataMapInit<CChangeLevel>(CChangeLevel*)::dataDesc
 D datamap_t* DataMapInit<CChangeLevel>(CChangeLevel*)::nameHolder
 D datamap_t* DataMapInit<CClaw>(CClaw*)::dataDesc
 D datamap_t* DataMapInit<CClaw>(CClaw*)::nameHolder
 D datamap_t* DataMapInit<CClientPath>(CClientPath*)::dataDesc
 D datamap_t* DataMapInit<CClientPath>(CClientPath*)::nameHolder
 D datamap_t* DataMapInit<CCollisionProperty>(CCollisionProperty*)::dataDesc
 D datamap_t* DataMapInit<CCollisionProperty>(CCollisionProperty*)::nameHolder
 D datamap_t* DataMapInit<CColorCorrection>(CColorCorrection*)::dataDesc
 D datamap_t* DataMapInit<CColorCorrection>(CColorCorrection*)::nameHolder
 D datamap_t* DataMapInit<CColorCorrectionVolume>(CColorCorrectionVolume*)::dataDesc
 D datamap_t* DataMapInit<CColorCorrectionVolume>(CColorCorrectionVolume*)::nameHolder
 D datamap_t* DataMapInit<CCommentaryAuto>(CCommentaryAuto*)::dataDesc
 D datamap_t* DataMapInit<CCommentaryAuto>(CCommentaryAuto*)::nameHolder
 D datamap_t* DataMapInit<CCommentaryDummy>(CCommentaryDummy*)::dataDesc
 D datamap_t* DataMapInit<CCommentaryDummy>(CCommentaryDummy*)::nameHolder
 D datamap_t* DataMapInit<CCommentarySystem>(CCommentarySystem*)::dataDesc
 D datamap_t* DataMapInit<CCommentarySystem>(CCommentarySystem*)::nameHolder
 D datamap_t* DataMapInit<CCommentaryZombieSpawner>(CCommentaryZombieSpawner*)::dataDesc
 D datamap_t* DataMapInit<CCommentaryZombieSpawner>(CCommentaryZombieSpawner*)::nameHolder
 D datamap_t* DataMapInit<CConstantForceController>(CConstantForceController*)::dataDesc
 D datamap_t* DataMapInit<CConstantForceController>(CConstantForceController*)::nameHolder
 D datamap_t* DataMapInit<CConstraintAnchor>(CConstraintAnchor*)::dataDesc
 D datamap_t* DataMapInit<CConstraintAnchor>(CConstraintAnchor*)::nameHolder
 D datamap_t* DataMapInit<CCopyRecipientFilter>(CCopyRecipientFilter*)::dataDesc
 D datamap_t* DataMapInit<CCopyRecipientFilter>(CCopyRecipientFilter*)::nameHolder
 D datamap_t* DataMapInit<CDeathFallCamera>(CDeathFallCamera*)::dataDesc
 D datamap_t* DataMapInit<CDeathFallCamera>(CDeathFallCamera*)::nameHolder
 D datamap_t* DataMapInit<CDebugHistory>(CDebugHistory*)::dataDesc
 D datamap_t* DataMapInit<CDebugHistory>(CDebugHistory*)::nameHolder
 D datamap_t* DataMapInit<CDecal>(CDecal*)::dataDesc
 D datamap_t* DataMapInit<CDecal>(CDecal*)::nameHolder
 D datamap_t* DataMapInit<CDynamicLight>(CDynamicLight*)::dataDesc
 D datamap_t* DataMapInit<CDynamicLight>(CDynamicLight*)::nameHolder
 D datamap_t* DataMapInit<CDynamicProp>(CDynamicProp*)::dataDesc
 D datamap_t* DataMapInit<CDynamicProp>(CDynamicProp*)::nameHolder
 D datamap_t* DataMapInit<CEmbers>(CEmbers*)::dataDesc
 D datamap_t* DataMapInit<CEmbers>(CEmbers*)::nameHolder
 D datamap_t* DataMapInit<CEntityDissolve>(CEntityDissolve*)::dataDesc
 D datamap_t* DataMapInit<CEntityDissolve>(CEntityDissolve*)::nameHolder
 D datamap_t* DataMapInit<CEntityFlame>(CEntityFlame*)::dataDesc
 D datamap_t* DataMapInit<CEntityFlame>(CEntityFlame*)::nameHolder
 D datamap_t* DataMapInit<CEntityParticleTrail>(CEntityParticleTrail*)::dataDesc
 D datamap_t* DataMapInit<CEntityParticleTrail>(CEntityParticleTrail*)::nameHolder
 D datamap_t* DataMapInit<CEnvBeam>(CEnvBeam*)::dataDesc
 D datamap_t* DataMapInit<CEnvBeam>(CEnvBeam*)::nameHolder
 D datamap_t* DataMapInit<CEnvBeverage>(CEnvBeverage*)::dataDesc
 D datamap_t* DataMapInit<CEnvBeverage>(CEnvBeverage*)::nameHolder
 D datamap_t* DataMapInit<CEnvCredits>(CEnvCredits*)::dataDesc
 D datamap_t* DataMapInit<CEnvCredits>(CEnvCredits*)::nameHolder
 D datamap_t* DataMapInit<CEnvDOFController>(CEnvDOFController*)::dataDesc
 D datamap_t* DataMapInit<CEnvDOFController>(CEnvDOFController*)::nameHolder
 D datamap_t* DataMapInit<CEnvDustPuff>(CEnvDustPuff*)::dataDesc
 D datamap_t* DataMapInit<CEnvDustPuff>(CEnvDustPuff*)::nameHolder
 D datamap_t* DataMapInit<CEnvEffectsScript>(CEnvEffectsScript*)::dataDesc
 D datamap_t* DataMapInit<CEnvEffectsScript>(CEnvEffectsScript*)::nameHolder
 D datamap_t* DataMapInit<CEnvEntityMaker>(CEnvEntityMaker*)::dataDesc
 D datamap_t* DataMapInit<CEnvEntityMaker>(CEnvEntityMaker*)::nameHolder
 D datamap_t* DataMapInit<CEnvExplosion>(CEnvExplosion*)::dataDesc
 D datamap_t* DataMapInit<CEnvExplosion>(CEnvExplosion*)::nameHolder
 D datamap_t* DataMapInit<CEnvFade>(CEnvFade*)::dataDesc
 D datamap_t* DataMapInit<CEnvFade>(CEnvFade*)::nameHolder
 D datamap_t* DataMapInit<CEnvFireSensor>(CEnvFireSensor*)::dataDesc
 D datamap_t* DataMapInit<CEnvFireSensor>(CEnvFireSensor*)::nameHolder
 D datamap_t* DataMapInit<CEnvFireSource>(CEnvFireSource*)::dataDesc
 D datamap_t* DataMapInit<CEnvFireSource>(CEnvFireSource*)::nameHolder
 D datamap_t* DataMapInit<CEnvFunnel>(CEnvFunnel*)::dataDesc
 D datamap_t* DataMapInit<CEnvFunnel>(CEnvFunnel*)::nameHolder
 D datamap_t* DataMapInit<CEnvGlobal>(CEnvGlobal*)::dataDesc
 D datamap_t* DataMapInit<CEnvGlobal>(CEnvGlobal*)::nameHolder
 D datamap_t* DataMapInit<CEnvGunfire>(CEnvGunfire*)::dataDesc
 D datamap_t* DataMapInit<CEnvGunfire>(CEnvGunfire*)::nameHolder
 D datamap_t* DataMapInit<CEnvHudHint>(CEnvHudHint*)::dataDesc
 D datamap_t* DataMapInit<CEnvHudHint>(CEnvHudHint*)::nameHolder
 D datamap_t* DataMapInit<CEnvLaser>(CEnvLaser*)::dataDesc
 D datamap_t* DataMapInit<CEnvLaser>(CEnvLaser*)::nameHolder
 D datamap_t* DataMapInit<CEnvMicrophone>(CEnvMicrophone*)::dataDesc
 D datamap_t* DataMapInit<CEnvMicrophone>(CEnvMicrophone*)::nameHolder
 D datamap_t* DataMapInit<CEnvMuzzleFlash>(CEnvMuzzleFlash*)::dataDesc
 D datamap_t* DataMapInit<CEnvMuzzleFlash>(CEnvMuzzleFlash*)::nameHolder
 D datamap_t* DataMapInit<CEnvParticleScript>(CEnvParticleScript*)::dataDesc
 D datamap_t* DataMapInit<CEnvParticleScript>(CEnvParticleScript*)::nameHolder
 D datamap_t* DataMapInit<CEnvPlayerSurfaceTrigger>(CEnvPlayerSurfaceTrigger*)::dataDesc
 D datamap_t* DataMapInit<CEnvPlayerSurfaceTrigger>(CEnvPlayerSurfaceTrigger*)::nameHolder
 D datamap_t* DataMapInit<CEnvProjectedTexture>(CEnvProjectedTexture*)::dataDesc
 D datamap_t* DataMapInit<CEnvProjectedTexture>(CEnvProjectedTexture*)::nameHolder
 D datamap_t* DataMapInit<CEnvQuadraticBeam>(CEnvQuadraticBeam*)::dataDesc
 D datamap_t* DataMapInit<CEnvQuadraticBeam>(CEnvQuadraticBeam*)::nameHolder
 D datamap_t* DataMapInit<CEnvRockLauncher>(CEnvRockLauncher*)::dataDesc
 D datamap_t* DataMapInit<CEnvRockLauncher>(CEnvRockLauncher*)::nameHolder
 D datamap_t* DataMapInit<CEnvScreenEffect>(CEnvScreenEffect*)::dataDesc
 D datamap_t* DataMapInit<CEnvScreenEffect>(CEnvScreenEffect*)::nameHolder
 D datamap_t* DataMapInit<CEnvScreenOverlay>(CEnvScreenOverlay*)::dataDesc
 D datamap_t* DataMapInit<CEnvScreenOverlay>(CEnvScreenOverlay*)::nameHolder
 D datamap_t* DataMapInit<CEnvShake>(CEnvShake*)::dataDesc
 D datamap_t* DataMapInit<CEnvShake>(CEnvShake*)::nameHolder
 D datamap_t* DataMapInit<CEnvShooter>(CEnvShooter*)::dataDesc
 D datamap_t* DataMapInit<CEnvShooter>(CEnvShooter*)::nameHolder
 D datamap_t* DataMapInit<CEnvSoundscape>(CEnvSoundscape*)::dataDesc
 D datamap_t* DataMapInit<CEnvSoundscape>(CEnvSoundscape*)::nameHolder
 D datamap_t* DataMapInit<CEnvSoundscapeProxy>(CEnvSoundscapeProxy*)::dataDesc
 D datamap_t* DataMapInit<CEnvSoundscapeProxy>(CEnvSoundscapeProxy*)::nameHolder
 D datamap_t* DataMapInit<CEnvSoundscapeTriggerable>(CEnvSoundscapeTriggerable*)::dataDesc
 D datamap_t* DataMapInit<CEnvSoundscapeTriggerable>(CEnvSoundscapeTriggerable*)::nameHolder
 D datamap_t* DataMapInit<CEnvSpark>(CEnvSpark*)::dataDesc
 D datamap_t* DataMapInit<CEnvSpark>(CEnvSpark*)::nameHolder
 D datamap_t* DataMapInit<CEnvSplash>(CEnvSplash*)::dataDesc
 D datamap_t* DataMapInit<CEnvSplash>(CEnvSplash*)::nameHolder
 D datamap_t* DataMapInit<CEnvTonemapController>(CEnvTonemapController*)::dataDesc
 D datamap_t* DataMapInit<CEnvTonemapController>(CEnvTonemapController*)::nameHolder
 D datamap_t* DataMapInit<CEnvTracer>(CEnvTracer*)::dataDesc
 D datamap_t* DataMapInit<CEnvTracer>(CEnvTracer*)::nameHolder
 D datamap_t* DataMapInit<CEnvViewPunch>(CEnvViewPunch*)::dataDesc
 D datamap_t* DataMapInit<CEnvViewPunch>(CEnvViewPunch*)::nameHolder
 D datamap_t* DataMapInit<CEnvWeaponfire>(CEnvWeaponfire*)::dataDesc
 D datamap_t* DataMapInit<CEnvWeaponfire>(CEnvWeaponfire*)::nameHolder
 D datamap_t* DataMapInit<CEnvWind>(CEnvWind*)::dataDesc
 D datamap_t* DataMapInit<CEnvWind>(CEnvWind*)::nameHolder
 D datamap_t* DataMapInit<CEnvZoom>(CEnvZoom*)::dataDesc
 D datamap_t* DataMapInit<CEnvZoom>(CEnvZoom*)::nameHolder
 D datamap_t* DataMapInit<CEnv_Blocker>(CEnv_Blocker*)::dataDesc
 D datamap_t* DataMapInit<CEnv_Blocker>(CEnv_Blocker*)::nameHolder
 D datamap_t* DataMapInit<CEscapeRoute>(CEscapeRoute*)::dataDesc
 D datamap_t* DataMapInit<CEscapeRoute>(CEscapeRoute*)::nameHolder
 D datamap_t* DataMapInit<CEventAction>(CEventAction*)::dataDesc
 D datamap_t* DataMapInit<CEventAction>(CEventAction*)::nameHolder
 D datamap_t* DataMapInit<CEventQueue>(CEventQueue*)::dataDesc
 D datamap_t* DataMapInit<CEventQueue>(CEventQueue*)::nameHolder
 D datamap_t* DataMapInit<CFailableAchievement>(CFailableAchievement*)::dataDesc
 D datamap_t* DataMapInit<CFailableAchievement>(CFailableAchievement*)::nameHolder
 D datamap_t* DataMapInit<CFilterClass>(CFilterClass*)::dataDesc
 D datamap_t* DataMapInit<CFilterClass>(CFilterClass*)::nameHolder
 D datamap_t* DataMapInit<CFilterContext>(CFilterContext*)::dataDesc
 D datamap_t* DataMapInit<CFilterContext>(CFilterContext*)::nameHolder
 D datamap_t* DataMapInit<CFilterEnemy>(CFilterEnemy*)::dataDesc
 D datamap_t* DataMapInit<CFilterEnemy>(CFilterEnemy*)::nameHolder
 D datamap_t* DataMapInit<CFilterMassGreater>(CFilterMassGreater*)::dataDesc
 D datamap_t* DataMapInit<CFilterMassGreater>(CFilterMassGreater*)::nameHolder
 D datamap_t* DataMapInit<CFilterModel>(CFilterModel*)::dataDesc
 D datamap_t* DataMapInit<CFilterModel>(CFilterModel*)::nameHolder
 D datamap_t* DataMapInit<CFilterMultiple>(CFilterMultiple*)::dataDesc
 D datamap_t* DataMapInit<CFilterMultiple>(CFilterMultiple*)::nameHolder
 D datamap_t* DataMapInit<CFilterName>(CFilterName*)::dataDesc
 D datamap_t* DataMapInit<CFilterName>(CFilterName*)::nameHolder
 D datamap_t* DataMapInit<CFinaleTrigger>(CFinaleTrigger*)::dataDesc
 D datamap_t* DataMapInit<CFinaleTrigger>(CFinaleTrigger*)::nameHolder
 D datamap_t* DataMapInit<CFire>(CFire*)::dataDesc
 D datamap_t* DataMapInit<CFire>(CFire*)::nameHolder
 D datamap_t* DataMapInit<CFireSmoke>(CFireSmoke*)::dataDesc
 D datamap_t* DataMapInit<CFireSmoke>(CFireSmoke*)::nameHolder
 D datamap_t* DataMapInit<CFireTrail>(CFireTrail*)::dataDesc
 D datamap_t* DataMapInit<CFireTrail>(CFireTrail*)::nameHolder
 D datamap_t* DataMapInit<CFirstAidKit>(CFirstAidKit*)::dataDesc
 D datamap_t* DataMapInit<CFirstAidKit>(CFirstAidKit*)::nameHolder
 D datamap_t* DataMapInit<CFish>(CFish*)::dataDesc
 D datamap_t* DataMapInit<CFish>(CFish*)::nameHolder
 D datamap_t* DataMapInit<CFishPool>(CFishPool*)::dataDesc
 D datamap_t* DataMapInit<CFishPool>(CFishPool*)::nameHolder
 D datamap_t* DataMapInit<CFlexCycler>(CFlexCycler*)::dataDesc
 D datamap_t* DataMapInit<CFlexCycler>(CFlexCycler*)::nameHolder
 D datamap_t* DataMapInit<CFlexExpresser>(CFlexExpresser*)::dataDesc
 D datamap_t* DataMapInit<CFlexExpresser>(CFlexExpresser*)::nameHolder
 D datamap_t* DataMapInit<CFogController>(CFogController*)::dataDesc
 D datamap_t* DataMapInit<CFogController>(CFogController*)::nameHolder
 D datamap_t* DataMapInit<CFogTrigger>(CFogTrigger*)::dataDesc
 D datamap_t* DataMapInit<CFogTrigger>(CFogTrigger*)::nameHolder
 D datamap_t* DataMapInit<CFogVolume>(CFogVolume*)::dataDesc
 D datamap_t* DataMapInit<CFogVolume>(CFogVolume*)::nameHolder
 D datamap_t* DataMapInit<CFourWheelServerVehicle>(CFourWheelServerVehicle*)::dataDesc
 D datamap_t* DataMapInit<CFourWheelServerVehicle>(CFourWheelServerVehicle*)::nameHolder
 D datamap_t* DataMapInit<CFourWheelVehiclePhysics>(CFourWheelVehiclePhysics*)::dataDesc
 D datamap_t* DataMapInit<CFourWheelVehiclePhysics>(CFourWheelVehiclePhysics*)::nameHolder
 D datamap_t* DataMapInit<CFuelBarrelProp>(CFuelBarrelProp*)::dataDesc
 D datamap_t* DataMapInit<CFuelBarrelProp>(CFuelBarrelProp*)::nameHolder
 D datamap_t* DataMapInit<CFuncAreaPortalBase>(CFuncAreaPortalBase*)::dataDesc
 D datamap_t* DataMapInit<CFuncAreaPortalBase>(CFuncAreaPortalBase*)::nameHolder
 D datamap_t* DataMapInit<CFuncAreaPortalWindow>(CFuncAreaPortalWindow*)::dataDesc
 D datamap_t* DataMapInit<CFuncAreaPortalWindow>(CFuncAreaPortalWindow*)::nameHolder
 D datamap_t* DataMapInit<CFuncBrush>(CFuncBrush*)::dataDesc
 D datamap_t* DataMapInit<CFuncBrush>(CFuncBrush*)::nameHolder
 D datamap_t* DataMapInit<CFuncConveyor>(CFuncConveyor*)::dataDesc
 D datamap_t* DataMapInit<CFuncConveyor>(CFuncConveyor*)::nameHolder
 D datamap_t* DataMapInit<CFuncElevator>(CFuncElevator*)::dataDesc
 D datamap_t* DataMapInit<CFuncElevator>(CFuncElevator*)::nameHolder
 D datamap_t* DataMapInit<CFuncFireExtinguisher>(CFuncFireExtinguisher*)::dataDesc
 D datamap_t* DataMapInit<CFuncFireExtinguisher>(CFuncFireExtinguisher*)::nameHolder
 D datamap_t* DataMapInit<CFuncLadder>(CFuncLadder*)::dataDesc
 D datamap_t* DataMapInit<CFuncLadder>(CFuncLadder*)::nameHolder
 D datamap_t* DataMapInit<CFuncMoveLinear>(CFuncMoveLinear*)::dataDesc
 D datamap_t* DataMapInit<CFuncMoveLinear>(CFuncMoveLinear*)::nameHolder
 D datamap_t* DataMapInit<CFuncNavAttributeRegion>(CFuncNavAttributeRegion*)::dataDesc
 D datamap_t* DataMapInit<CFuncNavAttributeRegion>(CFuncNavAttributeRegion*)::nameHolder
 D datamap_t* DataMapInit<CFuncNavBlocker>(CFuncNavBlocker*)::dataDesc
 D datamap_t* DataMapInit<CFuncNavBlocker>(CFuncNavBlocker*)::nameHolder
 D datamap_t* DataMapInit<CFuncNavObstruction>(CFuncNavObstruction*)::dataDesc
 D datamap_t* DataMapInit<CFuncNavObstruction>(CFuncNavObstruction*)::nameHolder
 D datamap_t* DataMapInit<CFuncNavStairsToggle>(CFuncNavStairsToggle*)::dataDesc
 D datamap_t* DataMapInit<CFuncNavStairsToggle>(CFuncNavStairsToggle*)::nameHolder
 D datamap_t* DataMapInit<CFuncOccluder>(CFuncOccluder*)::dataDesc
 D datamap_t* DataMapInit<CFuncOccluder>(CFuncOccluder*)::nameHolder
 D datamap_t* DataMapInit<CFuncPlat>(CFuncPlat*)::dataDesc
 D datamap_t* DataMapInit<CFuncPlat>(CFuncPlat*)::nameHolder
 D datamap_t* DataMapInit<CFuncPlatRot>(CFuncPlatRot*)::dataDesc
 D datamap_t* DataMapInit<CFuncPlatRot>(CFuncPlatRot*)::nameHolder
 D datamap_t* DataMapInit<CFuncPlayerInfectedClip>(CFuncPlayerInfectedClip*)::dataDesc
 D datamap_t* DataMapInit<CFuncPlayerInfectedClip>(CFuncPlayerInfectedClip*)::nameHolder
 D datamap_t* DataMapInit<CFuncRagdollFader>(CFuncRagdollFader*)::dataDesc
 D datamap_t* DataMapInit<CFuncRagdollFader>(CFuncRagdollFader*)::nameHolder
 D datamap_t* DataMapInit<CFuncReflectiveGlass>(CFuncReflectiveGlass*)::dataDesc
 D datamap_t* DataMapInit<CFuncReflectiveGlass>(CFuncReflectiveGlass*)::nameHolder
 D datamap_t* DataMapInit<CFuncRotating>(CFuncRotating*)::dataDesc
 D datamap_t* DataMapInit<CFuncRotating>(CFuncRotating*)::nameHolder
 D datamap_t* DataMapInit<CFuncSimpleLadder>(CFuncSimpleLadder*)::dataDesc
 D datamap_t* DataMapInit<CFuncSimpleLadder>(CFuncSimpleLadder*)::nameHolder
 D datamap_t* DataMapInit<CFuncSmokeVolume>(CFuncSmokeVolume*)::dataDesc
 D datamap_t* DataMapInit<CFuncSmokeVolume>(CFuncSmokeVolume*)::nameHolder
 D datamap_t* DataMapInit<CFuncSpawnVolume>(CFuncSpawnVolume*)::dataDesc
 D datamap_t* DataMapInit<CFuncSpawnVolume>(CFuncSpawnVolume*)::nameHolder
 D datamap_t* DataMapInit<CFuncTankTrain>(CFuncTankTrain*)::dataDesc
 D datamap_t* DataMapInit<CFuncTankTrain>(CFuncTankTrain*)::nameHolder
 D datamap_t* DataMapInit<CFuncTrackAuto>(CFuncTrackAuto*)::dataDesc
 D datamap_t* DataMapInit<CFuncTrackAuto>(CFuncTrackAuto*)::nameHolder
 D datamap_t* DataMapInit<CFuncTrackChange>(CFuncTrackChange*)::dataDesc
 D datamap_t* DataMapInit<CFuncTrackChange>(CFuncTrackChange*)::nameHolder
 D datamap_t* DataMapInit<CFuncTrackTrain>(CFuncTrackTrain*)::dataDesc
 D datamap_t* DataMapInit<CFuncTrackTrain>(CFuncTrackTrain*)::nameHolder
 D datamap_t* DataMapInit<CFuncTrain>(CFuncTrain*)::dataDesc
 D datamap_t* DataMapInit<CFuncTrain>(CFuncTrain*)::nameHolder
 D datamap_t* DataMapInit<CFuncTrainControls>(CFuncTrainControls*)::dataDesc
 D datamap_t* DataMapInit<CFuncTrainControls>(CFuncTrainControls*)::nameHolder
 D datamap_t* DataMapInit<CFuncVPhysicsClip>(CFuncVPhysicsClip*)::dataDesc
 D datamap_t* DataMapInit<CFuncVPhysicsClip>(CFuncVPhysicsClip*)::nameHolder
 D datamap_t* DataMapInit<CFuncVehicleClip>(CFuncVehicleClip*)::dataDesc
 D datamap_t* DataMapInit<CFuncVehicleClip>(CFuncVehicleClip*)::nameHolder
 D datamap_t* DataMapInit<CFuncWall>(CFuncWall*)::dataDesc
 D datamap_t* DataMapInit<CFuncWall>(CFuncWall*)::nameHolder
 D datamap_t* DataMapInit<CFuncWallToggle>(CFuncWallToggle*)::dataDesc
 D datamap_t* DataMapInit<CFuncWallToggle>(CFuncWallToggle*)::nameHolder
 D datamap_t* DataMapInit<CFunc_Dust>(CFunc_Dust*)::dataDesc
 D datamap_t* DataMapInit<CFunc_Dust>(CFunc_Dust*)::nameHolder
 D datamap_t* DataMapInit<CFunc_LOD>(CFunc_LOD*)::dataDesc
 D datamap_t* DataMapInit<CFunc_LOD>(CFunc_LOD*)::nameHolder
 D datamap_t* DataMapInit<CGameEnd>(CGameEnd*)::dataDesc
 D datamap_t* DataMapInit<CGameEnd>(CGameEnd*)::nameHolder
 D datamap_t* DataMapInit<CGameGibManager>(CGameGibManager*)::dataDesc
 D datamap_t* DataMapInit<CGameGibManager>(CGameGibManager*)::nameHolder
 D datamap_t* DataMapInit<CGamePlayerEquip>(CGamePlayerEquip*)::dataDesc
 D datamap_t* DataMapInit<CGamePlayerEquip>(CGamePlayerEquip*)::nameHolder
 D datamap_t* DataMapInit<CGamePlayerZone>(CGamePlayerZone*)::dataDesc
 D datamap_t* DataMapInit<CGamePlayerZone>(CGamePlayerZone*)::nameHolder
 D datamap_t* DataMapInit<CGameScore>(CGameScore*)::dataDesc
 D datamap_t* DataMapInit<CGameScore>(CGameScore*)::nameHolder
 D datamap_t* DataMapInit<CGameText>(CGameText*)::dataDesc
 D datamap_t* DataMapInit<CGameText>(CGameText*)::nameHolder
 D datamap_t* DataMapInit<CGameUI>(CGameUI*)::dataDesc
 D datamap_t* DataMapInit<CGameUI>(CGameUI*)::nameHolder
 D datamap_t* DataMapInit<CGameWeaponManager>(CGameWeaponManager*)::dataDesc
 D datamap_t* DataMapInit<CGameWeaponManager>(CGameWeaponManager*)::nameHolder
 D datamap_t* DataMapInit<CGasCan>(CGasCan*)::dataDesc
 D datamap_t* DataMapInit<CGasCan>(CGasCan*)::nameHolder
 D datamap_t* DataMapInit<CGib>(CGib*)::dataDesc
 D datamap_t* DataMapInit<CGib>(CGib*)::nameHolder
 D datamap_t* DataMapInit<CGibShooter>(CGibShooter*)::dataDesc
 D datamap_t* DataMapInit<CGibShooter>(CGibShooter*)::nameHolder
 D datamap_t* DataMapInit<CGlobalState>(CGlobalState*)::dataDesc
 D datamap_t* DataMapInit<CGlobalState>(CGlobalState*)::nameHolder
 D datamap_t* DataMapInit<CGunTarget>(CGunTarget*)::dataDesc
 D datamap_t* DataMapInit<CGunTarget>(CGunTarget*)::nameHolder
 D datamap_t* DataMapInit<CHunterClaw>(CHunterClaw*)::dataDesc
 D datamap_t* DataMapInit<CHunterClaw>(CHunterClaw*)::nameHolder
 D datamap_t* DataMapInit<CInfectedZooMaker>(CInfectedZooMaker*)::dataDesc
 D datamap_t* DataMapInit<CInfectedZooMaker>(CInfectedZooMaker*)::nameHolder
 D datamap_t* DataMapInit<CInferno>(CInferno*)::dataDesc
 D datamap_t* DataMapInit<CInferno>(CInferno*)::nameHolder
 D datamap_t* DataMapInit<CInfoDirector>(CInfoDirector*)::dataDesc
 D datamap_t* DataMapInit<CInfoDirector>(CInfoDirector*)::nameHolder
 D datamap_t* DataMapInit<CInfoElevatorFloor>(CInfoElevatorFloor*)::dataDesc
 D datamap_t* DataMapInit<CInfoElevatorFloor>(CInfoElevatorFloor*)::nameHolder
 D datamap_t* DataMapInit<CInfoGameEventProxy>(CInfoGameEventProxy*)::dataDesc
 D datamap_t* DataMapInit<CInfoGameEventProxy>(CInfoGameEventProxy*)::nameHolder
 D datamap_t* DataMapInit<CInfoGameMode>(CInfoGameMode*)::dataDesc
 D datamap_t* DataMapInit<CInfoGameMode>(CInfoGameMode*)::nameHolder
 D datamap_t* DataMapInit<CInfoGoalInfectedChase>(CInfoGoalInfectedChase*)::dataDesc
 D datamap_t* DataMapInit<CInfoGoalInfectedChase>(CInfoGoalInfectedChase*)::nameHolder
 D datamap_t* DataMapInit<CInfoOverlayAccessor>(CInfoOverlayAccessor*)::dataDesc
 D datamap_t* DataMapInit<CInfoOverlayAccessor>(CInfoOverlayAccessor*)::nameHolder
 D datamap_t* DataMapInit<CInfoRemarkable>(CInfoRemarkable*)::dataDesc
 D datamap_t* DataMapInit<CInfoRemarkable>(CInfoRemarkable*)::nameHolder
 D datamap_t* DataMapInit<CInfoViewParameters>(CInfoViewParameters*)::dataDesc
 D datamap_t* DataMapInit<CInfoViewParameters>(CInfoViewParameters*)::nameHolder
 D datamap_t* DataMapInit<CInfoZombieSpawn>(CInfoZombieSpawn*)::dataDesc
 D datamap_t* DataMapInit<CInfoZombieSpawn>(CInfoZombieSpawn*)::nameHolder
 D datamap_t* DataMapInit<CInstancedSceneEntity>(CInstancedSceneEntity*)::dataDesc
 D datamap_t* DataMapInit<CInstancedSceneEntity>(CInstancedSceneEntity*)::nameHolder
 D datamap_t* DataMapInit<CItem>(CItem*)::dataDesc
 D datamap_t* DataMapInit<CItem>(CItem*)::nameHolder
 D datamap_t* DataMapInit<CItemSoda>(CItemSoda*)::dataDesc
 D datamap_t* DataMapInit<CItemSoda>(CItemSoda*)::nameHolder
 D datamap_t* DataMapInit<CKeepUpright>(CKeepUpright*)::dataDesc
 D datamap_t* DataMapInit<CKeepUpright>(CKeepUpright*)::nameHolder
 D datamap_t* DataMapInit<CLight>(CLight*)::dataDesc
 D datamap_t* DataMapInit<CLight>(CLight*)::nameHolder
 D datamap_t* DataMapInit<CLightGlow>(CLightGlow*)::dataDesc
 D datamap_t* DataMapInit<CLightGlow>(CLightGlow*)::nameHolder
 D datamap_t* DataMapInit<CLogicActiveAutosave>(CLogicActiveAutosave*)::dataDesc
 D datamap_t* DataMapInit<CLogicActiveAutosave>(CLogicActiveAutosave*)::nameHolder
 D datamap_t* DataMapInit<CLogicAuto>(CLogicAuto*)::dataDesc
 D datamap_t* DataMapInit<CLogicAuto>(CLogicAuto*)::nameHolder
 D datamap_t* DataMapInit<CLogicAutosave>(CLogicAutosave*)::dataDesc
 D datamap_t* DataMapInit<CLogicAutosave>(CLogicAutosave*)::nameHolder
 D datamap_t* DataMapInit<CLogicBranch>(CLogicBranch*)::dataDesc
 D datamap_t* DataMapInit<CLogicBranch>(CLogicBranch*)::nameHolder
 D datamap_t* DataMapInit<CLogicBranchList>(CLogicBranchList*)::dataDesc
 D datamap_t* DataMapInit<CLogicBranchList>(CLogicBranchList*)::nameHolder
 D datamap_t* DataMapInit<CLogicCase>(CLogicCase*)::dataDesc
 D datamap_t* DataMapInit<CLogicCase>(CLogicCase*)::nameHolder
 D datamap_t* DataMapInit<CLogicCollisionPair>(CLogicCollisionPair*)::dataDesc
 D datamap_t* DataMapInit<CLogicCollisionPair>(CLogicCollisionPair*)::nameHolder
 D datamap_t* DataMapInit<CLogicCompare>(CLogicCompare*)::dataDesc
 D datamap_t* DataMapInit<CLogicCompare>(CLogicCompare*)::nameHolder
 D datamap_t* DataMapInit<CLogicCompareInteger>(CLogicCompareInteger*)::dataDesc
 D datamap_t* DataMapInit<CLogicCompareInteger>(CLogicCompareInteger*)::nameHolder
 D datamap_t* DataMapInit<CLogicLineToEntity>(CLogicLineToEntity*)::dataDesc
 D datamap_t* DataMapInit<CLogicLineToEntity>(CLogicLineToEntity*)::nameHolder
 D datamap_t* DataMapInit<CLogicMeasureMovement>(CLogicMeasureMovement*)::dataDesc
 D datamap_t* DataMapInit<CLogicMeasureMovement>(CLogicMeasureMovement*)::nameHolder
 D datamap_t* DataMapInit<CLogicNavigation>(CLogicNavigation*)::dataDesc
 D datamap_t* DataMapInit<CLogicNavigation>(CLogicNavigation*)::nameHolder
 D datamap_t* DataMapInit<CLogicRelay>(CLogicRelay*)::dataDesc
 D datamap_t* DataMapInit<CLogicRelay>(CLogicRelay*)::nameHolder
 D datamap_t* DataMapInit<CLunge>(CLunge*)::dataDesc
 D datamap_t* DataMapInit<CLunge>(CLunge*)::nameHolder
 D datamap_t* DataMapInit<CMapInfo>(CMapInfo*)::dataDesc
 D datamap_t* DataMapInit<CMapInfo>(CMapInfo*)::nameHolder
 D datamap_t* DataMapInit<CMaterialModifyControl>(CMaterialModifyControl*)::dataDesc
 D datamap_t* DataMapInit<CMaterialModifyControl>(CMaterialModifyControl*)::nameHolder
 D datamap_t* DataMapInit<CMathColorBlend>(CMathColorBlend*)::dataDesc
 D datamap_t* DataMapInit<CMathColorBlend>(CMathColorBlend*)::nameHolder
 D datamap_t* DataMapInit<CMathCounter>(CMathCounter*)::dataDesc
 D datamap_t* DataMapInit<CMathCounter>(CMathCounter*)::nameHolder
 D datamap_t* DataMapInit<CMathRemap>(CMathRemap*)::dataDesc
 D datamap_t* DataMapInit<CMathRemap>(CMathRemap*)::nameHolder
 D datamap_t* DataMapInit<CMessage>(CMessage*)::dataDesc
 D datamap_t* DataMapInit<CMessage>(CMessage*)::nameHolder
 D datamap_t* DataMapInit<CMessageEntity>(CMessageEntity*)::dataDesc
 D datamap_t* DataMapInit<CMessageEntity>(CMessageEntity*)::nameHolder
 D datamap_t* DataMapInit<CMolotov>(CMolotov*)::dataDesc
 D datamap_t* DataMapInit<CMolotov>(CMolotov*)::nameHolder
 D datamap_t* DataMapInit<CMomentaryRotButton>(CMomentaryRotButton*)::dataDesc
 D datamap_t* DataMapInit<CMomentaryRotButton>(CMomentaryRotButton*)::nameHolder
 D datamap_t* DataMapInit<CMotorController>(CMotorController*)::dataDesc
 D datamap_t* DataMapInit<CMotorController>(CMotorController*)::nameHolder
 D datamap_t* DataMapInit<CMovementSpeedMod>(CMovementSpeedMod*)::dataDesc
 D datamap_t* DataMapInit<CMovementSpeedMod>(CMovementSpeedMod*)::nameHolder
 D datamap_t* DataMapInit<CMultiDamage>(CMultiDamage*)::dataDesc
 D datamap_t* DataMapInit<CMultiDamage>(CMultiDamage*)::nameHolder
 D datamap_t* DataMapInit<CMultiSource>(CMultiSource*)::dataDesc
 D datamap_t* DataMapInit<CMultiSource>(CMultiSource*)::nameHolder
 D datamap_t* DataMapInit<COrnamentProp>(COrnamentProp*)::dataDesc
 D datamap_t* DataMapInit<COrnamentProp>(COrnamentProp*)::nameHolder
 D datamap_t* DataMapInit<COuttroStats>(COuttroStats*)::dataDesc
 D datamap_t* DataMapInit<COuttroStats>(COuttroStats*)::nameHolder
 D datamap_t* DataMapInit<COxygenTank>(COxygenTank*)::dataDesc
 D datamap_t* DataMapInit<COxygenTank>(COxygenTank*)::nameHolder
 D datamap_t* DataMapInit<CPainPills>(CPainPills*)::dataDesc
 D datamap_t* DataMapInit<CPainPills>(CPainPills*)::nameHolder
 D datamap_t* DataMapInit<CParticleFire>(CParticleFire*)::dataDesc
 D datamap_t* DataMapInit<CParticleFire>(CParticleFire*)::nameHolder
 D datamap_t* DataMapInit<CParticleLight>(CParticleLight*)::dataDesc
 D datamap_t* DataMapInit<CParticleLight>(CParticleLight*)::nameHolder
 D datamap_t* DataMapInit<CParticlePerformanceMonitor>(CParticlePerformanceMonitor*)::dataDesc
 D datamap_t* DataMapInit<CParticlePerformanceMonitor>(CParticlePerformanceMonitor*)::nameHolder
 D datamap_t* DataMapInit<CParticleSystem>(CParticleSystem*)::dataDesc
 D datamap_t* DataMapInit<CParticleSystem>(CParticleSystem*)::nameHolder
 D datamap_t* DataMapInit<CPassengerInfo>(CPassengerInfo*)::dataDesc
 D datamap_t* DataMapInit<CPassengerInfo>(CPassengerInfo*)::nameHolder
 D datamap_t* DataMapInit<CPathCorner>(CPathCorner*)::dataDesc
 D datamap_t* DataMapInit<CPathCorner>(CPathCorner*)::nameHolder
 D datamap_t* DataMapInit<CPathKeyFrame>(CPathKeyFrame*)::dataDesc
 D datamap_t* DataMapInit<CPathKeyFrame>(CPathKeyFrame*)::nameHolder
 D datamap_t* DataMapInit<CPathTrack>(CPathTrack*)::dataDesc
 D datamap_t* DataMapInit<CPathTrack>(CPathTrack*)::nameHolder
 D datamap_t* DataMapInit<CPhysBox>(CPhysBox*)::dataDesc
 D datamap_t* DataMapInit<CPhysBox>(CPhysBox*)::nameHolder
 D datamap_t* DataMapInit<CPhysBoxMultiplayer>(CPhysBoxMultiplayer*)::dataDesc
 D datamap_t* DataMapInit<CPhysBoxMultiplayer>(CPhysBoxMultiplayer*)::nameHolder
 D datamap_t* DataMapInit<CPhysConstraint>(CPhysConstraint*)::dataDesc
 D datamap_t* DataMapInit<CPhysConstraint>(CPhysConstraint*)::nameHolder
 D datamap_t* DataMapInit<CPhysConstraintSystem>(CPhysConstraintSystem*)::dataDesc
 D datamap_t* DataMapInit<CPhysConstraintSystem>(CPhysConstraintSystem*)::nameHolder
 D datamap_t* DataMapInit<CPhysConvert>(CPhysConvert*)::dataDesc
 D datamap_t* DataMapInit<CPhysConvert>(CPhysConvert*)::nameHolder
 D datamap_t* DataMapInit<CPhysExplosion>(CPhysExplosion*)::dataDesc
 D datamap_t* DataMapInit<CPhysExplosion>(CPhysExplosion*)::nameHolder
 D datamap_t* DataMapInit<CPhysForce>(CPhysForce*)::dataDesc
 D datamap_t* DataMapInit<CPhysForce>(CPhysForce*)::nameHolder
 D datamap_t* DataMapInit<CPhysHinge>(CPhysHinge*)::dataDesc
 D datamap_t* DataMapInit<CPhysHinge>(CPhysHinge*)::nameHolder
 D datamap_t* DataMapInit<CPhysImpact>(CPhysImpact*)::dataDesc
 D datamap_t* DataMapInit<CPhysImpact>(CPhysImpact*)::nameHolder
 D datamap_t* DataMapInit<CPhysLength>(CPhysLength*)::dataDesc
 D datamap_t* DataMapInit<CPhysLength>(CPhysLength*)::nameHolder
 D datamap_t* DataMapInit<CPhysMagnet>(CPhysMagnet*)::dataDesc
 D datamap_t* DataMapInit<CPhysMagnet>(CPhysMagnet*)::nameHolder
 D datamap_t* DataMapInit<CPhysMotor>(CPhysMotor*)::dataDesc
 D datamap_t* DataMapInit<CPhysMotor>(CPhysMotor*)::nameHolder
 D datamap_t* DataMapInit<CPhysPulley>(CPhysPulley*)::dataDesc
 D datamap_t* DataMapInit<CPhysPulley>(CPhysPulley*)::nameHolder
 D datamap_t* DataMapInit<CPhysSlideConstraint>(CPhysSlideConstraint*)::dataDesc
 D datamap_t* DataMapInit<CPhysSlideConstraint>(CPhysSlideConstraint*)::nameHolder
 D datamap_t* DataMapInit<CPhysThruster>(CPhysThruster*)::dataDesc
 D datamap_t* DataMapInit<CPhysThruster>(CPhysThruster*)::nameHolder
 D datamap_t* DataMapInit<CPhysTorque>(CPhysTorque*)::dataDesc
 D datamap_t* DataMapInit<CPhysTorque>(CPhysTorque*)::nameHolder
 D datamap_t* DataMapInit<CPhysicsCannister>(CPhysicsCannister*)::dataDesc
 D datamap_t* DataMapInit<CPhysicsCannister>(CPhysicsCannister*)::nameHolder
 D datamap_t* DataMapInit<CPhysicsEntitySolver>(CPhysicsEntitySolver*)::dataDesc
 D datamap_t* DataMapInit<CPhysicsEntitySolver>(CPhysicsEntitySolver*)::nameHolder
 D datamap_t* DataMapInit<CPhysicsNPCSolver>(CPhysicsNPCSolver*)::dataDesc
 D datamap_t* DataMapInit<CPhysicsNPCSolver>(CPhysicsNPCSolver*)::nameHolder
 D datamap_t* DataMapInit<CPhysicsProp>(CPhysicsProp*)::dataDesc
 D datamap_t* DataMapInit<CPhysicsProp>(CPhysicsProp*)::nameHolder
 D datamap_t* DataMapInit<CPhysicsPropRespawnable>(CPhysicsPropRespawnable*)::dataDesc
 D datamap_t* DataMapInit<CPhysicsPropRespawnable>(CPhysicsPropRespawnable*)::nameHolder
 D datamap_t* DataMapInit<CPhysicsShake>(CPhysicsShake*)::dataDesc
 D datamap_t* DataMapInit<CPhysicsShake>(CPhysicsShake*)::nameHolder
 D datamap_t* DataMapInit<CPhysicsSpring>(CPhysicsSpring*)::dataDesc
 D datamap_t* DataMapInit<CPhysicsSpring>(CPhysicsSpring*)::nameHolder
 D datamap_t* DataMapInit<CPhysicsWind>(CPhysicsWind*)::dataDesc
 D datamap_t* DataMapInit<CPhysicsWind>(CPhysicsWind*)::nameHolder
 D datamap_t* DataMapInit<CPhysicsWire>(CPhysicsWire*)::dataDesc
 D datamap_t* DataMapInit<CPhysicsWire>(CPhysicsWire*)::nameHolder
 D datamap_t* DataMapInit<CPipeBomb>(CPipeBomb*)::dataDesc
 D datamap_t* DataMapInit<CPipeBomb>(CPipeBomb*)::nameHolder
 D datamap_t* DataMapInit<CPistol>(CPistol*)::dataDesc
 D datamap_t* DataMapInit<CPistol>(CPistol*)::nameHolder
 D datamap_t* DataMapInit<CPlasma>(CPlasma*)::dataDesc
 D datamap_t* DataMapInit<CPlasma>(CPlasma*)::nameHolder
 D datamap_t* DataMapInit<CPlayerLocalData>(CPlayerLocalData*)::dataDesc
 D datamap_t* DataMapInit<CPlayerLocalData>(CPlayerLocalData*)::nameHolder
 D datamap_t* DataMapInit<CPlayerResource>(CPlayerResource*)::dataDesc
 D datamap_t* DataMapInit<CPlayerResource>(CPlayerResource*)::nameHolder
 D datamap_t* DataMapInit<CPlayerState>(CPlayerState*)::dataDesc
 D datamap_t* DataMapInit<CPlayerState>(CPlayerState*)::nameHolder
 D datamap_t* DataMapInit<CPointAngleSensor>(CPointAngleSensor*)::dataDesc
 D datamap_t* DataMapInit<CPointAngleSensor>(CPointAngleSensor*)::nameHolder
 D datamap_t* DataMapInit<CPointAngularVelocitySensor>(CPointAngularVelocitySensor*)::dataDesc
 D datamap_t* DataMapInit<CPointAngularVelocitySensor>(CPointAngularVelocitySensor*)::nameHolder
 D datamap_t* DataMapInit<CPointBonusMapsAccessor>(CPointBonusMapsAccessor*)::dataDesc
 D datamap_t* DataMapInit<CPointBonusMapsAccessor>(CPointBonusMapsAccessor*)::nameHolder
 D datamap_t* DataMapInit<CPointBroadcastClientCommand>(CPointBroadcastClientCommand*)::dataDesc
 D datamap_t* DataMapInit<CPointBroadcastClientCommand>(CPointBroadcastClientCommand*)::nameHolder
 D datamap_t* DataMapInit<CPointClientCommand>(CPointClientCommand*)::dataDesc
 D datamap_t* DataMapInit<CPointClientCommand>(CPointClientCommand*)::nameHolder
 D datamap_t* DataMapInit<CPointCommentaryNode>(CPointCommentaryNode*)::dataDesc
 D datamap_t* DataMapInit<CPointCommentaryNode>(CPointCommentaryNode*)::nameHolder
 D datamap_t* DataMapInit<CPointDevShotCamera>(CPointDevShotCamera*)::dataDesc
 D datamap_t* DataMapInit<CPointDevShotCamera>(CPointDevShotCamera*)::nameHolder
 D datamap_t* DataMapInit<CPointEntityFinder>(CPointEntityFinder*)::dataDesc
 D datamap_t* DataMapInit<CPointEntityFinder>(CPointEntityFinder*)::nameHolder
 D datamap_t* DataMapInit<CPointGamestatsCounter>(CPointGamestatsCounter*)::dataDesc
 D datamap_t* DataMapInit<CPointGamestatsCounter>(CPointGamestatsCounter*)::nameHolder
 D datamap_t* DataMapInit<CPointHurt>(CPointHurt*)::dataDesc
 D datamap_t* DataMapInit<CPointHurt>(CPointHurt*)::nameHolder
 D datamap_t* DataMapInit<CPointPlayerMoveConstraint>(CPointPlayerMoveConstraint*)::dataDesc
 D datamap_t* DataMapInit<CPointPlayerMoveConstraint>(CPointPlayerMoveConstraint*)::nameHolder
 D datamap_t* DataMapInit<CPointProximitySensor>(CPointProximitySensor*)::dataDesc
 D datamap_t* DataMapInit<CPointProximitySensor>(CPointProximitySensor*)::nameHolder
 D datamap_t* DataMapInit<CPointPush>(CPointPush*)::dataDesc
 D datamap_t* DataMapInit<CPointPush>(CPointPush*)::nameHolder
 D datamap_t* DataMapInit<CPointServerCommand>(CPointServerCommand*)::dataDesc
 D datamap_t* DataMapInit<CPointServerCommand>(CPointServerCommand*)::nameHolder
 D datamap_t* DataMapInit<CPointSpotlight>(CPointSpotlight*)::dataDesc
 D datamap_t* DataMapInit<CPointSpotlight>(CPointSpotlight*)::nameHolder
 D datamap_t* DataMapInit<CPointTeleport>(CPointTeleport*)::dataDesc
 D datamap_t* DataMapInit<CPointTeleport>(CPointTeleport*)::nameHolder
 D datamap_t* DataMapInit<CPointTemplate>(CPointTemplate*)::dataDesc
 D datamap_t* DataMapInit<CPointTemplate>(CPointTemplate*)::nameHolder
 D datamap_t* DataMapInit<CPointVelocitySensor>(CPointVelocitySensor*)::dataDesc
 D datamap_t* DataMapInit<CPointVelocitySensor>(CPointVelocitySensor*)::nameHolder
 D datamap_t* DataMapInit<CPoseController>(CPoseController*)::dataDesc
 D datamap_t* DataMapInit<CPoseController>(CPoseController*)::nameHolder
 D datamap_t* DataMapInit<CPostProcessController>(CPostProcessController*)::dataDesc
 D datamap_t* DataMapInit<CPostProcessController>(CPostProcessController*)::nameHolder
 D datamap_t* DataMapInit<CPrecipitation>(CPrecipitation*)::dataDesc
 D datamap_t* DataMapInit<CPrecipitation>(CPrecipitation*)::nameHolder
 D datamap_t* DataMapInit<CPrecipitationBlocker>(CPrecipitationBlocker*)::dataDesc
 D datamap_t* DataMapInit<CPrecipitationBlocker>(CPrecipitationBlocker*)::nameHolder
 D datamap_t* DataMapInit<CProjectedDecal>(CProjectedDecal*)::dataDesc
 D datamap_t* DataMapInit<CProjectedDecal>(CProjectedDecal*)::nameHolder
 D datamap_t* DataMapInit<CPropDoorRotating>(CPropDoorRotating*)::dataDesc
 D datamap_t* DataMapInit<CPropDoorRotating>(CPropDoorRotating*)::nameHolder
 D datamap_t* DataMapInit<CPropDoorRotatingBreakable>(CPropDoorRotatingBreakable*)::dataDesc
 D datamap_t* DataMapInit<CPropDoorRotatingBreakable>(CPropDoorRotatingBreakable*)::nameHolder
 D datamap_t* DataMapInit<CPropDoorRotatingCheckpoint>(CPropDoorRotatingCheckpoint*)::dataDesc
 D datamap_t* DataMapInit<CPropDoorRotatingCheckpoint>(CPropDoorRotatingCheckpoint*)::nameHolder
 D datamap_t* DataMapInit<CPropGlowingObject>(CPropGlowingObject*)::dataDesc
 D datamap_t* DataMapInit<CPropGlowingObject>(CPropGlowingObject*)::nameHolder
 D datamap_t* DataMapInit<CPropHealthCabinet>(CPropHealthCabinet*)::dataDesc
 D datamap_t* DataMapInit<CPropHealthCabinet>(CPropHealthCabinet*)::nameHolder
 D datamap_t* DataMapInit<CPropMinigun>(CPropMinigun*)::dataDesc
 D datamap_t* DataMapInit<CPropMinigun>(CPropMinigun*)::nameHolder
 D datamap_t* DataMapInit<CPropMountedGun>(CPropMountedGun*)::dataDesc
 D datamap_t* DataMapInit<CPropMountedGun>(CPropMountedGun*)::nameHolder
 D datamap_t* DataMapInit<CPropVehicle>(CPropVehicle*)::dataDesc
 D datamap_t* DataMapInit<CPropVehicle>(CPropVehicle*)::nameHolder
 D datamap_t* DataMapInit<CPropVehicleDriveable>(CPropVehicleDriveable*)::dataDesc
 D datamap_t* DataMapInit<CPropVehicleDriveable>(CPropVehicleDriveable*)::nameHolder
 D datamap_t* DataMapInit<CPropaneTank>(CPropaneTank*)::dataDesc
 D datamap_t* DataMapInit<CPropaneTank>(CPropaneTank*)::nameHolder
 D datamap_t* DataMapInit<CPumpShotgun>(CPumpShotgun*)::dataDesc
 D datamap_t* DataMapInit<CPumpShotgun>(CPumpShotgun*)::nameHolder
 D datamap_t* DataMapInit<CRagdollBoogie>(CRagdollBoogie*)::dataDesc
 D datamap_t* DataMapInit<CRagdollBoogie>(CRagdollBoogie*)::nameHolder
 D datamap_t* DataMapInit<CRagdollConstraint>(CRagdollConstraint*)::dataDesc
 D datamap_t* DataMapInit<CRagdollConstraint>(CRagdollConstraint*)::nameHolder
 D datamap_t* DataMapInit<CRagdollMagnet>(CRagdollMagnet*)::dataDesc
 D datamap_t* DataMapInit<CRagdollMagnet>(CRagdollMagnet*)::nameHolder
 D datamap_t* DataMapInit<CRagdollManager>(CRagdollManager*)::dataDesc
 D datamap_t* DataMapInit<CRagdollManager>(CRagdollManager*)::nameHolder
 D datamap_t* DataMapInit<CRagdollProp>(CRagdollProp*)::dataDesc
 D datamap_t* DataMapInit<CRagdollProp>(CRagdollProp*)::nameHolder
 D datamap_t* DataMapInit<CRagdollPropAttached>(CRagdollPropAttached*)::dataDesc
 D datamap_t* DataMapInit<CRagdollPropAttached>(CRagdollPropAttached*)::nameHolder
 D datamap_t* DataMapInit<CRandSimTimer>(CRandSimTimer*)::dataDesc
 D datamap_t* DataMapInit<CRandSimTimer>(CRandSimTimer*)::nameHolder
 D datamap_t* DataMapInit<CRandStopwatch>(CRandStopwatch*)::dataDesc
 D datamap_t* DataMapInit<CRandStopwatch>(CRandStopwatch*)::nameHolder
 D datamap_t* DataMapInit<CRevertSaved>(CRevertSaved*)::dataDesc
 D datamap_t* DataMapInit<CRevertSaved>(CRevertSaved*)::nameHolder
 D datamap_t* DataMapInit<CRopeKeyframe>(CRopeKeyframe*)::dataDesc
 D datamap_t* DataMapInit<CRopeKeyframe>(CRopeKeyframe*)::nameHolder
 D datamap_t* DataMapInit<CRotDoor>(CRotDoor*)::dataDesc
 D datamap_t* DataMapInit<CRotDoor>(CRotDoor*)::nameHolder
 D datamap_t* DataMapInit<CRotorWashShooter>(CRotorWashShooter*)::dataDesc
 D datamap_t* DataMapInit<CRotorWashShooter>(CRotorWashShooter*)::nameHolder
 D datamap_t* DataMapInit<CRuleEntity>(CRuleEntity*)::dataDesc
 D datamap_t* DataMapInit<CRuleEntity>(CRuleEntity*)::nameHolder
 D datamap_t* DataMapInit<CRulePointEntity>(CRulePointEntity*)::dataDesc
 D datamap_t* DataMapInit<CRulePointEntity>(CRulePointEntity*)::nameHolder
 D datamap_t* DataMapInit<CSceneEntity>(CSceneEntity*)::dataDesc
 D datamap_t* DataMapInit<CSceneEntity>(CSceneEntity*)::nameHolder
 D datamap_t* DataMapInit<CSceneListManager>(CSceneListManager*)::dataDesc
 D datamap_t* DataMapInit<CSceneListManager>(CSceneListManager*)::nameHolder
 D datamap_t* DataMapInit<CSceneManager>(CSceneManager*)::dataDesc
 D datamap_t* DataMapInit<CSceneManager>(CSceneManager*)::nameHolder
 D datamap_t* DataMapInit<CServerNetworkProperty>(CServerNetworkProperty*)::dataDesc
 D datamap_t* DataMapInit<CServerNetworkProperty>(CServerNetworkProperty*)::nameHolder
 D datamap_t* DataMapInit<CShadowControl>(CShadowControl*)::dataDesc
 D datamap_t* DataMapInit<CShadowControl>(CShadowControl*)::nameHolder
 D datamap_t* DataMapInit<CSimTimer>(CSimTimer*)::dataDesc
 D datamap_t* DataMapInit<CSimTimer>(CSimTimer*)::nameHolder
 D datamap_t* DataMapInit<CSimpleSimTimer>(CSimpleSimTimer*)::dataDesc
 D datamap_t* DataMapInit<CSimpleSimTimer>(CSimpleSimTimer*)::nameHolder
 D datamap_t* DataMapInit<CSkyCamera>(CSkyCamera*)::dataDesc
 D datamap_t* DataMapInit<CSkyCamera>(CSkyCamera*)::nameHolder
 D datamap_t* DataMapInit<CSlideshowDisplay>(CSlideshowDisplay*)::dataDesc
 D datamap_t* DataMapInit<CSlideshowDisplay>(CSlideshowDisplay*)::nameHolder
 D datamap_t* DataMapInit<CSmokeStack>(CSmokeStack*)::dataDesc
 D datamap_t* DataMapInit<CSmokeStack>(CSmokeStack*)::nameHolder
 D datamap_t* DataMapInit<CSmokeStackLightInfo>(CSmokeStackLightInfo*)::dataDesc
 D datamap_t* DataMapInit<CSmokeStackLightInfo>(CSmokeStackLightInfo*)::nameHolder
 D datamap_t* DataMapInit<CSmokerClaw>(CSmokerClaw*)::dataDesc
 D datamap_t* DataMapInit<CSmokerClaw>(CSmokerClaw*)::nameHolder
 D datamap_t* DataMapInit<CSniperRifle>(CSniperRifle*)::dataDesc
 D datamap_t* DataMapInit<CSniperRifle>(CSniperRifle*)::nameHolder
 D datamap_t* DataMapInit<CSound>(CSound*)::dataDesc
 D datamap_t* DataMapInit<CSound>(CSound*)::nameHolder
 D datamap_t* DataMapInit<CSoundEnt>(CSoundEnt*)::dataDesc
 D datamap_t* DataMapInit<CSoundEnt>(CSoundEnt*)::nameHolder
 D datamap_t* DataMapInit<CSoundEnvelope>(CSoundEnvelope*)::dataDesc
 D datamap_t* DataMapInit<CSoundEnvelope>(CSoundEnvelope*)::nameHolder
 D datamap_t* DataMapInit<CSoundPatch>(CSoundPatch*)::dataDesc
 D datamap_t* DataMapInit<CSoundPatch>(CSoundPatch*)::nameHolder
 D datamap_t* DataMapInit<CSpotlightEnd>(CSpotlightEnd*)::dataDesc
 D datamap_t* DataMapInit<CSpotlightEnd>(CSpotlightEnd*)::nameHolder
 D datamap_t* DataMapInit<CSprite>(CSprite*)::dataDesc
 D datamap_t* DataMapInit<CSprite>(CSprite*)::nameHolder
 D datamap_t* DataMapInit<CSpriteTrail>(CSpriteTrail*)::dataDesc
 D datamap_t* DataMapInit<CSpriteTrail>(CSpriteTrail*)::nameHolder
 D datamap_t* DataMapInit<CSteamJet>(CSteamJet*)::dataDesc
 D datamap_t* DataMapInit<CSteamJet>(CSteamJet*)::nameHolder
 D datamap_t* DataMapInit<CStopwatch>(CStopwatch*)::dataDesc
 D datamap_t* DataMapInit<CStopwatch>(CStopwatch*)::nameHolder
 D datamap_t* DataMapInit<CStopwatchBase>(CStopwatchBase*)::dataDesc
 D datamap_t* DataMapInit<CStopwatchBase>(CStopwatchBase*)::nameHolder
 D datamap_t* DataMapInit<CStripWeapons>(CStripWeapons*)::dataDesc
 D datamap_t* DataMapInit<CStripWeapons>(CStripWeapons*)::nameHolder
 D datamap_t* DataMapInit<CSubMachinegun>(CSubMachinegun*)::dataDesc
 D datamap_t* DataMapInit<CSubMachinegun>(CSubMachinegun*)::nameHolder
 D datamap_t* DataMapInit<CSun>(CSun*)::dataDesc
 D datamap_t* DataMapInit<CSun>(CSun*)::nameHolder
 D datamap_t* DataMapInit<CSurroundTest>(CSurroundTest*)::dataDesc
 D datamap_t* DataMapInit<CSurroundTest>(CSurroundTest*)::nameHolder
 D datamap_t* DataMapInit<CSurvivorCamera>(CSurvivorCamera*)::dataDesc
 D datamap_t* DataMapInit<CSurvivorCamera>(CSurvivorCamera*)::nameHolder
 D datamap_t* DataMapInit<CSurvivorPosition>(CSurvivorPosition*)::dataDesc
 D datamap_t* DataMapInit<CSurvivorPosition>(CSurvivorPosition*)::nameHolder
 D datamap_t* DataMapInit<CSurvivorRescue>(CSurvivorRescue*)::dataDesc
 D datamap_t* DataMapInit<CSurvivorRescue>(CSurvivorRescue*)::nameHolder
 D datamap_t* DataMapInit<CTakeDamageInfo>(CTakeDamageInfo*)::dataDesc
 D datamap_t* DataMapInit<CTakeDamageInfo>(CTakeDamageInfo*)::nameHolder
 D datamap_t* DataMapInit<CTankClaw>(CTankClaw*)::dataDesc
 D datamap_t* DataMapInit<CTankClaw>(CTankClaw*)::nameHolder
 D datamap_t* DataMapInit<CTankRock>(CTankRock*)::dataDesc
 D datamap_t* DataMapInit<CTankRock>(CTankRock*)::nameHolder
 D datamap_t* DataMapInit<CTankTargetChange>(CTankTargetChange*)::dataDesc
 D datamap_t* DataMapInit<CTankTargetChange>(CTankTargetChange*)::nameHolder
 D datamap_t* DataMapInit<CTankTrainAI>(CTankTrainAI*)::dataDesc
 D datamap_t* DataMapInit<CTankTrainAI>(CTankTrainAI*)::nameHolder
 D datamap_t* DataMapInit<CTargetCDAudioRep>(CTargetCDAudioRep*)::dataDesc
 D datamap_t* DataMapInit<CTargetCDAudioRep>(CTargetCDAudioRep*)::nameHolder
 D datamap_t* DataMapInit<CTargetChangeGravity>(CTargetChangeGravity*)::dataDesc
 D datamap_t* DataMapInit<CTargetChangeGravity>(CTargetChangeGravity*)::nameHolder
 D datamap_t* DataMapInit<CTeamSpawnPoint>(CTeamSpawnPoint*)::dataDesc
 D datamap_t* DataMapInit<CTeamSpawnPoint>(CTeamSpawnPoint*)::nameHolder
 D datamap_t* DataMapInit<CTeamVehicleSpawnPoint>(CTeamVehicleSpawnPoint*)::dataDesc
 D datamap_t* DataMapInit<CTeamVehicleSpawnPoint>(CTeamVehicleSpawnPoint*)::nameHolder
 D datamap_t* DataMapInit<CTeamplayRoundBasedRulesProxy>(CTeamplayRoundBasedRulesProxy*)::dataDesc
 D datamap_t* DataMapInit<CTeamplayRoundBasedRulesProxy>(CTeamplayRoundBasedRulesProxy*)::nameHolder
 D datamap_t* DataMapInit<CTerrorGun>(CTerrorGun*)::dataDesc
 D datamap_t* DataMapInit<CTerrorGun>(CTerrorGun*)::nameHolder
 D datamap_t* DataMapInit<CTerrorPlayer>(CTerrorPlayer*)::dataDesc
 D datamap_t* DataMapInit<CTerrorPlayer>(CTerrorPlayer*)::nameHolder
 D datamap_t* DataMapInit<CTerrorPlayerResource>(CTerrorPlayerResource*)::dataDesc
 D datamap_t* DataMapInit<CTerrorPlayerResource>(CTerrorPlayerResource*)::nameHolder
 D datamap_t* DataMapInit<CTerrorWeapon>(CTerrorWeapon*)::dataDesc
 D datamap_t* DataMapInit<CTerrorWeapon>(CTerrorWeapon*)::nameHolder
 D datamap_t* DataMapInit<CTestTraceline>(CTestTraceline*)::dataDesc
 D datamap_t* DataMapInit<CTestTraceline>(CTestTraceline*)::nameHolder
 D datamap_t* DataMapInit<CTextureToggle>(CTextureToggle*)::dataDesc
 D datamap_t* DataMapInit<CTextureToggle>(CTextureToggle*)::nameHolder
 D datamap_t* DataMapInit<CThrow>(CThrow*)::dataDesc
 D datamap_t* DataMapInit<CThrow>(CThrow*)::nameHolder
 D datamap_t* DataMapInit<CThrustController>(CThrustController*)::dataDesc
 D datamap_t* DataMapInit<CThrustController>(CThrustController*)::nameHolder
 D datamap_t* DataMapInit<CTimerEntity>(CTimerEntity*)::dataDesc
 D datamap_t* DataMapInit<CTimerEntity>(CTimerEntity*)::nameHolder
 D datamap_t* DataMapInit<CTonemapTrigger>(CTonemapTrigger*)::dataDesc
 D datamap_t* DataMapInit<CTonemapTrigger>(CTonemapTrigger*)::nameHolder
 D datamap_t* DataMapInit<CTongue>(CTongue*)::dataDesc
 D datamap_t* DataMapInit<CTongue>(CTongue*)::nameHolder
 D datamap_t* DataMapInit<CTransitioningPlayer>(CTransitioningPlayer*)::dataDesc
 D datamap_t* DataMapInit<CTransitioningPlayer>(CTransitioningPlayer*)::nameHolder
 D datamap_t* DataMapInit<CTriggerAutoCrouch>(CTriggerAutoCrouch*)::dataDesc
 D datamap_t* DataMapInit<CTriggerAutoCrouch>(CTriggerAutoCrouch*)::nameHolder
 D datamap_t* DataMapInit<CTriggerBrush>(CTriggerBrush*)::dataDesc
 D datamap_t* DataMapInit<CTriggerBrush>(CTriggerBrush*)::nameHolder
 D datamap_t* DataMapInit<CTriggerCamera>(CTriggerCamera*)::dataDesc
 D datamap_t* DataMapInit<CTriggerCamera>(CTriggerCamera*)::nameHolder
 D datamap_t* DataMapInit<CTriggerCameraMultiplayer>(CTriggerCameraMultiplayer*)::dataDesc
 D datamap_t* DataMapInit<CTriggerCameraMultiplayer>(CTriggerCameraMultiplayer*)::nameHolder
 D datamap_t* DataMapInit<CTriggerEscape>(CTriggerEscape*)::dataDesc
 D datamap_t* DataMapInit<CTriggerEscape>(CTriggerEscape*)::nameHolder
 D datamap_t* DataMapInit<CTriggerGravity>(CTriggerGravity*)::dataDesc
 D datamap_t* DataMapInit<CTriggerGravity>(CTriggerGravity*)::nameHolder
 D datamap_t* DataMapInit<CTriggerHurt>(CTriggerHurt*)::dataDesc
 D datamap_t* DataMapInit<CTriggerHurt>(CTriggerHurt*)::nameHolder
 D datamap_t* DataMapInit<CTriggerImpact>(CTriggerImpact*)::dataDesc
 D datamap_t* DataMapInit<CTriggerImpact>(CTriggerImpact*)::nameHolder
 D datamap_t* DataMapInit<CTriggerLook>(CTriggerLook*)::dataDesc
 D datamap_t* DataMapInit<CTriggerLook>(CTriggerLook*)::nameHolder
 D datamap_t* DataMapInit<CTriggerMultiple>(CTriggerMultiple*)::dataDesc
 D datamap_t* DataMapInit<CTriggerMultiple>(CTriggerMultiple*)::nameHolder
 D datamap_t* DataMapInit<CTriggerPlayerMovement>(CTriggerPlayerMovement*)::dataDesc
 D datamap_t* DataMapInit<CTriggerPlayerMovement>(CTriggerPlayerMovement*)::nameHolder
 D datamap_t* DataMapInit<CTriggerProximity>(CTriggerProximity*)::dataDesc
 D datamap_t* DataMapInit<CTriggerProximity>(CTriggerProximity*)::nameHolder
 D datamap_t* DataMapInit<CTriggerPush>(CTriggerPush*)::dataDesc
 D datamap_t* DataMapInit<CTriggerPush>(CTriggerPush*)::nameHolder
 D datamap_t* DataMapInit<CTriggerRemove>(CTriggerRemove*)::dataDesc
 D datamap_t* DataMapInit<CTriggerRemove>(CTriggerRemove*)::nameHolder
 D datamap_t* DataMapInit<CTriggerSave>(CTriggerSave*)::dataDesc
 D datamap_t* DataMapInit<CTriggerSave>(CTriggerSave*)::nameHolder
 D datamap_t* DataMapInit<CTriggerSoundscape>(CTriggerSoundscape*)::dataDesc
 D datamap_t* DataMapInit<CTriggerSoundscape>(CTriggerSoundscape*)::nameHolder
 D datamap_t* DataMapInit<CTriggerTeleport>(CTriggerTeleport*)::dataDesc
 D datamap_t* DataMapInit<CTriggerTeleport>(CTriggerTeleport*)::nameHolder
 D datamap_t* DataMapInit<CTriggerToggleSave>(CTriggerToggleSave*)::dataDesc
 D datamap_t* DataMapInit<CTriggerToggleSave>(CTriggerToggleSave*)::nameHolder
 D datamap_t* DataMapInit<CTriggerVPhysicsMotion>(CTriggerVPhysicsMotion*)::dataDesc
 D datamap_t* DataMapInit<CTriggerVPhysicsMotion>(CTriggerVPhysicsMotion*)::nameHolder
 D datamap_t* DataMapInit<CTriggerWind>(CTriggerWind*)::dataDesc
 D datamap_t* DataMapInit<CTriggerWind>(CTriggerWind*)::nameHolder
 D datamap_t* DataMapInit<CVGuiScreen>(CVGuiScreen*)::dataDesc
 D datamap_t* DataMapInit<CVGuiScreen>(CVGuiScreen*)::nameHolder
 D datamap_t* DataMapInit<CVersusRandom>(CVersusRandom*)::dataDesc
 D datamap_t* DataMapInit<CVersusRandom>(CVersusRandom*)::nameHolder
 D datamap_t* DataMapInit<CVomit>(CVomit*)::dataDesc
 D datamap_t* DataMapInit<CVomit>(CVomit*)::nameHolder
 D datamap_t* DataMapInit<CVoteController>(CVoteController*)::dataDesc
 D datamap_t* DataMapInit<CVoteController>(CVoteController*)::nameHolder
 D datamap_t* DataMapInit<CWC_UpdateIgnoreList>(CWC_UpdateIgnoreList*)::dataDesc
 D datamap_t* DataMapInit<CWC_UpdateIgnoreList>(CWC_UpdateIgnoreList*)::nameHolder
 D datamap_t* DataMapInit<CWaterBullet>(CWaterBullet*)::dataDesc
 D datamap_t* DataMapInit<CWaterBullet>(CWaterBullet*)::nameHolder
 D datamap_t* DataMapInit<CWaterLODControl>(CWaterLODControl*)::dataDesc
 D datamap_t* DataMapInit<CWaterLODControl>(CWaterLODControl*)::nameHolder
 D datamap_t* DataMapInit<CWeaponAmmoSpawn>(CWeaponAmmoSpawn*)::dataDesc
 D datamap_t* DataMapInit<CWeaponAmmoSpawn>(CWeaponAmmoSpawn*)::nameHolder
 D datamap_t* DataMapInit<CWeaponCSBase>(CWeaponCSBase*)::dataDesc
 D datamap_t* DataMapInit<CWeaponCSBase>(CWeaponCSBase*)::nameHolder
 D datamap_t* DataMapInit<CWeaponSpawn>(CWeaponSpawn*)::dataDesc
 D datamap_t* DataMapInit<CWeaponSpawn>(CWeaponSpawn*)::nameHolder
 D datamap_t* DataMapInit<CWeightButton>(CWeightButton*)::dataDesc
 D datamap_t* DataMapInit<CWeightButton>(CWeightButton*)::nameHolder
 D datamap_t* DataMapInit<CWindowPane>(CWindowPane*)::dataDesc
 D datamap_t* DataMapInit<CWindowPane>(CWindowPane*)::nameHolder
 D datamap_t* DataMapInit<CWorld>(CWorld*)::dataDesc
 D datamap_t* DataMapInit<CWorld>(CWorld*)::nameHolder
 D datamap_t* DataMapInit<CWorldItem>(CWorldItem*)::dataDesc
 D datamap_t* DataMapInit<CWorldItem>(CWorldItem*)::nameHolder
 D datamap_t* DataMapInit<CaptionLookup_t>(CaptionLookup_t*)::dataDesc
 D datamap_t* DataMapInit<CaptionLookup_t>(CaptionLookup_t*)::nameHolder
 D datamap_t* DataMapInit<CompiledCaptionHeader_t>(CompiledCaptionHeader_t*)::dataDesc
 D datamap_t* DataMapInit<CompiledCaptionHeader_t>(CompiledCaptionHeader_t*)::nameHolder
 D datamap_t* DataMapInit<ConceptHistory_t>(ConceptHistory_t*)::dataDesc
 D datamap_t* DataMapInit<ConceptHistory_t>(ConceptHistory_t*)::nameHolder
 D datamap_t* DataMapInit<DustTrail>(DustTrail*)::dataDesc
 D datamap_t* DataMapInit<DustTrail>(DustTrail*)::nameHolder
 D datamap_t* DataMapInit<EntityParticleTrailInfo_t>(EntityParticleTrailInfo_t*)::dataDesc
 D datamap_t* DataMapInit<EntityParticleTrailInfo_t>(EntityParticleTrailInfo_t*)::nameHolder
 D datamap_t* DataMapInit<EventQueuePrioritizedEvent_t>(EventQueuePrioritizedEvent_t*)::dataDesc
 D datamap_t* DataMapInit<EventQueuePrioritizedEvent_t>(EventQueuePrioritizedEvent_t*)::nameHolder
 D datamap_t* DataMapInit<FilterDamageType>(FilterDamageType*)::dataDesc
 D datamap_t* DataMapInit<FilterDamageType>(FilterDamageType*)::nameHolder
 D datamap_t* DataMapInit<FilterInfectedClass>(FilterInfectedClass*)::dataDesc
 D datamap_t* DataMapInit<FilterInfectedClass>(FilterInfectedClass*)::nameHolder
 D datamap_t* DataMapInit<FilterTeam>(FilterTeam*)::dataDesc
 D datamap_t* DataMapInit<FilterTeam>(FilterTeam*)::nameHolder
 D datamap_t* DataMapInit<Hunter>(Hunter*)::dataDesc
 D datamap_t* DataMapInit<Hunter>(Hunter*)::nameHolder
 D datamap_t* DataMapInit<InfoChangelevel>(InfoChangelevel*)::dataDesc
 D datamap_t* DataMapInit<InfoChangelevel>(InfoChangelevel*)::nameHolder
 D datamap_t* DataMapInit<NextBotCombatCharacter>(NextBotCombatCharacter*)::dataDesc
 D datamap_t* DataMapInit<NextBotCombatCharacter>(NextBotCombatCharacter*)::nameHolder
 D datamap_t* DataMapInit<ParticleSmokeGrenade>(ParticleSmokeGrenade*)::dataDesc
 D datamap_t* DataMapInit<ParticleSmokeGrenade>(ParticleSmokeGrenade*)::nameHolder
 D datamap_t* DataMapInit<PhysBlockHeader_t>(PhysBlockHeader_t*)::dataDesc
 D datamap_t* DataMapInit<PhysBlockHeader_t>(PhysBlockHeader_t*)::nameHolder
 D datamap_t* DataMapInit<PhysObjectHeader_t>(PhysObjectHeader_t*)::dataDesc
 D datamap_t* DataMapInit<PhysObjectHeader_t>(PhysObjectHeader_t*)::nameHolder
 D datamap_t* DataMapInit<Relationship_t>(Relationship_t*)::dataDesc
 D datamap_t* DataMapInit<Relationship_t>(Relationship_t*)::nameHolder
 D datamap_t* DataMapInit<Response>(Response*)::dataDesc
 D datamap_t* DataMapInit<Response>(Response*)::nameHolder
 D datamap_t* DataMapInit<ResponseContext_t>(ResponseContext_t*)::dataDesc
 D datamap_t* DataMapInit<ResponseContext_t>(ResponseContext_t*)::nameHolder
 D datamap_t* DataMapInit<ResponseGroup>(ResponseGroup*)::dataDesc
 D datamap_t* DataMapInit<ResponseGroup>(ResponseGroup*)::nameHolder
 D datamap_t* DataMapInit<RocketTrail>(RocketTrail*)::dataDesc
 D datamap_t* DataMapInit<RocketTrail>(RocketTrail*)::nameHolder
 D datamap_t* DataMapInit<SaveRestoreBlockHeader_t>(SaveRestoreBlockHeader_t*)::dataDesc
 D datamap_t* DataMapInit<SaveRestoreBlockHeader_t>(SaveRestoreBlockHeader_t*)::nameHolder
 D datamap_t* DataMapInit<SmokeTrail>(SmokeTrail*)::dataDesc
 D datamap_t* DataMapInit<SmokeTrail>(SmokeTrail*)::nameHolder
 D datamap_t* DataMapInit<Smoker>(Smoker*)::dataDesc
 D datamap_t* DataMapInit<Smoker>(Smoker*)::nameHolder
 D datamap_t* DataMapInit<SoundCommand_t>(SoundCommand_t*)::dataDesc
 D datamap_t* DataMapInit<SoundCommand_t>(SoundCommand_t*)::nameHolder
 D datamap_t* DataMapInit<SporeExplosion>(SporeExplosion*)::dataDesc
 D datamap_t* DataMapInit<SporeExplosion>(SporeExplosion*)::nameHolder
 D datamap_t* DataMapInit<SporeTrail>(SporeTrail*)::dataDesc
 D datamap_t* DataMapInit<SporeTrail>(SporeTrail*)::nameHolder
 D datamap_t* DataMapInit<SurvivorBot>(SurvivorBot*)::dataDesc
 D datamap_t* DataMapInit<SurvivorBot>(SurvivorBot*)::nameHolder
 D datamap_t* DataMapInit<Tank>(Tank*)::dataDesc
 D datamap_t* DataMapInit<Tank>(Tank*)::nameHolder
 D datamap_t* DataMapInit<TemplateEntityData_t>(TemplateEntityData_t*)::dataDesc
 D datamap_t* DataMapInit<TemplateEntityData_t>(TemplateEntityData_t*)::nameHolder
 D datamap_t* DataMapInit<ViewSmoothingData_t>(ViewSmoothingData_t*)::dataDesc
 D datamap_t* DataMapInit<ViewSmoothingData_t>(ViewSmoothingData_t*)::nameHolder
 D datamap_t* DataMapInit<audioparams_t>(audioparams_t*)::dataDesc
 D datamap_t* DataMapInit<audioparams_t>(audioparams_t*)::nameHolder
 D datamap_t* DataMapInit<entitytable_t>(entitytable_t*)::dataDesc
 D datamap_t* DataMapInit<entitytable_t>(entitytable_t*)::nameHolder
 D datamap_t* DataMapInit<flexsetting_t>(flexsetting_t*)::dataDesc
 D datamap_t* DataMapInit<flexsetting_t>(flexsetting_t*)::nameHolder
 D datamap_t* DataMapInit<flexsettinghdr_t>(flexsettinghdr_t*)::dataDesc
 D datamap_t* DataMapInit<flexsettinghdr_t>(flexsettinghdr_t*)::nameHolder
 D datamap_t* DataMapInit<flexweight_t>(flexweight_t*)::dataDesc
 D datamap_t* DataMapInit<flexweight_t>(flexweight_t*)::nameHolder
 D datamap_t* DataMapInit<fogparams_t>(fogparams_t*)::dataDesc
 D datamap_t* DataMapInit<fogparams_t>(fogparams_t*)::nameHolder
 D datamap_t* DataMapInit<fogplayerparams_t>(fogplayerparams_t*)::dataDesc
 D datamap_t* DataMapInit<fogplayerparams_t>(fogplayerparams_t*)::nameHolder
 D datamap_t* DataMapInit<game_shadowcontrol_params_t>(game_shadowcontrol_params_t*)::dataDesc
 D datamap_t* DataMapInit<game_shadowcontrol_params_t>(game_shadowcontrol_params_t*)::nameHolder
 D datamap_t* DataMapInit<globalentity_t>(globalentity_t*)::dataDesc
 D datamap_t* DataMapInit<globalentity_t>(globalentity_t*)::nameHolder
 D datamap_t* DataMapInit<locksound_t>(locksound_t*)::dataDesc
 D datamap_t* DataMapInit<locksound_t>(locksound_t*)::nameHolder
 D datamap_t* DataMapInit<magnetted_objects_t>(magnetted_objects_t*)::dataDesc
 D datamap_t* DataMapInit<magnetted_objects_t>(magnetted_objects_t*)::nameHolder
 D datamap_t* DataMapInit<modifiedconvars_t>(modifiedconvars_t*)::dataDesc
 D datamap_t* DataMapInit<modifiedconvars_t>(modifiedconvars_t*)::nameHolder
 D datamap_t* DataMapInit<physfollower_t>(physfollower_t*)::dataDesc
 D datamap_t* DataMapInit<physfollower_t>(physfollower_t*)::nameHolder
 D datamap_t* DataMapInit<sky3dparams_t>(sky3dparams_t*)::dataDesc
 D datamap_t* DataMapInit<sky3dparams_t>(sky3dparams_t*)::nameHolder
 D datamap_t* DataMapInit<template_t>(template_t*)::dataDesc
 D datamap_t* DataMapInit<template_t>(template_t*)::nameHolder
 D datamap_t* DataMapInit<thinkfunc_t>(thinkfunc_t*)::dataDesc
 D datamap_t* DataMapInit<thinkfunc_t>(thinkfunc_t*)::nameHolder
 D datamap_t* DataMapInit<vehicle_crashsound_t>(vehicle_crashsound_t*)::dataDesc
 D datamap_t* DataMapInit<vehicle_crashsound_t>(vehicle_crashsound_t*)::nameHolder
 D datamap_t* DataMapInit<vehicle_gear_t>(vehicle_gear_t*)::dataDesc
 D datamap_t* DataMapInit<vehicle_gear_t>(vehicle_gear_t*)::nameHolder
 D datamap_t* DataMapInit<vehiclesounds_t>(vehiclesounds_t*)::dataDesc
 D datamap_t* DataMapInit<vehiclesounds_t>(vehiclesounds_t*)::nameHolder
 D decalsystem
 D entitytable_t::m_DataMap
 D eventFuncs
 D flexsetting_t::m_DataMap
 D flexsettinghdr_t::m_DataMap
 D flexweight_t::m_DataMap
 D fogparams_t::m_DataMap
 D fogplayerparams_t::m_DataMap
 D gDefaultNPCImpactDamageTable
 D gDefaultPlayerImpactDamageTable
 D gDefaultPlayerVehicleImpactDamageTable
 D gGlassImpactDamageTable
 D gInitHUD
 D g_AchievementSaveRestoreBlockHandler
 D g_ChoreoStringPool
 D g_ConceptHistoriesSaveDataOps
 D g_DebugFindUseEntity
 D g_EventsSaveDataOps
 D g_ItemFlags
 D g_PhysDefaultObjectParams
 D g_PhysGameTrace
 D g_RagdolMaxByType
 D g_ServerGameClients
 D g_SolidSetup
 D g_StandardSendProxies
 D g_SurvivorBotMeleeOnReply
 D g_SurvivorBotUseOnReply
 D g_ThinkContextsSaveDataOps
 D g_VariantSaveDataOps
 D g_bClientFlex
 D g_bIsLogging
 D g_bIsVisibleCallLock
 D g_bMovementOptimizations
 D g_bTestMoveTypeStepSimulation
 D g_fMaxViewModelLag
 D g_flFractionScale
 D g_flThrowGrenadeFraction
 D g_iSoundsToStopOnExit
 D g_nActivityListVersion
 D g_nEventListVersion
 D g_nParticle_Multiplier
 D g_pConstraintEvents
 D g_pEffects
 D g_pEntityList
 D g_pGameMovement
 D g_pGameSaveRestoreBlockSet
 D g_pMoveData
 D g_pNotify
 D g_pParticleSystemMgr
 D g_pParticleSystemQuery
 D g_pPhysSaveRestoreManager
 D g_pPrecacheSystem
 D g_pResponseSystem
 D g_pToolFrameworkServer
 D g_pVoiceGameMgrHelper
 D g_pszMPConcepts
 D g_ratingMap
 D game_shadowcontrol_params_t::m_DataMap
 D gamestats
 D globalentity_t::m_DataMap
 D guard variable for AllocTempVector()::s_nIndex
 D guard variable for AllocTempVector()::s_vecTemp
 D guard variable for CCommentarySystem::InitCommentary()::commentarySpawnedSemaphoreName
 D guard variable for CCommentarySystem::InitCommentary()::infoTargetStr
 D guard variable for CSoundEmitterSystem::GetCaptionHash(char const*, bool, unsigned int&)::s_MissingHashes
 D guard variable for CSoundEmitterSystem::PrecacheScriptSound(char const*)::s_PrecacheScriptSoundFailures
 D guard variable for CUtlRBTree<AI_CriteriaSet::CritEntry_t, short, bool (*)(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&), CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short> >::Links(short) const::s_Sentinel
 D guard variable for CUtlRBTree<AsyncCaption_t::BlockInfo_t, unsigned short, bool (*)(AsyncCaption_t::BlockInfo_t const&, AsyncCaption_t::BlockInfo_t const&), CUtlMemory<UtlRBTreeNode_t<AsyncCaption_t::BlockInfo_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CBaseFlex::FS_LocalToGlobal_t, unsigned short, bool (*)(CBaseFlex::FS_LocalToGlobal_t const&, CBaseFlex::FS_LocalToGlobal_t const&), CUtlMemory<UtlRBTreeNode_t<CBaseFlex::FS_LocalToGlobal_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, bool (*)(CBreakModelsPrecached::breakable_precache_t const&, CBreakModelsPrecached::breakable_precache_t const&), CUtlMemory<UtlRBTreeNode_t<CBreakModelsPrecached::breakable_precache_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CChoreoEvent*, unsigned short, bool (*)(CChoreoEvent* const&, CChoreoEvent* const&), CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CChoreoScene::ActiveList, int, bool (*)(CChoreoScene::ActiveList const&, CChoreoScene::ActiveList const&), CUtlMemory<UtlRBTreeNode_t<CChoreoScene::ActiveList, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CCombatCharVisCache::VisCacheEntry_t, unsigned short, CCombatCharVisCache::CVisCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<CCombatCharVisCache::VisCacheEntry_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CGameEvent, unsigned short, bool (*)(CGameEvent const&, CGameEvent const&), CUtlMemory<UtlRBTreeNode_t<CGameEvent, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, bool (*)(CSceneEntity::SpeakEventSound_t const&, CSceneEntity::SpeakEventSound_t const&), CUtlMemory<UtlRBTreeNode_t<CSceneEntity::SpeakEventSound_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short, bool (*)(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&, CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&), CUtlMemory<UtlRBTreeNode_t<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short, CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short, CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, AI_CriteriaSet::CritEntry_t const*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, AI_CriteriaSet::CritEntry_t const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, AI_CriteriaSet::CritEntry_t const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int, CUtlMap<char const*, CActivityRemapCache, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, CBitVec<32>, int>::Node_t, int, CUtlMap<char const*, CBitVec<32>, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CBitVec<32>, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int, CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int, CUtlMap<char const*, CInstancedResponseSystem*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, CNavArea*, int>::Node_t, int, CUtlMap<char const*, CNavArea*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CNavArea*, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short, CUtlMap<char const*, CResponseSystem::Enumeration, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short>, short> >::Links(short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, CUserMessage*, int>::Node_t, int, CUtlMap<char const*, CUserMessage*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUserMessage*, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int, CUtlMap<char const*, ConceptHistory_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, Criteria, short>::Node_t, short, CUtlMap<char const*, Criteria, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Criteria, short>::Node_t, short>, short> >::Links(short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, EventGroup, int>::Node_t, int, CUtlMap<char const*, EventGroup, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EventGroup, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, IEntityFactory*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, ResponseGroup, short>::Node_t, short, CUtlMap<char const*, ResponseGroup, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ResponseGroup, short>::Node_t, short>, short> >::Links(short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, Rule, short>::Node_t, short, CUtlMap<char const*, Rule, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Rule, short>::Node_t, short>, short> >::Links(short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, char const*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, char const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, char const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, float, int>::Node_t, int, CUtlMap<char const*, float, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, float, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, int, int>::Node_t, int, CUtlMap<char const*, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<edict_t const*, KeyValues*, unsigned short>::Node_t, unsigned short, CUtlMap<edict_t const*, KeyValues*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<edict_t const*, KeyValues*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<float, CTraceBulletEntityEnumerator::BulletTrace_t, unsigned short>::Node_t, unsigned short, CUtlMap<float, CTraceBulletEntityEnumerator::BulletTrace_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<float, CTraceBulletEntityEnumerator::BulletTrace_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<int, CBaseAchievement*, unsigned short>::Node_t, unsigned short, CUtlMap<int, CBaseAchievement*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CBaseAchievement*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<studiohdr_t const*, StudioHdrToActivityMapEntry_t, unsigned short>::Node_t, unsigned short, CUtlMap<studiohdr_t const*, StudioHdrToActivityMapEntry_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<studiohdr_t const*, StudioHdrToActivityMapEntry_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<unsigned int, float, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlString, unsigned short, bool (*)(CUtlString const&, CUtlString const&), CUtlMemory<UtlRBTreeNode_t<CUtlString, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<ThinkSync, unsigned short, bool (*)(ThinkSync const&, ThinkSync const&), CUtlMemory<UtlRBTreeNode_t<ThinkSync, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<VisibilityCacheEntry_t, unsigned short, CVisibilityCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<VisibilityCacheEntry_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<unsigned int, unsigned short, bool (*)(unsigned int const&, unsigned int const&), CUtlMemory<UtlRBTreeNode_t<unsigned int, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlString const& CDmxAttribute::GetValue<CUtlString>() const::defaultValue
 D guard variable for CUtlString const& CDmxElement::GetValue<CUtlString>(char const*) const::defaultValue
 D guard variable for CUtlVector<CDmxElement*, CUtlMemory<CDmxElement*, int> > const& CDmxAttribute::GetArray<CDmxElement*>() const::defaultArray
 D guard variable for CUtlVector<CDmxElement*, CUtlMemory<CDmxElement*, int> > const& CDmxElement::GetArray<CDmxElement*>(char const*) const::defaultValue
 D guard variable for CUtlVectorUltraConservative<NavConnect, CUtlVectorUltraConservativeAllocator>::StaticData()::staticData
 D guard variable for DmxElementUnpackStructure_t* DmxElementUnpackInit<CParticleSystemDefinition>(CParticleSystemDefinition*)::unpack
 D guard variable for DmxElementUnpackStructure_t* DmxElementUnpackInit<ParticleChildrenInfo_t>(ParticleChildrenInfo_t*)::unpack
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer, int> > >(CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<CPassengerInfo, CUtlMemory<CPassengerInfo, int> > >(CUtlVector<CPassengerInfo, CUtlMemory<CPassengerInfo, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<Relationship_t, CUtlMemory<Relationship_t, int> > >(CUtlVector<Relationship_t, CUtlMemory<Relationship_t, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<ResponseContext_t, CUtlMemory<ResponseContext_t, int> > >(CUtlVector<ResponseContext_t, CUtlMemory<ResponseContext_t, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<SaveRestoreBlockHeader_t, CUtlMemory<SaveRestoreBlockHeader_t, int> > >(CUtlVector<SaveRestoreBlockHeader_t, CUtlMemory<SaveRestoreBlockHeader_t, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<globalentity_t, CUtlMemory<globalentity_t, int> > >(CUtlVector<globalentity_t, CUtlMemory<globalentity_t, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<magnetted_objects_t, CUtlMemory<magnetted_objects_t, int> > >(CUtlVector<magnetted_objects_t, CUtlMemory<magnetted_objects_t, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<modifiedconvars_t, CUtlMemory<modifiedconvars_t, int> > >(CUtlVector<modifiedconvars_t, CUtlMemory<modifiedconvars_t, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<physfollower_t, CUtlMemory<physfollower_t, int> > >(CUtlVector<physfollower_t, CUtlMemory<physfollower_t, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<template_t, CUtlMemory<template_t, int> > >(CUtlVector<template_t, CUtlMemory<template_t, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<thinkfunc_t, CUtlMemory<thinkfunc_t, int> > >(CUtlVector<thinkfunc_t, CUtlMemory<thinkfunc_t, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<vehicle_crashsound_t, CUtlMemory<vehicle_crashsound_t, int> > >(CUtlVector<vehicle_crashsound_t, CUtlMemory<vehicle_crashsound_t, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<vehicle_gear_t, CUtlMemory<vehicle_gear_t, int> > >(CUtlVector<vehicle_gear_t, CUtlMemory<vehicle_gear_t, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<12>::GetDataOps<CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> > >(CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity>, int> > >(CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity>, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CBaseFlex>, CUtlMemory<CHandle<CBaseFlex>, int> > >(CUtlVector<CHandle<CBaseFlex>, CUtlMemory<CHandle<CBaseFlex>, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer>, int> > >(CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer>, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CFish>, CUtlMemory<CHandle<CFish>, int> > >(CUtlVector<CHandle<CFish>, CUtlMemory<CHandle<CFish>, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity>, int> > >(CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity>, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CSceneListManager>, CUtlMemory<CHandle<CSceneListManager>, int> > >(CUtlVector<CHandle<CSceneListManager>, CUtlMemory<CHandle<CSceneListManager>, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CVGuiScreen>, CUtlMemory<CHandle<CVGuiScreen>, int> > >(CUtlVector<CHandle<CVGuiScreen>, CUtlMemory<CHandle<CVGuiScreen>, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<5>::GetDataOps<CUtlVector<int, CUtlMemory<int, int> > >(CUtlVector<int, CUtlMemory<int, int> >*)::ops
 D guard variable for PlayerLocomotion::GetDesiredLean() const::junk
 D guard variable for datamap_t* DataMapInit<AI_Response>(AI_Response*)::nameHolder
 D guard variable for datamap_t* DataMapInit<AI_ResponseParams>(AI_ResponseParams*)::nameHolder
 D guard variable for datamap_t* DataMapInit<Boomer>(Boomer*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAISound>(CAISound*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_BehaviorBase>(CAI_BehaviorBase*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_ChangeHintGroup>(CAI_ChangeHintGroup*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_ChangeTarget>(CAI_ChangeTarget*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_Expresser>(CAI_Expresser*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAmbientGeneric>(CAmbientGeneric*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CAmbientGeneric>(CAmbientGeneric*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAnimationLayer>(CAnimationLayer*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CAnimationLayer>(CAnimationLayer*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAreaPortal>(CAreaPortal*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAssaultRifle>(CAssaultRifle*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAutoShotgun>(CAutoShotgun*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBaseAbility>(CBaseAbility*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBaseAchievement>(CBaseAchievement*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBaseAnimating>(CBaseAnimating*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CBaseAnimating>(CBaseAnimating*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBaseAnimatingOverlay>(CBaseAnimatingOverlay*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CBaseAnimatingOverlay>(CBaseAnimatingOverlay*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBaseButton>(CBaseButton*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CBaseButton>(CBaseButton*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBaseCSGrenade>(CBaseCSGrenade*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBaseCSGrenadeProjectile>(CBaseCSGrenadeProjectile*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CBaseCSGrenadeProjectile>(CBaseCSGrenadeProjectile*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBaseCombatCharacter>(CBaseCombatCharacter*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CBaseCombatCharacter>(CBaseCombatCharacter*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBaseCombatWeapon>(CBaseCombatWeapon*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CBaseCombatWeapon>(CBaseCombatWeapon*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBaseDMStart>(CBaseDMStart*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBaseDoor>(CBaseDoor*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CBaseDoor>(CBaseDoor*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBaseEntity>(CBaseEntity*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CBaseEntity>(CBaseEntity*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBaseEntityOutput>(CBaseEntityOutput*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CBaseEntityOutput>(CBaseEntityOutput*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBaseFilter>(CBaseFilter*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CBaseFilter>(CBaseFilter*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBaseFire>(CBaseFire*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBaseFlex>(CBaseFlex*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBaseGrenade>(CBaseGrenade*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CBaseGrenade>(CBaseGrenade*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBaseMoveBehavior>(CBaseMoveBehavior*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBasePlatTrain>(CBasePlatTrain*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CBasePlatTrain>(CBasePlatTrain*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBasePlayer>(CBasePlayer*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CBasePlayer>(CBasePlayer*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBasePropDoor>(CBasePropDoor*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CBasePropDoor>(CBasePropDoor*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBaseServerVehicle>(CBaseServerVehicle*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CBaseServerVehicle>(CBaseServerVehicle*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBaseShotgun>(CBaseShotgun*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBaseTeamObjectiveResource>(CBaseTeamObjectiveResource*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CBaseTeamObjectiveResource>(CBaseTeamObjectiveResource*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBaseToggle>(CBaseToggle*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBaseTrigger>(CBaseTrigger*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CBaseTrigger>(CBaseTrigger*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBaseVPhysicsTrigger>(CBaseVPhysicsTrigger*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBaseViewModel>(CBaseViewModel*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CBaseViewModel>(CBaseViewModel*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBeam>(CBeam*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBeamSpotlight>(CBeamSpotlight*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CBeamSpotlight>(CBeamSpotlight*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBlood>(CBlood*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBoneFollower>(CBoneFollower*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBoneFollowerManager>(CBoneFollowerManager*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CBoneFollowerManager>(CBoneFollowerManager*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBoomerClaw>(CBoomerClaw*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBreakable>(CBreakable*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CBreakable>(CBreakable*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBreakableProp>(CBreakableProp*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CBreakableProp>(CBreakableProp*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBreakableSurface>(CBreakableSurface*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CBreakableSurface>(CBreakableSurface*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBubbling>(CBubbling*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CBubbling>(CBubbling*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CButtonTimed>(CButtonTimed*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CButtonTimed>(CButtonTimed*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CCSPlayer>(CCSPlayer*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CCSPlayer>(CCSPlayer*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CCSRagdoll>(CCSRagdoll*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CCSRagdoll>(CCSRagdoll*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CCarProp>(CCarProp*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CCarProp>(CCarProp*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CChangeLevel>(CChangeLevel*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CChangeLevel>(CChangeLevel*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CClaw>(CClaw*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CClientPath>(CClientPath*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CClientPath>(CClientPath*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CCollisionProperty>(CCollisionProperty*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CColorCorrection>(CColorCorrection*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CColorCorrection>(CColorCorrection*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CColorCorrectionVolume>(CColorCorrectionVolume*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CColorCorrectionVolume>(CColorCorrectionVolume*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CCommentaryAuto>(CCommentaryAuto*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CCommentaryAuto>(CCommentaryAuto*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CCommentaryDummy>(CCommentaryDummy*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CCommentarySystem>(CCommentarySystem*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CCommentarySystem>(CCommentarySystem*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CCommentaryZombieSpawner>(CCommentaryZombieSpawner*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CCommentaryZombieSpawner>(CCommentaryZombieSpawner*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CConstantForceController>(CConstantForceController*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CConstraintAnchor>(CConstraintAnchor*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CCopyRecipientFilter>(CCopyRecipientFilter*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CCopyRecipientFilter>(CCopyRecipientFilter*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CDeathFallCamera>(CDeathFallCamera*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CDebugHistory>(CDebugHistory*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CDecal>(CDecal*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CDecal>(CDecal*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CDynamicLight>(CDynamicLight*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CDynamicLight>(CDynamicLight*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CDynamicProp>(CDynamicProp*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CDynamicProp>(CDynamicProp*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEmbers>(CEmbers*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CEmbers>(CEmbers*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEntityDissolve>(CEntityDissolve*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CEntityDissolve>(CEntityDissolve*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEntityFlame>(CEntityFlame*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CEntityFlame>(CEntityFlame*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEntityParticleTrail>(CEntityParticleTrail*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvBeam>(CEnvBeam*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CEnvBeam>(CEnvBeam*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvBeverage>(CEnvBeverage*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvCredits>(CEnvCredits*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CEnvCredits>(CEnvCredits*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvDOFController>(CEnvDOFController*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CEnvDOFController>(CEnvDOFController*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvDustPuff>(CEnvDustPuff*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvEffectsScript>(CEnvEffectsScript*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CEnvEffectsScript>(CEnvEffectsScript*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvEntityMaker>(CEnvEntityMaker*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CEnvEntityMaker>(CEnvEntityMaker*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvExplosion>(CEnvExplosion*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CEnvExplosion>(CEnvExplosion*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvFade>(CEnvFade*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CEnvFade>(CEnvFade*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvFireSensor>(CEnvFireSensor*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CEnvFireSensor>(CEnvFireSensor*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvFireSource>(CEnvFireSource*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvFunnel>(CEnvFunnel*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvGlobal>(CEnvGlobal*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CEnvGlobal>(CEnvGlobal*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvGunfire>(CEnvGunfire*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CEnvGunfire>(CEnvGunfire*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvHudHint>(CEnvHudHint*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvLaser>(CEnvLaser*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CEnvLaser>(CEnvLaser*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvMicrophone>(CEnvMicrophone*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CEnvMicrophone>(CEnvMicrophone*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvMuzzleFlash>(CEnvMuzzleFlash*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvParticleScript>(CEnvParticleScript*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvPlayerSurfaceTrigger>(CEnvPlayerSurfaceTrigger*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CEnvPlayerSurfaceTrigger>(CEnvPlayerSurfaceTrigger*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvProjectedTexture>(CEnvProjectedTexture*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CEnvProjectedTexture>(CEnvProjectedTexture*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvQuadraticBeam>(CEnvQuadraticBeam*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvRockLauncher>(CEnvRockLauncher*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvScreenEffect>(CEnvScreenEffect*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvScreenOverlay>(CEnvScreenOverlay*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CEnvScreenOverlay>(CEnvScreenOverlay*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvShake>(CEnvShake*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CEnvShake>(CEnvShake*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvShooter>(CEnvShooter*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvSoundscape>(CEnvSoundscape*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CEnvSoundscape>(CEnvSoundscape*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvSoundscapeProxy>(CEnvSoundscapeProxy*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvSoundscapeTriggerable>(CEnvSoundscapeTriggerable*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvSpark>(CEnvSpark*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CEnvSpark>(CEnvSpark*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvSplash>(CEnvSplash*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvTonemapController>(CEnvTonemapController*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CEnvTonemapController>(CEnvTonemapController*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvTracer>(CEnvTracer*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CEnvTracer>(CEnvTracer*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvViewPunch>(CEnvViewPunch*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvWeaponfire>(CEnvWeaponfire*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CEnvWeaponfire>(CEnvWeaponfire*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvWind>(CEnvWind*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CEnvWind>(CEnvWind*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvZoom>(CEnvZoom*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnv_Blocker>(CEnv_Blocker*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEscapeRoute>(CEscapeRoute*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEventAction>(CEventAction*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEventQueue>(CEventQueue*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFailableAchievement>(CFailableAchievement*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFilterClass>(CFilterClass*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFilterContext>(CFilterContext*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFilterEnemy>(CFilterEnemy*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFilterMassGreater>(CFilterMassGreater*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFilterModel>(CFilterModel*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFilterMultiple>(CFilterMultiple*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFilterName>(CFilterName*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFinaleTrigger>(CFinaleTrigger*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CFinaleTrigger>(CFinaleTrigger*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFire>(CFire*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CFire>(CFire*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFireSmoke>(CFireSmoke*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFireTrail>(CFireTrail*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFirstAidKit>(CFirstAidKit*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFish>(CFish*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFishPool>(CFishPool*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CFishPool>(CFishPool*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFlexCycler>(CFlexCycler*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFlexExpresser>(CFlexExpresser*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFogController>(CFogController*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CFogController>(CFogController*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFogTrigger>(CFogTrigger*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFogVolume>(CFogVolume*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFourWheelServerVehicle>(CFourWheelServerVehicle*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFourWheelVehiclePhysics>(CFourWheelVehiclePhysics*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuelBarrelProp>(CFuelBarrelProp*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncAreaPortalBase>(CFuncAreaPortalBase*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncAreaPortalWindow>(CFuncAreaPortalWindow*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncBrush>(CFuncBrush*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncConveyor>(CFuncConveyor*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncElevator>(CFuncElevator*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CFuncElevator>(CFuncElevator*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncFireExtinguisher>(CFuncFireExtinguisher*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CFuncFireExtinguisher>(CFuncFireExtinguisher*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncLadder>(CFuncLadder*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CFuncLadder>(CFuncLadder*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncMoveLinear>(CFuncMoveLinear*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CFuncMoveLinear>(CFuncMoveLinear*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncNavAttributeRegion>(CFuncNavAttributeRegion*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncNavBlocker>(CFuncNavBlocker*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncNavObstruction>(CFuncNavObstruction*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncNavStairsToggle>(CFuncNavStairsToggle*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncOccluder>(CFuncOccluder*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncPlat>(CFuncPlat*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CFuncPlat>(CFuncPlat*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncPlatRot>(CFuncPlatRot*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncPlayerInfectedClip>(CFuncPlayerInfectedClip*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncRagdollFader>(CFuncRagdollFader*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncReflectiveGlass>(CFuncReflectiveGlass*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncRotating>(CFuncRotating*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CFuncRotating>(CFuncRotating*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncSimpleLadder>(CFuncSimpleLadder*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncSmokeVolume>(CFuncSmokeVolume*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncSpawnVolume>(CFuncSpawnVolume*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CFuncSpawnVolume>(CFuncSpawnVolume*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncTankTrain>(CFuncTankTrain*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CFuncTankTrain>(CFuncTankTrain*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncTrackAuto>(CFuncTrackAuto*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncTrackChange>(CFuncTrackChange*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CFuncTrackChange>(CFuncTrackChange*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncTrackTrain>(CFuncTrackTrain*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CFuncTrackTrain>(CFuncTrackTrain*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncTrain>(CFuncTrain*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CFuncTrain>(CFuncTrain*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncTrainControls>(CFuncTrainControls*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CFuncTrainControls>(CFuncTrainControls*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncVPhysicsClip>(CFuncVPhysicsClip*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncVehicleClip>(CFuncVehicleClip*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncWall>(CFuncWall*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncWallToggle>(CFuncWallToggle*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFunc_Dust>(CFunc_Dust*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFunc_LOD>(CFunc_LOD*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CGameEnd>(CGameEnd*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CGameGibManager>(CGameGibManager*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CGamePlayerEquip>(CGamePlayerEquip*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CGamePlayerZone>(CGamePlayerZone*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CGamePlayerZone>(CGamePlayerZone*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CGameScore>(CGameScore*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CGameText>(CGameText*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CGameUI>(CGameUI*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CGameUI>(CGameUI*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CGameWeaponManager>(CGameWeaponManager*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CGameWeaponManager>(CGameWeaponManager*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CGasCan>(CGasCan*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CGib>(CGib*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CGib>(CGib*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CGibShooter>(CGibShooter*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CGibShooter>(CGibShooter*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CGlobalState>(CGlobalState*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CGlobalState>(CGlobalState*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CGunTarget>(CGunTarget*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CGunTarget>(CGunTarget*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CHunterClaw>(CHunterClaw*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CInfectedZooMaker>(CInfectedZooMaker*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CInferno>(CInferno*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CInferno>(CInferno*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CInfoDirector>(CInfoDirector*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CInfoDirector>(CInfoDirector*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CInfoElevatorFloor>(CInfoElevatorFloor*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CInfoElevatorFloor>(CInfoElevatorFloor*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CInfoGameEventProxy>(CInfoGameEventProxy*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CInfoGameMode>(CInfoGameMode*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CInfoGameMode>(CInfoGameMode*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CInfoGoalInfectedChase>(CInfoGoalInfectedChase*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CInfoOverlayAccessor>(CInfoOverlayAccessor*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CInfoRemarkable>(CInfoRemarkable*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CInfoViewParameters>(CInfoViewParameters*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CInfoZombieSpawn>(CInfoZombieSpawn*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CInfoZombieSpawn>(CInfoZombieSpawn*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CInstancedSceneEntity>(CInstancedSceneEntity*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CItem>(CItem*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CItem>(CItem*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CItemSoda>(CItemSoda*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CItemSoda>(CItemSoda*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CKeepUpright>(CKeepUpright*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CKeepUpright>(CKeepUpright*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CLight>(CLight*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CLight>(CLight*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CLightGlow>(CLightGlow*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CLogicActiveAutosave>(CLogicActiveAutosave*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CLogicActiveAutosave>(CLogicActiveAutosave*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CLogicAuto>(CLogicAuto*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CLogicAuto>(CLogicAuto*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CLogicAutosave>(CLogicAutosave*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CLogicBranch>(CLogicBranch*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CLogicBranch>(CLogicBranch*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CLogicBranchList>(CLogicBranchList*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CLogicBranchList>(CLogicBranchList*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CLogicCase>(CLogicCase*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CLogicCase>(CLogicCase*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CLogicCollisionPair>(CLogicCollisionPair*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CLogicCompare>(CLogicCompare*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CLogicCompare>(CLogicCompare*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CLogicCompareInteger>(CLogicCompareInteger*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CLogicCompareInteger>(CLogicCompareInteger*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CLogicLineToEntity>(CLogicLineToEntity*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CLogicLineToEntity>(CLogicLineToEntity*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CLogicMeasureMovement>(CLogicMeasureMovement*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CLogicMeasureMovement>(CLogicMeasureMovement*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CLogicNavigation>(CLogicNavigation*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CLogicRelay>(CLogicRelay*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CLogicRelay>(CLogicRelay*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CLunge>(CLunge*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CMapInfo>(CMapInfo*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CMaterialModifyControl>(CMaterialModifyControl*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CMathColorBlend>(CMathColorBlend*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CMathColorBlend>(CMathColorBlend*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CMathCounter>(CMathCounter*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CMathCounter>(CMathCounter*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CMathRemap>(CMathRemap*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CMathRemap>(CMathRemap*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CMessage>(CMessage*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CMessage>(CMessage*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CMessageEntity>(CMessageEntity*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CMolotov>(CMolotov*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CMomentaryRotButton>(CMomentaryRotButton*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CMomentaryRotButton>(CMomentaryRotButton*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CMotorController>(CMotorController*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CMovementSpeedMod>(CMovementSpeedMod*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CMultiDamage>(CMultiDamage*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CMultiSource>(CMultiSource*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CMultiSource>(CMultiSource*)::nameHolder
 D guard variable for datamap_t* DataMapInit<COrnamentProp>(COrnamentProp*)::nameHolder
 D guard variable for datamap_t* DataMapInit<COuttroStats>(COuttroStats*)::dataDesc
 D guard variable for datamap_t* DataMapInit<COuttroStats>(COuttroStats*)::nameHolder
 D guard variable for datamap_t* DataMapInit<COxygenTank>(COxygenTank*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPainPills>(CPainPills*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CParticleFire>(CParticleFire*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CParticleLight>(CParticleLight*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CParticlePerformanceMonitor>(CParticlePerformanceMonitor*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CParticleSystem>(CParticleSystem*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CParticleSystem>(CParticleSystem*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPassengerInfo>(CPassengerInfo*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPathCorner>(CPathCorner*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPathCorner>(CPathCorner*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPathKeyFrame>(CPathKeyFrame*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPathTrack>(CPathTrack*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPathTrack>(CPathTrack*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPhysBox>(CPhysBox*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPhysBox>(CPhysBox*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPhysBoxMultiplayer>(CPhysBoxMultiplayer*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPhysConstraint>(CPhysConstraint*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPhysConstraint>(CPhysConstraint*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPhysConstraintSystem>(CPhysConstraintSystem*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPhysConstraintSystem>(CPhysConstraintSystem*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPhysConvert>(CPhysConvert*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPhysConvert>(CPhysConvert*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPhysExplosion>(CPhysExplosion*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPhysExplosion>(CPhysExplosion*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPhysForce>(CPhysForce*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPhysForce>(CPhysForce*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPhysHinge>(CPhysHinge*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPhysImpact>(CPhysImpact*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPhysImpact>(CPhysImpact*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPhysLength>(CPhysLength*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPhysMagnet>(CPhysMagnet*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPhysMagnet>(CPhysMagnet*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPhysMotor>(CPhysMotor*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPhysMotor>(CPhysMotor*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPhysPulley>(CPhysPulley*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPhysSlideConstraint>(CPhysSlideConstraint*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPhysThruster>(CPhysThruster*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPhysTorque>(CPhysTorque*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPhysicsCannister>(CPhysicsCannister*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPhysicsCannister>(CPhysicsCannister*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPhysicsEntitySolver>(CPhysicsEntitySolver*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPhysicsNPCSolver>(CPhysicsNPCSolver*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPhysicsNPCSolver>(CPhysicsNPCSolver*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPhysicsProp>(CPhysicsProp*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPhysicsProp>(CPhysicsProp*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPhysicsPropRespawnable>(CPhysicsPropRespawnable*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPhysicsPropRespawnable>(CPhysicsPropRespawnable*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPhysicsShake>(CPhysicsShake*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPhysicsSpring>(CPhysicsSpring*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPhysicsSpring>(CPhysicsSpring*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPhysicsWind>(CPhysicsWind*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPhysicsWire>(CPhysicsWire*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPipeBomb>(CPipeBomb*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPistol>(CPistol*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPlasma>(CPlasma*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPlayerLocalData>(CPlayerLocalData*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPlayerResource>(CPlayerResource*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPlayerResource>(CPlayerResource*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPlayerState>(CPlayerState*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPointAngleSensor>(CPointAngleSensor*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPointAngleSensor>(CPointAngleSensor*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPointAngularVelocitySensor>(CPointAngularVelocitySensor*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPointAngularVelocitySensor>(CPointAngularVelocitySensor*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPointBonusMapsAccessor>(CPointBonusMapsAccessor*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPointBroadcastClientCommand>(CPointBroadcastClientCommand*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPointClientCommand>(CPointClientCommand*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPointCommentaryNode>(CPointCommentaryNode*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPointCommentaryNode>(CPointCommentaryNode*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPointDevShotCamera>(CPointDevShotCamera*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPointDevShotCamera>(CPointDevShotCamera*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPointEntityFinder>(CPointEntityFinder*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPointEntityFinder>(CPointEntityFinder*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPointGamestatsCounter>(CPointGamestatsCounter*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPointHurt>(CPointHurt*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPointHurt>(CPointHurt*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPointPlayerMoveConstraint>(CPointPlayerMoveConstraint*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPointPlayerMoveConstraint>(CPointPlayerMoveConstraint*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPointProximitySensor>(CPointProximitySensor*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPointProximitySensor>(CPointProximitySensor*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPointPush>(CPointPush*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPointPush>(CPointPush*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPointServerCommand>(CPointServerCommand*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPointSpotlight>(CPointSpotlight*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPointSpotlight>(CPointSpotlight*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPointTeleport>(CPointTeleport*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPointTemplate>(CPointTemplate*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPointTemplate>(CPointTemplate*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPointVelocitySensor>(CPointVelocitySensor*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPointVelocitySensor>(CPointVelocitySensor*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPoseController>(CPoseController*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPoseController>(CPoseController*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPostProcessController>(CPostProcessController*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPrecipitation>(CPrecipitation*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPrecipitationBlocker>(CPrecipitationBlocker*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CProjectedDecal>(CProjectedDecal*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CProjectedDecal>(CProjectedDecal*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPropDoorRotating>(CPropDoorRotating*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPropDoorRotatingBreakable>(CPropDoorRotatingBreakable*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPropDoorRotatingCheckpoint>(CPropDoorRotatingCheckpoint*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPropDoorRotatingCheckpoint>(CPropDoorRotatingCheckpoint*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPropGlowingObject>(CPropGlowingObject*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPropHealthCabinet>(CPropHealthCabinet*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPropMinigun>(CPropMinigun*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPropMinigun>(CPropMinigun*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPropMountedGun>(CPropMountedGun*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPropMountedGun>(CPropMountedGun*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPropVehicle>(CPropVehicle*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPropVehicle>(CPropVehicle*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPropVehicleDriveable>(CPropVehicleDriveable*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPropVehicleDriveable>(CPropVehicleDriveable*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPropaneTank>(CPropaneTank*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPumpShotgun>(CPumpShotgun*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CRagdollBoogie>(CRagdollBoogie*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CRagdollBoogie>(CRagdollBoogie*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CRagdollConstraint>(CRagdollConstraint*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CRagdollMagnet>(CRagdollMagnet*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CRagdollManager>(CRagdollManager*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CRagdollProp>(CRagdollProp*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CRagdollProp>(CRagdollProp*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CRagdollPropAttached>(CRagdollPropAttached*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CRagdollPropAttached>(CRagdollPropAttached*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CRandSimTimer>(CRandSimTimer*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CRandStopwatch>(CRandStopwatch*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CRevertSaved>(CRevertSaved*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CRevertSaved>(CRevertSaved*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CRopeKeyframe>(CRopeKeyframe*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CRotDoor>(CRotDoor*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CRotorWashShooter>(CRotorWashShooter*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CRuleEntity>(CRuleEntity*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CRulePointEntity>(CRulePointEntity*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CSceneEntity>(CSceneEntity*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CSceneEntity>(CSceneEntity*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CSceneListManager>(CSceneListManager*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CSceneListManager>(CSceneListManager*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CSceneManager>(CSceneManager*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CSceneManager>(CSceneManager*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CServerNetworkProperty>(CServerNetworkProperty*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CShadowControl>(CShadowControl*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CSimTimer>(CSimTimer*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CSimpleSimTimer>(CSimpleSimTimer*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CSkyCamera>(CSkyCamera*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CSlideshowDisplay>(CSlideshowDisplay*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CSmokeStack>(CSmokeStack*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CSmokeStackLightInfo>(CSmokeStackLightInfo*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CSmokerClaw>(CSmokerClaw*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CSniperRifle>(CSniperRifle*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CSound>(CSound*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CSoundEnt>(CSoundEnt*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CSoundEnvelope>(CSoundEnvelope*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CSoundPatch>(CSoundPatch*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CSpotlightEnd>(CSpotlightEnd*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CSprite>(CSprite*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CSprite>(CSprite*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CSpriteTrail>(CSpriteTrail*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CSteamJet>(CSteamJet*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CStopwatch>(CStopwatch*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CStopwatchBase>(CStopwatchBase*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CStripWeapons>(CStripWeapons*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CSubMachinegun>(CSubMachinegun*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CSun>(CSun*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CSurroundTest>(CSurroundTest*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CSurroundTest>(CSurroundTest*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CSurvivorCamera>(CSurvivorCamera*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CSurvivorCamera>(CSurvivorCamera*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CSurvivorPosition>(CSurvivorPosition*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CSurvivorRescue>(CSurvivorRescue*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CSurvivorRescue>(CSurvivorRescue*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTakeDamageInfo>(CTakeDamageInfo*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTankClaw>(CTankClaw*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTankRock>(CTankRock*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTankRock>(CTankRock*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTankTargetChange>(CTankTargetChange*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTankTrainAI>(CTankTrainAI*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTankTrainAI>(CTankTrainAI*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTargetCDAudioRep>(CTargetCDAudioRep*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTargetChangeGravity>(CTargetChangeGravity*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTeamSpawnPoint>(CTeamSpawnPoint*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTeamSpawnPoint>(CTeamSpawnPoint*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTeamVehicleSpawnPoint>(CTeamVehicleSpawnPoint*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTeamVehicleSpawnPoint>(CTeamVehicleSpawnPoint*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTeamplayRoundBasedRulesProxy>(CTeamplayRoundBasedRulesProxy*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTerrorGun>(CTerrorGun*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTerrorPlayer>(CTerrorPlayer*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTerrorPlayer>(CTerrorPlayer*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTerrorPlayerResource>(CTerrorPlayerResource*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTerrorWeapon>(CTerrorWeapon*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTerrorWeapon>(CTerrorWeapon*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTestTraceline>(CTestTraceline*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTestTraceline>(CTestTraceline*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTextureToggle>(CTextureToggle*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CThrow>(CThrow*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CThrustController>(CThrustController*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTimerEntity>(CTimerEntity*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTimerEntity>(CTimerEntity*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTonemapTrigger>(CTonemapTrigger*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTongue>(CTongue*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTransitioningPlayer>(CTransitioningPlayer*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTransitioningPlayer>(CTransitioningPlayer*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTriggerAutoCrouch>(CTriggerAutoCrouch*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTriggerBrush>(CTriggerBrush*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTriggerBrush>(CTriggerBrush*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTriggerCamera>(CTriggerCamera*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTriggerCamera>(CTriggerCamera*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTriggerCameraMultiplayer>(CTriggerCameraMultiplayer*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTriggerEscape>(CTriggerEscape*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTriggerEscape>(CTriggerEscape*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTriggerGravity>(CTriggerGravity*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTriggerGravity>(CTriggerGravity*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTriggerHurt>(CTriggerHurt*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTriggerHurt>(CTriggerHurt*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTriggerImpact>(CTriggerImpact*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTriggerImpact>(CTriggerImpact*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTriggerLook>(CTriggerLook*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTriggerLook>(CTriggerLook*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTriggerMultiple>(CTriggerMultiple*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTriggerMultiple>(CTriggerMultiple*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTriggerPlayerMovement>(CTriggerPlayerMovement*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTriggerProximity>(CTriggerProximity*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTriggerProximity>(CTriggerProximity*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTriggerPush>(CTriggerPush*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTriggerRemove>(CTriggerRemove*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTriggerRemove>(CTriggerRemove*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTriggerSave>(CTriggerSave*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTriggerSoundscape>(CTriggerSoundscape*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTriggerSoundscape>(CTriggerSoundscape*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTriggerTeleport>(CTriggerTeleport*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTriggerToggleSave>(CTriggerToggleSave*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTriggerVPhysicsMotion>(CTriggerVPhysicsMotion*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTriggerVPhysicsMotion>(CTriggerVPhysicsMotion*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTriggerWind>(CTriggerWind*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTriggerWind>(CTriggerWind*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CVGuiScreen>(CVGuiScreen*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CVersusRandom>(CVersusRandom*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CVersusRandom>(CVersusRandom*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CVomit>(CVomit*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CVoteController>(CVoteController*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CVoteController>(CVoteController*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CWC_UpdateIgnoreList>(CWC_UpdateIgnoreList*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CWaterBullet>(CWaterBullet*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CWaterBullet>(CWaterBullet*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CWaterLODControl>(CWaterLODControl*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CWeaponAmmoSpawn>(CWeaponAmmoSpawn*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CWeaponCSBase>(CWeaponCSBase*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CWeaponCSBase>(CWeaponCSBase*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CWeaponSpawn>(CWeaponSpawn*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CWeaponSpawn>(CWeaponSpawn*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CWeightButton>(CWeightButton*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CWeightButton>(CWeightButton*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CWindowPane>(CWindowPane*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CWindowPane>(CWindowPane*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CWorld>(CWorld*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CWorldItem>(CWorldItem*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CaptionLookup_t>(CaptionLookup_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CompiledCaptionHeader_t>(CompiledCaptionHeader_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<ConceptHistory_t>(ConceptHistory_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<DustTrail>(DustTrail*)::nameHolder
 D guard variable for datamap_t* DataMapInit<EntityParticleTrailInfo_t>(EntityParticleTrailInfo_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<EventQueuePrioritizedEvent_t>(EventQueuePrioritizedEvent_t*)::dataDesc
 D guard variable for datamap_t* DataMapInit<EventQueuePrioritizedEvent_t>(EventQueuePrioritizedEvent_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<FilterDamageType>(FilterDamageType*)::nameHolder
 D guard variable for datamap_t* DataMapInit<FilterInfectedClass>(FilterInfectedClass*)::nameHolder
 D guard variable for datamap_t* DataMapInit<FilterTeam>(FilterTeam*)::nameHolder
 D guard variable for datamap_t* DataMapInit<Hunter>(Hunter*)::nameHolder
 D guard variable for datamap_t* DataMapInit<InfoChangelevel>(InfoChangelevel*)::dataDesc
 D guard variable for datamap_t* DataMapInit<InfoChangelevel>(InfoChangelevel*)::nameHolder
 D guard variable for datamap_t* DataMapInit<NextBotCombatCharacter>(NextBotCombatCharacter*)::dataDesc
 D guard variable for datamap_t* DataMapInit<NextBotCombatCharacter>(NextBotCombatCharacter*)::nameHolder
 D guard variable for datamap_t* DataMapInit<ParticleSmokeGrenade>(ParticleSmokeGrenade*)::nameHolder
 D guard variable for datamap_t* DataMapInit<PhysBlockHeader_t>(PhysBlockHeader_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<PhysObjectHeader_t>(PhysObjectHeader_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<Relationship_t>(Relationship_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<Response>(Response*)::nameHolder
 D guard variable for datamap_t* DataMapInit<ResponseContext_t>(ResponseContext_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<ResponseGroup>(ResponseGroup*)::nameHolder
 D guard variable for datamap_t* DataMapInit<RocketTrail>(RocketTrail*)::nameHolder
 D guard variable for datamap_t* DataMapInit<SaveRestoreBlockHeader_t>(SaveRestoreBlockHeader_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<SmokeTrail>(SmokeTrail*)::nameHolder
 D guard variable for datamap_t* DataMapInit<Smoker>(Smoker*)::nameHolder
 D guard variable for datamap_t* DataMapInit<SoundCommand_t>(SoundCommand_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<SporeExplosion>(SporeExplosion*)::nameHolder
 D guard variable for datamap_t* DataMapInit<SporeTrail>(SporeTrail*)::nameHolder
 D guard variable for datamap_t* DataMapInit<SurvivorBot>(SurvivorBot*)::nameHolder
 D guard variable for datamap_t* DataMapInit<Tank>(Tank*)::nameHolder
 D guard variable for datamap_t* DataMapInit<TemplateEntityData_t>(TemplateEntityData_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<ViewSmoothingData_t>(ViewSmoothingData_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<audioparams_t>(audioparams_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<entitytable_t>(entitytable_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<flexsetting_t>(flexsetting_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<flexsettinghdr_t>(flexsettinghdr_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<flexweight_t>(flexweight_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<fogparams_t>(fogparams_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<fogplayerparams_t>(fogplayerparams_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<game_shadowcontrol_params_t>(game_shadowcontrol_params_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<globalentity_t>(globalentity_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<locksound_t>(locksound_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<magnetted_objects_t>(magnetted_objects_t*)::dataDesc
 D guard variable for datamap_t* DataMapInit<magnetted_objects_t>(magnetted_objects_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<modifiedconvars_t>(modifiedconvars_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<physfollower_t>(physfollower_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<sky3dparams_t>(sky3dparams_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<template_t>(template_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<thinkfunc_t>(thinkfunc_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<vehicle_crashsound_t>(vehicle_crashsound_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<vehicle_gear_t>(vehicle_gear_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<vehiclesounds_t>(vehiclesounds_t*)::dataDesc
 D guard variable for datamap_t* DataMapInit<vehiclesounds_t>(vehiclesounds_t*)::nameHolder
 D guard variable for int ServerClassInit<DT_AbilityBase::ignored>(DT_AbilityBase::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_AbilityThrow::ignored>(DT_AbilityThrow::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_AbilityTongue::ignored>(DT_AbilityTongue::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_AbilityVomit::ignored>(DT_AbilityVomit::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_AnimTimeMustBeFirst::ignored>(DT_AnimTimeMustBeFirst::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_Animationlayer::ignored>(DT_Animationlayer::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_AssaultRifle::ignored>(DT_AssaultRifle::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_AutoShotgun::ignored>(DT_AutoShotgun::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_BCCLocalPlayerExclusive::ignored>(DT_BCCLocalPlayerExclusive::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_BaseAnimating::ignored>(DT_BaseAnimating::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_BaseAnimatingOverlay::ignored>(DT_BaseAnimatingOverlay::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_BaseBeam::ignored>(DT_BaseBeam::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_BaseButton::ignored>(DT_BaseButton::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_BaseCSGrenade::ignored>(DT_BaseCSGrenade::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_BaseCSGrenadeProjectile::ignored>(DT_BaseCSGrenadeProjectile::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_BaseCombatCharacter::ignored>(DT_BaseCombatCharacter::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_BaseCombatWeapon::ignored>(DT_BaseCombatWeapon::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_BaseDoor::ignored>(DT_BaseDoor::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_BaseEntity::ignored>(DT_BaseEntity::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_BaseFlex::ignored>(DT_BaseFlex::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_BaseGrenade::ignored>(DT_BaseGrenade::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_BaseParticleEntity::ignored>(DT_BaseParticleEntity::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_BasePlayer::ignored>(DT_BasePlayer::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_BasePropDoor::ignored>(DT_BasePropDoor::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_BaseShotgun::ignored>(DT_BaseShotgun::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_BaseTeamObjectiveResource::ignored>(DT_BaseTeamObjectiveResource::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_BaseTempEntity::ignored>(DT_BaseTempEntity::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_BaseToggle::ignored>(DT_BaseToggle::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_BaseTrigger::ignored>(DT_BaseTrigger::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_BaseViewModel::ignored>(DT_BaseViewModel::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_Beam::ignored>(DT_Beam::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_BeamSpotlight::ignored>(DT_BeamSpotlight::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_BoneFollower::ignored>(DT_BoneFollower::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_Boomer::ignored>(DT_Boomer::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_Breakable::ignored>(DT_Breakable::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_BreakableProp::ignored>(DT_BreakableProp::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_BreakableSurface::ignored>(DT_BreakableSurface::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_CFish::ignored>(DT_CFish::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_CSGameRules::ignored>(DT_CSGameRules::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_CSGameRulesProxy::ignored>(DT_CSGameRulesProxy::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_CSLocalPlayerExclusive::ignored>(DT_CSLocalPlayerExclusive::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_CSNonLocalPlayerExclusive::ignored>(DT_CSNonLocalPlayerExclusive::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_CSPlayer::ignored>(DT_CSPlayer::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_CSRagdoll::ignored>(DT_CSRagdoll::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_CSTeam::ignored>(DT_CSTeam::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_ClientPath::ignored>(DT_ClientPath::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_CollisionProperty::ignored>(DT_CollisionProperty::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_ColorCorrection::ignored>(DT_ColorCorrection::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_ColorCorrectionVolume::ignored>(DT_ColorCorrectionVolume::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_CountdownTimer::ignored>(DT_CountdownTimer::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_DetailController::ignored>(DT_DetailController::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_DustTrail::ignored>(DT_DustTrail::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_DynamicLight::ignored>(DT_DynamicLight::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_DynamicProp::ignored>(DT_DynamicProp::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_EffectData::ignored>(DT_EffectData::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_Embers::ignored>(DT_Embers::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_EntityDissolve::ignored>(DT_EntityDissolve::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_EntityFlame::ignored>(DT_EntityFlame::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_EntityParticleTrail::ignored>(DT_EntityParticleTrail::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_EntityParticleTrailInfo::ignored>(DT_EntityParticleTrailInfo::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_EnvDOFController::ignored>(DT_EnvDOFController::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_EnvParticleScript::ignored>(DT_EnvParticleScript::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_EnvProjectedTexture::ignored>(DT_EnvProjectedTexture::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_EnvScreenEffect::ignored>(DT_EnvScreenEffect::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_EnvScreenOverlay::ignored>(DT_EnvScreenOverlay::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_EnvTonemapController::ignored>(DT_EnvTonemapController::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_EnvWeaponfire::ignored>(DT_EnvWeaponfire::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_EnvWind::ignored>(DT_EnvWind::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_EnvWindShared::ignored>(DT_EnvWindShared::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_FinaleTrigger::ignored>(DT_FinaleTrigger::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_FireSmoke::ignored>(DT_FireSmoke::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_FireTrail::ignored>(DT_FireTrail::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_FogController::ignored>(DT_FogController::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_FuncAreaPortalWindow::ignored>(DT_FuncAreaPortalWindow::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_FuncBrush::ignored>(DT_FuncBrush::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_FuncConveyor::ignored>(DT_FuncConveyor::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_FuncElevator::ignored>(DT_FuncElevator::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_FuncLadder::ignored>(DT_FuncLadder::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_FuncMoveLinear::ignored>(DT_FuncMoveLinear::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_FuncOccluder::ignored>(DT_FuncOccluder::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_FuncPlayerInfectedClip::ignored>(DT_FuncPlayerInfectedClip::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_FuncRagdollFader::ignored>(DT_FuncRagdollFader::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_FuncReflectiveGlass::ignored>(DT_FuncReflectiveGlass::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_FuncRotating::ignored>(DT_FuncRotating::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_FuncSimpleLadder::ignored>(DT_FuncSimpleLadder::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_FuncSmokeVolume::ignored>(DT_FuncSmokeVolume::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_FuncTrackTrain::ignored>(DT_FuncTrackTrain::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_Func_Dust::ignored>(DT_Func_Dust::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_Func_LOD::ignored>(DT_Func_LOD::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_GameRulesProxy::ignored>(DT_GameRulesProxy::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_GasCan::ignored>(DT_GasCan::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_HandleTest::ignored>(DT_HandleTest::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_Hunter::ignored>(DT_Hunter::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_Infected::ignored>(DT_Infected::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_InfectedAnimationLayer::ignored>(DT_InfectedAnimationLayer::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_Inferno::ignored>(DT_Inferno::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_InfoLadderDismount::ignored>(DT_InfoLadderDismount::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_InfoOverlayAccessor::ignored>(DT_InfoOverlayAccessor::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_IntervalTimer::ignored>(DT_IntervalTimer::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_LightGlow::ignored>(DT_LightGlow::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_Local::ignored>(DT_Local::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_LocalActiveL4DWeaponData::ignored>(DT_LocalActiveL4DWeaponData::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_LocalActiveShotgunData::ignored>(DT_LocalActiveShotgunData::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_LocalActiveWeaponData::ignored>(DT_LocalActiveWeaponData::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_LocalPlayerExclusive::ignored>(DT_LocalPlayerExclusive::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_LocalWeaponData::ignored>(DT_LocalWeaponData::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_Lunge::ignored>(DT_Lunge::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_MaterialModifyControl::ignored>(DT_MaterialModifyControl::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_Molotov::ignored>(DT_Molotov::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_MolotovProjectile::ignored>(DT_MolotovProjectile::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_MovieExplosion::ignored>(DT_MovieExplosion::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_Music::ignored>(DT_Music::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_NextBot::ignored>(DT_NextBot::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_OverlayVars::ignored>(DT_OverlayVars::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_OxygenTank::ignored>(DT_OxygenTank::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_ParticleFire::ignored>(DT_ParticleFire::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_ParticlePerformanceMonitor::ignored>(DT_ParticlePerformanceMonitor::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_ParticleSmokeGrenade::ignored>(DT_ParticleSmokeGrenade::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_ParticleSystem::ignored>(DT_ParticleSystem::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_PhysBox::ignored>(DT_PhysBox::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_PhysBoxMultiplayer::ignored>(DT_PhysBoxMultiplayer::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_PhysMagnet::ignored>(DT_PhysMagnet::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_PhysicsProp::ignored>(DT_PhysicsProp::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_PipeBomb::ignored>(DT_PipeBomb::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_PipeBombProjectile::ignored>(DT_PipeBombProjectile::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_Pistol::ignored>(DT_Pistol::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_Plasma::ignored>(DT_Plasma::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_PlayerResource::ignored>(DT_PlayerResource::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_PlayerState::ignored>(DT_PlayerState::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_PointCommentaryNode::ignored>(DT_PointCommentaryNode::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_PoseController::ignored>(DT_PoseController::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_PostProcessController::ignored>(DT_PostProcessController::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_Precipitation::ignored>(DT_Precipitation::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_PrecipitationBlocker::ignored>(DT_PrecipitationBlocker::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_PredictedViewModel::ignored>(DT_PredictedViewModel::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_PropDoorRotatingCheckpoint::ignored>(DT_PropDoorRotatingCheckpoint::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_PropGlowingObject::ignored>(DT_PropGlowingObject::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_PropHealthCabinet::ignored>(DT_PropHealthCabinet::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_PropMinigun::ignored>(DT_PropMinigun::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_PropMountedGun::ignored>(DT_PropMountedGun::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_PropVehicleDriveable::ignored>(DT_PropVehicleDriveable::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_PropaneTank::ignored>(DT_PropaneTank::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_ProxyToggle::ignored>(DT_ProxyToggle::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_ProxyToggle_ProxiedData::ignored>(DT_ProxyToggle_ProxiedData::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_PumpShotgun::ignored>(DT_PumpShotgun::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_QuadraticBeam::ignored>(DT_QuadraticBeam::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_Ragdoll::ignored>(DT_Ragdoll::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_RagdollManager::ignored>(DT_RagdollManager::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_Ragdoll_Attached::ignored>(DT_Ragdoll_Attached::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_RocketTrail::ignored>(DT_RocketTrail::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_RopeKeyframe::ignored>(DT_RopeKeyframe::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_SceneEntity::ignored>(DT_SceneEntity::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_ServerAnimationData::ignored>(DT_ServerAnimationData::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_ShadowControl::ignored>(DT_ShadowControl::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_SlideshowDisplay::ignored>(DT_SlideshowDisplay::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_SmokeStack::ignored>(DT_SmokeStack::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_SmokeTrail::ignored>(DT_SmokeTrail::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_Smoker::ignored>(DT_Smoker::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_SniperRifle::ignored>(DT_SniperRifle::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_SporeExplosion::ignored>(DT_SporeExplosion::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_SporeTrail::ignored>(DT_SporeTrail::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_SpotlightEnd::ignored>(DT_SpotlightEnd::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_Sprite::ignored>(DT_Sprite::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_SpriteOriented::ignored>(DT_SpriteOriented::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_SpriteTrail::ignored>(DT_SpriteTrail::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_SteamJet::ignored>(DT_SteamJet::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_SubMachinegun::ignored>(DT_SubMachinegun::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_Sun::ignored>(DT_Sun::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_SurvivorBot::ignored>(DT_SurvivorBot::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_SurvivorPosition::ignored>(DT_SurvivorPosition::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_SurvivorRescue::ignored>(DT_SurvivorRescue::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEArmorRicochet::ignored>(DT_TEArmorRicochet::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEBSPDecal::ignored>(DT_TEBSPDecal::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEBeamEntPoint::ignored>(DT_TEBeamEntPoint::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEBeamEnts::ignored>(DT_TEBeamEnts::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEBeamFollow::ignored>(DT_TEBeamFollow::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEBeamLaser::ignored>(DT_TEBeamLaser::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEBeamPoints::ignored>(DT_TEBeamPoints::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEBeamRing::ignored>(DT_TEBeamRing::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEBeamRingPoint::ignored>(DT_TEBeamRingPoint::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEBeamSpline::ignored>(DT_TEBeamSpline::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEBloodSprite::ignored>(DT_TEBloodSprite::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEBloodStream::ignored>(DT_TEBloodStream::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEBreakModel::ignored>(DT_TEBreakModel::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEBubbleTrail::ignored>(DT_TEBubbleTrail::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEBubbles::ignored>(DT_TEBubbles::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEBullets::ignored>(DT_TEBullets::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEClientProjectile::ignored>(DT_TEClientProjectile::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEDecal::ignored>(DT_TEDecal::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEDust::ignored>(DT_TEDust::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEDynamicLight::ignored>(DT_TEDynamicLight::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEEffectDispatch::ignored>(DT_TEEffectDispatch::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEEnergySplash::ignored>(DT_TEEnergySplash::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEExplosion::ignored>(DT_TEExplosion::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEFizz::ignored>(DT_TEFizz::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEFootprintDecal::ignored>(DT_TEFootprintDecal::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEFoundryHelpers::ignored>(DT_TEFoundryHelpers::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEGaussExplosion::ignored>(DT_TEGaussExplosion::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEGlowSprite::ignored>(DT_TEGlowSprite::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEImpact::ignored>(DT_TEImpact::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEKillPlayerAttachments::ignored>(DT_TEKillPlayerAttachments::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TELargeFunnel::ignored>(DT_TELargeFunnel::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEMetalSparks::ignored>(DT_TEMetalSparks::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEMuzzleFlash::ignored>(DT_TEMuzzleFlash::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEParticleSystem::ignored>(DT_TEParticleSystem::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEPhysicsProp::ignored>(DT_TEPhysicsProp::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEPlayerAnimEvent::ignored>(DT_TEPlayerAnimEvent::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEPlayerDecal::ignored>(DT_TEPlayerDecal::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEProjectedDecal::ignored>(DT_TEProjectedDecal::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEShatterSurface::ignored>(DT_TEShatterSurface::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEShowLine::ignored>(DT_TEShowLine::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TESmoke::ignored>(DT_TESmoke::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TESparks::ignored>(DT_TESparks::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TESprite::ignored>(DT_TESprite::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TESpriteSpray::ignored>(DT_TESpriteSpray::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TETutorLesson::ignored>(DT_TETutorLesson::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEWorldDecal::ignored>(DT_TEWorldDecal::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_Tank::ignored>(DT_Tank::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_Team::ignored>(DT_Team::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TeamplayRoundBasedRules::ignored>(DT_TeamplayRoundBasedRules::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TeamplayRoundBasedRulesProxy::ignored>(DT_TeamplayRoundBasedRulesProxy::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TerrorGameRules::ignored>(DT_TerrorGameRules::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TerrorGameRulesProxy::ignored>(DT_TerrorGameRulesProxy::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TerrorGun::ignored>(DT_TerrorGun::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TerrorLocalPlayerExclusive::ignored>(DT_TerrorLocalPlayerExclusive::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TerrorPlayer::ignored>(DT_TerrorPlayer::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TerrorPlayerResource::ignored>(DT_TerrorPlayerResource::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TerrorViewModel::ignored>(DT_TerrorViewModel::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TerrorWeapon::ignored>(DT_TerrorWeapon::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TestTraceline::ignored>(DT_TestTraceline::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TransitioningPlayer::ignored>(DT_TransitioningPlayer::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TriggerPlayerMovement::ignored>(DT_TriggerPlayerMovement::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_VGuiScreen::ignored>(DT_VGuiScreen::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_VoteController::ignored>(DT_VoteController::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_WORLD::ignored>(DT_WORLD::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_WaterBullet::ignored>(DT_WaterBullet::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_WaterLODControl::ignored>(DT_WaterLODControl::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_WeaponAmmoSpawn::ignored>(DT_WeaponAmmoSpawn::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_WeaponBoomerClaw::ignored>(DT_WeaponBoomerClaw::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_WeaponCSBase::ignored>(DT_WeaponCSBase::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_WeaponCSBaseGun::ignored>(DT_WeaponCSBaseGun::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_WeaponClaw::ignored>(DT_WeaponClaw::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_WeaponFirstAidKit::ignored>(DT_WeaponFirstAidKit::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_WeaponHunterClaw::ignored>(DT_WeaponHunterClaw::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_WeaponPainPills::ignored>(DT_WeaponPainPills::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_WeaponSmokerClaw::ignored>(DT_WeaponSmokerClaw::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_WeaponSpawn::ignored>(DT_WeaponSpawn::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_WeaponTankClaw::ignored>(DT_WeaponTankClaw::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_Witch::ignored>(DT_Witch::ignored*)::g_SendProps
 D guard variable for variant_t::Entity() const::hNull
 D hull
 D int ServerClassInit<DT_AbilityBase::ignored>(DT_AbilityBase::ignored*)::g_SendProps
 D int ServerClassInit<DT_AbilityBase::ignored>(DT_AbilityBase::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_AbilityThrow::ignored>(DT_AbilityThrow::ignored*)::g_SendProps
 D int ServerClassInit<DT_AbilityThrow::ignored>(DT_AbilityThrow::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_AbilityTongue::ignored>(DT_AbilityTongue::ignored*)::g_SendProps
 D int ServerClassInit<DT_AbilityTongue::ignored>(DT_AbilityTongue::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_AbilityVomit::ignored>(DT_AbilityVomit::ignored*)::g_SendProps
 D int ServerClassInit<DT_AbilityVomit::ignored>(DT_AbilityVomit::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_AnimTimeMustBeFirst::ignored>(DT_AnimTimeMustBeFirst::ignored*)::g_SendProps
 D int ServerClassInit<DT_AnimTimeMustBeFirst::ignored>(DT_AnimTimeMustBeFirst::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Animationlayer::ignored>(DT_Animationlayer::ignored*)::g_SendProps
 D int ServerClassInit<DT_Animationlayer::ignored>(DT_Animationlayer::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_AssaultRifle::ignored>(DT_AssaultRifle::ignored*)::g_SendProps
 D int ServerClassInit<DT_AssaultRifle::ignored>(DT_AssaultRifle::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_AutoShotgun::ignored>(DT_AutoShotgun::ignored*)::g_SendProps
 D int ServerClassInit<DT_AutoShotgun::ignored>(DT_AutoShotgun::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BCCLocalPlayerExclusive::ignored>(DT_BCCLocalPlayerExclusive::ignored*)::g_SendProps
 D int ServerClassInit<DT_BCCLocalPlayerExclusive::ignored>(DT_BCCLocalPlayerExclusive::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseAnimating::ignored>(DT_BaseAnimating::ignored*)::g_SendProps
 D int ServerClassInit<DT_BaseAnimating::ignored>(DT_BaseAnimating::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseAnimatingOverlay::ignored>(DT_BaseAnimatingOverlay::ignored*)::g_SendProps
 D int ServerClassInit<DT_BaseAnimatingOverlay::ignored>(DT_BaseAnimatingOverlay::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseBeam::ignored>(DT_BaseBeam::ignored*)::g_SendProps
 D int ServerClassInit<DT_BaseBeam::ignored>(DT_BaseBeam::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseButton::ignored>(DT_BaseButton::ignored*)::g_SendProps
 D int ServerClassInit<DT_BaseButton::ignored>(DT_BaseButton::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseCSGrenade::ignored>(DT_BaseCSGrenade::ignored*)::g_SendProps
 D int ServerClassInit<DT_BaseCSGrenade::ignored>(DT_BaseCSGrenade::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseCSGrenadeProjectile::ignored>(DT_BaseCSGrenadeProjectile::ignored*)::g_SendProps
 D int ServerClassInit<DT_BaseCSGrenadeProjectile::ignored>(DT_BaseCSGrenadeProjectile::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseCombatCharacter::ignored>(DT_BaseCombatCharacter::ignored*)::g_SendProps
 D int ServerClassInit<DT_BaseCombatCharacter::ignored>(DT_BaseCombatCharacter::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseCombatWeapon::ignored>(DT_BaseCombatWeapon::ignored*)::g_SendProps
 D int ServerClassInit<DT_BaseCombatWeapon::ignored>(DT_BaseCombatWeapon::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseDoor::ignored>(DT_BaseDoor::ignored*)::g_SendProps
 D int ServerClassInit<DT_BaseDoor::ignored>(DT_BaseDoor::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseEntity::ignored>(DT_BaseEntity::ignored*)::g_SendProps
 D int ServerClassInit<DT_BaseEntity::ignored>(DT_BaseEntity::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseFlex::ignored>(DT_BaseFlex::ignored*)::g_SendProps
 D int ServerClassInit<DT_BaseFlex::ignored>(DT_BaseFlex::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseGrenade::ignored>(DT_BaseGrenade::ignored*)::g_SendProps
 D int ServerClassInit<DT_BaseGrenade::ignored>(DT_BaseGrenade::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseParticleEntity::ignored>(DT_BaseParticleEntity::ignored*)::g_SendProps
 D int ServerClassInit<DT_BaseParticleEntity::ignored>(DT_BaseParticleEntity::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BasePlayer::ignored>(DT_BasePlayer::ignored*)::g_SendProps
 D int ServerClassInit<DT_BasePlayer::ignored>(DT_BasePlayer::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BasePropDoor::ignored>(DT_BasePropDoor::ignored*)::g_SendProps
 D int ServerClassInit<DT_BasePropDoor::ignored>(DT_BasePropDoor::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseShotgun::ignored>(DT_BaseShotgun::ignored*)::g_SendProps
 D int ServerClassInit<DT_BaseShotgun::ignored>(DT_BaseShotgun::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseTeamObjectiveResource::ignored>(DT_BaseTeamObjectiveResource::ignored*)::g_SendProps
 D int ServerClassInit<DT_BaseTeamObjectiveResource::ignored>(DT_BaseTeamObjectiveResource::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseTempEntity::ignored>(DT_BaseTempEntity::ignored*)::g_SendProps
 D int ServerClassInit<DT_BaseTempEntity::ignored>(DT_BaseTempEntity::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseToggle::ignored>(DT_BaseToggle::ignored*)::g_SendProps
 D int ServerClassInit<DT_BaseToggle::ignored>(DT_BaseToggle::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseTrigger::ignored>(DT_BaseTrigger::ignored*)::g_SendProps
 D int ServerClassInit<DT_BaseTrigger::ignored>(DT_BaseTrigger::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseViewModel::ignored>(DT_BaseViewModel::ignored*)::g_SendProps
 D int ServerClassInit<DT_BaseViewModel::ignored>(DT_BaseViewModel::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Beam::ignored>(DT_Beam::ignored*)::g_SendProps
 D int ServerClassInit<DT_Beam::ignored>(DT_Beam::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BeamSpotlight::ignored>(DT_BeamSpotlight::ignored*)::g_SendProps
 D int ServerClassInit<DT_BeamSpotlight::ignored>(DT_BeamSpotlight::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BoneFollower::ignored>(DT_BoneFollower::ignored*)::g_SendProps
 D int ServerClassInit<DT_BoneFollower::ignored>(DT_BoneFollower::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Boomer::ignored>(DT_Boomer::ignored*)::g_SendProps
 D int ServerClassInit<DT_Boomer::ignored>(DT_Boomer::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Breakable::ignored>(DT_Breakable::ignored*)::g_SendProps
 D int ServerClassInit<DT_Breakable::ignored>(DT_Breakable::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BreakableProp::ignored>(DT_BreakableProp::ignored*)::g_SendProps
 D int ServerClassInit<DT_BreakableProp::ignored>(DT_BreakableProp::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BreakableSurface::ignored>(DT_BreakableSurface::ignored*)::g_SendProps
 D int ServerClassInit<DT_BreakableSurface::ignored>(DT_BreakableSurface::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_CFish::ignored>(DT_CFish::ignored*)::g_SendProps
 D int ServerClassInit<DT_CFish::ignored>(DT_CFish::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_CSGameRules::ignored>(DT_CSGameRules::ignored*)::g_SendProps
 D int ServerClassInit<DT_CSGameRules::ignored>(DT_CSGameRules::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_CSGameRulesProxy::ignored>(DT_CSGameRulesProxy::ignored*)::g_SendProps
 D int ServerClassInit<DT_CSGameRulesProxy::ignored>(DT_CSGameRulesProxy::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_CSLocalPlayerExclusive::ignored>(DT_CSLocalPlayerExclusive::ignored*)::g_SendProps
 D int ServerClassInit<DT_CSLocalPlayerExclusive::ignored>(DT_CSLocalPlayerExclusive::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_CSNonLocalPlayerExclusive::ignored>(DT_CSNonLocalPlayerExclusive::ignored*)::g_SendProps
 D int ServerClassInit<DT_CSNonLocalPlayerExclusive::ignored>(DT_CSNonLocalPlayerExclusive::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_CSPlayer::ignored>(DT_CSPlayer::ignored*)::g_SendProps
 D int ServerClassInit<DT_CSPlayer::ignored>(DT_CSPlayer::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_CSRagdoll::ignored>(DT_CSRagdoll::ignored*)::g_SendProps
 D int ServerClassInit<DT_CSRagdoll::ignored>(DT_CSRagdoll::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_CSTeam::ignored>(DT_CSTeam::ignored*)::g_SendProps
 D int ServerClassInit<DT_CSTeam::ignored>(DT_CSTeam::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_ClientPath::ignored>(DT_ClientPath::ignored*)::g_SendProps
 D int ServerClassInit<DT_ClientPath::ignored>(DT_ClientPath::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_CollisionProperty::ignored>(DT_CollisionProperty::ignored*)::g_SendProps
 D int ServerClassInit<DT_CollisionProperty::ignored>(DT_CollisionProperty::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_ColorCorrection::ignored>(DT_ColorCorrection::ignored*)::g_SendProps
 D int ServerClassInit<DT_ColorCorrection::ignored>(DT_ColorCorrection::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_ColorCorrectionVolume::ignored>(DT_ColorCorrectionVolume::ignored*)::g_SendProps
 D int ServerClassInit<DT_ColorCorrectionVolume::ignored>(DT_ColorCorrectionVolume::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_CountdownTimer::ignored>(DT_CountdownTimer::ignored*)::g_SendProps
 D int ServerClassInit<DT_CountdownTimer::ignored>(DT_CountdownTimer::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_DetailController::ignored>(DT_DetailController::ignored*)::g_SendProps
 D int ServerClassInit<DT_DetailController::ignored>(DT_DetailController::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_DustTrail::ignored>(DT_DustTrail::ignored*)::g_SendProps
 D int ServerClassInit<DT_DustTrail::ignored>(DT_DustTrail::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_DynamicLight::ignored>(DT_DynamicLight::ignored*)::g_SendProps
 D int ServerClassInit<DT_DynamicLight::ignored>(DT_DynamicLight::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_DynamicProp::ignored>(DT_DynamicProp::ignored*)::g_SendProps
 D int ServerClassInit<DT_DynamicProp::ignored>(DT_DynamicProp::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_EffectData::ignored>(DT_EffectData::ignored*)::g_SendProps
 D int ServerClassInit<DT_EffectData::ignored>(DT_EffectData::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Embers::ignored>(DT_Embers::ignored*)::g_SendProps
 D int ServerClassInit<DT_Embers::ignored>(DT_Embers::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_EntityDissolve::ignored>(DT_EntityDissolve::ignored*)::g_SendProps
 D int ServerClassInit<DT_EntityDissolve::ignored>(DT_EntityDissolve::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_EntityFlame::ignored>(DT_EntityFlame::ignored*)::g_SendProps
 D int ServerClassInit<DT_EntityFlame::ignored>(DT_EntityFlame::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_EntityParticleTrail::ignored>(DT_EntityParticleTrail::ignored*)::g_SendProps
 D int ServerClassInit<DT_EntityParticleTrail::ignored>(DT_EntityParticleTrail::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_EntityParticleTrailInfo::ignored>(DT_EntityParticleTrailInfo::ignored*)::g_SendProps
 D int ServerClassInit<DT_EntityParticleTrailInfo::ignored>(DT_EntityParticleTrailInfo::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_EnvDOFController::ignored>(DT_EnvDOFController::ignored*)::g_SendProps
 D int ServerClassInit<DT_EnvDOFController::ignored>(DT_EnvDOFController::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_EnvParticleScript::ignored>(DT_EnvParticleScript::ignored*)::g_SendProps
 D int ServerClassInit<DT_EnvParticleScript::ignored>(DT_EnvParticleScript::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_EnvProjectedTexture::ignored>(DT_EnvProjectedTexture::ignored*)::g_SendProps
 D int ServerClassInit<DT_EnvProjectedTexture::ignored>(DT_EnvProjectedTexture::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_EnvScreenEffect::ignored>(DT_EnvScreenEffect::ignored*)::g_SendProps
 D int ServerClassInit<DT_EnvScreenEffect::ignored>(DT_EnvScreenEffect::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_EnvScreenOverlay::ignored>(DT_EnvScreenOverlay::ignored*)::g_SendProps
 D int ServerClassInit<DT_EnvScreenOverlay::ignored>(DT_EnvScreenOverlay::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_EnvTonemapController::ignored>(DT_EnvTonemapController::ignored*)::g_SendProps
 D int ServerClassInit<DT_EnvTonemapController::ignored>(DT_EnvTonemapController::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_EnvWeaponfire::ignored>(DT_EnvWeaponfire::ignored*)::g_SendProps
 D int ServerClassInit<DT_EnvWeaponfire::ignored>(DT_EnvWeaponfire::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_EnvWind::ignored>(DT_EnvWind::ignored*)::g_SendProps
 D int ServerClassInit<DT_EnvWind::ignored>(DT_EnvWind::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_EnvWindShared::ignored>(DT_EnvWindShared::ignored*)::g_SendProps
 D int ServerClassInit<DT_EnvWindShared::ignored>(DT_EnvWindShared::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_FinaleTrigger::ignored>(DT_FinaleTrigger::ignored*)::g_SendProps
 D int ServerClassInit<DT_FinaleTrigger::ignored>(DT_FinaleTrigger::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_FireSmoke::ignored>(DT_FireSmoke::ignored*)::g_SendProps
 D int ServerClassInit<DT_FireSmoke::ignored>(DT_FireSmoke::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_FireTrail::ignored>(DT_FireTrail::ignored*)::g_SendProps
 D int ServerClassInit<DT_FireTrail::ignored>(DT_FireTrail::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_FogController::ignored>(DT_FogController::ignored*)::g_SendProps
 D int ServerClassInit<DT_FogController::ignored>(DT_FogController::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_FuncAreaPortalWindow::ignored>(DT_FuncAreaPortalWindow::ignored*)::g_SendProps
 D int ServerClassInit<DT_FuncAreaPortalWindow::ignored>(DT_FuncAreaPortalWindow::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_FuncBrush::ignored>(DT_FuncBrush::ignored*)::g_SendProps
 D int ServerClassInit<DT_FuncBrush::ignored>(DT_FuncBrush::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_FuncConveyor::ignored>(DT_FuncConveyor::ignored*)::g_SendProps
 D int ServerClassInit<DT_FuncConveyor::ignored>(DT_FuncConveyor::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_FuncElevator::ignored>(DT_FuncElevator::ignored*)::g_SendProps
 D int ServerClassInit<DT_FuncElevator::ignored>(DT_FuncElevator::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_FuncLadder::ignored>(DT_FuncLadder::ignored*)::g_SendProps
 D int ServerClassInit<DT_FuncLadder::ignored>(DT_FuncLadder::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_FuncMoveLinear::ignored>(DT_FuncMoveLinear::ignored*)::g_SendProps
 D int ServerClassInit<DT_FuncMoveLinear::ignored>(DT_FuncMoveLinear::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_FuncOccluder::ignored>(DT_FuncOccluder::ignored*)::g_SendProps
 D int ServerClassInit<DT_FuncOccluder::ignored>(DT_FuncOccluder::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_FuncPlayerInfectedClip::ignored>(DT_FuncPlayerInfectedClip::ignored*)::g_SendProps
 D int ServerClassInit<DT_FuncPlayerInfectedClip::ignored>(DT_FuncPlayerInfectedClip::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_FuncRagdollFader::ignored>(DT_FuncRagdollFader::ignored*)::g_SendProps
 D int ServerClassInit<DT_FuncRagdollFader::ignored>(DT_FuncRagdollFader::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_FuncReflectiveGlass::ignored>(DT_FuncReflectiveGlass::ignored*)::g_SendProps
 D int ServerClassInit<DT_FuncReflectiveGlass::ignored>(DT_FuncReflectiveGlass::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_FuncRotating::ignored>(DT_FuncRotating::ignored*)::g_SendProps
 D int ServerClassInit<DT_FuncRotating::ignored>(DT_FuncRotating::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_FuncSimpleLadder::ignored>(DT_FuncSimpleLadder::ignored*)::g_SendProps
 D int ServerClassInit<DT_FuncSimpleLadder::ignored>(DT_FuncSimpleLadder::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_FuncSmokeVolume::ignored>(DT_FuncSmokeVolume::ignored*)::g_SendProps
 D int ServerClassInit<DT_FuncSmokeVolume::ignored>(DT_FuncSmokeVolume::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_FuncTrackTrain::ignored>(DT_FuncTrackTrain::ignored*)::g_SendProps
 D int ServerClassInit<DT_FuncTrackTrain::ignored>(DT_FuncTrackTrain::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Func_Dust::ignored>(DT_Func_Dust::ignored*)::g_SendProps
 D int ServerClassInit<DT_Func_Dust::ignored>(DT_Func_Dust::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Func_LOD::ignored>(DT_Func_LOD::ignored*)::g_SendProps
 D int ServerClassInit<DT_Func_LOD::ignored>(DT_Func_LOD::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_GameRulesProxy::ignored>(DT_GameRulesProxy::ignored*)::g_SendProps
 D int ServerClassInit<DT_GameRulesProxy::ignored>(DT_GameRulesProxy::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_GasCan::ignored>(DT_GasCan::ignored*)::g_SendProps
 D int ServerClassInit<DT_GasCan::ignored>(DT_GasCan::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_HandleTest::ignored>(DT_HandleTest::ignored*)::g_SendProps
 D int ServerClassInit<DT_HandleTest::ignored>(DT_HandleTest::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Hunter::ignored>(DT_Hunter::ignored*)::g_SendProps
 D int ServerClassInit<DT_Hunter::ignored>(DT_Hunter::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Infected::ignored>(DT_Infected::ignored*)::g_SendProps
 D int ServerClassInit<DT_Infected::ignored>(DT_Infected::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_InfectedAnimationLayer::ignored>(DT_InfectedAnimationLayer::ignored*)::g_SendProps
 D int ServerClassInit<DT_InfectedAnimationLayer::ignored>(DT_InfectedAnimationLayer::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Inferno::ignored>(DT_Inferno::ignored*)::g_SendProps
 D int ServerClassInit<DT_Inferno::ignored>(DT_Inferno::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_InfoLadderDismount::ignored>(DT_InfoLadderDismount::ignored*)::g_SendProps
 D int ServerClassInit<DT_InfoLadderDismount::ignored>(DT_InfoLadderDismount::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_InfoOverlayAccessor::ignored>(DT_InfoOverlayAccessor::ignored*)::g_SendProps
 D int ServerClassInit<DT_InfoOverlayAccessor::ignored>(DT_InfoOverlayAccessor::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_IntervalTimer::ignored>(DT_IntervalTimer::ignored*)::g_SendProps
 D int ServerClassInit<DT_IntervalTimer::ignored>(DT_IntervalTimer::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_LightGlow::ignored>(DT_LightGlow::ignored*)::g_SendProps
 D int ServerClassInit<DT_LightGlow::ignored>(DT_LightGlow::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Local::ignored>(DT_Local::ignored*)::g_SendProps
 D int ServerClassInit<DT_Local::ignored>(DT_Local::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_LocalActiveL4DWeaponData::ignored>(DT_LocalActiveL4DWeaponData::ignored*)::g_SendProps
 D int ServerClassInit<DT_LocalActiveL4DWeaponData::ignored>(DT_LocalActiveL4DWeaponData::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_LocalActiveShotgunData::ignored>(DT_LocalActiveShotgunData::ignored*)::g_SendProps
 D int ServerClassInit<DT_LocalActiveShotgunData::ignored>(DT_LocalActiveShotgunData::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_LocalActiveWeaponData::ignored>(DT_LocalActiveWeaponData::ignored*)::g_SendProps
 D int ServerClassInit<DT_LocalActiveWeaponData::ignored>(DT_LocalActiveWeaponData::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_LocalPlayerExclusive::ignored>(DT_LocalPlayerExclusive::ignored*)::g_SendProps
 D int ServerClassInit<DT_LocalPlayerExclusive::ignored>(DT_LocalPlayerExclusive::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_LocalWeaponData::ignored>(DT_LocalWeaponData::ignored*)::g_SendProps
 D int ServerClassInit<DT_LocalWeaponData::ignored>(DT_LocalWeaponData::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Lunge::ignored>(DT_Lunge::ignored*)::g_SendProps
 D int ServerClassInit<DT_Lunge::ignored>(DT_Lunge::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_MaterialModifyControl::ignored>(DT_MaterialModifyControl::ignored*)::g_SendProps
 D int ServerClassInit<DT_MaterialModifyControl::ignored>(DT_MaterialModifyControl::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Molotov::ignored>(DT_Molotov::ignored*)::g_SendProps
 D int ServerClassInit<DT_Molotov::ignored>(DT_Molotov::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_MolotovProjectile::ignored>(DT_MolotovProjectile::ignored*)::g_SendProps
 D int ServerClassInit<DT_MolotovProjectile::ignored>(DT_MolotovProjectile::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_MovieExplosion::ignored>(DT_MovieExplosion::ignored*)::g_SendProps
 D int ServerClassInit<DT_MovieExplosion::ignored>(DT_MovieExplosion::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Music::ignored>(DT_Music::ignored*)::g_SendProps
 D int ServerClassInit<DT_Music::ignored>(DT_Music::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_NextBot::ignored>(DT_NextBot::ignored*)::g_SendProps
 D int ServerClassInit<DT_NextBot::ignored>(DT_NextBot::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_OverlayVars::ignored>(DT_OverlayVars::ignored*)::g_SendProps
 D int ServerClassInit<DT_OverlayVars::ignored>(DT_OverlayVars::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_OxygenTank::ignored>(DT_OxygenTank::ignored*)::g_SendProps
 D int ServerClassInit<DT_OxygenTank::ignored>(DT_OxygenTank::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_ParticleFire::ignored>(DT_ParticleFire::ignored*)::g_SendProps
 D int ServerClassInit<DT_ParticleFire::ignored>(DT_ParticleFire::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_ParticlePerformanceMonitor::ignored>(DT_ParticlePerformanceMonitor::ignored*)::g_SendProps
 D int ServerClassInit<DT_ParticlePerformanceMonitor::ignored>(DT_ParticlePerformanceMonitor::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_ParticleSmokeGrenade::ignored>(DT_ParticleSmokeGrenade::ignored*)::g_SendProps
 D int ServerClassInit<DT_ParticleSmokeGrenade::ignored>(DT_ParticleSmokeGrenade::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_ParticleSystem::ignored>(DT_ParticleSystem::ignored*)::g_SendProps
 D int ServerClassInit<DT_ParticleSystem::ignored>(DT_ParticleSystem::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_PhysBox::ignored>(DT_PhysBox::ignored*)::g_SendProps
 D int ServerClassInit<DT_PhysBox::ignored>(DT_PhysBox::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_PhysBoxMultiplayer::ignored>(DT_PhysBoxMultiplayer::ignored*)::g_SendProps
 D int ServerClassInit<DT_PhysBoxMultiplayer::ignored>(DT_PhysBoxMultiplayer::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_PhysMagnet::ignored>(DT_PhysMagnet::ignored*)::g_SendProps
 D int ServerClassInit<DT_PhysMagnet::ignored>(DT_PhysMagnet::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_PhysicsProp::ignored>(DT_PhysicsProp::ignored*)::g_SendProps
 D int ServerClassInit<DT_PhysicsProp::ignored>(DT_PhysicsProp::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_PipeBomb::ignored>(DT_PipeBomb::ignored*)::g_SendProps
 D int ServerClassInit<DT_PipeBomb::ignored>(DT_PipeBomb::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_PipeBombProjectile::ignored>(DT_PipeBombProjectile::ignored*)::g_SendProps
 D int ServerClassInit<DT_PipeBombProjectile::ignored>(DT_PipeBombProjectile::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Pistol::ignored>(DT_Pistol::ignored*)::g_SendProps
 D int ServerClassInit<DT_Pistol::ignored>(DT_Pistol::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Plasma::ignored>(DT_Plasma::ignored*)::g_SendProps
 D int ServerClassInit<DT_Plasma::ignored>(DT_Plasma::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_PlayerResource::ignored>(DT_PlayerResource::ignored*)::g_SendProps
 D int ServerClassInit<DT_PlayerResource::ignored>(DT_PlayerResource::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_PlayerState::ignored>(DT_PlayerState::ignored*)::g_SendProps
 D int ServerClassInit<DT_PlayerState::ignored>(DT_PlayerState::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_PointCommentaryNode::ignored>(DT_PointCommentaryNode::ignored*)::g_SendProps
 D int ServerClassInit<DT_PointCommentaryNode::ignored>(DT_PointCommentaryNode::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_PoseController::ignored>(DT_PoseController::ignored*)::g_SendProps
 D int ServerClassInit<DT_PoseController::ignored>(DT_PoseController::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_PostProcessController::ignored>(DT_PostProcessController::ignored*)::g_SendProps
 D int ServerClassInit<DT_PostProcessController::ignored>(DT_PostProcessController::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Precipitation::ignored>(DT_Precipitation::ignored*)::g_SendProps
 D int ServerClassInit<DT_Precipitation::ignored>(DT_Precipitation::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_PrecipitationBlocker::ignored>(DT_PrecipitationBlocker::ignored*)::g_SendProps
 D int ServerClassInit<DT_PrecipitationBlocker::ignored>(DT_PrecipitationBlocker::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_PredictedViewModel::ignored>(DT_PredictedViewModel::ignored*)::g_SendProps
 D int ServerClassInit<DT_PredictedViewModel::ignored>(DT_PredictedViewModel::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_PropDoorRotatingCheckpoint::ignored>(DT_PropDoorRotatingCheckpoint::ignored*)::g_SendProps
 D int ServerClassInit<DT_PropDoorRotatingCheckpoint::ignored>(DT_PropDoorRotatingCheckpoint::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_PropGlowingObject::ignored>(DT_PropGlowingObject::ignored*)::g_SendProps
 D int ServerClassInit<DT_PropGlowingObject::ignored>(DT_PropGlowingObject::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_PropHealthCabinet::ignored>(DT_PropHealthCabinet::ignored*)::g_SendProps
 D int ServerClassInit<DT_PropHealthCabinet::ignored>(DT_PropHealthCabinet::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_PropMinigun::ignored>(DT_PropMinigun::ignored*)::g_SendProps
 D int ServerClassInit<DT_PropMinigun::ignored>(DT_PropMinigun::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_PropMountedGun::ignored>(DT_PropMountedGun::ignored*)::g_SendProps
 D int ServerClassInit<DT_PropMountedGun::ignored>(DT_PropMountedGun::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_PropVehicleDriveable::ignored>(DT_PropVehicleDriveable::ignored*)::g_SendProps
 D int ServerClassInit<DT_PropVehicleDriveable::ignored>(DT_PropVehicleDriveable::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_PropaneTank::ignored>(DT_PropaneTank::ignored*)::g_SendProps
 D int ServerClassInit<DT_PropaneTank::ignored>(DT_PropaneTank::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_ProxyToggle::ignored>(DT_ProxyToggle::ignored*)::g_SendProps
 D int ServerClassInit<DT_ProxyToggle::ignored>(DT_ProxyToggle::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_ProxyToggle_ProxiedData::ignored>(DT_ProxyToggle_ProxiedData::ignored*)::g_SendProps
 D int ServerClassInit<DT_ProxyToggle_ProxiedData::ignored>(DT_ProxyToggle_ProxiedData::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_PumpShotgun::ignored>(DT_PumpShotgun::ignored*)::g_SendProps
 D int ServerClassInit<DT_PumpShotgun::ignored>(DT_PumpShotgun::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_QuadraticBeam::ignored>(DT_QuadraticBeam::ignored*)::g_SendProps
 D int ServerClassInit<DT_QuadraticBeam::ignored>(DT_QuadraticBeam::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Ragdoll::ignored>(DT_Ragdoll::ignored*)::g_SendProps
 D int ServerClassInit<DT_Ragdoll::ignored>(DT_Ragdoll::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_RagdollManager::ignored>(DT_RagdollManager::ignored*)::g_SendProps
 D int ServerClassInit<DT_RagdollManager::ignored>(DT_RagdollManager::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Ragdoll_Attached::ignored>(DT_Ragdoll_Attached::ignored*)::g_SendProps
 D int ServerClassInit<DT_Ragdoll_Attached::ignored>(DT_Ragdoll_Attached::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_RocketTrail::ignored>(DT_RocketTrail::ignored*)::g_SendProps
 D int ServerClassInit<DT_RocketTrail::ignored>(DT_RocketTrail::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_RopeKeyframe::ignored>(DT_RopeKeyframe::ignored*)::g_SendProps
 D int ServerClassInit<DT_RopeKeyframe::ignored>(DT_RopeKeyframe::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_SceneEntity::ignored>(DT_SceneEntity::ignored*)::g_SendProps
 D int ServerClassInit<DT_SceneEntity::ignored>(DT_SceneEntity::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_ServerAnimationData::ignored>(DT_ServerAnimationData::ignored*)::g_SendProps
 D int ServerClassInit<DT_ServerAnimationData::ignored>(DT_ServerAnimationData::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_ShadowControl::ignored>(DT_ShadowControl::ignored*)::g_SendProps
 D int ServerClassInit<DT_ShadowControl::ignored>(DT_ShadowControl::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_SlideshowDisplay::ignored>(DT_SlideshowDisplay::ignored*)::g_SendProps
 D int ServerClassInit<DT_SlideshowDisplay::ignored>(DT_SlideshowDisplay::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_SmokeStack::ignored>(DT_SmokeStack::ignored*)::g_SendProps
 D int ServerClassInit<DT_SmokeStack::ignored>(DT_SmokeStack::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_SmokeTrail::ignored>(DT_SmokeTrail::ignored*)::g_SendProps
 D int ServerClassInit<DT_SmokeTrail::ignored>(DT_SmokeTrail::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Smoker::ignored>(DT_Smoker::ignored*)::g_SendProps
 D int ServerClassInit<DT_Smoker::ignored>(DT_Smoker::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_SniperRifle::ignored>(DT_SniperRifle::ignored*)::g_SendProps
 D int ServerClassInit<DT_SniperRifle::ignored>(DT_SniperRifle::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_SporeExplosion::ignored>(DT_SporeExplosion::ignored*)::g_SendProps
 D int ServerClassInit<DT_SporeExplosion::ignored>(DT_SporeExplosion::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_SporeTrail::ignored>(DT_SporeTrail::ignored*)::g_SendProps
 D int ServerClassInit<DT_SporeTrail::ignored>(DT_SporeTrail::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_SpotlightEnd::ignored>(DT_SpotlightEnd::ignored*)::g_SendProps
 D int ServerClassInit<DT_SpotlightEnd::ignored>(DT_SpotlightEnd::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Sprite::ignored>(DT_Sprite::ignored*)::g_SendProps
 D int ServerClassInit<DT_Sprite::ignored>(DT_Sprite::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_SpriteOriented::ignored>(DT_SpriteOriented::ignored*)::g_SendProps
 D int ServerClassInit<DT_SpriteOriented::ignored>(DT_SpriteOriented::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_SpriteTrail::ignored>(DT_SpriteTrail::ignored*)::g_SendProps
 D int ServerClassInit<DT_SpriteTrail::ignored>(DT_SpriteTrail::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_SteamJet::ignored>(DT_SteamJet::ignored*)::g_SendProps
 D int ServerClassInit<DT_SteamJet::ignored>(DT_SteamJet::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_SubMachinegun::ignored>(DT_SubMachinegun::ignored*)::g_SendProps
 D int ServerClassInit<DT_SubMachinegun::ignored>(DT_SubMachinegun::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Sun::ignored>(DT_Sun::ignored*)::g_SendProps
 D int ServerClassInit<DT_Sun::ignored>(DT_Sun::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_SurvivorBot::ignored>(DT_SurvivorBot::ignored*)::g_SendProps
 D int ServerClassInit<DT_SurvivorBot::ignored>(DT_SurvivorBot::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_SurvivorPosition::ignored>(DT_SurvivorPosition::ignored*)::g_SendProps
 D int ServerClassInit<DT_SurvivorPosition::ignored>(DT_SurvivorPosition::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_SurvivorRescue::ignored>(DT_SurvivorRescue::ignored*)::g_SendProps
 D int ServerClassInit<DT_SurvivorRescue::ignored>(DT_SurvivorRescue::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEArmorRicochet::ignored>(DT_TEArmorRicochet::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEArmorRicochet::ignored>(DT_TEArmorRicochet::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEBSPDecal::ignored>(DT_TEBSPDecal::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEBSPDecal::ignored>(DT_TEBSPDecal::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEBeamEntPoint::ignored>(DT_TEBeamEntPoint::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEBeamEntPoint::ignored>(DT_TEBeamEntPoint::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEBeamEnts::ignored>(DT_TEBeamEnts::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEBeamEnts::ignored>(DT_TEBeamEnts::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEBeamFollow::ignored>(DT_TEBeamFollow::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEBeamFollow::ignored>(DT_TEBeamFollow::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEBeamLaser::ignored>(DT_TEBeamLaser::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEBeamLaser::ignored>(DT_TEBeamLaser::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEBeamPoints::ignored>(DT_TEBeamPoints::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEBeamPoints::ignored>(DT_TEBeamPoints::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEBeamRing::ignored>(DT_TEBeamRing::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEBeamRing::ignored>(DT_TEBeamRing::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEBeamRingPoint::ignored>(DT_TEBeamRingPoint::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEBeamRingPoint::ignored>(DT_TEBeamRingPoint::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEBeamSpline::ignored>(DT_TEBeamSpline::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEBeamSpline::ignored>(DT_TEBeamSpline::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEBloodSprite::ignored>(DT_TEBloodSprite::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEBloodSprite::ignored>(DT_TEBloodSprite::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEBloodStream::ignored>(DT_TEBloodStream::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEBloodStream::ignored>(DT_TEBloodStream::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEBreakModel::ignored>(DT_TEBreakModel::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEBreakModel::ignored>(DT_TEBreakModel::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEBubbleTrail::ignored>(DT_TEBubbleTrail::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEBubbleTrail::ignored>(DT_TEBubbleTrail::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEBubbles::ignored>(DT_TEBubbles::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEBubbles::ignored>(DT_TEBubbles::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEBullets::ignored>(DT_TEBullets::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEBullets::ignored>(DT_TEBullets::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEClientProjectile::ignored>(DT_TEClientProjectile::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEClientProjectile::ignored>(DT_TEClientProjectile::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEDecal::ignored>(DT_TEDecal::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEDecal::ignored>(DT_TEDecal::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEDust::ignored>(DT_TEDust::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEDust::ignored>(DT_TEDust::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEDynamicLight::ignored>(DT_TEDynamicLight::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEDynamicLight::ignored>(DT_TEDynamicLight::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEEffectDispatch::ignored>(DT_TEEffectDispatch::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEEffectDispatch::ignored>(DT_TEEffectDispatch::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEEnergySplash::ignored>(DT_TEEnergySplash::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEEnergySplash::ignored>(DT_TEEnergySplash::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEExplosion::ignored>(DT_TEExplosion::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEExplosion::ignored>(DT_TEExplosion::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEFizz::ignored>(DT_TEFizz::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEFizz::ignored>(DT_TEFizz::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEFootprintDecal::ignored>(DT_TEFootprintDecal::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEFootprintDecal::ignored>(DT_TEFootprintDecal::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEFoundryHelpers::ignored>(DT_TEFoundryHelpers::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEFoundryHelpers::ignored>(DT_TEFoundryHelpers::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEGaussExplosion::ignored>(DT_TEGaussExplosion::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEGaussExplosion::ignored>(DT_TEGaussExplosion::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEGlowSprite::ignored>(DT_TEGlowSprite::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEGlowSprite::ignored>(DT_TEGlowSprite::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEImpact::ignored>(DT_TEImpact::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEImpact::ignored>(DT_TEImpact::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEKillPlayerAttachments::ignored>(DT_TEKillPlayerAttachments::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEKillPlayerAttachments::ignored>(DT_TEKillPlayerAttachments::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TELargeFunnel::ignored>(DT_TELargeFunnel::ignored*)::g_SendProps
 D int ServerClassInit<DT_TELargeFunnel::ignored>(DT_TELargeFunnel::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEMetalSparks::ignored>(DT_TEMetalSparks::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEMetalSparks::ignored>(DT_TEMetalSparks::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEMuzzleFlash::ignored>(DT_TEMuzzleFlash::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEMuzzleFlash::ignored>(DT_TEMuzzleFlash::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEParticleSystem::ignored>(DT_TEParticleSystem::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEParticleSystem::ignored>(DT_TEParticleSystem::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEPhysicsProp::ignored>(DT_TEPhysicsProp::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEPhysicsProp::ignored>(DT_TEPhysicsProp::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEPlayerAnimEvent::ignored>(DT_TEPlayerAnimEvent::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEPlayerAnimEvent::ignored>(DT_TEPlayerAnimEvent::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEPlayerDecal::ignored>(DT_TEPlayerDecal::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEPlayerDecal::ignored>(DT_TEPlayerDecal::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEProjectedDecal::ignored>(DT_TEProjectedDecal::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEProjectedDecal::ignored>(DT_TEProjectedDecal::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEShatterSurface::ignored>(DT_TEShatterSurface::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEShatterSurface::ignored>(DT_TEShatterSurface::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEShowLine::ignored>(DT_TEShowLine::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEShowLine::ignored>(DT_TEShowLine::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TESmoke::ignored>(DT_TESmoke::ignored*)::g_SendProps
 D int ServerClassInit<DT_TESmoke::ignored>(DT_TESmoke::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TESparks::ignored>(DT_TESparks::ignored*)::g_SendProps
 D int ServerClassInit<DT_TESparks::ignored>(DT_TESparks::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TESprite::ignored>(DT_TESprite::ignored*)::g_SendProps
 D int ServerClassInit<DT_TESprite::ignored>(DT_TESprite::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TESpriteSpray::ignored>(DT_TESpriteSpray::ignored*)::g_SendProps
 D int ServerClassInit<DT_TESpriteSpray::ignored>(DT_TESpriteSpray::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TETutorLesson::ignored>(DT_TETutorLesson::ignored*)::g_SendProps
 D int ServerClassInit<DT_TETutorLesson::ignored>(DT_TETutorLesson::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEWorldDecal::ignored>(DT_TEWorldDecal::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEWorldDecal::ignored>(DT_TEWorldDecal::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Tank::ignored>(DT_Tank::ignored*)::g_SendProps
 D int ServerClassInit<DT_Tank::ignored>(DT_Tank::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Team::ignored>(DT_Team::ignored*)::g_SendProps
 D int ServerClassInit<DT_Team::ignored>(DT_Team::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TeamplayRoundBasedRules::ignored>(DT_TeamplayRoundBasedRules::ignored*)::g_SendProps
 D int ServerClassInit<DT_TeamplayRoundBasedRules::ignored>(DT_TeamplayRoundBasedRules::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TeamplayRoundBasedRulesProxy::ignored>(DT_TeamplayRoundBasedRulesProxy::ignored*)::g_SendProps
 D int ServerClassInit<DT_TeamplayRoundBasedRulesProxy::ignored>(DT_TeamplayRoundBasedRulesProxy::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TerrorGameRules::ignored>(DT_TerrorGameRules::ignored*)::g_SendProps
 D int ServerClassInit<DT_TerrorGameRules::ignored>(DT_TerrorGameRules::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TerrorGameRulesProxy::ignored>(DT_TerrorGameRulesProxy::ignored*)::g_SendProps
 D int ServerClassInit<DT_TerrorGameRulesProxy::ignored>(DT_TerrorGameRulesProxy::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TerrorGun::ignored>(DT_TerrorGun::ignored*)::g_SendProps
 D int ServerClassInit<DT_TerrorGun::ignored>(DT_TerrorGun::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TerrorLocalPlayerExclusive::ignored>(DT_TerrorLocalPlayerExclusive::ignored*)::g_SendProps
 D int ServerClassInit<DT_TerrorLocalPlayerExclusive::ignored>(DT_TerrorLocalPlayerExclusive::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TerrorPlayer::ignored>(DT_TerrorPlayer::ignored*)::g_SendProps
 D int ServerClassInit<DT_TerrorPlayer::ignored>(DT_TerrorPlayer::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TerrorPlayerResource::ignored>(DT_TerrorPlayerResource::ignored*)::g_SendProps
 D int ServerClassInit<DT_TerrorPlayerResource::ignored>(DT_TerrorPlayerResource::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TerrorViewModel::ignored>(DT_TerrorViewModel::ignored*)::g_SendProps
 D int ServerClassInit<DT_TerrorViewModel::ignored>(DT_TerrorViewModel::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TerrorWeapon::ignored>(DT_TerrorWeapon::ignored*)::g_SendProps
 D int ServerClassInit<DT_TerrorWeapon::ignored>(DT_TerrorWeapon::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TestTraceline::ignored>(DT_TestTraceline::ignored*)::g_SendProps
 D int ServerClassInit<DT_TestTraceline::ignored>(DT_TestTraceline::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TransitioningPlayer::ignored>(DT_TransitioningPlayer::ignored*)::g_SendProps
 D int ServerClassInit<DT_TransitioningPlayer::ignored>(DT_TransitioningPlayer::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TriggerPlayerMovement::ignored>(DT_TriggerPlayerMovement::ignored*)::g_SendProps
 D int ServerClassInit<DT_TriggerPlayerMovement::ignored>(DT_TriggerPlayerMovement::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_VGuiScreen::ignored>(DT_VGuiScreen::ignored*)::g_SendProps
 D int ServerClassInit<DT_VGuiScreen::ignored>(DT_VGuiScreen::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_VoteController::ignored>(DT_VoteController::ignored*)::g_SendProps
 D int ServerClassInit<DT_VoteController::ignored>(DT_VoteController::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WORLD::ignored>(DT_WORLD::ignored*)::g_SendProps
 D int ServerClassInit<DT_WORLD::ignored>(DT_WORLD::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WaterBullet::ignored>(DT_WaterBullet::ignored*)::g_SendProps
 D int ServerClassInit<DT_WaterBullet::ignored>(DT_WaterBullet::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WaterLODControl::ignored>(DT_WaterLODControl::ignored*)::g_SendProps
 D int ServerClassInit<DT_WaterLODControl::ignored>(DT_WaterLODControl::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WeaponAmmoSpawn::ignored>(DT_WeaponAmmoSpawn::ignored*)::g_SendProps
 D int ServerClassInit<DT_WeaponAmmoSpawn::ignored>(DT_WeaponAmmoSpawn::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WeaponBoomerClaw::ignored>(DT_WeaponBoomerClaw::ignored*)::g_SendProps
 D int ServerClassInit<DT_WeaponBoomerClaw::ignored>(DT_WeaponBoomerClaw::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WeaponCSBase::ignored>(DT_WeaponCSBase::ignored*)::g_SendProps
 D int ServerClassInit<DT_WeaponCSBase::ignored>(DT_WeaponCSBase::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WeaponCSBaseGun::ignored>(DT_WeaponCSBaseGun::ignored*)::g_SendProps
 D int ServerClassInit<DT_WeaponCSBaseGun::ignored>(DT_WeaponCSBaseGun::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WeaponClaw::ignored>(DT_WeaponClaw::ignored*)::g_SendProps
 D int ServerClassInit<DT_WeaponClaw::ignored>(DT_WeaponClaw::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WeaponFirstAidKit::ignored>(DT_WeaponFirstAidKit::ignored*)::g_SendProps
 D int ServerClassInit<DT_WeaponFirstAidKit::ignored>(DT_WeaponFirstAidKit::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WeaponHunterClaw::ignored>(DT_WeaponHunterClaw::ignored*)::g_SendProps
 D int ServerClassInit<DT_WeaponHunterClaw::ignored>(DT_WeaponHunterClaw::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WeaponPainPills::ignored>(DT_WeaponPainPills::ignored*)::g_SendProps
 D int ServerClassInit<DT_WeaponPainPills::ignored>(DT_WeaponPainPills::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WeaponSmokerClaw::ignored>(DT_WeaponSmokerClaw::ignored*)::g_SendProps
 D int ServerClassInit<DT_WeaponSmokerClaw::ignored>(DT_WeaponSmokerClaw::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WeaponSpawn::ignored>(DT_WeaponSpawn::ignored*)::g_SendProps
 D int ServerClassInit<DT_WeaponSpawn::ignored>(DT_WeaponSpawn::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WeaponTankClaw::ignored>(DT_WeaponTankClaw::ignored*)::g_SendProps
 D int ServerClassInit<DT_WeaponTankClaw::ignored>(DT_WeaponTankClaw::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Witch::ignored>(DT_Witch::ignored*)::g_SendProps
 D int ServerClassInit<DT_Witch::ignored>(DT_Witch::ignored*)::g_pSendTableName
 D lagcompensation
 D locksound_t::m_DataMap
 D m_nDebugOverlayIndex
 D magnetted_objects_t::m_DataMap
 D modifiedconvars_t::m_DataMap
 D pFGDPropData
 D pSoundStateNames
 D pValidStatLevels
 D pWeaponSoundCategories
 D physfollower_t::m_DataMap
 D physgametrace
 D predef_flexcontroller_names
 D predef_flexcontroller_values
 D rgdpvpreset
 D sPropdataInteractionSections
 D sTeamNames
 D s_ElementNames
 D s_PluginCheck
 D s_pDebrisContext
 D s_pFadeOutContext
 D sky3dparams_t::m_DataMap
 D te
 D template_t::m_DataMap
 D thinkcontextFuncs
 D thinkfunc_t::m_DataMap
 D typeinfo for Action<Boomer>
 D typeinfo for Action<Hunter>
 D typeinfo for Action<Infected>
 D typeinfo for Action<Smoker>
 D typeinfo for Action<SurvivorBot>
 D typeinfo for Action<Tank>
 D typeinfo for Behavior<Boomer>
 D typeinfo for Behavior<Hunter>
 D typeinfo for Behavior<Infected>
 D typeinfo for Behavior<Smoker>
 D typeinfo for Behavior<SurvivorBot>
 D typeinfo for Behavior<Tank>
 D typeinfo for BehaviorBackUp<SurvivorBot>
 D typeinfo for BehaviorMoveTo<Boomer, InfectedPathCost>
 D typeinfo for BehaviorMoveTo<Hunter, InfectedPathCost>
 D typeinfo for BehaviorMoveTo<Smoker, InfectedPathCost>
 D typeinfo for BehaviorMoveTo<Tank, InfectedPathCost>
 D typeinfo for Boomer
 D typeinfo for BoomerAttack
 D typeinfo for BoomerBehavior
 D typeinfo for BoomerFilter
 D typeinfo for BoomerHide
 D typeinfo for BoomerIntention
 D typeinfo for BoomerLocomotion
 D typeinfo for BoomerRetreatToCover
 D typeinfo for BoomerVomitOnVictim
 D typeinfo for BossZombiePlayerBot
 D typeinfo for CAISound
 D typeinfo for CAI_ChangeHintGroup
 D typeinfo for CAI_ChangeTarget
 D typeinfo for CAI_Expresser
 D typeinfo for CAI_ExpresserHost<CBasePlayer>
 D typeinfo for CAI_ExpresserHost<CFlexExpresserShim>
 D typeinfo for CAI_ExpresserSink
 D typeinfo for CAI_ExpresserWithFollowup
 D typeinfo for CAbandonmentAwardTemplate
 D typeinfo for CAbusiveBehaviorAwardTemplate
 D typeinfo for CAchievementMgr
 D typeinfo for CAchievementMsgHandler
 D typeinfo for CAchievementSaveRestoreBlockHandler
 D typeinfo for CActivityDataOps
 D typeinfo for CAimTargetManager
 D typeinfo for CAmbientGeneric
 D typeinfo for CAmbushAwardTemplate
 D typeinfo for CAmmoDef
 D typeinfo for CAnchorList
 D typeinfo for CAreaPortal
 D typeinfo for CAssaultRifle
 D typeinfo for CAutoGameSystem
 D typeinfo for CAutoGameSystemPerFrame
 D typeinfo for CAutoShotgun
 D typeinfo for CAwardTemplate
 D typeinfo for CBaseAbility
 D typeinfo for CBaseAbility::NetworkVar_m_activationSupressedTimer
 D typeinfo for CBaseAbility::NetworkVar_m_nextActivationTimer
 D typeinfo for CBaseAchievement
 D typeinfo for CBaseAnimating
 D typeinfo for CBaseAnimatingOverlay
 D typeinfo for CBaseAppSystem<IParticleSystemQuery>
 D typeinfo for CBaseButton
 D typeinfo for CBaseCSGrenade
 D typeinfo for CBaseCSGrenadeProjectile
 D typeinfo for CBaseCombatCharacter
 D typeinfo for CBaseCombatWeapon
 D typeinfo for CBaseDMStart
 D typeinfo for CBaseDoor
 D typeinfo for CBaseEntity
 D typeinfo for CBaseEntity::NetworkVar_m_Collision
 D typeinfo for CBaseEntityClassList
 D typeinfo for CBaseEntityList
 D typeinfo for CBaseFilter
 D typeinfo for CBaseFire
 D typeinfo for CBaseFlex
 D typeinfo for CBaseGameStats
 D typeinfo for CBaseGameStats_Driver
 D typeinfo for CBaseGameSystem
 D typeinfo for CBaseGameSystemPerFrame
 D typeinfo for CBaseGrenade
 D typeinfo for CBaseIssue
 D typeinfo for CBaseMountedWeapon
 D typeinfo for CBaseMoveBehavior
 D typeinfo for CBaseMultiplayerPlayer
 D typeinfo for CBaseParticleEntity
 D typeinfo for CBasePlatTrain
 D typeinfo for CBasePlayer
 D typeinfo for CBasePlayer::NetworkVar_m_Local
 D typeinfo for CBasePlayer::NetworkVar_m_PlayerFog
 D typeinfo for CBasePlayer::NetworkVar_pl
 D typeinfo for CBasePlayerAnimState
 D typeinfo for CBaseProp
 D typeinfo for CBasePropDoor
 D typeinfo for CBaseResourcePrecacher
 D typeinfo for CBaseServerVehicle
 D typeinfo for CBaseShotgun
 D typeinfo for CBaseTempEntity
 D typeinfo for CBaseTerrorIssue
 D typeinfo for CBaseToggle
 D typeinfo for CBaseTrigger
 D typeinfo for CBaseVPhysicsTrigger
 D typeinfo for CBaseViewModel
 D typeinfo for CBeam
 D typeinfo for CBeamSpotlight
 D typeinfo for CBlood
 D typeinfo for CBloodSplat
 D typeinfo for CBoneFollower
 D typeinfo for CBoomerBlunderAwardTemplate
 D typeinfo for CBoomerClaw
 D typeinfo for CBoomerComboAwardTemplate
 D typeinfo for CBotCmd
 D typeinfo for CBotDoorEnumerator
 D typeinfo for CBreakModelsPrecached
 D typeinfo for CBreakParser
 D typeinfo for CBreakable
 D typeinfo for CBreakableProp
 D typeinfo for CBreakableSurface
 D typeinfo for CBroadcastRecipientFilter
 D typeinfo for CBubbling
 D typeinfo for CBulletsTraceFilter
 D typeinfo for CButtonTimed
 D typeinfo for CCSGameMovement
 D typeinfo for CCSGameRules
 D typeinfo for CCSGameRulesProxy
 D typeinfo for CCSHLTVDirector
 D typeinfo for CCSPlayer
 D typeinfo for CCSPlayerAnimState
 D typeinfo for CCSPlayerMove
 D typeinfo for CCSRagdoll
 D typeinfo for CCSTeam
 D typeinfo for CCSWeaponInfo
 D typeinfo for CCallback<CTerrorGameRules, GSGameplayStats_t, true>
 D typeinfo for CCallback<CTerrorPlayer, GSClientAchievementStatus_t, true>
 D typeinfo for CCallbackBase
 D typeinfo for CCarGlassProp
 D typeinfo for CCarProp
 D typeinfo for CCarriedProp
 D typeinfo for CChangeAllTalkIssue
 D typeinfo for CChangeChapterIssue
 D typeinfo for CChangeDifficultyIssue
 D typeinfo for CChangeLevel
 D typeinfo for CChangeMissionIssue
 D typeinfo for CCheckClient
 D typeinfo for CCheckpointCompleteAwardTemplate
 D typeinfo for CChildOperatorDefinition
 D typeinfo for CChoreoEvent
 D typeinfo for CChoreoScene
 D typeinfo for CChoreoStringPool
 D typeinfo for CClassPtrSaveRestoreOps
 D typeinfo for CClaw
 D typeinfo for CClawHitAwardTemplate
 D typeinfo for CCleanupDefaultRelationShips
 D typeinfo for CClientPath
 D typeinfo for CCollisionEvent
 D typeinfo for CCollisionProperty
 D typeinfo for CColorCorrection
 D typeinfo for CColorCorrectionSystem
 D typeinfo for CColorCorrectionVolume
 D typeinfo for CCombatCharVisCache
 D typeinfo for CCommentaryAuto
 D typeinfo for CCommentaryDummy
 D typeinfo for CCommentarySystem
 D typeinfo for CCommentaryViewPosition
 D typeinfo for CCommentaryZombieSpawner
 D typeinfo for CCommentary_SaveRestoreBlockHandler
 D typeinfo for CConceptHistoriesDataOps
 D typeinfo for CConstantForceController
 D typeinfo for CConstraintAnchor
 D typeinfo for CCopyRecipientFilter
 D typeinfo for CDarkMissionAwardTemplate
 D typeinfo for CDataManager<CBoneCache, bonecacheparams_t, CBoneCache*, CThreadFastMutex>
 D typeinfo for CDataManagerBase
 D typeinfo for CDataObjectAccessSystem
 D typeinfo for CDeathFallCamera
 D typeinfo for CDebugHistory
 D typeinfo for CDecal
 D typeinfo for CDecalEmitterSystem
 D typeinfo for CDefSaveRestoreBlockHandler
 D typeinfo for CDefSaveRestoreOps
 D typeinfo for CDefaultAccessor
 D typeinfo for CDefaultParticleSystemQuery
 D typeinfo for CDefaultPlayerPickupVPhysics
 D typeinfo for CDefaultResponseSystem
 D typeinfo for CDefaultResponseSystemSaveRestoreBlockHandler
 D typeinfo for CDetailBlocker
 D typeinfo for CDevShotSystem
 D typeinfo for CDirtySpatialPartitionEntityList
 D typeinfo for CDoomsdayAwardTemplate
 D typeinfo for CDynamicLight
 D typeinfo for CDynamicProp
 D typeinfo for CEarlyMourningAwardTemplate
 D typeinfo for CEffectsServer
 D typeinfo for CEmbers
 D typeinfo for CEmptyConVar
 D typeinfo for CEnableMotionFixup
 D typeinfo for CEntFireAutoCompletionFunctor
 D typeinfo for CEntityBlocker
 D typeinfo for CEntityClassList<CPhysicsNPCSolver>
 D typeinfo for CEntityClassList<CSkyCamera>
 D typeinfo for CEntityDataInstantiator<CWatcherList>
 D typeinfo for CEntityDataInstantiator<ModelWidthScale>
 D typeinfo for CEntityDataInstantiator<StepSimulationData>
 D typeinfo for CEntityDataInstantiator<groundlink_t>
 D typeinfo for CEntityDataInstantiator<physicspushlist_t>
 D typeinfo for CEntityDataInstantiator<touchlink_t>
 D typeinfo for CEntityDataInstantiator<vphysicsupdateai_t>
 D typeinfo for CEntityDissolve
 D typeinfo for CEntityFactory<Boomer>
 D typeinfo for CEntityFactory<CAISound>
 D typeinfo for CEntityFactory<CAI_ChangeHintGroup>
 D typeinfo for CEntityFactory<CAI_ChangeTarget>
 D typeinfo for CEntityFactory<CAmbientGeneric>
 D typeinfo for CEntityFactory<CAreaPortal>
 D typeinfo for CEntityFactory<CAssaultRifle>
 D typeinfo for CEntityFactory<CAutoShotgun>
 D typeinfo for CEntityFactory<CBaseButton>
 D typeinfo for CEntityFactory<CBaseCSGrenade>
 D typeinfo for CEntityFactory<CBaseDMStart>
 D typeinfo for CEntityFactory<CBaseDoor>
 D typeinfo for CEntityFactory<CBaseEntity>
 D typeinfo for CEntityFactory<CBaseFilter>
 D typeinfo for CEntityFactory<CBaseFlex>
 D typeinfo for CEntityFactory<CBaseGrenade>
 D typeinfo for CEntityFactory<CBaseMoveBehavior>
 D typeinfo for CEntityFactory<CBaseTrigger>
 D typeinfo for CEntityFactory<CBaseViewModel>
 D typeinfo for CEntityFactory<CBeam>
 D typeinfo for CEntityFactory<CBeamSpotlight>
 D typeinfo for CEntityFactory<CBlood>
 D typeinfo for CEntityFactory<CBoneFollower>
 D typeinfo for CEntityFactory<CBoomerClaw>
 D typeinfo for CEntityFactory<CBreakable>
 D typeinfo for CEntityFactory<CBreakableSurface>
 D typeinfo for CEntityFactory<CBubbling>
 D typeinfo for CEntityFactory<CButtonTimed>
 D typeinfo for CEntityFactory<CCSGameRulesProxy>
 D typeinfo for CEntityFactory<CCSRagdoll>
 D typeinfo for CEntityFactory<CCSTeam>
 D typeinfo for CEntityFactory<CCarGlassProp>
 D typeinfo for CEntityFactory<CCarProp>
 D typeinfo for CEntityFactory<CClientPath>
 D typeinfo for CEntityFactory<CColorCorrection>
 D typeinfo for CEntityFactory<CColorCorrectionVolume>
 D typeinfo for CEntityFactory<CCommentaryAuto>
 D typeinfo for CEntityFactory<CCommentaryDummy>
 D typeinfo for CEntityFactory<CCommentaryViewPosition>
 D typeinfo for CEntityFactory<CCommentaryZombieSpawner>
 D typeinfo for CEntityFactory<CConstraintAnchor>
 D typeinfo for CEntityFactory<CDeathFallCamera>
 D typeinfo for CEntityFactory<CDebugHistory>
 D typeinfo for CEntityFactory<CDecal>
 D typeinfo for CEntityFactory<CDetailBlocker>
 D typeinfo for CEntityFactory<CDynamicLight>
 D typeinfo for CEntityFactory<CDynamicProp>
 D typeinfo for CEntityFactory<CEmbers>
 D typeinfo for CEntityFactory<CEnableMotionFixup>
 D typeinfo for CEntityFactory<CEntityBlocker>
 D typeinfo for CEntityFactory<CEntityDissolve>
 D typeinfo for CEntityFactory<CEntityFlame>
 D typeinfo for CEntityFactory<CEntityParticleTrail>
 D typeinfo for CEntityFactory<CEnvBeam>
 D typeinfo for CEntityFactory<CEnvBeverage>
 D typeinfo for CEntityFactory<CEnvCredits>
 D typeinfo for CEntityFactory<CEnvDOFController>
 D typeinfo for CEntityFactory<CEnvDetailController>
 D typeinfo for CEntityFactory<CEnvDustPuff>
 D typeinfo for CEntityFactory<CEnvEffectsScript>
 D typeinfo for CEntityFactory<CEnvEntityMaker>
 D typeinfo for CEntityFactory<CEnvExplosion>
 D typeinfo for CEntityFactory<CEnvFade>
 D typeinfo for CEntityFactory<CEnvFireSensor>
 D typeinfo for CEntityFactory<CEnvFireSource>
 D typeinfo for CEntityFactory<CEnvFunnel>
 D typeinfo for CEntityFactory<CEnvGlobal>
 D typeinfo for CEntityFactory<CEnvGunfire>
 D typeinfo for CEntityFactory<CEnvHudHint>
 D typeinfo for CEntityFactory<CEnvLaser>
 D typeinfo for CEntityFactory<CEnvLight>
 D typeinfo for CEntityFactory<CEnvMicrophone>
 D typeinfo for CEntityFactory<CEnvMuzzleFlash>
 D typeinfo for CEntityFactory<CEnvParticleScript>
 D typeinfo for CEntityFactory<CEnvPlayerSurfaceTrigger>
 D typeinfo for CEntityFactory<CEnvProjectedTexture>
 D typeinfo for CEntityFactory<CEnvQuadraticBeam>
 D typeinfo for CEntityFactory<CEnvRockLauncher>
 D typeinfo for CEntityFactory<CEnvScreenEffect>
 D typeinfo for CEntityFactory<CEnvScreenOverlay>
 D typeinfo for CEntityFactory<CEnvShake>
 D typeinfo for CEntityFactory<CEnvShooter>
 D typeinfo for CEntityFactory<CEnvSoundscape>
 D typeinfo for CEntityFactory<CEnvSoundscapeProxy>
 D typeinfo for CEntityFactory<CEnvSoundscapeTriggerable>
 D typeinfo for CEntityFactory<CEnvSpark>
 D typeinfo for CEntityFactory<CEnvSplash>
 D typeinfo for CEntityFactory<CEnvTonemapController>
 D typeinfo for CEntityFactory<CEnvTracer>
 D typeinfo for CEntityFactory<CEnvViewPunch>
 D typeinfo for CEntityFactory<CEnvWeaponfire>
 D typeinfo for CEntityFactory<CEnvWind>
 D typeinfo for CEntityFactory<CEnvZoom>
 D typeinfo for CEntityFactory<CEnv_Blocker>
 D typeinfo for CEntityFactory<CEscapeRoute>
 D typeinfo for CEntityFactory<CEventQueueSaveLoadProxy>
 D typeinfo for CEntityFactory<CFilterClass>
 D typeinfo for CEntityFactory<CFilterContext>
 D typeinfo for CEntityFactory<CFilterEnemy>
 D typeinfo for CEntityFactory<CFilterMassGreater>
 D typeinfo for CEntityFactory<CFilterModel>
 D typeinfo for CEntityFactory<CFilterMultiple>
 D typeinfo for CEntityFactory<CFilterName>
 D typeinfo for CEntityFactory<CFinaleTrigger>
 D typeinfo for CEntityFactory<CFire>
 D typeinfo for CEntityFactory<CFireSmoke>
 D typeinfo for CEntityFactory<CFireTrail>
 D typeinfo for CEntityFactory<CFirstAidKit>
 D typeinfo for CEntityFactory<CFish>
 D typeinfo for CEntityFactory<CFishPool>
 D typeinfo for CEntityFactory<CFlexExpresser>
 D typeinfo for CEntityFactory<CFogController>
 D typeinfo for CEntityFactory<CFogTrigger>
 D typeinfo for CEntityFactory<CFogVolume>
 D typeinfo for CEntityFactory<CFuelBarrelPiece>
 D typeinfo for CEntityFactory<CFuelBarrelProp>
 D typeinfo for CEntityFactory<CFuncAreaPortalWindow>
 D typeinfo for CEntityFactory<CFuncBrush>
 D typeinfo for CEntityFactory<CFuncConveyor>
 D typeinfo for CEntityFactory<CFuncElevator>
 D typeinfo for CEntityFactory<CFuncFireExtinguisher>
 D typeinfo for CEntityFactory<CFuncIllusionary>
 D typeinfo for CEntityFactory<CFuncLadder>
 D typeinfo for CEntityFactory<CFuncLadderEndPoint>
 D typeinfo for CEntityFactory<CFuncMoveLinear>
 D typeinfo for CEntityFactory<CFuncNavAttributeRegion>
 D typeinfo for CEntityFactory<CFuncNavBlocker>
 D typeinfo for CEntityFactory<CFuncNavObstruction>
 D typeinfo for CEntityFactory<CFuncNavStairsToggle>
 D typeinfo for CEntityFactory<CFuncOccluder>
 D typeinfo for CEntityFactory<CFuncPlat>
 D typeinfo for CEntityFactory<CFuncPlatRot>
 D typeinfo for CEntityFactory<CFuncPlayerInfectedClip>
 D typeinfo for CEntityFactory<CFuncRagdollFader>
 D typeinfo for CEntityFactory<CFuncReflectiveGlass>
 D typeinfo for CEntityFactory<CFuncRotating>
 D typeinfo for CEntityFactory<CFuncSimpleLadder>
 D typeinfo for CEntityFactory<CFuncSmokeVolume>
 D typeinfo for CEntityFactory<CFuncSpawnVolume>
 D typeinfo for CEntityFactory<CFuncTankTrain>
 D typeinfo for CEntityFactory<CFuncTrackAuto>
 D typeinfo for CEntityFactory<CFuncTrackChange>
 D typeinfo for CEntityFactory<CFuncTrackTrain>
 D typeinfo for CEntityFactory<CFuncTrain>
 D typeinfo for CEntityFactory<CFuncTrainControls>
 D typeinfo for CEntityFactory<CFuncVPhysicsClip>
 D typeinfo for CEntityFactory<CFuncVehicleClip>
 D typeinfo for CEntityFactory<CFuncWall>
 D typeinfo for CEntityFactory<CFuncWallToggle>
 D typeinfo for CEntityFactory<CFunc_DustCloud>
 D typeinfo for CEntityFactory<CFunc_DustMotes>
 D typeinfo for CEntityFactory<CFunc_LOD>
 D typeinfo for CEntityFactory<CGameEnd>
 D typeinfo for CEntityFactory<CGameGibManager>
 D typeinfo for CEntityFactory<CGamePlayerEquip>
 D typeinfo for CEntityFactory<CGamePlayerTeam>
 D typeinfo for CEntityFactory<CGamePlayerZone>
 D typeinfo for CEntityFactory<CGameScore>
 D typeinfo for CEntityFactory<CGameText>
 D typeinfo for CEntityFactory<CGameUI>
 D typeinfo for CEntityFactory<CGameWeaponManager>
 D typeinfo for CEntityFactory<CGasCan>
 D typeinfo for CEntityFactory<CGenericFlexCycler>
 D typeinfo for CEntityFactory<CGib>
 D typeinfo for CEntityFactory<CGibShooter>
 D typeinfo for CEntityFactory<CGunTarget>
 D typeinfo for CEntityFactory<CHandleDummy>
 D typeinfo for CEntityFactory<CHandleTest>
 D typeinfo for CEntityFactory<CHunterClaw>
 D typeinfo for CEntityFactory<CInfectedZooMaker>
 D typeinfo for CEntityFactory<CInfectedZooPuppet>
 D typeinfo for CEntityFactory<CInferno>
 D typeinfo for CEntityFactory<CInfoDirector>
 D typeinfo for CEntityFactory<CInfoElevatorFloor>
 D typeinfo for CEntityFactory<CInfoGameEventProxy>
 D typeinfo for CEntityFactory<CInfoGameMode>
 D typeinfo for CEntityFactory<CInfoGoalInfectedChase>
 D typeinfo for CEntityFactory<CInfoIntermission>
 D typeinfo for CEntityFactory<CInfoLadderDismount>
 D typeinfo for CEntityFactory<CInfoMassCenter>
 D typeinfo for CEntityFactory<CInfoOverlayAccessor>
 D typeinfo for CEntityFactory<CInfoRemarkable>
 D typeinfo for CEntityFactory<CInfoTarget>
 D typeinfo for CEntityFactory<CInfoViewParameters>
 D typeinfo for CEntityFactory<CInfoZombieSpawn>
 D typeinfo for CEntityFactory<CInstancedSceneEntity>
 D typeinfo for CEntityFactory<CItemSoda>
 D typeinfo for CEntityFactory<CKeepUpright>
 D typeinfo for CEntityFactory<CLight>
 D typeinfo for CEntityFactory<CLightGlow>
 D typeinfo for CEntityFactory<CLogicActiveAutosave>
 D typeinfo for CEntityFactory<CLogicAuto>
 D typeinfo for CEntityFactory<CLogicAutosave>
 D typeinfo for CEntityFactory<CLogicBranch>
 D typeinfo for CEntityFactory<CLogicBranchList>
 D typeinfo for CEntityFactory<CLogicCase>
 D typeinfo for CEntityFactory<CLogicCollisionPair>
 D typeinfo for CEntityFactory<CLogicCompare>
 D typeinfo for CEntityFactory<CLogicCompareInteger>
 D typeinfo for CEntityFactory<CLogicLineToEntity>
 D typeinfo for CEntityFactory<CLogicMeasureMovement>
 D typeinfo for CEntityFactory<CLogicNavigation>
 D typeinfo for CEntityFactory<CLogicRelay>
 D typeinfo for CEntityFactory<CLunge>
 D typeinfo for CEntityFactory<CMapInfo>
 D typeinfo for CEntityFactory<CMapInfoVersus>
 D typeinfo for CEntityFactory<CMaterialModifyControl>
 D typeinfo for CEntityFactory<CMathColorBlend>
 D typeinfo for CEntityFactory<CMathCounter>
 D typeinfo for CEntityFactory<CMathRemap>
 D typeinfo for CEntityFactory<CMessage>
 D typeinfo for CEntityFactory<CMessageEntity>
 D typeinfo for CEntityFactory<CMolotov>
 D typeinfo for CEntityFactory<CMolotovProjectile>
 D typeinfo for CEntityFactory<CMomentaryRotButton>
 D typeinfo for CEntityFactory<CMovementSpeedMod>
 D typeinfo for CEntityFactory<CMultiSource>
 D typeinfo for CEntityFactory<CNullEntity>
 D typeinfo for CEntityFactory<COrnamentProp>
 D typeinfo for CEntityFactory<COuttroStats>
 D typeinfo for CEntityFactory<COxygenTank>
 D typeinfo for CEntityFactory<CPainPills>
 D typeinfo for CEntityFactory<CParticleFire>
 D typeinfo for CEntityFactory<CParticleLight>
 D typeinfo for CEntityFactory<CParticlePerformanceMonitor>
 D typeinfo for CEntityFactory<CParticleSystem>
 D typeinfo for CEntityFactory<CPathCorner>
 D typeinfo for CEntityFactory<CPathCornerCrash>
 D typeinfo for CEntityFactory<CPathKeyFrame>
 D typeinfo for CEntityFactory<CPathTrack>
 D typeinfo for CEntityFactory<CPhysBallSocket>
 D typeinfo for CEntityFactory<CPhysBox>
 D typeinfo for CEntityFactory<CPhysBoxMultiplayer>
 D typeinfo for CEntityFactory<CPhysConstraintSystem>
 D typeinfo for CEntityFactory<CPhysConvert>
 D typeinfo for CEntityFactory<CPhysExplosion>
 D typeinfo for CEntityFactory<CPhysFixed>
 D typeinfo for CEntityFactory<CPhysHinge>
 D typeinfo for CEntityFactory<CPhysImpact>
 D typeinfo for CEntityFactory<CPhysLength>
 D typeinfo for CEntityFactory<CPhysMagnet>
 D typeinfo for CEntityFactory<CPhysMotor>
 D typeinfo for CEntityFactory<CPhysPulley>
 D typeinfo for CEntityFactory<CPhysSlideConstraint>
 D typeinfo for CEntityFactory<CPhysSphere>
 D typeinfo for CEntityFactory<CPhysThruster>
 D typeinfo for CEntityFactory<CPhysTorque>
 D typeinfo for CEntityFactory<CPhysicsCannister>
 D typeinfo for CEntityFactory<CPhysicsEntitySolver>
 D typeinfo for CEntityFactory<CPhysicsNPCSolver>
 D typeinfo for CEntityFactory<CPhysicsProp>
 D typeinfo for CEntityFactory<CPhysicsPropRespawnable>
 D typeinfo for CEntityFactory<CPhysicsSpring>
 D typeinfo for CEntityFactory<CPhysicsWire>
 D typeinfo for CEntityFactory<CPipeBomb>
 D typeinfo for CEntityFactory<CPipeBombProjectile>
 D typeinfo for CEntityFactory<CPistol>
 D typeinfo for CEntityFactory<CPlasma>
 D typeinfo for CEntityFactory<CPlayerPickupController>
 D typeinfo for CEntityFactory<CPlayerResource>
 D typeinfo for CEntityFactory<CPointAngleSensor>
 D typeinfo for CEntityFactory<CPointAngularVelocitySensor>
 D typeinfo for CEntityFactory<CPointBonusMapsAccessor>
 D typeinfo for CEntityFactory<CPointBroadcastClientCommand>
 D typeinfo for CEntityFactory<CPointClientCommand>
 D typeinfo for CEntityFactory<CPointCommentaryNode>
 D typeinfo for CEntityFactory<CPointDevShotCamera>
 D typeinfo for CEntityFactory<CPointEntity>
 D typeinfo for CEntityFactory<CPointEntityFinder>
 D typeinfo for CEntityFactory<CPointGamestatsCounter>
 D typeinfo for CEntityFactory<CPointHurt>
 D typeinfo for CEntityFactory<CPointPlayerMoveConstraint>
 D typeinfo for CEntityFactory<CPointProximitySensor>
 D typeinfo for CEntityFactory<CPointPush>
 D typeinfo for CEntityFactory<CPointServerCommand>
 D typeinfo for CEntityFactory<CPointSpotlight>
 D typeinfo for CEntityFactory<CPointTeleport>
 D typeinfo for CEntityFactory<CPointTemplate>
 D typeinfo for CEntityFactory<CPointVelocitySensor>
 D typeinfo for CEntityFactory<CPoseController>
 D typeinfo for CEntityFactory<CPostProcessController>
 D typeinfo for CEntityFactory<CPrecipitation>
 D typeinfo for CEntityFactory<CPrecipitationBlocker>
 D typeinfo for CEntityFactory<CProjectedDecal>
 D typeinfo for CEntityFactory<CPropDoorRotatingBreakable>
 D typeinfo for CEntityFactory<CPropDoorRotatingCheckpoint>
 D typeinfo for CEntityFactory<CPropGlowingObject>
 D typeinfo for CEntityFactory<CPropHealthCabinet>
 D typeinfo for CEntityFactory<CPropMinigun>
 D typeinfo for CEntityFactory<CPropMountedGun>
 D typeinfo for CEntityFactory<CPropVehicle>
 D typeinfo for CEntityFactory<CPropVehicleDriveable>
 D typeinfo for CEntityFactory<CPropaneTank>
 D typeinfo for CEntityFactory<CPumpShotgun>
 D typeinfo for CEntityFactory<CPushable>
 D typeinfo for CEntityFactory<CRagGib>
 D typeinfo for CEntityFactory<CRagdollBoogie>
 D typeinfo for CEntityFactory<CRagdollConstraint>
 D typeinfo for CEntityFactory<CRagdollMagnet>
 D typeinfo for CEntityFactory<CRagdollManager>
 D typeinfo for CEntityFactory<CRagdollProp>
 D typeinfo for CEntityFactory<CRagdollPropAttached>
 D typeinfo for CEntityFactory<CRevertSaved>
 D typeinfo for CEntityFactory<CRopeKeyframe>
 D typeinfo for CEntityFactory<CRotButton>
 D typeinfo for CEntityFactory<CRotDoor>
 D typeinfo for CEntityFactory<CRotorWashShooter>
 D typeinfo for CEntityFactory<CSceneEntity>
 D typeinfo for CEntityFactory<CSceneListManager>
 D typeinfo for CEntityFactory<CSceneManager>
 D typeinfo for CEntityFactory<CServerRagdollTrigger>
 D typeinfo for CEntityFactory<CShadowControl>
 D typeinfo for CEntityFactory<CShower>
 D typeinfo for CEntityFactory<CSimplePhysicsBrush>
 D typeinfo for CEntityFactory<CSimplePhysicsProp>
 D typeinfo for CEntityFactory<CSkyCamera>
 D typeinfo for CEntityFactory<CSlideshowDisplay>
 D typeinfo for CEntityFactory<CSmokeStack>
 D typeinfo for CEntityFactory<CSmokerClaw>
 D typeinfo for CEntityFactory<CSniperRifle>
 D typeinfo for CEntityFactory<CSoundEnt>
 D typeinfo for CEntityFactory<CSpotlightEnd>
 D typeinfo for CEntityFactory<CSprayCan>
 D typeinfo for CEntityFactory<CSprite>
 D typeinfo for CEntityFactory<CSpriteOriented>
 D typeinfo for CEntityFactory<CSpriteTrail>
 D typeinfo for CEntityFactory<CSteamJet>
 D typeinfo for CEntityFactory<CStripWeapons>
 D typeinfo for CEntityFactory<CSubMachinegun>
 D typeinfo for CEntityFactory<CSun>
 D typeinfo for CEntityFactory<CSurroundTest>
 D typeinfo for CEntityFactory<CSurvivorCamera>
 D typeinfo for CEntityFactory<CSurvivorPosition>
 D typeinfo for CEntityFactory<CSurvivorRescue>
 D typeinfo for CEntityFactory<CTankClaw>
 D typeinfo for CEntityFactory<CTankRock>
 D typeinfo for CEntityFactory<CTankTargetChange>
 D typeinfo for CEntityFactory<CTankTrainAI>
 D typeinfo for CEntityFactory<CTargetCDAudioRep>
 D typeinfo for CEntityFactory<CTargetChangeGravity>
 D typeinfo for CEntityFactory<CTeam>
 D typeinfo for CEntityFactory<CTeamSpawnPoint>
 D typeinfo for CEntityFactory<CTeamVehicleSpawnPoint>
 D typeinfo for CEntityFactory<CTempEntTester>
 D typeinfo for CEntityFactory<CTerrorGameRulesProxy>
 D typeinfo for CEntityFactory<CTerrorPlayer>
 D typeinfo for CEntityFactory<CTerrorPlayerResource>
 D typeinfo for CEntityFactory<CTerrorViewModel>
 D typeinfo for CEntityFactory<CTestEffect>
 D typeinfo for CEntityFactory<CTestTraceline>
 D typeinfo for CEntityFactory<CTest_ProxyToggle_Networkable>
 D typeinfo for CEntityFactory<CTextureToggle>
 D typeinfo for CEntityFactory<CThrow>
 D typeinfo for CEntityFactory<CTimerEntity>
 D typeinfo for CEntityFactory<CTonemapTrigger>
 D typeinfo for CEntityFactory<CTongue>
 D typeinfo for CEntityFactory<CTransitioningPlayer>
 D typeinfo for CEntityFactory<CTriggerAutoCrouch>
 D typeinfo for CEntityFactory<CTriggerBrush>
 D typeinfo for CEntityFactory<CTriggerCDAudio>
 D typeinfo for CEntityFactory<CTriggerCamera>
 D typeinfo for CEntityFactory<CTriggerCameraMultiplayer>
 D typeinfo for CEntityFactory<CTriggerEscape>
 D typeinfo for CEntityFactory<CTriggerGravity>
 D typeinfo for CEntityFactory<CTriggerHurt>
 D typeinfo for CEntityFactory<CTriggerHurtGhost>
 D typeinfo for CEntityFactory<CTriggerImpact>
 D typeinfo for CEntityFactory<CTriggerLook>
 D typeinfo for CEntityFactory<CTriggerMultiple>
 D typeinfo for CEntityFactory<CTriggerOnce>
 D typeinfo for CEntityFactory<CTriggerPlayerMovement>
 D typeinfo for CEntityFactory<CTriggerProximity>
 D typeinfo for CEntityFactory<CTriggerPush>
 D typeinfo for CEntityFactory<CTriggerRemove>
 D typeinfo for CEntityFactory<CTriggerSave>
 D typeinfo for CEntityFactory<CTriggerSoundscape>
 D typeinfo for CEntityFactory<CTriggerTeleport>
 D typeinfo for CEntityFactory<CTriggerToggleSave>
 D typeinfo for CEntityFactory<CTriggerVPhysicsMotion>
 D typeinfo for CEntityFactory<CTriggerVolume>
 D typeinfo for CEntityFactory<CTriggerWind>
 D typeinfo for CEntityFactory<CVGuiScreen>
 D typeinfo for CEntityFactory<CVersusRandom>
 D typeinfo for CEntityFactory<CVomit>
 D typeinfo for CEntityFactory<CVomitParticle>
 D typeinfo for CEntityFactory<CVoteController>
 D typeinfo for CEntityFactory<CWC_UpdateIgnoreList>
 D typeinfo for CEntityFactory<CWaterBullet>
 D typeinfo for CEntityFactory<CWaterLODControl>
 D typeinfo for CEntityFactory<CWeaponAmmoSpawn>
 D typeinfo for CEntityFactory<CWeaponCSBase>
 D typeinfo for CEntityFactory<CWeaponCSBaseGun>
 D typeinfo for CEntityFactory<CWeaponHEGrenadeSpawn>
 D typeinfo for CEntityFactory<CWeaponautoshotgunSpawn>
 D typeinfo for CEntityFactory<CWeaponfirst_aid_kitSpawn>
 D typeinfo for CEntityFactory<CWeaponhunting_rifleSpawn>
 D typeinfo for CEntityFactory<CWeaponmolotovSpawn>
 D typeinfo for CEntityFactory<CWeaponpain_pillsSpawn>
 D typeinfo for CEntityFactory<CWeaponpipe_bombSpawn>
 D typeinfo for CEntityFactory<CWeaponpistolSpawn>
 D typeinfo for CEntityFactory<CWeaponpumpshotgunSpawn>
 D typeinfo for CEntityFactory<CWeaponrifleSpawn>
 D typeinfo for CEntityFactory<CWeaponsmgSpawn>
 D typeinfo for CEntityFactory<CWeightButton>
 D typeinfo for CEntityFactory<CWindowPane>
 D typeinfo for CEntityFactory<CWorld>
 D typeinfo for CEntityFactory<CWorldItem>
 D typeinfo for CEntityFactory<DustTrail>
 D typeinfo for CEntityFactory<FilterDamageType>
 D typeinfo for CEntityFactory<FilterInfectedClass>
 D typeinfo for CEntityFactory<FilterTeam>
 D typeinfo for CEntityFactory<Hunter>
 D typeinfo for CEntityFactory<Infected>
 D typeinfo for CEntityFactory<InfoChangelevel>
 D typeinfo for CEntityFactory<MovieExplosion>
 D typeinfo for CEntityFactory<ParticleSmokeGrenade>
 D typeinfo for CEntityFactory<RocketTrail>
 D typeinfo for CEntityFactory<SmokeTrail>
 D typeinfo for CEntityFactory<Smoker>
 D typeinfo for CEntityFactory<SporeExplosion>
 D typeinfo for CEntityFactory<SporeTrail>
 D typeinfo for CEntityFactory<SurvivorBot>
 D typeinfo for CEntityFactory<Tank>
 D typeinfo for CEntityFactory<Witch>
 D typeinfo for CEntityFactoryDictionary
 D typeinfo for CEntityFlame
 D typeinfo for CEntityListSystem
 D typeinfo for CEntityParticleTrail
 D typeinfo for CEntityParticleTrail::NetworkVar_m_Info
 D typeinfo for CEntitySaveRestoreBlockHandler
 D typeinfo for CEntitySaveUtils
 D typeinfo for CEntityTouchManager
 D typeinfo for CEnvBeam
 D typeinfo for CEnvBeverage
 D typeinfo for CEnvCredits
 D typeinfo for CEnvDOFController
 D typeinfo for CEnvDetailController
 D typeinfo for CEnvDustPuff
 D typeinfo for CEnvEffectsScript
 D typeinfo for CEnvEntityMaker
 D typeinfo for CEnvExplosion
 D typeinfo for CEnvFade
 D typeinfo for CEnvFireSensor
 D typeinfo for CEnvFireSource
 D typeinfo for CEnvFunnel
 D typeinfo for CEnvGlobal
 D typeinfo for CEnvGunfire
 D typeinfo for CEnvHudHint
 D typeinfo for CEnvLaser
 D typeinfo for CEnvLight
 D typeinfo for CEnvMicrophone
 D typeinfo for CEnvMuzzleFlash
 D typeinfo for CEnvParticleScript
 D typeinfo for CEnvPlayerSurfaceTrigger
 D typeinfo for CEnvProjectedTexture
 D typeinfo for CEnvQuadraticBeam
 D typeinfo for CEnvRockLauncher
 D typeinfo for CEnvScreenEffect
 D typeinfo for CEnvScreenOverlay
 D typeinfo for CEnvShake
 D typeinfo for CEnvShooter
 D typeinfo for CEnvSoundscape
 D typeinfo for CEnvSoundscapeProxy
 D typeinfo for CEnvSoundscapeTriggerable
 D typeinfo for CEnvSpark
 D typeinfo for CEnvSplash
 D typeinfo for CEnvTonemapController
 D typeinfo for CEnvTracer
 D typeinfo for CEnvViewPunch
 D typeinfo for CEnvWeaponfire
 D typeinfo for CEnvWind
 D typeinfo for CEnvWind::NetworkVar_m_EnvWindShared
 D typeinfo for CEnvWindShared
 D typeinfo for CEnvZoom
 D typeinfo for CEnv_Blocker
 D typeinfo for CEscapeRoute
 D typeinfo for CEventLog
 D typeinfo for CEventQueueSaveLoadProxy
 D typeinfo for CEventQueue_SaveRestoreBlockHandler
 D typeinfo for CEventsSaveDataOps
 D typeinfo for CEveryoneExceptUserFilter
 D typeinfo for CExplosionAwardTemplate
 D typeinfo for CFallCauserAwardTemplate
 D typeinfo for CFilterClass
 D typeinfo for CFilterContext
 D typeinfo for CFilterEnemy
 D typeinfo for CFilterMassGreater
 D typeinfo for CFilterModel
 D typeinfo for CFilterMultiple
 D typeinfo for CFilterName
 D typeinfo for CFinaleTrigger
 D typeinfo for CFire
 D typeinfo for CFireSmoke
 D typeinfo for CFireSphere
 D typeinfo for CFireTrail
 D typeinfo for CFirstAidKit
 D typeinfo for CFish
 D typeinfo for CFishPool
 D typeinfo for CFlaggedEntitiesEnum
 D typeinfo for CFlexAnimationTrack
 D typeinfo for CFlexCycler
 D typeinfo for CFlexExpresser
 D typeinfo for CFlexExpresserShim
 D typeinfo for CFlexSceneFileManager
 D typeinfo for CFmtStrN<1024>
 D typeinfo for CFmtStrN<128>
 D typeinfo for CFmtStrN<256>
 D typeinfo for CFmtStrN<260>
 D typeinfo for CFmtStrN<32>
 D typeinfo for CFmtStrN<64>
 D typeinfo for CFmtStrN<80>
 D typeinfo for CFogController
 D typeinfo for CFogController::NetworkVar_m_fog
 D typeinfo for CFogSystem
 D typeinfo for CFogTrigger
 D typeinfo for CFogVolume
 D typeinfo for CForgetfulAwardTemplate
 D typeinfo for CFourWheelServerVehicle
 D typeinfo for CFourWheelVehiclePhysics
 D typeinfo for CFriendlyFireAwardTemplate
 D typeinfo for CFuelBarrelPiece
 D typeinfo for CFuelBarrelProp
 D typeinfo for CFuncAreaPortalBase
 D typeinfo for CFuncAreaPortalWindow
 D typeinfo for CFuncBrush
 D typeinfo for CFuncConveyor
 D typeinfo for CFuncElevator
 D typeinfo for CFuncFireExtinguisher
 D typeinfo for CFuncIllusionary
 D typeinfo for CFuncLadder
 D typeinfo for CFuncLadderEndPoint
 D typeinfo for CFuncMoveLinear
 D typeinfo for CFuncNavAttributeRegion
 D typeinfo for CFuncNavBlocker
 D typeinfo for CFuncNavObstruction
 D typeinfo for CFuncNavStairsToggle
 D typeinfo for CFuncOccluder
 D typeinfo for CFuncPlat
 D typeinfo for CFuncPlatRot
 D typeinfo for CFuncPlayerInfectedClip
 D typeinfo for CFuncRagdollFader
 D typeinfo for CFuncReflectiveGlass
 D typeinfo for CFuncRotating
 D typeinfo for CFuncSimpleLadder
 D typeinfo for CFuncSmokeVolume
 D typeinfo for CFuncSpawnVolume
 D typeinfo for CFuncTankTrain
 D typeinfo for CFuncTrackAuto
 D typeinfo for CFuncTrackChange
 D typeinfo for CFuncTrackTrain
 D typeinfo for CFuncTrain
 D typeinfo for CFuncTrainControls
 D typeinfo for CFuncVPhysicsClip
 D typeinfo for CFuncVehicleClip
 D typeinfo for CFuncWall
 D typeinfo for CFuncWallToggle
 D typeinfo for CFunc_Dust
 D typeinfo for CFunc_DustCloud
 D typeinfo for CFunc_DustMotes
 D typeinfo for CFunc_LOD
 D typeinfo for CFunctor
 D typeinfo for CFunctor1<void (*)(bool), bool, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >
 D typeinfo for CFunctor3<void (*)(IPhysicsObject*, Vector const&, Vector const&), IPhysicsObject*, Vector, Vector, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >
 D typeinfo for CFunctor4<CBaseEntity* (*)(CBaseEntity*, CBaseEntity*, bool, float), CBaseEntity*, CBaseEntity*, bool, float, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >
 D typeinfo for CFunctorJob
 D typeinfo for CGameDLL_ConVarAccessor
 D typeinfo for CGameEnd
 D typeinfo for CGameEventListener
 D typeinfo for CGameGibManager
 D typeinfo for CGameMovement
 D typeinfo for CGamePlayerEquip
 D typeinfo for CGamePlayerTeam
 D typeinfo for CGamePlayerZone
 D typeinfo for CGameRules
 D typeinfo for CGameRulesProxy
 D typeinfo for CGameScore
 D typeinfo for CGameStringPool
 D typeinfo for CGameText
 D typeinfo for CGameUI
 D typeinfo for CGameWeaponManager
 D typeinfo for CGasCan
 D typeinfo for CGenericFlexCycler
 D typeinfo for CGib
 D typeinfo for CGibShooter
 D typeinfo for CGlobalEntityList
 D typeinfo for CGlobalState
 D typeinfo for CGoodTeammateAwardTemplate
 D typeinfo for CGotchaAwardTemplate
 D typeinfo for CGrabController
 D typeinfo for CGreedAwardTemplate
 D typeinfo for CGrenadeBlunderAwardTemplate
 D typeinfo for CGrenadeExpertAwardTemplate
 D typeinfo for CGrenadierAwardTemplate
 D typeinfo for CGunTarget
 D typeinfo for CHLTVDirector
 D typeinfo for CHandleDummy
 D typeinfo for CHandleTest
 D typeinfo for CHeadhunterAwardTemplate
 D typeinfo for CHelpingHandAwardTemplate
 D typeinfo for CHeroAwardTemplate
 D typeinfo for CHinderingEscapeAwardTemplate
 D typeinfo for CHitAndRunAwardTemplate
 D typeinfo for CHitEverybodyAwardTemplate
 D typeinfo for CHulkPhysicsAwardTemplate
 D typeinfo for CHulkPunchAwardTemplate
 D typeinfo for CHulkRockAwardTemplate
 D typeinfo for CHulkShutOutAwardTemplate
 D typeinfo for CHulkSlayerAwardTemplate
 D typeinfo for CHunterClaw
 D typeinfo for CHurdleAwardTemplate
 D typeinfo for CIKSaveRestoreOps
 D typeinfo for CInfectedAnimationLayer
 D typeinfo for CInfectedZooMaker
 D typeinfo for CInfectedZooPuppet
 D typeinfo for CInferno
 D typeinfo for CInfoDirector
 D typeinfo for CInfoElevatorFloor
 D typeinfo for CInfoGameEventProxy
 D typeinfo for CInfoGameMode
 D typeinfo for CInfoGoalInfectedChase
 D typeinfo for CInfoIntermission
 D typeinfo for CInfoLadderDismount
 D typeinfo for CInfoMassCenter
 D typeinfo for CInfoOverlayAccessor
 D typeinfo for CInfoRemarkable
 D typeinfo for CInfoTarget
 D typeinfo for CInfoViewParameters
 D typeinfo for CInfoZombieSpawn
 D typeinfo for CInstancedResponseSystem
 D typeinfo for CInstancedSceneEntity
 D typeinfo for CItSurvivorAwardTemplate
 D typeinfo for CItem
 D typeinfo for CItemSoda
 D typeinfo for CJob
 D typeinfo for CKeepUpright
 D typeinfo for CKickIssue
 D typeinfo for CKnockdownAwardTemplate
 D typeinfo for CL4DGameStats
 D typeinfo for CLagCompensationManager
 D typeinfo for CLeft4DeadAwardTemplate
 D typeinfo for CLeftBehindAwardTemplate
 D typeinfo for CLight
 D typeinfo for CLightGlow
 D typeinfo for CLogicActiveAutosave
 D typeinfo for CLogicAuto
 D typeinfo for CLogicAutosave
 D typeinfo for CLogicBranch
 D typeinfo for CLogicBranchList
 D typeinfo for CLogicCase
 D typeinfo for CLogicCollisionPair
 D typeinfo for CLogicCompare
 D typeinfo for CLogicCompareInteger
 D typeinfo for CLogicLineToEntity
 D typeinfo for CLogicMeasureMovement
 D typeinfo for CLogicNavigation
 D typeinfo for CLogicRelay
 D typeinfo for CLogicalEntity
 D typeinfo for CLunge
 D typeinfo for CLunge::NetworkVar_m_lungeAgainTimer
 D typeinfo for CMVPAwardTemplate
 D typeinfo for CMapInfo
 D typeinfo for CMapInfoVersus
 D typeinfo for CMapLoadEntityFilter
 D typeinfo for CMaterialModifyControl
 D typeinfo for CMathColorBlend
 D typeinfo for CMathCounter
 D typeinfo for CMathRemap
 D typeinfo for CMemZeroOnNew
 D typeinfo for CMemberFunctor0<CParallelProcessor<QueryCacheUpdateRecord_t, CFuncJobItemProcessor<QueryCacheUpdateRecord_t>, 1>*, void (CParallelProcessor<QueryCacheUpdateRecord_t, CFuncJobItemProcessor<QueryCacheUpdateRecord_t>, 1>::*)(), CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>
 D typeinfo for CMemberFunctor3<CBreakableProp*, void (CBreakableProp::*)(Vector const&, Vector const&, QAngle const&), Vector, Vector, QAngle, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>
 D typeinfo for CMessage
 D typeinfo for CMessageEntity
 D typeinfo for CModelSoundsCache
 D typeinfo for CModelSoundsCacheSaver
 D typeinfo for CMolotov
 D typeinfo for CMolotovProjectile
 D typeinfo for CMomentaryRotButton
 D typeinfo for CMostHitsAwardTemplate
 D typeinfo for CMotorController
 D typeinfo for CMovableEnum
 D typeinfo for CMoveHelperServer
 D typeinfo for CMovementSpeedMod
 D typeinfo for CMultiSource
 D typeinfo for CMultiplayRules
 D typeinfo for CMultiplayer_Expresser
 D typeinfo for CMurderAwardTemplate
 D typeinfo for CNarrowEscapeAwardTemplate
 D typeinfo for CNavArea
 D typeinfo for CNavAreaCriticalData
 D typeinfo for CNavMesh
 D typeinfo for CNoSurvivorsAwardTemplate
 D typeinfo for CNotifyList
 D typeinfo for CNullEntity
 D typeinfo for COrnamentProp
 D typeinfo for COuttroStats
 D typeinfo for COxygenTank
 D typeinfo for CPASAttenuationFilter
 D typeinfo for CPASFilter
 D typeinfo for CPVSFilter
 D typeinfo for CPainPills
 D typeinfo for CPainPills::NetworkVar_m_pillUseTimer
 D typeinfo for CParryAwardTemplate
 D typeinfo for CParticleFire
 D typeinfo for CParticleLight
 D typeinfo for CParticlePerformanceMonitor
 D typeinfo for CParticleSystem
 D typeinfo for CParticleSystemQuery
 D typeinfo for CPathCorner
 D typeinfo for CPathCornerCrash
 D typeinfo for CPathKeyFrame
 D typeinfo for CPathTrack
 D typeinfo for CPerfectTeamAwardTemplate
 D typeinfo for CPhysBallSocket
 D typeinfo for CPhysBox
 D typeinfo for CPhysBoxMultiplayer
 D typeinfo for CPhysConstraint
 D typeinfo for CPhysConstraintEvents
 D typeinfo for CPhysConstraintSystem
 D typeinfo for CPhysConvert
 D typeinfo for CPhysExplosion
 D typeinfo for CPhysFixed
 D typeinfo for CPhysForce
 D typeinfo for CPhysHinge
 D typeinfo for CPhysImpact
 D typeinfo for CPhysLength
 D typeinfo for CPhysMagnet
 D typeinfo for CPhysMotor
 D typeinfo for CPhysObjSaveRestoreOps
 D typeinfo for CPhysPulley
 D typeinfo for CPhysSaveRestoreBlockHandler
 D typeinfo for CPhysSlideConstraint
 D typeinfo for CPhysSphere
 D typeinfo for CPhysThruster
 D typeinfo for CPhysTorque
 D typeinfo for CPhysicsCannister
 D typeinfo for CPhysicsEntitySolver
 D typeinfo for CPhysicsGameTrace
 D typeinfo for CPhysicsHook
 D typeinfo for CPhysicsNPCSolver
 D typeinfo for CPhysicsPlayerCallback
 D typeinfo for CPhysicsProp
 D typeinfo for CPhysicsPropRespawnable
 D typeinfo for CPhysicsShake
 D typeinfo for CPhysicsSpring
 D typeinfo for CPhysicsWind
 D typeinfo for CPhysicsWire
 D typeinfo for CPipeBomb
 D typeinfo for CPipeBombProjectile
 D typeinfo for CPistol
 D typeinfo for CPlasma
 D typeinfo for CPlatTrigger
 D typeinfo for CPlayerInfo
 D typeinfo for CPlayerInfoManager
 D typeinfo for CPlayerLocalData
 D typeinfo for CPlayerLocalData::NetworkVar_m_audio
 D typeinfo for CPlayerLocalData::NetworkVar_m_skybox3d
 D typeinfo for CPlayerMove
 D typeinfo for CPlayerPickupController
 D typeinfo for CPlayerResource
 D typeinfo for CPlayerState
 D typeinfo for CPluginBotManager
 D typeinfo for CPluginHelpersCheck
 D typeinfo for CPointAngleSensor
 D typeinfo for CPointAngularVelocitySensor
 D typeinfo for CPointBonusMapsAccessor
 D typeinfo for CPointBroadcastClientCommand
 D typeinfo for CPointClientCommand
 D typeinfo for CPointCommentaryNode
 D typeinfo for CPointDevShotCamera
 D typeinfo for CPointEntity
 D typeinfo for CPointEntityFinder
 D typeinfo for CPointGamestatsCounter
 D typeinfo for CPointHurt
 D typeinfo for CPointPlayerMoveConstraint
 D typeinfo for CPointProximitySensor
 D typeinfo for CPointPush
 D typeinfo for CPointServerCommand
 D typeinfo for CPointSpotlight
 D typeinfo for CPointTeleport
 D typeinfo for CPointTemplate
 D typeinfo for CPointTemplatePrecacher
 D typeinfo for CPointVelocitySensor
 D typeinfo for CPoseController
 D typeinfo for CPostProcessController
 D typeinfo for CPostProcessSystem
 D typeinfo for CPounceAwardTemplate
 D typeinfo for CPrecacheOtherList
 D typeinfo for CPrecacheSystem
 D typeinfo for CPrecipitation
 D typeinfo for CPrecipitationBlocker
 D typeinfo for CPredictedViewModel
 D typeinfo for CProjectedDecal
 D typeinfo for CPropData
 D typeinfo for CPropDoorRotating
 D typeinfo for CPropDoorRotatingBreakable
 D typeinfo for CPropDoorRotatingCheckpoint
 D typeinfo for CPropGlowingObject
 D typeinfo for CPropHealthCabinet
 D typeinfo for CPropMinigun
 D typeinfo for CPropMountedGun
 D typeinfo for CPropVehicle
 D typeinfo for CPropVehicleDriveable
 D typeinfo for CPropaneTank
 D typeinfo for CProtectorAwardTemplate
 D typeinfo for CPumpShotgun
 D typeinfo for CPushAwayEnumerator
 D typeinfo for CPushBlockerEnum
 D typeinfo for CPushable
 D typeinfo for CRagGib
 D typeinfo for CRagdollBoogie
 D typeinfo for CRagdollConstraint
 D typeinfo for CRagdollLRURetirement
 D typeinfo for CRagdollMagnet
 D typeinfo for CRagdollManager
 D typeinfo for CRagdollProp
 D typeinfo for CRagdollPropAttached
 D typeinfo for CRecipientFilter
 D typeinfo for CRedecoratorAwardTemplate
 D typeinfo for CRefCountServiceBase<true, CRefMT>
 D typeinfo for CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >
 D typeinfo for CRefCounted1<IRefCounted, CRefCountServiceBase<true, CRefMT> >
 D typeinfo for CRegistry
 D typeinfo for CReliableBroadcastRecipientFilter
 D typeinfo for CRemarkableEntityList
 D typeinfo for CRescuerAwardTemplate
 D typeinfo for CRespawnEntitiesFilter
 D typeinfo for CResponseQueueManager
 D typeinfo for CResponseSystem
 D typeinfo for CRestartGameIssue
 D typeinfo for CRestore
 D typeinfo for CReturnToLobbyIssue
 D typeinfo for CRevertSaved
 D typeinfo for CReviveFriendAwardTemplate
 D typeinfo for CRopeKeyframe
 D typeinfo for CRotButton
 D typeinfo for CRotDoor
 D typeinfo for CRotorWashShooter
 D typeinfo for CRuleBrushEntity
 D typeinfo for CRuleEntity
 D typeinfo for CRulePointEntity
 D typeinfo for CSave
 D typeinfo for CSaveRestoreBlockSet
 D typeinfo for CSaviorAwardTemplate
 D typeinfo for CScenarioWinAwardTemplate
 D typeinfo for CSceneEntity
 D typeinfo for CSceneFindMarkFilter
 D typeinfo for CSceneFindNearestMarkFilter
 D typeinfo for CSceneListManager
 D typeinfo for CSceneManager
 D typeinfo for CSceneTokenProcessor
 D typeinfo for CSecurityFailureAwardTemplate
 D typeinfo for CServerDLLSharedAppSystems
 D typeinfo for CServerGameClients
 D typeinfo for CServerGameDLL
 D typeinfo for CServerGameEnts
 D typeinfo for CServerGameTags
 D typeinfo for CServerNetworkProperty
 D typeinfo for CServerOnlyEntity
 D typeinfo for CServerOnlyPointEntity
 D typeinfo for CServerRagdollTrigger
 D typeinfo for CServerTools
 D typeinfo for CShadowControl
 D typeinfo for CSharingAwardTemplate
 D typeinfo for CSharpshooterAwardTemplate
 D typeinfo for CShower
 D typeinfo for CSimThinkManager
 D typeinfo for CSimplePhysicsBrush
 D typeinfo for CSimplePhysicsProp
 D typeinfo for CSingleUserPlusObserversFilter
 D typeinfo for CSingleUserRecipientFilter
 D typeinfo for CSkeetShootAwardTemplate
 D typeinfo for CSkipKeys
 D typeinfo for CSkyCamera
 D typeinfo for CSlideshowDisplay
 D typeinfo for CSmokeCloudSystem
 D typeinfo for CSmokeStack
 D typeinfo for CSmokerClaw
 D typeinfo for CSniperAwardTemplate
 D typeinfo for CSniperRifle
 D typeinfo for CSolidSetDefaults
 D typeinfo for CSoundControllerImp
 D typeinfo for CSoundEmitterSystem
 D typeinfo for CSoundEnt
 D typeinfo for CSoundEnvelopeController
 D typeinfo for CSoundPatchSaveRestoreOps
 D typeinfo for CSoundscapeSystem
 D typeinfo for CSpotlightEnd
 D typeinfo for CSprayCan
 D typeinfo for CSprite
 D typeinfo for CSpriteOriented
 D typeinfo for CSpriteTrail
 D typeinfo for CSteamJet
 D typeinfo for CStringPool
 D typeinfo for CStringTableSaveRestoreOps
 D typeinfo for CStripWeapons
 D typeinfo for CSubMachinegun
 D typeinfo for CSun
 D typeinfo for CSurroundTest
 D typeinfo for CSurvivorCamera
 D typeinfo for CSurvivorGroupInfo
 D typeinfo for CSurvivorKillAwardTemplate
 D typeinfo for CSurvivorPosition
 D typeinfo for CSurvivorRescue
 D typeinfo for CTEArmorRicochet
 D typeinfo for CTEBSPDecal
 D typeinfo for CTEBaseBeam
 D typeinfo for CTEBeamEntPoint
 D typeinfo for CTEBeamEnts
 D typeinfo for CTEBeamFollow
 D typeinfo for CTEBeamLaser
 D typeinfo for CTEBeamPoints
 D typeinfo for CTEBeamRing
 D typeinfo for CTEBeamRingPoint
 D typeinfo for CTEBeamSpline
 D typeinfo for CTEBloodSprite
 D typeinfo for CTEBloodStream
 D typeinfo for CTEBreakModel
 D typeinfo for CTEBubbleTrail
 D typeinfo for CTEBubbles
 D typeinfo for CTEBullets
 D typeinfo for CTEClientProjectile
 D typeinfo for CTEDecal
 D typeinfo for CTEDust
 D typeinfo for CTEDynamicLight
 D typeinfo for CTEEffectDispatch
 D typeinfo for CTEEnergySplash
 D typeinfo for CTEExplosion
 D typeinfo for CTEFizz
 D typeinfo for CTEFootprintDecal
 D typeinfo for CTEFoundryHelpers
 D typeinfo for CTEGaussExplosion
 D typeinfo for CTEGlowSprite
 D typeinfo for CTEImpact
 D typeinfo for CTEKillPlayerAttachments
 D typeinfo for CTELargeFunnel
 D typeinfo for CTEMetalSparks
 D typeinfo for CTEMuzzleFlash
 D typeinfo for CTEParticleSystem
 D typeinfo for CTEPhysicsProp
 D typeinfo for CTEPlayerAnimEvent
 D typeinfo for CTEPlayerDecal
 D typeinfo for CTEProjectedDecal
 D typeinfo for CTEShatterSurface
 D typeinfo for CTEShowLine
 D typeinfo for CTESmoke
 D typeinfo for CTESparks
 D typeinfo for CTESprite
 D typeinfo for CTESpriteSpray
 D typeinfo for CTEWorldDecal
 D typeinfo for CTankClaw
 D typeinfo for CTankClaw::NetworkVar_m_lowAttackDurationTimer
 D typeinfo for CTankRock
 D typeinfo for CTankTargetChange
 D typeinfo for CTankTrainAI
 D typeinfo for CTargetCDAudioRep
 D typeinfo for CTargetChangeGravity
 D typeinfo for CTeam
 D typeinfo for CTeamSpawnPoint
 D typeinfo for CTeamVehicleSpawnPoint
 D typeinfo for CTeamplayRoundBasedRules
 D typeinfo for CTeamplayRules
 D typeinfo for CTempEntTester
 D typeinfo for CTempEntsSystem
 D typeinfo for CTemplate_SaveRestoreBlockHandler
 D typeinfo for CTemplatesHook
 D typeinfo for CTerrorAmmoDef
 D typeinfo for CTerrorAmmoDefSystem
 D typeinfo for CTerrorEventLog
 D typeinfo for CTerrorGameMovement
 D typeinfo for CTerrorGameRules
 D typeinfo for CTerrorGameRulesProxy
 D typeinfo for CTerrorGun
 D typeinfo for CTerrorPlayer
 D typeinfo for CTerrorPlayer::NetworkVar_m_autoCrouchTimer
 D typeinfo for CTerrorPlayer::NetworkVar_m_hangTimer
 D typeinfo for CTerrorPlayer::NetworkVar_m_itTimer
 D typeinfo for CTerrorPlayer::NetworkVar_m_knockdownTimer
 D typeinfo for CTerrorPlayer::NetworkVar_m_noAvoidanceTimer
 D typeinfo for CTerrorPlayer::NetworkVar_m_staggerTimer
 D typeinfo for CTerrorPlayer::NetworkVar_m_stunTimer
 D typeinfo for CTerrorPlayer::NetworkVar_m_suicideCountdown
 D typeinfo for CTerrorPlayer::NetworkVar_m_tongueVictimTimer
 D typeinfo for CTerrorPlayer::NetworkVar_m_tugTimer
 D typeinfo for CTerrorPlayer::NetworkVar_m_vocalizationSubjectTimer
 D typeinfo for CTerrorPlayerResource
 D typeinfo for CTerrorUsePushFilter
 D typeinfo for CTerrorViewModel
 D typeinfo for CTerrorWeapon
 D typeinfo for CTerrorWeapon::NetworkVar_m_attackTimer
 D typeinfo for CTerrorWeapon::NetworkVar_m_helpingHandSuppressionTimer
 D typeinfo for CTerrorWeapon::NetworkVar_m_helpingHandTargetTimer
 D typeinfo for CTerrorWeapon::NetworkVar_m_helpingHandTimer
 D typeinfo for CTerrorWeapon::NetworkVar_m_swingTimer
 D typeinfo for CTerrorWeaponInfo
 D typeinfo for CTestEffect
 D typeinfo for CTestTraceline
 D typeinfo for CTest_ProxyToggle_Networkable
 D typeinfo for CTextureToggle
 D typeinfo for CThinkContextsSaveDataOps
 D typeinfo for CThrow
 D typeinfo for CThrustController
 D typeinfo for CTimerEntity
 D typeinfo for CTonemapSystem
 D typeinfo for CTonemapTrigger
 D typeinfo for CTongue
 D typeinfo for CTongueChokeAwardTemplate
 D typeinfo for CToolFrameworkServer
 D typeinfo for CToughGuyAwardTemplate
 D typeinfo for CTraceBulletEntityEnumerator
 D typeinfo for CTraceFilter
 D typeinfo for CTraceFilterAgainstEntityList
 D typeinfo for CTraceFilterChain
 D typeinfo for CTraceFilterDoor
 D typeinfo for CTraceFilterEntitiesOnly
 D typeinfo for CTraceFilterEntity
 D typeinfo for CTraceFilterEntityIgnoreOther
 D typeinfo for CTraceFilterGroundEntities
 D typeinfo for CTraceFilterIgnoreActors
 D typeinfo for CTraceFilterIgnoreMoveableObjects
 D typeinfo for CTraceFilterLOS
 D typeinfo for CTraceFilterMelee
 D typeinfo for CTraceFilterNoCombatCharacters
 D typeinfo for CTraceFilterNoNPCsOrPlayer
 D typeinfo for CTraceFilterOnlyPhysicsDamage
 D typeinfo for CTraceFilterPhysics
 D typeinfo for CTraceFilterPlayerMovement
 D typeinfo for CTraceFilterPlayersNPCs
 D typeinfo for CTraceFilterPlayersNPCsPhysicsProps
 D typeinfo for CTraceFilterPushFinal
 D typeinfo for CTraceFilterPushMove
 D typeinfo for CTraceFilterSimple
 D typeinfo for CTraceFilterSimpleList
 D typeinfo for CTraceFilterSimpleListNoGhosts
 D typeinfo for CTraceFilterSimpleListNoInfectedOrGhosts
 D typeinfo for CTraceFilterSkipClassname
 D typeinfo for CTraceFilterSkipNPCs
 D typeinfo for CTraceFilterSkipTeam
 D typeinfo for CTraceFilterSkipTwoEntities
 D typeinfo for CTraceFilterSkipTwoEntitiesAndTeammates
 D typeinfo for CTraceFilterTongue
 D typeinfo for CTraceFilterValidForDecal
 D typeinfo for CTraceFilterViewOffset
 D typeinfo for CTraceFilterWalkableEntities
 D typeinfo for CTraceFilterWorldOnly
 D typeinfo for CTransitioningPlayer
 D typeinfo for CTriggerAutoCrouch
 D typeinfo for CTriggerBrush
 D typeinfo for CTriggerCDAudio
 D typeinfo for CTriggerCamera
 D typeinfo for CTriggerCameraMultiplayer
 D typeinfo for CTriggerEscape
 D typeinfo for CTriggerGravity
 D typeinfo for CTriggerHurt
 D typeinfo for CTriggerHurtGhost
 D typeinfo for CTriggerImpact
 D typeinfo for CTriggerLook
 D typeinfo for CTriggerMultiple
 D typeinfo for CTriggerOnce
 D typeinfo for CTriggerPlayerMovement
 D typeinfo for CTriggerProximity
 D typeinfo for CTriggerPush
 D typeinfo for CTriggerRemove
 D typeinfo for CTriggerSave
 D typeinfo for CTriggerSoundscape
 D typeinfo for CTriggerTeleport
 D typeinfo for CTriggerToggleSave
 D typeinfo for CTriggerTraceEnum
 D typeinfo for CTriggerVPhysicsMotion
 D typeinfo for CTriggerVolume
 D typeinfo for CTriggerWind
 D typeinfo for CTutorLesson
 D typeinfo for CUseTraceFilter
 D typeinfo for CUserCmd
 D typeinfo for CUtlCStringConversion
 D typeinfo for CUtlCachedFileData<CModelSoundsCache>
 D typeinfo for CUtlCharConversion
 D typeinfo for CUtlNoEscConversion
 D typeinfo for CUtlSymbolDataOps
 D typeinfo for CUtlVectorDataOps<CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer, int> >, 10>
 D typeinfo for CUtlVectorDataOps<CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >, 12>
 D typeinfo for CUtlVectorDataOps<CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity>, int> >, 13>
 D typeinfo for CUtlVectorDataOps<CUtlVector<CHandle<CBaseFlex>, CUtlMemory<CHandle<CBaseFlex>, int> >, 13>
 D typeinfo for CUtlVectorDataOps<CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer>, int> >, 13>
 D typeinfo for CUtlVectorDataOps<CUtlVector<CHandle<CFish>, CUtlMemory<CHandle<CFish>, int> >, 13>
 D typeinfo for CUtlVectorDataOps<CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity>, int> >, 13>
 D typeinfo for CUtlVectorDataOps<CUtlVector<CHandle<CSceneListManager>, CUtlMemory<CHandle<CSceneListManager>, int> >, 13>
 D typeinfo for CUtlVectorDataOps<CUtlVector<CHandle<CVGuiScreen>, CUtlMemory<CHandle<CVGuiScreen>, int> >, 13>
 D typeinfo for CUtlVectorDataOps<CUtlVector<CPassengerInfo, CUtlMemory<CPassengerInfo, int> >, 10>
 D typeinfo for CUtlVectorDataOps<CUtlVector<Relationship_t, CUtlMemory<Relationship_t, int> >, 10>
 D typeinfo for CUtlVectorDataOps<CUtlVector<ResponseContext_t, CUtlMemory<ResponseContext_t, int> >, 10>
 D typeinfo for CUtlVectorDataOps<CUtlVector<SaveRestoreBlockHeader_t, CUtlMemory<SaveRestoreBlockHeader_t, int> >, 10>
 D typeinfo for CUtlVectorDataOps<CUtlVector<globalentity_t, CUtlMemory<globalentity_t, int> >, 10>
 D typeinfo for CUtlVectorDataOps<CUtlVector<int, CUtlMemory<int, int> >, 5>
 D typeinfo for CUtlVectorDataOps<CUtlVector<magnetted_objects_t, CUtlMemory<magnetted_objects_t, int> >, 10>
 D typeinfo for CUtlVectorDataOps<CUtlVector<modifiedconvars_t, CUtlMemory<modifiedconvars_t, int> >, 10>
 D typeinfo for CUtlVectorDataOps<CUtlVector<physfollower_t, CUtlMemory<physfollower_t, int> >, 10>
 D typeinfo for CUtlVectorDataOps<CUtlVector<template_t, CUtlMemory<template_t, int> >, 10>
 D typeinfo for CUtlVectorDataOps<CUtlVector<thinkfunc_t, CUtlMemory<thinkfunc_t, int> >, 10>
 D typeinfo for CUtlVectorDataOps<CUtlVector<vehicle_crashsound_t, CUtlMemory<vehicle_crashsound_t, int> >, 10>
 D typeinfo for CUtlVectorDataOps<CUtlVector<vehicle_gear_t, CUtlMemory<vehicle_gear_t, int> >, 10>
 D typeinfo for CVGuiScreen
 D typeinfo for CVariantSaveDataOps
 D typeinfo for CVehicleSoundsParser
 D typeinfo for CVersusRandom
 D typeinfo for CVisibilityMonitor
 D typeinfo for CVoiceGameMgr
 D typeinfo for CVoiceGameMgrHelper
 D typeinfo for CVomit
 D typeinfo for CVomit::NetworkVar_m_attackDuration
 D typeinfo for CVomit::NetworkVar_m_nextSpray
 D typeinfo for CVomitHitAwardTemplate
 D typeinfo for CVomitParticle
 D typeinfo for CVomitStopAwardTemplate
 D typeinfo for CVoteController
 D typeinfo for CWC_UpdateIgnoreList
 D typeinfo for CWaterBullet
 D typeinfo for CWaterLODControl
 D typeinfo for CWeaponAmmoSpawn
 D typeinfo for CWeaponCSBase
 D typeinfo for CWeaponCSBaseGun
 D typeinfo for CWeaponExpertAwardTemplate
 D typeinfo for CWeaponHEGrenadeSpawn
 D typeinfo for CWeaponLOSFilter
 D typeinfo for CWeaponList
 D typeinfo for CWeaponSpawn
 D typeinfo for CWeaponSpawnEnum
 D typeinfo for CWeaponautoshotgunSpawn
 D typeinfo for CWeaponfirst_aid_kitSpawn
 D typeinfo for CWeaponhunting_rifleSpawn
 D typeinfo for CWeaponmolotovSpawn
 D typeinfo for CWeaponpain_pillsSpawn
 D typeinfo for CWeaponpipe_bombSpawn
 D typeinfo for CWeaponpistolSpawn
 D typeinfo for CWeaponpumpshotgunSpawn
 D typeinfo for CWeaponrifleSpawn
 D typeinfo for CWeaponsmgSpawn
 D typeinfo for CWeightButton
 D typeinfo for CWhiplashAwardTemplate
 D typeinfo for CWindowPane
 D typeinfo for CWitchHarassmentAwardTemplate
 D typeinfo for CWitchSlayerAwardTemplate
 D typeinfo for CWorld
 D typeinfo for CWorldItem
 D typeinfo for ChasePath
 D typeinfo for ChaseVictim
 D typeinfo for CheckpointDoorScan
 D typeinfo for ClientPrecachePrecache::CResourcePrecacher
 D typeinfo for ConCommand
 D typeinfo for ConCommandBase
 D typeinfo for ConVar
 D typeinfo for CountdownTimer
 D typeinfo for DebugMoveTo
 D typeinfo for DirectChasePath
 D typeinfo for Director
 D typeinfo for DustTrail
 D typeinfo for EditNav_PrecachePrecache::CResourcePrecacher
 D typeinfo for EffectsPrecachePrecache::CResourcePrecacher
 D typeinfo for EnsureTeamSize
 D typeinfo for EntityParticleTrailInfo_t
 D typeinfo for FileWeaponInfo_t
 D typeinfo for FilterDamageType
 D typeinfo for FilterInfectedClass
 D typeinfo for FilterTeam
 D typeinfo for HidingSpot
 D typeinfo for HulkSmashableEnumerator
 D typeinfo for Hunter
 D typeinfo for HunterAttack
 D typeinfo for HunterBehavior
 D typeinfo for HunterIntention
 D typeinfo for HunterLeapToCover
 D typeinfo for HunterLocomotion
 D typeinfo for HunterLungeAtVictim
 D typeinfo for IAchievement
 D typeinfo for IAchievementMgr
 D typeinfo for IAppSystem
 D typeinfo for IBaseCacheInfo
 D typeinfo for IBaseInterface
 D typeinfo for IBody
 D typeinfo for IBotController
 D typeinfo for IBotManager
 D typeinfo for IBreakableWithPropData
 D typeinfo for ICSPlayerAnimState
 D typeinfo for ICSPlayerAnimStateHelpers
 D typeinfo for IChoreoEventCallback
 D typeinfo for IChoreoStringPool
 D typeinfo for ICollideable
 D typeinfo for ICommandCallback
 D typeinfo for ICommandCompletionCallback
 D typeinfo for IConCommandBaseAccessor
 D typeinfo for IConVar
 D typeinfo for IContextualQuery
 D typeinfo for ICurveDataAccessor
 D typeinfo for IDecalEmitterSystem
 D typeinfo for IDrivableVehicle
 D typeinfo for IEffects
 D typeinfo for IEntityDataInstantiator
 D typeinfo for IEntityEnumerator
 D typeinfo for IEntityFactory
 D typeinfo for IEntityFactoryDictionary
 D typeinfo for IEntityFindFilter
 D typeinfo for IEntityListener
 D typeinfo for IEntitySaveUtils
 D typeinfo for IEventRegisterCallback
 D typeinfo for IGameEventListener2
 D typeinfo for IGameMovement
 D typeinfo for IGameSystem
 D typeinfo for IGameSystemPerFrame
 D typeinfo for IHLTVDirector
 D typeinfo for IHandleEntity
 D typeinfo for IIntention
 D typeinfo for ILagCompensationManager
 D typeinfo for ILocomotion
 D typeinfo for IMapEntityFilter
 D typeinfo for IMotionEvent
 D typeinfo for IMoveHelper
 D typeinfo for IMoveHelperServer
 D typeinfo for IMultiplayerPhysics
 D typeinfo for INPCPassengerCarrier
 D typeinfo for INavAvoidanceObstacle
 D typeinfo for INextBot
 D typeinfo for INextBotComponent
 D typeinfo for INextBotEntityFilter
 D typeinfo for INextBotEventResponder
 D typeinfo for INextBotPlayerInput
 D typeinfo for INextBotReply
 D typeinfo for INotify
 D typeinfo for IParentPropInteraction
 D typeinfo for IParticleOperatorDefinition
 D typeinfo for IParticleSystemQuery
 D typeinfo for IPartitionEnumerator
 D typeinfo for IPartitionQueryCallback
 D typeinfo for IPathCost
 D typeinfo for IPhysSaveRestoreManager
 D typeinfo for IPhysicsCollisionEvent
 D typeinfo for IPhysicsCollisionSolver
 D typeinfo for IPhysicsConstraintEvent
 D typeinfo for IPhysicsGameTrace
 D typeinfo for IPhysicsObjectEvent
 D typeinfo for IPhysicsPlayerControllerEvent
 D typeinfo for IPlayerAnimState
 D typeinfo for IPlayerFunctor
 D typeinfo for IPlayerInfo
 D typeinfo for IPlayerInfoManager
 D typeinfo for IPlayerPickupVPhysics
 D typeinfo for IPluginHelpersCheck
 D typeinfo for IPositionWatcher
 D typeinfo for IPredictionSystem
 D typeinfo for IRecipientFilter
 D typeinfo for IRefCounted
 D typeinfo for IRegistry
 D typeinfo for IResourcePrecacher
 D typeinfo for IResponseFilter
 D typeinfo for IResponseSystem
 D typeinfo for IRestore
 D typeinfo for IRotorWashShooter
 D typeinfo for ISave
 D typeinfo for ISaveRestoreBlockHandler
 D typeinfo for ISaveRestoreBlockSet
 D typeinfo for ISaveRestoreOps
 D typeinfo for ISceneTokenProcessor
 D typeinfo for IScorer
 D typeinfo for IServerDLLSharedAppSystems
 D typeinfo for IServerEntity
 D typeinfo for IServerGameClients
 D typeinfo for IServerGameDLL
 D typeinfo for IServerGameEnts
 D typeinfo for IServerGameTags
 D typeinfo for IServerNetworkable
 D typeinfo for IServerTools
 D typeinfo for IServerUnknown
 D typeinfo for IServerVehicle
 D typeinfo for ITempEntsSystem
 D typeinfo for ITerrorPlayerFunctor
 D typeinfo for IToolFrameworkServer
 D typeinfo for ITraceFilter
 D typeinfo for IVPhysicsKeyHandler
 D typeinfo for IVPhysicsWatcher
 D typeinfo for IVehicle
 D typeinfo for IVision
 D typeinfo for IVoiceGameMgrHelper
 D typeinfo for IWatcherCallback
 D typeinfo for Infected
 D typeinfo for InfectedAlert
 D typeinfo for InfectedAttack
 D typeinfo for InfectedBehavior
 D typeinfo for InfectedBlinded
 D typeinfo for InfectedBurn
 D typeinfo for InfectedChangePosture
 D typeinfo for InfectedChasePath
 D typeinfo for InfectedDying
 D typeinfo for InfectedExecAction
 D typeinfo for InfectedIntention
 D typeinfo for InfectedLeanOnWall
 D typeinfo for InfectedLieDown
 D typeinfo for InfectedPathCost
 D typeinfo for InfectedShoved
 D typeinfo for InfectedSitDown
 D typeinfo for InfectedStaggerAround
 D typeinfo for InfectedStandDazed
 D typeinfo for InfectedStandingActivity
 D typeinfo for InfectedWander
 D typeinfo for InfoChangelevel
 D typeinfo for IntervalTimer
 D typeinfo for LostVictim
 D typeinfo for MovieExplosion
 D typeinfo for Music
 D typeinfo for NextBotCombatCharacter
 D typeinfo for NextBotManager
 D typeinfo for NextBotPlayer<CTerrorPlayer>
 D typeinfo for NextBotTraceFilterIgnoreActors
 D typeinfo for NextBotTraceFilterOnlyActors
 D typeinfo for NextBotTraversableTraceFilter
 D typeinfo for NextBotVisionTraceFilter
 D typeinfo for ParticleSmokeGrenade
 D typeinfo for Path
 D typeinfo for PathFollower
 D typeinfo for PhysFrictionEffectPrecache::CResourcePrecacher
 D typeinfo for PlayerBody
 D typeinfo for PlayerLocomotion
 D typeinfo for PlayerReporter
 D typeinfo for PrecachePointCommentaryNodePrecache::CResourcePrecacher
 D typeinfo for PressAltFireButtonReply
 D typeinfo for PressFireButtonReply
 D typeinfo for PressJumpButtonReply
 D typeinfo for PunchVictim
 D typeinfo for RocketTrail
 D typeinfo for SavedEntity
 D typeinfo for SavedTerrorGun
 D typeinfo for SavedWeapon
 D typeinfo for SavedWeaponSpawn
 D typeinfo for SendProp
 D typeinfo for SmokeTrail
 D typeinfo for Smoker
 D typeinfo for SmokerAttack
 D typeinfo for SmokerBehavior
 D typeinfo for SmokerIntention
 D typeinfo for SmokerLocomotion
 D typeinfo for SmokerMoveToAttackPosition
 D typeinfo for SmokerPathCost
 D typeinfo for SmokerRetreatToCover
 D typeinfo for SmokerTongueVictim
 D typeinfo for SporeExplosion
 D typeinfo for SporeTrail
 D typeinfo for SurvivorAmbushBoomer
 D typeinfo for SurvivorAttack
 D typeinfo for SurvivorBehavior
 D typeinfo for SurvivorBody
 D typeinfo for SurvivorBot
 D typeinfo for SurvivorBotMeleeOnReply
 D typeinfo for SurvivorBotPathCost
 D typeinfo for SurvivorBotUseOnReply
 D typeinfo for SurvivorCheckpointLeaving
 D typeinfo for SurvivorCheckpointReached
 D typeinfo for SurvivorCloseDoor
 D typeinfo for SurvivorCollectObject
 D typeinfo for SurvivorDebugApproach
 D typeinfo for SurvivorDislodgeVictim
 D typeinfo for SurvivorElevatorEnter
 D typeinfo for SurvivorElevatorRide
 D typeinfo for SurvivorEscapeFlames
 D typeinfo for SurvivorEscapeLadderAmbush
 D typeinfo for SurvivorGivePillsToFriend
 D typeinfo for SurvivorHealFriend
 D typeinfo for SurvivorHealSelf
 D typeinfo for SurvivorIntention
 D typeinfo for SurvivorLegsApproach
 D typeinfo for SurvivorLegsApproachElevator
 D typeinfo for SurvivorLegsBattleStations
 D typeinfo for SurvivorLegsCoverFriendInCombat
 D typeinfo for SurvivorLegsCoverOrphan
 D typeinfo for SurvivorLegsEnterRescueVehicle
 D typeinfo for SurvivorLegsMeetRescueVehicleArrival
 D typeinfo for SurvivorLegsMoveOn
 D typeinfo for SurvivorLegsRegroup
 D typeinfo for SurvivorLegsRetreat
 D typeinfo for SurvivorLegsStayClose
 D typeinfo for SurvivorLegsWait
 D typeinfo for SurvivorLiberateBesiegedFriend
 D typeinfo for SurvivorLocomotion
 D typeinfo for SurvivorRescueBarricadedFriend
 D typeinfo for SurvivorReviveFriend
 D typeinfo for SurvivorTakePills
 D typeinfo for SurvivorTeamSituation
 D typeinfo for SurvivorUseObject
 D typeinfo for SurvivorVision
 D typeinfo for Tank
 D typeinfo for TankAttack
 D typeinfo for TankBehavior
 D typeinfo for TankIdle
 D typeinfo for TankIntention
 D typeinfo for TankLocomotion
 D typeinfo for TargetScan<CBaseCombatCharacter>
 D typeinfo for TargetScan<CTerrorPlayer>
 D typeinfo for TerrorNavArea
 D typeinfo for TerrorNavMesh
 D typeinfo for TongueTargetScan<CTerrorPlayer>
 D typeinfo for TraceFilterIgnoreInfected
 D typeinfo for WeaponResourcesPrecache::CResourcePrecacher
 D typeinfo for Witch
 D typeinfo for WitchAngry
 D typeinfo for WitchAttack
 D typeinfo for WitchBehavior
 D typeinfo for WitchBody
 D typeinfo for WitchBurn
 D typeinfo for WitchDying
 D typeinfo for WitchExecAction
 D typeinfo for WitchIdle
 D typeinfo for WitchIntention
 D typeinfo for WitchKillIncapVictim
 D typeinfo for WitchLocomotion
 D typeinfo for WitchRetreat
 D typeinfo for WitchSlashEnumerator
 D typeinfo for WitchVision
 D typeinfo for ZombieBotBody
 D typeinfo for ZombieBotCollisionTraceFilter
 D typeinfo for ZombieBotLocomotion
 D typeinfo for ZombieBotVision
 D typeinfo for ZombieManager
 D typeinfo for ability_throwPrecache::CResourcePrecacher
 D typeinfo for ability_vomitPrecache::CResourcePrecacher
 D typeinfo for audioparams_t
 D typeinfo for boomerPrecache::CResourcePrecacher
 D typeinfo for entityflamePrecache::CResourcePrecacher
 D typeinfo for escape_routePrecache::CResourcePrecacher
 D typeinfo for fogparams_t
 D typeinfo for fogplayerparams_t
 D typeinfo for hunterPrecache::CResourcePrecacher
 D typeinfo for infectedPrecache::CResourcePrecacher
 D typeinfo for infernoPrecache::CResourcePrecacher
 D typeinfo for info_survivor_rescuePrecache::CResourcePrecacher
 D typeinfo for locksound_t
 D typeinfo for molotov_projectilePrecache::CResourcePrecacher
 D typeinfo for pipe_bomb_projectilePrecache::CResourcePrecacher
 D typeinfo for playerPrecache::CResourcePrecacher
 D typeinfo for predicted_viewmodelPrecache::CResourcePrecacher
 D typeinfo for sky3dparams_t
 D typeinfo for sky3dparams_t::NetworkVar_fog
 D typeinfo for smokerPrecache::CResourcePrecacher
 D typeinfo for spraycanPrecache::CResourcePrecacher
 D typeinfo for tankPrecache::CResourcePrecacher
 D typeinfo for tank_rockPrecache::CResourcePrecacher
 D typeinfo for vehicle_crashsound_t
 D typeinfo for vehicle_gear_t
 D typeinfo for vehiclesounds_t
 D typeinfo for vgui_screenPrecache::CResourcePrecacher
 D typeinfo for weapon_autoshotgunPrecache::CResourcePrecacher
 D typeinfo for weapon_boomer_clawPrecache::CResourcePrecacher
 D typeinfo for weapon_first_aid_kitPrecache::CResourcePrecacher
 D typeinfo for weapon_gascanPrecache::CResourcePrecacher
 D typeinfo for weapon_hunter_clawPrecache::CResourcePrecacher
 D typeinfo for weapon_hunting_riflePrecache::CResourcePrecacher
 D typeinfo for weapon_molotovPrecache::CResourcePrecacher
 D typeinfo for weapon_oxygentankPrecache::CResourcePrecacher
 D typeinfo for weapon_pain_pillsPrecache::CResourcePrecacher
 D typeinfo for weapon_pipe_bombPrecache::CResourcePrecacher
 D typeinfo for weapon_pistolPrecache::CResourcePrecacher
 D typeinfo for weapon_propanetankPrecache::CResourcePrecacher
 D typeinfo for weapon_pumpshotgunPrecache::CResourcePrecacher
 D typeinfo for weapon_riflePrecache::CResourcePrecacher
 D typeinfo for weapon_smgPrecache::CResourcePrecacher
 D typeinfo for weapon_smoker_clawPrecache::CResourcePrecacher
 D typeinfo for weapon_tank_clawPrecache::CResourcePrecacher
 D typeinfo for witchPrecache::CResourcePrecacher
 D usermessages
 D variantFuncs
 D variant_t::Entity() const::hNull
 D variant_t::m_SaveBool
 D variant_t::m_SaveColor
 D variant_t::m_SaveEHandle
 D variant_t::m_SaveFloat
 D variant_t::m_SaveInt
 D variant_t::m_SavePositionVector
 D variant_t::m_SaveString
 D variant_t::m_SaveVector
 D vehicle_crashsound_t::m_DataMap
 D vehicle_gear_t::m_DataMap
 D vehiclesound_parsenames
 D vehiclesounds_t::m_DataMap
 D vtable for Action<Boomer>
 D vtable for Action<Hunter>
 D vtable for Action<Infected>
 D vtable for Action<Smoker>
 D vtable for Action<SurvivorBot>
 D vtable for Action<Tank>
 D vtable for Behavior<Boomer>
 D vtable for Behavior<Hunter>
 D vtable for Behavior<Infected>
 D vtable for Behavior<Smoker>
 D vtable for Behavior<SurvivorBot>
 D vtable for Behavior<Tank>
 D vtable for BehaviorBackUp<SurvivorBot>
 D vtable for BehaviorMoveTo<Boomer, InfectedPathCost>
 D vtable for BehaviorMoveTo<Hunter, InfectedPathCost>
 D vtable for BehaviorMoveTo<Smoker, InfectedPathCost>
 D vtable for BehaviorMoveTo<Tank, InfectedPathCost>
 D vtable for Boomer
 D vtable for BoomerAttack
 D vtable for BoomerBehavior
 D vtable for BoomerFilter
 D vtable for BoomerHide
 D vtable for BoomerIntention
 D vtable for BoomerLocomotion
 D vtable for BoomerRetreatToCover
 D vtable for BoomerVomitOnVictim
 D vtable for BossZombiePlayerBot
 D vtable for CAISound
 D vtable for CAI_ChangeHintGroup
 D vtable for CAI_ChangeTarget
 D vtable for CAI_Expresser
 D vtable for CAI_ExpresserWithFollowup
 D vtable for CAbandonmentAwardTemplate
 D vtable for CAbusiveBehaviorAwardTemplate
 D vtable for CAchievementMsgHandler
 D vtable for CAchievementSaveRestoreBlockHandler
 D vtable for CActivityDataOps
 D vtable for CAimTargetManager
 D vtable for CAmbientGeneric
 D vtable for CAmbushAwardTemplate
 D vtable for CAmmoDef
 D vtable for CAnchorList
 D vtable for CAreaPortal
 D vtable for CAssaultRifle
 D vtable for CAutoGameSystem
 D vtable for CAutoGameSystemPerFrame
 D vtable for CAutoShotgun
 D vtable for CAwardTemplate
 D vtable for CBaseAbility
 D vtable for CBaseAbility::NetworkVar_m_activationSupressedTimer
 D vtable for CBaseAbility::NetworkVar_m_nextActivationTimer
 D vtable for CBaseAchievement
 D vtable for CBaseAnimating
 D vtable for CBaseAnimatingOverlay
 D vtable for CBaseButton
 D vtable for CBaseCSGrenade
 D vtable for CBaseCombatCharacter
 D vtable for CBaseCombatWeapon
 D vtable for CBaseDMStart
 D vtable for CBaseDoor
 D vtable for CBaseEntity
 D vtable for CBaseEntity::NetworkVar_m_Collision
 D vtable for CBaseEntityClassList
 D vtable for CBaseEntityList
 D vtable for CBaseFilter
 D vtable for CBaseFire
 D vtable for CBaseFlex
 D vtable for CBaseGameStats
 D vtable for CBaseGameStats_Driver
 D vtable for CBaseGrenade
 D vtable for CBaseIssue
 D vtable for CBaseMoveBehavior
 D vtable for CBaseMultiplayerPlayer
 D vtable for CBaseParticleEntity
 D vtable for CBasePlatTrain
 D vtable for CBasePlayer
 D vtable for CBasePlayer::NetworkVar_m_Local
 D vtable for CBasePlayer::NetworkVar_m_PlayerFog
 D vtable for CBasePlayer::NetworkVar_pl
 D vtable for CBasePlayerAnimState
 D vtable for CBasePropDoor
 D vtable for CBaseResourcePrecacher
 D vtable for CBaseServerVehicle
 D vtable for CBaseShotgun
 D vtable for CBaseTempEntity
 D vtable for CBaseToggle
 D vtable for CBaseTrigger
 D vtable for CBaseViewModel
 D vtable for CBeam
 D vtable for CBeamSpotlight
 D vtable for CBlood
 D vtable for CBloodSplat
 D vtable for CBoneFollower
 D vtable for CBoomerBlunderAwardTemplate
 D vtable for CBoomerClaw
 D vtable for CBoomerComboAwardTemplate
 D vtable for CBotCmd
 D vtable for CBotDoorEnumerator
 D vtable for CBreakModelsPrecached
 D vtable for CBreakParser
 D vtable for CBreakable
 D vtable for CBreakableProp
 D vtable for CBreakableSurface
 D vtable for CBroadcastRecipientFilter
 D vtable for CBubbling
 D vtable for CBulletsTraceFilter
 D vtable for CButtonTimed
 D vtable for CCSGameMovement
 D vtable for CCSGameRules
 D vtable for CCSGameRulesProxy
 D vtable for CCSHLTVDirector
 D vtable for CCSPlayer
 D vtable for CCSPlayerAnimState
 D vtable for CCSPlayerMove
 D vtable for CCSRagdoll
 D vtable for CCSTeam
 D vtable for CCSWeaponInfo
 D vtable for CCallback<CTerrorGameRules, GSGameplayStats_t, true>
 D vtable for CCallback<CTerrorPlayer, GSClientAchievementStatus_t, true>
 D vtable for CCarGlassProp
 D vtable for CCarProp
 D vtable for CChangeAllTalkIssue
 D vtable for CChangeChapterIssue
 D vtable for CChangeDifficultyIssue
 D vtable for CChangeMissionIssue
 D vtable for CCheckClient
 D vtable for CCheckpointCompleteAwardTemplate
 D vtable for CChildOperatorDefinition
 D vtable for CChoreoEvent
 D vtable for CChoreoScene
 D vtable for CChoreoStringPool
 D vtable for CClaw
 D vtable for CClawHitAwardTemplate
 D vtable for CCleanupDefaultRelationShips
 D vtable for CClientPath
 D vtable for CCollisionEvent
 D vtable for CCollisionProperty
 D vtable for CColorCorrection
 D vtable for CColorCorrectionSystem
 D vtable for CColorCorrectionVolume
 D vtable for CCombatCharVisCache
 D vtable for CCommentaryAuto
 D vtable for CCommentaryDummy
 D vtable for CCommentarySystem
 D vtable for CCommentaryViewPosition
 D vtable for CCommentaryZombieSpawner
 D vtable for CCommentary_SaveRestoreBlockHandler
 D vtable for CConceptHistoriesDataOps
 D vtable for CConstantForceController
 D vtable for CConstraintAnchor
 D vtable for CCopyRecipientFilter
 D vtable for CDarkMissionAwardTemplate
 D vtable for CDataManager<CBoneCache, bonecacheparams_t, CBoneCache*, CThreadFastMutex>
 D vtable for CDataManagerBase
 D vtable for CDataObjectAccessSystem
 D vtable for CDeathFallCamera
 D vtable for CDebugHistory
 D vtable for CDecal
 D vtable for CDecalEmitterSystem
 D vtable for CDefaultAccessor
 D vtable for CDefaultParticleSystemQuery
 D vtable for CDefaultResponseSystem
 D vtable for CDefaultResponseSystemSaveRestoreBlockHandler
 D vtable for CDetailBlocker
 D vtable for CDevShotSystem
 D vtable for CDirtySpatialPartitionEntityList
 D vtable for CDoomsdayAwardTemplate
 D vtable for CDynamicLight
 D vtable for CDynamicProp
 D vtable for CEarlyMourningAwardTemplate
 D vtable for CEffectsServer
 D vtable for CEmbers
 D vtable for CEmptyConVar
 D vtable for CEnableMotionFixup
 D vtable for CEntFireAutoCompletionFunctor
 D vtable for CEntityBlocker
 D vtable for CEntityClassList<CPhysicsNPCSolver>
 D vtable for CEntityClassList<CSkyCamera>
 D vtable for CEntityDataInstantiator<CWatcherList>
 D vtable for CEntityDataInstantiator<ModelWidthScale>
 D vtable for CEntityDataInstantiator<StepSimulationData>
 D vtable for CEntityDataInstantiator<groundlink_t>
 D vtable for CEntityDataInstantiator<physicspushlist_t>
 D vtable for CEntityDataInstantiator<touchlink_t>
 D vtable for CEntityDataInstantiator<vphysicsupdateai_t>
 D vtable for CEntityDissolve
 D vtable for CEntityFactory<Boomer>
 D vtable for CEntityFactory<CAISound>
 D vtable for CEntityFactory<CAI_ChangeHintGroup>
 D vtable for CEntityFactory<CAI_ChangeTarget>
 D vtable for CEntityFactory<CAmbientGeneric>
 D vtable for CEntityFactory<CAreaPortal>
 D vtable for CEntityFactory<CAssaultRifle>
 D vtable for CEntityFactory<CAutoShotgun>
 D vtable for CEntityFactory<CBaseButton>
 D vtable for CEntityFactory<CBaseCSGrenade>
 D vtable for CEntityFactory<CBaseDMStart>
 D vtable for CEntityFactory<CBaseDoor>
 D vtable for CEntityFactory<CBaseEntity>
 D vtable for CEntityFactory<CBaseFilter>
 D vtable for CEntityFactory<CBaseFlex>
 D vtable for CEntityFactory<CBaseGrenade>
 D vtable for CEntityFactory<CBaseMoveBehavior>
 D vtable for CEntityFactory<CBaseTrigger>
 D vtable for CEntityFactory<CBaseViewModel>
 D vtable for CEntityFactory<CBeam>
 D vtable for CEntityFactory<CBeamSpotlight>
 D vtable for CEntityFactory<CBlood>
 D vtable for CEntityFactory<CBoneFollower>
 D vtable for CEntityFactory<CBoomerClaw>
 D vtable for CEntityFactory<CBreakable>
 D vtable for CEntityFactory<CBreakableSurface>
 D vtable for CEntityFactory<CBubbling>
 D vtable for CEntityFactory<CButtonTimed>
 D vtable for CEntityFactory<CCSGameRulesProxy>
 D vtable for CEntityFactory<CCSRagdoll>
 D vtable for CEntityFactory<CCSTeam>
 D vtable for CEntityFactory<CCarGlassProp>
 D vtable for CEntityFactory<CCarProp>
 D vtable for CEntityFactory<CClientPath>
 D vtable for CEntityFactory<CColorCorrection>
 D vtable for CEntityFactory<CColorCorrectionVolume>
 D vtable for CEntityFactory<CCommentaryAuto>
 D vtable for CEntityFactory<CCommentaryDummy>
 D vtable for CEntityFactory<CCommentaryViewPosition>
 D vtable for CEntityFactory<CCommentaryZombieSpawner>
 D vtable for CEntityFactory<CConstraintAnchor>
 D vtable for CEntityFactory<CDeathFallCamera>
 D vtable for CEntityFactory<CDebugHistory>
 D vtable for CEntityFactory<CDecal>
 D vtable for CEntityFactory<CDetailBlocker>
 D vtable for CEntityFactory<CDynamicLight>
 D vtable for CEntityFactory<CDynamicProp>
 D vtable for CEntityFactory<CEmbers>
 D vtable for CEntityFactory<CEnableMotionFixup>
 D vtable for CEntityFactory<CEntityBlocker>
 D vtable for CEntityFactory<CEntityDissolve>
 D vtable for CEntityFactory<CEntityFlame>
 D vtable for CEntityFactory<CEntityParticleTrail>
 D vtable for CEntityFactory<CEnvBeam>
 D vtable for CEntityFactory<CEnvBeverage>
 D vtable for CEntityFactory<CEnvCredits>
 D vtable for CEntityFactory<CEnvDOFController>
 D vtable for CEntityFactory<CEnvDetailController>
 D vtable for CEntityFactory<CEnvDustPuff>
 D vtable for CEntityFactory<CEnvEffectsScript>
 D vtable for CEntityFactory<CEnvEntityMaker>
 D vtable for CEntityFactory<CEnvExplosion>
 D vtable for CEntityFactory<CEnvFade>
 D vtable for CEntityFactory<CEnvFireSensor>
 D vtable for CEntityFactory<CEnvFireSource>
 D vtable for CEntityFactory<CEnvFunnel>
 D vtable for CEntityFactory<CEnvGlobal>
 D vtable for CEntityFactory<CEnvGunfire>
 D vtable for CEntityFactory<CEnvHudHint>
 D vtable for CEntityFactory<CEnvLaser>
 D vtable for CEntityFactory<CEnvLight>
 D vtable for CEntityFactory<CEnvMicrophone>
 D vtable for CEntityFactory<CEnvMuzzleFlash>
 D vtable for CEntityFactory<CEnvParticleScript>
 D vtable for CEntityFactory<CEnvPlayerSurfaceTrigger>
 D vtable for CEntityFactory<CEnvProjectedTexture>
 D vtable for CEntityFactory<CEnvQuadraticBeam>
 D vtable for CEntityFactory<CEnvRockLauncher>
 D vtable for CEntityFactory<CEnvScreenEffect>
 D vtable for CEntityFactory<CEnvScreenOverlay>
 D vtable for CEntityFactory<CEnvShake>
 D vtable for CEntityFactory<CEnvShooter>
 D vtable for CEntityFactory<CEnvSoundscape>
 D vtable for CEntityFactory<CEnvSoundscapeProxy>
 D vtable for CEntityFactory<CEnvSoundscapeTriggerable>
 D vtable for CEntityFactory<CEnvSpark>
 D vtable for CEntityFactory<CEnvSplash>
 D vtable for CEntityFactory<CEnvTonemapController>
 D vtable for CEntityFactory<CEnvTracer>
 D vtable for CEntityFactory<CEnvViewPunch>
 D vtable for CEntityFactory<CEnvWeaponfire>
 D vtable for CEntityFactory<CEnvWind>
 D vtable for CEntityFactory<CEnvZoom>
 D vtable for CEntityFactory<CEnv_Blocker>
 D vtable for CEntityFactory<CEscapeRoute>
 D vtable for CEntityFactory<CEventQueueSaveLoadProxy>
 D vtable for CEntityFactory<CFilterClass>
 D vtable for CEntityFactory<CFilterContext>
 D vtable for CEntityFactory<CFilterEnemy>
 D vtable for CEntityFactory<CFilterMassGreater>
 D vtable for CEntityFactory<CFilterModel>
 D vtable for CEntityFactory<CFilterMultiple>
 D vtable for CEntityFactory<CFilterName>
 D vtable for CEntityFactory<CFinaleTrigger>
 D vtable for CEntityFactory<CFire>
 D vtable for CEntityFactory<CFireSmoke>
 D vtable for CEntityFactory<CFireTrail>
 D vtable for CEntityFactory<CFirstAidKit>
 D vtable for CEntityFactory<CFish>
 D vtable for CEntityFactory<CFishPool>
 D vtable for CEntityFactory<CFlexExpresser>
 D vtable for CEntityFactory<CFogController>
 D vtable for CEntityFactory<CFogTrigger>
 D vtable for CEntityFactory<CFogVolume>
 D vtable for CEntityFactory<CFuelBarrelPiece>
 D vtable for CEntityFactory<CFuelBarrelProp>
 D vtable for CEntityFactory<CFuncAreaPortalWindow>
 D vtable for CEntityFactory<CFuncBrush>
 D vtable for CEntityFactory<CFuncConveyor>
 D vtable for CEntityFactory<CFuncElevator>
 D vtable for CEntityFactory<CFuncFireExtinguisher>
 D vtable for CEntityFactory<CFuncIllusionary>
 D vtable for CEntityFactory<CFuncLadder>
 D vtable for CEntityFactory<CFuncLadderEndPoint>
 D vtable for CEntityFactory<CFuncMoveLinear>
 D vtable for CEntityFactory<CFuncNavAttributeRegion>
 D vtable for CEntityFactory<CFuncNavBlocker>
 D vtable for CEntityFactory<CFuncNavObstruction>
 D vtable for CEntityFactory<CFuncNavStairsToggle>
 D vtable for CEntityFactory<CFuncOccluder>
 D vtable for CEntityFactory<CFuncPlat>
 D vtable for CEntityFactory<CFuncPlatRot>
 D vtable for CEntityFactory<CFuncPlayerInfectedClip>
 D vtable for CEntityFactory<CFuncRagdollFader>
 D vtable for CEntityFactory<CFuncReflectiveGlass>
 D vtable for CEntityFactory<CFuncRotating>
 D vtable for CEntityFactory<CFuncSimpleLadder>
 D vtable for CEntityFactory<CFuncSmokeVolume>
 D vtable for CEntityFactory<CFuncSpawnVolume>
 D vtable for CEntityFactory<CFuncTankTrain>
 D vtable for CEntityFactory<CFuncTrackAuto>
 D vtable for CEntityFactory<CFuncTrackChange>
 D vtable for CEntityFactory<CFuncTrackTrain>
 D vtable for CEntityFactory<CFuncTrain>
 D vtable for CEntityFactory<CFuncTrainControls>
 D vtable for CEntityFactory<CFuncVPhysicsClip>
 D vtable for CEntityFactory<CFuncVehicleClip>
 D vtable for CEntityFactory<CFuncWall>
 D vtable for CEntityFactory<CFuncWallToggle>
 D vtable for CEntityFactory<CFunc_DustCloud>
 D vtable for CEntityFactory<CFunc_DustMotes>
 D vtable for CEntityFactory<CFunc_LOD>
 D vtable for CEntityFactory<CGameEnd>
 D vtable for CEntityFactory<CGameGibManager>
 D vtable for CEntityFactory<CGamePlayerEquip>
 D vtable for CEntityFactory<CGamePlayerTeam>
 D vtable for CEntityFactory<CGamePlayerZone>
 D vtable for CEntityFactory<CGameScore>
 D vtable for CEntityFactory<CGameText>
 D vtable for CEntityFactory<CGameUI>
 D vtable for CEntityFactory<CGameWeaponManager>
 D vtable for CEntityFactory<CGasCan>
 D vtable for CEntityFactory<CGenericFlexCycler>
 D vtable for CEntityFactory<CGib>
 D vtable for CEntityFactory<CGibShooter>
 D vtable for CEntityFactory<CGunTarget>
 D vtable for CEntityFactory<CHandleDummy>
 D vtable for CEntityFactory<CHandleTest>
 D vtable for CEntityFactory<CHunterClaw>
 D vtable for CEntityFactory<CInfectedZooMaker>
 D vtable for CEntityFactory<CInfectedZooPuppet>
 D vtable for CEntityFactory<CInferno>
 D vtable for CEntityFactory<CInfoDirector>
 D vtable for CEntityFactory<CInfoElevatorFloor>
 D vtable for CEntityFactory<CInfoGameEventProxy>
 D vtable for CEntityFactory<CInfoGameMode>
 D vtable for CEntityFactory<CInfoGoalInfectedChase>
 D vtable for CEntityFactory<CInfoIntermission>
 D vtable for CEntityFactory<CInfoLadderDismount>
 D vtable for CEntityFactory<CInfoMassCenter>
 D vtable for CEntityFactory<CInfoOverlayAccessor>
 D vtable for CEntityFactory<CInfoRemarkable>
 D vtable for CEntityFactory<CInfoTarget>
 D vtable for CEntityFactory<CInfoViewParameters>
 D vtable for CEntityFactory<CInfoZombieSpawn>
 D vtable for CEntityFactory<CInstancedSceneEntity>
 D vtable for CEntityFactory<CItemSoda>
 D vtable for CEntityFactory<CKeepUpright>
 D vtable for CEntityFactory<CLight>
 D vtable for CEntityFactory<CLightGlow>
 D vtable for CEntityFactory<CLogicActiveAutosave>
 D vtable for CEntityFactory<CLogicAuto>
 D vtable for CEntityFactory<CLogicAutosave>
 D vtable for CEntityFactory<CLogicBranch>
 D vtable for CEntityFactory<CLogicBranchList>
 D vtable for CEntityFactory<CLogicCase>
 D vtable for CEntityFactory<CLogicCollisionPair>
 D vtable for CEntityFactory<CLogicCompare>
 D vtable for CEntityFactory<CLogicCompareInteger>
 D vtable for CEntityFactory<CLogicLineToEntity>
 D vtable for CEntityFactory<CLogicMeasureMovement>
 D vtable for CEntityFactory<CLogicNavigation>
 D vtable for CEntityFactory<CLogicRelay>
 D vtable for CEntityFactory<CLunge>
 D vtable for CEntityFactory<CMapInfo>
 D vtable for CEntityFactory<CMapInfoVersus>
 D vtable for CEntityFactory<CMaterialModifyControl>
 D vtable for CEntityFactory<CMathColorBlend>
 D vtable for CEntityFactory<CMathCounter>
 D vtable for CEntityFactory<CMathRemap>
 D vtable for CEntityFactory<CMessage>
 D vtable for CEntityFactory<CMessageEntity>
 D vtable for CEntityFactory<CMolotov>
 D vtable for CEntityFactory<CMolotovProjectile>
 D vtable for CEntityFactory<CMomentaryRotButton>
 D vtable for CEntityFactory<CMovementSpeedMod>
 D vtable for CEntityFactory<CMultiSource>
 D vtable for CEntityFactory<CNullEntity>
 D vtable for CEntityFactory<COrnamentProp>
 D vtable for CEntityFactory<COuttroStats>
 D vtable for CEntityFactory<COxygenTank>
 D vtable for CEntityFactory<CPainPills>
 D vtable for CEntityFactory<CParticleFire>
 D vtable for CEntityFactory<CParticleLight>
 D vtable for CEntityFactory<CParticlePerformanceMonitor>
 D vtable for CEntityFactory<CParticleSystem>
 D vtable for CEntityFactory<CPathCorner>
 D vtable for CEntityFactory<CPathCornerCrash>
 D vtable for CEntityFactory<CPathKeyFrame>
 D vtable for CEntityFactory<CPathTrack>
 D vtable for CEntityFactory<CPhysBallSocket>
 D vtable for CEntityFactory<CPhysBox>
 D vtable for CEntityFactory<CPhysBoxMultiplayer>
 D vtable for CEntityFactory<CPhysConstraintSystem>
 D vtable for CEntityFactory<CPhysConvert>
 D vtable for CEntityFactory<CPhysExplosion>
 D vtable for CEntityFactory<CPhysFixed>
 D vtable for CEntityFactory<CPhysHinge>
 D vtable for CEntityFactory<CPhysImpact>
 D vtable for CEntityFactory<CPhysLength>
 D vtable for CEntityFactory<CPhysMagnet>
 D vtable for CEntityFactory<CPhysMotor>
 D vtable for CEntityFactory<CPhysPulley>
 D vtable for CEntityFactory<CPhysSlideConstraint>
 D vtable for CEntityFactory<CPhysSphere>
 D vtable for CEntityFactory<CPhysThruster>
 D vtable for CEntityFactory<CPhysTorque>
 D vtable for CEntityFactory<CPhysicsCannister>
 D vtable for CEntityFactory<CPhysicsEntitySolver>
 D vtable for CEntityFactory<CPhysicsNPCSolver>
 D vtable for CEntityFactory<CPhysicsProp>
 D vtable for CEntityFactory<CPhysicsPropRespawnable>
 D vtable for CEntityFactory<CPhysicsSpring>
 D vtable for CEntityFactory<CPhysicsWire>
 D vtable for CEntityFactory<CPipeBomb>
 D vtable for CEntityFactory<CPipeBombProjectile>
 D vtable for CEntityFactory<CPistol>
 D vtable for CEntityFactory<CPlasma>
 D vtable for CEntityFactory<CPlayerPickupController>
 D vtable for CEntityFactory<CPlayerResource>
 D vtable for CEntityFactory<CPointAngleSensor>
 D vtable for CEntityFactory<CPointAngularVelocitySensor>
 D vtable for CEntityFactory<CPointBonusMapsAccessor>
 D vtable for CEntityFactory<CPointBroadcastClientCommand>
 D vtable for CEntityFactory<CPointClientCommand>
 D vtable for CEntityFactory<CPointCommentaryNode>
 D vtable for CEntityFactory<CPointDevShotCamera>
 D vtable for CEntityFactory<CPointEntity>
 D vtable for CEntityFactory<CPointEntityFinder>
 D vtable for CEntityFactory<CPointGamestatsCounter>
 D vtable for CEntityFactory<CPointHurt>
 D vtable for CEntityFactory<CPointPlayerMoveConstraint>
 D vtable for CEntityFactory<CPointProximitySensor>
 D vtable for CEntityFactory<CPointPush>
 D vtable for CEntityFactory<CPointServerCommand>
 D vtable for CEntityFactory<CPointSpotlight>
 D vtable for CEntityFactory<CPointTeleport>
 D vtable for CEntityFactory<CPointTemplate>
 D vtable for CEntityFactory<CPointVelocitySensor>
 D vtable for CEntityFactory<CPoseController>
 D vtable for CEntityFactory<CPostProcessController>
 D vtable for CEntityFactory<CPrecipitation>
 D vtable for CEntityFactory<CPrecipitationBlocker>
 D vtable for CEntityFactory<CProjectedDecal>
 D vtable for CEntityFactory<CPropDoorRotatingBreakable>
 D vtable for CEntityFactory<CPropDoorRotatingCheckpoint>
 D vtable for CEntityFactory<CPropGlowingObject>
 D vtable for CEntityFactory<CPropHealthCabinet>
 D vtable for CEntityFactory<CPropMinigun>
 D vtable for CEntityFactory<CPropMountedGun>
 D vtable for CEntityFactory<CPropVehicle>
 D vtable for CEntityFactory<CPropVehicleDriveable>
 D vtable for CEntityFactory<CPropaneTank>
 D vtable for CEntityFactory<CPumpShotgun>
 D vtable for CEntityFactory<CPushable>
 D vtable for CEntityFactory<CRagGib>
 D vtable for CEntityFactory<CRagdollBoogie>
 D vtable for CEntityFactory<CRagdollConstraint>
 D vtable for CEntityFactory<CRagdollMagnet>
 D vtable for CEntityFactory<CRagdollManager>
 D vtable for CEntityFactory<CRagdollProp>
 D vtable for CEntityFactory<CRagdollPropAttached>
 D vtable for CEntityFactory<CRevertSaved>
 D vtable for CEntityFactory<CRopeKeyframe>
 D vtable for CEntityFactory<CRotButton>
 D vtable for CEntityFactory<CRotDoor>
 D vtable for CEntityFactory<CRotorWashShooter>
 D vtable for CEntityFactory<CSceneEntity>
 D vtable for CEntityFactory<CSceneListManager>
 D vtable for CEntityFactory<CSceneManager>
 D vtable for CEntityFactory<CServerRagdollTrigger>
 D vtable for CEntityFactory<CShadowControl>
 D vtable for CEntityFactory<CShower>
 D vtable for CEntityFactory<CSimplePhysicsBrush>
 D vtable for CEntityFactory<CSimplePhysicsProp>
 D vtable for CEntityFactory<CSkyCamera>
 D vtable for CEntityFactory<CSlideshowDisplay>
 D vtable for CEntityFactory<CSmokeStack>
 D vtable for CEntityFactory<CSmokerClaw>
 D vtable for CEntityFactory<CSniperRifle>
 D vtable for CEntityFactory<CSoundEnt>
 D vtable for CEntityFactory<CSpotlightEnd>
 D vtable for CEntityFactory<CSprayCan>
 D vtable for CEntityFactory<CSprite>
 D vtable for CEntityFactory<CSpriteOriented>
 D vtable for CEntityFactory<CSpriteTrail>
 D vtable for CEntityFactory<CSteamJet>
 D vtable for CEntityFactory<CStripWeapons>
 D vtable for CEntityFactory<CSubMachinegun>
 D vtable for CEntityFactory<CSun>
 D vtable for CEntityFactory<CSurroundTest>
 D vtable for CEntityFactory<CSurvivorCamera>
 D vtable for CEntityFactory<CSurvivorPosition>
 D vtable for CEntityFactory<CSurvivorRescue>
 D vtable for CEntityFactory<CTankClaw>
 D vtable for CEntityFactory<CTankRock>
 D vtable for CEntityFactory<CTankTargetChange>
 D vtable for CEntityFactory<CTankTrainAI>
 D vtable for CEntityFactory<CTargetCDAudioRep>
 D vtable for CEntityFactory<CTargetChangeGravity>
 D vtable for CEntityFactory<CTeam>
 D vtable for CEntityFactory<CTeamSpawnPoint>
 D vtable for CEntityFactory<CTeamVehicleSpawnPoint>
 D vtable for CEntityFactory<CTempEntTester>
 D vtable for CEntityFactory<CTerrorGameRulesProxy>
 D vtable for CEntityFactory<CTerrorPlayer>
 D vtable for CEntityFactory<CTerrorPlayerResource>
 D vtable for CEntityFactory<CTerrorViewModel>
 D vtable for CEntityFactory<CTestEffect>
 D vtable for CEntityFactory<CTestTraceline>
 D vtable for CEntityFactory<CTest_ProxyToggle_Networkable>
 D vtable for CEntityFactory<CTextureToggle>
 D vtable for CEntityFactory<CThrow>
 D vtable for CEntityFactory<CTimerEntity>
 D vtable for CEntityFactory<CTonemapTrigger>
 D vtable for CEntityFactory<CTongue>
 D vtable for CEntityFactory<CTransitioningPlayer>
 D vtable for CEntityFactory<CTriggerAutoCrouch>
 D vtable for CEntityFactory<CTriggerBrush>
 D vtable for CEntityFactory<CTriggerCDAudio>
 D vtable for CEntityFactory<CTriggerCamera>
 D vtable for CEntityFactory<CTriggerCameraMultiplayer>
 D vtable for CEntityFactory<CTriggerEscape>
 D vtable for CEntityFactory<CTriggerGravity>
 D vtable for CEntityFactory<CTriggerHurt>
 D vtable for CEntityFactory<CTriggerHurtGhost>
 D vtable for CEntityFactory<CTriggerImpact>
 D vtable for CEntityFactory<CTriggerLook>
 D vtable for CEntityFactory<CTriggerMultiple>
 D vtable for CEntityFactory<CTriggerOnce>
 D vtable for CEntityFactory<CTriggerPlayerMovement>
 D vtable for CEntityFactory<CTriggerProximity>
 D vtable for CEntityFactory<CTriggerPush>
 D vtable for CEntityFactory<CTriggerRemove>
 D vtable for CEntityFactory<CTriggerSave>
 D vtable for CEntityFactory<CTriggerSoundscape>
 D vtable for CEntityFactory<CTriggerTeleport>
 D vtable for CEntityFactory<CTriggerToggleSave>
 D vtable for CEntityFactory<CTriggerVPhysicsMotion>
 D vtable for CEntityFactory<CTriggerVolume>
 D vtable for CEntityFactory<CTriggerWind>
 D vtable for CEntityFactory<CVGuiScreen>
 D vtable for CEntityFactory<CVersusRandom>
 D vtable for CEntityFactory<CVomit>
 D vtable for CEntityFactory<CVomitParticle>
 D vtable for CEntityFactory<CVoteController>
 D vtable for CEntityFactory<CWC_UpdateIgnoreList>
 D vtable for CEntityFactory<CWaterBullet>
 D vtable for CEntityFactory<CWaterLODControl>
 D vtable for CEntityFactory<CWeaponAmmoSpawn>
 D vtable for CEntityFactory<CWeaponCSBase>
 D vtable for CEntityFactory<CWeaponCSBaseGun>
 D vtable for CEntityFactory<CWeaponHEGrenadeSpawn>
 D vtable for CEntityFactory<CWeaponautoshotgunSpawn>
 D vtable for CEntityFactory<CWeaponfirst_aid_kitSpawn>
 D vtable for CEntityFactory<CWeaponhunting_rifleSpawn>
 D vtable for CEntityFactory<CWeaponmolotovSpawn>
 D vtable for CEntityFactory<CWeaponpain_pillsSpawn>
 D vtable for CEntityFactory<CWeaponpipe_bombSpawn>
 D vtable for CEntityFactory<CWeaponpistolSpawn>
 D vtable for CEntityFactory<CWeaponpumpshotgunSpawn>
 D vtable for CEntityFactory<CWeaponrifleSpawn>
 D vtable for CEntityFactory<CWeaponsmgSpawn>
 D vtable for CEntityFactory<CWeightButton>
 D vtable for CEntityFactory<CWindowPane>
 D vtable for CEntityFactory<CWorld>
 D vtable for CEntityFactory<CWorldItem>
 D vtable for CEntityFactory<DustTrail>
 D vtable for CEntityFactory<FilterDamageType>
 D vtable for CEntityFactory<FilterInfectedClass>
 D vtable for CEntityFactory<FilterTeam>
 D vtable for CEntityFactory<Hunter>
 D vtable for CEntityFactory<Infected>
 D vtable for CEntityFactory<InfoChangelevel>
 D vtable for CEntityFactory<MovieExplosion>
 D vtable for CEntityFactory<ParticleSmokeGrenade>
 D vtable for CEntityFactory<RocketTrail>
 D vtable for CEntityFactory<SmokeTrail>
 D vtable for CEntityFactory<Smoker>
 D vtable for CEntityFactory<SporeExplosion>
 D vtable for CEntityFactory<SporeTrail>
 D vtable for CEntityFactory<SurvivorBot>
 D vtable for CEntityFactory<Tank>
 D vtable for CEntityFactory<Witch>
 D vtable for CEntityFactoryDictionary
 D vtable for CEntityFlame
 D vtable for CEntityListSystem
 D vtable for CEntityParticleTrail
 D vtable for CEntityParticleTrail::NetworkVar_m_Info
 D vtable for CEntitySaveRestoreBlockHandler
 D vtable for CEntitySaveUtils
 D vtable for CEntityTouchManager
 D vtable for CEnvBeam
 D vtable for CEnvBeverage
 D vtable for CEnvCredits
 D vtable for CEnvDOFController
 D vtable for CEnvDetailController
 D vtable for CEnvDustPuff
 D vtable for CEnvEffectsScript
 D vtable for CEnvEntityMaker
 D vtable for CEnvExplosion
 D vtable for CEnvFade
 D vtable for CEnvFireSensor
 D vtable for CEnvFireSource
 D vtable for CEnvFunnel
 D vtable for CEnvGlobal
 D vtable for CEnvGunfire
 D vtable for CEnvHudHint
 D vtable for CEnvLaser
 D vtable for CEnvLight
 D vtable for CEnvMicrophone
 D vtable for CEnvMuzzleFlash
 D vtable for CEnvParticleScript
 D vtable for CEnvPlayerSurfaceTrigger
 D vtable for CEnvProjectedTexture
 D vtable for CEnvQuadraticBeam
 D vtable for CEnvRockLauncher
 D vtable for CEnvScreenEffect
 D vtable for CEnvScreenOverlay
 D vtable for CEnvShake
 D vtable for CEnvShooter
 D vtable for CEnvSoundscape
 D vtable for CEnvSoundscapeProxy
 D vtable for CEnvSoundscapeTriggerable
 D vtable for CEnvSpark
 D vtable for CEnvSplash
 D vtable for CEnvTonemapController
 D vtable for CEnvTracer
 D vtable for CEnvViewPunch
 D vtable for CEnvWeaponfire
 D vtable for CEnvWind
 D vtable for CEnvWind::NetworkVar_m_EnvWindShared
 D vtable for CEnvWindShared
 D vtable for CEnvZoom
 D vtable for CEnv_Blocker
 D vtable for CEscapeRoute
 D vtable for CEventLog
 D vtable for CEventQueueSaveLoadProxy
 D vtable for CEventQueue_SaveRestoreBlockHandler
 D vtable for CEventsSaveDataOps
 D vtable for CEveryoneExceptUserFilter
 D vtable for CExplosionAwardTemplate
 D vtable for CFallCauserAwardTemplate
 D vtable for CFilterClass
 D vtable for CFilterContext
 D vtable for CFilterEnemy
 D vtable for CFilterMassGreater
 D vtable for CFilterModel
 D vtable for CFilterMultiple
 D vtable for CFilterName
 D vtable for CFinaleTrigger
 D vtable for CFire
 D vtable for CFireSmoke
 D vtable for CFireSphere
 D vtable for CFireTrail
 D vtable for CFirstAidKit
 D vtable for CFish
 D vtable for CFishPool
 D vtable for CFlaggedEntitiesEnum
 D vtable for CFlexAnimationTrack
 D vtable for CFlexExpresser
 D vtable for CFlexSceneFileManager
 D vtable for CFmtStrN<1024>
 D vtable for CFmtStrN<128>
 D vtable for CFmtStrN<256>
 D vtable for CFmtStrN<260>
 D vtable for CFmtStrN<32>
 D vtable for CFmtStrN<64>
 D vtable for CFmtStrN<80>
 D vtable for CFogController
 D vtable for CFogController::NetworkVar_m_fog
 D vtable for CFogSystem
 D vtable for CFogTrigger
 D vtable for CFogVolume
 D vtable for CForgetfulAwardTemplate
 D vtable for CFourWheelServerVehicle
 D vtable for CFourWheelVehiclePhysics
 D vtable for CFriendlyFireAwardTemplate
 D vtable for CFuelBarrelPiece
 D vtable for CFuelBarrelProp
 D vtable for CFuncAreaPortalBase
 D vtable for CFuncAreaPortalWindow
 D vtable for CFuncBrush
 D vtable for CFuncConveyor
 D vtable for CFuncElevator
 D vtable for CFuncFireExtinguisher
 D vtable for CFuncIllusionary
 D vtable for CFuncLadder
 D vtable for CFuncLadderEndPoint
 D vtable for CFuncMoveLinear
 D vtable for CFuncNavAttributeRegion
 D vtable for CFuncNavBlocker
 D vtable for CFuncNavObstruction
 D vtable for CFuncNavStairsToggle
 D vtable for CFuncOccluder
 D vtable for CFuncPlat
 D vtable for CFuncPlatRot
 D vtable for CFuncPlayerInfectedClip
 D vtable for CFuncRagdollFader
 D vtable for CFuncReflectiveGlass
 D vtable for CFuncRotating
 D vtable for CFuncSimpleLadder
 D vtable for CFuncSmokeVolume
 D vtable for CFuncSpawnVolume
 D vtable for CFuncTankTrain
 D vtable for CFuncTrackAuto
 D vtable for CFuncTrackChange
 D vtable for CFuncTrackTrain
 D vtable for CFuncTrain
 D vtable for CFuncTrainControls
 D vtable for CFuncVPhysicsClip
 D vtable for CFuncVehicleClip
 D vtable for CFuncWall
 D vtable for CFuncWallToggle
 D vtable for CFunc_Dust
 D vtable for CFunc_DustCloud
 D vtable for CFunc_DustMotes
 D vtable for CFunc_LOD
 D vtable for CFunctor1<void (*)(bool), bool, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >
 D vtable for CFunctor3<void (*)(IPhysicsObject*, Vector const&, Vector const&), IPhysicsObject*, Vector, Vector, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >
 D vtable for CFunctor4<CBaseEntity* (*)(CBaseEntity*, CBaseEntity*, bool, float), CBaseEntity*, CBaseEntity*, bool, float, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >
 D vtable for CFunctorJob
 D vtable for CGameDLL_ConVarAccessor
 D vtable for CGameEnd
 D vtable for CGameEventListener
 D vtable for CGameGibManager
 D vtable for CGameMovement
 D vtable for CGamePlayerEquip
 D vtable for CGamePlayerTeam
 D vtable for CGamePlayerZone
 D vtable for CGameRules
 D vtable for CGameRulesProxy
 D vtable for CGameScore
 D vtable for CGameStringPool
 D vtable for CGameText
 D vtable for CGameUI
 D vtable for CGameWeaponManager
 D vtable for CGasCan
 D vtable for CGenericFlexCycler
 D vtable for CGib
 D vtable for CGibShooter
 D vtable for CGlobalEntityList
 D vtable for CGlobalState
 D vtable for CGoodTeammateAwardTemplate
 D vtable for CGotchaAwardTemplate
 D vtable for CGrabController
 D vtable for CGreedAwardTemplate
 D vtable for CGrenadeBlunderAwardTemplate
 D vtable for CGrenadeExpertAwardTemplate
 D vtable for CGrenadierAwardTemplate
 D vtable for CGunTarget
 D vtable for CHLTVDirector
 D vtable for CHandleDummy
 D vtable for CHandleTest
 D vtable for CHeadhunterAwardTemplate
 D vtable for CHelpingHandAwardTemplate
 D vtable for CHeroAwardTemplate
 D vtable for CHinderingEscapeAwardTemplate
 D vtable for CHitAndRunAwardTemplate
 D vtable for CHitEverybodyAwardTemplate
 D vtable for CHulkPhysicsAwardTemplate
 D vtable for CHulkPunchAwardTemplate
 D vtable for CHulkRockAwardTemplate
 D vtable for CHulkShutOutAwardTemplate
 D vtable for CHulkSlayerAwardTemplate
 D vtable for CHunterClaw
 D vtable for CHurdleAwardTemplate
 D vtable for CIKSaveRestoreOps
 D vtable for CInfectedAnimationLayer
 D vtable for CInfectedZooMaker
 D vtable for CInfectedZooPuppet
 D vtable for CInferno
 D vtable for CInfoDirector
 D vtable for CInfoElevatorFloor
 D vtable for CInfoGameEventProxy
 D vtable for CInfoGameMode
 D vtable for CInfoGoalInfectedChase
 D vtable for CInfoIntermission
 D vtable for CInfoLadderDismount
 D vtable for CInfoMassCenter
 D vtable for CInfoOverlayAccessor
 D vtable for CInfoRemarkable
 D vtable for CInfoTarget
 D vtable for CInfoViewParameters
 D vtable for CInfoZombieSpawn
 D vtable for CInstancedResponseSystem
 D vtable for CInstancedSceneEntity
 D vtable for CItSurvivorAwardTemplate
 D vtable for CItem
 D vtable for CItemSoda
 D vtable for CJob
 D vtable for CKeepUpright
 D vtable for CKickIssue
 D vtable for CKnockdownAwardTemplate
 D vtable for CL4DGameStats
 D vtable for CLagCompensationManager
 D vtable for CLeft4DeadAwardTemplate
 D vtable for CLeftBehindAwardTemplate
 D vtable for CLight
 D vtable for CLightGlow
 D vtable for CLogicActiveAutosave
 D vtable for CLogicAuto
 D vtable for CLogicAutosave
 D vtable for CLogicBranch
 D vtable for CLogicBranchList
 D vtable for CLogicCase
 D vtable for CLogicCollisionPair
 D vtable for CLogicCompare
 D vtable for CLogicCompareInteger
 D vtable for CLogicLineToEntity
 D vtable for CLogicMeasureMovement
 D vtable for CLogicNavigation
 D vtable for CLogicRelay
 D vtable for CLunge
 D vtable for CLunge::NetworkVar_m_lungeAgainTimer
 D vtable for CMVPAwardTemplate
 D vtable for CMapInfo
 D vtable for CMapInfoVersus
 D vtable for CMapLoadEntityFilter
 D vtable for CMaterialModifyControl
 D vtable for CMathColorBlend
 D vtable for CMathCounter
 D vtable for CMathRemap
 D vtable for CMemberFunctor0<CParallelProcessor<QueryCacheUpdateRecord_t, CFuncJobItemProcessor<QueryCacheUpdateRecord_t>, 1>*, void (CParallelProcessor<QueryCacheUpdateRecord_t, CFuncJobItemProcessor<QueryCacheUpdateRecord_t>, 1>::*)(), CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>
 D vtable for CMemberFunctor3<CBreakableProp*, void (CBreakableProp::*)(Vector const&, Vector const&, QAngle const&), Vector, Vector, QAngle, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>
 D vtable for CMessage
 D vtable for CMessageEntity
 D vtable for CModelSoundsCache
 D vtable for CModelSoundsCacheSaver
 D vtable for CMolotov
 D vtable for CMolotovProjectile
 D vtable for CMomentaryRotButton
 D vtable for CMostHitsAwardTemplate
 D vtable for CMotorController
 D vtable for CMovableEnum
 D vtable for CMoveHelperServer
 D vtable for CMovementSpeedMod
 D vtable for CMultiSource
 D vtable for CMultiplayRules
 D vtable for CMultiplayer_Expresser
 D vtable for CMurderAwardTemplate
 D vtable for CNarrowEscapeAwardTemplate
 D vtable for CNavArea
 D vtable for CNavMesh
 D vtable for CNoSurvivorsAwardTemplate
 D vtable for CNotifyList
 D vtable for CNullEntity
 D vtable for COrnamentProp
 D vtable for COuttroStats
 D vtable for COxygenTank
 D vtable for CPASAttenuationFilter
 D vtable for CPASFilter
 D vtable for CPVSFilter
 D vtable for CPainPills
 D vtable for CPainPills::NetworkVar_m_pillUseTimer
 D vtable for CParryAwardTemplate
 D vtable for CParticleFire
 D vtable for CParticleLight
 D vtable for CParticlePerformanceMonitor
 D vtable for CParticleSystem
 D vtable for CParticleSystemQuery
 D vtable for CPathCorner
 D vtable for CPathCornerCrash
 D vtable for CPathKeyFrame
 D vtable for CPathTrack
 D vtable for CPerfectTeamAwardTemplate
 D vtable for CPhysBallSocket
 D vtable for CPhysBox
 D vtable for CPhysBoxMultiplayer
 D vtable for CPhysConstraint
 D vtable for CPhysConstraintEvents
 D vtable for CPhysConstraintSystem
 D vtable for CPhysConvert
 D vtable for CPhysExplosion
 D vtable for CPhysFixed
 D vtable for CPhysForce
 D vtable for CPhysHinge
 D vtable for CPhysImpact
 D vtable for CPhysLength
 D vtable for CPhysMagnet
 D vtable for CPhysMotor
 D vtable for CPhysObjSaveRestoreOps
 D vtable for CPhysPulley
 D vtable for CPhysSaveRestoreBlockHandler
 D vtable for CPhysSlideConstraint
 D vtable for CPhysSphere
 D vtable for CPhysThruster
 D vtable for CPhysTorque
 D vtable for CPhysicsCannister
 D vtable for CPhysicsEntitySolver
 D vtable for CPhysicsGameTrace
 D vtable for CPhysicsHook
 D vtable for CPhysicsNPCSolver
 D vtable for CPhysicsPlayerCallback
 D vtable for CPhysicsProp
 D vtable for CPhysicsPropRespawnable
 D vtable for CPhysicsShake
 D vtable for CPhysicsSpring
 D vtable for CPhysicsWind
 D vtable for CPhysicsWire
 D vtable for CPipeBomb
 D vtable for CPipeBombProjectile
 D vtable for CPistol
 D vtable for CPlasma
 D vtable for CPlatTrigger
 D vtable for CPlayerInfo
 D vtable for CPlayerInfoManager
 D vtable for CPlayerLocalData
 D vtable for CPlayerLocalData::NetworkVar_m_audio
 D vtable for CPlayerLocalData::NetworkVar_m_skybox3d
 D vtable for CPlayerMove
 D vtable for CPlayerPickupController
 D vtable for CPlayerResource
 D vtable for CPluginBotManager
 D vtable for CPluginHelpersCheck
 D vtable for CPointAngleSensor
 D vtable for CPointAngularVelocitySensor
 D vtable for CPointBonusMapsAccessor
 D vtable for CPointBroadcastClientCommand
 D vtable for CPointClientCommand
 D vtable for CPointCommentaryNode
 D vtable for CPointDevShotCamera
 D vtable for CPointEntity
 D vtable for CPointEntityFinder
 D vtable for CPointGamestatsCounter
 D vtable for CPointHurt
 D vtable for CPointPlayerMoveConstraint
 D vtable for CPointProximitySensor
 D vtable for CPointPush
 D vtable for CPointServerCommand
 D vtable for CPointSpotlight
 D vtable for CPointTeleport
 D vtable for CPointTemplate
 D vtable for CPointTemplatePrecacher
 D vtable for CPointVelocitySensor
 D vtable for CPoseController
 D vtable for CPostProcessController
 D vtable for CPostProcessSystem
 D vtable for CPounceAwardTemplate
 D vtable for CPrecacheOtherList
 D vtable for CPrecacheSystem
 D vtable for CPrecipitation
 D vtable for CPrecipitationBlocker
 D vtable for CPredictedViewModel
 D vtable for CProjectedDecal
 D vtable for CPropData
 D vtable for CPropDoorRotating
 D vtable for CPropDoorRotatingBreakable
 D vtable for CPropDoorRotatingCheckpoint
 D vtable for CPropGlowingObject
 D vtable for CPropHealthCabinet
 D vtable for CPropMinigun
 D vtable for CPropMountedGun
 D vtable for CPropVehicle
 D vtable for CPropVehicleDriveable
 D vtable for CPropaneTank
 D vtable for CProtectorAwardTemplate
 D vtable for CPumpShotgun
 D vtable for CPushAwayEnumerator
 D vtable for CPushBlockerEnum
 D vtable for CPushable
 D vtable for CRagGib
 D vtable for CRagdollBoogie
 D vtable for CRagdollConstraint
 D vtable for CRagdollLRURetirement
 D vtable for CRagdollMagnet
 D vtable for CRagdollManager
 D vtable for CRagdollProp
 D vtable for CRagdollPropAttached
 D vtable for CRecipientFilter
 D vtable for CRedecoratorAwardTemplate
 D vtable for CRegistry
 D vtable for CReliableBroadcastRecipientFilter
 D vtable for CRemarkableEntityList
 D vtable for CRescuerAwardTemplate
 D vtable for CRespawnEntitiesFilter
 D vtable for CResponseQueueManager
 D vtable for CResponseSystem
 D vtable for CRestartGameIssue
 D vtable for CRestore
 D vtable for CReturnToLobbyIssue
 D vtable for CRevertSaved
 D vtable for CReviveFriendAwardTemplate
 D vtable for CRopeKeyframe
 D vtable for CRotButton
 D vtable for CRotDoor
 D vtable for CRotorWashShooter
 D vtable for CSave
 D vtable for CSaveRestoreBlockSet
 D vtable for CSaviorAwardTemplate
 D vtable for CScenarioWinAwardTemplate
 D vtable for CSceneEntity
 D vtable for CSceneFindMarkFilter
 D vtable for CSceneFindNearestMarkFilter
 D vtable for CSceneListManager
 D vtable for CSceneManager
 D vtable for CSceneTokenProcessor
 D vtable for CSecurityFailureAwardTemplate
 D vtable for CServerDLLSharedAppSystems
 D vtable for CServerGameClients
 D vtable for CServerGameDLL
 D vtable for CServerGameEnts
 D vtable for CServerGameTags
 D vtable for CServerNetworkProperty
 D vtable for CServerRagdollTrigger
 D vtable for CServerTools
 D vtable for CShadowControl
 D vtable for CSharingAwardTemplate
 D vtable for CSharpshooterAwardTemplate
 D vtable for CShower
 D vtable for CSimThinkManager
 D vtable for CSimplePhysicsBrush
 D vtable for CSimplePhysicsProp
 D vtable for CSingleUserPlusObserversFilter
 D vtable for CSingleUserRecipientFilter
 D vtable for CSkeetShootAwardTemplate
 D vtable for CSkipKeys
 D vtable for CSkyCamera
 D vtable for CSlideshowDisplay
 D vtable for CSmokeCloudSystem
 D vtable for CSmokeStack
 D vtable for CSmokerClaw
 D vtable for CSniperAwardTemplate
 D vtable for CSniperRifle
 D vtable for CSolidSetDefaults
 D vtable for CSoundControllerImp
 D vtable for CSoundEmitterSystem
 D vtable for CSoundEnt
 D vtable for CSoundEnvelopeController
 D vtable for CSoundPatchSaveRestoreOps
 D vtable for CSoundscapeSystem
 D vtable for CSpotlightEnd
 D vtable for CSprayCan
 D vtable for CSprite
 D vtable for CSpriteOriented
 D vtable for CSpriteTrail
 D vtable for CSteamJet
 D vtable for CStringTableSaveRestoreOps
 D vtable for CStripWeapons
 D vtable for CSubMachinegun
 D vtable for CSun
 D vtable for CSurroundTest
 D vtable for CSurvivorCamera
 D vtable for CSurvivorGroupInfo
 D vtable for CSurvivorKillAwardTemplate
 D vtable for CSurvivorPosition
 D vtable for CSurvivorRescue
 D vtable for CTEArmorRicochet
 D vtable for CTEBSPDecal
 D vtable for CTEBaseBeam
 D vtable for CTEBeamEntPoint
 D vtable for CTEBeamEnts
 D vtable for CTEBeamFollow
 D vtable for CTEBeamLaser
 D vtable for CTEBeamPoints
 D vtable for CTEBeamRing
 D vtable for CTEBeamRingPoint
 D vtable for CTEBeamSpline
 D vtable for CTEBloodSprite
 D vtable for CTEBloodStream
 D vtable for CTEBreakModel
 D vtable for CTEBubbleTrail
 D vtable for CTEBubbles
 D vtable for CTEBullets
 D vtable for CTEClientProjectile
 D vtable for CTEDecal
 D vtable for CTEDust
 D vtable for CTEDynamicLight
 D vtable for CTEEffectDispatch
 D vtable for CTEEnergySplash
 D vtable for CTEExplosion
 D vtable for CTEFizz
 D vtable for CTEFootprintDecal
 D vtable for CTEFoundryHelpers
 D vtable for CTEGaussExplosion
 D vtable for CTEGlowSprite
 D vtable for CTEImpact
 D vtable for CTEKillPlayerAttachments
 D vtable for CTELargeFunnel
 D vtable for CTEMetalSparks
 D vtable for CTEMuzzleFlash
 D vtable for CTEPhysicsProp
 D vtable for CTEPlayerAnimEvent
 D vtable for CTEPlayerDecal
 D vtable for CTEProjectedDecal
 D vtable for CTEShatterSurface
 D vtable for CTEShowLine
 D vtable for CTESmoke
 D vtable for CTESparks
 D vtable for CTESprite
 D vtable for CTESpriteSpray
 D vtable for CTEWorldDecal
 D vtable for CTankClaw
 D vtable for CTankClaw::NetworkVar_m_lowAttackDurationTimer
 D vtable for CTankRock
 D vtable for CTankTargetChange
 D vtable for CTankTrainAI
 D vtable for CTargetCDAudioRep
 D vtable for CTargetChangeGravity
 D vtable for CTeam
 D vtable for CTeamSpawnPoint
 D vtable for CTeamVehicleSpawnPoint
 D vtable for CTeamplayRules
 D vtable for CTempEntTester
 D vtable for CTempEntsSystem
 D vtable for CTemplate_SaveRestoreBlockHandler
 D vtable for CTemplatesHook
 D vtable for CTerrorAmmoDef
 D vtable for CTerrorAmmoDefSystem
 D vtable for CTerrorEventLog
 D vtable for CTerrorGameMovement
 D vtable for CTerrorGameRules
 D vtable for CTerrorGameRulesProxy
 D vtable for CTerrorGun
 D vtable for CTerrorPlayer
 D vtable for CTerrorPlayer::NetworkVar_m_autoCrouchTimer
 D vtable for CTerrorPlayer::NetworkVar_m_hangTimer
 D vtable for CTerrorPlayer::NetworkVar_m_itTimer
 D vtable for CTerrorPlayer::NetworkVar_m_knockdownTimer
 D vtable for CTerrorPlayer::NetworkVar_m_noAvoidanceTimer
 D vtable for CTerrorPlayer::NetworkVar_m_staggerTimer
 D vtable for CTerrorPlayer::NetworkVar_m_stunTimer
 D vtable for CTerrorPlayer::NetworkVar_m_suicideCountdown
 D vtable for CTerrorPlayer::NetworkVar_m_tongueVictimTimer
 D vtable for CTerrorPlayer::NetworkVar_m_tugTimer
 D vtable for CTerrorPlayer::NetworkVar_m_vocalizationSubjectTimer
 D vtable for CTerrorPlayerResource
 D vtable for CTerrorUsePushFilter
 D vtable for CTerrorViewModel
 D vtable for CTerrorWeapon
 D vtable for CTerrorWeapon::NetworkVar_m_attackTimer
 D vtable for CTerrorWeapon::NetworkVar_m_helpingHandSuppressionTimer
 D vtable for CTerrorWeapon::NetworkVar_m_helpingHandTargetTimer
 D vtable for CTerrorWeapon::NetworkVar_m_helpingHandTimer
 D vtable for CTerrorWeapon::NetworkVar_m_swingTimer
 D vtable for CTerrorWeaponInfo
 D vtable for CTestEffect
 D vtable for CTestTraceline
 D vtable for CTest_ProxyToggle_Networkable
 D vtable for CTextureToggle
 D vtable for CThinkContextsSaveDataOps
 D vtable for CThrow
 D vtable for CThrustController
 D vtable for CTimerEntity
 D vtable for CTonemapSystem
 D vtable for CTonemapTrigger
 D vtable for CTongue
 D vtable for CTongueChokeAwardTemplate
 D vtable for CToolFrameworkServer
 D vtable for CToughGuyAwardTemplate
 D vtable for CTraceBulletEntityEnumerator
 D vtable for CTraceFilterAgainstEntityList
 D vtable for CTraceFilterChain
 D vtable for CTraceFilterDoor
 D vtable for CTraceFilterEntity
 D vtable for CTraceFilterEntityIgnoreOther
 D vtable for CTraceFilterGroundEntities
 D vtable for CTraceFilterIgnoreActors
 D vtable for CTraceFilterIgnoreMoveableObjects
 D vtable for CTraceFilterLOS
 D vtable for CTraceFilterMelee
 D vtable for CTraceFilterNoCombatCharacters
 D vtable for CTraceFilterNoNPCsOrPlayer
 D vtable for CTraceFilterOnlyPhysicsDamage
 D vtable for CTraceFilterPhysics
 D vtable for CTraceFilterPlayerMovement
 D vtable for CTraceFilterPlayersNPCs
 D vtable for CTraceFilterPlayersNPCsPhysicsProps
 D vtable for CTraceFilterPushFinal
 D vtable for CTraceFilterPushMove
 D vtable for CTraceFilterSimple
 D vtable for CTraceFilterSimpleList
 D vtable for CTraceFilterSimpleListNoGhosts
 D vtable for CTraceFilterSimpleListNoInfectedOrGhosts
 D vtable for CTraceFilterSkipClassname
 D vtable for CTraceFilterSkipNPCs
 D vtable for CTraceFilterSkipTeam
 D vtable for CTraceFilterSkipTwoEntities
 D vtable for CTraceFilterSkipTwoEntitiesAndTeammates
 D vtable for CTraceFilterTongue
 D vtable for CTraceFilterValidForDecal
 D vtable for CTraceFilterViewOffset
 D vtable for CTraceFilterWalkableEntities
 D vtable for CTraceFilterWorldOnly
 D vtable for CTransitioningPlayer
 D vtable for CTriggerAutoCrouch
 D vtable for CTriggerBrush
 D vtable for CTriggerCDAudio
 D vtable for CTriggerCamera
 D vtable for CTriggerCameraMultiplayer
 D vtable for CTriggerEscape
 D vtable for CTriggerGravity
 D vtable for CTriggerHurt
 D vtable for CTriggerHurtGhost
 D vtable for CTriggerImpact
 D vtable for CTriggerLook
 D vtable for CTriggerMultiple
 D vtable for CTriggerOnce
 D vtable for CTriggerPlayerMovement
 D vtable for CTriggerProximity
 D vtable for CTriggerPush
 D vtable for CTriggerRemove
 D vtable for CTriggerSave
 D vtable for CTriggerSoundscape
 D vtable for CTriggerTeleport
 D vtable for CTriggerToggleSave
 D vtable for CTriggerTraceEnum
 D vtable for CTriggerVPhysicsMotion
 D vtable for CTriggerVolume
 D vtable for CTriggerWind
 D vtable for CTutorLesson
 D vtable for CUseTraceFilter
 D vtable for CUserCmd
 D vtable for CUtlCStringConversion
 D vtable for CUtlCachedFileData<CModelSoundsCache>
 D vtable for CUtlCharConversion
 D vtable for CUtlNoEscConversion
 D vtable for CUtlSymbolDataOps
 D vtable for CUtlVectorDataOps<CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer, int> >, 10>
 D vtable for CUtlVectorDataOps<CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >, 12>
 D vtable for CUtlVectorDataOps<CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity>, int> >, 13>
 D vtable for CUtlVectorDataOps<CUtlVector<CHandle<CBaseFlex>, CUtlMemory<CHandle<CBaseFlex>, int> >, 13>
 D vtable for CUtlVectorDataOps<CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer>, int> >, 13>
 D vtable for CUtlVectorDataOps<CUtlVector<CHandle<CFish>, CUtlMemory<CHandle<CFish>, int> >, 13>
 D vtable for CUtlVectorDataOps<CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity>, int> >, 13>
 D vtable for CUtlVectorDataOps<CUtlVector<CHandle<CSceneListManager>, CUtlMemory<CHandle<CSceneListManager>, int> >, 13>
 D vtable for CUtlVectorDataOps<CUtlVector<CHandle<CVGuiScreen>, CUtlMemory<CHandle<CVGuiScreen>, int> >, 13>
 D vtable for CUtlVectorDataOps<CUtlVector<CPassengerInfo, CUtlMemory<CPassengerInfo, int> >, 10>
 D vtable for CUtlVectorDataOps<CUtlVector<Relationship_t, CUtlMemory<Relationship_t, int> >, 10>
 D vtable for CUtlVectorDataOps<CUtlVector<ResponseContext_t, CUtlMemory<ResponseContext_t, int> >, 10>
 D vtable for CUtlVectorDataOps<CUtlVector<SaveRestoreBlockHeader_t, CUtlMemory<SaveRestoreBlockHeader_t, int> >, 10>
 D vtable for CUtlVectorDataOps<CUtlVector<globalentity_t, CUtlMemory<globalentity_t, int> >, 10>
 D vtable for CUtlVectorDataOps<CUtlVector<int, CUtlMemory<int, int> >, 5>
 D vtable for CUtlVectorDataOps<CUtlVector<magnetted_objects_t, CUtlMemory<magnetted_objects_t, int> >, 10>
 D vtable for CUtlVectorDataOps<CUtlVector<modifiedconvars_t, CUtlMemory<modifiedconvars_t, int> >, 10>
 D vtable for CUtlVectorDataOps<CUtlVector<physfollower_t, CUtlMemory<physfollower_t, int> >, 10>
 D vtable for CUtlVectorDataOps<CUtlVector<template_t, CUtlMemory<template_t, int> >, 10>
 D vtable for CUtlVectorDataOps<CUtlVector<thinkfunc_t, CUtlMemory<thinkfunc_t, int> >, 10>
 D vtable for CUtlVectorDataOps<CUtlVector<vehicle_crashsound_t, CUtlMemory<vehicle_crashsound_t, int> >, 10>
 D vtable for CUtlVectorDataOps<CUtlVector<vehicle_gear_t, CUtlMemory<vehicle_gear_t, int> >, 10>
 D vtable for CVGuiScreen
 D vtable for CVariantSaveDataOps
 D vtable for CVehicleSoundsParser
 D vtable for CVersusRandom
 D vtable for CVisibilityMonitor
 D vtable for CVoiceGameMgr
 D vtable for CVoiceGameMgrHelper
 D vtable for CVomit
 D vtable for CVomit::NetworkVar_m_attackDuration
 D vtable for CVomit::NetworkVar_m_nextSpray
 D vtable for CVomitHitAwardTemplate
 D vtable for CVomitParticle
 D vtable for CVomitStopAwardTemplate
 D vtable for CVoteController
 D vtable for CWC_UpdateIgnoreList
 D vtable for CWaterBullet
 D vtable for CWaterLODControl
 D vtable for CWeaponAmmoSpawn
 D vtable for CWeaponCSBase
 D vtable for CWeaponCSBaseGun
 D vtable for CWeaponExpertAwardTemplate
 D vtable for CWeaponHEGrenadeSpawn
 D vtable for CWeaponLOSFilter
 D vtable for CWeaponList
 D vtable for CWeaponSpawn
 D vtable for CWeaponSpawnEnum
 D vtable for CWeaponautoshotgunSpawn
 D vtable for CWeaponfirst_aid_kitSpawn
 D vtable for CWeaponhunting_rifleSpawn
 D vtable for CWeaponmolotovSpawn
 D vtable for CWeaponpain_pillsSpawn
 D vtable for CWeaponpipe_bombSpawn
 D vtable for CWeaponpistolSpawn
 D vtable for CWeaponpumpshotgunSpawn
 D vtable for CWeaponrifleSpawn
 D vtable for CWeaponsmgSpawn
 D vtable for CWeightButton
 D vtable for CWhiplashAwardTemplate
 D vtable for CWindowPane
 D vtable for CWitchHarassmentAwardTemplate
 D vtable for CWitchSlayerAwardTemplate
 D vtable for CWorld
 D vtable for CWorldItem
 D vtable for ChasePath
 D vtable for ChaseVictim
 D vtable for CheckpointDoorScan
 D vtable for ClientPrecachePrecache::CResourcePrecacher
 D vtable for ConCommand
 D vtable for ConVar
 D vtable for CountdownTimer
 D vtable for DebugMoveTo
 D vtable for DirectChasePath
 D vtable for Director
 D vtable for DustTrail
 D vtable for EditNav_PrecachePrecache::CResourcePrecacher
 D vtable for EffectsPrecachePrecache::CResourcePrecacher
 D vtable for EnsureTeamSize
 D vtable for EntityParticleTrailInfo_t
 D vtable for FileWeaponInfo_t
 D vtable for FilterDamageType
 D vtable for FilterInfectedClass
 D vtable for FilterTeam
 D vtable for HidingSpot
 D vtable for HulkSmashableEnumerator
 D vtable for Hunter
 D vtable for HunterAttack
 D vtable for HunterBehavior
 D vtable for HunterIntention
 D vtable for HunterLeapToCover
 D vtable for HunterLocomotion
 D vtable for HunterLungeAtVictim
 D vtable for IBody
 D vtable for IDecalEmitterSystem
 D vtable for IGameSystem
 D vtable for IGameSystemPerFrame
 D vtable for IIntention
 D vtable for ILocomotion
 D vtable for INextBot
 D vtable for INextBotComponent
 D vtable for IPlayerAnimState
 D vtable for IPredictionSystem
 D vtable for IVision
 D vtable for Infected
 D vtable for InfectedAlert
 D vtable for InfectedAttack
 D vtable for InfectedBehavior
 D vtable for InfectedBlinded
 D vtable for InfectedBurn
 D vtable for InfectedChangePosture
 D vtable for InfectedChasePath
 D vtable for InfectedDying
 D vtable for InfectedExecAction
 D vtable for InfectedIntention
 D vtable for InfectedLeanOnWall
 D vtable for InfectedLieDown
 D vtable for InfectedPathCost
 D vtable for InfectedShoved
 D vtable for InfectedSitDown
 D vtable for InfectedStaggerAround
 D vtable for InfectedStandDazed
 D vtable for InfectedStandingActivity
 D vtable for InfectedWander
 D vtable for InfoChangelevel
 D vtable for IntervalTimer
 D vtable for LostVictim
 D vtable for MovieExplosion
 D vtable for Music
 D vtable for NextBotCombatCharacter
 D vtable for NextBotManager
 D vtable for NextBotPlayer<CTerrorPlayer>
 D vtable for NextBotTraceFilterIgnoreActors
 D vtable for NextBotTraceFilterOnlyActors
 D vtable for NextBotTraversableTraceFilter
 D vtable for NextBotVisionTraceFilter
 D vtable for ParticleSmokeGrenade
 D vtable for Path
 D vtable for PathFollower
 D vtable for PhysFrictionEffectPrecache::CResourcePrecacher
 D vtable for PlayerBody
 D vtable for PlayerLocomotion
 D vtable for PlayerReporter
 D vtable for PrecachePointCommentaryNodePrecache::CResourcePrecacher
 D vtable for PressAltFireButtonReply
 D vtable for PressFireButtonReply
 D vtable for PunchVictim
 D vtable for RocketTrail
 D vtable for SavedEntity
 D vtable for SavedTerrorGun
 D vtable for SavedWeapon
 D vtable for SavedWeaponSpawn
 D vtable for SendProp
 D vtable for SmokeTrail
 D vtable for Smoker
 D vtable for SmokerAttack
 D vtable for SmokerBehavior
 D vtable for SmokerIntention
 D vtable for SmokerLocomotion
 D vtable for SmokerMoveToAttackPosition
 D vtable for SmokerPathCost
 D vtable for SmokerRetreatToCover
 D vtable for SmokerTongueVictim
 D vtable for SporeExplosion
 D vtable for SporeTrail
 D vtable for SurvivorAmbushBoomer
 D vtable for SurvivorAttack
 D vtable for SurvivorBehavior
 D vtable for SurvivorBody
 D vtable for SurvivorBot
 D vtable for SurvivorBotMeleeOnReply
 D vtable for SurvivorBotPathCost
 D vtable for SurvivorBotUseOnReply
 D vtable for SurvivorCheckpointLeaving
 D vtable for SurvivorCheckpointReached
 D vtable for SurvivorCloseDoor
 D vtable for SurvivorCollectObject
 D vtable for SurvivorDebugApproach
 D vtable for SurvivorDislodgeVictim
 D vtable for SurvivorElevatorEnter
 D vtable for SurvivorElevatorRide
 D vtable for SurvivorEscapeFlames
 D vtable for SurvivorEscapeLadderAmbush
 D vtable for SurvivorGivePillsToFriend
 D vtable for SurvivorHealFriend
 D vtable for SurvivorHealSelf
 D vtable for SurvivorIntention
 D vtable for SurvivorLegsApproach
 D vtable for SurvivorLegsApproachElevator
 D vtable for SurvivorLegsBattleStations
 D vtable for SurvivorLegsCoverFriendInCombat
 D vtable for SurvivorLegsCoverOrphan
 D vtable for SurvivorLegsEnterRescueVehicle
 D vtable for SurvivorLegsMeetRescueVehicleArrival
 D vtable for SurvivorLegsMoveOn
 D vtable for SurvivorLegsRegroup
 D vtable for SurvivorLegsRetreat
 D vtable for SurvivorLegsStayClose
 D vtable for SurvivorLegsWait
 D vtable for SurvivorLiberateBesiegedFriend
 D vtable for SurvivorLocomotion
 D vtable for SurvivorRescueBarricadedFriend
 D vtable for SurvivorReviveFriend
 D vtable for SurvivorTakePills
 D vtable for SurvivorTeamSituation
 D vtable for SurvivorUseObject
 D vtable for SurvivorVision
 D vtable for Tank
 D vtable for TankAttack
 D vtable for TankBehavior
 D vtable for TankIdle
 D vtable for TankIntention
 D vtable for TankLocomotion
 D vtable for TargetScan<CBaseCombatCharacter>
 D vtable for TargetScan<CTerrorPlayer>
 D vtable for TerrorNavArea
 D vtable for TerrorNavMesh
 D vtable for TongueTargetScan<CTerrorPlayer>
 D vtable for TraceFilterIgnoreInfected
 D vtable for WeaponResourcesPrecache::CResourcePrecacher
 D vtable for Witch
 D vtable for WitchAngry
 D vtable for WitchAttack
 D vtable for WitchBehavior
 D vtable for WitchBody
 D vtable for WitchBurn
 D vtable for WitchDying
 D vtable for WitchExecAction
 D vtable for WitchIdle
 D vtable for WitchIntention
 D vtable for WitchKillIncapVictim
 D vtable for WitchLocomotion
 D vtable for WitchRetreat
 D vtable for WitchSlashEnumerator
 D vtable for WitchVision
 D vtable for ZombieBotBody
 D vtable for ZombieBotCollisionTraceFilter
 D vtable for ZombieBotLocomotion
 D vtable for ZombieBotVision
 D vtable for ZombieManager
 D vtable for ability_throwPrecache::CResourcePrecacher
 D vtable for ability_vomitPrecache::CResourcePrecacher
 D vtable for boomerPrecache::CResourcePrecacher
 D vtable for entityflamePrecache::CResourcePrecacher
 D vtable for escape_routePrecache::CResourcePrecacher
 D vtable for fogparams_t
 D vtable for hunterPrecache::CResourcePrecacher
 D vtable for infectedPrecache::CResourcePrecacher
 D vtable for infernoPrecache::CResourcePrecacher
 D vtable for info_survivor_rescuePrecache::CResourcePrecacher
 D vtable for locksound_t
 D vtable for molotov_projectilePrecache::CResourcePrecacher
 D vtable for pipe_bomb_projectilePrecache::CResourcePrecacher
 D vtable for playerPrecache::CResourcePrecacher
 D vtable for predicted_viewmodelPrecache::CResourcePrecacher
 D vtable for sky3dparams_t
 D vtable for sky3dparams_t::NetworkVar_fog
 D vtable for smokerPrecache::CResourcePrecacher
 D vtable for spraycanPrecache::CResourcePrecacher
 D vtable for tankPrecache::CResourcePrecacher
 D vtable for tank_rockPrecache::CResourcePrecacher
 D vtable for vehicle_crashsound_t
 D vtable for vehicle_gear_t
 D vtable for vehiclesounds_t
 D vtable for vgui_screenPrecache::CResourcePrecacher
 D vtable for weapon_autoshotgunPrecache::CResourcePrecacher
 D vtable for weapon_boomer_clawPrecache::CResourcePrecacher
 D vtable for weapon_first_aid_kitPrecache::CResourcePrecacher
 D vtable for weapon_gascanPrecache::CResourcePrecacher
 D vtable for weapon_hunter_clawPrecache::CResourcePrecacher
 D vtable for weapon_hunting_riflePrecache::CResourcePrecacher
 D vtable for weapon_molotovPrecache::CResourcePrecacher
 D vtable for weapon_oxygentankPrecache::CResourcePrecacher
 D vtable for weapon_pain_pillsPrecache::CResourcePrecacher
 D vtable for weapon_pipe_bombPrecache::CResourcePrecacher
 D vtable for weapon_pistolPrecache::CResourcePrecacher
 D vtable for weapon_propanetankPrecache::CResourcePrecacher
 D vtable for weapon_pumpshotgunPrecache::CResourcePrecacher
 D vtable for weapon_riflePrecache::CResourcePrecacher
 D vtable for weapon_smgPrecache::CResourcePrecacher
 D vtable for weapon_smoker_clawPrecache::CResourcePrecacher
 D vtable for weapon_tank_clawPrecache::CResourcePrecacher
 D vtable for witchPrecache::CResourcePrecacher
 DevMsg
 DevMsg(char const*, ...)
 DevWarning
 DevWarning(char const*, ...)
 DoNewAssertDialog
 Error
 GenericThreadLocals::CThreadLocalBase::Get() const
 GetCPUInformation()
 KeyValuesSystem
 MemAllocScratch
 MemFreeScratch
 Msg
 Plat_FloatTime
 R CBitBuffer::s_nMaskTable
 R Four_Epsilons
 R Four_FLT_MAX
 R Four_Negative_FLT_MAX
 R Four_Ones
 R Four_PointFives
 R Four_Threes
 R Four_Zeros
 R g_SIMD_ComponentMask
 R g_SIMD_clear_wmask
 R g_SIMD_signmask
 R nanmask
 R typeinfo name for Action<Boomer>
 R typeinfo name for Action<Hunter>
 R typeinfo name for Action<Infected>
 R typeinfo name for Action<Smoker>
 R typeinfo name for Action<SurvivorBot>
 R typeinfo name for Action<Tank>
 R typeinfo name for Behavior<Boomer>
 R typeinfo name for Behavior<Hunter>
 R typeinfo name for Behavior<Infected>
 R typeinfo name for Behavior<Smoker>
 R typeinfo name for Behavior<SurvivorBot>
 R typeinfo name for Behavior<Tank>
 R typeinfo name for BehaviorBackUp<SurvivorBot>
 R typeinfo name for BehaviorMoveTo<Boomer, InfectedPathCost>
 R typeinfo name for BehaviorMoveTo<Hunter, InfectedPathCost>
 R typeinfo name for BehaviorMoveTo<Smoker, InfectedPathCost>
 R typeinfo name for BehaviorMoveTo<Tank, InfectedPathCost>
 R typeinfo name for Boomer
 R typeinfo name for BoomerAttack
 R typeinfo name for BoomerBehavior
 R typeinfo name for BoomerFilter
 R typeinfo name for BoomerHide
 R typeinfo name for BoomerIntention
 R typeinfo name for BoomerLocomotion
 R typeinfo name for BoomerRetreatToCover
 R typeinfo name for BoomerVomitOnVictim
 R typeinfo name for BossZombiePlayerBot
 R typeinfo name for CAISound
 R typeinfo name for CAI_ChangeHintGroup
 R typeinfo name for CAI_ChangeTarget
 R typeinfo name for CAI_Expresser
 R typeinfo name for CAI_ExpresserHost<CBasePlayer>
 R typeinfo name for CAI_ExpresserHost<CFlexExpresserShim>
 R typeinfo name for CAI_ExpresserSink
 R typeinfo name for CAI_ExpresserWithFollowup
 R typeinfo name for CAbandonmentAwardTemplate
 R typeinfo name for CAbusiveBehaviorAwardTemplate
 R typeinfo name for CAchievementMgr
 R typeinfo name for CAchievementMsgHandler
 R typeinfo name for CAchievementSaveRestoreBlockHandler
 R typeinfo name for CActivityDataOps
 R typeinfo name for CAimTargetManager
 R typeinfo name for CAmbientGeneric
 R typeinfo name for CAmbushAwardTemplate
 R typeinfo name for CAmmoDef
 R typeinfo name for CAnchorList
 R typeinfo name for CAreaPortal
 R typeinfo name for CAssaultRifle
 R typeinfo name for CAutoGameSystem
 R typeinfo name for CAutoGameSystemPerFrame
 R typeinfo name for CAutoShotgun
 R typeinfo name for CAwardTemplate
 R typeinfo name for CBaseAbility
 R typeinfo name for CBaseAbility::NetworkVar_m_activationSupressedTimer
 R typeinfo name for CBaseAbility::NetworkVar_m_nextActivationTimer
 R typeinfo name for CBaseAchievement
 R typeinfo name for CBaseAnimating
 R typeinfo name for CBaseAnimatingOverlay
 R typeinfo name for CBaseAppSystem<IParticleSystemQuery>
 R typeinfo name for CBaseButton
 R typeinfo name for CBaseCSGrenade
 R typeinfo name for CBaseCSGrenadeProjectile
 R typeinfo name for CBaseCombatCharacter
 R typeinfo name for CBaseCombatWeapon
 R typeinfo name for CBaseDMStart
 R typeinfo name for CBaseDoor
 R typeinfo name for CBaseEntity
 R typeinfo name for CBaseEntity*
 R typeinfo name for CBaseEntity::NetworkVar_m_Collision
 R typeinfo name for CBaseEntityClassList
 R typeinfo name for CBaseEntityList
 R typeinfo name for CBaseFilter
 R typeinfo name for CBaseFire
 R typeinfo name for CBaseFlex
 R typeinfo name for CBaseGameStats
 R typeinfo name for CBaseGameStats_Driver
 R typeinfo name for CBaseGameSystem
 R typeinfo name for CBaseGameSystemPerFrame
 R typeinfo name for CBaseGrenade
 R typeinfo name for CBaseIssue
 R typeinfo name for CBaseMountedWeapon
 R typeinfo name for CBaseMoveBehavior
 R typeinfo name for CBaseMultiplayerPlayer
 R typeinfo name for CBaseParticleEntity
 R typeinfo name for CBasePlatTrain
 R typeinfo name for CBasePlayer
 R typeinfo name for CBasePlayer::NetworkVar_m_Local
 R typeinfo name for CBasePlayer::NetworkVar_m_PlayerFog
 R typeinfo name for CBasePlayer::NetworkVar_pl
 R typeinfo name for CBasePlayerAnimState
 R typeinfo name for CBaseProp
 R typeinfo name for CBasePropDoor
 R typeinfo name for CBaseResourcePrecacher
 R typeinfo name for CBaseServerVehicle
 R typeinfo name for CBaseShotgun
 R typeinfo name for CBaseTempEntity
 R typeinfo name for CBaseTerrorIssue
 R typeinfo name for CBaseToggle
 R typeinfo name for CBaseTrigger
 R typeinfo name for CBaseVPhysicsTrigger
 R typeinfo name for CBaseViewModel
 R typeinfo name for CBeam
 R typeinfo name for CBeamSpotlight
 R typeinfo name for CBlood
 R typeinfo name for CBloodSplat
 R typeinfo name for CBoneFollower
 R typeinfo name for CBoomerBlunderAwardTemplate
 R typeinfo name for CBoomerClaw
 R typeinfo name for CBoomerComboAwardTemplate
 R typeinfo name for CBotCmd
 R typeinfo name for CBotDoorEnumerator
 R typeinfo name for CBreakModelsPrecached
 R typeinfo name for CBreakParser
 R typeinfo name for CBreakable
 R typeinfo name for CBreakableProp
 R typeinfo name for CBreakableSurface
 R typeinfo name for CBroadcastRecipientFilter
 R typeinfo name for CBubbling
 R typeinfo name for CBulletsTraceFilter
 R typeinfo name for CButtonTimed
 R typeinfo name for CCSGameMovement
 R typeinfo name for CCSGameRules
 R typeinfo name for CCSGameRulesProxy
 R typeinfo name for CCSHLTVDirector
 R typeinfo name for CCSPlayer
 R typeinfo name for CCSPlayerAnimState
 R typeinfo name for CCSPlayerMove
 R typeinfo name for CCSRagdoll
 R typeinfo name for CCSTeam
 R typeinfo name for CCSWeaponInfo
 R typeinfo name for CCallback<CTerrorGameRules, GSGameplayStats_t, true>
 R typeinfo name for CCallback<CTerrorPlayer, GSClientAchievementStatus_t, true>
 R typeinfo name for CCallbackBase
 R typeinfo name for CCarGlassProp
 R typeinfo name for CCarProp
 R typeinfo name for CCarriedProp
 R typeinfo name for CChangeAllTalkIssue
 R typeinfo name for CChangeChapterIssue
 R typeinfo name for CChangeDifficultyIssue
 R typeinfo name for CChangeLevel
 R typeinfo name for CChangeMissionIssue
 R typeinfo name for CCheckClient
 R typeinfo name for CCheckpointCompleteAwardTemplate
 R typeinfo name for CChildOperatorDefinition
 R typeinfo name for CChoreoEvent
 R typeinfo name for CChoreoScene
 R typeinfo name for CChoreoStringPool
 R typeinfo name for CClassPtrSaveRestoreOps
 R typeinfo name for CClaw
 R typeinfo name for CClawHitAwardTemplate
 R typeinfo name for CCleanupDefaultRelationShips
 R typeinfo name for CClientPath
 R typeinfo name for CCollisionEvent
 R typeinfo name for CCollisionProperty
 R typeinfo name for CColorCorrection
 R typeinfo name for CColorCorrectionSystem
 R typeinfo name for CColorCorrectionVolume
 R typeinfo name for CCombatCharVisCache
 R typeinfo name for CCommentaryAuto
 R typeinfo name for CCommentaryDummy
 R typeinfo name for CCommentarySystem
 R typeinfo name for CCommentaryViewPosition
 R typeinfo name for CCommentaryZombieSpawner
 R typeinfo name for CCommentary_SaveRestoreBlockHandler
 R typeinfo name for CConceptHistoriesDataOps
 R typeinfo name for CConstantForceController
 R typeinfo name for CConstraintAnchor
 R typeinfo name for CCopyRecipientFilter
 R typeinfo name for CDarkMissionAwardTemplate
 R typeinfo name for CDataManager<CBoneCache, bonecacheparams_t, CBoneCache*, CThreadFastMutex>
 R typeinfo name for CDataManagerBase
 R typeinfo name for CDataObjectAccessSystem
 R typeinfo name for CDeathFallCamera
 R typeinfo name for CDebugHistory
 R typeinfo name for CDecal
 R typeinfo name for CDecalEmitterSystem
 R typeinfo name for CDefSaveRestoreBlockHandler
 R typeinfo name for CDefSaveRestoreOps
 R typeinfo name for CDefaultAccessor
 R typeinfo name for CDefaultParticleSystemQuery
 R typeinfo name for CDefaultPlayerPickupVPhysics
 R typeinfo name for CDefaultResponseSystem
 R typeinfo name for CDefaultResponseSystemSaveRestoreBlockHandler
 R typeinfo name for CDetailBlocker
 R typeinfo name for CDevShotSystem
 R typeinfo name for CDirtySpatialPartitionEntityList
 R typeinfo name for CDoomsdayAwardTemplate
 R typeinfo name for CDynamicLight
 R typeinfo name for CDynamicProp
 R typeinfo name for CEarlyMourningAwardTemplate
 R typeinfo name for CEffectsServer
 R typeinfo name for CEmbers
 R typeinfo name for CEmptyConVar
 R typeinfo name for CEnableMotionFixup
 R typeinfo name for CEntFireAutoCompletionFunctor
 R typeinfo name for CEntityBlocker
 R typeinfo name for CEntityClassList<CPhysicsNPCSolver>
 R typeinfo name for CEntityClassList<CSkyCamera>
 R typeinfo name for CEntityDataInstantiator<CWatcherList>
 R typeinfo name for CEntityDataInstantiator<ModelWidthScale>
 R typeinfo name for CEntityDataInstantiator<StepSimulationData>
 R typeinfo name for CEntityDataInstantiator<groundlink_t>
 R typeinfo name for CEntityDataInstantiator<physicspushlist_t>
 R typeinfo name for CEntityDataInstantiator<touchlink_t>
 R typeinfo name for CEntityDataInstantiator<vphysicsupdateai_t>
 R typeinfo name for CEntityDissolve
 R typeinfo name for CEntityFactory<Boomer>
 R typeinfo name for CEntityFactory<CAISound>
 R typeinfo name for CEntityFactory<CAI_ChangeHintGroup>
 R typeinfo name for CEntityFactory<CAI_ChangeTarget>
 R typeinfo name for CEntityFactory<CAmbientGeneric>
 R typeinfo name for CEntityFactory<CAreaPortal>
 R typeinfo name for CEntityFactory<CAssaultRifle>
 R typeinfo name for CEntityFactory<CAutoShotgun>
 R typeinfo name for CEntityFactory<CBaseButton>
 R typeinfo name for CEntityFactory<CBaseCSGrenade>
 R typeinfo name for CEntityFactory<CBaseDMStart>
 R typeinfo name for CEntityFactory<CBaseDoor>
 R typeinfo name for CEntityFactory<CBaseEntity>
 R typeinfo name for CEntityFactory<CBaseFilter>
 R typeinfo name for CEntityFactory<CBaseFlex>
 R typeinfo name for CEntityFactory<CBaseGrenade>
 R typeinfo name for CEntityFactory<CBaseMoveBehavior>
 R typeinfo name for CEntityFactory<CBaseTrigger>
 R typeinfo name for CEntityFactory<CBaseViewModel>
 R typeinfo name for CEntityFactory<CBeam>
 R typeinfo name for CEntityFactory<CBeamSpotlight>
 R typeinfo name for CEntityFactory<CBlood>
 R typeinfo name for CEntityFactory<CBoneFollower>
 R typeinfo name for CEntityFactory<CBoomerClaw>
 R typeinfo name for CEntityFactory<CBreakable>
 R typeinfo name for CEntityFactory<CBreakableSurface>
 R typeinfo name for CEntityFactory<CBubbling>
 R typeinfo name for CEntityFactory<CButtonTimed>
 R typeinfo name for CEntityFactory<CCSGameRulesProxy>
 R typeinfo name for CEntityFactory<CCSRagdoll>
 R typeinfo name for CEntityFactory<CCSTeam>
 R typeinfo name for CEntityFactory<CCarGlassProp>
 R typeinfo name for CEntityFactory<CCarProp>
 R typeinfo name for CEntityFactory<CClientPath>
 R typeinfo name for CEntityFactory<CColorCorrection>
 R typeinfo name for CEntityFactory<CColorCorrectionVolume>
 R typeinfo name for CEntityFactory<CCommentaryAuto>
 R typeinfo name for CEntityFactory<CCommentaryDummy>
 R typeinfo name for CEntityFactory<CCommentaryViewPosition>
 R typeinfo name for CEntityFactory<CCommentaryZombieSpawner>
 R typeinfo name for CEntityFactory<CConstraintAnchor>
 R typeinfo name for CEntityFactory<CDeathFallCamera>
 R typeinfo name for CEntityFactory<CDebugHistory>
 R typeinfo name for CEntityFactory<CDecal>
 R typeinfo name for CEntityFactory<CDetailBlocker>
 R typeinfo name for CEntityFactory<CDynamicLight>
 R typeinfo name for CEntityFactory<CDynamicProp>
 R typeinfo name for CEntityFactory<CEmbers>
 R typeinfo name for CEntityFactory<CEnableMotionFixup>
 R typeinfo name for CEntityFactory<CEntityBlocker>
 R typeinfo name for CEntityFactory<CEntityDissolve>
 R typeinfo name for CEntityFactory<CEntityFlame>
 R typeinfo name for CEntityFactory<CEntityParticleTrail>
 R typeinfo name for CEntityFactory<CEnvBeam>
 R typeinfo name for CEntityFactory<CEnvBeverage>
 R typeinfo name for CEntityFactory<CEnvCredits>
 R typeinfo name for CEntityFactory<CEnvDOFController>
 R typeinfo name for CEntityFactory<CEnvDetailController>
 R typeinfo name for CEntityFactory<CEnvDustPuff>
 R typeinfo name for CEntityFactory<CEnvEffectsScript>
 R typeinfo name for CEntityFactory<CEnvEntityMaker>
 R typeinfo name for CEntityFactory<CEnvExplosion>
 R typeinfo name for CEntityFactory<CEnvFade>
 R typeinfo name for CEntityFactory<CEnvFireSensor>
 R typeinfo name for CEntityFactory<CEnvFireSource>
 R typeinfo name for CEntityFactory<CEnvFunnel>
 R typeinfo name for CEntityFactory<CEnvGlobal>
 R typeinfo name for CEntityFactory<CEnvGunfire>
 R typeinfo name for CEntityFactory<CEnvHudHint>
 R typeinfo name for CEntityFactory<CEnvLaser>
 R typeinfo name for CEntityFactory<CEnvLight>
 R typeinfo name for CEntityFactory<CEnvMicrophone>
 R typeinfo name for CEntityFactory<CEnvMuzzleFlash>
 R typeinfo name for CEntityFactory<CEnvParticleScript>
 R typeinfo name for CEntityFactory<CEnvPlayerSurfaceTrigger>
 R typeinfo name for CEntityFactory<CEnvProjectedTexture>
 R typeinfo name for CEntityFactory<CEnvQuadraticBeam>
 R typeinfo name for CEntityFactory<CEnvRockLauncher>
 R typeinfo name for CEntityFactory<CEnvScreenEffect>
 R typeinfo name for CEntityFactory<CEnvScreenOverlay>
 R typeinfo name for CEntityFactory<CEnvShake>
 R typeinfo name for CEntityFactory<CEnvShooter>
 R typeinfo name for CEntityFactory<CEnvSoundscape>
 R typeinfo name for CEntityFactory<CEnvSoundscapeProxy>
 R typeinfo name for CEntityFactory<CEnvSoundscapeTriggerable>
 R typeinfo name for CEntityFactory<CEnvSpark>
 R typeinfo name for CEntityFactory<CEnvSplash>
 R typeinfo name for CEntityFactory<CEnvTonemapController>
 R typeinfo name for CEntityFactory<CEnvTracer>
 R typeinfo name for CEntityFactory<CEnvViewPunch>
 R typeinfo name for CEntityFactory<CEnvWeaponfire>
 R typeinfo name for CEntityFactory<CEnvWind>
 R typeinfo name for CEntityFactory<CEnvZoom>
 R typeinfo name for CEntityFactory<CEnv_Blocker>
 R typeinfo name for CEntityFactory<CEscapeRoute>
 R typeinfo name for CEntityFactory<CEventQueueSaveLoadProxy>
 R typeinfo name for CEntityFactory<CFilterClass>
 R typeinfo name for CEntityFactory<CFilterContext>
 R typeinfo name for CEntityFactory<CFilterEnemy>
 R typeinfo name for CEntityFactory<CFilterMassGreater>
 R typeinfo name for CEntityFactory<CFilterModel>
 R typeinfo name for CEntityFactory<CFilterMultiple>
 R typeinfo name for CEntityFactory<CFilterName>
 R typeinfo name for CEntityFactory<CFinaleTrigger>
 R typeinfo name for CEntityFactory<CFire>
 R typeinfo name for CEntityFactory<CFireSmoke>
 R typeinfo name for CEntityFactory<CFireTrail>
 R typeinfo name for CEntityFactory<CFirstAidKit>
 R typeinfo name for CEntityFactory<CFish>
 R typeinfo name for CEntityFactory<CFishPool>
 R typeinfo name for CEntityFactory<CFlexExpresser>
 R typeinfo name for CEntityFactory<CFogController>
 R typeinfo name for CEntityFactory<CFogTrigger>
 R typeinfo name for CEntityFactory<CFogVolume>
 R typeinfo name for CEntityFactory<CFuelBarrelPiece>
 R typeinfo name for CEntityFactory<CFuelBarrelProp>
 R typeinfo name for CEntityFactory<CFuncAreaPortalWindow>
 R typeinfo name for CEntityFactory<CFuncBrush>
 R typeinfo name for CEntityFactory<CFuncConveyor>
 R typeinfo name for CEntityFactory<CFuncElevator>
 R typeinfo name for CEntityFactory<CFuncFireExtinguisher>
 R typeinfo name for CEntityFactory<CFuncIllusionary>
 R typeinfo name for CEntityFactory<CFuncLadder>
 R typeinfo name for CEntityFactory<CFuncLadderEndPoint>
 R typeinfo name for CEntityFactory<CFuncMoveLinear>
 R typeinfo name for CEntityFactory<CFuncNavAttributeRegion>
 R typeinfo name for CEntityFactory<CFuncNavBlocker>
 R typeinfo name for CEntityFactory<CFuncNavObstruction>
 R typeinfo name for CEntityFactory<CFuncNavStairsToggle>
 R typeinfo name for CEntityFactory<CFuncOccluder>
 R typeinfo name for CEntityFactory<CFuncPlat>
 R typeinfo name for CEntityFactory<CFuncPlatRot>
 R typeinfo name for CEntityFactory<CFuncPlayerInfectedClip>
 R typeinfo name for CEntityFactory<CFuncRagdollFader>
 R typeinfo name for CEntityFactory<CFuncReflectiveGlass>
 R typeinfo name for CEntityFactory<CFuncRotating>
 R typeinfo name for CEntityFactory<CFuncSimpleLadder>
 R typeinfo name for CEntityFactory<CFuncSmokeVolume>
 R typeinfo name for CEntityFactory<CFuncSpawnVolume>
 R typeinfo name for CEntityFactory<CFuncTankTrain>
 R typeinfo name for CEntityFactory<CFuncTrackAuto>
 R typeinfo name for CEntityFactory<CFuncTrackChange>
 R typeinfo name for CEntityFactory<CFuncTrackTrain>
 R typeinfo name for CEntityFactory<CFuncTrain>
 R typeinfo name for CEntityFactory<CFuncTrainControls>
 R typeinfo name for CEntityFactory<CFuncVPhysicsClip>
 R typeinfo name for CEntityFactory<CFuncVehicleClip>
 R typeinfo name for CEntityFactory<CFuncWall>
 R typeinfo name for CEntityFactory<CFuncWallToggle>
 R typeinfo name for CEntityFactory<CFunc_DustCloud>
 R typeinfo name for CEntityFactory<CFunc_DustMotes>
 R typeinfo name for CEntityFactory<CFunc_LOD>
 R typeinfo name for CEntityFactory<CGameEnd>
 R typeinfo name for CEntityFactory<CGameGibManager>
 R typeinfo name for CEntityFactory<CGamePlayerEquip>
 R typeinfo name for CEntityFactory<CGamePlayerTeam>
 R typeinfo name for CEntityFactory<CGamePlayerZone>
 R typeinfo name for CEntityFactory<CGameScore>
 R typeinfo name for CEntityFactory<CGameText>
 R typeinfo name for CEntityFactory<CGameUI>
 R typeinfo name for CEntityFactory<CGameWeaponManager>
 R typeinfo name for CEntityFactory<CGasCan>
 R typeinfo name for CEntityFactory<CGenericFlexCycler>
 R typeinfo name for CEntityFactory<CGib>
 R typeinfo name for CEntityFactory<CGibShooter>
 R typeinfo name for CEntityFactory<CGunTarget>
 R typeinfo name for CEntityFactory<CHandleDummy>
 R typeinfo name for CEntityFactory<CHandleTest>
 R typeinfo name for CEntityFactory<CHunterClaw>
 R typeinfo name for CEntityFactory<CInfectedZooMaker>
 R typeinfo name for CEntityFactory<CInfectedZooPuppet>
 R typeinfo name for CEntityFactory<CInferno>
 R typeinfo name for CEntityFactory<CInfoDirector>
 R typeinfo name for CEntityFactory<CInfoElevatorFloor>
 R typeinfo name for CEntityFactory<CInfoGameEventProxy>
 R typeinfo name for CEntityFactory<CInfoGameMode>
 R typeinfo name for CEntityFactory<CInfoGoalInfectedChase>
 R typeinfo name for CEntityFactory<CInfoIntermission>
 R typeinfo name for CEntityFactory<CInfoLadderDismount>
 R typeinfo name for CEntityFactory<CInfoMassCenter>
 R typeinfo name for CEntityFactory<CInfoOverlayAccessor>
 R typeinfo name for CEntityFactory<CInfoRemarkable>
 R typeinfo name for CEntityFactory<CInfoTarget>
 R typeinfo name for CEntityFactory<CInfoViewParameters>
 R typeinfo name for CEntityFactory<CInfoZombieSpawn>
 R typeinfo name for CEntityFactory<CInstancedSceneEntity>
 R typeinfo name for CEntityFactory<CItemSoda>
 R typeinfo name for CEntityFactory<CKeepUpright>
 R typeinfo name for CEntityFactory<CLight>
 R typeinfo name for CEntityFactory<CLightGlow>
 R typeinfo name for CEntityFactory<CLogicActiveAutosave>
 R typeinfo name for CEntityFactory<CLogicAuto>
 R typeinfo name for CEntityFactory<CLogicAutosave>
 R typeinfo name for CEntityFactory<CLogicBranch>
 R typeinfo name for CEntityFactory<CLogicBranchList>
 R typeinfo name for CEntityFactory<CLogicCase>
 R typeinfo name for CEntityFactory<CLogicCollisionPair>
 R typeinfo name for CEntityFactory<CLogicCompare>
 R typeinfo name for CEntityFactory<CLogicCompareInteger>
 R typeinfo name for CEntityFactory<CLogicLineToEntity>
 R typeinfo name for CEntityFactory<CLogicMeasureMovement>
 R typeinfo name for CEntityFactory<CLogicNavigation>
 R typeinfo name for CEntityFactory<CLogicRelay>
 R typeinfo name for CEntityFactory<CLunge>
 R typeinfo name for CEntityFactory<CMapInfo>
 R typeinfo name for CEntityFactory<CMapInfoVersus>
 R typeinfo name for CEntityFactory<CMaterialModifyControl>
 R typeinfo name for CEntityFactory<CMathColorBlend>
 R typeinfo name for CEntityFactory<CMathCounter>
 R typeinfo name for CEntityFactory<CMathRemap>
 R typeinfo name for CEntityFactory<CMessage>
 R typeinfo name for CEntityFactory<CMessageEntity>
 R typeinfo name for CEntityFactory<CMolotov>
 R typeinfo name for CEntityFactory<CMolotovProjectile>
 R typeinfo name for CEntityFactory<CMomentaryRotButton>
 R typeinfo name for CEntityFactory<CMovementSpeedMod>
 R typeinfo name for CEntityFactory<CMultiSource>
 R typeinfo name for CEntityFactory<CNullEntity>
 R typeinfo name for CEntityFactory<COrnamentProp>
 R typeinfo name for CEntityFactory<COuttroStats>
 R typeinfo name for CEntityFactory<COxygenTank>
 R typeinfo name for CEntityFactory<CPainPills>
 R typeinfo name for CEntityFactory<CParticleFire>
 R typeinfo name for CEntityFactory<CParticleLight>
 R typeinfo name for CEntityFactory<CParticlePerformanceMonitor>
 R typeinfo name for CEntityFactory<CParticleSystem>
 R typeinfo name for CEntityFactory<CPathCorner>
 R typeinfo name for CEntityFactory<CPathCornerCrash>
 R typeinfo name for CEntityFactory<CPathKeyFrame>
 R typeinfo name for CEntityFactory<CPathTrack>
 R typeinfo name for CEntityFactory<CPhysBallSocket>
 R typeinfo name for CEntityFactory<CPhysBox>
 R typeinfo name for CEntityFactory<CPhysBoxMultiplayer>
 R typeinfo name for CEntityFactory<CPhysConstraintSystem>
 R typeinfo name for CEntityFactory<CPhysConvert>
 R typeinfo name for CEntityFactory<CPhysExplosion>
 R typeinfo name for CEntityFactory<CPhysFixed>
 R typeinfo name for CEntityFactory<CPhysHinge>
 R typeinfo name for CEntityFactory<CPhysImpact>
 R typeinfo name for CEntityFactory<CPhysLength>
 R typeinfo name for CEntityFactory<CPhysMagnet>
 R typeinfo name for CEntityFactory<CPhysMotor>
 R typeinfo name for CEntityFactory<CPhysPulley>
 R typeinfo name for CEntityFactory<CPhysSlideConstraint>
 R typeinfo name for CEntityFactory<CPhysSphere>
 R typeinfo name for CEntityFactory<CPhysThruster>
 R typeinfo name for CEntityFactory<CPhysTorque>
 R typeinfo name for CEntityFactory<CPhysicsCannister>
 R typeinfo name for CEntityFactory<CPhysicsEntitySolver>
 R typeinfo name for CEntityFactory<CPhysicsNPCSolver>
 R typeinfo name for CEntityFactory<CPhysicsProp>
 R typeinfo name for CEntityFactory<CPhysicsPropRespawnable>
 R typeinfo name for CEntityFactory<CPhysicsSpring>
 R typeinfo name for CEntityFactory<CPhysicsWire>
 R typeinfo name for CEntityFactory<CPipeBomb>
 R typeinfo name for CEntityFactory<CPipeBombProjectile>
 R typeinfo name for CEntityFactory<CPistol>
 R typeinfo name for CEntityFactory<CPlasma>
 R typeinfo name for CEntityFactory<CPlayerPickupController>
 R typeinfo name for CEntityFactory<CPlayerResource>
 R typeinfo name for CEntityFactory<CPointAngleSensor>
 R typeinfo name for CEntityFactory<CPointAngularVelocitySensor>
 R typeinfo name for CEntityFactory<CPointBonusMapsAccessor>
 R typeinfo name for CEntityFactory<CPointBroadcastClientCommand>
 R typeinfo name for CEntityFactory<CPointClientCommand>
 R typeinfo name for CEntityFactory<CPointCommentaryNode>
 R typeinfo name for CEntityFactory<CPointDevShotCamera>
 R typeinfo name for CEntityFactory<CPointEntity>
 R typeinfo name for CEntityFactory<CPointEntityFinder>
 R typeinfo name for CEntityFactory<CPointGamestatsCounter>
 R typeinfo name for CEntityFactory<CPointHurt>
 R typeinfo name for CEntityFactory<CPointPlayerMoveConstraint>
 R typeinfo name for CEntityFactory<CPointProximitySensor>
 R typeinfo name for CEntityFactory<CPointPush>
 R typeinfo name for CEntityFactory<CPointServerCommand>
 R typeinfo name for CEntityFactory<CPointSpotlight>
 R typeinfo name for CEntityFactory<CPointTeleport>
 R typeinfo name for CEntityFactory<CPointTemplate>
 R typeinfo name for CEntityFactory<CPointVelocitySensor>
 R typeinfo name for CEntityFactory<CPoseController>
 R typeinfo name for CEntityFactory<CPostProcessController>
 R typeinfo name for CEntityFactory<CPrecipitation>
 R typeinfo name for CEntityFactory<CPrecipitationBlocker>
 R typeinfo name for CEntityFactory<CProjectedDecal>
 R typeinfo name for CEntityFactory<CPropDoorRotatingBreakable>
 R typeinfo name for CEntityFactory<CPropDoorRotatingCheckpoint>
 R typeinfo name for CEntityFactory<CPropGlowingObject>
 R typeinfo name for CEntityFactory<CPropHealthCabinet>
 R typeinfo name for CEntityFactory<CPropMinigun>
 R typeinfo name for CEntityFactory<CPropMountedGun>
 R typeinfo name for CEntityFactory<CPropVehicle>
 R typeinfo name for CEntityFactory<CPropVehicleDriveable>
 R typeinfo name for CEntityFactory<CPropaneTank>
 R typeinfo name for CEntityFactory<CPumpShotgun>
 R typeinfo name for CEntityFactory<CPushable>
 R typeinfo name for CEntityFactory<CRagGib>
 R typeinfo name for CEntityFactory<CRagdollBoogie>
 R typeinfo name for CEntityFactory<CRagdollConstraint>
 R typeinfo name for CEntityFactory<CRagdollMagnet>
 R typeinfo name for CEntityFactory<CRagdollManager>
 R typeinfo name for CEntityFactory<CRagdollProp>
 R typeinfo name for CEntityFactory<CRagdollPropAttached>
 R typeinfo name for CEntityFactory<CRevertSaved>
 R typeinfo name for CEntityFactory<CRopeKeyframe>
 R typeinfo name for CEntityFactory<CRotButton>
 R typeinfo name for CEntityFactory<CRotDoor>
 R typeinfo name for CEntityFactory<CRotorWashShooter>
 R typeinfo name for CEntityFactory<CSceneEntity>
 R typeinfo name for CEntityFactory<CSceneListManager>
 R typeinfo name for CEntityFactory<CSceneManager>
 R typeinfo name for CEntityFactory<CServerRagdollTrigger>
 R typeinfo name for CEntityFactory<CShadowControl>
 R typeinfo name for CEntityFactory<CShower>
 R typeinfo name for CEntityFactory<CSimplePhysicsBrush>
 R typeinfo name for CEntityFactory<CSimplePhysicsProp>
 R typeinfo name for CEntityFactory<CSkyCamera>
 R typeinfo name for CEntityFactory<CSlideshowDisplay>
 R typeinfo name for CEntityFactory<CSmokeStack>
 R typeinfo name for CEntityFactory<CSmokerClaw>
 R typeinfo name for CEntityFactory<CSniperRifle>
 R typeinfo name for CEntityFactory<CSoundEnt>
 R typeinfo name for CEntityFactory<CSpotlightEnd>
 R typeinfo name for CEntityFactory<CSprayCan>
 R typeinfo name for CEntityFactory<CSprite>
 R typeinfo name for CEntityFactory<CSpriteOriented>
 R typeinfo name for CEntityFactory<CSpriteTrail>
 R typeinfo name for CEntityFactory<CSteamJet>
 R typeinfo name for CEntityFactory<CStripWeapons>
 R typeinfo name for CEntityFactory<CSubMachinegun>
 R typeinfo name for CEntityFactory<CSun>
 R typeinfo name for CEntityFactory<CSurroundTest>
 R typeinfo name for CEntityFactory<CSurvivorCamera>
 R typeinfo name for CEntityFactory<CSurvivorPosition>
 R typeinfo name for CEntityFactory<CSurvivorRescue>
 R typeinfo name for CEntityFactory<CTankClaw>
 R typeinfo name for CEntityFactory<CTankRock>
 R typeinfo name for CEntityFactory<CTankTargetChange>
 R typeinfo name for CEntityFactory<CTankTrainAI>
 R typeinfo name for CEntityFactory<CTargetCDAudioRep>
 R typeinfo name for CEntityFactory<CTargetChangeGravity>
 R typeinfo name for CEntityFactory<CTeam>
 R typeinfo name for CEntityFactory<CTeamSpawnPoint>
 R typeinfo name for CEntityFactory<CTeamVehicleSpawnPoint>
 R typeinfo name for CEntityFactory<CTempEntTester>
 R typeinfo name for CEntityFactory<CTerrorGameRulesProxy>
 R typeinfo name for CEntityFactory<CTerrorPlayer>
 R typeinfo name for CEntityFactory<CTerrorPlayerResource>
 R typeinfo name for CEntityFactory<CTerrorViewModel>
 R typeinfo name for CEntityFactory<CTestEffect>
 R typeinfo name for CEntityFactory<CTestTraceline>
 R typeinfo name for CEntityFactory<CTest_ProxyToggle_Networkable>
 R typeinfo name for CEntityFactory<CTextureToggle>
 R typeinfo name for CEntityFactory<CThrow>
 R typeinfo name for CEntityFactory<CTimerEntity>
 R typeinfo name for CEntityFactory<CTonemapTrigger>
 R typeinfo name for CEntityFactory<CTongue>
 R typeinfo name for CEntityFactory<CTransitioningPlayer>
 R typeinfo name for CEntityFactory<CTriggerAutoCrouch>
 R typeinfo name for CEntityFactory<CTriggerBrush>
 R typeinfo name for CEntityFactory<CTriggerCDAudio>
 R typeinfo name for CEntityFactory<CTriggerCamera>
 R typeinfo name for CEntityFactory<CTriggerCameraMultiplayer>
 R typeinfo name for CEntityFactory<CTriggerEscape>
 R typeinfo name for CEntityFactory<CTriggerGravity>
 R typeinfo name for CEntityFactory<CTriggerHurt>
 R typeinfo name for CEntityFactory<CTriggerHurtGhost>
 R typeinfo name for CEntityFactory<CTriggerImpact>
 R typeinfo name for CEntityFactory<CTriggerLook>
 R typeinfo name for CEntityFactory<CTriggerMultiple>
 R typeinfo name for CEntityFactory<CTriggerOnce>
 R typeinfo name for CEntityFactory<CTriggerPlayerMovement>
 R typeinfo name for CEntityFactory<CTriggerProximity>
 R typeinfo name for CEntityFactory<CTriggerPush>
 R typeinfo name for CEntityFactory<CTriggerRemove>
 R typeinfo name for CEntityFactory<CTriggerSave>
 R typeinfo name for CEntityFactory<CTriggerSoundscape>
 R typeinfo name for CEntityFactory<CTriggerTeleport>
 R typeinfo name for CEntityFactory<CTriggerToggleSave>
 R typeinfo name for CEntityFactory<CTriggerVPhysicsMotion>
 R typeinfo name for CEntityFactory<CTriggerVolume>
 R typeinfo name for CEntityFactory<CTriggerWind>
 R typeinfo name for CEntityFactory<CVGuiScreen>
 R typeinfo name for CEntityFactory<CVersusRandom>
 R typeinfo name for CEntityFactory<CVomit>
 R typeinfo name for CEntityFactory<CVomitParticle>
 R typeinfo name for CEntityFactory<CVoteController>
 R typeinfo name for CEntityFactory<CWC_UpdateIgnoreList>
 R typeinfo name for CEntityFactory<CWaterBullet>
 R typeinfo name for CEntityFactory<CWaterLODControl>
 R typeinfo name for CEntityFactory<CWeaponAmmoSpawn>
 R typeinfo name for CEntityFactory<CWeaponCSBase>
 R typeinfo name for CEntityFactory<CWeaponCSBaseGun>
 R typeinfo name for CEntityFactory<CWeaponHEGrenadeSpawn>
 R typeinfo name for CEntityFactory<CWeaponautoshotgunSpawn>
 R typeinfo name for CEntityFactory<CWeaponfirst_aid_kitSpawn>
 R typeinfo name for CEntityFactory<CWeaponhunting_rifleSpawn>
 R typeinfo name for CEntityFactory<CWeaponmolotovSpawn>
 R typeinfo name for CEntityFactory<CWeaponpain_pillsSpawn>
 R typeinfo name for CEntityFactory<CWeaponpipe_bombSpawn>
 R typeinfo name for CEntityFactory<CWeaponpistolSpawn>
 R typeinfo name for CEntityFactory<CWeaponpumpshotgunSpawn>
 R typeinfo name for CEntityFactory<CWeaponrifleSpawn>
 R typeinfo name for CEntityFactory<CWeaponsmgSpawn>
 R typeinfo name for CEntityFactory<CWeightButton>
 R typeinfo name for CEntityFactory<CWindowPane>
 R typeinfo name for CEntityFactory<CWorld>
 R typeinfo name for CEntityFactory<CWorldItem>
 R typeinfo name for CEntityFactory<DustTrail>
 R typeinfo name for CEntityFactory<FilterDamageType>
 R typeinfo name for CEntityFactory<FilterInfectedClass>
 R typeinfo name for CEntityFactory<FilterTeam>
 R typeinfo name for CEntityFactory<Hunter>
 R typeinfo name for CEntityFactory<Infected>
 R typeinfo name for CEntityFactory<InfoChangelevel>
 R typeinfo name for CEntityFactory<MovieExplosion>
 R typeinfo name for CEntityFactory<ParticleSmokeGrenade>
 R typeinfo name for CEntityFactory<RocketTrail>
 R typeinfo name for CEntityFactory<SmokeTrail>
 R typeinfo name for CEntityFactory<Smoker>
 R typeinfo name for CEntityFactory<SporeExplosion>
 R typeinfo name for CEntityFactory<SporeTrail>
 R typeinfo name for CEntityFactory<SurvivorBot>
 R typeinfo name for CEntityFactory<Tank>
 R typeinfo name for CEntityFactory<Witch>
 R typeinfo name for CEntityFactoryDictionary
 R typeinfo name for CEntityFlame
 R typeinfo name for CEntityListSystem
 R typeinfo name for CEntityParticleTrail
 R typeinfo name for CEntityParticleTrail::NetworkVar_m_Info
 R typeinfo name for CEntitySaveRestoreBlockHandler
 R typeinfo name for CEntitySaveUtils
 R typeinfo name for CEntityTouchManager
 R typeinfo name for CEnvBeam
 R typeinfo name for CEnvBeverage
 R typeinfo name for CEnvCredits
 R typeinfo name for CEnvDOFController
 R typeinfo name for CEnvDetailController
 R typeinfo name for CEnvDustPuff
 R typeinfo name for CEnvEffectsScript
 R typeinfo name for CEnvEntityMaker
 R typeinfo name for CEnvExplosion
 R typeinfo name for CEnvFade
 R typeinfo name for CEnvFireSensor
 R typeinfo name for CEnvFireSource
 R typeinfo name for CEnvFunnel
 R typeinfo name for CEnvGlobal
 R typeinfo name for CEnvGunfire
 R typeinfo name for CEnvHudHint
 R typeinfo name for CEnvLaser
 R typeinfo name for CEnvLight
 R typeinfo name for CEnvMicrophone
 R typeinfo name for CEnvMuzzleFlash
 R typeinfo name for CEnvParticleScript
 R typeinfo name for CEnvPlayerSurfaceTrigger
 R typeinfo name for CEnvProjectedTexture
 R typeinfo name for CEnvQuadraticBeam
 R typeinfo name for CEnvRockLauncher
 R typeinfo name for CEnvScreenEffect
 R typeinfo name for CEnvScreenOverlay
 R typeinfo name for CEnvShake
 R typeinfo name for CEnvShooter
 R typeinfo name for CEnvSoundscape
 R typeinfo name for CEnvSoundscapeProxy
 R typeinfo name for CEnvSoundscapeTriggerable
 R typeinfo name for CEnvSpark
 R typeinfo name for CEnvSplash
 R typeinfo name for CEnvTonemapController
 R typeinfo name for CEnvTracer
 R typeinfo name for CEnvViewPunch
 R typeinfo name for CEnvWeaponfire
 R typeinfo name for CEnvWind
 R typeinfo name for CEnvWind::NetworkVar_m_EnvWindShared
 R typeinfo name for CEnvWindShared
 R typeinfo name for CEnvZoom
 R typeinfo name for CEnv_Blocker
 R typeinfo name for CEscapeRoute
 R typeinfo name for CEventLog
 R typeinfo name for CEventQueueSaveLoadProxy
 R typeinfo name for CEventQueue_SaveRestoreBlockHandler
 R typeinfo name for CEventsSaveDataOps
 R typeinfo name for CEveryoneExceptUserFilter
 R typeinfo name for CExplosionAwardTemplate
 R typeinfo name for CFallCauserAwardTemplate
 R typeinfo name for CFilterClass
 R typeinfo name for CFilterContext
 R typeinfo name for CFilterEnemy
 R typeinfo name for CFilterMassGreater
 R typeinfo name for CFilterModel
 R typeinfo name for CFilterMultiple
 R typeinfo name for CFilterName
 R typeinfo name for CFinaleTrigger
 R typeinfo name for CFire
 R typeinfo name for CFireSmoke
 R typeinfo name for CFireSphere
 R typeinfo name for CFireTrail
 R typeinfo name for CFirstAidKit
 R typeinfo name for CFish
 R typeinfo name for CFishPool
 R typeinfo name for CFlaggedEntitiesEnum
 R typeinfo name for CFlexAnimationTrack
 R typeinfo name for CFlexCycler
 R typeinfo name for CFlexExpresser
 R typeinfo name for CFlexExpresserShim
 R typeinfo name for CFlexSceneFileManager
 R typeinfo name for CFmtStrN<1024>
 R typeinfo name for CFmtStrN<128>
 R typeinfo name for CFmtStrN<256>
 R typeinfo name for CFmtStrN<260>
 R typeinfo name for CFmtStrN<32>
 R typeinfo name for CFmtStrN<64>
 R typeinfo name for CFmtStrN<80>
 R typeinfo name for CFogController
 R typeinfo name for CFogController::NetworkVar_m_fog
 R typeinfo name for CFogSystem
 R typeinfo name for CFogTrigger
 R typeinfo name for CFogVolume
 R typeinfo name for CForgetfulAwardTemplate
 R typeinfo name for CFourWheelServerVehicle
 R typeinfo name for CFourWheelVehiclePhysics
 R typeinfo name for CFriendlyFireAwardTemplate
 R typeinfo name for CFuelBarrelPiece
 R typeinfo name for CFuelBarrelProp
 R typeinfo name for CFuncAreaPortalBase
 R typeinfo name for CFuncAreaPortalWindow
 R typeinfo name for CFuncBrush
 R typeinfo name for CFuncConveyor
 R typeinfo name for CFuncElevator
 R typeinfo name for CFuncFireExtinguisher
 R typeinfo name for CFuncIllusionary
 R typeinfo name for CFuncLadder
 R typeinfo name for CFuncLadderEndPoint
 R typeinfo name for CFuncMoveLinear
 R typeinfo name for CFuncNavAttributeRegion
 R typeinfo name for CFuncNavBlocker
 R typeinfo name for CFuncNavObstruction
 R typeinfo name for CFuncNavStairsToggle
 R typeinfo name for CFuncOccluder
 R typeinfo name for CFuncPlat
 R typeinfo name for CFuncPlatRot
 R typeinfo name for CFuncPlayerInfectedClip
 R typeinfo name for CFuncRagdollFader
 R typeinfo name for CFuncReflectiveGlass
 R typeinfo name for CFuncRotating
 R typeinfo name for CFuncSimpleLadder
 R typeinfo name for CFuncSmokeVolume
 R typeinfo name for CFuncSpawnVolume
 R typeinfo name for CFuncTankTrain
 R typeinfo name for CFuncTrackAuto
 R typeinfo name for CFuncTrackChange
 R typeinfo name for CFuncTrackTrain
 R typeinfo name for CFuncTrain
 R typeinfo name for CFuncTrainControls
 R typeinfo name for CFuncVPhysicsClip
 R typeinfo name for CFuncVehicleClip
 R typeinfo name for CFuncWall
 R typeinfo name for CFuncWallToggle
 R typeinfo name for CFunc_Dust
 R typeinfo name for CFunc_DustCloud
 R typeinfo name for CFunc_DustMotes
 R typeinfo name for CFunc_LOD
 R typeinfo name for CFunctor
 R typeinfo name for CFunctor1<void (*)(bool), bool, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >
 R typeinfo name for CFunctor3<void (*)(IPhysicsObject*, Vector const&, Vector const&), IPhysicsObject*, Vector, Vector, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >
 R typeinfo name for CFunctor4<CBaseEntity* (*)(CBaseEntity*, CBaseEntity*, bool, float), CBaseEntity*, CBaseEntity*, bool, float, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >
 R typeinfo name for CFunctorJob
 R typeinfo name for CGameDLL_ConVarAccessor
 R typeinfo name for CGameEnd
 R typeinfo name for CGameEventListener
 R typeinfo name for CGameGibManager
 R typeinfo name for CGameMovement
 R typeinfo name for CGamePlayerEquip
 R typeinfo name for CGamePlayerTeam
 R typeinfo name for CGamePlayerZone
 R typeinfo name for CGameRules
 R typeinfo name for CGameRulesProxy
 R typeinfo name for CGameScore
 R typeinfo name for CGameStringPool
 R typeinfo name for CGameText
 R typeinfo name for CGameUI
 R typeinfo name for CGameWeaponManager
 R typeinfo name for CGasCan
 R typeinfo name for CGenericFlexCycler
 R typeinfo name for CGib
 R typeinfo name for CGibShooter
 R typeinfo name for CGlobalEntityList
 R typeinfo name for CGlobalState
 R typeinfo name for CGoodTeammateAwardTemplate
 R typeinfo name for CGotchaAwardTemplate
 R typeinfo name for CGrabController
 R typeinfo name for CGreedAwardTemplate
 R typeinfo name for CGrenadeBlunderAwardTemplate
 R typeinfo name for CGrenadeExpertAwardTemplate
 R typeinfo name for CGrenadierAwardTemplate
 R typeinfo name for CGunTarget
 R typeinfo name for CHLTVDirector
 R typeinfo name for CHandleDummy
 R typeinfo name for CHandleTest
 R typeinfo name for CHeadhunterAwardTemplate
 R typeinfo name for CHelpingHandAwardTemplate
 R typeinfo name for CHeroAwardTemplate
 R typeinfo name for CHinderingEscapeAwardTemplate
 R typeinfo name for CHitAndRunAwardTemplate
 R typeinfo name for CHitEverybodyAwardTemplate
 R typeinfo name for CHulkPhysicsAwardTemplate
 R typeinfo name for CHulkPunchAwardTemplate
 R typeinfo name for CHulkRockAwardTemplate
 R typeinfo name for CHulkShutOutAwardTemplate
 R typeinfo name for CHulkSlayerAwardTemplate
 R typeinfo name for CHunterClaw
 R typeinfo name for CHurdleAwardTemplate
 R typeinfo name for CIKSaveRestoreOps
 R typeinfo name for CInfectedAnimationLayer
 R typeinfo name for CInfectedZooMaker
 R typeinfo name for CInfectedZooPuppet
 R typeinfo name for CInferno
 R typeinfo name for CInfoDirector
 R typeinfo name for CInfoElevatorFloor
 R typeinfo name for CInfoGameEventProxy
 R typeinfo name for CInfoGameMode
 R typeinfo name for CInfoGoalInfectedChase
 R typeinfo name for CInfoIntermission
 R typeinfo name for CInfoLadderDismount
 R typeinfo name for CInfoMassCenter
 R typeinfo name for CInfoOverlayAccessor
 R typeinfo name for CInfoRemarkable
 R typeinfo name for CInfoTarget
 R typeinfo name for CInfoViewParameters
 R typeinfo name for CInfoZombieSpawn
 R typeinfo name for CInstancedResponseSystem
 R typeinfo name for CInstancedSceneEntity
 R typeinfo name for CItSurvivorAwardTemplate
 R typeinfo name for CItem
 R typeinfo name for CItemSoda
 R typeinfo name for CJob
 R typeinfo name for CKeepUpright
 R typeinfo name for CKickIssue
 R typeinfo name for CKnockdownAwardTemplate
 R typeinfo name for CL4DGameStats
 R typeinfo name for CLagCompensationManager
 R typeinfo name for CLeft4DeadAwardTemplate
 R typeinfo name for CLeftBehindAwardTemplate
 R typeinfo name for CLight
 R typeinfo name for CLightGlow
 R typeinfo name for CLogicActiveAutosave
 R typeinfo name for CLogicAuto
 R typeinfo name for CLogicAutosave
 R typeinfo name for CLogicBranch
 R typeinfo name for CLogicBranchList
 R typeinfo name for CLogicCase
 R typeinfo name for CLogicCollisionPair
 R typeinfo name for CLogicCompare
 R typeinfo name for CLogicCompareInteger
 R typeinfo name for CLogicLineToEntity
 R typeinfo name for CLogicMeasureMovement
 R typeinfo name for CLogicNavigation
 R typeinfo name for CLogicRelay
 R typeinfo name for CLogicalEntity
 R typeinfo name for CLunge
 R typeinfo name for CLunge::NetworkVar_m_lungeAgainTimer
 R typeinfo name for CMVPAwardTemplate
 R typeinfo name for CMapInfo
 R typeinfo name for CMapInfoVersus
 R typeinfo name for CMapLoadEntityFilter
 R typeinfo name for CMaterialModifyControl
 R typeinfo name for CMathColorBlend
 R typeinfo name for CMathCounter
 R typeinfo name for CMathRemap
 R typeinfo name for CMemZeroOnNew
 R typeinfo name for CMemberFunctor0<CParallelProcessor<QueryCacheUpdateRecord_t, CFuncJobItemProcessor<QueryCacheUpdateRecord_t>, 1>*, void (CParallelProcessor<QueryCacheUpdateRecord_t, CFuncJobItemProcessor<QueryCacheUpdateRecord_t>, 1>::*)(), CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>
 R typeinfo name for CMemberFunctor3<CBreakableProp*, void (CBreakableProp::*)(Vector const&, Vector const&, QAngle const&), Vector, Vector, QAngle, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>
 R typeinfo name for CMessage
 R typeinfo name for CMessageEntity
 R typeinfo name for CModelSoundsCache
 R typeinfo name for CModelSoundsCacheSaver
 R typeinfo name for CMolotov
 R typeinfo name for CMolotovProjectile
 R typeinfo name for CMomentaryRotButton
 R typeinfo name for CMostHitsAwardTemplate
 R typeinfo name for CMotorController
 R typeinfo name for CMovableEnum
 R typeinfo name for CMoveHelperServer
 R typeinfo name for CMovementSpeedMod
 R typeinfo name for CMultiSource
 R typeinfo name for CMultiplayRules
 R typeinfo name for CMultiplayer_Expresser
 R typeinfo name for CMurderAwardTemplate
 R typeinfo name for CNarrowEscapeAwardTemplate
 R typeinfo name for CNavArea
 R typeinfo name for CNavAreaCriticalData
 R typeinfo name for CNavMesh
 R typeinfo name for CNoSurvivorsAwardTemplate
 R typeinfo name for CNotifyList
 R typeinfo name for CNullEntity
 R typeinfo name for COrnamentProp
 R typeinfo name for COuttroStats
 R typeinfo name for COxygenTank
 R typeinfo name for CPASAttenuationFilter
 R typeinfo name for CPASFilter
 R typeinfo name for CPVSFilter
 R typeinfo name for CPainPills
 R typeinfo name for CPainPills::NetworkVar_m_pillUseTimer
 R typeinfo name for CParryAwardTemplate
 R typeinfo name for CParticleFire
 R typeinfo name for CParticleLight
 R typeinfo name for CParticlePerformanceMonitor
 R typeinfo name for CParticleSystem
 R typeinfo name for CParticleSystemQuery
 R typeinfo name for CPathCorner
 R typeinfo name for CPathCornerCrash
 R typeinfo name for CPathKeyFrame
 R typeinfo name for CPathTrack
 R typeinfo name for CPerfectTeamAwardTemplate
 R typeinfo name for CPhysBallSocket
 R typeinfo name for CPhysBox
 R typeinfo name for CPhysBoxMultiplayer
 R typeinfo name for CPhysConstraint
 R typeinfo name for CPhysConstraintEvents
 R typeinfo name for CPhysConstraintSystem
 R typeinfo name for CPhysConvert
 R typeinfo name for CPhysExplosion
 R typeinfo name for CPhysFixed
 R typeinfo name for CPhysForce
 R typeinfo name for CPhysHinge
 R typeinfo name for CPhysImpact
 R typeinfo name for CPhysLength
 R typeinfo name for CPhysMagnet
 R typeinfo name for CPhysMotor
 R typeinfo name for CPhysObjSaveRestoreOps
 R typeinfo name for CPhysPulley
 R typeinfo name for CPhysSaveRestoreBlockHandler
 R typeinfo name for CPhysSlideConstraint
 R typeinfo name for CPhysSphere
 R typeinfo name for CPhysThruster
 R typeinfo name for CPhysTorque
 R typeinfo name for CPhysicsCannister
 R typeinfo name for CPhysicsEntitySolver
 R typeinfo name for CPhysicsGameTrace
 R typeinfo name for CPhysicsHook
 R typeinfo name for CPhysicsNPCSolver
 R typeinfo name for CPhysicsPlayerCallback
 R typeinfo name for CPhysicsProp
 R typeinfo name for CPhysicsPropRespawnable
 R typeinfo name for CPhysicsShake
 R typeinfo name for CPhysicsSpring
 R typeinfo name for CPhysicsWind
 R typeinfo name for CPhysicsWire
 R typeinfo name for CPipeBomb
 R typeinfo name for CPipeBombProjectile
 R typeinfo name for CPistol
 R typeinfo name for CPlasma
 R typeinfo name for CPlatTrigger
 R typeinfo name for CPlayerInfo
 R typeinfo name for CPlayerInfoManager
 R typeinfo name for CPlayerLocalData
 R typeinfo name for CPlayerLocalData::NetworkVar_m_audio
 R typeinfo name for CPlayerLocalData::NetworkVar_m_skybox3d
 R typeinfo name for CPlayerMove
 R typeinfo name for CPlayerPickupController
 R typeinfo name for CPlayerResource
 R typeinfo name for CPlayerState
 R typeinfo name for CPluginBotManager
 R typeinfo name for CPluginHelpersCheck
 R typeinfo name for CPointAngleSensor
 R typeinfo name for CPointAngularVelocitySensor
 R typeinfo name for CPointBonusMapsAccessor
 R typeinfo name for CPointBroadcastClientCommand
 R typeinfo name for CPointClientCommand
 R typeinfo name for CPointCommentaryNode
 R typeinfo name for CPointDevShotCamera
 R typeinfo name for CPointEntity
 R typeinfo name for CPointEntityFinder
 R typeinfo name for CPointGamestatsCounter
 R typeinfo name for CPointHurt
 R typeinfo name for CPointPlayerMoveConstraint
 R typeinfo name for CPointProximitySensor
 R typeinfo name for CPointPush
 R typeinfo name for CPointServerCommand
 R typeinfo name for CPointSpotlight
 R typeinfo name for CPointTeleport
 R typeinfo name for CPointTemplate
 R typeinfo name for CPointTemplatePrecacher
 R typeinfo name for CPointVelocitySensor
 R typeinfo name for CPoseController
 R typeinfo name for CPostProcessController
 R typeinfo name for CPostProcessSystem
 R typeinfo name for CPounceAwardTemplate
 R typeinfo name for CPrecacheOtherList
 R typeinfo name for CPrecacheSystem
 R typeinfo name for CPrecipitation
 R typeinfo name for CPrecipitationBlocker
 R typeinfo name for CPredictedViewModel
 R typeinfo name for CProjectedDecal
 R typeinfo name for CPropData
 R typeinfo name for CPropDoorRotating
 R typeinfo name for CPropDoorRotatingBreakable
 R typeinfo name for CPropDoorRotatingCheckpoint
 R typeinfo name for CPropGlowingObject
 R typeinfo name for CPropHealthCabinet
 R typeinfo name for CPropMinigun
 R typeinfo name for CPropMountedGun
 R typeinfo name for CPropVehicle
 R typeinfo name for CPropVehicleDriveable
 R typeinfo name for CPropaneTank
 R typeinfo name for CProtectorAwardTemplate
 R typeinfo name for CPumpShotgun
 R typeinfo name for CPushAwayEnumerator
 R typeinfo name for CPushBlockerEnum
 R typeinfo name for CPushable
 R typeinfo name for CRagGib
 R typeinfo name for CRagdollBoogie
 R typeinfo name for CRagdollConstraint
 R typeinfo name for CRagdollLRURetirement
 R typeinfo name for CRagdollMagnet
 R typeinfo name for CRagdollManager
 R typeinfo name for CRagdollProp
 R typeinfo name for CRagdollPropAttached
 R typeinfo name for CRecipientFilter
 R typeinfo name for CRedecoratorAwardTemplate
 R typeinfo name for CRefCountServiceBase<true, CRefMT>
 R typeinfo name for CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >
 R typeinfo name for CRefCounted1<IRefCounted, CRefCountServiceBase<true, CRefMT> >
 R typeinfo name for CRegistry
 R typeinfo name for CReliableBroadcastRecipientFilter
 R typeinfo name for CRemarkableEntityList
 R typeinfo name for CRescuerAwardTemplate
 R typeinfo name for CRespawnEntitiesFilter
 R typeinfo name for CResponseQueueManager
 R typeinfo name for CResponseSystem
 R typeinfo name for CRestartGameIssue
 R typeinfo name for CRestore
 R typeinfo name for CReturnToLobbyIssue
 R typeinfo name for CRevertSaved
 R typeinfo name for CReviveFriendAwardTemplate
 R typeinfo name for CRopeKeyframe
 R typeinfo name for CRotButton
 R typeinfo name for CRotDoor
 R typeinfo name for CRotorWashShooter
 R typeinfo name for CRuleBrushEntity
 R typeinfo name for CRuleEntity
 R typeinfo name for CRulePointEntity
 R typeinfo name for CSave
 R typeinfo name for CSaveRestoreBlockSet
 R typeinfo name for CSaviorAwardTemplate
 R typeinfo name for CScenarioWinAwardTemplate
 R typeinfo name for CSceneEntity
 R typeinfo name for CSceneFindMarkFilter
 R typeinfo name for CSceneFindNearestMarkFilter
 R typeinfo name for CSceneListManager
 R typeinfo name for CSceneManager
 R typeinfo name for CSceneTokenProcessor
 R typeinfo name for CSecurityFailureAwardTemplate
 R typeinfo name for CServerDLLSharedAppSystems
 R typeinfo name for CServerGameClients
 R typeinfo name for CServerGameDLL
 R typeinfo name for CServerGameEnts
 R typeinfo name for CServerGameTags
 R typeinfo name for CServerNetworkProperty
 R typeinfo name for CServerOnlyEntity
 R typeinfo name for CServerOnlyPointEntity
 R typeinfo name for CServerRagdollTrigger
 R typeinfo name for CServerTools
 R typeinfo name for CShadowControl
 R typeinfo name for CSharingAwardTemplate
 R typeinfo name for CSharpshooterAwardTemplate
 R typeinfo name for CShower
 R typeinfo name for CSimThinkManager
 R typeinfo name for CSimplePhysicsBrush
 R typeinfo name for CSimplePhysicsProp
 R typeinfo name for CSingleUserPlusObserversFilter
 R typeinfo name for CSingleUserRecipientFilter
 R typeinfo name for CSkeetShootAwardTemplate
 R typeinfo name for CSkipKeys
 R typeinfo name for CSkyCamera
 R typeinfo name for CSlideshowDisplay
 R typeinfo name for CSmokeCloudSystem
 R typeinfo name for CSmokeStack
 R typeinfo name for CSmokerClaw
 R typeinfo name for CSniperAwardTemplate
 R typeinfo name for CSniperRifle
 R typeinfo name for CSolidSetDefaults
 R typeinfo name for CSoundControllerImp
 R typeinfo name for CSoundEmitterSystem
 R typeinfo name for CSoundEnt
 R typeinfo name for CSoundEnvelopeController
 R typeinfo name for CSoundPatchSaveRestoreOps
 R typeinfo name for CSoundscapeSystem
 R typeinfo name for CSpotlightEnd
 R typeinfo name for CSprayCan
 R typeinfo name for CSprite
 R typeinfo name for CSpriteOriented
 R typeinfo name for CSpriteTrail
 R typeinfo name for CSteamJet
 R typeinfo name for CStringPool
 R typeinfo name for CStringTableSaveRestoreOps
 R typeinfo name for CStripWeapons
 R typeinfo name for CSubMachinegun
 R typeinfo name for CSun
 R typeinfo name for CSurroundTest
 R typeinfo name for CSurvivorCamera
 R typeinfo name for CSurvivorGroupInfo
 R typeinfo name for CSurvivorKillAwardTemplate
 R typeinfo name for CSurvivorPosition
 R typeinfo name for CSurvivorRescue
 R typeinfo name for CTEArmorRicochet
 R typeinfo name for CTEBSPDecal
 R typeinfo name for CTEBaseBeam
 R typeinfo name for CTEBeamEntPoint
 R typeinfo name for CTEBeamEnts
 R typeinfo name for CTEBeamFollow
 R typeinfo name for CTEBeamLaser
 R typeinfo name for CTEBeamPoints
 R typeinfo name for CTEBeamRing
 R typeinfo name for CTEBeamRingPoint
 R typeinfo name for CTEBeamSpline
 R typeinfo name for CTEBloodSprite
 R typeinfo name for CTEBloodStream
 R typeinfo name for CTEBreakModel
 R typeinfo name for CTEBubbleTrail
 R typeinfo name for CTEBubbles
 R typeinfo name for CTEBullets
 R typeinfo name for CTEClientProjectile
 R typeinfo name for CTEDecal
 R typeinfo name for CTEDust
 R typeinfo name for CTEDynamicLight
 R typeinfo name for CTEEffectDispatch
 R typeinfo name for CTEEnergySplash
 R typeinfo name for CTEExplosion
 R typeinfo name for CTEFizz
 R typeinfo name for CTEFootprintDecal
 R typeinfo name for CTEFoundryHelpers
 R typeinfo name for CTEGaussExplosion
 R typeinfo name for CTEGlowSprite
 R typeinfo name for CTEImpact
 R typeinfo name for CTEKillPlayerAttachments
 R typeinfo name for CTELargeFunnel
 R typeinfo name for CTEMetalSparks
 R typeinfo name for CTEMuzzleFlash
 R typeinfo name for CTEParticleSystem
 R typeinfo name for CTEPhysicsProp
 R typeinfo name for CTEPlayerAnimEvent
 R typeinfo name for CTEPlayerDecal
 R typeinfo name for CTEProjectedDecal
 R typeinfo name for CTEShatterSurface
 R typeinfo name for CTEShowLine
 R typeinfo name for CTESmoke
 R typeinfo name for CTESparks
 R typeinfo name for CTESprite
 R typeinfo name for CTESpriteSpray
 R typeinfo name for CTEWorldDecal
 R typeinfo name for CTankClaw
 R typeinfo name for CTankClaw::NetworkVar_m_lowAttackDurationTimer
 R typeinfo name for CTankRock
 R typeinfo name for CTankTargetChange
 R typeinfo name for CTankTrainAI
 R typeinfo name for CTargetCDAudioRep
 R typeinfo name for CTargetChangeGravity
 R typeinfo name for CTeam
 R typeinfo name for CTeamSpawnPoint
 R typeinfo name for CTeamVehicleSpawnPoint
 R typeinfo name for CTeamplayRoundBasedRules
 R typeinfo name for CTeamplayRules
 R typeinfo name for CTempEntTester
 R typeinfo name for CTempEntsSystem
 R typeinfo name for CTemplate_SaveRestoreBlockHandler
 R typeinfo name for CTemplatesHook
 R typeinfo name for CTerrorAmmoDef
 R typeinfo name for CTerrorAmmoDefSystem
 R typeinfo name for CTerrorEventLog
 R typeinfo name for CTerrorGameMovement
 R typeinfo name for CTerrorGameRules
 R typeinfo name for CTerrorGameRulesProxy
 R typeinfo name for CTerrorGun
 R typeinfo name for CTerrorPlayer
 R typeinfo name for CTerrorPlayer::NetworkVar_m_autoCrouchTimer
 R typeinfo name for CTerrorPlayer::NetworkVar_m_hangTimer
 R typeinfo name for CTerrorPlayer::NetworkVar_m_itTimer
 R typeinfo name for CTerrorPlayer::NetworkVar_m_knockdownTimer
 R typeinfo name for CTerrorPlayer::NetworkVar_m_noAvoidanceTimer
 R typeinfo name for CTerrorPlayer::NetworkVar_m_staggerTimer
 R typeinfo name for CTerrorPlayer::NetworkVar_m_stunTimer
 R typeinfo name for CTerrorPlayer::NetworkVar_m_suicideCountdown
 R typeinfo name for CTerrorPlayer::NetworkVar_m_tongueVictimTimer
 R typeinfo name for CTerrorPlayer::NetworkVar_m_tugTimer
 R typeinfo name for CTerrorPlayer::NetworkVar_m_vocalizationSubjectTimer
 R typeinfo name for CTerrorPlayerResource
 R typeinfo name for CTerrorUsePushFilter
 R typeinfo name for CTerrorViewModel
 R typeinfo name for CTerrorWeapon
 R typeinfo name for CTerrorWeapon::NetworkVar_m_attackTimer
 R typeinfo name for CTerrorWeapon::NetworkVar_m_helpingHandSuppressionTimer
 R typeinfo name for CTerrorWeapon::NetworkVar_m_helpingHandTargetTimer
 R typeinfo name for CTerrorWeapon::NetworkVar_m_helpingHandTimer
 R typeinfo name for CTerrorWeapon::NetworkVar_m_swingTimer
 R typeinfo name for CTerrorWeaponInfo
 R typeinfo name for CTestEffect
 R typeinfo name for CTestTraceline
 R typeinfo name for CTest_ProxyToggle_Networkable
 R typeinfo name for CTextureToggle
 R typeinfo name for CThinkContextsSaveDataOps
 R typeinfo name for CThrow
 R typeinfo name for CThrustController
 R typeinfo name for CTimerEntity
 R typeinfo name for CTonemapSystem
 R typeinfo name for CTonemapTrigger
 R typeinfo name for CTongue
 R typeinfo name for CTongueChokeAwardTemplate
 R typeinfo name for CToolFrameworkServer
 R typeinfo name for CToughGuyAwardTemplate
 R typeinfo name for CTraceBulletEntityEnumerator
 R typeinfo name for CTraceFilter
 R typeinfo name for CTraceFilterAgainstEntityList
 R typeinfo name for CTraceFilterChain
 R typeinfo name for CTraceFilterDoor
 R typeinfo name for CTraceFilterEntitiesOnly
 R typeinfo name for CTraceFilterEntity
 R typeinfo name for CTraceFilterEntityIgnoreOther
 R typeinfo name for CTraceFilterGroundEntities
 R typeinfo name for CTraceFilterIgnoreActors
 R typeinfo name for CTraceFilterIgnoreMoveableObjects
 R typeinfo name for CTraceFilterLOS
 R typeinfo name for CTraceFilterMelee
 R typeinfo name for CTraceFilterNoCombatCharacters
 R typeinfo name for CTraceFilterNoNPCsOrPlayer
 R typeinfo name for CTraceFilterOnlyPhysicsDamage
 R typeinfo name for CTraceFilterPhysics
 R typeinfo name for CTraceFilterPlayerMovement
 R typeinfo name for CTraceFilterPlayersNPCs
 R typeinfo name for CTraceFilterPlayersNPCsPhysicsProps
 R typeinfo name for CTraceFilterPushFinal
 R typeinfo name for CTraceFilterPushMove
 R typeinfo name for CTraceFilterSimple
 R typeinfo name for CTraceFilterSimpleList
 R typeinfo name for CTraceFilterSimpleListNoGhosts
 R typeinfo name for CTraceFilterSimpleListNoInfectedOrGhosts
 R typeinfo name for CTraceFilterSkipClassname
 R typeinfo name for CTraceFilterSkipNPCs
 R typeinfo name for CTraceFilterSkipTeam
 R typeinfo name for CTraceFilterSkipTwoEntities
 R typeinfo name for CTraceFilterSkipTwoEntitiesAndTeammates
 R typeinfo name for CTraceFilterTongue
 R typeinfo name for CTraceFilterValidForDecal
 R typeinfo name for CTraceFilterViewOffset
 R typeinfo name for CTraceFilterWalkableEntities
 R typeinfo name for CTraceFilterWorldOnly
 R typeinfo name for CTransitioningPlayer
 R typeinfo name for CTriggerAutoCrouch
 R typeinfo name for CTriggerBrush
 R typeinfo name for CTriggerCDAudio
 R typeinfo name for CTriggerCamera
 R typeinfo name for CTriggerCameraMultiplayer
 R typeinfo name for CTriggerEscape
 R typeinfo name for CTriggerGravity
 R typeinfo name for CTriggerHurt
 R typeinfo name for CTriggerHurtGhost
 R typeinfo name for CTriggerImpact
 R typeinfo name for CTriggerLook
 R typeinfo name for CTriggerMultiple
 R typeinfo name for CTriggerOnce
 R typeinfo name for CTriggerPlayerMovement
 R typeinfo name for CTriggerProximity
 R typeinfo name for CTriggerPush
 R typeinfo name for CTriggerRemove
 R typeinfo name for CTriggerSave
 R typeinfo name for CTriggerSoundscape
 R typeinfo name for CTriggerTeleport
 R typeinfo name for CTriggerToggleSave
 R typeinfo name for CTriggerTraceEnum
 R typeinfo name for CTriggerVPhysicsMotion
 R typeinfo name for CTriggerVolume
 R typeinfo name for CTriggerWind
 R typeinfo name for CTutorLesson
 R typeinfo name for CUseTraceFilter
 R typeinfo name for CUserCmd
 R typeinfo name for CUtlCStringConversion
 R typeinfo name for CUtlCachedFileData<CModelSoundsCache>
 R typeinfo name for CUtlCharConversion
 R typeinfo name for CUtlNoEscConversion
 R typeinfo name for CUtlSymbolDataOps
 R typeinfo name for CUtlVectorDataOps<CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer, int> >, 10>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >, 12>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity>, int> >, 13>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<CHandle<CBaseFlex>, CUtlMemory<CHandle<CBaseFlex>, int> >, 13>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer>, int> >, 13>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<CHandle<CFish>, CUtlMemory<CHandle<CFish>, int> >, 13>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity>, int> >, 13>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<CHandle<CSceneListManager>, CUtlMemory<CHandle<CSceneListManager>, int> >, 13>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<CHandle<CVGuiScreen>, CUtlMemory<CHandle<CVGuiScreen>, int> >, 13>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<CPassengerInfo, CUtlMemory<CPassengerInfo, int> >, 10>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<Relationship_t, CUtlMemory<Relationship_t, int> >, 10>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<ResponseContext_t, CUtlMemory<ResponseContext_t, int> >, 10>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<SaveRestoreBlockHeader_t, CUtlMemory<SaveRestoreBlockHeader_t, int> >, 10>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<globalentity_t, CUtlMemory<globalentity_t, int> >, 10>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<int, CUtlMemory<int, int> >, 5>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<magnetted_objects_t, CUtlMemory<magnetted_objects_t, int> >, 10>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<modifiedconvars_t, CUtlMemory<modifiedconvars_t, int> >, 10>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<physfollower_t, CUtlMemory<physfollower_t, int> >, 10>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<template_t, CUtlMemory<template_t, int> >, 10>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<thinkfunc_t, CUtlMemory<thinkfunc_t, int> >, 10>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<vehicle_crashsound_t, CUtlMemory<vehicle_crashsound_t, int> >, 10>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<vehicle_gear_t, CUtlMemory<vehicle_gear_t, int> >, 10>
 R typeinfo name for CVGuiScreen
 R typeinfo name for CVariantSaveDataOps
 R typeinfo name for CVehicleSoundsParser
 R typeinfo name for CVersusRandom
 R typeinfo name for CVisibilityMonitor
 R typeinfo name for CVoiceGameMgr
 R typeinfo name for CVoiceGameMgrHelper
 R typeinfo name for CVomit
 R typeinfo name for CVomit::NetworkVar_m_attackDuration
 R typeinfo name for CVomit::NetworkVar_m_nextSpray
 R typeinfo name for CVomitHitAwardTemplate
 R typeinfo name for CVomitParticle
 R typeinfo name for CVomitStopAwardTemplate
 R typeinfo name for CVoteController
 R typeinfo name for CWC_UpdateIgnoreList
 R typeinfo name for CWaterBullet
 R typeinfo name for CWaterLODControl
 R typeinfo name for CWeaponAmmoSpawn
 R typeinfo name for CWeaponCSBase
 R typeinfo name for CWeaponCSBaseGun
 R typeinfo name for CWeaponExpertAwardTemplate
 R typeinfo name for CWeaponHEGrenadeSpawn
 R typeinfo name for CWeaponLOSFilter
 R typeinfo name for CWeaponList
 R typeinfo name for CWeaponSpawn
 R typeinfo name for CWeaponSpawnEnum
 R typeinfo name for CWeaponautoshotgunSpawn
 R typeinfo name for CWeaponfirst_aid_kitSpawn
 R typeinfo name for CWeaponhunting_rifleSpawn
 R typeinfo name for CWeaponmolotovSpawn
 R typeinfo name for CWeaponpain_pillsSpawn
 R typeinfo name for CWeaponpipe_bombSpawn
 R typeinfo name for CWeaponpistolSpawn
 R typeinfo name for CWeaponpumpshotgunSpawn
 R typeinfo name for CWeaponrifleSpawn
 R typeinfo name for CWeaponsmgSpawn
 R typeinfo name for CWeightButton
 R typeinfo name for CWhiplashAwardTemplate
 R typeinfo name for CWindowPane
 R typeinfo name for CWitchHarassmentAwardTemplate
 R typeinfo name for CWitchSlayerAwardTemplate
 R typeinfo name for CWorld
 R typeinfo name for CWorldItem
 R typeinfo name for ChasePath
 R typeinfo name for ChaseVictim
 R typeinfo name for CheckpointDoorScan
 R typeinfo name for ClientPrecachePrecache::CResourcePrecacher
 R typeinfo name for ConCommand
 R typeinfo name for ConCommandBase
 R typeinfo name for ConVar
 R typeinfo name for CountdownTimer
 R typeinfo name for DebugMoveTo
 R typeinfo name for DirectChasePath
 R typeinfo name for Director
 R typeinfo name for DustTrail
 R typeinfo name for EditNav_PrecachePrecache::CResourcePrecacher
 R typeinfo name for EffectsPrecachePrecache::CResourcePrecacher
 R typeinfo name for EnsureTeamSize
 R typeinfo name for EntityParticleTrailInfo_t
 R typeinfo name for FileWeaponInfo_t
 R typeinfo name for FilterDamageType
 R typeinfo name for FilterInfectedClass
 R typeinfo name for FilterTeam
 R typeinfo name for HidingSpot
 R typeinfo name for HulkSmashableEnumerator
 R typeinfo name for Hunter
 R typeinfo name for HunterAttack
 R typeinfo name for HunterBehavior
 R typeinfo name for HunterIntention
 R typeinfo name for HunterLeapToCover
 R typeinfo name for HunterLocomotion
 R typeinfo name for HunterLungeAtVictim
 R typeinfo name for IAchievement
 R typeinfo name for IAchievementMgr
 R typeinfo name for IAppSystem
 R typeinfo name for IBaseCacheInfo
 R typeinfo name for IBaseInterface
 R typeinfo name for IBody
 R typeinfo name for IBotController
 R typeinfo name for IBotManager
 R typeinfo name for IBreakableWithPropData
 R typeinfo name for ICSPlayerAnimState
 R typeinfo name for ICSPlayerAnimStateHelpers
 R typeinfo name for IChoreoEventCallback
 R typeinfo name for IChoreoStringPool
 R typeinfo name for ICollideable
 R typeinfo name for ICommandCallback
 R typeinfo name for ICommandCompletionCallback
 R typeinfo name for IConCommandBaseAccessor
 R typeinfo name for IConVar
 R typeinfo name for IContextualQuery
 R typeinfo name for ICurveDataAccessor
 R typeinfo name for IDecalEmitterSystem
 R typeinfo name for IDrivableVehicle
 R typeinfo name for IEffects
 R typeinfo name for IEntityDataInstantiator
 R typeinfo name for IEntityEnumerator
 R typeinfo name for IEntityFactory
 R typeinfo name for IEntityFactoryDictionary
 R typeinfo name for IEntityFindFilter
 R typeinfo name for IEntityListener
 R typeinfo name for IEntitySaveUtils
 R typeinfo name for IEventRegisterCallback
 R typeinfo name for IGameEventListener2
 R typeinfo name for IGameMovement
 R typeinfo name for IGameSystem
 R typeinfo name for IGameSystemPerFrame
 R typeinfo name for IHLTVDirector
 R typeinfo name for IHandleEntity
 R typeinfo name for IIntention
 R typeinfo name for ILagCompensationManager
 R typeinfo name for ILocomotion
 R typeinfo name for IMapEntityFilter
 R typeinfo name for IMotionEvent
 R typeinfo name for IMoveHelper
 R typeinfo name for IMoveHelperServer
 R typeinfo name for IMultiplayerPhysics
 R typeinfo name for INPCPassengerCarrier
 R typeinfo name for INavAvoidanceObstacle
 R typeinfo name for INextBot
 R typeinfo name for INextBotComponent
 R typeinfo name for INextBotEntityFilter
 R typeinfo name for INextBotEventResponder
 R typeinfo name for INextBotPlayerInput
 R typeinfo name for INextBotReply
 R typeinfo name for INotify
 R typeinfo name for IParentPropInteraction
 R typeinfo name for IParticleOperatorDefinition
 R typeinfo name for IParticleSystemQuery
 R typeinfo name for IPartitionEnumerator
 R typeinfo name for IPartitionQueryCallback
 R typeinfo name for IPathCost
 R typeinfo name for IPhysSaveRestoreManager
 R typeinfo name for IPhysicsCollisionEvent
 R typeinfo name for IPhysicsCollisionSolver
 R typeinfo name for IPhysicsConstraintEvent
 R typeinfo name for IPhysicsGameTrace
 R typeinfo name for IPhysicsObjectEvent
 R typeinfo name for IPhysicsPlayerControllerEvent
 R typeinfo name for IPlayerAnimState
 R typeinfo name for IPlayerFunctor
 R typeinfo name for IPlayerInfo
 R typeinfo name for IPlayerInfoManager
 R typeinfo name for IPlayerPickupVPhysics
 R typeinfo name for IPluginHelpersCheck
 R typeinfo name for IPositionWatcher
 R typeinfo name for IPredictionSystem
 R typeinfo name for IRecipientFilter
 R typeinfo name for IRefCounted
 R typeinfo name for IRegistry
 R typeinfo name for IResourcePrecacher
 R typeinfo name for IResponseFilter
 R typeinfo name for IResponseSystem
 R typeinfo name for IRestore
 R typeinfo name for IRotorWashShooter
 R typeinfo name for ISave
 R typeinfo name for ISaveRestoreBlockHandler
 R typeinfo name for ISaveRestoreBlockSet
 R typeinfo name for ISaveRestoreOps
 R typeinfo name for ISceneTokenProcessor
 R typeinfo name for IScorer
 R typeinfo name for IServerDLLSharedAppSystems
 R typeinfo name for IServerEntity
 R typeinfo name for IServerGameClients
 R typeinfo name for IServerGameDLL
 R typeinfo name for IServerGameEnts
 R typeinfo name for IServerGameTags
 R typeinfo name for IServerNetworkable
 R typeinfo name for IServerTools
 R typeinfo name for IServerUnknown
 R typeinfo name for IServerVehicle
 R typeinfo name for ITempEntsSystem
 R typeinfo name for ITerrorPlayerFunctor
 R typeinfo name for IToolFrameworkServer
 R typeinfo name for ITraceFilter
 R typeinfo name for IVPhysicsKeyHandler
 R typeinfo name for IVPhysicsWatcher
 R typeinfo name for IVehicle
 R typeinfo name for IVision
 R typeinfo name for IVoiceGameMgrHelper
 R typeinfo name for IWatcherCallback
 R typeinfo name for Infected
 R typeinfo name for InfectedAlert
 R typeinfo name for InfectedAttack
 R typeinfo name for InfectedBehavior
 R typeinfo name for InfectedBlinded
 R typeinfo name for InfectedBurn
 R typeinfo name for InfectedChangePosture
 R typeinfo name for InfectedChasePath
 R typeinfo name for InfectedDying
 R typeinfo name for InfectedExecAction
 R typeinfo name for InfectedIntention
 R typeinfo name for InfectedLeanOnWall
 R typeinfo name for InfectedLieDown
 R typeinfo name for InfectedPathCost
 R typeinfo name for InfectedShoved
 R typeinfo name for InfectedSitDown
 R typeinfo name for InfectedStaggerAround
 R typeinfo name for InfectedStandDazed
 R typeinfo name for InfectedStandingActivity
 R typeinfo name for InfectedWander
 R typeinfo name for InfoChangelevel
 R typeinfo name for IntervalTimer
 R typeinfo name for LostVictim
 R typeinfo name for MovieExplosion
 R typeinfo name for Music
 R typeinfo name for NextBotCombatCharacter
 R typeinfo name for NextBotManager
 R typeinfo name for NextBotPlayer<CTerrorPlayer>
 R typeinfo name for NextBotTraceFilterIgnoreActors
 R typeinfo name for NextBotTraceFilterOnlyActors
 R typeinfo name for NextBotTraversableTraceFilter
 R typeinfo name for NextBotVisionTraceFilter
 R typeinfo name for ParticleSmokeGrenade
 R typeinfo name for Path
 R typeinfo name for PathFollower
 R typeinfo name for PhysFrictionEffectPrecache::CResourcePrecacher
 R typeinfo name for PlayerBody
 R typeinfo name for PlayerLocomotion
 R typeinfo name for PlayerReporter
 R typeinfo name for PrecachePointCommentaryNodePrecache::CResourcePrecacher
 R typeinfo name for PressAltFireButtonReply
 R typeinfo name for PressFireButtonReply
 R typeinfo name for PressJumpButtonReply
 R typeinfo name for PunchVictim
 R typeinfo name for RocketTrail
 R typeinfo name for SavedEntity
 R typeinfo name for SavedTerrorGun
 R typeinfo name for SavedWeapon
 R typeinfo name for SavedWeaponSpawn
 R typeinfo name for SendProp
 R typeinfo name for SmokeTrail
 R typeinfo name for Smoker
 R typeinfo name for SmokerAttack
 R typeinfo name for SmokerBehavior
 R typeinfo name for SmokerIntention
 R typeinfo name for SmokerLocomotion
 R typeinfo name for SmokerMoveToAttackPosition
 R typeinfo name for SmokerPathCost
 R typeinfo name for SmokerRetreatToCover
 R typeinfo name for SmokerTongueVictim
 R typeinfo name for SporeExplosion
 R typeinfo name for SporeTrail
 R typeinfo name for SurvivorAmbushBoomer
 R typeinfo name for SurvivorAttack
 R typeinfo name for SurvivorBehavior
 R typeinfo name for SurvivorBody
 R typeinfo name for SurvivorBot
 R typeinfo name for SurvivorBotMeleeOnReply
 R typeinfo name for SurvivorBotPathCost
 R typeinfo name for SurvivorBotUseOnReply
 R typeinfo name for SurvivorCheckpointLeaving
 R typeinfo name for SurvivorCheckpointReached
 R typeinfo name for SurvivorCloseDoor
 R typeinfo name for SurvivorCollectObject
 R typeinfo name for SurvivorDebugApproach
 R typeinfo name for SurvivorDislodgeVictim
 R typeinfo name for SurvivorElevatorEnter
 R typeinfo name for SurvivorElevatorRide
 R typeinfo name for SurvivorEscapeFlames
 R typeinfo name for SurvivorEscapeLadderAmbush
 R typeinfo name for SurvivorGivePillsToFriend
 R typeinfo name for SurvivorHealFriend
 R typeinfo name for SurvivorHealSelf
 R typeinfo name for SurvivorIntention
 R typeinfo name for SurvivorLegsApproach
 R typeinfo name for SurvivorLegsApproachElevator
 R typeinfo name for SurvivorLegsBattleStations
 R typeinfo name for SurvivorLegsCoverFriendInCombat
 R typeinfo name for SurvivorLegsCoverOrphan
 R typeinfo name for SurvivorLegsEnterRescueVehicle
 R typeinfo name for SurvivorLegsMeetRescueVehicleArrival
 R typeinfo name for SurvivorLegsMoveOn
 R typeinfo name for SurvivorLegsRegroup
 R typeinfo name for SurvivorLegsRetreat
 R typeinfo name for SurvivorLegsStayClose
 R typeinfo name for SurvivorLegsWait
 R typeinfo name for SurvivorLiberateBesiegedFriend
 R typeinfo name for SurvivorLocomotion
 R typeinfo name for SurvivorRescueBarricadedFriend
 R typeinfo name for SurvivorReviveFriend
 R typeinfo name for SurvivorTakePills
 R typeinfo name for SurvivorTeamSituation
 R typeinfo name for SurvivorUseObject
 R typeinfo name for SurvivorVision
 R typeinfo name for Tank
 R typeinfo name for TankAttack
 R typeinfo name for TankBehavior
 R typeinfo name for TankIdle
 R typeinfo name for TankIntention
 R typeinfo name for TankLocomotion
 R typeinfo name for TargetScan<CBaseCombatCharacter>
 R typeinfo name for TargetScan<CTerrorPlayer>
 R typeinfo name for TerrorNavArea
 R typeinfo name for TerrorNavMesh
 R typeinfo name for TongueTargetScan<CTerrorPlayer>
 R typeinfo name for TraceFilterIgnoreInfected
 R typeinfo name for WeaponResourcesPrecache::CResourcePrecacher
 R typeinfo name for Witch
 R typeinfo name for WitchAngry
 R typeinfo name for WitchAttack
 R typeinfo name for WitchBehavior
 R typeinfo name for WitchBody
 R typeinfo name for WitchBurn
 R typeinfo name for WitchDying
 R typeinfo name for WitchExecAction
 R typeinfo name for WitchIdle
 R typeinfo name for WitchIntention
 R typeinfo name for WitchKillIncapVictim
 R typeinfo name for WitchLocomotion
 R typeinfo name for WitchRetreat
 R typeinfo name for WitchSlashEnumerator
 R typeinfo name for WitchVision
 R typeinfo name for ZombieBotBody
 R typeinfo name for ZombieBotCollisionTraceFilter
 R typeinfo name for ZombieBotLocomotion
 R typeinfo name for ZombieBotVision
 R typeinfo name for ZombieManager
 R typeinfo name for ability_throwPrecache::CResourcePrecacher
 R typeinfo name for ability_vomitPrecache::CResourcePrecacher
 R typeinfo name for audioparams_t
 R typeinfo name for boomerPrecache::CResourcePrecacher
 R typeinfo name for entityflamePrecache::CResourcePrecacher
 R typeinfo name for escape_routePrecache::CResourcePrecacher
 R typeinfo name for fogparams_t
 R typeinfo name for fogplayerparams_t
 R typeinfo name for hunterPrecache::CResourcePrecacher
 R typeinfo name for infectedPrecache::CResourcePrecacher
 R typeinfo name for infernoPrecache::CResourcePrecacher
 R typeinfo name for info_survivor_rescuePrecache::CResourcePrecacher
 R typeinfo name for locksound_t
 R typeinfo name for molotov_projectilePrecache::CResourcePrecacher
 R typeinfo name for pipe_bomb_projectilePrecache::CResourcePrecacher
 R typeinfo name for playerPrecache::CResourcePrecacher
 R typeinfo name for predicted_viewmodelPrecache::CResourcePrecacher
 R typeinfo name for sky3dparams_t
 R typeinfo name for sky3dparams_t::NetworkVar_fog
 R typeinfo name for smokerPrecache::CResourcePrecacher
 R typeinfo name for spraycanPrecache::CResourcePrecacher
 R typeinfo name for tankPrecache::CResourcePrecacher
 R typeinfo name for tank_rockPrecache::CResourcePrecacher
 R typeinfo name for vehicle_crashsound_t
 R typeinfo name for vehicle_gear_t
 R typeinfo name for vehiclesounds_t
 R typeinfo name for vgui_screenPrecache::CResourcePrecacher
 R typeinfo name for weapon_autoshotgunPrecache::CResourcePrecacher
 R typeinfo name for weapon_boomer_clawPrecache::CResourcePrecacher
 R typeinfo name for weapon_first_aid_kitPrecache::CResourcePrecacher
 R typeinfo name for weapon_gascanPrecache::CResourcePrecacher
 R typeinfo name for weapon_hunter_clawPrecache::CResourcePrecacher
 R typeinfo name for weapon_hunting_riflePrecache::CResourcePrecacher
 R typeinfo name for weapon_molotovPrecache::CResourcePrecacher
 R typeinfo name for weapon_oxygentankPrecache::CResourcePrecacher
 R typeinfo name for weapon_pain_pillsPrecache::CResourcePrecacher
 R typeinfo name for weapon_pipe_bombPrecache::CResourcePrecacher
 R typeinfo name for weapon_pistolPrecache::CResourcePrecacher
 R typeinfo name for weapon_propanetankPrecache::CResourcePrecacher
 R typeinfo name for weapon_pumpshotgunPrecache::CResourcePrecacher
 R typeinfo name for weapon_riflePrecache::CResourcePrecacher
 R typeinfo name for weapon_smgPrecache::CResourcePrecacher
 R typeinfo name for weapon_smoker_clawPrecache::CResourcePrecacher
 R typeinfo name for weapon_tank_clawPrecache::CResourcePrecacher
 R typeinfo name for witchPrecache::CResourcePrecacher
 R vec3_angle
 R vec3_invalid
 R vec3_origin
 RandomFloat
 RandomInt
 RandomSeed
 ShouldUseNewAssertDialog
 SteamAPI_GetHSteamPipe
 SteamAPI_GetHSteamUser
 SteamAPI_InitSafe
 SteamAPI_RegisterCallback
 SteamAPI_UnregisterCallback
 SteamClient
 SteamGameServer_GetHSteamPipe
 SteamGameServer_GetHSteamUser
 T AI_CriteriaSet::AI_CriteriaSet()
 T AI_CriteriaSet::AI_CriteriaSet(char const*, char const*)
 T AI_CriteriaSet::AppendCriteria(char const*, char const*, float)
 T AI_CriteriaSet::CritEntry_t::LessFunc(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&)
 T AI_CriteriaSet::Describe() const
 T AI_CriteriaSet::FindCriterionIndex(char const*) const
 T AI_CriteriaSet::GetValue(int) const
 T AI_CriteriaSet::GetWeight(int) const
 T AI_CriteriaSet::Merge(AI_CriteriaSet const*)
 T AI_CriteriaSet::Merge(char const*)
 T AI_CriteriaSet::RemoveCriteria(char const*)
 T AI_CriteriaSet::Reset()
 T AI_CriteriaSet::~AI_CriteriaSet()
 T AI_Response::AI_Response()
 T AI_Response::Describe(AI_CriteriaSet const*)
 T AI_Response::DescribeResponse(ResponseType_t)
 T AI_Response::GetDelay() const
 T AI_Response::GetPreDelay() const
 T AI_Response::GetResponse(char*, unsigned long) const
 T AI_Response::GetSoundLevel() const
 T AI_Response::Init(ResponseType_t, char const*, AI_ResponseParams const&, char const*, char const*, bool)
 T AI_Response::Invalidate()
 T AI_Response::ShouldBreakOnNonIdle() const
 T AI_Response::ShouldntUseScene() const
 T AI_Response::operator=(AI_Response const&)
 T AI_Response::~AI_Response()
 T AccumulatePose(CStudioHdr const*, CIKContext*, Vector*, Quaternion*, int, float, float const*, int, float, float)
 T Action<Boomer>::ApplyResult(Boomer*, Behavior<Boomer>*, ActionResult<Boomer>)
 T Action<Boomer>::BuildDecoratedName(char*, Action<Boomer> const*) const
 T Action<Boomer>::FirstContainedResponder() const
 T Action<Boomer>::GetFullName() const
 T Action<Boomer>::InitialContainedAction(Boomer*)
 T Action<Boomer>::InvokeOnEnd(Boomer*, Behavior<Boomer>*, Action<Boomer>*)
 T Action<Boomer>::InvokeOnResume(Boomer*, Behavior<Boomer>*, Action<Boomer>*)
 T Action<Boomer>::InvokeOnStart(Boomer*, Behavior<Boomer>*, Action<Boomer>*, Action<Boomer>*)
 T Action<Boomer>::InvokeOnSuspend(Boomer*, Behavior<Boomer>*, Action<Boomer>*)
 T Action<Boomer>::InvokeUpdate(Boomer*, Behavior<Boomer>*, float)
 T Action<Boomer>::IsAbleToBlockMovementOf(INextBot const*) const
 T Action<Boomer>::IsNamed(char const*) const
 T Action<Boomer>::NextContainedResponder(INextBotEventResponder*) const
 T Action<Boomer>::OnAnimationActivityComplete(Boomer*, int)
 T Action<Boomer>::OnAnimationActivityComplete(int)
 T Action<Boomer>::OnAnimationActivityInterrupted(Boomer*, int)
 T Action<Boomer>::OnAnimationActivityInterrupted(int)
 T Action<Boomer>::OnAnimationEvent(Boomer*, animevent_t*)
 T Action<Boomer>::OnAnimationEvent(animevent_t*)
 T Action<Boomer>::OnBlinded(Boomer*, CBaseEntity*)
 T Action<Boomer>::OnBlinded(CBaseEntity*)
 T Action<Boomer>::OnCommandApproach(Boomer*, CBaseEntity*)
 T Action<Boomer>::OnCommandApproach(Boomer*, Vector const&, float)
 T Action<Boomer>::OnCommandApproach(CBaseEntity*)
 T Action<Boomer>::OnCommandApproach(Vector const&, float)
 T Action<Boomer>::OnCommandAttack(Boomer*, CBaseEntity*)
 T Action<Boomer>::OnCommandAttack(CBaseEntity*)
 T Action<Boomer>::OnCommandPause(Boomer*, float)
 T Action<Boomer>::OnCommandPause(float)
 T Action<Boomer>::OnCommandResume()
 T Action<Boomer>::OnCommandResume(Boomer*)
 T Action<Boomer>::OnCommandRetreat(Boomer*, CBaseEntity*, float)
 T Action<Boomer>::OnCommandRetreat(CBaseEntity*, float)
 T Action<Boomer>::OnContact(Boomer*, CBaseEntity*, CGameTrace*)
 T Action<Boomer>::OnContact(CBaseEntity*, CGameTrace*)
 T Action<Boomer>::OnDrop(Boomer*, CBaseEntity*)
 T Action<Boomer>::OnDrop(CBaseEntity*)
 T Action<Boomer>::OnEnd(Boomer*, Action<Boomer>*)
 T Action<Boomer>::OnIgnite()
 T Action<Boomer>::OnIgnite(Boomer*)
 T Action<Boomer>::OnInjured(Boomer*, CTakeDamageInfo const&)
 T Action<Boomer>::OnInjured(CTakeDamageInfo const&)
 T Action<Boomer>::OnKilled(Boomer*, CTakeDamageInfo const&)
 T Action<Boomer>::OnKilled(CTakeDamageInfo const&)
 T Action<Boomer>::OnLandOnGround(Boomer*, CBaseEntity*)
 T Action<Boomer>::OnLandOnGround(CBaseEntity*)
 T Action<Boomer>::OnLeaveGround(Boomer*, CBaseEntity*)
 T Action<Boomer>::OnLeaveGround(CBaseEntity*)
 T Action<Boomer>::OnLostSight(Boomer*, CBaseEntity*)
 T Action<Boomer>::OnLostSight(CBaseEntity*)
 T Action<Boomer>::OnModelChanged()
 T Action<Boomer>::OnModelChanged(Boomer*)
 T Action<Boomer>::OnMoveToFailure(Boomer*, Path const*, MoveToFailureType)
 T Action<Boomer>::OnMoveToFailure(Path const*, MoveToFailureType)
 T Action<Boomer>::OnMoveToSuccess(Boomer*, Path const*)
 T Action<Boomer>::OnMoveToSuccess(Path const*)
 T Action<Boomer>::OnNavAreaChanged(Boomer*, CNavArea*, CNavArea*)
 T Action<Boomer>::OnNavAreaChanged(CNavArea*, CNavArea*)
 T Action<Boomer>::OnOtherKilled(Boomer*, CBaseCombatCharacter*, CTakeDamageInfo const&)
 T Action<Boomer>::OnOtherKilled(CBaseCombatCharacter*, CTakeDamageInfo const&)
 T Action<Boomer>::OnPickUp(Boomer*, CBaseEntity*, CBaseCombatCharacter*)
 T Action<Boomer>::OnPickUp(CBaseEntity*, CBaseCombatCharacter*)
 T Action<Boomer>::OnPostureChanged()
 T Action<Boomer>::OnPostureChanged(Boomer*)
 T Action<Boomer>::OnResume(Boomer*, Action<Boomer>*)
 T Action<Boomer>::OnShoved(Boomer*, CBaseEntity*)
 T Action<Boomer>::OnShoved(CBaseEntity*)
 T Action<Boomer>::OnSight(Boomer*, CBaseEntity*)
 T Action<Boomer>::OnSight(CBaseEntity*)
 T Action<Boomer>::OnSound(Boomer*, CBaseEntity*, Vector const&, KeyValues*)
 T Action<Boomer>::OnSound(CBaseEntity*, Vector const&, KeyValues*)
 T Action<Boomer>::OnSpokeConcept(Boomer*, CBaseCombatCharacter*, CAI_Concept, AI_Response*)
 T Action<Boomer>::OnSpokeConcept(CBaseCombatCharacter*, CAI_Concept, AI_Response*)
 T Action<Boomer>::OnStart(Boomer*, Action<Boomer>*)
 T Action<Boomer>::OnStuck()
 T Action<Boomer>::OnStuck(Boomer*)
 T Action<Boomer>::OnSuspend(Boomer*, Action<Boomer>*)
 T Action<Boomer>::OnThreatChanged(Boomer*, CBaseEntity*)
 T Action<Boomer>::OnThreatChanged(CBaseEntity*)
 T Action<Boomer>::OnUnStuck()
 T Action<Boomer>::OnUnStuck(Boomer*)
 T Action<Boomer>::PrintStateToConsole() const
 T Action<Boomer>::StorePendingEventResult(EventDesiredResult<Boomer> const&, char const*)
 T Action<Boomer>::Update(Boomer*, float)
 T Action<Boomer>::~Action()
 T Action<Hunter>::ApplyResult(Hunter*, Behavior<Hunter>*, ActionResult<Hunter>)
 T Action<Hunter>::BuildDecoratedName(char*, Action<Hunter> const*) const
 T Action<Hunter>::FirstContainedResponder() const
 T Action<Hunter>::GetFullName() const
 T Action<Hunter>::InitialContainedAction(Hunter*)
 T Action<Hunter>::InvokeOnEnd(Hunter*, Behavior<Hunter>*, Action<Hunter>*)
 T Action<Hunter>::InvokeOnResume(Hunter*, Behavior<Hunter>*, Action<Hunter>*)
 T Action<Hunter>::InvokeOnStart(Hunter*, Behavior<Hunter>*, Action<Hunter>*, Action<Hunter>*)
 T Action<Hunter>::InvokeOnSuspend(Hunter*, Behavior<Hunter>*, Action<Hunter>*)
 T Action<Hunter>::InvokeUpdate(Hunter*, Behavior<Hunter>*, float)
 T Action<Hunter>::IsAbleToBlockMovementOf(INextBot const*) const
 T Action<Hunter>::IsNamed(char const*) const
 T Action<Hunter>::NextContainedResponder(INextBotEventResponder*) const
 T Action<Hunter>::OnAnimationActivityComplete(Hunter*, int)
 T Action<Hunter>::OnAnimationActivityComplete(int)
 T Action<Hunter>::OnAnimationActivityInterrupted(Hunter*, int)
 T Action<Hunter>::OnAnimationActivityInterrupted(int)
 T Action<Hunter>::OnAnimationEvent(Hunter*, animevent_t*)
 T Action<Hunter>::OnAnimationEvent(animevent_t*)
 T Action<Hunter>::OnBlinded(CBaseEntity*)
 T Action<Hunter>::OnBlinded(Hunter*, CBaseEntity*)
 T Action<Hunter>::OnCommandApproach(CBaseEntity*)
 T Action<Hunter>::OnCommandApproach(Hunter*, CBaseEntity*)
 T Action<Hunter>::OnCommandApproach(Hunter*, Vector const&, float)
 T Action<Hunter>::OnCommandApproach(Vector const&, float)
 T Action<Hunter>::OnCommandAttack(CBaseEntity*)
 T Action<Hunter>::OnCommandAttack(Hunter*, CBaseEntity*)
 T Action<Hunter>::OnCommandPause(Hunter*, float)
 T Action<Hunter>::OnCommandPause(float)
 T Action<Hunter>::OnCommandResume()
 T Action<Hunter>::OnCommandResume(Hunter*)
 T Action<Hunter>::OnCommandRetreat(CBaseEntity*, float)
 T Action<Hunter>::OnCommandRetreat(Hunter*, CBaseEntity*, float)
 T Action<Hunter>::OnContact(CBaseEntity*, CGameTrace*)
 T Action<Hunter>::OnContact(Hunter*, CBaseEntity*, CGameTrace*)
 T Action<Hunter>::OnDrop(CBaseEntity*)
 T Action<Hunter>::OnDrop(Hunter*, CBaseEntity*)
 T Action<Hunter>::OnEnd(Hunter*, Action<Hunter>*)
 T Action<Hunter>::OnIgnite()
 T Action<Hunter>::OnIgnite(Hunter*)
 T Action<Hunter>::OnInjured(CTakeDamageInfo const&)
 T Action<Hunter>::OnInjured(Hunter*, CTakeDamageInfo const&)
 T Action<Hunter>::OnKilled(CTakeDamageInfo const&)
 T Action<Hunter>::OnKilled(Hunter*, CTakeDamageInfo const&)
 T Action<Hunter>::OnLandOnGround(CBaseEntity*)
 T Action<Hunter>::OnLandOnGround(Hunter*, CBaseEntity*)
 T Action<Hunter>::OnLeaveGround(CBaseEntity*)
 T Action<Hunter>::OnLeaveGround(Hunter*, CBaseEntity*)
 T Action<Hunter>::OnLostSight(CBaseEntity*)
 T Action<Hunter>::OnLostSight(Hunter*, CBaseEntity*)
 T Action<Hunter>::OnModelChanged()
 T Action<Hunter>::OnModelChanged(Hunter*)
 T Action<Hunter>::OnMoveToFailure(Hunter*, Path const*, MoveToFailureType)
 T Action<Hunter>::OnMoveToFailure(Path const*, MoveToFailureType)
 T Action<Hunter>::OnMoveToSuccess(Hunter*, Path const*)
 T Action<Hunter>::OnMoveToSuccess(Path const*)
 T Action<Hunter>::OnNavAreaChanged(CNavArea*, CNavArea*)
 T Action<Hunter>::OnNavAreaChanged(Hunter*, CNavArea*, CNavArea*)
 T Action<Hunter>::OnOtherKilled(CBaseCombatCharacter*, CTakeDamageInfo const&)
 T Action<Hunter>::OnOtherKilled(Hunter*, CBaseCombatCharacter*, CTakeDamageInfo const&)
 T Action<Hunter>::OnPickUp(CBaseEntity*, CBaseCombatCharacter*)
 T Action<Hunter>::OnPickUp(Hunter*, CBaseEntity*, CBaseCombatCharacter*)
 T Action<Hunter>::OnPostureChanged()
 T Action<Hunter>::OnPostureChanged(Hunter*)
 T Action<Hunter>::OnResume(Hunter*, Action<Hunter>*)
 T Action<Hunter>::OnShoved(CBaseEntity*)
 T Action<Hunter>::OnShoved(Hunter*, CBaseEntity*)
 T Action<Hunter>::OnSight(CBaseEntity*)
 T Action<Hunter>::OnSight(Hunter*, CBaseEntity*)
 T Action<Hunter>::OnSound(CBaseEntity*, Vector const&, KeyValues*)
 T Action<Hunter>::OnSound(Hunter*, CBaseEntity*, Vector const&, KeyValues*)
 T Action<Hunter>::OnSpokeConcept(CBaseCombatCharacter*, CAI_Concept, AI_Response*)
 T Action<Hunter>::OnSpokeConcept(Hunter*, CBaseCombatCharacter*, CAI_Concept, AI_Response*)
 T Action<Hunter>::OnStart(Hunter*, Action<Hunter>*)
 T Action<Hunter>::OnStuck()
 T Action<Hunter>::OnStuck(Hunter*)
 T Action<Hunter>::OnSuspend(Hunter*, Action<Hunter>*)
 T Action<Hunter>::OnThreatChanged(CBaseEntity*)
 T Action<Hunter>::OnThreatChanged(Hunter*, CBaseEntity*)
 T Action<Hunter>::OnUnStuck()
 T Action<Hunter>::OnUnStuck(Hunter*)
 T Action<Hunter>::PrintStateToConsole() const
 T Action<Hunter>::StorePendingEventResult(EventDesiredResult<Hunter> const&, char const*)
 T Action<Hunter>::Update(Hunter*, float)
 T Action<Hunter>::~Action()
 T Action<Infected>::ApplyResult(Infected*, Behavior<Infected>*, ActionResult<Infected>)
 T Action<Infected>::BuildDecoratedName(char*, Action<Infected> const*) const
 T Action<Infected>::FirstContainedResponder() const
 T Action<Infected>::GetFullName() const
 T Action<Infected>::InitialContainedAction(Infected*)
 T Action<Infected>::InvokeOnEnd(Infected*, Behavior<Infected>*, Action<Infected>*)
 T Action<Infected>::InvokeOnResume(Infected*, Behavior<Infected>*, Action<Infected>*)
 T Action<Infected>::InvokeOnStart(Infected*, Behavior<Infected>*, Action<Infected>*, Action<Infected>*)
 T Action<Infected>::InvokeOnSuspend(Infected*, Behavior<Infected>*, Action<Infected>*)
 T Action<Infected>::InvokeUpdate(Infected*, Behavior<Infected>*, float)
 T Action<Infected>::IsAbleToBlockMovementOf(INextBot const*) const
 T Action<Infected>::IsNamed(char const*) const
 T Action<Infected>::NextContainedResponder(INextBotEventResponder*) const
 T Action<Infected>::OnAnimationActivityComplete(Infected*, int)
 T Action<Infected>::OnAnimationActivityComplete(int)
 T Action<Infected>::OnAnimationActivityInterrupted(Infected*, int)
 T Action<Infected>::OnAnimationActivityInterrupted(int)
 T Action<Infected>::OnAnimationEvent(Infected*, animevent_t*)
 T Action<Infected>::OnAnimationEvent(animevent_t*)
 T Action<Infected>::OnBlinded(CBaseEntity*)
 T Action<Infected>::OnBlinded(Infected*, CBaseEntity*)
 T Action<Infected>::OnCommandApproach(CBaseEntity*)
 T Action<Infected>::OnCommandApproach(Infected*, CBaseEntity*)
 T Action<Infected>::OnCommandApproach(Infected*, Vector const&, float)
 T Action<Infected>::OnCommandApproach(Vector const&, float)
 T Action<Infected>::OnCommandAttack(CBaseEntity*)
 T Action<Infected>::OnCommandAttack(Infected*, CBaseEntity*)
 T Action<Infected>::OnCommandPause(Infected*, float)
 T Action<Infected>::OnCommandPause(float)
 T Action<Infected>::OnCommandResume()
 T Action<Infected>::OnCommandResume(Infected*)
 T Action<Infected>::OnCommandRetreat(CBaseEntity*, float)
 T Action<Infected>::OnCommandRetreat(Infected*, CBaseEntity*, float)
 T Action<Infected>::OnContact(CBaseEntity*, CGameTrace*)
 T Action<Infected>::OnContact(Infected*, CBaseEntity*, CGameTrace*)
 T Action<Infected>::OnDrop(CBaseEntity*)
 T Action<Infected>::OnDrop(Infected*, CBaseEntity*)
 T Action<Infected>::OnEnd(Infected*, Action<Infected>*)
 T Action<Infected>::OnIgnite()
 T Action<Infected>::OnIgnite(Infected*)
 T Action<Infected>::OnInjured(CTakeDamageInfo const&)
 T Action<Infected>::OnInjured(Infected*, CTakeDamageInfo const&)
 T Action<Infected>::OnKilled(CTakeDamageInfo const&)
 T Action<Infected>::OnKilled(Infected*, CTakeDamageInfo const&)
 T Action<Infected>::OnLandOnGround(CBaseEntity*)
 T Action<Infected>::OnLandOnGround(Infected*, CBaseEntity*)
 T Action<Infected>::OnLeaveGround(CBaseEntity*)
 T Action<Infected>::OnLeaveGround(Infected*, CBaseEntity*)
 T Action<Infected>::OnLostSight(CBaseEntity*)
 T Action<Infected>::OnLostSight(Infected*, CBaseEntity*)
 T Action<Infected>::OnModelChanged()
 T Action<Infected>::OnModelChanged(Infected*)
 T Action<Infected>::OnMoveToFailure(Infected*, Path const*, MoveToFailureType)
 T Action<Infected>::OnMoveToFailure(Path const*, MoveToFailureType)
 T Action<Infected>::OnMoveToSuccess(Infected*, Path const*)
 T Action<Infected>::OnMoveToSuccess(Path const*)
 T Action<Infected>::OnNavAreaChanged(CNavArea*, CNavArea*)
 T Action<Infected>::OnNavAreaChanged(Infected*, CNavArea*, CNavArea*)
 T Action<Infected>::OnOtherKilled(CBaseCombatCharacter*, CTakeDamageInfo const&)
 T Action<Infected>::OnOtherKilled(Infected*, CBaseCombatCharacter*, CTakeDamageInfo const&)
 T Action<Infected>::OnPickUp(CBaseEntity*, CBaseCombatCharacter*)
 T Action<Infected>::OnPickUp(Infected*, CBaseEntity*, CBaseCombatCharacter*)
 T Action<Infected>::OnPostureChanged()
 T Action<Infected>::OnPostureChanged(Infected*)
 T Action<Infected>::OnResume(Infected*, Action<Infected>*)
 T Action<Infected>::OnShoved(CBaseEntity*)
 T Action<Infected>::OnShoved(Infected*, CBaseEntity*)
 T Action<Infected>::OnSight(CBaseEntity*)
 T Action<Infected>::OnSight(Infected*, CBaseEntity*)
 T Action<Infected>::OnSound(CBaseEntity*, Vector const&, KeyValues*)
 T Action<Infected>::OnSound(Infected*, CBaseEntity*, Vector const&, KeyValues*)
 T Action<Infected>::OnSpokeConcept(CBaseCombatCharacter*, CAI_Concept, AI_Response*)
 T Action<Infected>::OnSpokeConcept(Infected*, CBaseCombatCharacter*, CAI_Concept, AI_Response*)
 T Action<Infected>::OnStart(Infected*, Action<Infected>*)
 T Action<Infected>::OnStuck()
 T Action<Infected>::OnStuck(Infected*)
 T Action<Infected>::OnSuspend(Infected*, Action<Infected>*)
 T Action<Infected>::OnThreatChanged(CBaseEntity*)
 T Action<Infected>::OnThreatChanged(Infected*, CBaseEntity*)
 T Action<Infected>::OnUnStuck()
 T Action<Infected>::OnUnStuck(Infected*)
 T Action<Infected>::PrintStateToConsole() const
 T Action<Infected>::StorePendingEventResult(EventDesiredResult<Infected> const&, char const*)
 T Action<Infected>::Update(Infected*, float)
 T Action<Infected>::~Action()
 T Action<Smoker>::ApplyResult(Smoker*, Behavior<Smoker>*, ActionResult<Smoker>)
 T Action<Smoker>::BuildDecoratedName(char*, Action<Smoker> const*) const
 T Action<Smoker>::FirstContainedResponder() const
 T Action<Smoker>::GetFullName() const
 T Action<Smoker>::InitialContainedAction(Smoker*)
 T Action<Smoker>::InvokeOnEnd(Smoker*, Behavior<Smoker>*, Action<Smoker>*)
 T Action<Smoker>::InvokeOnResume(Smoker*, Behavior<Smoker>*, Action<Smoker>*)
 T Action<Smoker>::InvokeOnStart(Smoker*, Behavior<Smoker>*, Action<Smoker>*, Action<Smoker>*)
 T Action<Smoker>::InvokeOnSuspend(Smoker*, Behavior<Smoker>*, Action<Smoker>*)
 T Action<Smoker>::InvokeUpdate(Smoker*, Behavior<Smoker>*, float)
 T Action<Smoker>::IsAbleToBlockMovementOf(INextBot const*) const
 T Action<Smoker>::IsNamed(char const*) const
 T Action<Smoker>::NextContainedResponder(INextBotEventResponder*) const
 T Action<Smoker>::OnAnimationActivityComplete(Smoker*, int)
 T Action<Smoker>::OnAnimationActivityComplete(int)
 T Action<Smoker>::OnAnimationActivityInterrupted(Smoker*, int)
 T Action<Smoker>::OnAnimationActivityInterrupted(int)
 T Action<Smoker>::OnAnimationEvent(Smoker*, animevent_t*)
 T Action<Smoker>::OnAnimationEvent(animevent_t*)
 T Action<Smoker>::OnBlinded(CBaseEntity*)
 T Action<Smoker>::OnBlinded(Smoker*, CBaseEntity*)
 T Action<Smoker>::OnCommandApproach(CBaseEntity*)
 T Action<Smoker>::OnCommandApproach(Smoker*, CBaseEntity*)
 T Action<Smoker>::OnCommandApproach(Smoker*, Vector const&, float)
 T Action<Smoker>::OnCommandApproach(Vector const&, float)
 T Action<Smoker>::OnCommandAttack(CBaseEntity*)
 T Action<Smoker>::OnCommandAttack(Smoker*, CBaseEntity*)
 T Action<Smoker>::OnCommandPause(Smoker*, float)
 T Action<Smoker>::OnCommandPause(float)
 T Action<Smoker>::OnCommandResume()
 T Action<Smoker>::OnCommandResume(Smoker*)
 T Action<Smoker>::OnCommandRetreat(CBaseEntity*, float)
 T Action<Smoker>::OnCommandRetreat(Smoker*, CBaseEntity*, float)
 T Action<Smoker>::OnContact(CBaseEntity*, CGameTrace*)
 T Action<Smoker>::OnContact(Smoker*, CBaseEntity*, CGameTrace*)
 T Action<Smoker>::OnDrop(CBaseEntity*)
 T Action<Smoker>::OnDrop(Smoker*, CBaseEntity*)
 T Action<Smoker>::OnEnd(Smoker*, Action<Smoker>*)
 T Action<Smoker>::OnIgnite()
 T Action<Smoker>::OnIgnite(Smoker*)
 T Action<Smoker>::OnInjured(CTakeDamageInfo const&)
 T Action<Smoker>::OnInjured(Smoker*, CTakeDamageInfo const&)
 T Action<Smoker>::OnKilled(CTakeDamageInfo const&)
 T Action<Smoker>::OnKilled(Smoker*, CTakeDamageInfo const&)
 T Action<Smoker>::OnLandOnGround(CBaseEntity*)
 T Action<Smoker>::OnLandOnGround(Smoker*, CBaseEntity*)
 T Action<Smoker>::OnLeaveGround(CBaseEntity*)
 T Action<Smoker>::OnLeaveGround(Smoker*, CBaseEntity*)
 T Action<Smoker>::OnLostSight(CBaseEntity*)
 T Action<Smoker>::OnLostSight(Smoker*, CBaseEntity*)
 T Action<Smoker>::OnModelChanged()
 T Action<Smoker>::OnModelChanged(Smoker*)
 T Action<Smoker>::OnMoveToFailure(Path const*, MoveToFailureType)
 T Action<Smoker>::OnMoveToFailure(Smoker*, Path const*, MoveToFailureType)
 T Action<Smoker>::OnMoveToSuccess(Path const*)
 T Action<Smoker>::OnMoveToSuccess(Smoker*, Path const*)
 T Action<Smoker>::OnNavAreaChanged(CNavArea*, CNavArea*)
 T Action<Smoker>::OnNavAreaChanged(Smoker*, CNavArea*, CNavArea*)
 T Action<Smoker>::OnOtherKilled(CBaseCombatCharacter*, CTakeDamageInfo const&)
 T Action<Smoker>::OnOtherKilled(Smoker*, CBaseCombatCharacter*, CTakeDamageInfo const&)
 T Action<Smoker>::OnPickUp(CBaseEntity*, CBaseCombatCharacter*)
 T Action<Smoker>::OnPickUp(Smoker*, CBaseEntity*, CBaseCombatCharacter*)
 T Action<Smoker>::OnPostureChanged()
 T Action<Smoker>::OnPostureChanged(Smoker*)
 T Action<Smoker>::OnResume(Smoker*, Action<Smoker>*)
 T Action<Smoker>::OnShoved(CBaseEntity*)
 T Action<Smoker>::OnShoved(Smoker*, CBaseEntity*)
 T Action<Smoker>::OnSight(CBaseEntity*)
 T Action<Smoker>::OnSight(Smoker*, CBaseEntity*)
 T Action<Smoker>::OnSound(CBaseEntity*, Vector const&, KeyValues*)
 T Action<Smoker>::OnSound(Smoker*, CBaseEntity*, Vector const&, KeyValues*)
 T Action<Smoker>::OnSpokeConcept(CBaseCombatCharacter*, CAI_Concept, AI_Response*)
 T Action<Smoker>::OnSpokeConcept(Smoker*, CBaseCombatCharacter*, CAI_Concept, AI_Response*)
 T Action<Smoker>::OnStart(Smoker*, Action<Smoker>*)
 T Action<Smoker>::OnStuck()
 T Action<Smoker>::OnStuck(Smoker*)
 T Action<Smoker>::OnSuspend(Smoker*, Action<Smoker>*)
 T Action<Smoker>::OnThreatChanged(CBaseEntity*)
 T Action<Smoker>::OnThreatChanged(Smoker*, CBaseEntity*)
 T Action<Smoker>::OnUnStuck()
 T Action<Smoker>::OnUnStuck(Smoker*)
 T Action<Smoker>::PrintStateToConsole() const
 T Action<Smoker>::StorePendingEventResult(EventDesiredResult<Smoker> const&, char const*)
 T Action<Smoker>::Update(Smoker*, float)
 T Action<Smoker>::~Action()
 T Action<SurvivorBot>::ApplyResult(SurvivorBot*, Behavior<SurvivorBot>*, ActionResult<SurvivorBot>)
 T Action<SurvivorBot>::BuildDecoratedName(char*, Action<SurvivorBot> const*) const
 T Action<SurvivorBot>::FirstContainedResponder() const
 T Action<SurvivorBot>::GetFullName() const
 T Action<SurvivorBot>::InitialContainedAction(SurvivorBot*)
 T Action<SurvivorBot>::InvokeOnEnd(SurvivorBot*, Behavior<SurvivorBot>*, Action<SurvivorBot>*)
 T Action<SurvivorBot>::InvokeOnResume(SurvivorBot*, Behavior<SurvivorBot>*, Action<SurvivorBot>*)
 T Action<SurvivorBot>::InvokeOnStart(SurvivorBot*, Behavior<SurvivorBot>*, Action<SurvivorBot>*, Action<SurvivorBot>*)
 T Action<SurvivorBot>::InvokeOnSuspend(SurvivorBot*, Behavior<SurvivorBot>*, Action<SurvivorBot>*)
 T Action<SurvivorBot>::InvokeUpdate(SurvivorBot*, Behavior<SurvivorBot>*, float)
 T Action<SurvivorBot>::IsAbleToBlockMovementOf(INextBot const*) const
 T Action<SurvivorBot>::IsNamed(char const*) const
 T Action<SurvivorBot>::NextContainedResponder(INextBotEventResponder*) const
 T Action<SurvivorBot>::OnAnimationActivityComplete(SurvivorBot*, int)
 T Action<SurvivorBot>::OnAnimationActivityComplete(int)
 T Action<SurvivorBot>::OnAnimationActivityInterrupted(SurvivorBot*, int)
 T Action<SurvivorBot>::OnAnimationActivityInterrupted(int)
 T Action<SurvivorBot>::OnAnimationEvent(SurvivorBot*, animevent_t*)
 T Action<SurvivorBot>::OnAnimationEvent(animevent_t*)
 T Action<SurvivorBot>::OnBlinded(CBaseEntity*)
 T Action<SurvivorBot>::OnBlinded(SurvivorBot*, CBaseEntity*)
 T Action<SurvivorBot>::OnCommandApproach(CBaseEntity*)
 T Action<SurvivorBot>::OnCommandApproach(SurvivorBot*, CBaseEntity*)
 T Action<SurvivorBot>::OnCommandApproach(SurvivorBot*, Vector const&, float)
 T Action<SurvivorBot>::OnCommandApproach(Vector const&, float)
 T Action<SurvivorBot>::OnCommandAttack(CBaseEntity*)
 T Action<SurvivorBot>::OnCommandAttack(SurvivorBot*, CBaseEntity*)
 T Action<SurvivorBot>::OnCommandPause(SurvivorBot*, float)
 T Action<SurvivorBot>::OnCommandPause(float)
 T Action<SurvivorBot>::OnCommandResume()
 T Action<SurvivorBot>::OnCommandResume(SurvivorBot*)
 T Action<SurvivorBot>::OnCommandRetreat(CBaseEntity*, float)
 T Action<SurvivorBot>::OnCommandRetreat(SurvivorBot*, CBaseEntity*, float)
 T Action<SurvivorBot>::OnContact(CBaseEntity*, CGameTrace*)
 T Action<SurvivorBot>::OnContact(SurvivorBot*, CBaseEntity*, CGameTrace*)
 T Action<SurvivorBot>::OnDrop(CBaseEntity*)
 T Action<SurvivorBot>::OnDrop(SurvivorBot*, CBaseEntity*)
 T Action<SurvivorBot>::OnEnd(SurvivorBot*, Action<SurvivorBot>*)
 T Action<SurvivorBot>::OnIgnite()
 T Action<SurvivorBot>::OnIgnite(SurvivorBot*)
 T Action<SurvivorBot>::OnInjured(CTakeDamageInfo const&)
 T Action<SurvivorBot>::OnInjured(SurvivorBot*, CTakeDamageInfo const&)
 T Action<SurvivorBot>::OnKilled(CTakeDamageInfo const&)
 T Action<SurvivorBot>::OnKilled(SurvivorBot*, CTakeDamageInfo const&)
 T Action<SurvivorBot>::OnLandOnGround(CBaseEntity*)
 T Action<SurvivorBot>::OnLandOnGround(SurvivorBot*, CBaseEntity*)
 T Action<SurvivorBot>::OnLeaveGround(CBaseEntity*)
 T Action<SurvivorBot>::OnLeaveGround(SurvivorBot*, CBaseEntity*)
 T Action<SurvivorBot>::OnLostSight(CBaseEntity*)
 T Action<SurvivorBot>::OnLostSight(SurvivorBot*, CBaseEntity*)
 T Action<SurvivorBot>::OnModelChanged()
 T Action<SurvivorBot>::OnModelChanged(SurvivorBot*)
 T Action<SurvivorBot>::OnMoveToFailure(Path const*, MoveToFailureType)
 T Action<SurvivorBot>::OnMoveToFailure(SurvivorBot*, Path const*, MoveToFailureType)
 T Action<SurvivorBot>::OnMoveToSuccess(Path const*)
 T Action<SurvivorBot>::OnMoveToSuccess(SurvivorBot*, Path const*)
 T Action<SurvivorBot>::OnNavAreaChanged(CNavArea*, CNavArea*)
 T Action<SurvivorBot>::OnNavAreaChanged(SurvivorBot*, CNavArea*, CNavArea*)
 T Action<SurvivorBot>::OnOtherKilled(CBaseCombatCharacter*, CTakeDamageInfo const&)
 T Action<SurvivorBot>::OnOtherKilled(SurvivorBot*, CBaseCombatCharacter*, CTakeDamageInfo const&)
 T Action<SurvivorBot>::OnPickUp(CBaseEntity*, CBaseCombatCharacter*)
 T Action<SurvivorBot>::OnPickUp(SurvivorBot*, CBaseEntity*, CBaseCombatCharacter*)
 T Action<SurvivorBot>::OnPostureChanged()
 T Action<SurvivorBot>::OnPostureChanged(SurvivorBot*)
 T Action<SurvivorBot>::OnResume(SurvivorBot*, Action<SurvivorBot>*)
 T Action<SurvivorBot>::OnShoved(CBaseEntity*)
 T Action<SurvivorBot>::OnShoved(SurvivorBot*, CBaseEntity*)
 T Action<SurvivorBot>::OnSight(CBaseEntity*)
 T Action<SurvivorBot>::OnSight(SurvivorBot*, CBaseEntity*)
 T Action<SurvivorBot>::OnSound(CBaseEntity*, Vector const&, KeyValues*)
 T Action<SurvivorBot>::OnSound(SurvivorBot*, CBaseEntity*, Vector const&, KeyValues*)
 T Action<SurvivorBot>::OnSpokeConcept(CBaseCombatCharacter*, CAI_Concept, AI_Response*)
 T Action<SurvivorBot>::OnSpokeConcept(SurvivorBot*, CBaseCombatCharacter*, CAI_Concept, AI_Response*)
 T Action<SurvivorBot>::OnStart(SurvivorBot*, Action<SurvivorBot>*)
 T Action<SurvivorBot>::OnStuck()
 T Action<SurvivorBot>::OnStuck(SurvivorBot*)
 T Action<SurvivorBot>::OnSuspend(SurvivorBot*, Action<SurvivorBot>*)
 T Action<SurvivorBot>::OnThreatChanged(CBaseEntity*)
 T Action<SurvivorBot>::OnThreatChanged(SurvivorBot*, CBaseEntity*)
 T Action<SurvivorBot>::OnUnStuck()
 T Action<SurvivorBot>::OnUnStuck(SurvivorBot*)
 T Action<SurvivorBot>::PrintStateToConsole() const
 T Action<SurvivorBot>::StorePendingEventResult(EventDesiredResult<SurvivorBot> const&, char const*)
 T Action<SurvivorBot>::Update(SurvivorBot*, float)
 T Action<SurvivorBot>::~Action()
 T Action<Tank>::ApplyResult(Tank*, Behavior<Tank>*, ActionResult<Tank>)
 T Action<Tank>::BuildDecoratedName(char*, Action<Tank> const*) const
 T Action<Tank>::FirstContainedResponder() const
 T Action<Tank>::GetFullName() const
 T Action<Tank>::InitialContainedAction(Tank*)
 T Action<Tank>::InvokeOnEnd(Tank*, Behavior<Tank>*, Action<Tank>*)
 T Action<Tank>::InvokeOnResume(Tank*, Behavior<Tank>*, Action<Tank>*)
 T Action<Tank>::InvokeOnStart(Tank*, Behavior<Tank>*, Action<Tank>*, Action<Tank>*)
 T Action<Tank>::InvokeOnSuspend(Tank*, Behavior<Tank>*, Action<Tank>*)
 T Action<Tank>::InvokeUpdate(Tank*, Behavior<Tank>*, float)
 T Action<Tank>::IsAbleToBlockMovementOf(INextBot const*) const
 T Action<Tank>::IsNamed(char const*) const
 T Action<Tank>::NextContainedResponder(INextBotEventResponder*) const
 T Action<Tank>::OnAnimationActivityComplete(Tank*, int)
 T Action<Tank>::OnAnimationActivityComplete(int)
 T Action<Tank>::OnAnimationActivityInterrupted(Tank*, int)
 T Action<Tank>::OnAnimationActivityInterrupted(int)
 T Action<Tank>::OnAnimationEvent(Tank*, animevent_t*)
 T Action<Tank>::OnAnimationEvent(animevent_t*)
 T Action<Tank>::OnBlinded(CBaseEntity*)
 T Action<Tank>::OnBlinded(Tank*, CBaseEntity*)
 T Action<Tank>::OnCommandApproach(CBaseEntity*)
 T Action<Tank>::OnCommandApproach(Tank*, CBaseEntity*)
 T Action<Tank>::OnCommandApproach(Tank*, Vector const&, float)
 T Action<Tank>::OnCommandApproach(Vector const&, float)
 T Action<Tank>::OnCommandAttack(CBaseEntity*)
 T Action<Tank>::OnCommandAttack(Tank*, CBaseEntity*)
 T Action<Tank>::OnCommandPause(Tank*, float)
 T Action<Tank>::OnCommandPause(float)
 T Action<Tank>::OnCommandResume()
 T Action<Tank>::OnCommandResume(Tank*)
 T Action<Tank>::OnCommandRetreat(CBaseEntity*, float)
 T Action<Tank>::OnCommandRetreat(Tank*, CBaseEntity*, float)
 T Action<Tank>::OnContact(CBaseEntity*, CGameTrace*)
 T Action<Tank>::OnContact(Tank*, CBaseEntity*, CGameTrace*)
 T Action<Tank>::OnDrop(CBaseEntity*)
 T Action<Tank>::OnDrop(Tank*, CBaseEntity*)
 T Action<Tank>::OnEnd(Tank*, Action<Tank>*)
 T Action<Tank>::OnIgnite()
 T Action<Tank>::OnIgnite(Tank*)
 T Action<Tank>::OnInjured(CTakeDamageInfo const&)
 T Action<Tank>::OnInjured(Tank*, CTakeDamageInfo const&)
 T Action<Tank>::OnKilled(CTakeDamageInfo const&)
 T Action<Tank>::OnKilled(Tank*, CTakeDamageInfo const&)
 T Action<Tank>::OnLandOnGround(CBaseEntity*)
 T Action<Tank>::OnLandOnGround(Tank*, CBaseEntity*)
 T Action<Tank>::OnLeaveGround(CBaseEntity*)
 T Action<Tank>::OnLeaveGround(Tank*, CBaseEntity*)
 T Action<Tank>::OnLostSight(CBaseEntity*)
 T Action<Tank>::OnLostSight(Tank*, CBaseEntity*)
 T Action<Tank>::OnModelChanged()
 T Action<Tank>::OnModelChanged(Tank*)
 T Action<Tank>::OnMoveToFailure(Path const*, MoveToFailureType)
 T Action<Tank>::OnMoveToFailure(Tank*, Path const*, MoveToFailureType)
 T Action<Tank>::OnMoveToSuccess(Path const*)
 T Action<Tank>::OnMoveToSuccess(Tank*, Path const*)
 T Action<Tank>::OnNavAreaChanged(CNavArea*, CNavArea*)
 T Action<Tank>::OnNavAreaChanged(Tank*, CNavArea*, CNavArea*)
 T Action<Tank>::OnOtherKilled(CBaseCombatCharacter*, CTakeDamageInfo const&)
 T Action<Tank>::OnOtherKilled(Tank*, CBaseCombatCharacter*, CTakeDamageInfo const&)
 T Action<Tank>::OnPickUp(CBaseEntity*, CBaseCombatCharacter*)
 T Action<Tank>::OnPickUp(Tank*, CBaseEntity*, CBaseCombatCharacter*)
 T Action<Tank>::OnPostureChanged()
 T Action<Tank>::OnPostureChanged(Tank*)
 T Action<Tank>::OnResume(Tank*, Action<Tank>*)
 T Action<Tank>::OnShoved(CBaseEntity*)
 T Action<Tank>::OnShoved(Tank*, CBaseEntity*)
 T Action<Tank>::OnSight(CBaseEntity*)
 T Action<Tank>::OnSight(Tank*, CBaseEntity*)
 T Action<Tank>::OnSound(CBaseEntity*, Vector const&, KeyValues*)
 T Action<Tank>::OnSound(Tank*, CBaseEntity*, Vector const&, KeyValues*)
 T Action<Tank>::OnSpokeConcept(CBaseCombatCharacter*, CAI_Concept, AI_Response*)
 T Action<Tank>::OnSpokeConcept(Tank*, CBaseCombatCharacter*, CAI_Concept, AI_Response*)
 T Action<Tank>::OnStart(Tank*, Action<Tank>*)
 T Action<Tank>::OnStuck()
 T Action<Tank>::OnStuck(Tank*)
 T Action<Tank>::OnSuspend(Tank*, Action<Tank>*)
 T Action<Tank>::OnThreatChanged(CBaseEntity*)
 T Action<Tank>::OnThreatChanged(Tank*, CBaseEntity*)
 T Action<Tank>::OnUnStuck()
 T Action<Tank>::OnUnStuck(Tank*)
 T Action<Tank>::PrintStateToConsole() const
 T Action<Tank>::StorePendingEventResult(EventDesiredResult<Tank> const&, char const*)
 T Action<Tank>::Update(Tank*, float)
 T Action<Tank>::~Action()
 T ActivityDataOps()
 T ActivityList_AddActivityEntry(char const*, int, bool)
 T ActivityList_Free()
 T ActivityList_IndexForName(char const*)
 T ActivityList_Init()
 T ActivityList_NameForIndex(int)
 T ActivityList_RegisterPrivateActivity(char const*)
 T ActivityList_RegisterSharedActivities()
 T ActivityList_RegisterSharedActivity(char const*, int)
 T AddAreaToOpenList(CNavArea*, CNavArea*, Vector const&, float)
 T AddDebugHistoryLine(int, char const*)
 T AddLocalLayers(CStudioHdr const*, CIKContext*, Vector*, Quaternion*, mstudioseqdesc_t&, int, float, float const*, int, float, float)
 T AddMultiDamage(CTakeDamageInfo const&, CBaseEntity*)
 T AddPointToBounds(Vector const&, Vector&, Vector&)
 T AddRestoredEntity(CBaseEntity*)
 T AddSequenceLayers(CStudioHdr const*, CIKContext*, Vector*, Quaternion*, mstudioseqdesc_t&, int, float, float const*, int, float, float)
 T AddSurfacepropFile(char const*, IPhysicsSurfaceProps*, IFileSystem*)
 T AimTarget_ForceRepopulateList()
 T AimTarget_ListCount()
 T AimTarget_ListElement(int)
 T AliasToWeaponID(char const*)
 T AllocPooledString(char const*)
 T AllocString(char const*, int)
 T AllocateStringHelper(char const*, ...)
 T AllocateUniqueDataTableName(bool, char const*, ...)
 T AngleDiff(float, float)
 T AngleDistance(float, float)
 T AngleIMatrix(QAngle const&, Vector const&, matrix3x4_t&)
 T AngleIMatrix(QAngle const&, matrix3x4_t&)
 T AngleMatrix(QAngle const&, Vector const&, matrix3x4_t&)
 T AngleMatrix(QAngle const&, matrix3x4_t&)
 T AngleMatrix(RadianEuler const&, Vector const&, matrix3x4_t&)
 T AngleNormalize(float)
 T AngleNormalizePositive(float)
 T AngleQuaternion(QAngle const&, Quaternion&)
 T AngleQuaternion(RadianEuler const&, Quaternion&)
 T AngleVectors(QAngle const&, Vector*)
 T AngleVectors(QAngle const&, Vector*, Vector*, Vector*)
 T AngleVectorsTranspose(QAngle const&, Vector*, Vector*, Vector*)
 T AnyPlayersInHierarchy_R(CBaseEntity*)
 T AnyoneTooCloseToBoomerCheck::operator()(CTerrorPlayer*)
 T ApplyCommentaryModifications()
 T ApplyMultiDamage()
 T ApplyViewLocking(float, float, ViewLockData_t&, RemapAngleRange_CurvePart_t)
 T ApproachAngle(float, float, float)
 T AsyncCaption_t::AsyncCaption_t()
 T AsyncCaption_t::BlockInfo_t::Less(AsyncCaption_t::BlockInfo_t const&, AsyncCaption_t::BlockInfo_t const&)
 T AsyncCaption_t::LoadFromFile(char const*)
 T AttackClosestSurvivor::operator()(INextBot*)
 T AttenuateCaption(char const*, Vector const&, CUtlVector<Vector, CUtlMemory<Vector, int> >&)
 T AvoidPushawayProps(CBaseCombatCharacter*, CUserCmd*)
 T BSpline(Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
 T BasicGameStatsRecord_t::ParseFromBuffer(CUtlBuffer&, int)
 T BasicGameStatsRecord_t::SaveToBuffer(CUtlBuffer&)
 T BasicGameStats_t::Clear()
 T BasicGameStats_t::FindOrAddRecordForMap(char const*)
 T BasicGameStats_t::ParseFromBuffer(CUtlBuffer&, int)
 T BasicGameStats_t::SaveToBuffer(CUtlBuffer&)
 T BeginDMXContext()
 T Behavior<Boomer>::FirstContainedResponder() const
 T Behavior<Boomer>::IsHindrance(INextBot const*, CBaseEntity*) const
 T Behavior<Boomer>::IsPositionAllowed(INextBot const*, Vector const&) const
 T Behavior<Boomer>::NextContainedResponder(INextBotEventResponder*) const
 T Behavior<Boomer>::QueryCurrentPath(INextBot const*) const
 T Behavior<Boomer>::SelectMoreDangerousThreat(INextBot const*, CBaseCombatCharacter const*, CBaseCombatCharacter*, CBaseCombatCharacter*) const
 T Behavior<Boomer>::SelectTargetPoint(INextBot const*, CBaseCombatCharacter const*) const
 T Behavior<Boomer>::ShouldHurry(INextBot const*) const
 T Behavior<Boomer>::ShouldPickUp(INextBot const*, CBaseEntity*) const
 T Behavior<Boomer>::Update(Boomer*, float)
 T Behavior<Boomer>::~Behavior()
 T Behavior<Hunter>::FirstContainedResponder() const
 T Behavior<Hunter>::IsHindrance(INextBot const*, CBaseEntity*) const
 T Behavior<Hunter>::IsPositionAllowed(INextBot const*, Vector const&) const
 T Behavior<Hunter>::NextContainedResponder(INextBotEventResponder*) const
 T Behavior<Hunter>::QueryCurrentPath(INextBot const*) const
 T Behavior<Hunter>::SelectMoreDangerousThreat(INextBot const*, CBaseCombatCharacter const*, CBaseCombatCharacter*, CBaseCombatCharacter*) const
 T Behavior<Hunter>::SelectTargetPoint(INextBot const*, CBaseCombatCharacter const*) const
 T Behavior<Hunter>::ShouldHurry(INextBot const*) const
 T Behavior<Hunter>::ShouldPickUp(INextBot const*, CBaseEntity*) const
 T Behavior<Hunter>::Update(Hunter*, float)
 T Behavior<Hunter>::~Behavior()
 T Behavior<Infected>::FirstContainedResponder() const
 T Behavior<Infected>::IsHindrance(INextBot const*, CBaseEntity*) const
 T Behavior<Infected>::IsPositionAllowed(INextBot const*, Vector const&) const
 T Behavior<Infected>::NextContainedResponder(INextBotEventResponder*) const
 T Behavior<Infected>::QueryCurrentPath(INextBot const*) const
 T Behavior<Infected>::SelectMoreDangerousThreat(INextBot const*, CBaseCombatCharacter const*, CBaseCombatCharacter*, CBaseCombatCharacter*) const
 T Behavior<Infected>::SelectTargetPoint(INextBot const*, CBaseCombatCharacter const*) const
 T Behavior<Infected>::ShouldHurry(INextBot const*) const
 T Behavior<Infected>::ShouldPickUp(INextBot const*, CBaseEntity*) const
 T Behavior<Infected>::Update(Infected*, float)
 T Behavior<Infected>::~Behavior()
 T Behavior<Smoker>::FirstContainedResponder() const
 T Behavior<Smoker>::IsHindrance(INextBot const*, CBaseEntity*) const
 T Behavior<Smoker>::IsPositionAllowed(INextBot const*, Vector const&) const
 T Behavior<Smoker>::NextContainedResponder(INextBotEventResponder*) const
 T Behavior<Smoker>::QueryCurrentPath(INextBot const*) const
 T Behavior<Smoker>::SelectMoreDangerousThreat(INextBot const*, CBaseCombatCharacter const*, CBaseCombatCharacter*, CBaseCombatCharacter*) const
 T Behavior<Smoker>::SelectTargetPoint(INextBot const*, CBaseCombatCharacter const*) const
 T Behavior<Smoker>::ShouldHurry(INextBot const*) const
 T Behavior<Smoker>::ShouldPickUp(INextBot const*, CBaseEntity*) const
 T Behavior<Smoker>::Update(Smoker*, float)
 T Behavior<Smoker>::~Behavior()
 T Behavior<SurvivorBot>::FirstContainedResponder() const
 T Behavior<SurvivorBot>::IsHindrance(INextBot const*, CBaseEntity*) const
 T Behavior<SurvivorBot>::IsPositionAllowed(INextBot const*, Vector const&) const
 T Behavior<SurvivorBot>::NextContainedResponder(INextBotEventResponder*) const
 T Behavior<SurvivorBot>::QueryCurrentPath(INextBot const*) const
 T Behavior<SurvivorBot>::Resume(SurvivorBot*)
 T Behavior<SurvivorBot>::SelectMoreDangerousThreat(INextBot const*, CBaseCombatCharacter const*, CBaseCombatCharacter*, CBaseCombatCharacter*) const
 T Behavior<SurvivorBot>::SelectTargetPoint(INextBot const*, CBaseCombatCharacter const*) const
 T Behavior<SurvivorBot>::ShouldHurry(INextBot const*) const
 T Behavior<SurvivorBot>::ShouldPickUp(INextBot const*, CBaseEntity*) const
 T Behavior<SurvivorBot>::Update(SurvivorBot*, float)
 T Behavior<SurvivorBot>::~Behavior()
 T Behavior<Tank>::FirstContainedResponder() const
 T Behavior<Tank>::IsHindrance(INextBot const*, CBaseEntity*) const
 T Behavior<Tank>::IsPositionAllowed(INextBot const*, Vector const&) const
 T Behavior<Tank>::NextContainedResponder(INextBotEventResponder*) const
 T Behavior<Tank>::QueryCurrentPath(INextBot const*) const
 T Behavior<Tank>::SelectMoreDangerousThreat(INextBot const*, CBaseCombatCharacter const*, CBaseCombatCharacter*, CBaseCombatCharacter*) const
 T Behavior<Tank>::SelectTargetPoint(INextBot const*, CBaseCombatCharacter const*) const
 T Behavior<Tank>::ShouldHurry(INextBot const*) const
 T Behavior<Tank>::ShouldPickUp(INextBot const*, CBaseEntity*) const
 T Behavior<Tank>::Update(Tank*, float)
 T Behavior<Tank>::~Behavior()
 T BehaviorBackUp<SurvivorBot>::GetName() const
 T BehaviorBackUp<SurvivorBot>::OnStart(SurvivorBot*, Action<SurvivorBot>*)
 T BehaviorBackUp<SurvivorBot>::OnStuck(SurvivorBot*)
 T BehaviorBackUp<SurvivorBot>::Update(SurvivorBot*, float)
 T BehaviorBackUp<SurvivorBot>::~BehaviorBackUp()
 T BehaviorMoveTo<Boomer, InfectedPathCost>::BehaviorMoveTo(Vector const&)
 T BehaviorMoveTo<Boomer, InfectedPathCost>::ComputePath(Boomer*, Vector const&, PathFollower*)
 T BehaviorMoveTo<Boomer, InfectedPathCost>::GetName() const
 T BehaviorMoveTo<Boomer, InfectedPathCost>::OnStart(Boomer*, Action<Boomer>*)
 T BehaviorMoveTo<Boomer, InfectedPathCost>::Update(Boomer*, float)
 T BehaviorMoveTo<Boomer, InfectedPathCost>::~BehaviorMoveTo()
 T BehaviorMoveTo<Hunter, InfectedPathCost>::BehaviorMoveTo(Vector const&)
 T BehaviorMoveTo<Hunter, InfectedPathCost>::ComputePath(Hunter*, Vector const&, PathFollower*)
 T BehaviorMoveTo<Hunter, InfectedPathCost>::GetName() const
 T BehaviorMoveTo<Hunter, InfectedPathCost>::OnStart(Hunter*, Action<Hunter>*)
 T BehaviorMoveTo<Hunter, InfectedPathCost>::Update(Hunter*, float)
 T BehaviorMoveTo<Hunter, InfectedPathCost>::~BehaviorMoveTo()
 T BehaviorMoveTo<Smoker, InfectedPathCost>::BehaviorMoveTo(Vector const&)
 T BehaviorMoveTo<Smoker, InfectedPathCost>::ComputePath(Smoker*, Vector const&, PathFollower*)
 T BehaviorMoveTo<Smoker, InfectedPathCost>::GetName() const
 T BehaviorMoveTo<Smoker, InfectedPathCost>::OnStart(Smoker*, Action<Smoker>*)
 T BehaviorMoveTo<Smoker, InfectedPathCost>::Update(Smoker*, float)
 T BehaviorMoveTo<Smoker, InfectedPathCost>::~BehaviorMoveTo()
 T BehaviorMoveTo<Tank, InfectedPathCost>::BehaviorMoveTo(Vector const&)
 T BehaviorMoveTo<Tank, InfectedPathCost>::ComputePath(Tank*, Vector const&, PathFollower*)
 T BehaviorMoveTo<Tank, InfectedPathCost>::GetName() const
 T BehaviorMoveTo<Tank, InfectedPathCost>::OnStart(Tank*, Action<Tank>*)
 T BehaviorMoveTo<Tank, InfectedPathCost>::Update(Tank*, float)
 T BehaviorMoveTo<Tank, InfectedPathCost>::~BehaviorMoveTo()
 T BestRescuableSurvivor::operator()(CTerrorPlayer*)
 T Bias(float, float)
 T BlackBox_Record(char const*, char const*, ...)
 T BlendBones(CStudioHdr const*, QuaternionAligned*, Vector*, mstudioseqdesc_t&, int, QuaternionAligned const*, Vector const*, float, int)
 T Boomer* NextBotCreatePlayerBot<Boomer>(char const*)
 T Boomer::AllocatePlayerEntity(edict_t*, char const*)
 T Boomer::Boomer()
 T Boomer::CanBeA(ZombieClassType) const
 T Boomer::GetBodyInterface() const
 T Boomer::GetDataDescMap()
 T Boomer::GetEntity() const
 T Boomer::GetIntentionInterface() const
 T Boomer::GetLocomotionInterface() const
 T Boomer::GetServerClass()
 T Boomer::GetVisionInterface() const
 T Boomer::IsAbleToBreak(CBaseEntity const*) const
 T Boomer::Precache()
 T Boomer::ShouldBackOff() const
 T Boomer::Spawn()
 T Boomer::YouForgotToImplementOrDeclareServerClass()
 T Boomer::~Boomer()
 T BoomerAttack::BoomerAttack()
 T BoomerAttack::GetName() const
 T BoomerAttack::OnCommandApproach(Boomer*, Vector const&, float)
 T BoomerAttack::OnCommandAttack(Boomer*, CBaseEntity*)
 T BoomerAttack::OnContact(Boomer*, CBaseEntity*, CGameTrace*)
 T BoomerAttack::OnInjured(Boomer*, CTakeDamageInfo const&)
 T BoomerAttack::OnShoved(Boomer*, CBaseEntity*)
 T BoomerAttack::OnStart(Boomer*, Action<Boomer>*)
 T BoomerAttack::Update(Boomer*, float)
 T BoomerAttack::~BoomerAttack()
 T BoomerBehavior::GetName() const
 T BoomerBehavior::InitialContainedAction(Boomer*)
 T BoomerBehavior::OnContact(Boomer*, CBaseEntity*, CGameTrace*)
 T BoomerBehavior::Update(Boomer*, float)
 T BoomerBehavior::~BoomerBehavior()
 T BoomerFilter::IsAllowed(CBaseEntity*) const
 T BoomerHide::GetName() const
 T BoomerHide::OnStart(Boomer*, Action<Boomer>*)
 T BoomerHide::Update(Boomer*, float)
 T BoomerHide::~BoomerHide()
 T BoomerIntention::BoomerIntention(INextBot*)
 T BoomerIntention::FirstContainedResponder() const
 T BoomerIntention::Reset()
 T BoomerIntention::Update()
 T BoomerIntention::~BoomerIntention()
 T BoomerLocomotion::BoomerLocomotion(INextBot*)
 T BoomerLocomotion::IsAreaTraversable(CNavArea const*) const
 T BoomerLocomotion::IsEntityTraversable(CBaseEntity*, ILocomotion::TraverseWhenType) const
 T BoomerLocomotion::Reset()
 T BoomerLocomotion::Update()
 T BoomerLocomotion::~BoomerLocomotion()
 T BoomerRetreatToCover::BoomerRetreatToCover(TerrorNavArea*)
 T BoomerRetreatToCover::GetName() const
 T BoomerRetreatToCover::OnInjured(Boomer*, CTakeDamageInfo const&)
 T BoomerRetreatToCover::OnMoveToFailure(Boomer*, Path const*, MoveToFailureType)
 T BoomerRetreatToCover::OnMoveToSuccess(Boomer*, Path const*)
 T BoomerRetreatToCover::OnShoved(Boomer*, CBaseEntity*)
 T BoomerRetreatToCover::OnStart(Boomer*, Action<Boomer>*)
 T BoomerRetreatToCover::Update(Boomer*, float)
 T BoomerRetreatToCover::~BoomerRetreatToCover()
 T BoomerVomitOnVictim::BoomerVomitOnVictim(CTerrorPlayer*)
 T BoomerVomitOnVictim::GetName() const
 T BoomerVomitOnVictim::OnStart(Boomer*, Action<Boomer>*)
 T BoomerVomitOnVictim::Update(Boomer*, float)
 T BoomerVomitOnVictim::~BoomerVomitOnVictim()
 T BossZombiePlayerBot::BossZombiePlayerBot()
 T BossZombiePlayerBot::ChooseVictim(CTerrorPlayer*)
 T BossZombiePlayerBot::GetDebugIdentifier() const
 T BossZombiePlayerBot::GetEntity() const
 T BossZombiePlayerBot::IsBehind(CTerrorPlayer*) const
 T BossZombiePlayerBot::IsDebugFilterMatch(char const*) const
 T BossZombiePlayerBot::OnLeaveActiveState()
 T BossZombiePlayerBot::OnPreThinkObserverMode()
 T BossZombiePlayerBot::OnTeamChanged(int)
 T BossZombiePlayerBot::PhysicsSimulate()
 T BossZombiePlayerBot::ResetHumanSpectator()
 T BossZombiePlayerBot::SetHumanSpectator(CTerrorPlayer*)
 T BossZombiePlayerBot::ShouldTouch(CBaseEntity const*) const
 T BossZombiePlayerBot::Spawn()
 T BossZombiePlayerBot::Update()
 T BossZombiePlayerBot::~BossZombiePlayerBot()
 T BoundarySpreadScan::operator()(CNavArea*)
 T BreakModelCreateSingle(CBaseEntity*, breakmodel_t*, Vector const&, QAngle const&, Vector const&, Vector const&, int, breakablepropparams_t const&)
 T BreakModelList(CUtlVector<breakmodel_t, CUtlMemory<breakmodel_t, int> >&, int, float, int)
 T BuildBoneChain(CStudioHdr const*, matrix3x4_t const&, Vector const*, Quaternion const*, int, matrix3x4_t*, CBoneBitList&)
 T BuildChangeList(levellist_t*, int)
 T BuildGammaTable(float, float, float, int)
 T BuildSelectedSet::WriteConnections(CNavArea*, KeyValues*, NavDirType, char const*)
 T BuildSelectedSet::operator()(CNavArea*)
 T CAISound::GetDataDescMap()
 T CAISound::InputEmitAISound(inputdata_t&)
 T CAISound::InputInsertSound(inputdata_t&)
 T CAISound::~CAISound()
 T CAI_BaseActor::IsServerSideFlexController(char const*)
 T CAI_BaseNPC::GetActivityName(int)
 T CAI_ChangeHintGroup::GetDataDescMap()
 T CAI_ChangeHintGroup::InputActivate(inputdata_t&)
 T CAI_ChangeHintGroup::ObjectCaps()
 T CAI_ChangeHintGroup::~CAI_ChangeHintGroup()
 T CAI_ChangeTarget::GetDataDescMap()
 T CAI_ChangeTarget::InputActivate(inputdata_t&)
 T CAI_ChangeTarget::ObjectCaps()
 T CAI_ChangeTarget::~CAI_ChangeTarget()
 T CAI_Concept::CAI_Concept(char const*)
 T CAI_Concept::GetStringConcept() const
 T CAI_Expresser::CAI_Expresser(CBaseFlex*)
 T CAI_Expresser::FindResponse(AI_Response&, CAI_Concept&, AI_CriteriaSet*)
 T CAI_Expresser::GatherCriteria(AI_CriteriaSet*, CAI_Concept const&, char const*)
 T CAI_Expresser::IsSpeaking()
 T CAI_Expresser::IsValidResponse(ResponseType_t, char const*)
 T CAI_Expresser::NoteSpeaking(float, float)
 T CAI_Expresser::OnSpeechFinished()
 T CAI_Expresser::SetSpokeConcept(CAI_Concept, AI_Response*, bool)
 T CAI_Expresser::Speak(CAI_Concept&, AI_CriteriaSet*, char*, unsigned long, IRecipientFilter*)
 T CAI_Expresser::Speak(CAI_Concept&, char const*, char*, unsigned long, IRecipientFilter*)
 T CAI_Expresser::SpeakDispatchResponse(CAI_Concept&, AI_Response*, AI_CriteriaSet*, IRecipientFilter*)
 T CAI_Expresser::SpeakRawScene(char const*, float, AI_Response*, IRecipientFilter*)
 T CAI_Expresser::SpeakRawSentence(char const*, float, float, soundlevel_t, CBaseEntity*)
 T CAI_Expresser::SpeechMsg(CBaseEntity*, char const*, ...)
 T CAI_Expresser::~CAI_Expresser()
 T CAI_ExpresserHost<CBasePlayer>::DispatchResponse(char const*)
 T CAI_ExpresserHost<CBasePlayer>::NoteSpeaking(float, float)
 T CAI_ExpresserHost<CBasePlayer>::PostSpeakDispatchResponse(CAI_Concept, AI_Response*)
 T CAI_ExpresserHost<CBasePlayer>::Speak(CAI_Concept, AI_CriteriaSet*, char*, unsigned long, IRecipientFilter*)
 T CAI_ExpresserHost<CBasePlayer>::Speak(CAI_Concept, char const*, char*, unsigned long, IRecipientFilter*)
 T CAI_ExpresserHost<CFlexExpresserShim>::DispatchResponse(char const*)
 T CAI_ExpresserHost<CFlexExpresserShim>::ModifyOrAppendCriteria(AI_CriteriaSet&)
 T CAI_ExpresserHost<CFlexExpresserShim>::NoteSpeaking(float, float)
 T CAI_ExpresserHost<CFlexExpresserShim>::PostSpeakDispatchResponse(CAI_Concept, AI_Response*)
 T CAI_ExpresserHost<CFlexExpresserShim>::Speak(CAI_Concept, AI_CriteriaSet*, char*, unsigned long, IRecipientFilter*)
 T CAI_ExpresserHost<CFlexExpresserShim>::Speak(CAI_Concept, char const*, char*, unsigned long, IRecipientFilter*)
 T CAI_ExpresserSink::OnSpokeConcept(CAI_Concept, AI_Response*)
 T CAI_ExpresserSink::OnStartSpeaking()
 T CAI_ExpresserSink::UseSemaphore()
 T CAI_ExpresserWithFollowup::DispatchFollowupThroughQueue(CAI_Concept const&, char const*, CResponseQueue::CFollowupTargetSpec_t const&, float, CBaseEntity*)
 T CAI_ExpresserWithFollowup::OnSpeechFinished()
 T CAI_ExpresserWithFollowup::Speak(CAI_Concept&, char const*, char*, unsigned long, IRecipientFilter*)
 T CAI_ExpresserWithFollowup::SpeakDispatchFollowup(AI_ResponseFollowup&)
 T CAI_ExpresserWithFollowup::SpeakDispatchResponse(CAI_Concept&, AI_Response*, AI_CriteriaSet*, IRecipientFilter*)
 T CAbandonmentAwardTemplate::CAbandonmentAwardTemplate(int)
 T CAbandonmentAwardTemplate::FireGameEvent(IGameEvent*)
 T CAbandonmentAwardTemplate::OnCreate()
 T CAbandonmentAwardTemplate::~CAbandonmentAwardTemplate()
 T CAbusiveBehaviorAwardTemplate::CAbusiveBehaviorAwardTemplate(int)
 T CAbusiveBehaviorAwardTemplate::FireGameEvent(IGameEvent*)
 T CAbusiveBehaviorAwardTemplate::OnCreate()
 T CAbusiveBehaviorAwardTemplate::~CAbusiveBehaviorAwardTemplate()
 T CAchievementMgr::CheckAchievementsEnabled()
 T CAchievementMgr::PostRestoreSavedGame()
 T CAchievementMgr::PreRestoreSavedGame()
 T CAchievementMsgHandler::FireGameEvent(IGameEvent*)
 T CAchievementMsgHandler::PostInit()
 T CAchievementMsgHandler::~CAchievementMsgHandler()
 T CAchievementSaveRestoreBlockHandler::GetBlockName()
 T CAchievementSaveRestoreBlockHandler::ReadRestoreHeaders(IRestore*)
 T CAchievementSaveRestoreBlockHandler::Restore(IRestore*, bool)
 T CAchievementSaveRestoreBlockHandler::Save(ISave*)
 T CAchievementSaveRestoreBlockHandler::WriteSaveHeaders(ISave*)
 T CActivityDataOps::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CActivityDataOps::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CActivityDataOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CActivityDataOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CAimTargetManager::ForceRepopulateList()
 T CAimTargetManager::LevelShutdownPostEntity()
 T CAimTargetManager::OnEntityCreated(CBaseEntity*)
 T CAimTargetManager::OnEntityDeleted(CBaseEntity*)
 T CAimTargetManager::OnEntitySpawned(CBaseEntity*)
 T CAimTargetManager::~CAimTargetManager()
 T CAmbientGeneric::Activate()
 T CAmbientGeneric::ComputeMaxAudibleDistance()
 T CAmbientGeneric::GetDataDescMap()
 T CAmbientGeneric::InitModulationParms()
 T CAmbientGeneric::InputFadeIn(inputdata_t&)
 T CAmbientGeneric::InputFadeOut(inputdata_t&)
 T CAmbientGeneric::InputPitch(inputdata_t&)
 T CAmbientGeneric::InputPlaySound(inputdata_t&)
 T CAmbientGeneric::InputStopSound(inputdata_t&)
 T CAmbientGeneric::InputToggleSound(inputdata_t&)
 T CAmbientGeneric::InputVolume(inputdata_t&)
 T CAmbientGeneric::KeyValue(char const*, char const*)
 T CAmbientGeneric::Precache()
 T CAmbientGeneric::RampThink()
 T CAmbientGeneric::SendSound(SoundFlags_t)
 T CAmbientGeneric::SetTransmit(CCheckTransmitInfo*, bool)
 T CAmbientGeneric::Spawn()
 T CAmbientGeneric::ToggleSound()
 T CAmbientGeneric::UpdateOnRemove()
 T CAmbientGeneric::~CAmbientGeneric()
 T CAmbushAwardTemplate::CAmbushAwardTemplate(int)
 T CAmbushAwardTemplate::FireGameEvent(IGameEvent*)
 T CAmbushAwardTemplate::OnCreate()
 T CAmbushAwardTemplate::~CAmbushAwardTemplate()
 T CAmmoDef::AddAmmoType(char const*, int, int, char const*, char const*, char const*, float, int, int, int)
 T CAmmoDef::AddAmmoType(char const*, int, int, int, int, int, float, int, int, int)
 T CAmmoDef::CAmmoDef()
 T CAmmoDef::CanCarryInfiniteAmmo(int)
 T CAmmoDef::DamageForce(int)
 T CAmmoDef::DamageType(int)
 T CAmmoDef::Flags(int)
 T CAmmoDef::GetAmmoOfIndex(int)
 T CAmmoDef::Index(char const*)
 T CAmmoDef::MaxCarry(int, CBaseCombatCharacter const*)
 T CAmmoDef::MaxSplashSize(int)
 T CAmmoDef::MinSplashSize(int)
 T CAmmoDef::NPCDamage(int)
 T CAmmoDef::PlrDamage(int)
 T CAmmoDef::TracerType(int)
 T CAmmoDef::~CAmmoDef()
 T CAnchorList::AddToList(CBaseEntity*, float)
 T CAnchorList::LevelShutdownPostEntity()
 T CAnchorList::~CAnchorList()
 T CAnimationLayer::CAnimationLayer()
 T CAnimationLayer::DispatchAnimEvents(CBaseAnimating*, CBaseAnimating*)
 T CAnimationLayer::Init(CBaseAnimatingOverlay*)
 T CAnimationLayer::StudioFrameAdvance(float, CBaseAnimating*)
 T CAreaPortal::GetDataDescMap()
 T CAreaPortal::InputClose(inputdata_t&)
 T CAreaPortal::InputOpen(inputdata_t&)
 T CAreaPortal::InputToggle(inputdata_t&)
 T CAreaPortal::KeyValue(char const*, char const*)
 T CAreaPortal::Precache()
 T CAreaPortal::Spawn()
 T CAreaPortal::UpdateTransmitState()
 T CAreaPortal::UpdateVisibility(CUtlVector<Vector, CUtlMemory<Vector, int> > const&, float, bool&)
 T CAreaPortal::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CAreaPortal::~CAreaPortal()
 T CAssaultRifle::GetDataDescMap()
 T CAssaultRifle::GetDeployActivity()
 T CAssaultRifle::GetLayerForViewmodelActivity(Activity) const
 T CAssaultRifle::GetServerClass()
 T CAssaultRifle::GetViewmodelMeleeActivity()
 T CAssaultRifle::GetViewmodelTracerAttachmentIndex()
 T CAssaultRifle::GetWeaponFireActivity(PlayerAnimEvent_t, Activity)
 T CAssaultRifle::GetWeaponID() const
 T CAssaultRifle::GetWeaponReloadActivity(PlayerAnimEvent_t, Activity)
 T CAssaultRifle::Precache()
 T CAssaultRifle::TranslateViewmodelActivity(Activity) const
 T CAssaultRifle::WeaponTranslateMainActivity(Activity)
 T CAssaultRifle::YouForgotToImplementOrDeclareServerClass()
 T CAssaultRifle::~CAssaultRifle()
 T CAutoGameSystem::CAutoGameSystem(char const*)
 T CAutoGameSystem::Name()
 T CAutoGameSystem::~CAutoGameSystem()
 T CAutoGameSystemPerFrame::CAutoGameSystemPerFrame(char const*)
 T CAutoGameSystemPerFrame::Name()
 T CAutoGameSystemPerFrame::~CAutoGameSystemPerFrame()
 T CAutoShotgun::GetDataDescMap()
 T CAutoShotgun::GetLayerForViewmodelActivity(Activity) const
 T CAutoShotgun::GetRateOfFire() const
 T CAutoShotgun::GetServerClass()
 T CAutoShotgun::GetViewmodelTracerAttachmentIndex()
 T CAutoShotgun::GetWeaponDeployActivity(PlayerAnimEvent_t, Activity)
 T CAutoShotgun::GetWeaponFireActivity(PlayerAnimEvent_t, Activity)
 T CAutoShotgun::GetWeaponID() const
 T CAutoShotgun::GetWeaponReloadActivity(PlayerAnimEvent_t, Activity)
 T CAutoShotgun::IsFullyAutomatic() const
 T CAutoShotgun::Precache()
 T CAutoShotgun::PrimaryAttack()
 T CAutoShotgun::TranslateViewmodelActivity(Activity) const
 T CAutoShotgun::WeaponTranslateMainActivity(Activity)
 T CAutoShotgun::YouForgotToImplementOrDeclareServerClass()
 T CAutoShotgun::~CAutoShotgun()
 T CAwardPool::CAwardPool()
 T CAwardPool::CreateTemplatesForPlayer(int, CUtlLinkedList<CAwardTemplate*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CAwardTemplate*, unsigned short>, unsigned short> >*)
 T CAwardPool::DeleteTemplatesForPlayer(int, CUtlLinkedList<CAwardTemplate*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CAwardTemplate*, unsigned short>, unsigned short> >*)
 T CAwardPool::~CAwardPool()
 T CAwardTemplate::CAwardTemplate(int)
 T CAwardTemplate::GetOwner() const
 T CAwardTemplate::OnConditionsMet(AwardType, CBaseEntity*)
 T CAwardTemplate::~CAwardTemplate()
 T CBaseAbility::AbilityDebug(CTerrorPlayer*, char const*, ...)
 T CBaseAbility::AbilityDebug(char const*, ...)
 T CBaseAbility::ActivateAbility()
 T CBaseAbility::CBaseAbility()
 T CBaseAbility::CanPlayerMove() const
 T CBaseAbility::CreateForPlayer(CTerrorPlayer*)
 T CBaseAbility::GetActivationTimeRemaining() const
 T CBaseAbility::GetButton() const
 T CBaseAbility::GetDataDescMap()
 T CBaseAbility::GetFrictionMultiplier() const
 T CBaseAbility::GetJumpVector(bool)
 T CBaseAbility::GetServerClass()
 T CBaseAbility::GetSpeedOverride() const
 T CBaseAbility::HandleCustomCollision(CBaseEntity*, Vector const&, Vector const&, CGameTrace*, CMoveData*)
 T CBaseAbility::HasAbilityTarget() const
 T CBaseAbility::IsAbilityReadyToFire() const
 T CBaseAbility::IsActive() const
 T CBaseAbility::IsPredicted() const
 T CBaseAbility::NetworkVar_m_activationSupressedTimer::NetworkStateChanged()
 T CBaseAbility::NetworkVar_m_activationSupressedTimer::NetworkStateChanged(void*)
 T CBaseAbility::NetworkVar_m_nextActivationTimer::NetworkStateChanged()
 T CBaseAbility::NetworkVar_m_nextActivationTimer::NetworkStateChanged(void*)
 T CBaseAbility::OnButtonPressed()
 T CBaseAbility::OnButtonReleased()
 T CBaseAbility::OnCreate(CTerrorPlayer*)
 T CBaseAbility::OnCrouchStart()
 T CBaseAbility::OnCrouched()
 T CBaseAbility::OnDestroy()
 T CBaseAbility::OnOwnerChanged(CTerrorPlayer*)
 T CBaseAbility::OnOwnerLeaveActiveState()
 T CBaseAbility::OnOwnerTakeDamage(CTakeDamageInfo const&)
 T CBaseAbility::OnStunned(float)
 T CBaseAbility::OnTouch(CBaseEntity*)
 T CBaseAbility::Operator_HandleAnimEvent(animevent_t*, CBaseCombatCharacter*)
 T CBaseAbility::SetSupressionTimer(float)
 T CBaseAbility::ShouldTransmit(CCheckTransmitInfo const*)
 T CBaseAbility::StartActivationTimer(float, float)
 T CBaseAbility::UpdateAbility()
 T CBaseAbility::UpdateOnRemove()
 T CBaseAbility::UpdateTransmitState()
 T CBaseAbility::YouForgotToImplementOrDeclareServerClass()
 T CBaseAbility::~CBaseAbility()
 T CBaseAchievement::CBaseAchievement()
 T CBaseAchievement::CalcProgressMsgIncrement()
 T CBaseAchievement::ClearAchievementData()
 T CBaseAchievement::Event_EntityKilled(CBaseEntity*, CBaseEntity*, CBaseEntity*, IGameEvent*)
 T CBaseAchievement::FireGameEvent(IGameEvent*)
 T CBaseAchievement::FireGameEvent_Internal(IGameEvent*)
 T CBaseAchievement::GetAchievementID()
 T CBaseAchievement::GetComponentBits()
 T CBaseAchievement::GetComponentDisplayString(int)
 T CBaseAchievement::GetCount()
 T CBaseAchievement::GetDataDescMap()
 T CBaseAchievement::GetDisplayOrder()
 T CBaseAchievement::GetFlags()
 T CBaseAchievement::GetGoal()
 T CBaseAchievement::GetIconPath()
 T CBaseAchievement::GetName()
 T CBaseAchievement::GetNumComponents()
 T CBaseAchievement::GetPointValue()
 T CBaseAchievement::IncrementCount()
 T CBaseAchievement::Init()
 T CBaseAchievement::IsAchieved()
 T CBaseAchievement::IsActive()
 T CBaseAchievement::ListenForEvents()
 T CBaseAchievement::OnMapEvent(char const*)
 T CBaseAchievement::OnPlayerStatsUpdate()
 T CBaseAchievement::OnSteamUserStatsStored()
 T CBaseAchievement::PostRestoreSavedGame()
 T CBaseAchievement::PreRestoreSavedGame()
 T CBaseAchievement::PrintAdditionalStatus()
 T CBaseAchievement::SetShowOnHUD(bool)
 T CBaseAchievement::SetUserSlot(int)
 T CBaseAchievement::ShouldHideUntilAchieved()
 T CBaseAchievement::ShouldSaveWithGame()
 T CBaseAchievement::ShouldShowOnHUD()
 T CBaseAchievement::ShouldShowProgressNotification()
 T CBaseAchievement::ShowProgressNotification()
 T CBaseAchievement::~CBaseAchievement()
 T CBaseAnimating::Activate()
 T CBaseAnimating::BecomeRagdollOnClient(Vector const&)
 T CBaseAnimating::BuildMatricesWithBoneMerge(CStudioHdr const*, QAngle const&, Vector const&, Vector const*, Quaternion const*, matrix3x4_t*, CBaseAnimating*, CBoneCache*)
 T CBaseAnimating::CBaseAnimating()
 T CBaseAnimating::CalculateIKLocks(float)
 T CBaseAnimating::CanBecomeRagdoll()
 T CBaseAnimating::ClampRagdollForce(Vector const&, Vector*)
 T CBaseAnimating::ComputeHitboxSurroundingBox(Vector*, Vector*)
 T CBaseAnimating::CopyAnimationDataFrom(CBaseAnimating*)
 T CBaseAnimating::CountBodyGroupVariants(int)
 T CBaseAnimating::DispatchAnimEvents(CBaseAnimating*)
 T CBaseAnimating::Dissolve(char const*, float, bool, int, Vector, int)
 T CBaseAnimating::DoMuzzleFlash()
 T CBaseAnimating::DrawDebugTextOverlays()
 T CBaseAnimating::DrawRawSkeleton(matrix3x4_t*, int, bool, float, bool)
 T CBaseAnimating::DrawServerHitboxes(float, bool)
 T CBaseAnimating::Extinguish()
 T CBaseAnimating::ExtractBbox(int, Vector&, Vector&)
 T CBaseAnimating::FindBodyGroupVariant(int, int)
 T CBaseAnimating::FindBodygroupByName(char const*)
 T CBaseAnimating::FindTransitionSequence(int, int, int*)
 T CBaseAnimating::GetAnimTimeInterval() const
 T CBaseAnimating::GetAttachment(char const*, Vector&, QAngle&)
 T CBaseAnimating::GetAttachment(int, Vector&, QAngle&)
 T CBaseAnimating::GetAttachment(int, Vector&, Vector*, Vector*, Vector*)
 T CBaseAnimating::GetAttachment(int, matrix3x4_t&)
 T CBaseAnimating::GetAttachmentBone(int)
 T CBaseAnimating::GetAttachmentLocal(int, Vector&, QAngle&)
 T CBaseAnimating::GetBaseAnimating()
 T CBaseAnimating::GetBodygroup(int)
 T CBaseAnimating::GetBodygroupCount(int)
 T CBaseAnimating::GetBodygroupPartName(int, int)
 T CBaseAnimating::GetBoneCache()
 T CBaseAnimating::GetBonePosition(int, Vector&, QAngle&)
 T CBaseAnimating::GetBoneTransform(int, matrix3x4_t&)
 T CBaseAnimating::GetDataDescMap()
 T CBaseAnimating::GetFlexControllerName(LocalFlexController_t)
 T CBaseAnimating::GetFlexControllerType(LocalFlexController_t)
 T CBaseAnimating::GetGroundSpeedVelocity()
 T CBaseAnimating::GetHitboxBone(int)
 T CBaseAnimating::GetHitboxSet()
 T CBaseAnimating::GetHitboxesFrontside(int*, int, Vector const&, float)
 T CBaseAnimating::GetIdealAccel() const
 T CBaseAnimating::GetIdealSpeed() const
 T CBaseAnimating::GetIntervalMovement(float, bool&, Vector&, QAngle&)
 T CBaseAnimating::GetLastVisibleCycle(CStudioHdr*, int)
 T CBaseAnimating::GetNumBodyGroups()
 T CBaseAnimating::GetNumFlexControllers()
 T CBaseAnimating::GetPhysicsBone(int)
 T CBaseAnimating::GetPoseParameter(char const*)
 T CBaseAnimating::GetPoseParameter(int)
 T CBaseAnimating::GetPoseParameterRange(int, float&, float&)
 T CBaseAnimating::GetSequenceActivity(int)
 T CBaseAnimating::GetSequenceActivityName(int)
 T CBaseAnimating::GetSequenceCycleRate(CStudioHdr*, int)
 T CBaseAnimating::GetSequenceGroundSpeed(CStudioHdr*, int)
 T CBaseAnimating::GetSequenceKeyValues(int)
 T CBaseAnimating::GetSequenceLinearMotion(int, Vector*)
 T CBaseAnimating::GetSequenceMoveYaw(int)
 T CBaseAnimating::GetSequenceMovement(int, float, float, Vector&, QAngle&)
 T CBaseAnimating::GetSequenceName(int)
 T CBaseAnimating::GetServerClass()
 T CBaseAnimating::GetSkeleton(CStudioHdr*, Vector*, QuaternionAligned*, int)
 T CBaseAnimating::GetStepAngles() const
 T CBaseAnimating::GetStepOrigin() const
 T CBaseAnimating::GetVelocity(Vector*, Vector*)
 T CBaseAnimating::GotoSequence(int, float, float, int, int&, float&, int&)
 T CBaseAnimating::HandleAnimEvent(animevent_t*)
 T CBaseAnimating::HasAnimEvent(int, int)
 T CBaseAnimating::Ignite(float, bool, float, bool)
 T CBaseAnimating::IgniteHitboxFireScale(float)
 T CBaseAnimating::IgniteLifetime(float)
 T CBaseAnimating::IgniteNumHitboxFires(int)
 T CBaseAnimating::InitBoneControllers()
 T CBaseAnimating::InputBecomeRagdoll(inputdata_t&)
 T CBaseAnimating::InputIgnite(inputdata_t&)
 T CBaseAnimating::InputIgniteHitboxFireScale(inputdata_t&)
 T CBaseAnimating::InputIgniteLifetime(inputdata_t&)
 T CBaseAnimating::InputIgniteNumHitboxFires(inputdata_t&)
 T CBaseAnimating::InputSetLightingOrigin(inputdata_t&)
 T CBaseAnimating::InvalidateBoneCache()
 T CBaseAnimating::IsActivityFinished()
 T CBaseAnimating::IsRagdoll()
 T CBaseAnimating::IsValidSequence(int)
 T CBaseAnimating::IsViewModel() const
 T CBaseAnimating::LockStudioHdr()
 T CBaseAnimating::LookupAttachment(char const*)
 T CBaseAnimating::LookupBone(char const*)
 T CBaseAnimating::LookupPoseParameter(CStudioHdr*, char const*)
 T CBaseAnimating::LookupSequence(char const*)
 T CBaseAnimating::ModifyOrAppendCriteria(AI_CriteriaSet&)
 T CBaseAnimating::OnRestore()
 T CBaseAnimating::OnSequenceSet(int)
 T CBaseAnimating::PopulatePoseParameters()
 T CBaseAnimating::Precache()
 T CBaseAnimating::RandomizeBodygroups(CUtlVector<char const*, CUtlMemory<char const*, int> >&)
 T CBaseAnimating::ResetClientsideFrame()
 T CBaseAnimating::ResetSequence(int)
 T CBaseAnimating::ResetSequenceInfo()
 T CBaseAnimating::Restore(IRestore&)
 T CBaseAnimating::Scorch(int, int)
 T CBaseAnimating::SelectHeaviestSequence(Activity)
 T CBaseAnimating::SelectWeightedSequence(Activity)
 T CBaseAnimating::SequenceDuration(CStudioHdr*, int)
 T CBaseAnimating::SetBodygroup(int, int)
 T CBaseAnimating::SetBoneController(int, float)
 T CBaseAnimating::SetCycle(float)
 T CBaseAnimating::SetLightingOrigin(CBaseEntity*)
 T CBaseAnimating::SetLightingOrigin(string_t)
 T CBaseAnimating::SetModel(char const*)
 T CBaseAnimating::SetPlaybackRate(float)
 T CBaseAnimating::SetPoseParameter(CStudioHdr*, int, float)
 T CBaseAnimating::SetSequence(int)
 T CBaseAnimating::SetTransmit(CCheckTransmitInfo*, bool)
 T CBaseAnimating::SetupBones(matrix3x4_t*, int)
 T CBaseAnimating::Spawn()
 T CBaseAnimating::StudioFrameAdvance()
 T CBaseAnimating::StudioFrameAdvanceInternal(CStudioHdr*, float)
 T CBaseAnimating::StudioFrameAdvanceManual(float)
 T CBaseAnimating::Teleport(Vector const*, QAngle const*, Vector const*)
 T CBaseAnimating::TestCollision(Ray_t const&, unsigned int, CGameTrace&)
 T CBaseAnimating::TestHitboxes(Ray_t const&, unsigned int, CGameTrace&)
 T CBaseAnimating::TransferDissolveFrom(CBaseAnimating*)
 T CBaseAnimating::UnlockStudioHdr()
 T CBaseAnimating::UpdateModelWidthScale()
 T CBaseAnimating::UpdateStepOrigin()
 T CBaseAnimating::UseClientSideAnimation()
 T CBaseAnimating::YouForgotToImplementOrDeclareServerClass()
 T CBaseAnimating::~CBaseAnimating()
 T CBaseAnimatingOverlay::AddGesture(Activity, bool)
 T CBaseAnimatingOverlay::AddLayeredSequence(int, int)
 T CBaseAnimatingOverlay::AllocateLayer(int)
 T CBaseAnimatingOverlay::DispatchAnimEvents(CBaseAnimating*)
 T CBaseAnimatingOverlay::FastRemoveLayer(int)
 T CBaseAnimatingOverlay::FindGestureLayer(Activity)
 T CBaseAnimatingOverlay::GetAnimOverlay(int)
 T CBaseAnimatingOverlay::GetDataDescMap()
 T CBaseAnimatingOverlay::GetServerClass()
 T CBaseAnimatingOverlay::GetSkeleton(CStudioHdr*, Vector*, QuaternionAligned*, int)
 T CBaseAnimatingOverlay::IsPlayingGesture(Activity)
 T CBaseAnimatingOverlay::IsValidLayer(int)
 T CBaseAnimatingOverlay::OnRestore()
 T CBaseAnimatingOverlay::RemoveAllGestures()
 T CBaseAnimatingOverlay::RemoveGesture(Activity)
 T CBaseAnimatingOverlay::RemoveLayer(int, float, float)
 T CBaseAnimatingOverlay::SetLayerCycle(int, float)
 T CBaseAnimatingOverlay::SetLayerCycle(int, float, float)
 T CBaseAnimatingOverlay::SetLayerDuration(int, float)
 T CBaseAnimatingOverlay::SetLayerLooping(int, bool)
 T CBaseAnimatingOverlay::SetLayerNoRestore(int, bool)
 T CBaseAnimatingOverlay::SetLayerPlaybackRate(int, float)
 T CBaseAnimatingOverlay::SetLayerPriority(int, int)
 T CBaseAnimatingOverlay::SetLayerWeight(int, float)
 T CBaseAnimatingOverlay::SetModel(char const*)
 T CBaseAnimatingOverlay::SetNumAnimOverlays(int)
 T CBaseAnimatingOverlay::StudioFrameAdvance()
 T CBaseAnimatingOverlay::YouForgotToImplementOrDeclareServerClass()
 T CBaseAnimatingOverlay::~CBaseAnimatingOverlay()
 T CBaseAppSystem<IParticleSystemQuery>::Connect(void* (*)(char const*, int*))
 T CBaseAppSystem<IParticleSystemQuery>::Disconnect()
 T CBaseAppSystem<IParticleSystemQuery>::Init()
 T CBaseAppSystem<IParticleSystemQuery>::QueryInterface(char const*)
 T CBaseAppSystem<IParticleSystemQuery>::Shutdown()
 T CBaseButton* _CreateEntityTemplate<CBaseButton>(CBaseButton*, char const*)
 T CBaseButton::ButtonActivate()
 T CBaseButton::ButtonBackHome()
 T CBaseButton::ButtonReturn()
 T CBaseButton::ButtonSpark()
 T CBaseButton::ButtonTouch(CBaseEntity*)
 T CBaseButton::ButtonUse(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CBaseButton::CreateVPhysics()
 T CBaseButton::DrawDebugTextOverlays()
 T CBaseButton::GetDataDescMap()
 T CBaseButton::GetGlowEntity()
 T CBaseButton::GetServerClass()
 T CBaseButton::InputLock(inputdata_t&)
 T CBaseButton::InputPress(inputdata_t&)
 T CBaseButton::InputPressIn(inputdata_t&)
 T CBaseButton::InputPressOut(inputdata_t&)
 T CBaseButton::InputUnlock(inputdata_t&)
 T CBaseButton::KeyValue(char const*, char const*)
 T CBaseButton::Lock()
 T CBaseButton::ObjectCaps()
 T CBaseButton::OnTakeDamage(CTakeDamageInfo const&)
 T CBaseButton::OnUseLocked(CBaseEntity*)
 T CBaseButton::PhysicsSolidMaskForEntity() const
 T CBaseButton::Precache()
 T CBaseButton::Press(CBaseEntity*, CBaseButton::BUTTON_CODE)
 T CBaseButton::Spawn()
 T CBaseButton::TriggerAndWait()
 T CBaseButton::Unlock()
 T CBaseButton::YouForgotToImplementOrDeclareServerClass()
 T CBaseButton::~CBaseButton()
 T CBaseCSGrenade::AllowsAutoSwitchFrom() const
 T CBaseCSGrenade::CBaseCSGrenade()
 T CBaseCSGrenade::CanExtendHelpingHand() const
 T CBaseCSGrenade::CapabilitiesGet()
 T CBaseCSGrenade::DecrementAmmo(CBaseCombatCharacter*)
 T CBaseCSGrenade::Deploy()
 T CBaseCSGrenade::DropGrenade()
 T CBaseCSGrenade::EmitGrenade(Vector, QAngle, Vector, Vector, CBasePlayer*)
 T CBaseCSGrenade::GetDataDescMap()
 T CBaseCSGrenade::GetGrenadePrimeActivity(Activity)
 T CBaseCSGrenade::GetGrenadeThrowActivity(Activity)
 T CBaseCSGrenade::GetServerClass()
 T CBaseCSGrenade::GetWeaponDeployActivity(PlayerAnimEvent_t, Activity)
 T CBaseCSGrenade::GiveDefaultAmmo()
 T CBaseCSGrenade::HasSecondaryMelee()
 T CBaseCSGrenade::Holster(CBaseCombatWeapon*)
 T CBaseCSGrenade::ItemPostFrame()
 T CBaseCSGrenade::Precache()
 T CBaseCSGrenade::PrimaryAttack()
 T CBaseCSGrenade::Reload()
 T CBaseCSGrenade::StartGrenadeThrow()
 T CBaseCSGrenade::ThrowGrenade()
 T CBaseCSGrenade::WeaponTranslateMainActivity(Activity)
 T CBaseCSGrenade::YouForgotToImplementOrDeclareServerClass()
 T CBaseCSGrenade::~CBaseCSGrenade()
 T CBaseCSGrenadeProjectile::DangerSoundThink()
 T CBaseCSGrenadeProjectile::GetDataDescMap()
 T CBaseCSGrenadeProjectile::GetServerClass()
 T CBaseCSGrenadeProjectile::GetShakeAmplitude()
 T CBaseCSGrenadeProjectile::PhysicsSolidMaskForEntity() const
 T CBaseCSGrenadeProjectile::PostConstructor(char const*)
 T CBaseCSGrenadeProjectile::Precache()
 T CBaseCSGrenadeProjectile::ResolveFlyCollisionCustom(CGameTrace&, Vector&)
 T CBaseCSGrenadeProjectile::SetDetonateTimerLength(float)
 T CBaseCSGrenadeProjectile::SetupInitialTransmittedGrenadeVelocity(Vector const&)
 T CBaseCSGrenadeProjectile::Spawn()
 T CBaseCSGrenadeProjectile::Splash()
 T CBaseCSGrenadeProjectile::YouForgotToImplementOrDeclareServerClass()
 T CBaseCSGrenadeProjectile::~CBaseCSGrenadeProjectile()
 T CBaseCombatCharacter::AddClassRelationship(Class_T, Disposition_t, int)
 T CBaseCombatCharacter::AddEntityRelationship(CBaseEntity*, Disposition_t, int)
 T CBaseCombatCharacter::AddPlayerItem(CBaseCombatWeapon*)
 T CBaseCombatCharacter::AllocateDefaultRelationships()
 T CBaseCombatCharacter::ApplyStressDamage(IPhysicsObject*, bool)
 T CBaseCombatCharacter::AreFootstepsAudible() const
 T CBaseCombatCharacter::BecomeRagdoll(CTakeDamageInfo const&, Vector const&)
 T CBaseCombatCharacter::BecomeRagdollBoogie(CBaseEntity*, Vector const&, float, int)
 T CBaseCombatCharacter::BloodColor()
 T CBaseCombatCharacter::BodyAngles()
 T CBaseCombatCharacter::BodyDirection2D()
 T CBaseCombatCharacter::BodyDirection3D()
 T CBaseCombatCharacter::CBaseCombatCharacter()
 T CBaseCombatCharacter::CalcDamageForceVector(CTakeDamageInfo const&)
 T CBaseCombatCharacter::CalcWeaponProficiency(CBaseCombatWeapon*)
 T CBaseCombatCharacter::CanBeA(ZombieClassType) const
 T CBaseCombatCharacter::CanBecomeServerRagdoll()
 T CBaseCombatCharacter::ChangeTeam(int)
 T CBaseCombatCharacter::CheckTraceHullAttack(Vector const&, Vector const&, Vector const&, Vector const&, int, int, float, bool)
 T CBaseCombatCharacter::CheckTraceHullAttack(float, Vector const&, Vector const&, int, int, float, bool)
 T CBaseCombatCharacter::ClearLastKnownArea()
 T CBaseCombatCharacter::ComputeLOS(Vector const&, Vector const&) const
 T CBaseCombatCharacter::ComputeTargetIsInDarkness(Vector const&, CNavArea*, Vector const&) const
 T CBaseCombatCharacter::CorpseFade()
 T CBaseCombatCharacter::CorpseGib(CTakeDamageInfo const&)
 T CBaseCombatCharacter::DoMuzzleFlash()
 T CBaseCombatCharacter::Event_Dying()
 T CBaseCombatCharacter::Event_Gibbed(CTakeDamageInfo const&)
 T CBaseCombatCharacter::Event_Killed(CTakeDamageInfo const&)
 T CBaseCombatCharacter::ExitVehicle()
 T CBaseCombatCharacter::EyeDirection2D()
 T CBaseCombatCharacter::EyeDirection3D()
 T CBaseCombatCharacter::FInAimCone(CBaseEntity*)
 T CBaseCombatCharacter::FInAimCone(Vector const&)
 T CBaseCombatCharacter::FInViewCone(CBaseEntity*)
 T CBaseCombatCharacter::FInViewCone(Vector const&)
 T CBaseCombatCharacter::FVisible(CBaseEntity*, int, CBaseEntity**)
 T CBaseCombatCharacter::FVisible(Vector const&, int, CBaseEntity**)
 T CBaseCombatCharacter::FindEntityRelationship(CBaseEntity*)
 T CBaseCombatCharacter::FindMissTarget()
 T CBaseCombatCharacter::FixupBurningServerRagdoll(CBaseEntity*)
 T CBaseCombatCharacter::GetActiveWeapon() const
 T CBaseCombatCharacter::GetAliveDuration() const
 T CBaseCombatCharacter::GetAmmoCount(int) const
 T CBaseCombatCharacter::GetAttackSpread(CBaseCombatWeapon*, CBaseEntity*)
 T CBaseCombatCharacter::GetClass() const
 T CBaseCombatCharacter::GetDataDescMap()
 T CBaseCombatCharacter::GetDeathActivity()
 T CBaseCombatCharacter::GetFogObscuredRatio(CBaseEntity*) const
 T CBaseCombatCharacter::GetFogObscuredRatio(Vector const&) const
 T CBaseCombatCharacter::GetFogObscuredRatio(float) const
 T CBaseCombatCharacter::GetFogParams(fogparams_t*) const
 T CBaseCombatCharacter::GetFogTrigger()
 T CBaseCombatCharacter::GetFootstepRunThreshold() const
 T CBaseCombatCharacter::GetFootstepSound(char const*, bool, float, bool) const
 T CBaseCombatCharacter::GetGroundSurface() const
 T CBaseCombatCharacter::GetLastKnownArea() const
 T CBaseCombatCharacter::GetPhysicsImpactDamageTable()
 T CBaseCombatCharacter::GetServerClass()
 T CBaseCombatCharacter::GetSpreadBias(CBaseCombatWeapon*, CBaseEntity*)
 T CBaseCombatCharacter::GetTimeSinceLastInjury(int) const
 T CBaseCombatCharacter::GetVehicle()
 T CBaseCombatCharacter::GetVehicleEntity()
 T CBaseCombatCharacter::GiveAmmo(int, char const*, bool)
 T CBaseCombatCharacter::GiveAmmo(int, int, bool)
 T CBaseCombatCharacter::HandleInteraction(int, void*, CBaseCombatCharacter*)
 T CBaseCombatCharacter::HasAlienGibs()
 T CBaseCombatCharacter::HasEverBeenInjured(int) const
 T CBaseCombatCharacter::HasHumanGibs()
 T CBaseCombatCharacter::HeadDirection2D()
 T CBaseCombatCharacter::HeadDirection3D()
 T CBaseCombatCharacter::IRelationPriority(CBaseEntity*)
 T CBaseCombatCharacter::IRelationType(CBaseEntity*)
 T CBaseCombatCharacter::InitInteractionSystem()
 T CBaseCombatCharacter::InputKilledNPC(inputdata_t&)
 T CBaseCombatCharacter::IsAbleToSee(CBaseCombatCharacter*, CBaseCombatCharacter::FieldOfViewCheckType)
 T CBaseCombatCharacter::IsAbleToSee(CBaseEntity const*, CBaseCombatCharacter::FieldOfViewCheckType)
 T CBaseCombatCharacter::IsAreaTraversable(CNavArea const*) const
 T CBaseCombatCharacter::IsFootstepAudible(float, bool) const
 T CBaseCombatCharacter::IsGhost() const
 T CBaseCombatCharacter::IsHiddenByFog(CBaseEntity*) const
 T CBaseCombatCharacter::IsHiddenByFog(Vector const&) const
 T CBaseCombatCharacter::IsHiddenByFog(float) const
 T CBaseCombatCharacter::IsInAVehicle() const
 T CBaseCombatCharacter::IsInFieldOfView(CBaseEntity*) const
 T CBaseCombatCharacter::IsInFieldOfView(Vector const&) const
 T CBaseCombatCharacter::IsLineOfSightClear(CBaseEntity*, CBaseCombatCharacter::LineOfSightCheckType) const
 T CBaseCombatCharacter::IsLineOfSightClear(Vector const&, CBaseCombatCharacter::LineOfSightCheckType, CBaseEntity*) const
 T CBaseCombatCharacter::IsLookingTowards(CBaseEntity const*, float) const
 T CBaseCombatCharacter::IsLookingTowards(Vector const&, float) const
 T CBaseCombatCharacter::MyCombatCharacterPointer()
 T CBaseCombatCharacter::NPC_TranslateActivity(Activity)
 T CBaseCombatCharacter::NetworkStateChanged_m_iAmmo()
 T CBaseCombatCharacter::NetworkStateChanged_m_iAmmo(void*)
 T CBaseCombatCharacter::NotifyFriendsOfDamage(CBaseEntity*)
 T CBaseCombatCharacter::OnChangeActiveWeapon(CBaseCombatWeapon*, CBaseCombatWeapon*)
 T CBaseCombatCharacter::OnFogTriggerEndTouch(CBaseEntity*)
 T CBaseCombatCharacter::OnFogTriggerStartTouch(CBaseEntity*)
 T CBaseCombatCharacter::OnFootstep(Vector const&, bool, bool, bool, bool)
 T CBaseCombatCharacter::OnFriendDamaged(CBaseCombatCharacter*, CBaseEntity*)
 T CBaseCombatCharacter::OnKilledNPC(CBaseCombatCharacter*)
 T CBaseCombatCharacter::OnNavAreaChanged(CNavArea*, CNavArea*)
 T CBaseCombatCharacter::OnNavAreaRemoved(CNavArea*)
 T CBaseCombatCharacter::OnPlayerKilledOther(CBaseEntity*, CTakeDamageInfo const&)
 T CBaseCombatCharacter::OnPursuedBy(INextBot*)
 T CBaseCombatCharacter::OnTakeDamage(CTakeDamageInfo const&)
 T CBaseCombatCharacter::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CBaseCombatCharacter::OnTakeDamage_Dead(CTakeDamageInfo const&)
 T CBaseCombatCharacter::OnTakeDamage_Dying(CTakeDamageInfo const&)
 T CBaseCombatCharacter::PlayFootstepSound(Vector const&, bool, bool, bool, bool)
 T CBaseCombatCharacter::Precache()
 T CBaseCombatCharacter::PushawayTouch(CBaseEntity*)
 T CBaseCombatCharacter::RemoveAllAmmo()
 T CBaseCombatCharacter::RemoveAllWeapons()
 T CBaseCombatCharacter::RemoveAmmo(int, int)
 T CBaseCombatCharacter::RemoveEntityRelationship(CBaseEntity*)
 T CBaseCombatCharacter::RemovePlayerItem(CBaseCombatWeapon*)
 T CBaseCombatCharacter::ResetVisibilityCache(CBaseCombatCharacter*)
 T CBaseCombatCharacter::Restore(IRestore&)
 T CBaseCombatCharacter::SetActiveWeapon(CBaseCombatWeapon*)
 T CBaseCombatCharacter::SetAmmoCount(int, int)
 T CBaseCombatCharacter::SetBloodColor(int)
 T CBaseCombatCharacter::SetDefaultRelationship(Class_T, Class_T, Disposition_t, int)
 T CBaseCombatCharacter::SetTransmit(CCheckTransmitInfo*, bool)
 T CBaseCombatCharacter::ShouldGib(CTakeDamageInfo const&)
 T CBaseCombatCharacter::ShouldShootMissTarget(CBaseCombatCharacter*)
 T CBaseCombatCharacter::Spawn()
 T CBaseCombatCharacter::SwitchToNextBestWeapon(CBaseCombatWeapon*)
 T CBaseCombatCharacter::TakeHealth(float, int)
 T CBaseCombatCharacter::UpdateLastKnownArea()
 T CBaseCombatCharacter::UpdateOnRemove()
 T CBaseCombatCharacter::VPhysicsShadowCollision(int, gamevcollisionevent_t*)
 T CBaseCombatCharacter::VPhysicsUpdate(IPhysicsObject*)
 T CBaseCombatCharacter::Weapon_CanSwitchTo(CBaseCombatWeapon*)
 T CBaseCombatCharacter::Weapon_CanUse(CBaseCombatWeapon*)
 T CBaseCombatCharacter::Weapon_Create(char const*)
 T CBaseCombatCharacter::Weapon_Detach(CBaseCombatWeapon*)
 T CBaseCombatCharacter::Weapon_Drop(CBaseCombatWeapon*, Vector const*, Vector const*)
 T CBaseCombatCharacter::Weapon_Equip(CBaseCombatWeapon*)
 T CBaseCombatCharacter::Weapon_EquipAmmoOnly(CBaseCombatWeapon*)
 T CBaseCombatCharacter::Weapon_FrameUpdate()
 T CBaseCombatCharacter::Weapon_GetSlot(int) const
 T CBaseCombatCharacter::Weapon_HandleAnimEvent(animevent_t*)
 T CBaseCombatCharacter::Weapon_OwnsThisType(char const*, int) const
 T CBaseCombatCharacter::Weapon_ShootPosition()
 T CBaseCombatCharacter::Weapon_SlotOccupied(CBaseCombatWeapon*)
 T CBaseCombatCharacter::Weapon_Switch(CBaseCombatWeapon*, int)
 T CBaseCombatCharacter::Weapon_TranslateActivity(Activity, bool*)
 T CBaseCombatCharacter::YouForgotToImplementOrDeclareServerClass()
 T CBaseCombatCharacter::~CBaseCombatCharacter()
 T CBaseCombatWeapon::AbortReload()
 T CBaseCombatWeapon::Activate()
 T CBaseCombatWeapon::ActivityList()
 T CBaseCombatWeapon::ActivityListCount()
 T CBaseCombatWeapon::ActivityOverride(Activity, bool*)
 T CBaseCombatWeapon::AddViewKick()
 T CBaseCombatWeapon::AddViewmodelBob(CBaseViewModel*, Vector&, QAngle&)
 T CBaseCombatWeapon::AllowsAutoSwitchFrom() const
 T CBaseCombatWeapon::AllowsAutoSwitchTo() const
 T CBaseCombatWeapon::AttemptToMaterialize()
 T CBaseCombatWeapon::CBaseCombatWeapon()
 T CBaseCombatWeapon::CalcViewmodelBob()
 T CBaseCombatWeapon::CanBePickedUpByNPCs()
 T CBaseCombatWeapon::CanBeSelected()
 T CBaseCombatWeapon::CanDeploy()
 T CBaseCombatWeapon::CanHolster()
 T CBaseCombatWeapon::CanLower()
 T CBaseCombatWeapon::CapabilitiesGet()
 T CBaseCombatWeapon::CheckReload()
 T CBaseCombatWeapon::CheckRespawn()
 T CBaseCombatWeapon::DefaultDeploy(char*, char*, int, char*)
 T CBaseCombatWeapon::DefaultReload(int, int, int)
 T CBaseCombatWeapon::DefaultTouch(CBaseEntity*)
 T CBaseCombatWeapon::Delete()
 T CBaseCombatWeapon::Deploy()
 T CBaseCombatWeapon::DestroyItem()
 T CBaseCombatWeapon::DisplayAltFireHudHint()
 T CBaseCombatWeapon::DisplayReloadHudHint()
 T CBaseCombatWeapon::Drop(Vector const&)
 T CBaseCombatWeapon::Equip(CBaseCombatCharacter*)
 T CBaseCombatWeapon::FallInit()
 T CBaseCombatWeapon::FallThink()
 T CBaseCombatWeapon::FinishReload()
 T CBaseCombatWeapon::GetAnimPrefix() const
 T CBaseCombatWeapon::GetAvailableWeaponsInBox(CBaseCombatWeapon**, int, Vector const&, Vector const&)
 T CBaseCombatWeapon::GetBulletSpread()
 T CBaseCombatWeapon::GetBulletSpread(WeaponProficiency_t)
 T CBaseCombatWeapon::GetBulletType()
 T CBaseCombatWeapon::GetControlPanelClassName(int, char const*&)
 T CBaseCombatWeapon::GetControlPanelInfo(int, char const*&)
 T CBaseCombatWeapon::GetDamage(float, int)
 T CBaseCombatWeapon::GetDataDescMap()
 T CBaseCombatWeapon::GetDeathNoticeName()
 T CBaseCombatWeapon::GetDefaultAnimSpeed()
 T CBaseCombatWeapon::GetDefaultClip1() const
 T CBaseCombatWeapon::GetDefaultClip2() const
 T CBaseCombatWeapon::GetDeployDurationModifier()
 T CBaseCombatWeapon::GetDrawActivity()
 T CBaseCombatWeapon::GetDroppingPlayer() const
 T CBaseCombatWeapon::GetEncryptionKey()
 T CBaseCombatWeapon::GetFireRate()
 T CBaseCombatWeapon::GetLastWeapon()
 T CBaseCombatWeapon::GetMaxAutoAimDeflection()
 T CBaseCombatWeapon::GetMaxBurst()
 T CBaseCombatWeapon::GetMaxClip1() const
 T CBaseCombatWeapon::GetMaxClip2() const
 T CBaseCombatWeapon::GetMaxRestTime()
 T CBaseCombatWeapon::GetMinBurst()
 T CBaseCombatWeapon::GetMinRestTime()
 T CBaseCombatWeapon::GetName() const
 T CBaseCombatWeapon::GetOwner() const
 T CBaseCombatWeapon::GetPosition() const
 T CBaseCombatWeapon::GetPrimaryAmmoType() const
 T CBaseCombatWeapon::GetPrimaryAttackActivity()
 T CBaseCombatWeapon::GetPrintName() const
 T CBaseCombatWeapon::GetProficiencyValues()
 T CBaseCombatWeapon::GetRandomBurst()
 T CBaseCombatWeapon::GetReloadDurationModifier()
 T CBaseCombatWeapon::GetRumbleEffect() const
 T CBaseCombatWeapon::GetSecondaryAmmoType() const
 T CBaseCombatWeapon::GetSecondaryAttackActivity()
 T CBaseCombatWeapon::GetServerClass()
 T CBaseCombatWeapon::GetShootSound(int) const
 T CBaseCombatWeapon::GetSlot() const
 T CBaseCombatWeapon::GetSpreadBias(WeaponProficiency_t)
 T CBaseCombatWeapon::GetSpriteActive() const
 T CBaseCombatWeapon::GetSpriteAmmo() const
 T CBaseCombatWeapon::GetSpriteAmmo2() const
 T CBaseCombatWeapon::GetSpriteAutoaim() const
 T CBaseCombatWeapon::GetSpriteCrosshair() const
 T CBaseCombatWeapon::GetSpriteDualActive() const
 T CBaseCombatWeapon::GetSpriteDualInactive() const
 T CBaseCombatWeapon::GetSpriteInactive() const
 T CBaseCombatWeapon::GetSpriteZoomedAutoaim() const
 T CBaseCombatWeapon::GetSpriteZoomedCrosshair() const
 T CBaseCombatWeapon::GetSubType()
 T CBaseCombatWeapon::GetTerrorGun()
 T CBaseCombatWeapon::GetTracerAttachmentIndex()
 T CBaseCombatWeapon::GetViewModel(int) const
 T CBaseCombatWeapon::GetWeaponFlags() const
 T CBaseCombatWeapon::GetWeaponIdleTime()
 T CBaseCombatWeapon::GetWeight() const
 T CBaseCombatWeapon::GetWorldModel() const
 T CBaseCombatWeapon::GetWpnData() const
 T CBaseCombatWeapon::GiveDefaultAmmo()
 T CBaseCombatWeapon::HandleAnimEvent(animevent_t*)
 T CBaseCombatWeapon::HandleFireOnEmpty()
 T CBaseCombatWeapon::HasAmmo()
 T CBaseCombatWeapon::HasAnyAmmo()
 T CBaseCombatWeapon::HasPrimaryAmmo()
 T CBaseCombatWeapon::HasSecondaryAmmo()
 T CBaseCombatWeapon::HasWeaponIdleTimeElapsed()
 T CBaseCombatWeapon::HideThink()
 T CBaseCombatWeapon::Holster(CBaseCombatWeapon*)
 T CBaseCombatWeapon::InputHideWeapon(inputdata_t&)
 T CBaseCombatWeapon::IsAllowedToSwitch()
 T CBaseCombatWeapon::IsBaseCombatWeapon() const
 T CBaseCombatWeapon::IsGrenade() const
 T CBaseCombatWeapon::IsPredicted() const
 T CBaseCombatWeapon::IsWeaponVisible()
 T CBaseCombatWeapon::IsWeaponZoomed()
 T CBaseCombatWeapon::ItemBusyFrame()
 T CBaseCombatWeapon::ItemHolsterFrame()
 T CBaseCombatWeapon::ItemPostFrame()
 T CBaseCombatWeapon::ItemPreFrame()
 T CBaseCombatWeapon::Kill()
 T CBaseCombatWeapon::Lower()
 T CBaseCombatWeapon::MaintainIdealActivity()
 T CBaseCombatWeapon::MakeTracer(Vector const&, CGameTrace const&, int)
 T CBaseCombatWeapon::Materialize()
 T CBaseCombatWeapon::MyCombatWeaponPointer()
 T CBaseCombatWeapon::NetworkStateChanged_m_nNextThinkTick()
 T CBaseCombatWeapon::NetworkStateChanged_m_nNextThinkTick(void*)
 T CBaseCombatWeapon::ObjectCaps()
 T CBaseCombatWeapon::OnPickedUp(CBaseCombatCharacter*)
 T CBaseCombatWeapon::Operator_ForceNPCFire(CBaseCombatCharacter*, bool)
 T CBaseCombatWeapon::Operator_FrameUpdate(CBaseCombatCharacter*)
 T CBaseCombatWeapon::Operator_HandleAnimEvent(animevent_t*, CBaseCombatCharacter*)
 T CBaseCombatWeapon::Precache()
 T CBaseCombatWeapon::PrimaryAttack()
 T CBaseCombatWeapon::QueueAttack(int)
 T CBaseCombatWeapon::Ready()
 T CBaseCombatWeapon::Reload()
 T CBaseCombatWeapon::ReloadOrSwitchWeapons()
 T CBaseCombatWeapon::RescindAltFireHudHint()
 T CBaseCombatWeapon::RescindReloadHudHint()
 T CBaseCombatWeapon::Respawn()
 T CBaseCombatWeapon::SecondaryAttack()
 T CBaseCombatWeapon::SendViewModelAnim(int)
 T CBaseCombatWeapon::SendWeaponAnim(int)
 T CBaseCombatWeapon::SetActivity(Activity, float)
 T CBaseCombatWeapon::SetIdealActivity(Activity)
 T CBaseCombatWeapon::SetOwner(CBaseCombatCharacter*)
 T CBaseCombatWeapon::SetPickupTouch()
 T CBaseCombatWeapon::SetSubType(int)
 T CBaseCombatWeapon::SetViewModel()
 T CBaseCombatWeapon::SetViewModelIndex(int)
 T CBaseCombatWeapon::SetWeaponIdleTime(float)
 T CBaseCombatWeapon::SetWeaponVisible(bool)
 T CBaseCombatWeapon::ShootPosition()
 T CBaseCombatWeapon::ShouldDisplayAltFireHUDHint()
 T CBaseCombatWeapon::ShouldDisplayReloadHUDHint()
 T CBaseCombatWeapon::ShouldShowControlPanels()
 T CBaseCombatWeapon::Spawn()
 T CBaseCombatWeapon::StartSprinting()
 T CBaseCombatWeapon::StopSprinting()
 T CBaseCombatWeapon::StopWeaponSound(WeaponSound_t)
 T CBaseCombatWeapon::UpdateClientData(CBasePlayer*)
 T CBaseCombatWeapon::UpdateTransmitState()
 T CBaseCombatWeapon::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CBaseCombatWeapon::UsesClipsForAmmo1() const
 T CBaseCombatWeapon::UsesClipsForAmmo2() const
 T CBaseCombatWeapon::UsesPrimaryAmmo()
 T CBaseCombatWeapon::UsesSecondaryAmmo()
 T CBaseCombatWeapon::VisibleInWeaponSelection()
 T CBaseCombatWeapon::WeaponAutoAimScale()
 T CBaseCombatWeapon::WeaponIdle()
 T CBaseCombatWeapon::WeaponLOSCondition(Vector const&, Vector const&, bool)
 T CBaseCombatWeapon::WeaponMeleeAttack1Condition(float, float)
 T CBaseCombatWeapon::WeaponMeleeAttack2Condition(float, float)
 T CBaseCombatWeapon::WeaponRangeAttack1Condition(float, float)
 T CBaseCombatWeapon::WeaponRangeAttack2Condition(float, float)
 T CBaseCombatWeapon::WeaponSound(WeaponSound_t, float)
 T CBaseCombatWeapon::YouForgotToImplementOrDeclareServerClass()
 T CBaseCombatWeapon::~CBaseCombatWeapon()
 T CBaseDMStart::GetDataDescMap()
 T CBaseDMStart::IsTriggered(CBaseEntity*)
 T CBaseDMStart::~CBaseDMStart()
 T CBaseDoor::Activate()
 T CBaseDoor::BlockNavArea(bool)
 T CBaseDoor::Blocked(CBaseEntity*)
 T CBaseDoor::CBaseDoor()
 T CBaseDoor::CanPushEntity(CBaseEntity*) const
 T CBaseDoor::ChainTouch(CBaseEntity*)
 T CBaseDoor::ChainUse()
 T CBaseDoor::CloseAreaPortalsThink()
 T CBaseDoor::CreateVPhysics()
 T CBaseDoor::DoorActivate()
 T CBaseDoor::DoorGoDown()
 T CBaseDoor::DoorGoUp()
 T CBaseDoor::DoorHitBottom()
 T CBaseDoor::DoorHitTop()
 T CBaseDoor::DoorTouch(CBaseEntity*)
 T CBaseDoor::EndBlocked()
 T CBaseDoor::FireGameEvent(IGameEvent*)
 T CBaseDoor::GetDataDescMap()
 T CBaseDoor::GetServerClass()
 T CBaseDoor::InputClose(inputdata_t&)
 T CBaseDoor::InputLock(inputdata_t&)
 T CBaseDoor::InputOpen(inputdata_t&)
 T CBaseDoor::InputSetSpeed(inputdata_t&)
 T CBaseDoor::InputSetToggleState(inputdata_t&)
 T CBaseDoor::InputToggle(inputdata_t&)
 T CBaseDoor::InputUnlock(inputdata_t&)
 T CBaseDoor::IsRotatingDoor()
 T CBaseDoor::KeyValue(char const*, char const*)
 T CBaseDoor::MovingSoundThink()
 T CBaseDoor::ObjectCaps()
 T CBaseDoor::PhysicsSolidMaskForEntity() const
 T CBaseDoor::Precache()
 T CBaseDoor::SetToggleState(int)
 T CBaseDoor::ShouldSavePhysics()
 T CBaseDoor::Spawn()
 T CBaseDoor::StartBlocked(CBaseEntity*)
 T CBaseDoor::StartMovingSound()
 T CBaseDoor::StopMovingSound()
 T CBaseDoor::UpdateAreaPortals(bool)
 T CBaseDoor::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CBaseDoor::YouForgotToImplementOrDeclareServerClass()
 T CBaseDoor::~CBaseDoor()
 T CBaseEdict::GetChangeAccessor()
 T CBaseEdict::StateChanged(unsigned short)
 T CBaseEntity::AcceptInput(char const*, CBaseEntity*, CBaseEntity*, variant_t, int)
 T CBaseEntity::Activate()
 T CBaseEntity::AddContext(char const*)
 T CBaseEntity::AddEffects(int)
 T CBaseEntity::AddEntityToGroundList(CBaseEntity*)
 T CBaseEntity::AddFlag(int)
 T CBaseEntity::AddPoints(int, bool)
 T CBaseEntity::AddPointsToTeam(int, bool)
 T CBaseEntity::AddSpawnFlags(int)
 T CBaseEntity::AddTimedOverlay(char const*, int)
 T CBaseEntity::AppendContextToCriteria(AI_CriteriaSet&, char const*)
 T CBaseEntity::ApplyAbsVelocityImpulse(Vector const&)
 T CBaseEntity::ApplyLocalAngularVelocityImpulse(Vector const&)
 T CBaseEntity::Blocked(CBaseEntity*)
 T CBaseEntity::BlocksLOS()
 T CBaseEntity::BloodColor()
 T CBaseEntity::BodyTarget(Vector const&, bool)
 T CBaseEntity::CBaseEntity(bool)
 T CBaseEntity::CalcAbsolutePosition()
 T CBaseEntity::CalcAbsoluteVelocity()
 T CBaseEntity::CanBeHitByMeleeAttack(CBaseEntity*)
 T CBaseEntity::CanBeSeenBy(CAI_BaseNPC*)
 T CBaseEntity::CanPushEntity(CBaseEntity*) const
 T CBaseEntity::CanStandOn(CBaseEntity*) const
 T CBaseEntity::CanStandOn(edict_t*) const
 T CBaseEntity::ChangeTeam(int)
 T CBaseEntity::CheckHasGamePhysicsSimulation()
 T CBaseEntity::CheckHasThinkFunction(bool)
 T CBaseEntity::CheckStepSimulationChanged()
 T CBaseEntity::ClassMatchesComplex(char const*)
 T CBaseEntity::Classify()
 T CBaseEntity::ClearAllContexts()
 T CBaseEntity::ClearFlags()
 T CBaseEntity::ClearSpawnFlags()
 T CBaseEntity::CollisionRulesChanged()
 T CBaseEntity::ComputeAbsPosition(Vector const&, Vector*)
 T CBaseEntity::ComputeStepSimulationNetwork(StepSimulationData*)
 T CBaseEntity::ComputeTracerStartPosition(Vector const&, Vector*)
 T CBaseEntity::ComputeWorldSpaceSurroundingBox(Vector*, Vector*)
 T CBaseEntity::Create(char const*, Vector const&, QAngle const&, CBaseEntity*)
 T CBaseEntity::CreateDataObject(int)
 T CBaseEntity::CreateNoSpawn(char const*, Vector const&, QAngle const&, CBaseEntity*)
 T CBaseEntity::CreateVPhysics()
 T CBaseEntity::DamageDecal(int, int)
 T CBaseEntity::DeathNotice(CBaseEntity*)
 T CBaseEntity::DecalTrace(CGameTrace*, char const*)
 T CBaseEntity::DestroyAllDataObjects()
 T CBaseEntity::DestroyDataObject(int)
 T CBaseEntity::DetectInSkybox()
 T CBaseEntity::DispatchResponse(char const*)
 T CBaseEntity::DispatchTraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*)
 T CBaseEntity::DispatchUpdateTransmitState()
 T CBaseEntity::DoImpactEffect(CGameTrace&, int)
 T CBaseEntity::DrawAbsBoxOverlay()
 T CBaseEntity::DrawBBoxOverlay(float)
 T CBaseEntity::DrawDebugGeometryOverlays()
 T CBaseEntity::DrawDebugTextOverlays()
 T CBaseEntity::DrawInputOverlay(char const*, CBaseEntity*, variant_t)
 T CBaseEntity::DrawOutputOverlay(CEventAction*)
 T CBaseEntity::DrawTimedOverlays()
 T CBaseEntity::DrawVPhysicsObjectCenterAndContactPoints(IPhysicsObject*)
 T CBaseEntity::DumpResponseCriteria()
 T CBaseEntity::EarPosition()
 T CBaseEntity::EmitCloseCaption(IRecipientFilter&, int, char const*, CUtlVector<Vector, CUtlMemory<Vector, int> >&, float, bool)
 T CBaseEntity::EmitSentenceByIndex(IRecipientFilter&, int, int, int, float, soundlevel_t, int, int, Vector const*, Vector const*, bool, float)
 T CBaseEntity::EmitSound(IRecipientFilter&, int, EmitSound_t const&)
 T CBaseEntity::EmitSound(IRecipientFilter&, int, EmitSound_t const&, short&)
 T CBaseEntity::EmitSound(IRecipientFilter&, int, char const*, Vector const*, float, float*)
 T CBaseEntity::EmitSound(char const*, float, float*)
 T CBaseEntity::EmitSound(char const*, short&, float, float*)
 T CBaseEntity::EndBlocked()
 T CBaseEntity::EndTouch(CBaseEntity*)
 T CBaseEntity::EntityText(int, char const*, float, int, int, int, int)
 T CBaseEntity::Event_Killed(CTakeDamageInfo const&)
 T CBaseEntity::Event_KilledOther(CBaseEntity*, CTakeDamageInfo const&)
 T CBaseEntity::EyeAngles()
 T CBaseEntity::EyePosition()
 T CBaseEntity::FVisible(CBaseEntity*, int, CBaseEntity**)
 T CBaseEntity::FVisible(Vector const&, int, CBaseEntity**)
 T CBaseEntity::FindContextByName(char const*) const
 T CBaseEntity::FireBullets(FireBulletsInfo_t const&)
 T CBaseEntity::FollowEntity(CBaseEntity*, bool)
 T CBaseEntity::ForceVPhysicsCollide(CBaseEntity*)
 T CBaseEntity::FrictionRevertThink()
 T CBaseEntity::GenderExpandString(char const*, char*, int)
 T CBaseEntity::GetAttackDamageScale(CBaseEntity*)
 T CBaseEntity::GetAutoAimCenter()
 T CBaseEntity::GetAutoAimRadius()
 T CBaseEntity::GetBaseAnimating()
 T CBaseEntity::GetBaseEntity()
 T CBaseEntity::GetBeamTraceFilter()
 T CBaseEntity::GetCollideable()
 T CBaseEntity::GetContextValue(int) const
 T CBaseEntity::GetDamage()
 T CBaseEntity::GetDamageType() const
 T CBaseEntity::GetDataDescMap()
 T CBaseEntity::GetDataObject(int)
 T CBaseEntity::GetDebugName()
 T CBaseEntity::GetDelay()
 T CBaseEntity::GetEnemy()
 T CBaseEntity::GetEnemy() const
 T CBaseEntity::GetEntitySkybox()
 T CBaseEntity::GetFirstThinkTick()
 T CBaseEntity::GetFollowedEntity()
 T CBaseEntity::GetFriction() const
 T CBaseEntity::GetGlobalFadeScale() const
 T CBaseEntity::GetGlowEntity()
 T CBaseEntity::GetGroundEntity()
 T CBaseEntity::GetGroundVelocityToApply(Vector&)
 T CBaseEntity::GetIndexForThinkContext(char const*)
 T CBaseEntity::GetKeyValue(char const*, char*, int)
 T CBaseEntity::GetLastThink(char const*)
 T CBaseEntity::GetModel()
 T CBaseEntity::GetModelIndex() const
 T CBaseEntity::GetModelName() const
 T CBaseEntity::GetNetworkable()
 T CBaseEntity::GetNextTarget()
 T CBaseEntity::GetNextThink(char const*)
 T CBaseEntity::GetNextThinkTick(char const*)
 T CBaseEntity::GetNextThinkTick(int) const
 T CBaseEntity::GetParametersForSound(char const*, CSoundParameters&, char const*)
 T CBaseEntity::GetParametersForSound(char const*, short&, CSoundParameters&, char const*)
 T CBaseEntity::GetParentToWorldTransform(matrix3x4_t&)
 T CBaseEntity::GetReceivedDamageScale(CBaseEntity*)
 T CBaseEntity::GetRefEHandle() const
 T CBaseEntity::GetResponseSystem()
 T CBaseEntity::GetRootMoveParent()
 T CBaseEntity::GetServerClass()
 T CBaseEntity::GetServerVehicle()
 T CBaseEntity::GetSmoothedVelocity()
 T CBaseEntity::GetSoundDuration(char const*, char const*)
 T CBaseEntity::GetSoundEmissionOrigin() const
 T CBaseEntity::GetStepAngles() const
 T CBaseEntity::GetStepOrigin() const
 T CBaseEntity::GetTeam() const
 T CBaseEntity::GetTeamNumber() const
 T CBaseEntity::GetTouchTrace()
 T CBaseEntity::GetTracerAttachment()
 T CBaseEntity::GetTracerType()
 T CBaseEntity::GetUsePriority(CBaseEntity*)
 T CBaseEntity::GetUseType(CBaseEntity*)
 T CBaseEntity::GetVectors(Vector*, Vector*, Vector*) const
 T CBaseEntity::GetVelocity(Vector*, Vector*)
 T CBaseEntity::GetViewOffset() const
 T CBaseEntity::GetWaterType() const
 T CBaseEntity::HandleShotImpactingGlass(FireBulletsInfo_t const&, CGameTrace const&, Vector const&, ITraceFilter*)
 T CBaseEntity::HandleShotImpactingWater(FireBulletsInfo_t const&, Vector const&, ITraceFilter*, Vector*)
 T CBaseEntity::HasDataObjectType(int) const
 T CBaseEntity::HasPhysicsAttacker(float)
 T CBaseEntity::HasTarget(string_t)
 T CBaseEntity::HeadTarget(Vector const&)
 T CBaseEntity::ImpactTrace(CGameTrace*, int, char*)
 T CBaseEntity::InSameTeam(CBaseEntity*) const
 T CBaseEntity::InputAddContext(inputdata_t&)
 T CBaseEntity::InputAddOutput(inputdata_t&)
 T CBaseEntity::InputAlpha(inputdata_t&)
 T CBaseEntity::InputAlternativeSorting(inputdata_t&)
 T CBaseEntity::InputClearContext(inputdata_t&)
 T CBaseEntity::InputClearParent(inputdata_t&)
 T CBaseEntity::InputColor(inputdata_t&)
 T CBaseEntity::InputDisableDamageForces(inputdata_t&)
 T CBaseEntity::InputDisableShadow(inputdata_t&)
 T CBaseEntity::InputDispatchResponse(inputdata_t&)
 T CBaseEntity::InputEnableDamageForces(inputdata_t&)
 T CBaseEntity::InputEnableShadow(inputdata_t&)
 T CBaseEntity::InputFireUser1(inputdata_t&)
 T CBaseEntity::InputFireUser2(inputdata_t&)
 T CBaseEntity::InputFireUser3(inputdata_t&)
 T CBaseEntity::InputFireUser4(inputdata_t&)
 T CBaseEntity::InputKill(inputdata_t&)
 T CBaseEntity::InputKillHierarchy(inputdata_t&)
 T CBaseEntity::InputRemoveContext(inputdata_t&)
 T CBaseEntity::InputSetDamageFilter(inputdata_t&)
 T CBaseEntity::InputSetParent(inputdata_t&)
 T CBaseEntity::InputSetParentAttachment(inputdata_t&)
 T CBaseEntity::InputSetParentAttachmentMaintainOffset(inputdata_t&)
 T CBaseEntity::InputSetTeam(inputdata_t&)
 T CBaseEntity::InputUse(inputdata_t&)
 T CBaseEntity::Instance(CBaseHandle const&)
 T CBaseEntity::Intersects(CBaseEntity*)
 T CBaseEntity::InvalidatePhysicsRecursive(int)
 T CBaseEntity::IsAIWalkable()
 T CBaseEntity::IsAlive() const
 T CBaseEntity::IsBSPModel() const
 T CBaseEntity::IsBaseCombatWeapon() const
 T CBaseEntity::IsBaseObject() const
 T CBaseEntity::IsCurrentlyTouching() const
 T CBaseEntity::IsDormant()
 T CBaseEntity::IsFloating()
 T CBaseEntity::IsFollowingEntity()
 T CBaseEntity::IsInWorld() const
 T CBaseEntity::IsLockedByMaster()
 T CBaseEntity::IsMoving()
 T CBaseEntity::IsNPC() const
 T CBaseEntity::IsNetClient() const
 T CBaseEntity::IsPlayer() const
 T CBaseEntity::IsPrecacheAllowed()
 T CBaseEntity::IsSimulatingOnAlternateTicks()
 T CBaseEntity::IsStandable() const
 T CBaseEntity::IsTemplate()
 T CBaseEntity::IsTriggered(CBaseEntity*)
 T CBaseEntity::IsViewable()
 T CBaseEntity::KeyValue(char const*, Vector const&)
 T CBaseEntity::KeyValue(char const*, char const*)
 T CBaseEntity::KeyValue(char const*, float)
 T CBaseEntity::LocalEyeAngles()
 T CBaseEntity::MakeDormant()
 T CBaseEntity::MakeTracer(Vector const&, CGameTrace const&, int)
 T CBaseEntity::ModifyOrAppendCriteria(AI_CriteriaSet&)
 T CBaseEntity::ModifyOrAppendDerivedCriteria(AI_CriteriaSet&)
 T CBaseEntity::MoveDone()
 T CBaseEntity::MyCombatCharacterPointer()
 T CBaseEntity::MyCombatWeaponPointer()
 T CBaseEntity::MyInfectedPointer()
 T CBaseEntity::MyNPCPointer()
 T CBaseEntity::MyNextBotPointer()
 T CBaseEntity::NameMatchesComplex(char const*)
 T CBaseEntity::NetworkQuantize(Vector&, QAngle&)
 T CBaseEntity::NetworkStateChanged(void*)
 T CBaseEntity::NetworkStateChanged_m_bClientSideRagdoll()
 T CBaseEntity::NetworkStateChanged_m_bClientSideRagdoll(void*)
 T CBaseEntity::NetworkStateChanged_m_fFlags()
 T CBaseEntity::NetworkStateChanged_m_fFlags(void*)
 T CBaseEntity::NetworkStateChanged_m_flFriction()
 T CBaseEntity::NetworkStateChanged_m_flFriction(void*)
 T CBaseEntity::NetworkStateChanged_m_hGroundEntity()
 T CBaseEntity::NetworkStateChanged_m_hGroundEntity(void*)
 T CBaseEntity::NetworkStateChanged_m_iHealth()
 T CBaseEntity::NetworkStateChanged_m_iHealth(void*)
 T CBaseEntity::NetworkStateChanged_m_iMaxHealth()
 T CBaseEntity::NetworkStateChanged_m_iMaxHealth(void*)
 T CBaseEntity::NetworkStateChanged_m_lifeState()
 T CBaseEntity::NetworkStateChanged_m_lifeState(void*)
 T CBaseEntity::NetworkStateChanged_m_nNextThinkTick()
 T CBaseEntity::NetworkStateChanged_m_nNextThinkTick(void*)
 T CBaseEntity::NetworkStateChanged_m_nWaterLevel()
 T CBaseEntity::NetworkStateChanged_m_nWaterLevel(void*)
 T CBaseEntity::NetworkStateChanged_m_takedamage()
 T CBaseEntity::NetworkStateChanged_m_takedamage(void*)
 T CBaseEntity::NetworkStateChanged_m_vecBaseVelocity()
 T CBaseEntity::NetworkStateChanged_m_vecBaseVelocity(void*)
 T CBaseEntity::NetworkStateChanged_m_vecVelocity()
 T CBaseEntity::NetworkStateChanged_m_vecVelocity(void*)
 T CBaseEntity::NetworkStateChanged_m_vecViewOffset()
 T CBaseEntity::NetworkStateChanged_m_vecViewOffset(void*)
 T CBaseEntity::NetworkVar_m_Collision::NetworkStateChanged()
 T CBaseEntity::NetworkVar_m_Collision::NetworkStateChanged(void*)
 T CBaseEntity::NotifySystemEvent(CBaseEntity*, notify_system_event_t, notify_system_event_params_t const&)
 T CBaseEntity::ObjectCaps()
 T CBaseEntity::OnControls(CBaseEntity*)
 T CBaseEntity::OnEntityEvent(EntityEvent_t, void*)
 T CBaseEntity::OnGroundChanged(CBaseEntity*, CBaseEntity*)
 T CBaseEntity::OnRestore()
 T CBaseEntity::OnSave(IEntitySaveUtils*)
 T CBaseEntity::OnTakeDamage(CTakeDamageInfo const&)
 T CBaseEntity::ParseMapData(CEntityMapData*)
 T CBaseEntity::PassesDamageFilter(CTakeDamageInfo const&)
 T CBaseEntity::PerformCustomPhysics(Vector*, Vector*, QAngle*, QAngle*)
 T CBaseEntity::PerformPush(float)
 T CBaseEntity::PhysicsAddGravityMove(Vector&)
 T CBaseEntity::PhysicsAddHalfGravity(float)
 T CBaseEntity::PhysicsCheckForEntityUntouch()
 T CBaseEntity::PhysicsCheckVelocity()
 T CBaseEntity::PhysicsCheckWater()
 T CBaseEntity::PhysicsCheckWaterTransition()
 T CBaseEntity::PhysicsClipVelocity(Vector const&, Vector const&, Vector&, float)
 T CBaseEntity::PhysicsCustom()
 T CBaseEntity::PhysicsDispatchThink(void (CBaseEntity::*)())
 T CBaseEntity::PhysicsImpact(CBaseEntity*, CGameTrace&)
 T CBaseEntity::PhysicsMarkEntitiesAsTouching(CBaseEntity*, CGameTrace&)
 T CBaseEntity::PhysicsMarkEntitiesAsTouchingEventDriven(CBaseEntity*, CGameTrace&)
 T CBaseEntity::PhysicsMarkEntityAsTouched(CBaseEntity*)
 T CBaseEntity::PhysicsNoclip()
 T CBaseEntity::PhysicsNone()
 T CBaseEntity::PhysicsNotifyOtherOfGroundRemoval(CBaseEntity*, CBaseEntity*)
 T CBaseEntity::PhysicsNotifyOtherOfUntouch(CBaseEntity*, CBaseEntity*)
 T CBaseEntity::PhysicsPushEntity(Vector const&, CGameTrace*)
 T CBaseEntity::PhysicsPushMove(float)
 T CBaseEntity::PhysicsPushRotate(float)
 T CBaseEntity::PhysicsPusher()
 T CBaseEntity::PhysicsRelinkChildren(float)
 T CBaseEntity::PhysicsRemoveGroundList(CBaseEntity*)
 T CBaseEntity::PhysicsRemoveTouchedList(CBaseEntity*)
 T CBaseEntity::PhysicsRemoveToucher(CBaseEntity*, touchlink_t*)
 T CBaseEntity::PhysicsRigidChild()
 T CBaseEntity::PhysicsRunSpecificThink(int, void (CBaseEntity::*)())
 T CBaseEntity::PhysicsRunThink(CBaseEntity::thinkmethods_t)
 T CBaseEntity::PhysicsSimulate()
 T CBaseEntity::PhysicsSolidMaskForEntity() const
 T CBaseEntity::PhysicsSplash(Vector const&, Vector const&, float, float)
 T CBaseEntity::PhysicsStep()
 T CBaseEntity::PhysicsStepRecheckGround()
 T CBaseEntity::PhysicsStepRunTimestep(float)
 T CBaseEntity::PhysicsToss()
 T CBaseEntity::PhysicsTouchTriggers(Vector const*)
 T CBaseEntity::PhysicsTryMove(float, CGameTrace*)
 T CBaseEntity::PostClientActive()
 T CBaseEntity::PostClientMessagesSent()
 T CBaseEntity::PostConstructor(char const*)
 T CBaseEntity::Precache()
 T CBaseEntity::PrecacheModel(char const*)
 T CBaseEntity::PrecacheModelComponents(int)
 T CBaseEntity::PrecacheScriptSound(char const*)
 T CBaseEntity::PrefetchScriptSound(char const*)
 T CBaseEntity::ReadKeyField(char const*, variant_t*)
 T CBaseEntity::RecalcHasPlayerChildBit()
 T CBaseEntity::RegisterThinkContext(char const*)
 T CBaseEntity::Remove()
 T CBaseEntity::RemoveAllDecals()
 T CBaseEntity::RemoveDeferred()
 T CBaseEntity::RemoveEffects(int)
 T CBaseEntity::RemoveFlag(int)
 T CBaseEntity::RemoveRecipientsIfNotCloseCaptioning(CRecipientFilter&)
 T CBaseEntity::RemoveSpawnFlags(int)
 T CBaseEntity::RequiredEdictIndex()
 T CBaseEntity::ResolveFlyCollisionBounce(CGameTrace&, Vector&, float)
 T CBaseEntity::ResolveFlyCollisionCustom(CGameTrace&, Vector&)
 T CBaseEntity::ResolveFlyCollisionSlide(CGameTrace&, Vector&)
 T CBaseEntity::Respawn()
 T CBaseEntity::Restore(IRestore&)
 T CBaseEntity::SUB_AllowedToFade()
 T CBaseEntity::SUB_CallUseToggle()
 T CBaseEntity::SUB_DoNothing()
 T CBaseEntity::SUB_FadeOut()
 T CBaseEntity::SUB_Remove()
 T CBaseEntity::SUB_StartFadeOut(float, bool)
 T CBaseEntity::SUB_StartFadeOutInstant()
 T CBaseEntity::SUB_Vanish()
 T CBaseEntity::Save(ISave&)
 T CBaseEntity::SendDebugPivotOverlay()
 T CBaseEntity::SendOnKilledGameEvent(CTakeDamageInfo const&)
 T CBaseEntity::SetAIWalkable(bool)
 T CBaseEntity::SetAbsAngles(QAngle const&)
 T CBaseEntity::SetAbsOrigin(Vector const&)
 T CBaseEntity::SetAbsVelocity(Vector const&)
 T CBaseEntity::SetAllowPrecache(bool)
 T CBaseEntity::SetBlocksLOS(bool)
 T CBaseEntity::SetCheckUntouch(bool)
 T CBaseEntity::SetClassname(char const*)
 T CBaseEntity::SetCollisionBounds(Vector const&, Vector const&)
 T CBaseEntity::SetCollisionGroup(int)
 T CBaseEntity::SetCreateTime(float)
 T CBaseEntity::SetDamage(float)
 T CBaseEntity::SetEffectEntity(CBaseEntity*)
 T CBaseEntity::SetEffects(int)
 T CBaseEntity::SetFadeDistance(float, float)
 T CBaseEntity::SetFriction(float)
 T CBaseEntity::SetGlobalFadeScale(float)
 T CBaseEntity::SetGroundChangeTime(float)
 T CBaseEntity::SetGroundEntity(CBaseEntity*)
 T CBaseEntity::SetLastThink(int, float)
 T CBaseEntity::SetLocalAngles(QAngle const&)
 T CBaseEntity::SetLocalAngularVelocity(QAngle const&)
 T CBaseEntity::SetLocalOrigin(Vector const&)
 T CBaseEntity::SetLocalVelocity(Vector const&)
 T CBaseEntity::SetModel(char const*)
 T CBaseEntity::SetModelIndex(int)
 T CBaseEntity::SetMoveCollide(MoveCollide_t)
 T CBaseEntity::SetMoveDoneTime(float)
 T CBaseEntity::SetMoveType(MoveType_t, MoveCollide_t)
 T CBaseEntity::SetNetworkQuantizeOriginAngAngles(bool)
 T CBaseEntity::SetNextThink(float, char const*)
 T CBaseEntity::SetNextThink(int, float)
 T CBaseEntity::SetOwnerEntity(CBaseEntity*)
 T CBaseEntity::SetParent(CBaseEntity*, int)
 T CBaseEntity::SetParent(string_t, CBaseEntity*, int)
 T CBaseEntity::SetParentAttachment(char const*, char const*, bool)
 T CBaseEntity::SetPredictionEligible(bool)
 T CBaseEntity::SetPredictionRandomSeed(CUserCmd const*)
 T CBaseEntity::SetRefEHandle(CBaseHandle const&)
 T CBaseEntity::SetShadowCastDistance(float, float)
 T CBaseEntity::SetSimulationTime(float)
 T CBaseEntity::SetSize(Vector const&, Vector const&)
 T CBaseEntity::SetTextureFrameIndex(int)
 T CBaseEntity::SetTransmit(CCheckTransmitInfo*, bool)
 T CBaseEntity::SetTransmitState(int)
 T CBaseEntity::SetViewOffset(Vector const&)
 T CBaseEntity::SetWaterType(int)
 T CBaseEntity::ShadowCastDistThink()
 T CBaseEntity::ShouldAttractAutoAim(CBaseEntity*)
 T CBaseEntity::ShouldCollide(int, int) const
 T CBaseEntity::ShouldDrawWaterImpacts()
 T CBaseEntity::ShouldSavePhysics()
 T CBaseEntity::ShouldToggle(USE_TYPE, int)
 T CBaseEntity::ShouldTransmit(CCheckTransmitInfo const*)
 T CBaseEntity::SimulateAngles(float)
 T CBaseEntity::Spawn()
 T CBaseEntity::Splash()
 T CBaseEntity::StartBlocked(CBaseEntity*)
 T CBaseEntity::StartTouch(CBaseEntity*)
 T CBaseEntity::StepSimulationThink(float)
 T CBaseEntity::StopFollowingEntity()
 T CBaseEntity::StopLoopingSounds()
 T CBaseEntity::StopSound(char const*)
 T CBaseEntity::StopSound(int, char const*)
 T CBaseEntity::StopSound(int, int, char const*)
 T CBaseEntity::TakeDamage(CTakeDamageInfo const&)
 T CBaseEntity::TakeHealth(float, int)
 T CBaseEntity::TeamID() const
 T CBaseEntity::Teleport(Vector const*, QAngle const*, Vector const*)
 T CBaseEntity::TestCollision(Ray_t const&, unsigned int, CGameTrace&)
 T CBaseEntity::TestHitboxes(Ray_t const&, unsigned int, CGameTrace&)
 T CBaseEntity::Think()
 T CBaseEntity::ThinkSet(void (CBaseEntity::*)(), float, char const*)
 T CBaseEntity::ToggleFlag(int)
 T CBaseEntity::Touch(CBaseEntity*)
 T CBaseEntity::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*)
 T CBaseEntity::TraceAttackToTriggers(CTakeDamageInfo const&, Vector const&, Vector const&, Vector const&)
 T CBaseEntity::TraceBleed(float, Vector const&, CGameTrace*, int)
 T CBaseEntity::UnsetPlayerSimulated()
 T CBaseEntity::UpdateBaseVelocity()
 T CBaseEntity::UpdateOnRemove()
 T CBaseEntity::UpdatePhysicsShadowToCurrentPosition(float)
 T CBaseEntity::UpdateShotStatistics(CGameTrace const&)
 T CBaseEntity::UpdateTransmitState()
 T CBaseEntity::UpdateWaterState()
 T CBaseEntity::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CBaseEntity::UseStepSimulationNetworkAngles(QAngle const**)
 T CBaseEntity::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CBaseEntity::VPhysicsDestroyObject()
 T CBaseEntity::VPhysicsFriction(IPhysicsObject*, float, int, int)
 T CBaseEntity::VPhysicsGetObjectList(IPhysicsObject**, int)
 T CBaseEntity::VPhysicsInitNormal(SolidType_t, int, bool, solid_t*)
 T CBaseEntity::VPhysicsInitShadow(bool, bool, solid_t*)
 T CBaseEntity::VPhysicsInitStatic()
 T CBaseEntity::VPhysicsIsFlesh()
 T CBaseEntity::VPhysicsSetObject(IPhysicsObject*)
 T CBaseEntity::VPhysicsShadowCollision(int, gamevcollisionevent_t*)
 T CBaseEntity::VPhysicsShadowUpdate(IPhysicsObject*)
 T CBaseEntity::VPhysicsSwapObject(IPhysicsObject*)
 T CBaseEntity::VPhysicsTakeDamage(CTakeDamageInfo const&)
 T CBaseEntity::VPhysicsUpdate(IPhysicsObject*)
 T CBaseEntity::VPhysicsUpdatePusher(IPhysicsObject*)
 T CBaseEntity::ViewPunch(QAngle const&)
 T CBaseEntity::WorldSpaceCenter() const
 T CBaseEntity::YouForgotToImplementOrDeclareServerClass()
 T CBaseEntity::operator delete(void*)
 T CBaseEntity::operator new(unsigned long)
 T CBaseEntity::~CBaseEntity()
 T CBaseEntityClassList::CBaseEntityClassList()
 T CBaseEntityClassList::~CBaseEntityClassList()
 T CBaseEntityList::AddEntityAtSlot(IHandleEntity*, int, int)
 T CBaseEntityList::AddNetworkableEntity(IHandleEntity*, int, int)
 T CBaseEntityList::AddNonNetworkableEntity(IHandleEntity*)
 T CBaseEntityList::CBaseEntityList()
 T CBaseEntityList::OnAddEntity(IHandleEntity*, CBaseHandle)
 T CBaseEntityList::OnRemoveEntity(IHandleEntity*, CBaseHandle)
 T CBaseEntityList::RemoveEntity(CBaseHandle)
 T CBaseEntityList::RemoveEntityAtSlot(int)
 T CBaseEntityList::~CBaseEntityList()
 T CBaseEntityOutput::FireOutput(variant_t, CBaseEntity*, CBaseEntity*, float)
 T CBaseEntityOutput::GetActionForTarget(string_t) const
 T CBaseEntityOutput::GetMaxDelay()
 T CBaseEntityOutput::NumberOfElements()
 T CBaseEntityOutput::Restore(IRestore&, int)
 T CBaseEntityOutput::~CBaseEntityOutput()
 T CBaseFilter::GetDataDescMap()
 T CBaseFilter::InputTestActivator(inputdata_t&)
 T CBaseFilter::PassesDamageFilter(CTakeDamageInfo const&)
 T CBaseFilter::PassesDamageFilterImpl(CTakeDamageInfo const&)
 T CBaseFilter::PassesFilter(CBaseEntity*, CBaseEntity*)
 T CBaseFilter::PassesFilterImpl(CBaseEntity*, CBaseEntity*)
 T CBaseFilter::~CBaseFilter()
 T CBaseFire::CBaseFire()
 T CBaseFire::Enable(int)
 T CBaseFire::GetDataDescMap()
 T CBaseFire::Scale(float, float)
 T CBaseFire::Scale(float, float, float)
 T CBaseFire::~CBaseFire()
 T CBaseFlex::AddFlexAnimation(CSceneEventInfo*)
 T CBaseFlex::AddFlexSetting(char const*, float, flexsettinghdr_t const*, bool)
 T CBaseFlex::AddSceneEvent(CChoreoScene*, CChoreoEvent*, CBaseEntity*)
 T CBaseFlex::CBaseFlex()
 T CBaseFlex::CheckSceneEvent(float, CChoreoScene*, CChoreoEvent*)
 T CBaseFlex::CheckSceneEventCompletion(CSceneEventInfo*, float, CChoreoScene*, CChoreoEvent*)
 T CBaseFlex::ClearSceneEvent(CSceneEventInfo*, bool, bool)
 T CBaseFlex::ClearSceneEvents(CChoreoScene*, bool)
 T CBaseFlex::EnsureTranslations(flexsettinghdr_t const*)
 T CBaseFlex::FindFlexController(char const*)
 T CBaseFlex::FlexControllerLocalToGlobal(flexsettinghdr_t const*, int)
 T CBaseFlex::FlexSettingLessFunc(CBaseFlex::FS_LocalToGlobal_t const&, CBaseFlex::FS_LocalToGlobal_t const&)
 T CBaseFlex::GetDataDescMap()
 T CBaseFlex::GetFlexWeight(LocalFlexController_t)
 T CBaseFlex::GetServerClass()
 T CBaseFlex::HandleStartGestureSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*, CChoreoActor*)
 T CBaseFlex::HandleStartSequenceSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*, CChoreoActor*)
 T CBaseFlex::PlayAutoGeneratedSoundScene(char const*)
 T CBaseFlex::PlayScene(char const*, float, AI_Response*, IRecipientFilter*)
 T CBaseFlex::ProcessFacingSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*)
 T CBaseFlex::ProcessFlexAnimationSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*)
 T CBaseFlex::ProcessFlexSettingSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*)
 T CBaseFlex::ProcessGestureSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*)
 T CBaseFlex::ProcessSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*)
 T CBaseFlex::ProcessSceneEvents()
 T CBaseFlex::ProcessSequenceSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*)
 T CBaseFlex::RemoveChoreoScene(CChoreoScene*, bool)
 T CBaseFlex::RemoveSceneEvent(CChoreoScene*, CChoreoEvent*, bool)
 T CBaseFlex::SetFlexWeight(LocalFlexController_t, float)
 T CBaseFlex::SetModel(char const*)
 T CBaseFlex::SetPermitResponse(float)
 T CBaseFlex::SetViewtarget(Vector const&)
 T CBaseFlex::StartChoreoScene(CChoreoScene*)
 T CBaseFlex::StartSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*, CChoreoActor*, CBaseEntity*)
 T CBaseFlex::Teleport(Vector const*, QAngle const*, Vector const*)
 T CBaseFlex::YouForgotToImplementOrDeclareServerClass()
 T CBaseFlex::~CBaseFlex()
 T CBaseGameStats::AddDataForSend(KeyValues*, StatSendType_t)
 T CBaseGameStats::AppendCustomDataToSaveBuffer(CUtlBuffer&)
 T CBaseGameStats::AutoSave_OnInit()
 T CBaseGameStats::AutoSave_OnLevelInit()
 T CBaseGameStats::AutoSave_OnLevelShutdown()
 T CBaseGameStats::AutoSave_OnMapChange()
 T CBaseGameStats::AutoSave_OnShutdown()
 T CBaseGameStats::AutoUpload_OnInit()
 T CBaseGameStats::AutoUpload_OnLevelInit()
 T CBaseGameStats::AutoUpload_OnLevelShutdown()
 T CBaseGameStats::AutoUpload_OnMapChange()
 T CBaseGameStats::AutoUpload_OnShutdown()
 T CBaseGameStats::CBaseGameStats()
 T CBaseGameStats::Clear()
 T CBaseGameStats::Event_Commentary()
 T CBaseGameStats::Event_CrateSmashed()
 T CBaseGameStats::Event_Credits()
 T CBaseGameStats::Event_DecrementPlayerEnteredNoClip(CBasePlayer*)
 T CBaseGameStats::Event_FlippedVehicle(CBasePlayer*, CPropVehicleDriveable*)
 T CBaseGameStats::Event_IncrementCountedStatistic(Vector const&, char const*, float)
 T CBaseGameStats::Event_Init()
 T CBaseGameStats::Event_LevelInit()
 T CBaseGameStats::Event_LevelShutdown(float)
 T CBaseGameStats::Event_LoadGame()
 T CBaseGameStats::Event_MapChange(char const*, char const*)
 T CBaseGameStats::Event_PlayerConnected(CBasePlayer*)
 T CBaseGameStats::Event_PlayerDamage(CBasePlayer*, CTakeDamageInfo const&)
 T CBaseGameStats::Event_PlayerDisconnected(CBasePlayer*)
 T CBaseGameStats::Event_PlayerEnteredGodMode(CBasePlayer*)
 T CBaseGameStats::Event_PlayerEnteredNoClip(CBasePlayer*)
 T CBaseGameStats::Event_PlayerKilled(CBasePlayer*, CTakeDamageInfo const&)
 T CBaseGameStats::Event_PlayerKilledOther(CBasePlayer*, CBaseEntity*, CTakeDamageInfo const&)
 T CBaseGameStats::Event_PlayerTraveled(CBasePlayer*, float, bool, bool)
 T CBaseGameStats::Event_PreSaveGameLoaded(char const*, bool)
 T CBaseGameStats::Event_Punted(CBaseEntity*)
 T CBaseGameStats::Event_SaveGame()
 T CBaseGameStats::Event_Shutdown()
 T CBaseGameStats::Event_WeaponFired(CBasePlayer*, bool, char const*)
 T CBaseGameStats::Event_WeaponHit(CBasePlayer*, bool, char const*, CTakeDamageInfo const&)
 T CBaseGameStats::GetStatSaveFileName()
 T CBaseGameStats::GetStatUploadRegistryKeyName()
 T CBaseGameStats::HaveValidData()
 T CBaseGameStats::LoadCustomDataFromBuffer(CUtlBuffer&)
 T CBaseGameStats::LoadFromFile()
 T CBaseGameStats::LoadingEvent_PlayerIDDifferentThanLoadedStats()
 T CBaseGameStats::OnInit(CBaseGameStats*, char const*)
 T CBaseGameStats::SaveToFileNOW(bool)
 T CBaseGameStats::ShouldSendDataOnAppShutdown()
 T CBaseGameStats::ShouldSendDataOnLevelShutdown()
 T CBaseGameStats::ShouldTrackStandardStats()
 T CBaseGameStats::StatTrackingEnabledForMod()
 T CBaseGameStats::StatsLog(char const*, ...)
 T CBaseGameStats::UploadStatsFileNOW()
 T CBaseGameStats::UseOldFormat()
 T CBaseGameStats::UserPlayedAllTheMaps()
 T CBaseGameStats::~CBaseGameStats()
 T CBaseGameStats_Driver::CBaseGameStats_Driver()
 T CBaseGameStats_Driver::CollectData(StatSendType_t)
 T CBaseGameStats_Driver::FrameUpdatePostEntityThink()
 T CBaseGameStats_Driver::Init()
 T CBaseGameStats_Driver::LevelInitPreEntity()
 T CBaseGameStats_Driver::LevelShutdownPreEntity()
 T CBaseGameStats_Driver::OnRestore()
 T CBaseGameStats_Driver::OnSave()
 T CBaseGameStats_Driver::PossibleMapChange()
 T CBaseGameStats_Driver::ResetData()
 T CBaseGameStats_Driver::SendData()
 T CBaseGameStats_Driver::Shutdown()
 T CBaseGameStats_Driver::~CBaseGameStats_Driver()
 T CBaseGameSystem::FrameUpdatePostEntityThink()
 T CBaseGameSystem::FrameUpdatePreEntityThink()
 T CBaseGameSystem::Init()
 T CBaseGameSystem::IsPerFrame()
 T CBaseGameSystem::LevelInitPostEntity()
 T CBaseGameSystem::LevelInitPreEntity()
 T CBaseGameSystem::LevelShutdownPostEntity()
 T CBaseGameSystem::LevelShutdownPreEntity()
 T CBaseGameSystem::Name()
 T CBaseGameSystem::OnRestore()
 T CBaseGameSystem::OnSave()
 T CBaseGameSystem::PostInit()
 T CBaseGameSystem::PreClientUpdate()
 T CBaseGameSystem::SafeRemoveIfDesired()
 T CBaseGameSystem::Shutdown()
 T CBaseGameSystemPerFrame::FrameUpdatePostEntityThink()
 T CBaseGameSystemPerFrame::FrameUpdatePreEntityThink()
 T CBaseGameSystemPerFrame::Init()
 T CBaseGameSystemPerFrame::IsPerFrame()
 T CBaseGameSystemPerFrame::LevelInitPostEntity()
 T CBaseGameSystemPerFrame::LevelInitPreEntity()
 T CBaseGameSystemPerFrame::LevelShutdownPostEntity()
 T CBaseGameSystemPerFrame::LevelShutdownPreEntity()
 T CBaseGameSystemPerFrame::OnRestore()
 T CBaseGameSystemPerFrame::OnSave()
 T CBaseGameSystemPerFrame::PostInit()
 T CBaseGameSystemPerFrame::PreClientUpdate()
 T CBaseGameSystemPerFrame::SafeRemoveIfDesired()
 T CBaseGameSystemPerFrame::Shutdown()
 T CBaseGrenade::BloodColor()
 T CBaseGrenade::BounceSound()
 T CBaseGrenade::BounceTouch(CBaseEntity*)
 T CBaseGrenade::CBaseGrenade()
 T CBaseGrenade::DangerSoundThink()
 T CBaseGrenade::Detonate()
 T CBaseGrenade::DetonateUse(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CBaseGrenade::Event_Killed(CTakeDamageInfo const&)
 T CBaseGrenade::Explode(CGameTrace*, int)
 T CBaseGrenade::ExplodeTouch(CBaseEntity*)
 T CBaseGrenade::GetBlastForce()
 T CBaseGrenade::GetDamage()
 T CBaseGrenade::GetDamageRadius()
 T CBaseGrenade::GetDataDescMap()
 T CBaseGrenade::GetServerClass()
 T CBaseGrenade::GetShakeAmplitude()
 T CBaseGrenade::GetShakeRadius()
 T CBaseGrenade::GetThrower()
 T CBaseGrenade::NetworkStateChanged_m_fFlags()
 T CBaseGrenade::NetworkStateChanged_m_fFlags(void*)
 T CBaseGrenade::NetworkStateChanged_m_vecVelocity()
 T CBaseGrenade::NetworkStateChanged_m_vecVelocity(void*)
 T CBaseGrenade::PreDetonate()
 T CBaseGrenade::Precache()
 T CBaseGrenade::SetDamage(float)
 T CBaseGrenade::SetDamageRadius(float)
 T CBaseGrenade::SetThrower(CBaseCombatCharacter*)
 T CBaseGrenade::SlideTouch(CBaseEntity*)
 T CBaseGrenade::Smoke()
 T CBaseGrenade::TumbleThink()
 T CBaseGrenade::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CBaseGrenade::YouForgotToImplementOrDeclareServerClass()
 T CBaseGrenade::~CBaseGrenade()
 T CBaseIssue::CBaseIssue(char const*)
 T CBaseIssue::CanCallVote(int, char const*, char*)
 T CBaseIssue::CanTeamCallVote(int) const
 T CBaseIssue::CountPotentialVoters()
 T CBaseIssue::GetDetailsString()
 T CBaseIssue::GetTypeString()
 T CBaseIssue::GetVotePassedString()
 T CBaseIssue::IsAllyRestrictedVote()
 T CBaseIssue::ListStandardNoArgCommand(CBasePlayer*, char const*)
 T CBaseIssue::OnVoteFailed()
 T CBaseIssue::OnVotePassed()
 T CBaseIssue::OnVoteStarted()
 T CBaseIssue::SetIssueDetails(char const*)
 T CBaseIssue::~CBaseIssue()
 T CBaseMoveBehavior::Activate()
 T CBaseMoveBehavior::GetDataDescMap()
 T CBaseMoveBehavior::IsMoving()
 T CBaseMoveBehavior::MoveDone()
 T CBaseMoveBehavior::Spawn()
 T CBaseMoveBehavior::StartMoving(int)
 T CBaseMoveBehavior::StopMoving()
 T CBaseMoveBehavior::~CBaseMoveBehavior()
 T CBaseMultiplayerPlayer::CBaseMultiplayerPlayer()
 T CBaseMultiplayerPlayer::CalculateTeamBalanceScore()
 T CBaseMultiplayerPlayer::CanHearAndReadChatFrom(CBasePlayer*)
 T CBaseMultiplayerPlayer::CanSpeak()
 T CBaseMultiplayerPlayer::CanSpeakVoiceCommand()
 T CBaseMultiplayerPlayer::ClientCommand(CCommand const&)
 T CBaseMultiplayerPlayer::CreateExpresser()
 T CBaseMultiplayerPlayer::GetExpresser()
 T CBaseMultiplayerPlayer::GetMultiplayerExpresser()
 T CBaseMultiplayerPlayer::GetResponseSystem()
 T CBaseMultiplayerPlayer::GetSteamID(CSteamID*)
 T CBaseMultiplayerPlayer::GetSteamIDAsUInt64()
 T CBaseMultiplayerPlayer::ModifyOrAppendCriteria(AI_CriteriaSet&)
 T CBaseMultiplayerPlayer::NoteSpokeVoiceCommand(char const*)
 T CBaseMultiplayerPlayer::PostConstructor(char const*)
 T CBaseMultiplayerPlayer::Precache()
 T CBaseMultiplayerPlayer::ShouldShowVoiceSubtitleToEnemy()
 T CBaseMultiplayerPlayer::Spawn()
 T CBaseMultiplayerPlayer::SpeakConceptIfAllowed(int, char const*, char*, unsigned long, IRecipientFilter*)
 T CBaseMultiplayerPlayer::SpeakIfAllowed(CAI_Concept, SpeechPriorityType, char const*, char*, unsigned long, IRecipientFilter*)
 T CBaseMultiplayerPlayer::~CBaseMultiplayerPlayer()
 T CBaseParticleEntity::Activate()
 T CBaseParticleEntity::CBaseParticleEntity()
 T CBaseParticleEntity::FollowEntity(CBaseEntity*)
 T CBaseParticleEntity::GetServerClass()
 T CBaseParticleEntity::Think()
 T CBaseParticleEntity::UpdateTransmitState()
 T CBaseParticleEntity::YouForgotToImplementOrDeclareServerClass()
 T CBaseParticleEntity::~CBaseParticleEntity()
 T CBasePlatTrain::GetDataDescMap()
 T CBasePlatTrain::IsTogglePlat()
 T CBasePlatTrain::KeyValue(char const*, char const*)
 T CBasePlatTrain::PlayMovingSound()
 T CBasePlatTrain::Precache()
 T CBasePlatTrain::~CBasePlatTrain()
 T CBasePlayer::Activate()
 T CBasePlayer::ActivateMovementConstraint(CBaseEntity*, Vector const&, float, float, float, bool)
 T CBasePlayer::AddPoints(int, bool)
 T CBasePlayer::AddPointsToTeam(int, bool)
 T CBasePlayer::AddSplitScreenPlayer(CBasePlayer*)
 T CBasePlayer::AdjustPlayerTimeBase(int)
 T CBasePlayer::AllowImmediateDecalPainting()
 T CBasePlayer::AttemptToExitFreezeCam()
 T CBasePlayer::AutoaimDeflection(Vector&, autoaim_params_t&)
 T CBasePlayer::AvoidPhysicsProps(CUserCmd*)
 T CBasePlayer::BodyAngles()
 T CBasePlayer::BodyTarget(Vector const&, bool)
 T CBasePlayer::BumpWeapon(CBaseCombatWeapon*)
 T CBasePlayer::CBasePlayer()
 T CBasePlayer::CacheVehicleView()
 T CBasePlayer::CalcRoll(QAngle const&, Vector const&, float, float)
 T CBasePlayer::CanBreatheUnderwater() const
 T CBasePlayer::CanEnterVehicle(IServerVehicle*, int)
 T CBasePlayer::CanHearAndReadChatFrom(CBasePlayer*)
 T CBasePlayer::CanPickupObject(CBaseEntity*, float, float)
 T CBasePlayer::CanRecoverCurrentDrowningDamage() const
 T CBasePlayer::CanSpeak()
 T CBasePlayer::ChangeTeam(int)
 T CBasePlayer::CheatImpulseCommands(int)
 T CBasePlayer::CheckChatText(char*, int)
 T CBasePlayer::CheckObserverSettings()
 T CBasePlayer::CheckSuitUpdate()
 T CBasePlayer::CheckTimeBasedDamage()
 T CBasePlayer::CheckTrainUpdate()
 T CBasePlayer::Classify()
 T CBasePlayer::ClearPlayerSimulationList()
 T CBasePlayer::ClearUseEntity()
 T CBasePlayer::ClearZoomOwner()
 T CBasePlayer::ClientCommand(CCommand const&)
 T CBasePlayer::CommitSuicide(Vector const&, bool, bool)
 T CBasePlayer::CommitSuicide(bool, bool)
 T CBasePlayer::Cough(CBasePlayer*)
 T CBasePlayer::CreateCorpse()
 T CBasePlayer::CreatePlayer(char const*, edict_t*)
 T CBasePlayer::CreateRagdollEntity()
 T CBasePlayer::CreateViewModel(int)
 T CBasePlayer::DamageEffect(float, int)
 T CBasePlayer::DeactivateMovementConstraint()
 T CBasePlayer::DeathSound(CTakeDamageInfo const&)
 T CBasePlayer::DestroyViewModels()
 T CBasePlayer::DoImpactEffect(CGameTrace&, int)
 T CBasePlayer::DoMuzzleFlash()
 T CBasePlayer::DoubleCheckUseNPC(CBaseEntity*, Vector const&, Vector const&)
 T CBasePlayer::DrawDebugGeometryOverlays()
 T CBasePlayer::Duck()
 T CBasePlayer::DumpPerfToRecipient(CBasePlayer*, int)
 T CBasePlayer::EnableControl(bool)
 T CBasePlayer::EnsureSplitScreenTeam()
 T CBasePlayer::EntSelectSpawnPoint()
 T CBasePlayer::EquipSuit(bool)
 T CBasePlayer::Event_Dying()
 T CBasePlayer::Event_Killed(CTakeDamageInfo const&)
 T CBasePlayer::Event_KilledOther(CBaseEntity*, CTakeDamageInfo const&)
 T CBasePlayer::ExitLadder()
 T CBasePlayer::EyeAngles()
 T CBasePlayer::EyePosition()
 T CBasePlayer::EyePositionAndVectors(Vector*, Vector*, Vector*, Vector*)
 T CBasePlayer::EyeVectors(Vector*, Vector*, Vector*)
 T CBasePlayer::FindNextObserverTarget(bool)
 T CBasePlayer::FindUseEntity(float, float, bool*)
 T CBasePlayer::FinishUserMessageThrottling()
 T CBasePlayer::FlashlightIsOn()
 T CBasePlayer::FlashlightTurnOff(bool)
 T CBasePlayer::FlashlightTurnOn(bool)
 T CBasePlayer::ForceButtons(int)
 T CBasePlayer::ForceChangeTeam(int)
 T CBasePlayer::ForceClientDllUpdate()
 T CBasePlayer::ForceDropOfCarriedPhysObjects(CBaseEntity*)
 T CBasePlayer::ForceObserverMode(int)
 T CBasePlayer::ForceOrigin(Vector const&)
 T CBasePlayer::ForceRespawn()
 T CBasePlayer::ForceSimulation()
 T CBasePlayer::GetAutoaimScore(Vector const&, Vector const&, Vector const&, CBaseEntity*, float, CBaseCombatWeapon*)
 T CBasePlayer::GetAutoaimVector(autoaim_params_t&)
 T CBasePlayer::GetAutoaimVector(float)
 T CBasePlayer::GetAutoaimVector(float, float)
 T CBasePlayer::GetAutoaimVector(float, float, float, AimResults*)
 T CBasePlayer::GetAvailableSteadyStateSlots()
 T CBasePlayer::GetCharacterDisplayName()
 T CBasePlayer::GetDataDescMap()
 T CBasePlayer::GetDefaultFOV() const
 T CBasePlayer::GetDelayTicks()
 T CBasePlayer::GetElevator() const
 T CBasePlayer::GetExpresser()
 T CBasePlayer::GetFOV()
 T CBasePlayer::GetFOV() const
 T CBasePlayer::GetFOVDistanceAdjustFactorForNetworking()
 T CBasePlayer::GetFOVForNetworking()
 T CBasePlayer::GetHeldObjectMass(IPhysicsObject*)
 T CBasePlayer::GetInVehicle(IServerVehicle*, int)
 T CBasePlayer::GetLadderSurface(Vector const&)
 T CBasePlayer::GetNetworkIDString()
 T CBasePlayer::GetNextObserverSearchStartPoint(bool)
 T CBasePlayer::GetObserverMode()
 T CBasePlayer::GetObserverTarget()
 T CBasePlayer::GetPhysicsImpactDamageTable()
 T CBasePlayer::GetPlayerMaxs() const
 T CBasePlayer::GetPlayerMins() const
 T CBasePlayer::GetPreviouslyPredictedOrigin() const
 T CBasePlayer::GetPunchAngle()
 T CBasePlayer::GetReplayEntity()
 T CBasePlayer::GetServerClass()
 T CBasePlayer::GetSmoothedVelocity()
 T CBasePlayer::GetSplitScreenPlayerOwner()
 T CBasePlayer::GetSplitScreenPlayers()
 T CBasePlayer::GetStepSoundVelocities(float*, float*)
 T CBasePlayer::GetSwimSoundTime() const
 T CBasePlayer::GetTimeBase() const
 T CBasePlayer::GetTracerType()
 T CBasePlayer::GetVehicle()
 T CBasePlayer::GetVehicleEntity()
 T CBasePlayer::GetViewModel(int)
 T CBasePlayer::GetWaterJumpTime() const
 T CBasePlayer::GiveNamedItem(char const*, int, bool)
 T CBasePlayer::HandleAnimEvent(animevent_t*)
 T CBasePlayer::HandleFuncTrain()
 T CBasePlayer::HandleVoteCommands(CCommand const&)
 T CBasePlayer::HasHaptics()
 T CBasePlayer::HasNamedPlayerItem(char const*)
 T CBasePlayer::HasQueuedUsercmds() const
 T CBasePlayer::HasWeapons()
 T CBasePlayer::HideViewModels()
 T CBasePlayer::Hints()
 T CBasePlayer::ImpulseCommands()
 T CBasePlayer::IncrementDeathCount(int)
 T CBasePlayer::IncrementEFNoInterpParity()
 T CBasePlayer::IncrementFragCount(int)
 T CBasePlayer::InitColorCorrectionController()
 T CBasePlayer::InitFogController()
 T CBasePlayer::InitHUD()
 T CBasePlayer::InitPostProcessController()
 T CBasePlayer::InitVCollision(Vector const&, Vector const&)
 T CBasePlayer::InitialSpawn()
 T CBasePlayer::InputSetFogController(inputdata_t&)
 T CBasePlayer::InputSetHUDVisibility(inputdata_t&)
 T CBasePlayer::InputSetHealth(inputdata_t&)
 T CBasePlayer::IsAbleToAutoCenterOnLadders() const
 T CBasePlayer::IsAutoCrouched() const
 T CBasePlayer::IsBot() const
 T CBasePlayer::IsDead() const
 T CBasePlayer::IsFakeClient() const
 T CBasePlayer::IsFollowingPhysics()
 T CBasePlayer::IsGhost() const
 T CBasePlayer::IsHoldingEntity(CBaseEntity*)
 T CBasePlayer::IsIlluminatedByFlashlight(CBaseEntity*, float*)
 T CBasePlayer::IsInAVehicle() const
 T CBasePlayer::IsNetClient() const
 T CBasePlayer::IsOnLadder()
 T CBasePlayer::IsPlayer() const
 T CBasePlayer::IsReadyToPlay()
 T CBasePlayer::IsReadyToSpawn()
 T CBasePlayer::IsRunning() const
 T CBasePlayer::IsSplitScreenPartner(CBasePlayer*)
 T CBasePlayer::IsSplitScreenPlayer() const
 T CBasePlayer::IsSplitScreenUserOnEdict(edict_t*)
 T CBasePlayer::IsUseableEntity(CBaseEntity*, unsigned int)
 T CBasePlayer::IsValidObserverTarget(CBaseEntity*)
 T CBasePlayer::ItemPostFrame()
 T CBasePlayer::ItemPreFrame()
 T CBasePlayer::Jump()
 T CBasePlayer::JumptoPosition(Vector const&, QAngle const&)
 T CBasePlayer::LeaveVehicle(Vector const&, QAngle const&)
 T CBasePlayer::LocalEyeAngles()
 T CBasePlayer::LockPlayerInPlace()
 T CBasePlayer::MakeTracer(Vector const&, CGameTrace const&, int)
 T CBasePlayer::ModeWantsSpectatorGUI(int)
 T CBasePlayer::ModifyOrAppendPlayerCriteria(AI_CriteriaSet&)
 T CBasePlayer::NetworkStateChanged_m_ArmorValue()
 T CBasePlayer::NetworkStateChanged_m_ArmorValue(void*)
 T CBasePlayer::NetworkStateChanged_m_fFlags()
 T CBasePlayer::NetworkStateChanged_m_fFlags(void*)
 T CBasePlayer::NetworkStateChanged_m_flFriction()
 T CBasePlayer::NetworkStateChanged_m_flFriction(void*)
 T CBasePlayer::NetworkStateChanged_m_hGroundEntity()
 T CBasePlayer::NetworkStateChanged_m_hGroundEntity(void*)
 T CBasePlayer::NetworkStateChanged_m_iAmmo()
 T CBasePlayer::NetworkStateChanged_m_iAmmo(void*)
 T CBasePlayer::NetworkStateChanged_m_iHealth()
 T CBasePlayer::NetworkStateChanged_m_iHealth(void*)
 T CBasePlayer::NetworkStateChanged_m_lifeState()
 T CBasePlayer::NetworkStateChanged_m_lifeState(void*)
 T CBasePlayer::NetworkStateChanged_m_nNextThinkTick()
 T CBasePlayer::NetworkStateChanged_m_nNextThinkTick(void*)
 T CBasePlayer::NetworkStateChanged_m_nWaterLevel()
 T CBasePlayer::NetworkStateChanged_m_nWaterLevel(void*)
 T CBasePlayer::NetworkStateChanged_m_vecBaseVelocity()
 T CBasePlayer::NetworkStateChanged_m_vecBaseVelocity(void*)
 T CBasePlayer::NetworkStateChanged_m_vecVelocity()
 T CBasePlayer::NetworkStateChanged_m_vecVelocity(void*)
 T CBasePlayer::NetworkStateChanged_m_vecViewOffset()
 T CBasePlayer::NetworkStateChanged_m_vecViewOffset(void*)
 T CBasePlayer::NetworkVar_m_Local::NetworkStateChanged()
 T CBasePlayer::NetworkVar_m_Local::NetworkStateChanged(void*)
 T CBasePlayer::NetworkVar_m_PlayerFog::NetworkStateChanged()
 T CBasePlayer::NetworkVar_m_PlayerFog::NetworkStateChanged(void*)
 T CBasePlayer::NetworkVar_pl::NetworkStateChanged()
 T CBasePlayer::NetworkVar_pl::NetworkStateChanged(void*)
 T CBasePlayer::NetworkVar_pl::~NetworkVar_pl()
 T CBasePlayer::NotifyFromElevator(CFuncElevator*)
 T CBasePlayer::NotifyNearbyRadiationSource(float)
 T CBasePlayer::ObjectCaps()
 T CBasePlayer::ObserverUse(bool)
 T CBasePlayer::OnDamagedByExplosion(CTakeDamageInfo const&)
 T CBasePlayer::OnEntitySteadyStateStart()
 T CBasePlayer::OnMainActivityComplete(Activity, Activity)
 T CBasePlayer::OnMainActivityInterrupted(Activity, Activity)
 T CBasePlayer::OnNavAreaChanged(CNavArea*, CNavArea*)
 T CBasePlayer::OnRestore()
 T CBasePlayer::OnSpeak(CBasePlayer*, char const*, float)
 T CBasePlayer::OnTakeDamage(CTakeDamageInfo const&)
 T CBasePlayer::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CBasePlayer::OnTonemapTriggerEndTouch(CTonemapTrigger*)
 T CBasePlayer::OnTonemapTriggerStartTouch(CTonemapTrigger*)
 T CBasePlayer::OnUseEntity(CBaseEntity*, USE_TYPE)
 T CBasePlayer::OnUseEntityChanged()
 T CBasePlayer::OnVehicleEnd(Vector&)
 T CBasePlayer::OnVehicleStart()
 T CBasePlayer::OnVoiceTransmit()
 T CBasePlayer::PackDeadPlayerItems()
 T CBasePlayer::PassesObserverFilter(CBaseEntity const*)
 T CBasePlayer::PhysicsSimulate()
 T CBasePlayer::PhysicsSolidMaskForEntity() const
 T CBasePlayer::PickupObject(CBaseEntity*, bool)
 T CBasePlayer::PlayStepSound(Vector&, surfacedata_t*, float, bool)
 T CBasePlayer::PlayUseDenySound()
 T CBasePlayer::PlayWadeSound()
 T CBasePlayer::PlayerDeathThink()
 T CBasePlayer::PlayerHoldingEntity(CBaseEntity*)
 T CBasePlayer::PlayerRunCommand(CUserCmd*, IMoveHelper*)
 T CBasePlayer::PlayerSolidMask(bool) const
 T CBasePlayer::PlayerUse(CBaseEntity*)
 T CBasePlayer::PostThink()
 T CBasePlayer::PostThinkVPhysics()
 T CBasePlayer::PreThink()
 T CBasePlayer::Precache()
 T CBasePlayer::PrepareForFullUpdate()
 T CBasePlayer::ProcessUsercmds(CUserCmd*, int, int, int, bool)
 T CBasePlayer::RemoveAllCommandContextsExceptNewest()
 T CBasePlayer::RemoveAllItems(bool)
 T CBasePlayer::RemoveFromPlayerSimulationList(CBaseEntity*)
 T CBasePlayer::RemovePlayerItem(CBaseCombatWeapon*)
 T CBasePlayer::RemoveSplitScreenPlayer(CBasePlayer*)
 T CBasePlayer::RemoveSuit()
 T CBasePlayer::RequiredEdictIndex()
 T CBasePlayer::ResetAutoaim()
 T CBasePlayer::ResetDeathCount()
 T CBasePlayer::ResetFragCount()
 T CBasePlayer::ResetObserverMode()
 T CBasePlayer::ResetPerRoundStats()
 T CBasePlayer::ResetScores()
 T CBasePlayer::Restore(IRestore&)
 T CBasePlayer::RumbleEffect(unsigned char, unsigned char, unsigned char)
 T CBasePlayer::RunNullCommand()
 T CBasePlayer::Save(ISave&)
 T CBasePlayer::SelectItem(CBaseCombatWeapon*)
 T CBasePlayer::SelectItem(char const*, int)
 T CBasePlayer::SelectLastItem()
 T CBasePlayer::SetAnimation(PLAYER_ANIM)
 T CBasePlayer::SetAnimationExtension(char const*)
 T CBasePlayer::SetArmorValue(int)
 T CBasePlayer::SetBodyPitch(float)
 T CBasePlayer::SetDefaultFOV(int)
 T CBasePlayer::SetFOV(CBaseEntity*, int, float, int)
 T CBasePlayer::SetFlashlightEnabled(bool)
 T CBasePlayer::SetHaptics(bool)
 T CBasePlayer::SetLadderNormal(Vector)
 T CBasePlayer::SetMaxSpeed(float)
 T CBasePlayer::SetModel(char const*)
 T CBasePlayer::SetObserverMode(int)
 T CBasePlayer::SetObserverTarget(CBaseEntity*)
 T CBasePlayer::SetPhysicsFlag(int, bool)
 T CBasePlayer::SetPlayerInPVS(int, bool)
 T CBasePlayer::SetPlayerName(char const*)
 T CBasePlayer::SetPlayerUnderwater(bool)
 T CBasePlayer::SetPreviouslyPredictedOrigin(Vector const&)
 T CBasePlayer::SetPunchAngle(QAngle const&)
 T CBasePlayer::SetPunchAngle(int, float)
 T CBasePlayer::SetSplitScreenPlayer(bool, CBasePlayer*)
 T CBasePlayer::SetStepSoundTime(stepsoundtimes_t, bool)
 T CBasePlayer::SetSuitUpdate(char*, int, int)
 T CBasePlayer::SetSwimSoundTime(float)
 T CBasePlayer::SetVCollisionState(Vector const&, Vector const&, int)
 T CBasePlayer::SetViewEntity(CBaseEntity*)
 T CBasePlayer::SetWaterJumpTime(float)
 T CBasePlayer::SetupVPhysicsShadow(Vector const&, Vector const&, CPhysCollide*, char const*, CPhysCollide*, char const*)
 T CBasePlayer::SetupVisibility(CBaseEntity*, unsigned char*, int)
 T CBasePlayer::SharedSpawn()
 T CBasePlayer::ShouldAnnounceAchievement()
 T CBasePlayer::ShouldAutoaim()
 T CBasePlayer::ShouldFadeOnDeath()
 T CBasePlayer::ShouldGainInstantSpawn()
 T CBasePlayer::ShouldSavePhysics()
 T CBasePlayer::ShouldTakeDamageInCommentaryMode(CTakeDamageInfo const&)
 T CBasePlayer::ShouldThrottleUserMessage(char const*)
 T CBasePlayer::ShouldTransmit(CCheckTransmitInfo const*)
 T CBasePlayer::ShowCrosshair(bool)
 T CBasePlayer::ShowViewPortPanel(char const*, bool, KeyValues*)
 T CBasePlayer::SimulatePlayerSimulatedEntities()
 T CBasePlayer::SnapEyeAngles(QAngle const&)
 T CBasePlayer::Spawn()
 T CBasePlayer::SpawnArmorValue() const
 T CBasePlayer::StartObserverMode(int)
 T CBasePlayer::StartReplayMode(float, float, int)
 T CBasePlayer::StartUserMessageThrottling(char const**, int)
 T CBasePlayer::StopObserverMode()
 T CBasePlayer::StopReplayMode()
 T CBasePlayer::TakeHealth(float, int)
 T CBasePlayer::Touch(CBaseEntity*)
 T CBasePlayer::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*)
 T CBasePlayer::UnforceButtons(int)
 T CBasePlayer::UnlockPlayer()
 T CBasePlayer::UpdateButtonState(int)
 T CBasePlayer::UpdateClientData()
 T CBasePlayer::UpdateCollisionBounds()
 T CBasePlayer::UpdateGeigerCounter()
 T CBasePlayer::UpdateOnRemove()
 T CBasePlayer::UpdatePhysicsShadowToCurrentPosition()
 T CBasePlayer::UpdatePhysicsShadowToPosition(Vector const&)
 T CBasePlayer::UpdatePlayerSound()
 T CBasePlayer::UpdateStepSound(surfacedata_t*, Vector const&, Vector const&)
 T CBasePlayer::UpdateTonemapController()
 T CBasePlayer::UpdateTransmitState()
 T CBasePlayer::UpdateUnderwaterState()
 T CBasePlayer::UsingStandardWeaponsInVehicle()
 T CBasePlayer::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CBasePlayer::VPhysicsDestroyObject()
 T CBasePlayer::VPhysicsShadowUpdate(IPhysicsObject*)
 T CBasePlayer::VPhysicsUpdate(IPhysicsObject*)
 T CBasePlayer::ValidateCurrentObserverTarget()
 T CBasePlayer::ViewPunch(QAngle const&)
 T CBasePlayer::ViewPunchReset(float)
 T CBasePlayer::WantsLagCompensationOnEntity(CBaseAnimatingOverlay const*, CUserCmd const*, CBitVec<2048> const*) const
 T CBasePlayer::WantsRoamingObserverMode() const
 T CBasePlayer::WaterMove()
 T CBasePlayer::Weapon_CanUse(CBaseCombatWeapon*)
 T CBasePlayer::Weapon_Drop(CBaseCombatWeapon*, Vector const*, Vector const*)
 T CBasePlayer::Weapon_Equip(CBaseCombatWeapon*)
 T CBasePlayer::Weapon_SetLast(CBaseCombatWeapon*)
 T CBasePlayer::Weapon_ShootPosition()
 T CBasePlayer::Weapon_ShouldSelectItem(CBaseCombatWeapon*)
 T CBasePlayer::Weapon_ShouldSetLast(CBaseCombatWeapon*, CBaseCombatWeapon*)
 T CBasePlayer::Weapon_Switch(CBaseCombatWeapon*, int)
 T CBasePlayer::YouForgotToImplementOrDeclareServerClass()
 T CBasePlayer::~CBasePlayer()
 T CBasePlayerAnimState::AnimStateLog(char const*, ...)
 T CBasePlayerAnimState::AnimStatePrintf(int, char const*, ...)
 T CBasePlayerAnimState::CBasePlayerAnimState()
 T CBasePlayerAnimState::CachePoseParameters()
 T CBasePlayerAnimState::CalcMovementPlaybackRate(bool*)
 T CBasePlayerAnimState::CalcSequenceIndex(char const*, ...)
 T CBasePlayerAnimState::CanPoseParamsConverge(int, int) const
 T CBasePlayerAnimState::CanThePlayerMove()
 T CBasePlayerAnimState::ClearAnimationLayers()
 T CBasePlayerAnimState::ClearAnimationState()
 T CBasePlayerAnimState::ComputeAimSequence()
 T CBasePlayerAnimState::ComputeMainSequence()
 T CBasePlayerAnimState::ComputePlaybackRate()
 T CBasePlayerAnimState::ComputePoseParam_BodyPitch(CStudioHdr*)
 T CBasePlayerAnimState::ComputePoseParam_BodyYaw()
 T CBasePlayerAnimState::ComputePoseParam_FlexAnim(CStudioHdr*)
 T CBasePlayerAnimState::ComputePoseParam_MoveYaw(CStudioHdr*)
 T CBasePlayerAnimState::ComputeSequences(CStudioHdr*)
 T CBasePlayerAnimState::ConvergeAngles(float, float, float, float, float&)
 T CBasePlayerAnimState::ConvergePoseParams(float, int, int)
 T CBasePlayerAnimState::DebugShowAnimState(int)
 T CBasePlayerAnimState::ForceFeetToEyes()
 T CBasePlayerAnimState::GetOuter() const
 T CBasePlayerAnimState::GetOuterAbsVelocity(Vector&) const
 T CBasePlayerAnimState::GetOuterXYSpeed() const
 T CBasePlayerAnimState::GetRenderAngles()
 T CBasePlayerAnimState::Init(CBaseAnimatingOverlay*, CModAnimConfig const&)
 T CBasePlayerAnimState::OnFeetFixedUp()
 T CBasePlayerAnimState::OnMainActivityChanged(Activity, Activity)
 T CBasePlayerAnimState::OnNewModel()
 T CBasePlayerAnimState::OptimizeLayerWeights(int, int)
 T CBasePlayerAnimState::Release()
 T CBasePlayerAnimState::ResetGroundSpeed()
 T CBasePlayerAnimState::RestartMainSequence()
 T CBasePlayerAnimState::SelectWeightedSequence(Activity) const
 T CBasePlayerAnimState::SetOuterBodyYaw(float)
 T CBasePlayerAnimState::ShouldBlendAimSequenceToIdle()
 T CBasePlayerAnimState::ShouldChangeSequences() const
 T CBasePlayerAnimState::ShouldUpdateAnimState()
 T CBasePlayerAnimState::SnapPoseParams(int, int, float, float)
 T CBasePlayerAnimState::TranslateActivity(Activity) const
 T CBasePlayerAnimState::UnTranslateActivity(Activity) const
 T CBasePlayerAnimState::Update(float, float)
 T CBasePlayerAnimState::UpdateAimSequenceLayers(float, int, bool, CSequenceTransitioner*, float)
 T CBasePlayerAnimState::UpdateAnimConfig(CModAnimConfig*)
 T CBasePlayerAnimState::UpdateFootYaws()
 T CBasePlayerAnimState::UpdateInterpolators()
 T CBasePlayerAnimState::~CBasePlayerAnimState()
 T CBaseProp::Activate()
 T CBaseProp::CalculateBlockLOS()
 T CBaseProp::DrawDebugGeometryOverlays()
 T CBaseProp::IsAlive()
 T CBaseProp::KeyValue(char const*, char const*)
 T CBaseProp::OverridePropdata()
 T CBaseProp::ParsePropData()
 T CBaseProp::Precache()
 T CBaseProp::Spawn()
 T CBasePropDoor::Activate()
 T CBasePropDoor::Blocked(CBaseEntity*)
 T CBasePropDoor::CalcDoorSounds()
 T CBasePropDoor::CheckpointDisable(bool)
 T CBasePropDoor::DisableAreaPortalThink()
 T CBasePropDoor::DoorAutoCloseThink()
 T CBasePropDoor::DoorCanClose(bool)
 T CBasePropDoor::DoorCanOpen()
 T CBasePropDoor::DoorClose()
 T CBasePropDoor::DoorCloseMoveDone()
 T CBasePropDoor::DoorOpen(CBaseEntity*)
 T CBasePropDoor::DoorOpenMoveDone()
 T CBasePropDoor::EndBlocked()
 T CBasePropDoor::FireGameEvent(IGameEvent*)
 T CBasePropDoor::GetDataDescMap()
 T CBasePropDoor::GetServerClass()
 T CBasePropDoor::HandleAnimEvent(animevent_t*)
 T CBasePropDoor::InputClose(inputdata_t&)
 T CBasePropDoor::InputLock(inputdata_t&)
 T CBasePropDoor::InputOpen(inputdata_t&)
 T CBasePropDoor::InputOpenAwayFrom(inputdata_t&)
 T CBasePropDoor::InputPlayerClose(inputdata_t&)
 T CBasePropDoor::InputPlayerOpen(inputdata_t&)
 T CBasePropDoor::InputToggle(inputdata_t&)
 T CBasePropDoor::InputUnlock(inputdata_t&)
 T CBasePropDoor::IsAbleToCloseAreaPortals() const
 T CBasePropDoor::IsCheckpointDoor() const
 T CBasePropDoor::IsCheckpointExitDoor() const
 T CBasePropDoor::IsUsableByTeam(int) const
 T CBasePropDoor::Lock(bool)
 T CBasePropDoor::ObjectCaps()
 T CBasePropDoor::OnCheckpointDoorUnlocked(CBaseEntity*)
 T CBasePropDoor::OnDoorClosed()
 T CBasePropDoor::OnDoorOpened()
 T CBasePropDoor::OnInfectedAttack()
 T CBasePropDoor::OnStartBlocked(CBaseEntity*)
 T CBasePropDoor::Precache()
 T CBasePropDoor::RescueDisable(bool)
 T CBasePropDoor::Spawn()
 T CBasePropDoor::StartBlocked(CBaseEntity*)
 T CBasePropDoor::TestCollision(Ray_t const&, unsigned int, CGameTrace&)
 T CBasePropDoor::TryOpenClose(CBaseEntity*, CBaseEntity*, int)
 T CBasePropDoor::Unlock(bool)
 T CBasePropDoor::UpdateAreaPortals(bool)
 T CBasePropDoor::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CBasePropDoor::VersusRescueDisable()
 T CBasePropDoor::YouForgotToImplementOrDeclareServerClass()
 T CBasePropDoor::~CBasePropDoor()
 T CBaseResourcePrecacher::CBaseResourcePrecacher(PrecacheSystem_t, char const*)
 T CBaseResourcePrecacher::CacheResource(PrecacheResourceType_t, char const*, bool, ResourceList_t__*, int*)
 T CBaseResourcePrecacher::CacheResourceFile(char const*, bool, ResourceList_t__*)
 T CBaseResourcePrecacher::PrecachePhysicsSounds(char const*, bool, ResourceList_t__*)
 T CBaseServerVehicle::CBaseServerVehicle()
 T CBaseServerVehicle::CacheEntryExitPoints()
 T CBaseServerVehicle::CheckExitPoint(float, int, Vector*)
 T CBaseServerVehicle::ClassifyPassenger(CBaseCombatCharacter*, Class_T)
 T CBaseServerVehicle::FindOrCreatePassengerRole(string_t, int*)
 T CBaseServerVehicle::FinishMove(CBasePlayer*, CUserCmd*, CMoveData*)
 T CBaseServerVehicle::GetDriver()
 T CBaseServerVehicle::GetEntryAnimForPoint(Vector const&)
 T CBaseServerVehicle::GetExitAnimToUse(Vector&, bool&)
 T CBaseServerVehicle::GetLocalAttachmentAtTime(int, int, float, Vector*, QAngle*)
 T CBaseServerVehicle::GetPassenger(int)
 T CBaseServerVehicle::GetPassengerExitPoint(int, Vector*, QAngle*)
 T CBaseServerVehicle::GetPassengerRole(CBaseCombatCharacter*)
 T CBaseServerVehicle::GetPassengerSeatPoint(int, Vector*, QAngle*)
 T CBaseServerVehicle::GetVehicleController()
 T CBaseServerVehicle::GetVehicleEnt()
 T CBaseServerVehicle::GetVehicleParams()
 T CBaseServerVehicle::GetVehicleViewPosition(int, Vector*, QAngle*, float*)
 T CBaseServerVehicle::HandleEntryExitFinish(bool, bool)
 T CBaseServerVehicle::HandlePassengerEntry(CBaseCombatCharacter*, bool)
 T CBaseServerVehicle::HandlePassengerExit(CBaseCombatCharacter*)
 T CBaseServerVehicle::Initialize(char const*)
 T CBaseServerVehicle::IsPassengerDamagable(int)
 T CBaseServerVehicle::IsPassengerEntering()
 T CBaseServerVehicle::IsPassengerExiting()
 T CBaseServerVehicle::IsPassengerUsingStandardWeapons(int)
 T CBaseServerVehicle::IsPassengerVisible(int)
 T CBaseServerVehicle::IsVehicleBodyInWater()
 T CBaseServerVehicle::IsVehicleUpright()
 T CBaseServerVehicle::ItemPostFrame(CBasePlayer*)
 T CBaseServerVehicle::NPC_AddPassenger(CBaseCombatCharacter*, string_t, int)
 T CBaseServerVehicle::NPC_AimPrimaryWeapon(Vector)
 T CBaseServerVehicle::NPC_AimSecondaryWeapon(Vector)
 T CBaseServerVehicle::NPC_Brake()
 T CBaseServerVehicle::NPC_CanDrive()
 T CBaseServerVehicle::NPC_DriveVehicle()
 T CBaseServerVehicle::NPC_GetAvailableSeat(CBaseCombatCharacter*, string_t, VehicleSeatQuery_e)
 T CBaseServerVehicle::NPC_GetPassengerInSeat(int, int)
 T CBaseServerVehicle::NPC_GetPassengerSeatAnims(CBaseCombatCharacter*, PassengerSeatAnimType_t)
 T CBaseServerVehicle::NPC_GetPassengerSeatAttachment(CBaseCombatCharacter*)
 T CBaseServerVehicle::NPC_GetPassengerSeatPosition(CBaseCombatCharacter*, Vector*, QAngle*)
 T CBaseServerVehicle::NPC_GetPassengerSeatPositionLocal(CBaseCombatCharacter*, Vector*, QAngle*)
 T CBaseServerVehicle::NPC_HasAvailableSeat(string_t)
 T CBaseServerVehicle::NPC_HasPrimaryWeapon()
 T CBaseServerVehicle::NPC_HasSecondaryWeapon()
 T CBaseServerVehicle::NPC_PrimaryFire()
 T CBaseServerVehicle::NPC_RemovePassenger(CBaseCombatCharacter*)
 T CBaseServerVehicle::NPC_SecondaryFire()
 T CBaseServerVehicle::NPC_SetDriver(CNPC_VehicleDriver*)
 T CBaseServerVehicle::NPC_ThrottleCenter()
 T CBaseServerVehicle::NPC_ThrottleForward()
 T CBaseServerVehicle::NPC_ThrottleReverse()
 T CBaseServerVehicle::NPC_TurnCenter()
 T CBaseServerVehicle::NPC_TurnLeft(float)
 T CBaseServerVehicle::NPC_TurnRight(float)
 T CBaseServerVehicle::ParseEntryExitAnims()
 T CBaseServerVehicle::ParseExitAnim(KeyValues*, bool)
 T CBaseServerVehicle::ParseNPCPassengerSeat(KeyValues*, CPassengerSeat*)
 T CBaseServerVehicle::ParseNPCRoles(KeyValues*)
 T CBaseServerVehicle::PassengerDamageModifier(CTakeDamageInfo const&)
 T CBaseServerVehicle::PassengerShouldReceiveDamage(CTakeDamageInfo&)
 T CBaseServerVehicle::PlayCrashSound(float)
 T CBaseServerVehicle::PlayLoopingSound(char const*)
 T CBaseServerVehicle::PlaySound(vehiclesound)
 T CBaseServerVehicle::Precache()
 T CBaseServerVehicle::ProcessMovement(CBasePlayer*, CMoveData*)
 T CBaseServerVehicle::RecalculateSoundGear(vbs_sound_update_t&)
 T CBaseServerVehicle::ReloadScript()
 T CBaseServerVehicle::RestorePassengerInfo()
 T CBaseServerVehicle::SetPassenger(int, CBaseCombatCharacter*)
 T CBaseServerVehicle::SetVehicle(CBaseEntity*)
 T CBaseServerVehicle::SetupMove(CBasePlayer*, CUserCmd*, IMoveHelper*, CMoveData*)
 T CBaseServerVehicle::SoundShutdown(float)
 T CBaseServerVehicle::SoundStart()
 T CBaseServerVehicle::SoundStartDisabled()
 T CBaseServerVehicle::SoundState_ChooseState(vbs_sound_update_t&)
 T CBaseServerVehicle::SoundState_OnNewState(sound_states)
 T CBaseServerVehicle::SoundUpdate(vbs_sound_update_t&)
 T CBaseServerVehicle::StartEngineRumble()
 T CBaseServerVehicle::StopEngineRumble()
 T CBaseServerVehicle::StopSound(vehiclesound)
 T CBaseServerVehicle::Weapon_PrimaryCanFireAt()
 T CBaseServerVehicle::Weapon_PrimaryRanges(float*, float*)
 T CBaseServerVehicle::Weapon_SecondaryCanFireAt()
 T CBaseServerVehicle::Weapon_SecondaryRanges(float*, float*)
 T CBaseServerVehicle::~CBaseServerVehicle()
 T CBaseShotgun::AbortReload()
 T CBaseShotgun::CBaseShotgun()
 T CBaseShotgun::CheckQueuedReload()
 T CBaseShotgun::CheckReload()
 T CBaseShotgun::DebugReload()
 T CBaseShotgun::Drop(Vector const&)
 T CBaseShotgun::FinishReload()
 T CBaseShotgun::GetDataDescMap()
 T CBaseShotgun::GetDeployActivity()
 T CBaseShotgun::GetReloadDurationModifier()
 T CBaseShotgun::GetServerClass()
 T CBaseShotgun::GetViewmodelMeleeActivity()
 T CBaseShotgun::Holster(CBaseCombatWeapon*)
 T CBaseShotgun::IsFullyAutomatic() const
 T CBaseShotgun::IsSingleReload() const
 T CBaseShotgun::ItemBusyFrame()
 T CBaseShotgun::ItemPostFrame()
 T CBaseShotgun::PlayReloadAnim(Activity, PlayerAnimEvent_t, int)
 T CBaseShotgun::Reload()
 T CBaseShotgun::SendWeaponAnim(int)
 T CBaseShotgun::WeaponIdle()
 T CBaseShotgun::YouForgotToImplementOrDeclareServerClass()
 T CBaseShotgun::~CBaseShotgun()
 T CBaseTempEntity::CBaseTempEntity(char const*)
 T CBaseTempEntity::Create(IRecipientFilter&, float)
 T CBaseTempEntity::GetList()
 T CBaseTempEntity::GetName()
 T CBaseTempEntity::GetNext()
 T CBaseTempEntity::GetServerClass()
 T CBaseTempEntity::Precache()
 T CBaseTempEntity::PrecacheTempEnts()
 T CBaseTempEntity::Test(Vector const&, QAngle const&)
 T CBaseTempEntity::YouForgotToImplementOrDeclareServerClass()
 T CBaseTempEntity::~CBaseTempEntity()
 T CBaseTerrorIssue::CanCallVote(int, char const*, char*)
 T CBaseTerrorIssue::CanTeamCallVote(int) const
 T CBaseTerrorIssue::CountPotentialVoters()
 T CBaseTerrorIssue::IsAllyRestrictedVote()
 T CBaseTerrorIssue::IsStartSpawnOnlyVote()
 T CBaseToggle::AngularMove(QAngle const&, float)
 T CBaseToggle::AxisDelta(int, QAngle const&, QAngle const&)
 T CBaseToggle::AxisDir()
 T CBaseToggle::CBaseToggle()
 T CBaseToggle::GetDataDescMap()
 T CBaseToggle::GetDelay()
 T CBaseToggle::GetGroundVelocityToApply(Vector&)
 T CBaseToggle::GetServerClass()
 T CBaseToggle::IsLockedByMaster()
 T CBaseToggle::KeyValue(char const*, Vector)
 T CBaseToggle::KeyValue(char const*, char const*)
 T CBaseToggle::KeyValue(char const*, float)
 T CBaseToggle::LinearMove(Vector const&, float)
 T CBaseToggle::MoveDone()
 T CBaseToggle::YouForgotToImplementOrDeclareServerClass()
 T CBaseToggle::~CBaseToggle()
 T CBaseTrigger::Activate()
 T CBaseTrigger::CBaseTrigger()
 T CBaseTrigger::Disable()
 T CBaseTrigger::DrawDebugTextOverlays()
 T CBaseTrigger::EndTouch(CBaseEntity*)
 T CBaseTrigger::GetDataDescMap()
 T CBaseTrigger::GetServerClass()
 T CBaseTrigger::InitTrigger()
 T CBaseTrigger::InputDisable(inputdata_t&)
 T CBaseTrigger::InputEnable(inputdata_t&)
 T CBaseTrigger::InputEndTouch(inputdata_t&)
 T CBaseTrigger::InputStartTouch(inputdata_t&)
 T CBaseTrigger::InputToggle(inputdata_t&)
 T CBaseTrigger::InputTouchTest(inputdata_t&)
 T CBaseTrigger::IsTouching(CBaseEntity*)
 T CBaseTrigger::PassesTriggerFilters(CBaseEntity*)
 T CBaseTrigger::PostClientActive()
 T CBaseTrigger::Spawn()
 T CBaseTrigger::StartTouch(CBaseEntity*)
 T CBaseTrigger::UpdateOnRemove()
 T CBaseTrigger::UsesFilter()
 T CBaseTrigger::YouForgotToImplementOrDeclareServerClass()
 T CBaseTrigger::~CBaseTrigger()
 T CBaseVPhysicsTrigger::Activate()
 T CBaseVPhysicsTrigger::InputDisable(inputdata_t&)
 T CBaseVPhysicsTrigger::InputEnable(inputdata_t&)
 T CBaseVPhysicsTrigger::InputToggle(inputdata_t&)
 T CBaseVPhysicsTrigger::PassesTriggerFilters(CBaseEntity*)
 T CBaseVPhysicsTrigger::Spawn()
 T CBaseViewModel::AddEffects(int)
 T CBaseViewModel::AddViewModelBob(CBasePlayer*, Vector&, QAngle&)
 T CBaseViewModel::CBaseViewModel()
 T CBaseViewModel::CalcViewModelLag(Vector&, QAngle&, QAngle&)
 T CBaseViewModel::CalcViewModelView(CBasePlayer*, Vector const&, QAngle const&)
 T CBaseViewModel::GetDataDescMap()
 T CBaseViewModel::GetOwner()
 T CBaseViewModel::GetOwningWeapon()
 T CBaseViewModel::GetServerClass()
 T CBaseViewModel::IsSelfAnimating()
 T CBaseViewModel::IsViewModel() const
 T CBaseViewModel::IsViewable()
 T CBaseViewModel::ObjectCaps()
 T CBaseViewModel::Precache()
 T CBaseViewModel::RemoveEffects(int)
 T CBaseViewModel::SendViewModelMatchingSequence(int)
 T CBaseViewModel::SetIndex(int)
 T CBaseViewModel::SetOwner(CBaseEntity*)
 T CBaseViewModel::SetTransmit(CCheckTransmitInfo*, bool)
 T CBaseViewModel::SetWeaponModel(char const*, CBaseCombatWeapon*)
 T CBaseViewModel::ShouldTransmit(CCheckTransmitInfo const*)
 T CBaseViewModel::Spawn()
 T CBaseViewModel::SpawnControlPanels()
 T CBaseViewModel::UpdateOnRemove()
 T CBaseViewModel::UpdateTransmitState()
 T CBaseViewModel::YouForgotToImplementOrDeclareServerClass()
 T CBaseViewModel::~CBaseViewModel()
 T CBeam::BeamCreate(char const*, float)
 T CBeam::BeamDamage(CGameTrace*)
 T CBeam::BeamInit(char const*, float)
 T CBeam::CBeam()
 T CBeam::DoSparks(Vector const&, Vector const&)
 T CBeam::DrawDebugTextOverlays()
 T CBeam::EntsInit(CBaseEntity*, CBaseEntity*)
 T CBeam::GetAbsEndPos() const
 T CBeam::GetAbsStartPos() const
 T CBeam::GetDataDescMap()
 T CBeam::GetDecalName()
 T CBeam::GetServerClass()
 T CBeam::InputColorBlueValue(inputdata_t&)
 T CBeam::InputColorGreenValue(inputdata_t&)
 T CBeam::InputColorRedValue(inputdata_t&)
 T CBeam::InputNoise(inputdata_t&)
 T CBeam::InputWidth(inputdata_t&)
 T CBeam::ObjectCaps()
 T CBeam::PointsInit(Vector const&, Vector const&)
 T CBeam::Precache()
 T CBeam::RandomTargetname(char const*)
 T CBeam::RelinkBeam()
 T CBeam::SetAbsEndPos(Vector const&)
 T CBeam::SetAbsStartPos(Vector const&)
 T CBeam::SetBeamFlags(int)
 T CBeam::SetEndEntity(CBaseEntity*)
 T CBeam::SetModel(char const*)
 T CBeam::SetStartEntity(CBaseEntity*)
 T CBeam::SetTransmit(CCheckTransmitInfo*, bool)
 T CBeam::SetType(int)
 T CBeam::ShouldTransmit(CCheckTransmitInfo const*)
 T CBeam::Spawn()
 T CBeam::UpdateTransmitState()
 T CBeam::WorldSpaceCenter() const
 T CBeam::YouForgotToImplementOrDeclareServerClass()
 T CBeam::~CBeam()
 T CBeamSpotlight::CBeamSpotlight()
 T CBeamSpotlight::GetDataDescMap()
 T CBeamSpotlight::GetServerClass()
 T CBeamSpotlight::InputReverse(inputdata_t&)
 T CBeamSpotlight::InputStart(inputdata_t&)
 T CBeamSpotlight::InputStop(inputdata_t&)
 T CBeamSpotlight::InputTurnOff(inputdata_t&)
 T CBeamSpotlight::InputTurnOn(inputdata_t&)
 T CBeamSpotlight::KeyValue(char const*, char const*)
 T CBeamSpotlight::Precache()
 T CBeamSpotlight::RecalcRotation()
 T CBeamSpotlight::Spawn()
 T CBeamSpotlight::UpdateTransmitState()
 T CBeamSpotlight::YouForgotToImplementOrDeclareServerClass()
 T CBeamSpotlight::~CBeamSpotlight()
 T CBitRead::ReadBitAngle(int)
 T CBitRead::ReadBitCoord()
 T CBitRead::ReadBitVec3Coord(Vector&)
 T CBlood::BloodPosition(CBaseEntity*)
 T CBlood::GetDataDescMap()
 T CBlood::InputEmitBlood(inputdata_t&)
 T CBlood::KeyValue(char const*, char const*)
 T CBlood::Precache()
 T CBlood::Spawn()
 T CBlood::~CBlood()
 T CBloodSplat::Think()
 T CBloodSplat::~CBloodSplat()
 T CBoneCache::CreateResource(bonecacheparams_t const&)
 T CBoneCache::GetCachedBone(int)
 T CBoneCache::IsValid(float, float)
 T CBoneCache::ReadCachedBonePointers(matrix3x4_t**, int)
 T CBoneCache::UpdateBones(matrix3x4_t const*, int, float)
 T CBoneFollower::GetDataDescMap()
 T CBoneFollower::GetServerClass()
 T CBoneFollower::Init(CBaseEntity*, char const*, solid_t&, Vector const&, QAngle const&)
 T CBoneFollower::ObjectCaps()
 T CBoneFollower::TestCollision(Ray_t const&, unsigned int, CGameTrace&)
 T CBoneFollower::Touch(CBaseEntity*)
 T CBoneFollower::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*)
 T CBoneFollower::UpdateTransmitState()
 T CBoneFollower::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CBoneFollower::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CBoneFollower::VPhysicsFriction(IPhysicsObject*, float, int, int)
 T CBoneFollower::VPhysicsShadowCollision(int, gamevcollisionevent_t*)
 T CBoneFollower::VPhysicsUpdate(IPhysicsObject*)
 T CBoneFollower::YouForgotToImplementOrDeclareServerClass()
 T CBoneFollower::~CBoneFollower()
 T CBoneFollowerManager::AddBoneFollower(CBaseAnimating*, char const*, solid_t*)
 T CBoneFollowerManager::CBoneFollowerManager()
 T CBoneFollowerManager::CreatePhysicsFollower(CBaseAnimating*, physfollower_t&, char const*, solid_t*)
 T CBoneFollowerManager::DestroyBoneFollowers()
 T CBoneFollowerManager::GetBoneFollower(int)
 T CBoneFollowerManager::UpdateBoneFollowers(CBaseAnimating*)
 T CBoneFollowerManager::~CBoneFollowerManager()
 T CBoneSetupMemoryPool<QuaternionAligned>::~CBoneSetupMemoryPool()
 T CBoneSetupMemoryPool<Vector>::~CBoneSetupMemoryPool()
 T CBoneSetupMemoryPool<matrix3x4_t>::~CBoneSetupMemoryPool()
 T CBoomerBlunderAwardTemplate::CBoomerBlunderAwardTemplate(int)
 T CBoomerBlunderAwardTemplate::FireGameEvent(IGameEvent*)
 T CBoomerBlunderAwardTemplate::OnCreate()
 T CBoomerBlunderAwardTemplate::~CBoomerBlunderAwardTemplate()
 T CBoomerClaw::GetDataDescMap()
 T CBoomerClaw::GetServerClass()
 T CBoomerClaw::GetWeaponID() const
 T CBoomerClaw::HasSecondaryAttack()
 T CBoomerClaw::PrimaryAttack()
 T CBoomerClaw::SecondaryAttack()
 T CBoomerClaw::YouForgotToImplementOrDeclareServerClass()
 T CBoomerClaw::~CBoomerClaw()
 T CBoomerComboAwardTemplate::CBoomerComboAwardTemplate(int)
 T CBoomerComboAwardTemplate::FireGameEvent(IGameEvent*)
 T CBoomerComboAwardTemplate::OnCreate()
 T CBoomerComboAwardTemplate::~CBoomerComboAwardTemplate()
 T CBotCmd::~CBotCmd()
 T CBotDoorEnumerator::EnumElement(IHandleEntity*)
 T CBreakModelsPrecached::BreakLessFunc(CBreakModelsPrecached::breakable_precache_t const&, CBreakModelsPrecached::breakable_precache_t const&)
 T CBreakModelsPrecached::LevelShutdownPostEntity()
 T CBreakModelsPrecached::~CBreakModelsPrecached()
 T CBreakParser::ParseKeyValue(void*, char const*, char const*)
 T CBreakParser::ParseModelName(breakmodel_t*, char const*)
 T CBreakParser::SetDefaults(void*)
 T CBreakable::BreakTouch(CBaseEntity*)
 T CBreakable::CreateVPhysics()
 T CBreakable::DamageDecal(int, int)
 T CBreakable::DamageSound()
 T CBreakable::Die()
 T CBreakable::DrawDebugTextOverlays()
 T CBreakable::GetBasePropData()
 T CBreakable::GetBreakableCount()
 T CBreakable::GetBreakableModel()
 T CBreakable::GetBreakableSkin()
 T CBreakable::GetDataDescMap()
 T CBreakable::GetDmgModBullet()
 T CBreakable::GetDmgModClub()
 T CBreakable::GetDmgModExplosive()
 T CBreakable::GetDmgModFire()
 T CBreakable::GetExplosionBuildupSound()
 T CBreakable::GetExplosionDelay()
 T CBreakable::GetExplosionType()
 T CBreakable::GetExplosiveDamage()
 T CBreakable::GetExplosiveRadius()
 T CBreakable::GetMaxBreakableSize()
 T CBreakable::GetMultiplayerBreakMode() const
 T CBreakable::GetPhysicsDamageTable()
 T CBreakable::GetPhysicsMode()
 T CBreakable::GetServerClass()
 T CBreakable::HasInteraction(propdata_interactions_t)
 T CBreakable::HasPhysicsAttacker(float)
 T CBreakable::InputAddHealth(inputdata_t&)
 T CBreakable::InputBreak(inputdata_t&)
 T CBreakable::InputRemoveHealth(inputdata_t&)
 T CBreakable::InputSetHealth(inputdata_t&)
 T CBreakable::InputSetMass(inputdata_t&)
 T CBreakable::IsBreakable()
 T CBreakable::KeyValue(char const*, char const*)
 T CBreakable::MaterialSoundRandom(int, Materials, float)
 T CBreakable::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T CBreakable::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CBreakable::OnTakeDamage(CTakeDamageInfo const&)
 T CBreakable::ParsePropData()
 T CBreakable::PhysicsSolidMaskForEntity() const
 T CBreakable::Precache()
 T CBreakable::ResetOnGroundFlags()
 T CBreakable::SetBasePropData(string_t)
 T CBreakable::SetBreakableCount(int)
 T CBreakable::SetBreakableModel(string_t)
 T CBreakable::SetBreakableSkin(int)
 T CBreakable::SetDmgModBullet(float)
 T CBreakable::SetDmgModClub(float)
 T CBreakable::SetDmgModExplosive(float)
 T CBreakable::SetDmgModFire(float)
 T CBreakable::SetExplosionBuildupSound(string_t)
 T CBreakable::SetExplosionDelay(float)
 T CBreakable::SetExplosionType(explosion_t)
 T CBreakable::SetExplosiveDamage(float)
 T CBreakable::SetExplosiveRadius(float)
 T CBreakable::SetInteraction(propdata_interactions_t)
 T CBreakable::SetMaxBreakableSize(int)
 T CBreakable::SetMultiplayerBreakMode(mp_break_t)
 T CBreakable::SetPhysicsDamageTable(string_t)
 T CBreakable::SetPhysicsMode(int)
 T CBreakable::SetPropDataBlocksLOS(bool)
 T CBreakable::SetPropDataIsAIWalkable(bool)
 T CBreakable::Spawn()
 T CBreakable::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*)
 T CBreakable::UpdateHealth(int, CBaseEntity*)
 T CBreakable::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CBreakable::YouForgotToImplementOrDeclareServerClass()
 T CBreakable::~CBreakable()
 T CBreakableProp::AnimateThink()
 T CBreakableProp::Break(CBaseEntity*, CTakeDamageInfo const&)
 T CBreakableProp::BreakThink()
 T CBreakableProp::BreakablePropTouch(CBaseEntity*)
 T CBreakableProp::CBreakableProp()
 T CBreakableProp::CopyFadeFrom(CBreakableProp*)
 T CBreakableProp::Event_Killed(CTakeDamageInfo const&)
 T CBreakableProp::FindEnableMotionFixup()
 T CBreakableProp::GetAutoAimRadius()
 T CBreakableProp::GetBasePropData()
 T CBreakableProp::GetBreakableCount()
 T CBreakableProp::GetBreakableModel()
 T CBreakableProp::GetBreakableSkin()
 T CBreakableProp::GetDataDescMap()
 T CBreakableProp::GetDmgModBullet()
 T CBreakableProp::GetDmgModClub()
 T CBreakableProp::GetDmgModExplosive()
 T CBreakableProp::GetDmgModFire()
 T CBreakableProp::GetExplosionBuildupSound()
 T CBreakableProp::GetExplosionDelay()
 T CBreakableProp::GetExplosionType()
 T CBreakableProp::GetExplosiveDamage()
 T CBreakableProp::GetExplosiveRadius()
 T CBreakableProp::GetMaxBreakableSize()
 T CBreakableProp::GetMultiplayerBreakMode() const
 T CBreakableProp::GetPhysicsDamageTable()
 T CBreakableProp::GetPhysicsMode()
 T CBreakableProp::GetRootPhysicsObjectForBreak()
 T CBreakableProp::GetServerClass()
 T CBreakableProp::HandleFirstCollisionInteractions(int, gamevcollisionevent_t*)
 T CBreakableProp::HandleInteractionStick(int, gamevcollisionevent_t*)
 T CBreakableProp::HasInteraction(propdata_interactions_t)
 T CBreakableProp::HasPhysicsAttacker(float)
 T CBreakableProp::HasPreferredCarryAnglesForPlayer(CBasePlayer*)
 T CBreakableProp::Ignite(float, bool, float, bool)
 T CBreakableProp::InputAddHealth(inputdata_t&)
 T CBreakableProp::InputBreak(inputdata_t&)
 T CBreakableProp::InputDisablePhyscannonPickup(inputdata_t&)
 T CBreakableProp::InputDisablePuntSound(inputdata_t&)
 T CBreakableProp::InputEnablePhyscannonPickup(inputdata_t&)
 T CBreakableProp::InputEnablePuntSound(inputdata_t&)
 T CBreakableProp::InputRemoveHealth(inputdata_t&)
 T CBreakableProp::InputSetHealth(inputdata_t&)
 T CBreakableProp::OnAttemptPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CBreakableProp::OnBreak(Vector const&, Vector const&, CBaseEntity*)
 T CBreakableProp::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T CBreakableProp::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CBreakableProp::OnSpawnBreakProp(CBreakableProp*)
 T CBreakableProp::OnTakeDamage(CTakeDamageInfo const&)
 T CBreakableProp::OverridePropdata()
 T CBreakableProp::PhysGunLaunchAngularImpulse()
 T CBreakableProp::PhysicsSolidMaskForEntity() const
 T CBreakableProp::PlayPuntSound()
 T CBreakableProp::Precache()
 T CBreakableProp::PreferredCarryAngles()
 T CBreakableProp::RampToDefaultFadeScale()
 T CBreakableProp::SetBasePropData(string_t)
 T CBreakableProp::SetBreakableCount(int)
 T CBreakableProp::SetBreakableModel(string_t)
 T CBreakableProp::SetBreakableSkin(int)
 T CBreakableProp::SetDmgModBullet(float)
 T CBreakableProp::SetDmgModClub(float)
 T CBreakableProp::SetDmgModExplosive(float)
 T CBreakableProp::SetDmgModFire(float)
 T CBreakableProp::SetExplosionBuildupSound(string_t)
 T CBreakableProp::SetExplosionDelay(float)
 T CBreakableProp::SetExplosionType(explosion_t)
 T CBreakableProp::SetExplosiveDamage(float)
 T CBreakableProp::SetExplosiveRadius(float)
 T CBreakableProp::SetInteraction(propdata_interactions_t)
 T CBreakableProp::SetMaxBreakableSize(int)
 T CBreakableProp::SetMultiplayerBreakMode(mp_break_t)
 T CBreakableProp::SetPhysicsAttacker(CBasePlayer*, float)
 T CBreakableProp::SetPhysicsDamageTable(string_t)
 T CBreakableProp::SetPhysicsMode(int)
 T CBreakableProp::SetPropDataBlocksLOS(bool)
 T CBreakableProp::SetPropDataIsAIWalkable(bool)
 T CBreakableProp::Spawn()
 T CBreakableProp::StickAtPosition(Vector const&, Vector const&, QAngle const&)
 T CBreakableProp::UpdateHealth(int, CBaseEntity*)
 T CBreakableProp::UpdateOnRemove()
 T CBreakableProp::YouForgotToImplementOrDeclareServerClass()
 T CBreakableProp::~CBreakableProp()
 T CBreakableSurface::BreakPane(int, int)
 T CBreakableSurface::BreakThink()
 T CBreakableSurface::CreateShards(Vector const&, QAngle const&, Vector const&, Vector const&, float, float, int)
 T CBreakableSurface::Die(CBaseEntity*, Vector const&)
 T CBreakableSurface::DropPane(int, int)
 T CBreakableSurface::GetDataDescMap()
 T CBreakableSurface::GetServerClass()
 T CBreakableSurface::InputShatter(inputdata_t&)
 T CBreakableSurface::OnTakeDamage(CTakeDamageInfo const&)
 T CBreakableSurface::PhysicsSolidMaskForEntity() const
 T CBreakableSurface::Precache()
 T CBreakableSurface::RecalcSupport(int, int)
 T CBreakableSurface::ShatterPane(int, int, Vector const&, Vector const&)
 T CBreakableSurface::Spawn()
 T CBreakableSurface::SurfaceTouch(CBaseEntity*)
 T CBreakableSurface::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*)
 T CBreakableSurface::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CBreakableSurface::YouForgotToImplementOrDeclareServerClass()
 T CBreakableSurface::~CBreakableSurface()
 T CBroadcastRecipientFilter::~CBroadcastRecipientFilter()
 T CBubbling::FizzThink()
 T CBubbling::GetDataDescMap()
 T CBubbling::InputActivate(inputdata_t&)
 T CBubbling::InputDeactivate(inputdata_t&)
 T CBubbling::InputSetCurrent(inputdata_t&)
 T CBubbling::InputSetDensity(inputdata_t&)
 T CBubbling::InputSetFrequency(inputdata_t&)
 T CBubbling::InputToggle(inputdata_t&)
 T CBubbling::Precache()
 T CBubbling::Spawn()
 T CBubbling::Toggle()
 T CBubbling::~CBubbling()
 T CBulletsTraceFilter::ShouldHitEntity(IHandleEntity*, int)
 T CButtonTimed::Disable()
 T CButtonTimed::Enable()
 T CButtonTimed::GetDataDescMap()
 T CButtonTimed::InputDisable(inputdata_t&)
 T CButtonTimed::InputEnable(inputdata_t&)
 T CButtonTimed::ObjectCaps()
 T CButtonTimed::Spawn()
 T CButtonTimed::StopUse()
 T CButtonTimed::UseThink()
 T CButtonTimed::UseTimed(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CButtonTimed::~CButtonTimed()
 T CCSGameMovement::AirMove()
 T CCSGameMovement::CCSGameMovement()
 T CCSGameMovement::CanAccelerate()
 T CCSGameMovement::CanUnduck()
 T CCSGameMovement::CheckForLadders(bool)
 T CCSGameMovement::CheckJumpButton()
 T CCSGameMovement::CheckParameters()
 T CCSGameMovement::CheckStacking()
 T CCSGameMovement::ClimbSpeed() const
 T CCSGameMovement::ComputeAngles()
 T CCSGameMovement::ComputeSpeeds()
 T CCSGameMovement::DecayPunchAngle()
 T CCSGameMovement::Duck()
 T CCSGameMovement::FinishDuck()
 T CCSGameMovement::FinishUnDuck()
 T CCSGameMovement::GetVelocityModifier()
 T CCSGameMovement::HandleDuckingSpeedCrop()
 T CCSGameMovement::HandleFastDuck(bool)
 T CCSGameMovement::LadderDistance() const
 T CCSGameMovement::LadderLateralMultiplier() const
 T CCSGameMovement::LadderMask() const
 T CCSGameMovement::LadderMove()
 T CCSGameMovement::MaintainAutoDuckJump()
 T CCSGameMovement::OnCrouchStart()
 T CCSGameMovement::OnLadder(CGameTrace&)
 T CCSGameMovement::PlayerMove()
 T CCSGameMovement::PlayerSolidMask(bool, CBasePlayer*) const
 T CCSGameMovement::ProcessMovement(CBasePlayer*, CMoveData*)
 T CCSGameMovement::ReduceTimers()
 T CCSGameMovement::WalkMove()
 T CCSGameMovement::~CCSGameMovement()
 T CCSGameRules::AIClassText(int)
 T CCSGameRules::BombRoundEndCheck(bool)
 T CCSGameRules::CCSGameRules()
 T CCSGameRules::CheckFragLimit()
 T CCSGameRules::CheckFreezePeriodExpired()
 T CCSGameRules::CheckGameOver()
 T CCSGameRules::CheckLevelInitialized()
 T CCSGameRules::CheckMapConditions()
 T CCSGameRules::CheckMaxRounds()
 T CCSGameRules::CheckRestartRound()
 T CCSGameRules::CheckRoundTimeExpired()
 T CCSGameRules::CheckWinConditions()
 T CCSGameRules::CheckWinLimit()
 T CCSGameRules::CleanUpMap()
 T CCSGameRules::ClientCommand(CBaseEntity*, CCommand const&)
 T CCSGameRules::ClientDisconnected(edict_t*)
 T CCSGameRules::ClientSettingsChanged(CBasePlayer*)
 T CCSGameRules::CreateCustomNetworkStringTables()
 T CCSGameRules::CreateStandardEntities()
 T CCSGameRules::DeathNotice(CBasePlayer*, CTakeDamageInfo const&)
 T CCSGameRules::DeathNoticeForEntity(CBaseCombatCharacter*, CTakeDamageInfo const&)
 T CCSGameRules::DefaultFOV()
 T CCSGameRules::DoesEntityBlockExplosions(CBaseEntity*) const
 T CCSGameRules::EndGameFrame()
 T CCSGameRules::EndRound()
 T CCSGameRules::FAllowNPCs()
 T CCSGameRules::FPlayerCanRespawn(CBasePlayer*)
 T CCSGameRules::FShouldSwitchWeapon(CBasePlayer*, CBaseCombatWeapon*)
 T CCSGameRules::FlPlayerFallDamage(CBasePlayer*)
 T CCSGameRules::FlPlayerFallDeathDoesScreenFade(CBasePlayer*)
 T CCSGameRules::GetAllowWeaponSwitch()
 T CCSGameRules::GetAmountOfEntityVisible(Vector&, CBaseEntity*)
 T CCSGameRules::GetBuyTimeLength() const
 T CCSGameRules::GetChatFormat(bool, CBasePlayer*)
 T CCSGameRules::GetChatLocation(bool, CBasePlayer*)
 T CCSGameRules::GetChatPrefix(bool, CBasePlayer*)
 T CCSGameRules::GetEncryptionKey()
 T CCSGameRules::GetExplosionDamageAdjustment(Vector&, Vector&, CBaseEntity*)
 T CCSGameRules::GetGameDescription()
 T CCSGameRules::GetNextBestWeapon(CBaseCombatCharacter*, CBaseCombatWeapon*)
 T CCSGameRules::GetPlayerSpawnSpot(CBasePlayer*)
 T CCSGameRules::GetViewVectors() const
 T CCSGameRules::GiveC4()
 T CCSGameRules::GoToIntermission()
 T CCSGameRules::InitDefaultAIRelationships()
 T CCSGameRules::InitializePlayerCounts(int&, int&, int&, int&)
 T CCSGameRules::IsBombDefuseMap() const
 T CCSGameRules::IsFreezePeriod() const
 T CCSGameRules::IsLogoMap() const
 T CCSGameRules::IsSpawnPointValid(CBaseEntity*, CBasePlayer*)
 T CCSGameRules::IsThereABomb()
 T CCSGameRules::IsThereABomber()
 T CCSGameRules::LevelInitPostEntity()
 T CCSGameRules::LevelInitPreEntity()
 T CCSGameRules::LevelShutdown()
 T CCSGameRules::MoveHumansToHumanTeam()
 T CCSGameRules::NeededPlayersCheck(bool&)
 T CCSGameRules::PlayTextureSounds()
 T CCSGameRules::PlayerKilled(CBasePlayer*, CTakeDamageInfo const&)
 T CCSGameRules::PlayerSpawn(CBasePlayer*)
 T CCSGameRules::PlayersAllowedToAttack() const
 T CCSGameRules::PopulateDeathEvent(IGameEvent*, CBaseEntity const*, CBaseCombatCharacter const*, CTakeDamageInfo const&)
 T CCSGameRules::RadiusDamage(CTakeDamageInfo const&, Vector const&, float, int, CBaseEntity*)
 T CCSGameRules::RadiusDamage(CTakeDamageInfo const&, Vector const&, float, int, bool)
 T CCSGameRules::ReadMultiplayCvars()
 T CCSGameRules::RestartRound()
 T CCSGameRules::SetAllowWeaponSwitch(bool)
 T CCSGameRules::SetDefaultPlayerTeam(CBasePlayer*)
 T CCSGameRules::ShouldCollide(int, int)
 T CCSGameRules::ShowSpawnPoints()
 T CCSGameRules::TeamFull(int)
 T CCSGameRules::TerminateRound(float, int)
 T CCSGameRules::Think()
 T CCSGameRules::UpdateClientData(CBasePlayer*)
 T CCSGameRules::UpdateTeamScores()
 T CCSGameRules::UploadGameStats()
 T CCSGameRules::VIPRoundEndCheck(bool)
 T CCSGameRules::~CCSGameRules()
 T CCSGameRulesProxy::GetServerClass()
 T CCSGameRulesProxy::YouForgotToImplementOrDeclareServerClass()
 T CCSGameRulesProxy::~CCSGameRulesProxy()
 T CCSHLTVDirector::CreateShotFromEvent(CGameEvent*)
 T CCSHLTVDirector::GetModEvents()
 T CCSHLTVDirector::SetHLTVServer(IHLTVServer*)
 T CCSHLTVDirector::~CCSHLTVDirector()
 T CCSPlayer::AddAccount(int, bool)
 T CCSPlayer::AllowDamage(CTakeDamageInfo const&)
 T CCSPlayer::ApplyDeafnessEffect()
 T CCSPlayer::AutoSelectTeam()
 T CCSPlayer::Blind(float, float, float)
 T CCSPlayer::BumpWeapon(CBaseCombatWeapon*)
 T CCSPlayer::CCSPlayer()
 T CCSPlayer::CSAnim_CanMove()
 T CCSPlayer::CSAnim_GetActiveWeapon()
 T CCSPlayer::CSWeaponDrop(CBaseCombatWeapon*, bool, bool)
 T CCSPlayer::CanAttack() const
 T CCSPlayer::CanChangeName() const
 T CCSPlayer::CanGrabLadder(Vector const&, Vector const&)
 T CCSPlayer::CanUseFlashlight() const
 T CCSPlayer::ChangeName(char const*)
 T CCSPlayer::ChangeTeam(int)
 T CCSPlayer::CheatImpulseCommands(int)
 T CCSPlayer::CheckTKPunishment()
 T CCSPlayer::ClientCommand(CCommand const&)
 T CCSPlayer::CreateNoise(float)
 T CCSPlayer::CreateRagdollEntity(CTakeDamageInfo const&)
 T CCSPlayer::CreateViewModel(int)
 T CCSPlayer::Deafen(float, float, float)
 T CCSPlayer::DeathSound(CTakeDamageInfo const&)
 T CCSPlayer::DoAnimationEvent(PlayerAnimEvent_t, int)
 T CCSPlayer::DoBloodEffect(float, CTakeDamageInfo const&, Vector const&, CGameTrace*)
 T CCSPlayer::DoesPlayerGetRoundStartMoney()
 T CCSPlayer::DropPistol()
 T CCSPlayer::DropRifle()
 T CCSPlayer::DropWeapons(bool)
 T CCSPlayer::EmitPrivateSound(char const*)
 T CCSPlayer::EntSelectSpawnPoint()
 T CCSPlayer::Event_Killed(CTakeDamageInfo const&)
 T CCSPlayer::FindUseEntity(float, float, bool*)
 T CCSPlayer::FirePlayerHurtEvent(CTakeDamageInfo const&)
 T CCSPlayer::FlashlightIsOn()
 T CCSPlayer::FlashlightTurnOff(bool)
 T CCSPlayer::FlashlightTurnOn(bool)
 T CCSPlayer::GetActiveCSWeapon() const
 T CCSPlayer::GetAdjustedDamage(CTakeDamageInfo const&, float, float, bool)
 T CCSPlayer::GetBulletGroup()
 T CCSPlayer::GetCSWeapon(int) const
 T CCSPlayer::GetDataDescMap()
 T CCSPlayer::GetGroundSurface() const
 T CCSPlayer::GetHealthBuffer() const
 T CCSPlayer::GetIntoGame()
 T CCSPlayer::GetLastGroundOrLadderPosition() const
 T CCSPlayer::GetNextObserverSearchStartPoint(bool)
 T CCSPlayer::GetRagdollType() const
 T CCSPlayer::GetServerClass()
 T CCSPlayer::GetSoundEmissionOrigin() const
 T CCSPlayer::GiveDefaultItems()
 T CCSPlayer::GiveNamedItem(char const*, int)
 T CCSPlayer::HandleAnimEvent(animevent_t*)
 T CCSPlayer::HandleCommand_JoinClass(int)
 T CCSPlayer::HandleCommand_JoinTeam(int, char const*, bool)
 T CCSPlayer::HandleRadioAliasCommands(char const*)
 T CCSPlayer::HasC4() const
 T CCSPlayer::HasSecondaryWeapon()
 T CCSPlayer::HasShield() const
 T CCSPlayer::HintMessage(char const*, bool, bool, bool)
 T CCSPlayer::InitVCollision(Vector const&, Vector const&)
 T CCSPlayer::InitialSpawn()
 T CCSPlayer::Instance(int)
 T CCSPlayer::IsBeingGivenItem() const
 T CCSPlayer::IsFootstepAudible(float, bool) const
 T CCSPlayer::IsImmobilized() const
 T CCSPlayer::IsIncapacitated() const
 T CCSPlayer::IsProgressBarActive() const
 T CCSPlayer::IsShieldDrawn() const
 T CCSPlayer::IsUseableEntity(CBaseEntity*, unsigned int)
 T CCSPlayer::IsVIP() const
 T CCSPlayer::KickBack(float, float, float, float, float, float, int)
 T CCSPlayer::ListPlayers()
 T CCSPlayer::MarkAsNotReceivingMoneyNextRound()
 T CCSPlayer::ModifyOrAppendPlayerCriteria(AI_CriteriaSet&)
 T CCSPlayer::MoveToNextIntroCamera()
 T CCSPlayer::NetworkStateChanged_m_ArmorValue()
 T CCSPlayer::NetworkStateChanged_m_ArmorValue(void*)
 T CCSPlayer::ObserverRoundRespawn()
 T CCSPlayer::OnDamagedByExplosion(CTakeDamageInfo const&)
 T CCSPlayer::OnEnterGhostState()
 T CCSPlayer::OnEnterIntroCameraState()
 T CCSPlayer::OnEnterRescueState()
 T CCSPlayer::OnHitPlayer(int, float, float, int)
 T CCSPlayer::OnLeaveActiveState()
 T CCSPlayer::OnLeaveDeathAnimState()
 T CCSPlayer::OnLeaveDeathWaitForKeyState()
 T CCSPlayer::OnLeaveGhostState()
 T CCSPlayer::OnLeaveIntroCameraState()
 T CCSPlayer::OnLeaveRescueState()
 T CCSPlayer::OnPreThinkGhostState()
 T CCSPlayer::OnPreThinkIntroCameraState()
 T CCSPlayer::OnPreThinkObserverMode()
 T CCSPlayer::OnPreThinkRescueState()
 T CCSPlayer::OnReloadStart(bool, int, bool)
 T CCSPlayer::OnTakeDamage(CTakeDamageInfo const&)
 T CCSPlayer::OnTakeDamageInternal(CTakeDamageInfo&)
 T CCSPlayer::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CCSPlayer::OnTeamChanged(int)
 T CCSPlayer::OnWeaponFired()
 T CCSPlayer::OutputDamageGiven()
 T CCSPlayer::OutputDamageTaken()
 T CCSPlayer::Pain(bool)
 T CCSPlayer::PassesObserverFilter(CBaseEntity const*)
 T CCSPlayer::PhysObjectSleep()
 T CCSPlayer::PhysObjectWake()
 T CCSPlayer::PlayStepSound(Vector&, surfacedata_t*, float, bool)
 T CCSPlayer::PlayUseDenySound()
 T CCSPlayer::PlayerClass() const
 T CCSPlayer::PlayerDeathThink()
 T CCSPlayer::PlayerRunCommand(CUserCmd*, IMoveHelper*)
 T CCSPlayer::PostThink()
 T CCSPlayer::PreThink()
 T CCSPlayer::Precache()
 T CCSPlayer::PushawayThink()
 T CCSPlayer::RecordDamageGiven(char const*, int)
 T CCSPlayer::RecordDamageTaken(char const*, int)
 T CCSPlayer::RemoveAllItems(bool)
 T CCSPlayer::RemoveDefuser()
 T CCSPlayer::RescueZoneTouch(inputdata_t&)
 T CCSPlayer::Reset()
 T CCSPlayer::ResetMaxSpeed()
 T CCSPlayer::ResetObserverMode()
 T CCSPlayer::RoundRespawn()
 T CCSPlayer::SelectDeathPose(CTakeDamageInfo const&)
 T CCSPlayer::SetAnimation(PLAYER_ANIM)
 T CCSPlayer::SetModelFromClass()
 T CCSPlayer::SetModelFromClassAtSpawn()
 T CCSPlayer::SetModelIndex(int)
 T CCSPlayer::SetObserverTarget(CBaseEntity*)
 T CCSPlayer::SetProgressBarTime(int, char const*)
 T CCSPlayer::SetShieldDrawnState(bool)
 T CCSPlayer::SetupVisibility(CBaseEntity*, unsigned char*, int)
 T CCSPlayer::ShouldDoLargeFlinch(int, CBaseEntity*)
 T CCSPlayer::ShouldRunRateLimitedCommand(CCommand const&)
 T CCSPlayer::ShouldTransmit(CCheckTransmitInfo const*)
 T CCSPlayer::ShowMOTD()
 T CCSPlayer::ShowViewPortPanel(char const*, bool, KeyValues*)
 T CCSPlayer::Spawn()
 T CCSPlayer::SpawnArmorValue() const
 T CCSPlayer::StartNewBulletGroup()
 T CCSPlayer::StartReplayMode(float, float, int)
 T CCSPlayer::State_Enter(CSPlayerState)
 T CCSPlayer::State_Enter_ACTIVE()
 T CCSPlayer::State_Enter_DEATH_ANIM()
 T CCSPlayer::State_Enter_DEATH_WAIT_FOR_KEY()
 T CCSPlayer::State_Enter_GHOST()
 T CCSPlayer::State_Enter_INTRO_CAMERA()
 T CCSPlayer::State_Enter_OBSERVER_MODE()
 T CCSPlayer::State_Enter_PICKINGCLASS()
 T CCSPlayer::State_Enter_PICKINGTEAM()
 T CCSPlayer::State_Enter_WAITING_FOR_RESCUE()
 T CCSPlayer::State_Enter_WELCOME()
 T CCSPlayer::State_Leave_ACTIVE(CSPlayerState)
 T CCSPlayer::State_Leave_DEATH_ANIM(CSPlayerState)
 T CCSPlayer::State_Leave_DEATH_WAIT_FOR_KEY(CSPlayerState)
 T CCSPlayer::State_Leave_GHOST(CSPlayerState)
 T CCSPlayer::State_Leave_INTRO_CAMERA(CSPlayerState)
 T CCSPlayer::State_PreThink_ACTIVE()
 T CCSPlayer::State_PreThink_DEATH_ANIM()
 T CCSPlayer::State_PreThink_DEATH_WAIT_FOR_KEY()
 T CCSPlayer::State_PreThink_GHOST()
 T CCSPlayer::State_PreThink_INTRO_CAMERA()
 T CCSPlayer::State_PreThink_OBSERVER_MODE()
 T CCSPlayer::State_PreThink_WAITING_FOR_RESCUE()
 T CCSPlayer::State_PreThink_WELCOME()
 T CCSPlayer::State_Transition(CSPlayerState)
 T CCSPlayer::StockPlayerAmmo(CBaseCombatWeapon*)
 T CCSPlayer::StopReplayMode()
 T CCSPlayer::SwitchTeam(int)
 T CCSPlayer::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*)
 T CCSPlayer::UpdateAddonBits()
 T CCSPlayer::UpdateLastGroundPosition(Vector const&, Vector const&, QAngle const&)
 T CCSPlayer::UpdateLastLadderPosition(Vector const&, Vector const&, Vector const&, QAngle const&)
 T CCSPlayer::UpdateRadar()
 T CCSPlayer::UpdateStepSound(surfacedata_t*, Vector const&, Vector const&)
 T CCSPlayer::VPhysicsShadowUpdate(IPhysicsObject*)
 T CCSPlayer::WantsLagCompensationOnEntity(CBaseAnimatingOverlay const*, CUserCmd const*, CBitVec<2048> const*) const
 T CCSPlayer::WantsMOTD() const
 T CCSPlayer::Weapon_CanSwitchTo(CBaseCombatWeapon*)
 T CCSPlayer::Weapon_CanUse(CBaseCombatWeapon*)
 T CCSPlayer::Weapon_Equip(CBaseCombatWeapon*)
 T CCSPlayer::Weapon_Switch(CBaseCombatWeapon*, int)
 T CCSPlayer::YouForgotToImplementOrDeclareServerClass()
 T CCSPlayer::~CCSPlayer()
 T CCSPlayerAnimState::CCSPlayerAnimState()
 T CCSPlayerAnimState::CachePoseParameters()
 T CCSPlayerAnimState::CalcAimLayerSequence(float*, float*, bool)
 T CCSPlayerAnimState::CalcFireLayerSequenceWithActivities(PlayerAnimEvent_t)
 T CCSPlayerAnimState::CalcFlinchLayerSequenceWithActivities(PlayerAnimEvent_t)
 T CCSPlayerAnimState::CalcGrenadeHaulbackSequence() const
 T CCSPlayerAnimState::CalcGrenadeHoldSequence() const
 T CCSPlayerAnimState::CalcGrenadeThrowSequence() const
 T CCSPlayerAnimState::CalcMainActivity()
 T CCSPlayerAnimState::CanPoseParamsConverge(int, int) const
 T CCSPlayerAnimState::CanThePlayerMove()
 T CCSPlayerAnimState::ClearAccumulatedMotion()
 T CCSPlayerAnimState::ClearAnimationLayers()
 T CCSPlayerAnimState::ClearAnimationState()
 T CCSPlayerAnimState::ComputeAltReloadSequence(CStudioHdr*)
 T CCSPlayerAnimState::ComputeFidgetSequence(CStudioHdr*)
 T CCSPlayerAnimState::ComputeFireSequence(CStudioHdr*)
 T CCSPlayerAnimState::ComputeFlinchSequence(CStudioHdr*)
 T CCSPlayerAnimState::ComputeGrenadeSequence(CStudioHdr*)
 T CCSPlayerAnimState::ComputePoseParam_BodyYaw()
 T CCSPlayerAnimState::ComputePoseParam_MoveYaw(CStudioHdr*)
 T CCSPlayerAnimState::ComputeReloadSequence(CStudioHdr*)
 T CCSPlayerAnimState::ComputeSequences(CStudioHdr*)
 T CCSPlayerAnimState::ComputeTurnSequence(CStudioHdr*)
 T CCSPlayerAnimState::DebugShowAnimState(int)
 T CCSPlayerAnimState::DoAnimationEvent(PlayerAnimEvent_t, int, int*, int*)
 T CCSPlayerAnimState::DoAnimationEvent(int, float, float)
 T CCSPlayerAnimState::DriveYawTowardsEyeYaw(float, float)
 T CCSPlayerAnimState::FireEvent(Vector const&, QAngle const&, int, char const*)
 T CCSPlayerAnimState::ForceFeetToEyes()
 T CCSPlayerAnimState::GetAccumulatedMotion(Vector*) const
 T CCSPlayerAnimState::GetCurrentMaxGroundSpeed()
 T CCSPlayerAnimState::GetRenderAngles()
 T CCSPlayerAnimState::HandleJumping()
 T CCSPlayerAnimState::IsBeingRevived() const
 T CCSPlayerAnimState::IsClimbingLedge() const
 T CCSPlayerAnimState::IsHealing() const
 T CCSPlayerAnimState::IsIncapAnimFinished() const
 T CCSPlayerAnimState::IsJumping() const
 T CCSPlayerAnimState::IsPlayingGrenadeThrowAnim() const
 T CCSPlayerAnimState::IsThrowingGrenade()
 T CCSPlayerAnimState::OnFeetFixedUp()
 T CCSPlayerAnimState::OnMainActivityChanged(Activity, Activity)
 T CCSPlayerAnimState::OnMainSequenceChanged(int)
 T CCSPlayerAnimState::OnNewModel()
 T CCSPlayerAnimState::OnStaggerStart()
 T CCSPlayerAnimState::ShouldHideWeapon() const
 T CCSPlayerAnimState::ShouldUpdateAnimState()
 T CCSPlayerAnimState::TranslateActivity(Activity) const
 T CCSPlayerAnimState::UnTranslateActivity(Activity) const
 T CCSPlayerAnimState::Update(float, float)
 T CCSPlayerAnimState::UpdateAnimConfig(CModAnimConfig*)
 T CCSPlayerAnimState::UpdateFootYaws()
 T CCSPlayerAnimState::UpdateLayerSequenceGeneric(CStudioHdr*, int, bool&, float&, int&, bool, float, bool, bool*)
 T CCSPlayerAnimState::ZeroHeadYawAndPitch()
 T CCSPlayerAnimState::~CCSPlayerAnimState()
 T CCSPlayerMove::FinishMove(CBasePlayer*, CUserCmd*, CMoveData*)
 T CCSPlayerMove::SetupMove(CBasePlayer*, CUserCmd*, IMoveHelper*, CMoveData*)
 T CCSPlayerMove::StartCommand(CBasePlayer*, CUserCmd*)
 T CCSPlayerMove::~CCSPlayerMove()
 T CCSRagdoll::GetDataDescMap()
 T CCSRagdoll::GetServerClass()
 T CCSRagdoll::Init()
 T CCSRagdoll::ObjectCaps()
 T CCSRagdoll::PruneThink()
 T CCSRagdoll::UpdateTransmitState()
 T CCSRagdoll::YouForgotToImplementOrDeclareServerClass()
 T CCSRagdoll::~CCSRagdoll()
 T CCSTeam::AddPlayer(CBasePlayer*)
 T CCSTeam::GetServerClass()
 T CCSTeam::Init(char const*, int)
 T CCSTeam::Precache()
 T CCSTeam::RemovePlayer(CBasePlayer*)
 T CCSTeam::Think()
 T CCSTeam::YouForgotToImplementOrDeclareServerClass()
 T CCSTeam::~CCSTeam()
 T CCSWeaponInfo::CCSWeaponInfo()
 T CCSWeaponInfo::GetDefaultPrice()
 T CCSWeaponInfo::Parse(KeyValues*, char const*)
 T CC_AI_LOS_Debug(IConVar*, char const*, float)
 T CC_AddSurvivorBot(CCommand const&)
 T CC_AirDensity(CCommand const&)
 T CC_CH_CreateAirboat()
 T CC_CH_CreateJeep()
 T CC_CH_ForceRespawn()
 T CC_CollisionTest(CCommand const&)
 T CC_CommentaryFinishNode()
 T CC_CommentaryNotChanging()
 T CC_CreateFlashlight(CCommand const&)
 T CC_DebugHistory_AddLine(CCommand const&)
 T CC_DebugHistory_Dump(CCommand const&)
 T CC_DrawCross(CCommand const&)
 T CC_DrawLine(CCommand const&)
 T CC_DumpEventQueue()
 T CC_DumpGameStringTable()
 T CC_Ent_AbsBox(CCommand const&)
 T CC_Ent_AttachmentPoints(CCommand const&)
 T CC_Ent_Autoaim(CCommand const&)
 T CC_Ent_BBox(CCommand const&)
 T CC_Ent_CancelPendingEntFires(CCommand const&)
 T CC_Ent_Create(CCommand const&)
 T CC_Ent_Dump(CCommand const&)
 T CC_Ent_FireTarget(CCommand const&)
 T CC_Ent_Info(CCommand const&)
 T CC_Ent_Keyvalue(CCommand const&)
 T CC_Ent_Messages(CCommand const&)
 T CC_Ent_Name(CCommand const&)
 T CC_Ent_Orient(CCommand const&)
 T CC_Ent_Pause()
 T CC_Ent_Picker()
 T CC_Ent_Pivot(CCommand const&)
 T CC_Ent_RBox(CCommand const&)
 T CC_Ent_Remove(CCommand const&)
 T CC_Ent_RemoveAll(CCommand const&)
 T CC_Ent_Rotate(CCommand const&)
 T CC_Ent_SetName(CCommand const&)
 T CC_Ent_Show_Response_Criteria(CCommand const&)
 T CC_Ent_Step(CCommand const&)
 T CC_Ent_Teleport(CCommand const&)
 T CC_Ent_Text(CCommand const&)
 T CC_Ent_ViewOffset(CCommand const&)
 T CC_Find_Ent(CCommand const&)
 T CC_Find_Ent_Index(CCommand const&)
 T CC_GetCommandEnt(CCommand const&, CBaseEntity**, Vector*, QAngle*)
 T CC_GiveCurrentAmmo()
 T CC_Global_Set(CCommand const&)
 T CC_GroundList_f(CCommand const&)
 T CC_HurtMe_f(CCommand const&)
 T CC_KDTreeTest(CCommand const&)
 T CC_Notarget_f()
 T CC_Particle_Test_Start(CCommand const&)
 T CC_Particle_Test_Stop(CCommand const&)
 T CC_Player_BugBaitSwap()
 T CC_Player_SetModel(CCommand const&)
 T CC_Player_TestDispatchEffect(CCommand const&)
 T CC_Player_Use(CCommand const&)
 T CC_Prop_Debug()
 T CC_Prop_Dynamic_Create(CCommand const&)
 T CC_Prop_Physics_Create(CCommand const&)
 T CC_ResetPopulationCounter()
 T CC_Shake()
 T CC_SurvivorBotForceMaxIntensity(CCommand const&)
 T CC_Test_EHandle()
 T CC_Test_Entity_Blocker()
 T CC_Test_Outtro_Stats(CCommand const&)
 T CC_VoxelTreeBox(CCommand const&)
 T CC_VoxelTreePlayerView()
 T CC_VoxelTreeSphere(CCommand const&)
 T CC_VoxelTreeView()
 T CC_WarpFarSurvivorHere(CCommand const&)
 T CC_WarpSelectedHere(CCommand const&)
 T CC_setang_f(CCommand const&)
 T CCallQueue::~CCallQueue()
 T CCallQueueT<CTSQueue<CFunctor*, false> >::CallQueued()
 T CCallback<CTerrorGameRules, GSGameplayStats_t, true>::GetCallbackSizeBytes()
 T CCallback<CTerrorGameRules, GSGameplayStats_t, true>::Run(void*)
 T CCallback<CTerrorGameRules, GSGameplayStats_t, true>::Run(void*, bool, unsigned long long)
 T CCallback<CTerrorPlayer, GSClientAchievementStatus_t, true>::GetCallbackSizeBytes()
 T CCallback<CTerrorPlayer, GSClientAchievementStatus_t, true>::Run(void*)
 T CCallback<CTerrorPlayer, GSClientAchievementStatus_t, true>::Run(void*, bool, unsigned long long)
 T CCaptionRepeatMgr::CanEmitCaption(unsigned int)
 T CCaptionRepeatMgr::RemoveCaptionsBefore(float)
 T CCaptionRepeatMgr::~CCaptionRepeatMgr()
 T CCarGlassProp::OnTakeDamage(CTakeDamageInfo const&)
 T CCarGlassProp::~CCarGlassProp()
 T CCarProp::AlarmEndThink()
 T CCarProp::AlarmTouch(CBaseEntity*)
 T CCarProp::CCarProp()
 T CCarProp::CanObstructNavAreas() const
 T CCarProp::ChirpEndThink()
 T CCarProp::ChirpStartThink()
 T CCarProp::FireGameEvent(IGameEvent*)
 T CCarProp::GetDataDescMap()
 T CCarProp::GetNavObstructionHeight() const
 T CCarProp::InputSurvivorStandingOnCar(inputdata_t&)
 T CCarProp::IsPotentiallyAbleToObstructNavAreas() const
 T CCarProp::OnTakeDamage(CTakeDamageInfo const&)
 T CCarProp::Spawn()
 T CCarProp::TryAlarm(CBaseEntity*)
 T CCarProp::UpdateOnRemove()
 T CCarProp::~CCarProp()
 T CCarriedProp::CanFidget()
 T CCarriedProp::ConvertToPhysObject(bool)
 T CCarriedProp::CreatePhysObject()
 T CCarriedProp::GetWeaponDeployActivity(PlayerAnimEvent_t, Activity)
 T CCarriedProp::GetWeaponFireActivity(PlayerAnimEvent_t, Activity)
 T CCarriedProp::HasSecondaryAttack()
 T CCarriedProp::HasSecondaryMelee()
 T CCarriedProp::Holster(CBaseCombatWeapon*)
 T CCarriedProp::IsDroppedWhenHolstered() const
 T CCarriedProp::IsGrenade() const
 T CCarriedProp::PrimaryAttack()
 T CCarriedProp::SecondaryAttack()
 T CCarriedProp::SendWeaponAnim(int)
 T CCarriedProp::VisibleInWeaponSelection()
 T CChangeAllTalkIssue::CanCallVote(int, char const*, char*)
 T CChangeAllTalkIssue::ExecuteCommand()
 T CChangeAllTalkIssue::GetDetailsString()
 T CChangeAllTalkIssue::GetDisplayString()
 T CChangeAllTalkIssue::GetVotePassedString()
 T CChangeAllTalkIssue::IsAllyRestrictedVote()
 T CChangeAllTalkIssue::ListIssueDetails(CBasePlayer*)
 T CChangeAllTalkIssue::~CChangeAllTalkIssue()
 T CChangeChapterIssue::CanCallVote(int, char const*, char*)
 T CChangeChapterIssue::ExecuteCommand()
 T CChangeChapterIssue::GetDetailsString()
 T CChangeChapterIssue::GetDisplayString()
 T CChangeChapterIssue::GetVotePassedString()
 T CChangeChapterIssue::ListIssueDetails(CBasePlayer*)
 T CChangeChapterIssue::~CChangeChapterIssue()
 T CChangeDifficultyIssue::CanCallVote(int, char const*, char*)
 T CChangeDifficultyIssue::ExecuteCommand()
 T CChangeDifficultyIssue::GetDetailsString()
 T CChangeDifficultyIssue::GetDisplayString()
 T CChangeDifficultyIssue::GetVotePassedString()
 T CChangeDifficultyIssue::ListIssueDetails(CBasePlayer*)
 T CChangeDifficultyIssue::~CChangeDifficultyIssue()
 T CChangeLevel::AddTransitionToList(levellist_t*, int, char const*, char const*, edict_t*)
 T CChangeLevel::BuildChangeLevelList(levellist_t*, int)
 T CChangeLevel::BuildEntityTransitionList(CBaseEntity*, char const*, CBaseEntity**, int*, int)
 T CChangeLevel::ChangeLevelNow(CBaseEntity*)
 T CChangeLevel::ChangeList(levellist_t*, int)
 T CChangeLevel::ChangelevelThink()
 T CChangeLevel::ComputeEntitySaveFlags(CBaseEntity*)
 T CChangeLevel::FindLandmark(char const*)
 T CChangeLevel::InTransitionVolume(CBaseEntity*, char const*)
 T CChangeLevel::IsEntityInTransition(CBaseEntity*)
 T CChangeLevel::NotifyEntitiesOutOfTransition()
 T CChangeLevel::TouchChangeLevel(CBaseEntity*)
 T CChangeMissionIssue::CanCallVote(int, char const*, char*)
 T CChangeMissionIssue::CanTeamCallVote(int) const
 T CChangeMissionIssue::ExecuteCommand()
 T CChangeMissionIssue::GetDetailsString()
 T CChangeMissionIssue::GetDisplayString()
 T CChangeMissionIssue::GetVotePassedString()
 T CChangeMissionIssue::IsAllyRestrictedVote()
 T CChangeMissionIssue::ListIssueDetails(CBasePlayer*)
 T CChangeMissionIssue::~CChangeMissionIssue()
 T CCheckClient::LevelInitPreEntity()
 T CCheckClient::~CCheckClient()
 T CCheckpointCompleteAwardTemplate::CCheckpointCompleteAwardTemplate(int)
 T CCheckpointCompleteAwardTemplate::CheckAndAwardCheckpointAwards()
 T CCheckpointCompleteAwardTemplate::FireGameEvent(IGameEvent*)
 T CCheckpointCompleteAwardTemplate::OnCreate()
 T CCheckpointCompleteAwardTemplate::~CCheckpointCompleteAwardTemplate()
 T CChildOperatorDefinition::CreateInstance(UniqueId_t const&) const
 T CChildOperatorDefinition::GetId() const
 T CChildOperatorDefinition::GetName() const
 T CChildOperatorDefinition::GetUnpackStructure() const
 T CChildOperatorDefinition::IsObsolete() const
 T CChoreoActor::AddChannel(CChoreoChannel*)
 T CChoreoActor::CChoreoActor()
 T CChoreoActor::FindChannelIndex(CChoreoChannel*)
 T CChoreoActor::GetChannel(int)
 T CChoreoActor::GetName()
 T CChoreoActor::GetNumChannels()
 T CChoreoActor::RestoreFromBuffer(CUtlBuffer&, CChoreoScene*, IChoreoStringPool*)
 T CChoreoActor::SetActive(bool)
 T CChoreoActor::SetName(char const*)
 T CChoreoChannel::AddEvent(CChoreoEvent*)
 T CChoreoChannel::CChoreoChannel()
 T CChoreoChannel::GetEvent(int)
 T CChoreoChannel::GetName()
 T CChoreoChannel::GetNumEvents()
 T CChoreoChannel::ReconcileCloseCaption()
 T CChoreoChannel::RestoreFromBuffer(CUtlBuffer&, CChoreoScene*, CChoreoActor*, IChoreoStringPool*)
 T CChoreoChannel::SetActor(CChoreoActor*)
 T CChoreoChannel::SetName(char const*)
 T CChoreoEvent::AddAbsoluteTag(CChoreoEvent::AbsTagType, char const*, float)
 T CChoreoEvent::AddEventDependency(CChoreoEvent*)
 T CChoreoEvent::AddRelativeTag(char const*, float)
 T CChoreoEvent::AddTimingTag(char const*, float, bool)
 T CChoreoEvent::AddTrack(char const*)
 T CChoreoEvent::CChoreoEvent(CChoreoScene*)
 T CChoreoEvent::CheckProcessing(IChoreoEventCallback*, CChoreoScene*, float)
 T CChoreoEvent::ClearEventDependencies()
 T CChoreoEvent::ContinueProcessing(IChoreoEventCallback*, CChoreoScene*, float)
 T CChoreoEvent::CurveHasEndTime()
 T CChoreoEvent::FindAbsoluteTag(CChoreoEvent::AbsTagType, char const*)
 T CChoreoEvent::GetActor()
 T CChoreoEvent::GetChannel()
 T CChoreoEvent::GetCloseCaptionToken() const
 T CChoreoEvent::GetCloseCaptionType() const
 T CChoreoEvent::GetDefaultCurveType()
 T CChoreoEvent::GetDescription()
 T CChoreoEvent::GetDuration()
 T CChoreoEvent::GetEndTime()
 T CChoreoEvent::GetEventDependencies(CUtlVector<CChoreoEvent*, CUtlMemory<CChoreoEvent*, int> >&)
 T CChoreoEvent::GetFlexAnimationTrack(int)
 T CChoreoEvent::GetIntensity(float)
 T CChoreoEvent::GetLastSlaveEndTime() const
 T CChoreoEvent::GetLoopCount()
 T CChoreoEvent::GetName()
 T CChoreoEvent::GetNumFlexAnimationTracks()
 T CChoreoEvent::GetNumLoopsRemaining()
 T CChoreoEvent::GetOriginalPercentageFromPlaybackPercentage(float)
 T CChoreoEvent::GetParameters()
 T CChoreoEvent::GetParameters2()
 T CChoreoEvent::GetParameters3()
 T CChoreoEvent::GetPlayOverScript()
 T CChoreoEvent::GetPlaybackCloseCaptionToken(char*, int)
 T CChoreoEvent::GetStartTime()
 T CChoreoEvent::GetSubScene()
 T CChoreoEvent::GetTrackLookupSet()
 T CChoreoEvent::GetType()
 T CChoreoEvent::HasEndTime()
 T CChoreoEvent::Init(CChoreoScene*)
 T CChoreoEvent::IsProcessing() const
 T CChoreoEvent::IsResumeCondition()
 T CChoreoEvent::IsSuppressingCaptionAttenuation() const
 T CChoreoEvent::IsUsingCombinedFile() const
 T CChoreoEvent::ResetProcessing()
 T CChoreoEvent::RestoreFlexAnimationsFromBuffer(CUtlBuffer&, IChoreoStringPool*)
 T CChoreoEvent::RestoreFromBuffer(CUtlBuffer&, CChoreoScene*, IChoreoStringPool*)
 T CChoreoEvent::SetActor(CChoreoActor*)
 T CChoreoEvent::SetChannel(CChoreoChannel*)
 T CChoreoEvent::SetCloseCaptionType(CChoreoEvent::CLOSECAPTION)
 T CChoreoEvent::SetEndTime(float)
 T CChoreoEvent::SetLastSlaveEndTime(float)
 T CChoreoEvent::SetName(char const*)
 T CChoreoEvent::SetNumLoopsRemaining(int)
 T CChoreoEvent::SetNumSlaves(int)
 T CChoreoEvent::SetParameters(char const*)
 T CChoreoEvent::SetRequiredCombinedChecksum(unsigned int)
 T CChoreoEvent::SetStartTime(float)
 T CChoreoEvent::SetSubScene(CChoreoScene*)
 T CChoreoEvent::SetTrackLookupSet(bool)
 T CChoreoEvent::SetType(CChoreoEvent::EVENTTYPE)
 T CChoreoEvent::SetUsingCombinedFile(bool)
 T CChoreoEvent::SetUsingRelativeTag(bool, char const*, char const*)
 T CChoreoEvent::SnapTimes()
 T CChoreoEvent::StartProcessing(IChoreoEventCallback*, CChoreoScene*, float)
 T CChoreoEvent::StopProcessing(IChoreoEventCallback*, CChoreoScene*, float)
 T CChoreoEvent::VerifyTagOrder()
 T CChoreoEvent::~CChoreoEvent()
 T CChoreoScene::AllocActor()
 T CChoreoScene::AllocChannel()
 T CChoreoScene::AllocEvent()
 T CChoreoScene::CChoreoScene(IChoreoEventCallback*)
 T CChoreoScene::CheckEventCompletion()
 T CChoreoScene::CurveHasEndTime()
 T CChoreoScene::EventLess(CChoreoScene::ActiveList const&, CChoreoScene::ActiveList const&)
 T CChoreoScene::EventThink(CChoreoEvent*, float, float, bool, CChoreoScene::PROCESSING_TYPE&)
 T CChoreoScene::FindActorIndex(CChoreoActor*)
 T CChoreoScene::FindStopTime()
 T CChoreoScene::GetActor(int)
 T CChoreoScene::GetDefaultCurveType()
 T CChoreoScene::GetDuration()
 T CChoreoScene::GetEvent(int)
 T CChoreoScene::GetFilename() const
 T CChoreoScene::GetNumActors()
 T CChoreoScene::GetNumChannels()
 T CChoreoScene::GetNumEvents()
 T CChoreoScene::GetPlayingSoundName(char*, int)
 T CChoreoScene::GetTime()
 T CChoreoScene::HasEventsOfType(CChoreoEvent::EVENTTYPE) const
 T CChoreoScene::HasUnplayedSpeech()
 T CChoreoScene::InternalDetermineEventTypes()
 T CChoreoScene::IsBackground()
 T CChoreoScene::IsSubScene() const
 T CChoreoScene::LoopToTime(float)
 T CChoreoScene::ReconcileCloseCaption()
 T CChoreoScene::ResetSimulation(bool, float, float)
 T CChoreoScene::RestoreFromBinaryBuffer(CUtlBuffer&, char const*, IChoreoStringPool*)
 T CChoreoScene::ResumeSimulation()
 T CChoreoScene::SetBackground(bool)
 T CChoreoScene::SetEventCallbackInterface(IChoreoEventCallback*)
 T CChoreoScene::SetPrintFunc(void (*)(char const*, ...))
 T CChoreoScene::SetSoundFileStartupLatency(float)
 T CChoreoScene::SetSubScene(bool)
 T CChoreoScene::SetTime(float)
 T CChoreoScene::ShouldIgnorePhonemes() const
 T CChoreoScene::SimulationFinished()
 T CChoreoScene::SnapTime(float)
 T CChoreoScene::Think(float)
 T CChoreoScene::~CChoreoScene()
 T CChoreoStringPool::FindOrAddString(char const*)
 T CChoreoStringPool::GetString(short, char*, int)
 T CClassPtrSaveRestoreOps::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CClassPtrSaveRestoreOps::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CClaw::CClaw()
 T CClaw::CanBeDropped() const
 T CClaw::CanBeSelected()
 T CClaw::GetDataDescMap()
 T CClaw::GetDeployActivity()
 T CClaw::GetPlayerDamage(CTerrorPlayer*) const
 T CClaw::GetPushDirection(CBaseEntity*, Vector)
 T CClaw::GetServerClass()
 T CClaw::HasPrimaryAmmo()
 T CClaw::HasSecondaryAttack()
 T CClaw::Holster(CBaseCombatWeapon*)
 T CClaw::ItemPostFrame()
 T CClaw::OnHit(CGameTrace&, Vector const&, bool)
 T CClaw::OnPlayerHit(CTerrorPlayer*)
 T CClaw::OnPrimaryAttack()
 T CClaw::OnSwingEnd(bool)
 T CClaw::OnSwingStart()
 T CClaw::Precache()
 T CClaw::PrimaryAttack()
 T CClaw::SecondaryAttack()
 T CClaw::Spawn()
 T CClaw::WeaponIdle()
 T CClaw::YouForgotToImplementOrDeclareServerClass()
 T CClaw::~CClaw()
 T CClawHitAwardTemplate::CClawHitAwardTemplate(int)
 T CClawHitAwardTemplate::FireGameEvent(IGameEvent*)
 T CClawHitAwardTemplate::OnCreate()
 T CClawHitAwardTemplate::~CClawHitAwardTemplate()
 T CCleanupDefaultRelationShips::Shutdown()
 T CCleanupDefaultRelationShips::~CCleanupDefaultRelationShips()
 T CCleanupUtlSymbolTable::~CCleanupUtlSymbolTable()
 T CClientPath::AddNode(Vector const&, TerrorNavArea*)
 T CClientPath::GetDataDescMap()
 T CClientPath::GetServerClass()
 T CClientPath::InputPlayer(inputdata_t&)
 T CClientPath::ShouldTransmit(CCheckTransmitInfo const*)
 T CClientPath::Spawn()
 T CClientPath::UpdateTransmitState()
 T CClientPath::VisibilityThink()
 T CClientPath::YouForgotToImplementOrDeclareServerClass()
 T CClientPath::~CClientPath()
 T CCollisionEvent::AddDamageEvent(CBaseEntity*, CTakeDamageInfo const&, IPhysicsObject*, bool, Vector const&, Vector const&)
 T CCollisionEvent::AddDamageInflictor(IPhysicsObject*, float, Vector const&, Vector const&, bool)
 T CCollisionEvent::AddRemoveObject(IServerNetworkable*)
 T CCollisionEvent::AddTouchEvent(CBaseEntity*, CBaseEntity*, int, Vector const&, Vector const&)
 T CCollisionEvent::AdditionalCollisionChecksThisTick(int)
 T CCollisionEvent::DeltaTimeSinceLastFluid(CBaseEntity*)
 T CCollisionEvent::EndTouch(IPhysicsObject*, IPhysicsObject*, IPhysicsCollisionData*)
 T CCollisionEvent::FindOrAddPenetrateEvent(CBaseEntity*, CBaseEntity*)
 T CCollisionEvent::FluidEndTouch(IPhysicsObject*, IPhysicsFluidController*)
 T CCollisionEvent::FluidStartTouch(IPhysicsObject*, IPhysicsFluidController*)
 T CCollisionEvent::FlushQueuedOperations()
 T CCollisionEvent::FrameUpdate()
 T CCollisionEvent::Friction(IPhysicsObject*, float, int, int, IPhysicsCollisionData*)
 T CCollisionEvent::GetListOfPenetratingEntities(CBaseEntity*, CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >&)
 T CCollisionEvent::LevelShutdown()
 T CCollisionEvent::ObjectEnterTrigger(IPhysicsObject*, IPhysicsObject*)
 T CCollisionEvent::ObjectLeaveTrigger(IPhysicsObject*, IPhysicsObject*)
 T CCollisionEvent::ObjectSleep(IPhysicsObject*)
 T CCollisionEvent::ObjectWake(IPhysicsObject*)
 T CCollisionEvent::PostCollision(vcollisionevent_t*)
 T CCollisionEvent::PostSimulationFrame()
 T CCollisionEvent::PreCollision(vcollisionevent_t*)
 T CCollisionEvent::RestoreDamageInflictorState(IPhysicsObject*)
 T CCollisionEvent::RestoreDamageInflictorState(int, float)
 T CCollisionEvent::ShouldCollide(IPhysicsObject*, IPhysicsObject*, void*, void*)
 T CCollisionEvent::ShouldFreezeContacts(IPhysicsObject**, int)
 T CCollisionEvent::ShouldFreezeObject(IPhysicsObject*)
 T CCollisionEvent::ShouldSolvePenetration(IPhysicsObject*, IPhysicsObject*, void*, void*, float)
 T CCollisionEvent::StartTouch(IPhysicsObject*, IPhysicsObject*, IPhysicsCollisionData*)
 T CCollisionEvent::UpdateDamageEvents()
 T CCollisionEvent::UpdateFrictionSounds()
 T CCollisionEvent::UpdatePenetrateEvents()
 T CCollisionEvent::UpdateTouchEvents()
 T CCollisionEvent::~CCollisionEvent()
 T CCollisionProperty::CCollisionProperty()
 T CCollisionProperty::CalcDistanceFromPoint(Vector const&) const
 T CCollisionProperty::CalcNearestPoint(Vector const&, Vector*) const
 T CCollisionProperty::CalcSqrDistanceFromPoint(Vector const&) const
 T CCollisionProperty::CollisionAABBToWorldAABB(Vector const&, Vector const&, Vector*, Vector*) const
 T CCollisionProperty::CollisionToWorldTransform() const
 T CCollisionProperty::ComputeRotationExpandedSequenceBounds(Vector*, Vector*)
 T CCollisionProperty::ComputeSurroundingBox(Vector*, Vector*)
 T CCollisionProperty::ComputeVPhysicsSurroundingBox(Vector*, Vector*)
 T CCollisionProperty::DestroyPartitionHandle()
 T CCollisionProperty::DoesVPhysicsInvalidateSurroundingBox() const
 T CCollisionProperty::GetCollisionAngles() const
 T CCollisionProperty::GetCollisionGroup() const
 T CCollisionProperty::GetCollisionModel()
 T CCollisionProperty::GetCollisionModelIndex()
 T CCollisionProperty::GetCollisionOrigin() const
 T CCollisionProperty::GetDataDescMap()
 T CCollisionProperty::GetEntityHandle()
 T CCollisionProperty::GetIClientUnknown()
 T CCollisionProperty::GetRootParentToWorldTransform() const
 T CCollisionProperty::GetSolid() const
 T CCollisionProperty::GetSolidFlags() const
 T CCollisionProperty::Init(CBaseEntity*)
 T CCollisionProperty::IsPointInBounds(Vector const&) const
 T CCollisionProperty::MarkPartitionHandleDirty()
 T CCollisionProperty::MarkSurroundingBoundsDirty()
 T CCollisionProperty::NetworkStateChanged()
 T CCollisionProperty::NetworkStateChanged(void*)
 T CCollisionProperty::NormalizedToWorldSpace(Vector const&, Vector*) const
 T CCollisionProperty::OBBCenter() const
 T CCollisionProperty::OBBMaxs() const
 T CCollisionProperty::OBBMins() const
 T CCollisionProperty::OBBSize() const
 T CCollisionProperty::RandomPointInBounds(Vector const&, Vector const&, Vector*) const
 T CCollisionProperty::SetCollisionBounds(Vector const&, Vector const&)
 T CCollisionProperty::SetSolid(SolidType_t)
 T CCollisionProperty::SetSolidFlags(int)
 T CCollisionProperty::SetSurroundingBoundsType(SurroundingBoundsType_t, Vector const*, Vector const*)
 T CCollisionProperty::ShouldTouchTrigger(int) const
 T CCollisionProperty::TestCollision(Ray_t const&, unsigned int, CGameTrace&)
 T CCollisionProperty::TestHitboxes(Ray_t const&, unsigned int, CGameTrace&)
 T CCollisionProperty::UpdatePartition()
 T CCollisionProperty::UpdateServerPartitionMask()
 T CCollisionProperty::UseTriggerBounds(bool, float)
 T CCollisionProperty::WorldSpaceCenter() const
 T CCollisionProperty::WorldSpaceSurroundingBounds(Vector*, Vector*)
 T CCollisionProperty::WorldSpaceTriggerBounds(Vector*, Vector*) const
 T CCollisionProperty::~CCollisionProperty()
 T CColorCorrection::Activate()
 T CColorCorrection::CColorCorrection()
 T CColorCorrection::FadeInThink()
 T CColorCorrection::FadeOutThink()
 T CColorCorrection::GetDataDescMap()
 T CColorCorrection::GetServerClass()
 T CColorCorrection::InputDisable(inputdata_t&)
 T CColorCorrection::InputEnable(inputdata_t&)
 T CColorCorrection::InputSetFadeInDuration(inputdata_t&)
 T CColorCorrection::InputSetFadeOutDuration(inputdata_t&)
 T CColorCorrection::ObjectCaps()
 T CColorCorrection::Spawn()
 T CColorCorrection::UpdateTransmitState()
 T CColorCorrection::YouForgotToImplementOrDeclareServerClass()
 T CColorCorrection::~CColorCorrection()
 T CColorCorrectionSystem::FireGameEvent(IGameEvent*)
 T CColorCorrectionSystem::InitMasterController()
 T CColorCorrectionSystem::LevelInitPostEntity()
 T CColorCorrectionSystem::LevelInitPreEntity()
 T CColorCorrectionSystem::~CColorCorrectionSystem()
 T CColorCorrectionVolume::CColorCorrectionVolume()
 T CColorCorrectionVolume::EndTouch(CBaseEntity*)
 T CColorCorrectionVolume::GetDataDescMap()
 T CColorCorrectionVolume::GetServerClass()
 T CColorCorrectionVolume::InputDisable(inputdata_t&)
 T CColorCorrectionVolume::InputEnable(inputdata_t&)
 T CColorCorrectionVolume::KeyValue(char const*, char const*)
 T CColorCorrectionVolume::ObjectCaps()
 T CColorCorrectionVolume::PassesTriggerFilters(CBaseEntity*)
 T CColorCorrectionVolume::Spawn()
 T CColorCorrectionVolume::StartTouch(CBaseEntity*)
 T CColorCorrectionVolume::ThinkFunc()
 T CColorCorrectionVolume::UpdateTransmitState()
 T CColorCorrectionVolume::YouForgotToImplementOrDeclareServerClass()
 T CColorCorrectionVolume::~CColorCorrectionVolume()
 T CCombatCharVisCache::FrameUpdatePreEntityThink()
 T CCombatCharVisCache::LevelShutdownPreEntity()
 T CCombatCharVisCache::LookupVisibility(CBaseCombatCharacter const*, CBaseCombatCharacter*)
 T CCombatCharVisCache::~CCombatCharVisCache()
 T CCommentaryAuto::GetDataDescMap()
 T CCommentaryAuto::InputMultiplayerSpawned(inputdata_t&)
 T CCommentaryAuto::Spawn()
 T CCommentaryAuto::Think()
 T CCommentaryAuto::~CCommentaryAuto()
 T CCommentaryDummy::AnimThink()
 T CCommentaryDummy::GetDataDescMap()
 T CCommentaryDummy::GetLookTarget()
 T CCommentaryDummy::HandleAnimEvent(animevent_t*)
 T CCommentaryDummy::InputSetAnimation(inputdata_t&)
 T CCommentaryDummy::OnSequenceSet(int)
 T CCommentaryDummy::SetHeadDirection(Vector const&)
 T CCommentaryDummy::Spawn()
 T CCommentaryDummy::~CCommentaryDummy()
 T CCommentarySystem::ApplyCommentaryModifications()
 T CCommentarySystem::ConvarChanged(IConVar*, char const*, float)
 T CCommentarySystem::GetDataDescMap()
 T CCommentarySystem::GetNodeUnderCrosshair()
 T CCommentarySystem::InitCommentary()
 T CCommentarySystem::JumpToNextNode(CBasePlayer*)
 T CCommentarySystem::LevelInitPostEntity()
 T CCommentarySystem::LevelInitPreEntity()
 T CCommentarySystem::LevelShutdownPreEntity()
 T CCommentarySystem::OnRestore()
 T CCommentarySystem::ParseEntKVBlock(CBaseEntity*, KeyValues*)
 T CCommentarySystem::PrePlayerRunCommand(CBasePlayer*, CUserCmd*)
 T CCommentarySystem::ShutDownCommentary()
 T CCommentarySystem::~CCommentarySystem()
 T CCommentaryViewPosition::Precache()
 T CCommentaryViewPosition::Spawn()
 T CCommentaryViewPosition::~CCommentaryViewPosition()
 T CCommentaryZombieSpawner::DeathNotice(CBaseEntity*)
 T CCommentaryZombieSpawner::GetDataDescMap()
 T CCommentaryZombieSpawner::InputSpawnZombie(inputdata_t&)
 T CCommentaryZombieSpawner::~CCommentaryZombieSpawner()
 T CCommentary_SaveRestoreBlockHandler::GetBlockName()
 T CCommentary_SaveRestoreBlockHandler::ReadRestoreHeaders(IRestore*)
 T CCommentary_SaveRestoreBlockHandler::Restore(IRestore*, bool)
 T CCommentary_SaveRestoreBlockHandler::Save(ISave*)
 T CCommentary_SaveRestoreBlockHandler::WriteSaveHeaders(ISave*)
 T CConceptHistoriesDataOps::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CConceptHistoriesDataOps::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CConceptHistoriesDataOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CConceptHistoriesDataOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CConstantForceController::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)
 T CConstraintAnchor::GetDataDescMap()
 T CConstraintAnchor::Spawn()
 T CConstraintAnchor::~CConstraintAnchor()
 T CConstraintFloodList::AddLink(CBaseEntity*, CBaseEntity*, bool)
 T CConstraintFloodList::BuildGraphFromEntity(CBaseEntity*, CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >&)
 T CCopyRecipientFilter::AddRecipient(CBasePlayer*)
 T CCopyRecipientFilter::GetRecipientCount() const
 T CCopyRecipientFilter::GetRecipientIndex(int) const
 T CCopyRecipientFilter::Init(IRecipientFilter*)
 T CCopyRecipientFilter::IsInitMessage() const
 T CCopyRecipientFilter::IsReliable() const
 T CCopyRecipientFilter::~CCopyRecipientFilter()
 T CCurveData::GetBoundedSample(ICurveDataAccessor*, int, bool&)
 T CCurveData::GetIntensity(ICurveDataAccessor*, float)
 T CCurveData::RestoreFromBuffer(CUtlBuffer&, IChoreoStringPool*)
 T CDamageModifier::GetModifier() const
 T CDamageModifier::IsDamageDoneToMe() const
 T CDarkMissionAwardTemplate::CDarkMissionAwardTemplate(int)
 T CDarkMissionAwardTemplate::FireGameEvent(IGameEvent*)
 T CDarkMissionAwardTemplate::OnCreate()
 T CDarkMissionAwardTemplate::~CDarkMissionAwardTemplate()
 T CDataManager<CBoneCache, bonecacheparams_t, CBoneCache*, CThreadFastMutex>::DestroyResourceStorage(void*)
 T CDataManager<CBoneCache, bonecacheparams_t, CBoneCache*, CThreadFastMutex>::GetRealSize(void*)
 T CDataManager<CBoneCache, bonecacheparams_t, CBoneCache*, CThreadFastMutex>::Lock()
 T CDataManager<CBoneCache, bonecacheparams_t, CBoneCache*, CThreadFastMutex>::TryLock()
 T CDataManager<CBoneCache, bonecacheparams_t, CBoneCache*, CThreadFastMutex>::Unlock()
 T CDataManager<CBoneCache, bonecacheparams_t, CBoneCache*, CThreadFastMutex>::~CDataManager()
 T CDataManagerBase::BreakLock(memhandle_t__*)
 T CDataManagerBase::CDataManagerBase(unsigned int)
 T CDataManagerBase::CreateHandle(bool)
 T CDataManagerBase::DestroyResource(memhandle_t__*)
 T CDataManagerBase::EnsureCapacity(unsigned int)
 T CDataManagerBase::FlushAll()
 T CDataManagerBase::GetForFreeByIndex(unsigned short)
 T CDataManagerBase::GetResource_NoLock(memhandle_t__*)
 T CDataManagerBase::Lock()
 T CDataManagerBase::LockResource(memhandle_t__*)
 T CDataManagerBase::StoreResourceInHandle(unsigned short, void*, unsigned int)
 T CDataManagerBase::TouchByIndex(unsigned short)
 T CDataManagerBase::TryLock()
 T CDataManagerBase::Unlock()
 T CDataManagerBase::~CDataManagerBase()
 T CDataObjectAccessSystem::Init()
 T CDataObjectAccessSystem::Shutdown()
 T CDataObjectAccessSystem::~CDataObjectAccessSystem()
 T CDatadescGeneratedNameHolder::GenerateName(char const*)
 T CDatadescGeneratedNameHolder::~CDatadescGeneratedNameHolder()
 T CDeathFallCamera::Enable(CBasePlayer*)
 T CDeathFallCamera::GetDataDescMap()
 T CDeathFallCamera::InputEnable(inputdata_t&)
 T CDeathFallCamera::Spawn()
 T CDeathFallCamera::UpdateTransmitState()
 T CDeathFallCamera::~CDeathFallCamera()
 T CDebugHistory::DumpDebugHistory(int)
 T CDebugHistory::GetDataDescMap()
 T CDebugHistory::Restore(IRestore&)
 T CDebugHistory::Save(ISave&)
 T CDebugHistory::Spawn()
 T CDebugHistory::~CDebugHistory()
 T CDecal::Activate()
 T CDecal::GetDataDescMap()
 T CDecal::GetDecalEntityAndPosition(Vector*, bool)
 T CDecal::InputActivate(inputdata_t&)
 T CDecal::KeyValue(char const*, char const*)
 T CDecal::Spawn()
 T CDecal::StaticDecal()
 T CDecal::TriggerDecal(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CDecal::~CDecal()
 T CDecalEmitterSystem::CDecalEmitterSystem(char const*)
 T CDecalEmitterSystem::Clear()
 T CDecalEmitterSystem::DecalEntry::DecalEntry(CDecalEmitterSystem::DecalEntry const&)
 T CDecalEmitterSystem::GetDecalIndexForName(char const*)
 T CDecalEmitterSystem::Init()
 T CDecalEmitterSystem::LevelInitPreEntity()
 T CDecalEmitterSystem::LoadDecalsFromScript(char const*)
 T CDecalEmitterSystem::Shutdown()
 T CDecalEmitterSystem::TranslateDecalForGameMaterial(char const*, unsigned char)
 T CDecalEmitterSystem::~CDecalEmitterSystem()
 T CDefOps<CBaseEntity*>::LessFunc(CBaseEntity* const&, CBaseEntity* const&)
 T CDefOps<CChoreoActor*>::LessFunc(CChoreoActor* const&, CChoreoActor* const&)
 T CDefOps<CPhysCollide const*>::LessFunc(CPhysCollide const* const&, CPhysCollide const* const&)
 T CDefOps<IPhysicsObject*>::LessFunc(IPhysicsObject* const&, IPhysicsObject* const&)
 T CDefOps<edict_t const*>::LessFunc(edict_t const* const&, edict_t const* const&)
 T CDefOps<float>::LessFunc(float const&, float const&)
 T CDefOps<studiohdr_t const*>::LessFunc(studiohdr_t const* const&, studiohdr_t const* const&)
 T CDefOps<unsigned int>::LessFunc(unsigned int const&, unsigned int const&)
 T CDefSaveRestoreBlockHandler::PostRestore()
 T CDefSaveRestoreBlockHandler::PostSave()
 T CDefSaveRestoreBlockHandler::PreRestore()
 T CDefSaveRestoreBlockHandler::PreSave(CSaveRestoreData*)
 T CDefSaveRestoreOps::Parse(SaveRestoreFieldInfo_t const&, char const*)
 T CDefaultAccessor::RegisterConCommandBase(ConCommandBase*)
 T CDefaultParticleSystemQuery::DebugDrawLine(Vector const&, Vector const&, int, int, int, bool, float)
 T CDefaultParticleSystemQuery::GetCurrentViewOrigin()
 T CDefaultParticleSystemQuery::GetLightingAtPoint(Vector const&, Color&)
 T CDefaultParticleSystemQuery::GetPixelVisibility(int*, Vector const&, float)
 T CDefaultParticleSystemQuery::GetRandomPointsOnControllingObjectHitBox(CParticleCollection*, int, int, float, int, Vector*, Vector, Vector*, int*)
 T CDefaultParticleSystemQuery::TraceAgainstRayTraceEnv(int, FourRays const&, float __vector(4), float __vector(4), RayTracingResult*, int) const
 T CDefaultParticleSystemQuery::TraceLine(Vector const&, Vector const&, unsigned int, IHandleEntity const*, int, CBaseTrace*)
 T CDefaultPlayerPickupVPhysics::ForcePhysgunOpen(CBasePlayer*)
 T CDefaultPlayerPickupVPhysics::HasPreferredCarryAnglesForPlayer(CBasePlayer*)
 T CDefaultPlayerPickupVPhysics::OnAttemptPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CDefaultPlayerPickupVPhysics::OnFailedPhysGunPickup(Vector)
 T CDefaultPlayerPickupVPhysics::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T CDefaultPlayerPickupVPhysics::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CDefaultPlayerPickupVPhysics::PhysGunLaunchAngularImpulse()
 T CDefaultPlayerPickupVPhysics::PhysGunLaunchVelocity(Vector const&, float)
 T CDefaultPlayerPickupVPhysics::PreferredCarryAngles()
 T CDefaultPlayerPickupVPhysics::ShouldPuntUseLaunchForces(PhysGunForce_t)
 T CDefaultResponseSystem::CDefaultResponseSystem()
 T CDefaultResponseSystem::ClearInstanced()
 T CDefaultResponseSystem::GetScriptFile()
 T CDefaultResponseSystem::Init()
 T CDefaultResponseSystem::LevelInitPostEntity()
 T CDefaultResponseSystem::LevelInitPreEntity()
 T CDefaultResponseSystem::PrecacheCustomResponseSystem(char const*)
 T CDefaultResponseSystem::Release()
 T CDefaultResponseSystem::ReloadAllResponseSystems()
 T CDefaultResponseSystem::Shutdown()
 T CDefaultResponseSystem::~CDefaultResponseSystem()
 T CDefaultResponseSystemSaveRestoreBlockHandler::GetBlockName()
 T CDefaultResponseSystemSaveRestoreBlockHandler::ReadRestoreHeaders(IRestore*)
 T CDefaultResponseSystemSaveRestoreBlockHandler::Restore(IRestore*, bool)
 T CDefaultResponseSystemSaveRestoreBlockHandler::Save(ISave*)
 T CDefaultResponseSystemSaveRestoreBlockHandler::WriteSaveHeaders(ISave*)
 T CDetailBlocker::~CDetailBlocker()
 T CDevShotSystem::FrameUpdatePostEntityThink()
 T CDevShotSystem::LevelInitPreEntity()
 T CDevShotSystem::SafeRemoveIfDesired()
 T CDevShotSystem::~CDevShotSystem()
 T CDirtySpatialPartitionEntityList::CDirtySpatialPartitionEntityList(char const*)
 T CDirtySpatialPartitionEntityList::Init()
 T CDirtySpatialPartitionEntityList::LevelShutdownPostEntity()
 T CDirtySpatialPartitionEntityList::OnPostQuery(int)
 T CDirtySpatialPartitionEntityList::OnPreQuery(int)
 T CDirtySpatialPartitionEntityList::Shutdown()
 T CDirtySpatialPartitionEntityList::~CDirtySpatialPartitionEntityList()
 T CDmxAttribute::AllocateDataMemory(DmAttributeType_t)
 T CDmxAttribute::CDmxAttribute(char const*)
 T CDmxAttribute::FreeDataMemory()
 T CDmxAttribute::GetName() const
 T CDmxAttribute::SetValue(char const*)
 T CDmxAttribute::Unserialize(DmAttributeType_t, CUtlBuffer&)
 T CDmxAttribute::UnserializeElement(DmAttributeType_t, CUtlBuffer&)
 T CDmxAttribute::~CDmxAttribute()
 T CDmxElement::AddAttribute(char const*)
 T CDmxElement::AddElementsToDelete(CUtlVector<CDmxElement*, CUtlMemory<CDmxElement*, int> >&)
 T CDmxElement::CDmxElement(char const*)
 T CDmxElement::GetAttribute(char const*)
 T CDmxElement::GetAttribute(char const*) const
 T CDmxElement::GetId() const
 T CDmxElement::GetName() const
 T CDmxElement::GetTypeString() const
 T CDmxElement::HasAttribute(char const*) const
 T CDmxElement::LockForChanges(bool)
 T CDmxElement::RemoveAllElementsRecursive()
 T CDmxElement::Resort() const
 T CDmxElement::SetId(UniqueId_t const&)
 T CDmxElement::UnpackIntoStructure(void*, DmxElementUnpackStructure_t const*) const
 T CDmxElement::~CDmxElement()
 T CDmxElementDictionary::AddArrayAttribute(CDmxAttribute*, UniqueId_t const&)
 T CDmxElementDictionary::AddAttribute(CDmxAttribute*, UniqueId_t const&)
 T CDmxElementDictionary::Clear()
 T CDmxElementDictionary::HookUpElementArrayAttributes()
 T CDmxElementDictionary::HookUpElementReferences()
 T CDmxElementDictionary::InsertElement(CDmxElement*)
 T CDmxKeyValues2ErrorStack::ReportError(char const*, ...)
 T CDmxSerializer::Unserialize(CUtlBuffer&, int, CDmxElement**)
 T CDmxSerializer::UnserializeAttributes(CUtlBuffer&, CDmxElement*, CUtlVector<CDmxElement*, CUtlMemory<CDmxElement*, int> >&, int, int*, char*)
 T CDmxSerializer::UnserializeElementArrayAttribute(CUtlBuffer&, CDmxAttribute*, CUtlVector<CDmxElement*, CUtlMemory<CDmxElement*, int> >&)
 T CDmxSerializer::UnserializeElementIndex(CUtlBuffer&, CUtlVector<CDmxElement*, CUtlMemory<CDmxElement*, int> >&)
 T CDmxSerializerKeyValues2::EatWhitespacesAndComments(CUtlBuffer&)
 T CDmxSerializerKeyValues2::ReadToken(CUtlBuffer&, CUtlBuffer&)
 T CDmxSerializerKeyValues2::Unserialize(char const*, CUtlBuffer&, CDmxElement**)
 T CDmxSerializerKeyValues2::UnserializeArrayAttribute(CUtlBuffer&, int, char const*, DmAttributeType_t)
 T CDmxSerializerKeyValues2::UnserializeAttribute(CUtlBuffer&, int, char const*, DmAttributeType_t)
 T CDmxSerializerKeyValues2::UnserializeAttributeValueFromToken(CDmxAttribute*, DmAttributeType_t, CUtlBuffer&)
 T CDmxSerializerKeyValues2::UnserializeElement(CUtlBuffer&, char const*, int*)
 T CDmxSerializerKeyValues2::UnserializeElement(CUtlBuffer&, int*)
 T CDmxSerializerKeyValues2::UnserializeElementArrayAttribute(CUtlBuffer&, int, char const*)
 T CDmxSerializerKeyValues2::UnserializeElementAttribute(CUtlBuffer&, int, char const*, char const*)
 T CDmxSerializerKeyValues2::UnserializeId(CUtlBuffer&, int)
 T CDoomsdayAwardTemplate::CDoomsdayAwardTemplate(int)
 T CDoomsdayAwardTemplate::FireGameEvent(IGameEvent*)
 T CDoomsdayAwardTemplate::OnCreate()
 T CDoomsdayAwardTemplate::~CDoomsdayAwardTemplate()
 T CDumpTeamDesired::operator()(CTerrorPlayer*)
 T CDynamicLight::DynamicLightThink()
 T CDynamicLight::GetDataDescMap()
 T CDynamicLight::GetServerClass()
 T CDynamicLight::InputToggle(inputdata_t&)
 T CDynamicLight::InputTurnOff(inputdata_t&)
 T CDynamicLight::InputTurnOn(inputdata_t&)
 T CDynamicLight::KeyValue(char const*, char const*)
 T CDynamicLight::Spawn()
 T CDynamicLight::YouForgotToImplementOrDeclareServerClass()
 T CDynamicLight::~CDynamicLight()
 T CDynamicProp::AnimThink()
 T CDynamicProp::CDynamicProp()
 T CDynamicProp::CreateBoneFollowers()
 T CDynamicProp::CreateVPhysics()
 T CDynamicProp::FinishSetSequence(int)
 T CDynamicProp::GetDataDescMap()
 T CDynamicProp::GetRootPhysicsObjectForBreak()
 T CDynamicProp::GetServerClass()
 T CDynamicProp::HandleAnimEvent(animevent_t*)
 T CDynamicProp::InputDisableCollision(inputdata_t&)
 T CDynamicProp::InputEnableCollision(inputdata_t&)
 T CDynamicProp::InputSetAnimation(inputdata_t&)
 T CDynamicProp::InputSetDefaultAnimation(inputdata_t&)
 T CDynamicProp::InputSetPlaybackRate(inputdata_t&)
 T CDynamicProp::InputTurnOff(inputdata_t&)
 T CDynamicProp::InputTurnOn(inputdata_t&)
 T CDynamicProp::NotifyPositionChanged(CBaseEntity*)
 T CDynamicProp::OnRestore()
 T CDynamicProp::OverridePropdata()
 T CDynamicProp::PropSetAnim(char const*)
 T CDynamicProp::PropSetSequence(int)
 T CDynamicProp::SetParent(CBaseEntity*, int)
 T CDynamicProp::ShouldSetCreateTime(inputdata_t&)
 T CDynamicProp::Spawn()
 T CDynamicProp::TestCollision(Ray_t const&, unsigned int, CGameTrace&)
 T CDynamicProp::UpdateOnRemove()
 T CDynamicProp::YouForgotToImplementOrDeclareServerClass()
 T CDynamicProp::~CDynamicProp()
 T CEarlyMourningAwardTemplate::CEarlyMourningAwardTemplate(int)
 T CEarlyMourningAwardTemplate::FireGameEvent(IGameEvent*)
 T CEarlyMourningAwardTemplate::OnCreate()
 T CEarlyMourningAwardTemplate::~CEarlyMourningAwardTemplate()
 T CEffectsServer::Beam(Vector const&, Vector const&, int, int, unsigned char, unsigned char, float, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
 T CEffectsServer::Dust(Vector const&, Vector const&, float, float)
 T CEffectsServer::EnergySplash(Vector const&, Vector const&, bool)
 T CEffectsServer::IsServer()
 T CEffectsServer::MetalSparks(Vector const&, Vector const&)
 T CEffectsServer::MuzzleFlash(Vector const&, QAngle const&, float, int)
 T CEffectsServer::Ricochet(Vector const&, Vector const&)
 T CEffectsServer::Scent(Vector const&, Vector const&, int)
 T CEffectsServer::Smoke(Vector const&, int, float, float)
 T CEffectsServer::Sparks(Vector const&, int, int, Vector const*)
 T CEffectsServer::SuppressEffectsSounds(bool)
 T CEffectsServer::Time()
 T CEffectsServer::~CEffectsServer()
 T CEmbers::EmberUse(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CEmbers::GetDataDescMap()
 T CEmbers::GetServerClass()
 T CEmbers::Precache()
 T CEmbers::Spawn()
 T CEmbers::YouForgotToImplementOrDeclareServerClass()
 T CEmbers::~CEmbers()
 T CEmptyConVar::GetName() const
 T CEmptyConVar::IsFlagSet(int) const
 T CEmptyConVar::SetValue(char const*)
 T CEmptyConVar::SetValue(float)
 T CEmptyConVar::SetValue(int)
 T CEmptyConVar::~CEmptyConVar()
 T CEnableMotionFixup::~CEnableMotionFixup()
 T CEntFireAutoCompletionFunctor::CommandCallback(CCommand const&)
 T CEntFireAutoCompletionFunctor::CommandCompletionCallback(char const*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >&)
 T CEntFireAutoCompletionFunctor::EntFire_AutoCompleteInput(char const*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >&)
 T CEntityBlocker::Create(Vector const&, Vector const&, Vector const&, CBaseEntity*, bool)
 T CEntityBlocker::Spawn()
 T CEntityBlocker::TestCollision(Ray_t const&, unsigned int, CGameTrace&)
 T CEntityBlocker::~CEntityBlocker()
 T CEntityClassList<CPhysicsNPCSolver>::LevelShutdownPostEntity()
 T CEntityClassList<CPhysicsNPCSolver>::~CEntityClassList()
 T CEntityClassList<CSkyCamera>::LevelShutdownPostEntity()
 T CEntityClassList<CSkyCamera>::~CEntityClassList()
 T CEntityDataInstantiator<CWatcherList>::CompareFunc(CEntityDataInstantiator<CWatcherList>::HashEntry const&, CEntityDataInstantiator<CWatcherList>::HashEntry const&)
 T CEntityDataInstantiator<CWatcherList>::CreateDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<CWatcherList>::DestroyDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<CWatcherList>::GetDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<CWatcherList>::KeyFunc(CEntityDataInstantiator<CWatcherList>::HashEntry const&)
 T CEntityDataInstantiator<CWatcherList>::~CEntityDataInstantiator()
 T CEntityDataInstantiator<ModelWidthScale>::CompareFunc(CEntityDataInstantiator<ModelWidthScale>::HashEntry const&, CEntityDataInstantiator<ModelWidthScale>::HashEntry const&)
 T CEntityDataInstantiator<ModelWidthScale>::CreateDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<ModelWidthScale>::DestroyDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<ModelWidthScale>::GetDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<ModelWidthScale>::KeyFunc(CEntityDataInstantiator<ModelWidthScale>::HashEntry const&)
 T CEntityDataInstantiator<ModelWidthScale>::~CEntityDataInstantiator()
 T CEntityDataInstantiator<StepSimulationData>::CompareFunc(CEntityDataInstantiator<StepSimulationData>::HashEntry const&, CEntityDataInstantiator<StepSimulationData>::HashEntry const&)
 T CEntityDataInstantiator<StepSimulationData>::CreateDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<StepSimulationData>::DestroyDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<StepSimulationData>::GetDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<StepSimulationData>::KeyFunc(CEntityDataInstantiator<StepSimulationData>::HashEntry const&)
 T CEntityDataInstantiator<StepSimulationData>::~CEntityDataInstantiator()
 T CEntityDataInstantiator<groundlink_t>::CompareFunc(CEntityDataInstantiator<groundlink_t>::HashEntry const&, CEntityDataInstantiator<groundlink_t>::HashEntry const&)
 T CEntityDataInstantiator<groundlink_t>::CreateDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<groundlink_t>::DestroyDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<groundlink_t>::GetDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<groundlink_t>::KeyFunc(CEntityDataInstantiator<groundlink_t>::HashEntry const&)
 T CEntityDataInstantiator<groundlink_t>::~CEntityDataInstantiator()
 T CEntityDataInstantiator<physicspushlist_t>::CompareFunc(CEntityDataInstantiator<physicspushlist_t>::HashEntry const&, CEntityDataInstantiator<physicspushlist_t>::HashEntry const&)
 T CEntityDataInstantiator<physicspushlist_t>::CreateDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<physicspushlist_t>::DestroyDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<physicspushlist_t>::GetDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<physicspushlist_t>::KeyFunc(CEntityDataInstantiator<physicspushlist_t>::HashEntry const&)
 T CEntityDataInstantiator<physicspushlist_t>::~CEntityDataInstantiator()
 T CEntityDataInstantiator<touchlink_t>::CompareFunc(CEntityDataInstantiator<touchlink_t>::HashEntry const&, CEntityDataInstantiator<touchlink_t>::HashEntry const&)
 T CEntityDataInstantiator<touchlink_t>::CreateDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<touchlink_t>::DestroyDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<touchlink_t>::GetDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<touchlink_t>::KeyFunc(CEntityDataInstantiator<touchlink_t>::HashEntry const&)
 T CEntityDataInstantiator<touchlink_t>::~CEntityDataInstantiator()
 T CEntityDataInstantiator<vphysicsupdateai_t>::CompareFunc(CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry const&, CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry const&)
 T CEntityDataInstantiator<vphysicsupdateai_t>::CreateDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<vphysicsupdateai_t>::DestroyDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<vphysicsupdateai_t>::GetDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<vphysicsupdateai_t>::KeyFunc(CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry const&)
 T CEntityDataInstantiator<vphysicsupdateai_t>::~CEntityDataInstantiator()
 T CEntityDissolve::Create(CBaseEntity*, CBaseEntity*)
 T CEntityDissolve::Create(CBaseEntity*, char const*, float, int, bool*)
 T CEntityDissolve::DissolveThink()
 T CEntityDissolve::ElectrocuteThink()
 T CEntityDissolve::GetDataDescMap()
 T CEntityDissolve::GetServerClass()
 T CEntityDissolve::InputDissolve(inputdata_t&)
 T CEntityDissolve::Precache()
 T CEntityDissolve::Spawn()
 T CEntityDissolve::YouForgotToImplementOrDeclareServerClass()
 T CEntityDissolve::~CEntityDissolve()
 T CEntityFactory<Boomer>::Create(char const*)
 T CEntityFactory<Boomer>::Destroy(IServerNetworkable*)
 T CEntityFactory<Boomer>::GetEntitySize()
 T CEntityFactory<CAISound>::Create(char const*)
 T CEntityFactory<CAISound>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAISound>::GetEntitySize()
 T CEntityFactory<CAI_ChangeHintGroup>::Create(char const*)
 T CEntityFactory<CAI_ChangeHintGroup>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAI_ChangeHintGroup>::GetEntitySize()
 T CEntityFactory<CAI_ChangeTarget>::Create(char const*)
 T CEntityFactory<CAI_ChangeTarget>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAI_ChangeTarget>::GetEntitySize()
 T CEntityFactory<CAmbientGeneric>::Create(char const*)
 T CEntityFactory<CAmbientGeneric>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAmbientGeneric>::GetEntitySize()
 T CEntityFactory<CAreaPortal>::Create(char const*)
 T CEntityFactory<CAreaPortal>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAreaPortal>::GetEntitySize()
 T CEntityFactory<CAssaultRifle>::Create(char const*)
 T CEntityFactory<CAssaultRifle>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAssaultRifle>::GetEntitySize()
 T CEntityFactory<CAutoShotgun>::Create(char const*)
 T CEntityFactory<CAutoShotgun>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAutoShotgun>::GetEntitySize()
 T CEntityFactory<CBaseButton>::Create(char const*)
 T CEntityFactory<CBaseButton>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBaseButton>::GetEntitySize()
 T CEntityFactory<CBaseCSGrenade>::Create(char const*)
 T CEntityFactory<CBaseCSGrenade>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBaseCSGrenade>::GetEntitySize()
 T CEntityFactory<CBaseDMStart>::Create(char const*)
 T CEntityFactory<CBaseDMStart>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBaseDMStart>::GetEntitySize()
 T CEntityFactory<CBaseDoor>::Create(char const*)
 T CEntityFactory<CBaseDoor>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBaseDoor>::GetEntitySize()
 T CEntityFactory<CBaseEntity>::Create(char const*)
 T CEntityFactory<CBaseEntity>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBaseEntity>::GetEntitySize()
 T CEntityFactory<CBaseFilter>::Create(char const*)
 T CEntityFactory<CBaseFilter>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBaseFilter>::GetEntitySize()
 T CEntityFactory<CBaseFlex>::Create(char const*)
 T CEntityFactory<CBaseFlex>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBaseFlex>::GetEntitySize()
 T CEntityFactory<CBaseGrenade>::Create(char const*)
 T CEntityFactory<CBaseGrenade>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBaseGrenade>::GetEntitySize()
 T CEntityFactory<CBaseMoveBehavior>::Create(char const*)
 T CEntityFactory<CBaseMoveBehavior>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBaseMoveBehavior>::GetEntitySize()
 T CEntityFactory<CBaseTrigger>::Create(char const*)
 T CEntityFactory<CBaseTrigger>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBaseTrigger>::GetEntitySize()
 T CEntityFactory<CBaseViewModel>::Create(char const*)
 T CEntityFactory<CBaseViewModel>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBaseViewModel>::GetEntitySize()
 T CEntityFactory<CBeam>::Create(char const*)
 T CEntityFactory<CBeam>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBeam>::GetEntitySize()
 T CEntityFactory<CBeamSpotlight>::Create(char const*)
 T CEntityFactory<CBeamSpotlight>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBeamSpotlight>::GetEntitySize()
 T CEntityFactory<CBlood>::Create(char const*)
 T CEntityFactory<CBlood>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBlood>::GetEntitySize()
 T CEntityFactory<CBoneFollower>::Create(char const*)
 T CEntityFactory<CBoneFollower>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBoneFollower>::GetEntitySize()
 T CEntityFactory<CBoomerClaw>::Create(char const*)
 T CEntityFactory<CBoomerClaw>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBoomerClaw>::GetEntitySize()
 T CEntityFactory<CBreakable>::Create(char const*)
 T CEntityFactory<CBreakable>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBreakable>::GetEntitySize()
 T CEntityFactory<CBreakableSurface>::Create(char const*)
 T CEntityFactory<CBreakableSurface>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBreakableSurface>::GetEntitySize()
 T CEntityFactory<CBubbling>::Create(char const*)
 T CEntityFactory<CBubbling>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBubbling>::GetEntitySize()
 T CEntityFactory<CButtonTimed>::Create(char const*)
 T CEntityFactory<CButtonTimed>::Destroy(IServerNetworkable*)
 T CEntityFactory<CButtonTimed>::GetEntitySize()
 T CEntityFactory<CCSGameRulesProxy>::Create(char const*)
 T CEntityFactory<CCSGameRulesProxy>::Destroy(IServerNetworkable*)
 T CEntityFactory<CCSGameRulesProxy>::GetEntitySize()
 T CEntityFactory<CCSRagdoll>::Create(char const*)
 T CEntityFactory<CCSRagdoll>::Destroy(IServerNetworkable*)
 T CEntityFactory<CCSRagdoll>::GetEntitySize()
 T CEntityFactory<CCSTeam>::Create(char const*)
 T CEntityFactory<CCSTeam>::Destroy(IServerNetworkable*)
 T CEntityFactory<CCSTeam>::GetEntitySize()
 T CEntityFactory<CCarGlassProp>::Create(char const*)
 T CEntityFactory<CCarGlassProp>::Destroy(IServerNetworkable*)
 T CEntityFactory<CCarGlassProp>::GetEntitySize()
 T CEntityFactory<CCarProp>::Create(char const*)
 T CEntityFactory<CCarProp>::Destroy(IServerNetworkable*)
 T CEntityFactory<CCarProp>::GetEntitySize()
 T CEntityFactory<CClientPath>::Create(char const*)
 T CEntityFactory<CClientPath>::Destroy(IServerNetworkable*)
 T CEntityFactory<CClientPath>::GetEntitySize()
 T CEntityFactory<CColorCorrection>::Create(char const*)
 T CEntityFactory<CColorCorrection>::Destroy(IServerNetworkable*)
 T CEntityFactory<CColorCorrection>::GetEntitySize()
 T CEntityFactory<CColorCorrectionVolume>::Create(char const*)
 T CEntityFactory<CColorCorrectionVolume>::Destroy(IServerNetworkable*)
 T CEntityFactory<CColorCorrectionVolume>::GetEntitySize()
 T CEntityFactory<CCommentaryAuto>::Create(char const*)
 T CEntityFactory<CCommentaryAuto>::Destroy(IServerNetworkable*)
 T CEntityFactory<CCommentaryAuto>::GetEntitySize()
 T CEntityFactory<CCommentaryDummy>::Create(char const*)
 T CEntityFactory<CCommentaryDummy>::Destroy(IServerNetworkable*)
 T CEntityFactory<CCommentaryDummy>::GetEntitySize()
 T CEntityFactory<CCommentaryViewPosition>::Create(char const*)
 T CEntityFactory<CCommentaryViewPosition>::Destroy(IServerNetworkable*)
 T CEntityFactory<CCommentaryViewPosition>::GetEntitySize()
 T CEntityFactory<CCommentaryZombieSpawner>::Create(char const*)
 T CEntityFactory<CCommentaryZombieSpawner>::Destroy(IServerNetworkable*)
 T CEntityFactory<CCommentaryZombieSpawner>::GetEntitySize()
 T CEntityFactory<CConstraintAnchor>::Create(char const*)
 T CEntityFactory<CConstraintAnchor>::Destroy(IServerNetworkable*)
 T CEntityFactory<CConstraintAnchor>::GetEntitySize()
 T CEntityFactory<CDeathFallCamera>::Create(char const*)
 T CEntityFactory<CDeathFallCamera>::Destroy(IServerNetworkable*)
 T CEntityFactory<CDeathFallCamera>::GetEntitySize()
 T CEntityFactory<CDebugHistory>::Create(char const*)
 T CEntityFactory<CDebugHistory>::Destroy(IServerNetworkable*)
 T CEntityFactory<CDebugHistory>::GetEntitySize()
 T CEntityFactory<CDecal>::Create(char const*)
 T CEntityFactory<CDecal>::Destroy(IServerNetworkable*)
 T CEntityFactory<CDecal>::GetEntitySize()
 T CEntityFactory<CDetailBlocker>::Create(char const*)
 T CEntityFactory<CDetailBlocker>::Destroy(IServerNetworkable*)
 T CEntityFactory<CDetailBlocker>::GetEntitySize()
 T CEntityFactory<CDynamicLight>::Create(char const*)
 T CEntityFactory<CDynamicLight>::Destroy(IServerNetworkable*)
 T CEntityFactory<CDynamicLight>::GetEntitySize()
 T CEntityFactory<CDynamicProp>::Create(char const*)
 T CEntityFactory<CDynamicProp>::Destroy(IServerNetworkable*)
 T CEntityFactory<CDynamicProp>::GetEntitySize()
 T CEntityFactory<CEmbers>::Create(char const*)
 T CEntityFactory<CEmbers>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEmbers>::GetEntitySize()
 T CEntityFactory<CEnableMotionFixup>::Create(char const*)
 T CEntityFactory<CEnableMotionFixup>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnableMotionFixup>::GetEntitySize()
 T CEntityFactory<CEntityBlocker>::Create(char const*)
 T CEntityFactory<CEntityBlocker>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEntityBlocker>::GetEntitySize()
 T CEntityFactory<CEntityDissolve>::Create(char const*)
 T CEntityFactory<CEntityDissolve>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEntityDissolve>::GetEntitySize()
 T CEntityFactory<CEntityFlame>::Create(char const*)
 T CEntityFactory<CEntityFlame>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEntityFlame>::GetEntitySize()
 T CEntityFactory<CEntityParticleTrail>::Create(char const*)
 T CEntityFactory<CEntityParticleTrail>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEntityParticleTrail>::GetEntitySize()
 T CEntityFactory<CEnvBeam>::Create(char const*)
 T CEntityFactory<CEnvBeam>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvBeam>::GetEntitySize()
 T CEntityFactory<CEnvBeverage>::Create(char const*)
 T CEntityFactory<CEnvBeverage>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvBeverage>::GetEntitySize()
 T CEntityFactory<CEnvCredits>::Create(char const*)
 T CEntityFactory<CEnvCredits>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvCredits>::GetEntitySize()
 T CEntityFactory<CEnvDOFController>::Create(char const*)
 T CEntityFactory<CEnvDOFController>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvDOFController>::GetEntitySize()
 T CEntityFactory<CEnvDetailController>::Create(char const*)
 T CEntityFactory<CEnvDetailController>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvDetailController>::GetEntitySize()
 T CEntityFactory<CEnvDustPuff>::Create(char const*)
 T CEntityFactory<CEnvDustPuff>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvDustPuff>::GetEntitySize()
 T CEntityFactory<CEnvEffectsScript>::Create(char const*)
 T CEntityFactory<CEnvEffectsScript>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvEffectsScript>::GetEntitySize()
 T CEntityFactory<CEnvEntityMaker>::Create(char const*)
 T CEntityFactory<CEnvEntityMaker>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvEntityMaker>::GetEntitySize()
 T CEntityFactory<CEnvExplosion>::Create(char const*)
 T CEntityFactory<CEnvExplosion>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvExplosion>::GetEntitySize()
 T CEntityFactory<CEnvFade>::Create(char const*)
 T CEntityFactory<CEnvFade>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvFade>::GetEntitySize()
 T CEntityFactory<CEnvFireSensor>::Create(char const*)
 T CEntityFactory<CEnvFireSensor>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvFireSensor>::GetEntitySize()
 T CEntityFactory<CEnvFireSource>::Create(char const*)
 T CEntityFactory<CEnvFireSource>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvFireSource>::GetEntitySize()
 T CEntityFactory<CEnvFunnel>::Create(char const*)
 T CEntityFactory<CEnvFunnel>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvFunnel>::GetEntitySize()
 T CEntityFactory<CEnvGlobal>::Create(char const*)
 T CEntityFactory<CEnvGlobal>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvGlobal>::GetEntitySize()
 T CEntityFactory<CEnvGunfire>::Create(char const*)
 T CEntityFactory<CEnvGunfire>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvGunfire>::GetEntitySize()
 T CEntityFactory<CEnvHudHint>::Create(char const*)
 T CEntityFactory<CEnvHudHint>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvHudHint>::GetEntitySize()
 T CEntityFactory<CEnvLaser>::Create(char const*)
 T CEntityFactory<CEnvLaser>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvLaser>::GetEntitySize()
 T CEntityFactory<CEnvLight>::Create(char const*)
 T CEntityFactory<CEnvLight>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvLight>::GetEntitySize()
 T CEntityFactory<CEnvMicrophone>::Create(char const*)
 T CEntityFactory<CEnvMicrophone>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvMicrophone>::GetEntitySize()
 T CEntityFactory<CEnvMuzzleFlash>::Create(char const*)
 T CEntityFactory<CEnvMuzzleFlash>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvMuzzleFlash>::GetEntitySize()
 T CEntityFactory<CEnvParticleScript>::Create(char const*)
 T CEntityFactory<CEnvParticleScript>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvParticleScript>::GetEntitySize()
 T CEntityFactory<CEnvPlayerSurfaceTrigger>::Create(char const*)
 T CEntityFactory<CEnvPlayerSurfaceTrigger>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvPlayerSurfaceTrigger>::GetEntitySize()
 T CEntityFactory<CEnvProjectedTexture>::Create(char const*)
 T CEntityFactory<CEnvProjectedTexture>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvProjectedTexture>::GetEntitySize()
 T CEntityFactory<CEnvQuadraticBeam>::Create(char const*)
 T CEntityFactory<CEnvQuadraticBeam>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvQuadraticBeam>::GetEntitySize()
 T CEntityFactory<CEnvRockLauncher>::Create(char const*)
 T CEntityFactory<CEnvRockLauncher>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvRockLauncher>::GetEntitySize()
 T CEntityFactory<CEnvScreenEffect>::Create(char const*)
 T CEntityFactory<CEnvScreenEffect>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvScreenEffect>::GetEntitySize()
 T CEntityFactory<CEnvScreenOverlay>::Create(char const*)
 T CEntityFactory<CEnvScreenOverlay>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvScreenOverlay>::GetEntitySize()
 T CEntityFactory<CEnvShake>::Create(char const*)
 T CEntityFactory<CEnvShake>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvShake>::GetEntitySize()
 T CEntityFactory<CEnvShooter>::Create(char const*)
 T CEntityFactory<CEnvShooter>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvShooter>::GetEntitySize()
 T CEntityFactory<CEnvSoundscape>::Create(char const*)
 T CEntityFactory<CEnvSoundscape>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvSoundscape>::GetEntitySize()
 T CEntityFactory<CEnvSoundscapeProxy>::Create(char const*)
 T CEntityFactory<CEnvSoundscapeProxy>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvSoundscapeProxy>::GetEntitySize()
 T CEntityFactory<CEnvSoundscapeTriggerable>::Create(char const*)
 T CEntityFactory<CEnvSoundscapeTriggerable>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvSoundscapeTriggerable>::GetEntitySize()
 T CEntityFactory<CEnvSpark>::Create(char const*)
 T CEntityFactory<CEnvSpark>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvSpark>::GetEntitySize()
 T CEntityFactory<CEnvSplash>::Create(char const*)
 T CEntityFactory<CEnvSplash>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvSplash>::GetEntitySize()
 T CEntityFactory<CEnvTonemapController>::Create(char const*)
 T CEntityFactory<CEnvTonemapController>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvTonemapController>::GetEntitySize()
 T CEntityFactory<CEnvTracer>::Create(char const*)
 T CEntityFactory<CEnvTracer>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvTracer>::GetEntitySize()
 T CEntityFactory<CEnvViewPunch>::Create(char const*)
 T CEntityFactory<CEnvViewPunch>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvViewPunch>::GetEntitySize()
 T CEntityFactory<CEnvWeaponfire>::Create(char const*)
 T CEntityFactory<CEnvWeaponfire>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvWeaponfire>::GetEntitySize()
 T CEntityFactory<CEnvWind>::Create(char const*)
 T CEntityFactory<CEnvWind>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvWind>::GetEntitySize()
 T CEntityFactory<CEnvZoom>::Create(char const*)
 T CEntityFactory<CEnvZoom>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvZoom>::GetEntitySize()
 T CEntityFactory<CEnv_Blocker>::Create(char const*)
 T CEntityFactory<CEnv_Blocker>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnv_Blocker>::GetEntitySize()
 T CEntityFactory<CEscapeRoute>::Create(char const*)
 T CEntityFactory<CEscapeRoute>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEscapeRoute>::GetEntitySize()
 T CEntityFactory<CEventQueueSaveLoadProxy>::Create(char const*)
 T CEntityFactory<CEventQueueSaveLoadProxy>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEventQueueSaveLoadProxy>::GetEntitySize()
 T CEntityFactory<CFilterClass>::Create(char const*)
 T CEntityFactory<CFilterClass>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFilterClass>::GetEntitySize()
 T CEntityFactory<CFilterContext>::Create(char const*)
 T CEntityFactory<CFilterContext>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFilterContext>::GetEntitySize()
 T CEntityFactory<CFilterEnemy>::Create(char const*)
 T CEntityFactory<CFilterEnemy>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFilterEnemy>::GetEntitySize()
 T CEntityFactory<CFilterMassGreater>::Create(char const*)
 T CEntityFactory<CFilterMassGreater>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFilterMassGreater>::GetEntitySize()
 T CEntityFactory<CFilterModel>::Create(char const*)
 T CEntityFactory<CFilterModel>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFilterModel>::GetEntitySize()
 T CEntityFactory<CFilterMultiple>::Create(char const*)
 T CEntityFactory<CFilterMultiple>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFilterMultiple>::GetEntitySize()
 T CEntityFactory<CFilterName>::Create(char const*)
 T CEntityFactory<CFilterName>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFilterName>::GetEntitySize()
 T CEntityFactory<CFinaleTrigger>::Create(char const*)
 T CEntityFactory<CFinaleTrigger>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFinaleTrigger>::GetEntitySize()
 T CEntityFactory<CFire>::Create(char const*)
 T CEntityFactory<CFire>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFire>::GetEntitySize()
 T CEntityFactory<CFireSmoke>::Create(char const*)
 T CEntityFactory<CFireSmoke>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFireSmoke>::GetEntitySize()
 T CEntityFactory<CFireTrail>::Create(char const*)
 T CEntityFactory<CFireTrail>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFireTrail>::GetEntitySize()
 T CEntityFactory<CFirstAidKit>::Create(char const*)
 T CEntityFactory<CFirstAidKit>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFirstAidKit>::GetEntitySize()
 T CEntityFactory<CFish>::Create(char const*)
 T CEntityFactory<CFish>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFish>::GetEntitySize()
 T CEntityFactory<CFishPool>::Create(char const*)
 T CEntityFactory<CFishPool>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFishPool>::GetEntitySize()
 T CEntityFactory<CFlexExpresser>::Create(char const*)
 T CEntityFactory<CFlexExpresser>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFlexExpresser>::GetEntitySize()
 T CEntityFactory<CFogController>::Create(char const*)
 T CEntityFactory<CFogController>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFogController>::GetEntitySize()
 T CEntityFactory<CFogTrigger>::Create(char const*)
 T CEntityFactory<CFogTrigger>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFogTrigger>::GetEntitySize()
 T CEntityFactory<CFogVolume>::Create(char const*)
 T CEntityFactory<CFogVolume>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFogVolume>::GetEntitySize()
 T CEntityFactory<CFuelBarrelPiece>::Create(char const*)
 T CEntityFactory<CFuelBarrelPiece>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuelBarrelPiece>::GetEntitySize()
 T CEntityFactory<CFuelBarrelProp>::Create(char const*)
 T CEntityFactory<CFuelBarrelProp>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuelBarrelProp>::GetEntitySize()
 T CEntityFactory<CFuncAreaPortalWindow>::Create(char const*)
 T CEntityFactory<CFuncAreaPortalWindow>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncAreaPortalWindow>::GetEntitySize()
 T CEntityFactory<CFuncBrush>::Create(char const*)
 T CEntityFactory<CFuncBrush>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncBrush>::GetEntitySize()
 T CEntityFactory<CFuncConveyor>::Create(char const*)
 T CEntityFactory<CFuncConveyor>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncConveyor>::GetEntitySize()
 T CEntityFactory<CFuncElevator>::Create(char const*)
 T CEntityFactory<CFuncElevator>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncElevator>::GetEntitySize()
 T CEntityFactory<CFuncFireExtinguisher>::Create(char const*)
 T CEntityFactory<CFuncFireExtinguisher>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncFireExtinguisher>::GetEntitySize()
 T CEntityFactory<CFuncIllusionary>::Create(char const*)
 T CEntityFactory<CFuncIllusionary>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncIllusionary>::GetEntitySize()
 T CEntityFactory<CFuncLadder>::Create(char const*)
 T CEntityFactory<CFuncLadder>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncLadder>::GetEntitySize()
 T CEntityFactory<CFuncLadderEndPoint>::Create(char const*)
 T CEntityFactory<CFuncLadderEndPoint>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncLadderEndPoint>::GetEntitySize()
 T CEntityFactory<CFuncMoveLinear>::Create(char const*)
 T CEntityFactory<CFuncMoveLinear>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncMoveLinear>::GetEntitySize()
 T CEntityFactory<CFuncNavAttributeRegion>::Create(char const*)
 T CEntityFactory<CFuncNavAttributeRegion>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncNavAttributeRegion>::GetEntitySize()
 T CEntityFactory<CFuncNavBlocker>::Create(char const*)
 T CEntityFactory<CFuncNavBlocker>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncNavBlocker>::GetEntitySize()
 T CEntityFactory<CFuncNavObstruction>::Create(char const*)
 T CEntityFactory<CFuncNavObstruction>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncNavObstruction>::GetEntitySize()
 T CEntityFactory<CFuncNavStairsToggle>::Create(char const*)
 T CEntityFactory<CFuncNavStairsToggle>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncNavStairsToggle>::GetEntitySize()
 T CEntityFactory<CFuncOccluder>::Create(char const*)
 T CEntityFactory<CFuncOccluder>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncOccluder>::GetEntitySize()
 T CEntityFactory<CFuncPlat>::Create(char const*)
 T CEntityFactory<CFuncPlat>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncPlat>::GetEntitySize()
 T CEntityFactory<CFuncPlatRot>::Create(char const*)
 T CEntityFactory<CFuncPlatRot>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncPlatRot>::GetEntitySize()
 T CEntityFactory<CFuncPlayerInfectedClip>::Create(char const*)
 T CEntityFactory<CFuncPlayerInfectedClip>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncPlayerInfectedClip>::GetEntitySize()
 T CEntityFactory<CFuncRagdollFader>::Create(char const*)
 T CEntityFactory<CFuncRagdollFader>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncRagdollFader>::GetEntitySize()
 T CEntityFactory<CFuncReflectiveGlass>::Create(char const*)
 T CEntityFactory<CFuncReflectiveGlass>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncReflectiveGlass>::GetEntitySize()
 T CEntityFactory<CFuncRotating>::Create(char const*)
 T CEntityFactory<CFuncRotating>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncRotating>::GetEntitySize()
 T CEntityFactory<CFuncSimpleLadder>::Create(char const*)
 T CEntityFactory<CFuncSimpleLadder>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncSimpleLadder>::GetEntitySize()
 T CEntityFactory<CFuncSmokeVolume>::Create(char const*)
 T CEntityFactory<CFuncSmokeVolume>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncSmokeVolume>::GetEntitySize()
 T CEntityFactory<CFuncSpawnVolume>::Create(char const*)
 T CEntityFactory<CFuncSpawnVolume>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncSpawnVolume>::GetEntitySize()
 T CEntityFactory<CFuncTankTrain>::Create(char const*)
 T CEntityFactory<CFuncTankTrain>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncTankTrain>::GetEntitySize()
 T CEntityFactory<CFuncTrackAuto>::Create(char const*)
 T CEntityFactory<CFuncTrackAuto>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncTrackAuto>::GetEntitySize()
 T CEntityFactory<CFuncTrackChange>::Create(char const*)
 T CEntityFactory<CFuncTrackChange>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncTrackChange>::GetEntitySize()
 T CEntityFactory<CFuncTrackTrain>::Create(char const*)
 T CEntityFactory<CFuncTrackTrain>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncTrackTrain>::GetEntitySize()
 T CEntityFactory<CFuncTrain>::Create(char const*)
 T CEntityFactory<CFuncTrain>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncTrain>::GetEntitySize()
 T CEntityFactory<CFuncTrainControls>::Create(char const*)
 T CEntityFactory<CFuncTrainControls>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncTrainControls>::GetEntitySize()
 T CEntityFactory<CFuncVPhysicsClip>::Create(char const*)
 T CEntityFactory<CFuncVPhysicsClip>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncVPhysicsClip>::GetEntitySize()
 T CEntityFactory<CFuncVehicleClip>::Create(char const*)
 T CEntityFactory<CFuncVehicleClip>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncVehicleClip>::GetEntitySize()
 T CEntityFactory<CFuncWall>::Create(char const*)
 T CEntityFactory<CFuncWall>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncWall>::GetEntitySize()
 T CEntityFactory<CFuncWallToggle>::Create(char const*)
 T CEntityFactory<CFuncWallToggle>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncWallToggle>::GetEntitySize()
 T CEntityFactory<CFunc_DustCloud>::Create(char const*)
 T CEntityFactory<CFunc_DustCloud>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFunc_DustCloud>::GetEntitySize()
 T CEntityFactory<CFunc_DustMotes>::Create(char const*)
 T CEntityFactory<CFunc_DustMotes>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFunc_DustMotes>::GetEntitySize()
 T CEntityFactory<CFunc_LOD>::Create(char const*)
 T CEntityFactory<CFunc_LOD>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFunc_LOD>::GetEntitySize()
 T CEntityFactory<CGameEnd>::Create(char const*)
 T CEntityFactory<CGameEnd>::Destroy(IServerNetworkable*)
 T CEntityFactory<CGameEnd>::GetEntitySize()
 T CEntityFactory<CGameGibManager>::Create(char const*)
 T CEntityFactory<CGameGibManager>::Destroy(IServerNetworkable*)
 T CEntityFactory<CGameGibManager>::GetEntitySize()
 T CEntityFactory<CGamePlayerEquip>::Create(char const*)
 T CEntityFactory<CGamePlayerEquip>::Destroy(IServerNetworkable*)
 T CEntityFactory<CGamePlayerEquip>::GetEntitySize()
 T CEntityFactory<CGamePlayerTeam>::Create(char const*)
 T CEntityFactory<CGamePlayerTeam>::Destroy(IServerNetworkable*)
 T CEntityFactory<CGamePlayerTeam>::GetEntitySize()
 T CEntityFactory<CGamePlayerZone>::Create(char const*)
 T CEntityFactory<CGamePlayerZone>::Destroy(IServerNetworkable*)
 T CEntityFactory<CGamePlayerZone>::GetEntitySize()
 T CEntityFactory<CGameScore>::Create(char const*)
 T CEntityFactory<CGameScore>::Destroy(IServerNetworkable*)
 T CEntityFactory<CGameScore>::GetEntitySize()
 T CEntityFactory<CGameText>::Create(char const*)
 T CEntityFactory<CGameText>::Destroy(IServerNetworkable*)
 T CEntityFactory<CGameText>::GetEntitySize()
 T CEntityFactory<CGameUI>::Create(char const*)
 T CEntityFactory<CGameUI>::Destroy(IServerNetworkable*)
 T CEntityFactory<CGameUI>::GetEntitySize()
 T CEntityFactory<CGameWeaponManager>::Create(char const*)
 T CEntityFactory<CGameWeaponManager>::Destroy(IServerNetworkable*)
 T CEntityFactory<CGameWeaponManager>::GetEntitySize()
 T CEntityFactory<CGasCan>::Create(char const*)
 T CEntityFactory<CGasCan>::Destroy(IServerNetworkable*)
 T CEntityFactory<CGasCan>::GetEntitySize()
 T CEntityFactory<CGenericFlexCycler>::Create(char const*)
 T CEntityFactory<CGenericFlexCycler>::Destroy(IServerNetworkable*)
 T CEntityFactory<CGenericFlexCycler>::GetEntitySize()
 T CEntityFactory<CGib>::Create(char const*)
 T CEntityFactory<CGib>::Destroy(IServerNetworkable*)
 T CEntityFactory<CGib>::GetEntitySize()
 T CEntityFactory<CGibShooter>::Create(char const*)
 T CEntityFactory<CGibShooter>::Destroy(IServerNetworkable*)
 T CEntityFactory<CGibShooter>::GetEntitySize()
 T CEntityFactory<CGunTarget>::Create(char const*)
 T CEntityFactory<CGunTarget>::Destroy(IServerNetworkable*)
 T CEntityFactory<CGunTarget>::GetEntitySize()
 T CEntityFactory<CHandleDummy>::Create(char const*)
 T CEntityFactory<CHandleDummy>::Destroy(IServerNetworkable*)
 T CEntityFactory<CHandleDummy>::GetEntitySize()
 T CEntityFactory<CHandleTest>::Create(char const*)
 T CEntityFactory<CHandleTest>::Destroy(IServerNetworkable*)
 T CEntityFactory<CHandleTest>::GetEntitySize()
 T CEntityFactory<CHunterClaw>::Create(char const*)
 T CEntityFactory<CHunterClaw>::Destroy(IServerNetworkable*)
 T CEntityFactory<CHunterClaw>::GetEntitySize()
 T CEntityFactory<CInfectedZooMaker>::Create(char const*)
 T CEntityFactory<CInfectedZooMaker>::Destroy(IServerNetworkable*)
 T CEntityFactory<CInfectedZooMaker>::GetEntitySize()
 T CEntityFactory<CInfectedZooPuppet>::Create(char const*)
 T CEntityFactory<CInfectedZooPuppet>::Destroy(IServerNetworkable*)
 T CEntityFactory<CInfectedZooPuppet>::GetEntitySize()
 T CEntityFactory<CInferno>::Create(char const*)
 T CEntityFactory<CInferno>::Destroy(IServerNetworkable*)
 T CEntityFactory<CInferno>::GetEntitySize()
 T CEntityFactory<CInfoDirector>::Create(char const*)
 T CEntityFactory<CInfoDirector>::Destroy(IServerNetworkable*)
 T CEntityFactory<CInfoDirector>::GetEntitySize()
 T CEntityFactory<CInfoElevatorFloor>::Create(char const*)
 T CEntityFactory<CInfoElevatorFloor>::Destroy(IServerNetworkable*)
 T CEntityFactory<CInfoElevatorFloor>::GetEntitySize()
 T CEntityFactory<CInfoGameEventProxy>::Create(char const*)
 T CEntityFactory<CInfoGameEventProxy>::Destroy(IServerNetworkable*)
 T CEntityFactory<CInfoGameEventProxy>::GetEntitySize()
 T CEntityFactory<CInfoGameMode>::Create(char const*)
 T CEntityFactory<CInfoGameMode>::Destroy(IServerNetworkable*)
 T CEntityFactory<CInfoGameMode>::GetEntitySize()
 T CEntityFactory<CInfoGoalInfectedChase>::Create(char const*)
 T CEntityFactory<CInfoGoalInfectedChase>::Destroy(IServerNetworkable*)
 T CEntityFactory<CInfoGoalInfectedChase>::GetEntitySize()
 T CEntityFactory<CInfoIntermission>::Create(char const*)
 T CEntityFactory<CInfoIntermission>::Destroy(IServerNetworkable*)
 T CEntityFactory<CInfoIntermission>::GetEntitySize()
 T CEntityFactory<CInfoLadderDismount>::Create(char const*)
 T CEntityFactory<CInfoLadderDismount>::Destroy(IServerNetworkable*)
 T CEntityFactory<CInfoLadderDismount>::GetEntitySize()
 T CEntityFactory<CInfoMassCenter>::Create(char const*)
 T CEntityFactory<CInfoMassCenter>::Destroy(IServerNetworkable*)
 T CEntityFactory<CInfoMassCenter>::GetEntitySize()
 T CEntityFactory<CInfoOverlayAccessor>::Create(char const*)
 T CEntityFactory<CInfoOverlayAccessor>::Destroy(IServerNetworkable*)
 T CEntityFactory<CInfoOverlayAccessor>::GetEntitySize()
 T CEntityFactory<CInfoRemarkable>::Create(char const*)
 T CEntityFactory<CInfoRemarkable>::Destroy(IServerNetworkable*)
 T CEntityFactory<CInfoRemarkable>::GetEntitySize()
 T CEntityFactory<CInfoTarget>::Create(char const*)
 T CEntityFactory<CInfoTarget>::Destroy(IServerNetworkable*)
 T CEntityFactory<CInfoTarget>::GetEntitySize()
 T CEntityFactory<CInfoViewParameters>::Create(char const*)
 T CEntityFactory<CInfoViewParameters>::Destroy(IServerNetworkable*)
 T CEntityFactory<CInfoViewParameters>::GetEntitySize()
 T CEntityFactory<CInfoZombieSpawn>::Create(char const*)
 T CEntityFactory<CInfoZombieSpawn>::Destroy(IServerNetworkable*)
 T CEntityFactory<CInfoZombieSpawn>::GetEntitySize()
 T CEntityFactory<CInstancedSceneEntity>::Create(char const*)
 T CEntityFactory<CInstancedSceneEntity>::Destroy(IServerNetworkable*)
 T CEntityFactory<CInstancedSceneEntity>::GetEntitySize()
 T CEntityFactory<CItemSoda>::Create(char const*)
 T CEntityFactory<CItemSoda>::Destroy(IServerNetworkable*)
 T CEntityFactory<CItemSoda>::GetEntitySize()
 T CEntityFactory<CKeepUpright>::Create(char const*)
 T CEntityFactory<CKeepUpright>::Destroy(IServerNetworkable*)
 T CEntityFactory<CKeepUpright>::GetEntitySize()
 T CEntityFactory<CLight>::Create(char const*)
 T CEntityFactory<CLight>::Destroy(IServerNetworkable*)
 T CEntityFactory<CLight>::GetEntitySize()
 T CEntityFactory<CLightGlow>::Create(char const*)
 T CEntityFactory<CLightGlow>::Destroy(IServerNetworkable*)
 T CEntityFactory<CLightGlow>::GetEntitySize()
 T CEntityFactory<CLogicActiveAutosave>::Create(char const*)
 T CEntityFactory<CLogicActiveAutosave>::Destroy(IServerNetworkable*)
 T CEntityFactory<CLogicActiveAutosave>::GetEntitySize()
 T CEntityFactory<CLogicAuto>::Create(char const*)
 T CEntityFactory<CLogicAuto>::Destroy(IServerNetworkable*)
 T CEntityFactory<CLogicAuto>::GetEntitySize()
 T CEntityFactory<CLogicAutosave>::Create(char const*)
 T CEntityFactory<CLogicAutosave>::Destroy(IServerNetworkable*)
 T CEntityFactory<CLogicAutosave>::GetEntitySize()
 T CEntityFactory<CLogicBranch>::Create(char const*)
 T CEntityFactory<CLogicBranch>::Destroy(IServerNetworkable*)
 T CEntityFactory<CLogicBranch>::GetEntitySize()
 T CEntityFactory<CLogicBranchList>::Create(char const*)
 T CEntityFactory<CLogicBranchList>::Destroy(IServerNetworkable*)
 T CEntityFactory<CLogicBranchList>::GetEntitySize()
 T CEntityFactory<CLogicCase>::Create(char const*)
 T CEntityFactory<CLogicCase>::Destroy(IServerNetworkable*)
 T CEntityFactory<CLogicCase>::GetEntitySize()
 T CEntityFactory<CLogicCollisionPair>::Create(char const*)
 T CEntityFactory<CLogicCollisionPair>::Destroy(IServerNetworkable*)
 T CEntityFactory<CLogicCollisionPair>::GetEntitySize()
 T CEntityFactory<CLogicCompare>::Create(char const*)
 T CEntityFactory<CLogicCompare>::Destroy(IServerNetworkable*)
 T CEntityFactory<CLogicCompare>::GetEntitySize()
 T CEntityFactory<CLogicCompareInteger>::Create(char const*)
 T CEntityFactory<CLogicCompareInteger>::Destroy(IServerNetworkable*)
 T CEntityFactory<CLogicCompareInteger>::GetEntitySize()
 T CEntityFactory<CLogicLineToEntity>::Create(char const*)
 T CEntityFactory<CLogicLineToEntity>::Destroy(IServerNetworkable*)
 T CEntityFactory<CLogicLineToEntity>::GetEntitySize()
 T CEntityFactory<CLogicMeasureMovement>::Create(char const*)
 T CEntityFactory<CLogicMeasureMovement>::Destroy(IServerNetworkable*)
 T CEntityFactory<CLogicMeasureMovement>::GetEntitySize()
 T CEntityFactory<CLogicNavigation>::Create(char const*)
 T CEntityFactory<CLogicNavigation>::Destroy(IServerNetworkable*)
 T CEntityFactory<CLogicNavigation>::GetEntitySize()
 T CEntityFactory<CLogicRelay>::Create(char const*)
 T CEntityFactory<CLogicRelay>::Destroy(IServerNetworkable*)
 T CEntityFactory<CLogicRelay>::GetEntitySize()
 T CEntityFactory<CLunge>::Create(char const*)
 T CEntityFactory<CLunge>::Destroy(IServerNetworkable*)
 T CEntityFactory<CLunge>::GetEntitySize()
 T CEntityFactory<CMapInfo>::Create(char const*)
 T CEntityFactory<CMapInfo>::Destroy(IServerNetworkable*)
 T CEntityFactory<CMapInfo>::GetEntitySize()
 T CEntityFactory<CMapInfoVersus>::Create(char const*)
 T CEntityFactory<CMapInfoVersus>::Destroy(IServerNetworkable*)
 T CEntityFactory<CMapInfoVersus>::GetEntitySize()
 T CEntityFactory<CMaterialModifyControl>::Create(char const*)
 T CEntityFactory<CMaterialModifyControl>::Destroy(IServerNetworkable*)
 T CEntityFactory<CMaterialModifyControl>::GetEntitySize()
 T CEntityFactory<CMathColorBlend>::Create(char const*)
 T CEntityFactory<CMathColorBlend>::Destroy(IServerNetworkable*)
 T CEntityFactory<CMathColorBlend>::GetEntitySize()
 T CEntityFactory<CMathCounter>::Create(char const*)
 T CEntityFactory<CMathCounter>::Destroy(IServerNetworkable*)
 T CEntityFactory<CMathCounter>::GetEntitySize()
 T CEntityFactory<CMathRemap>::Create(char const*)
 T CEntityFactory<CMathRemap>::Destroy(IServerNetworkable*)
 T CEntityFactory<CMathRemap>::GetEntitySize()
 T CEntityFactory<CMessage>::Create(char const*)
 T CEntityFactory<CMessage>::Destroy(IServerNetworkable*)
 T CEntityFactory<CMessage>::GetEntitySize()
 T CEntityFactory<CMessageEntity>::Create(char const*)
 T CEntityFactory<CMessageEntity>::Destroy(IServerNetworkable*)
 T CEntityFactory<CMessageEntity>::GetEntitySize()
 T CEntityFactory<CMolotov>::Create(char const*)
 T CEntityFactory<CMolotov>::Destroy(IServerNetworkable*)
 T CEntityFactory<CMolotov>::GetEntitySize()
 T CEntityFactory<CMolotovProjectile>::Create(char const*)
 T CEntityFactory<CMolotovProjectile>::Destroy(IServerNetworkable*)
 T CEntityFactory<CMolotovProjectile>::GetEntitySize()
 T CEntityFactory<CMomentaryRotButton>::Create(char const*)
 T CEntityFactory<CMomentaryRotButton>::Destroy(IServerNetworkable*)
 T CEntityFactory<CMomentaryRotButton>::GetEntitySize()
 T CEntityFactory<CMovementSpeedMod>::Create(char const*)
 T CEntityFactory<CMovementSpeedMod>::Destroy(IServerNetworkable*)
 T CEntityFactory<CMovementSpeedMod>::GetEntitySize()
 T CEntityFactory<CMultiSource>::Create(char const*)
 T CEntityFactory<CMultiSource>::Destroy(IServerNetworkable*)
 T CEntityFactory<CMultiSource>::GetEntitySize()
 T CEntityFactory<CNullEntity>::Create(char const*)
 T CEntityFactory<CNullEntity>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNullEntity>::GetEntitySize()
 T CEntityFactory<COrnamentProp>::Create(char const*)
 T CEntityFactory<COrnamentProp>::Destroy(IServerNetworkable*)
 T CEntityFactory<COrnamentProp>::GetEntitySize()
 T CEntityFactory<COuttroStats>::Create(char const*)
 T CEntityFactory<COuttroStats>::Destroy(IServerNetworkable*)
 T CEntityFactory<COuttroStats>::GetEntitySize()
 T CEntityFactory<COxygenTank>::Create(char const*)
 T CEntityFactory<COxygenTank>::Destroy(IServerNetworkable*)
 T CEntityFactory<COxygenTank>::GetEntitySize()
 T CEntityFactory<CPainPills>::Create(char const*)
 T CEntityFactory<CPainPills>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPainPills>::GetEntitySize()
 T CEntityFactory<CParticleFire>::Create(char const*)
 T CEntityFactory<CParticleFire>::Destroy(IServerNetworkable*)
 T CEntityFactory<CParticleFire>::GetEntitySize()
 T CEntityFactory<CParticleLight>::Create(char const*)
 T CEntityFactory<CParticleLight>::Destroy(IServerNetworkable*)
 T CEntityFactory<CParticleLight>::GetEntitySize()
 T CEntityFactory<CParticlePerformanceMonitor>::Create(char const*)
 T CEntityFactory<CParticlePerformanceMonitor>::Destroy(IServerNetworkable*)
 T CEntityFactory<CParticlePerformanceMonitor>::GetEntitySize()
 T CEntityFactory<CParticleSystem>::Create(char const*)
 T CEntityFactory<CParticleSystem>::Destroy(IServerNetworkable*)
 T CEntityFactory<CParticleSystem>::GetEntitySize()
 T CEntityFactory<CPathCorner>::Create(char const*)
 T CEntityFactory<CPathCorner>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPathCorner>::GetEntitySize()
 T CEntityFactory<CPathCornerCrash>::Create(char const*)
 T CEntityFactory<CPathCornerCrash>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPathCornerCrash>::GetEntitySize()
 T CEntityFactory<CPathKeyFrame>::Create(char const*)
 T CEntityFactory<CPathKeyFrame>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPathKeyFrame>::GetEntitySize()
 T CEntityFactory<CPathTrack>::Create(char const*)
 T CEntityFactory<CPathTrack>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPathTrack>::GetEntitySize()
 T CEntityFactory<CPhysBallSocket>::Create(char const*)
 T CEntityFactory<CPhysBallSocket>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysBallSocket>::GetEntitySize()
 T CEntityFactory<CPhysBox>::Create(char const*)
 T CEntityFactory<CPhysBox>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysBox>::GetEntitySize()
 T CEntityFactory<CPhysBoxMultiplayer>::Create(char const*)
 T CEntityFactory<CPhysBoxMultiplayer>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysBoxMultiplayer>::GetEntitySize()
 T CEntityFactory<CPhysConstraintSystem>::Create(char const*)
 T CEntityFactory<CPhysConstraintSystem>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysConstraintSystem>::GetEntitySize()
 T CEntityFactory<CPhysConvert>::Create(char const*)
 T CEntityFactory<CPhysConvert>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysConvert>::GetEntitySize()
 T CEntityFactory<CPhysExplosion>::Create(char const*)
 T CEntityFactory<CPhysExplosion>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysExplosion>::GetEntitySize()
 T CEntityFactory<CPhysFixed>::Create(char const*)
 T CEntityFactory<CPhysFixed>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysFixed>::GetEntitySize()
 T CEntityFactory<CPhysHinge>::Create(char const*)
 T CEntityFactory<CPhysHinge>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysHinge>::GetEntitySize()
 T CEntityFactory<CPhysImpact>::Create(char const*)
 T CEntityFactory<CPhysImpact>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysImpact>::GetEntitySize()
 T CEntityFactory<CPhysLength>::Create(char const*)
 T CEntityFactory<CPhysLength>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysLength>::GetEntitySize()
 T CEntityFactory<CPhysMagnet>::Create(char const*)
 T CEntityFactory<CPhysMagnet>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysMagnet>::GetEntitySize()
 T CEntityFactory<CPhysMotor>::Create(char const*)
 T CEntityFactory<CPhysMotor>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysMotor>::GetEntitySize()
 T CEntityFactory<CPhysPulley>::Create(char const*)
 T CEntityFactory<CPhysPulley>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysPulley>::GetEntitySize()
 T CEntityFactory<CPhysSlideConstraint>::Create(char const*)
 T CEntityFactory<CPhysSlideConstraint>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysSlideConstraint>::GetEntitySize()
 T CEntityFactory<CPhysSphere>::Create(char const*)
 T CEntityFactory<CPhysSphere>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysSphere>::GetEntitySize()
 T CEntityFactory<CPhysThruster>::Create(char const*)
 T CEntityFactory<CPhysThruster>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysThruster>::GetEntitySize()
 T CEntityFactory<CPhysTorque>::Create(char const*)
 T CEntityFactory<CPhysTorque>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysTorque>::GetEntitySize()
 T CEntityFactory<CPhysicsCannister>::Create(char const*)
 T CEntityFactory<CPhysicsCannister>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysicsCannister>::GetEntitySize()
 T CEntityFactory<CPhysicsEntitySolver>::Create(char const*)
 T CEntityFactory<CPhysicsEntitySolver>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysicsEntitySolver>::GetEntitySize()
 T CEntityFactory<CPhysicsNPCSolver>::Create(char const*)
 T CEntityFactory<CPhysicsNPCSolver>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysicsNPCSolver>::GetEntitySize()
 T CEntityFactory<CPhysicsProp>::Create(char const*)
 T CEntityFactory<CPhysicsProp>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysicsProp>::GetEntitySize()
 T CEntityFactory<CPhysicsPropRespawnable>::Create(char const*)
 T CEntityFactory<CPhysicsPropRespawnable>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysicsPropRespawnable>::GetEntitySize()
 T CEntityFactory<CPhysicsSpring>::Create(char const*)
 T CEntityFactory<CPhysicsSpring>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysicsSpring>::GetEntitySize()
 T CEntityFactory<CPhysicsWire>::Create(char const*)
 T CEntityFactory<CPhysicsWire>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysicsWire>::GetEntitySize()
 T CEntityFactory<CPipeBomb>::Create(char const*)
 T CEntityFactory<CPipeBomb>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPipeBomb>::GetEntitySize()
 T CEntityFactory<CPipeBombProjectile>::Create(char const*)
 T CEntityFactory<CPipeBombProjectile>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPipeBombProjectile>::GetEntitySize()
 T CEntityFactory<CPistol>::Create(char const*)
 T CEntityFactory<CPistol>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPistol>::GetEntitySize()
 T CEntityFactory<CPlasma>::Create(char const*)
 T CEntityFactory<CPlasma>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPlasma>::GetEntitySize()
 T CEntityFactory<CPlayerPickupController>::Create(char const*)
 T CEntityFactory<CPlayerPickupController>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPlayerPickupController>::GetEntitySize()
 T CEntityFactory<CPlayerResource>::Create(char const*)
 T CEntityFactory<CPlayerResource>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPlayerResource>::GetEntitySize()
 T CEntityFactory<CPointAngleSensor>::Create(char const*)
 T CEntityFactory<CPointAngleSensor>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointAngleSensor>::GetEntitySize()
 T CEntityFactory<CPointAngularVelocitySensor>::Create(char const*)
 T CEntityFactory<CPointAngularVelocitySensor>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointAngularVelocitySensor>::GetEntitySize()
 T CEntityFactory<CPointBonusMapsAccessor>::Create(char const*)
 T CEntityFactory<CPointBonusMapsAccessor>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointBonusMapsAccessor>::GetEntitySize()
 T CEntityFactory<CPointBroadcastClientCommand>::Create(char const*)
 T CEntityFactory<CPointBroadcastClientCommand>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointBroadcastClientCommand>::GetEntitySize()
 T CEntityFactory<CPointClientCommand>::Create(char const*)
 T CEntityFactory<CPointClientCommand>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointClientCommand>::GetEntitySize()
 T CEntityFactory<CPointCommentaryNode>::Create(char const*)
 T CEntityFactory<CPointCommentaryNode>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointCommentaryNode>::GetEntitySize()
 T CEntityFactory<CPointDevShotCamera>::Create(char const*)
 T CEntityFactory<CPointDevShotCamera>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointDevShotCamera>::GetEntitySize()
 T CEntityFactory<CPointEntity>::Create(char const*)
 T CEntityFactory<CPointEntity>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointEntity>::GetEntitySize()
 T CEntityFactory<CPointEntityFinder>::Create(char const*)
 T CEntityFactory<CPointEntityFinder>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointEntityFinder>::GetEntitySize()
 T CEntityFactory<CPointGamestatsCounter>::Create(char const*)
 T CEntityFactory<CPointGamestatsCounter>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointGamestatsCounter>::GetEntitySize()
 T CEntityFactory<CPointHurt>::Create(char const*)
 T CEntityFactory<CPointHurt>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointHurt>::GetEntitySize()
 T CEntityFactory<CPointPlayerMoveConstraint>::Create(char const*)
 T CEntityFactory<CPointPlayerMoveConstraint>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointPlayerMoveConstraint>::GetEntitySize()
 T CEntityFactory<CPointProximitySensor>::Create(char const*)
 T CEntityFactory<CPointProximitySensor>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointProximitySensor>::GetEntitySize()
 T CEntityFactory<CPointPush>::Create(char const*)
 T CEntityFactory<CPointPush>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointPush>::GetEntitySize()
 T CEntityFactory<CPointServerCommand>::Create(char const*)
 T CEntityFactory<CPointServerCommand>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointServerCommand>::GetEntitySize()
 T CEntityFactory<CPointSpotlight>::Create(char const*)
 T CEntityFactory<CPointSpotlight>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointSpotlight>::GetEntitySize()
 T CEntityFactory<CPointTeleport>::Create(char const*)
 T CEntityFactory<CPointTeleport>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointTeleport>::GetEntitySize()
 T CEntityFactory<CPointTemplate>::Create(char const*)
 T CEntityFactory<CPointTemplate>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointTemplate>::GetEntitySize()
 T CEntityFactory<CPointVelocitySensor>::Create(char const*)
 T CEntityFactory<CPointVelocitySensor>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointVelocitySensor>::GetEntitySize()
 T CEntityFactory<CPoseController>::Create(char const*)
 T CEntityFactory<CPoseController>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPoseController>::GetEntitySize()
 T CEntityFactory<CPostProcessController>::Create(char const*)
 T CEntityFactory<CPostProcessController>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPostProcessController>::GetEntitySize()
 T CEntityFactory<CPrecipitation>::Create(char const*)
 T CEntityFactory<CPrecipitation>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPrecipitation>::GetEntitySize()
 T CEntityFactory<CPrecipitationBlocker>::Create(char const*)
 T CEntityFactory<CPrecipitationBlocker>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPrecipitationBlocker>::GetEntitySize()
 T CEntityFactory<CProjectedDecal>::Create(char const*)
 T CEntityFactory<CProjectedDecal>::Destroy(IServerNetworkable*)
 T CEntityFactory<CProjectedDecal>::GetEntitySize()
 T CEntityFactory<CPropDoorRotatingBreakable>::Create(char const*)
 T CEntityFactory<CPropDoorRotatingBreakable>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPropDoorRotatingBreakable>::GetEntitySize()
 T CEntityFactory<CPropDoorRotatingCheckpoint>::Create(char const*)
 T CEntityFactory<CPropDoorRotatingCheckpoint>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPropDoorRotatingCheckpoint>::GetEntitySize()
 T CEntityFactory<CPropGlowingObject>::Create(char const*)
 T CEntityFactory<CPropGlowingObject>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPropGlowingObject>::GetEntitySize()
 T CEntityFactory<CPropHealthCabinet>::Create(char const*)
 T CEntityFactory<CPropHealthCabinet>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPropHealthCabinet>::GetEntitySize()
 T CEntityFactory<CPropMinigun>::Create(char const*)
 T CEntityFactory<CPropMinigun>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPropMinigun>::GetEntitySize()
 T CEntityFactory<CPropMountedGun>::Create(char const*)
 T CEntityFactory<CPropMountedGun>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPropMountedGun>::GetEntitySize()
 T CEntityFactory<CPropVehicle>::Create(char const*)
 T CEntityFactory<CPropVehicle>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPropVehicle>::GetEntitySize()
 T CEntityFactory<CPropVehicleDriveable>::Create(char const*)
 T CEntityFactory<CPropVehicleDriveable>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPropVehicleDriveable>::GetEntitySize()
 T CEntityFactory<CPropaneTank>::Create(char const*)
 T CEntityFactory<CPropaneTank>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPropaneTank>::GetEntitySize()
 T CEntityFactory<CPumpShotgun>::Create(char const*)
 T CEntityFactory<CPumpShotgun>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPumpShotgun>::GetEntitySize()
 T CEntityFactory<CPushable>::Create(char const*)
 T CEntityFactory<CPushable>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPushable>::GetEntitySize()
 T CEntityFactory<CRagGib>::Create(char const*)
 T CEntityFactory<CRagGib>::Destroy(IServerNetworkable*)
 T CEntityFactory<CRagGib>::GetEntitySize()
 T CEntityFactory<CRagdollBoogie>::Create(char const*)
 T CEntityFactory<CRagdollBoogie>::Destroy(IServerNetworkable*)
 T CEntityFactory<CRagdollBoogie>::GetEntitySize()
 T CEntityFactory<CRagdollConstraint>::Create(char const*)
 T CEntityFactory<CRagdollConstraint>::Destroy(IServerNetworkable*)
 T CEntityFactory<CRagdollConstraint>::GetEntitySize()
 T CEntityFactory<CRagdollMagnet>::Create(char const*)
 T CEntityFactory<CRagdollMagnet>::Destroy(IServerNetworkable*)
 T CEntityFactory<CRagdollMagnet>::GetEntitySize()
 T CEntityFactory<CRagdollManager>::Create(char const*)
 T CEntityFactory<CRagdollManager>::Destroy(IServerNetworkable*)
 T CEntityFactory<CRagdollManager>::GetEntitySize()
 T CEntityFactory<CRagdollProp>::Create(char const*)
 T CEntityFactory<CRagdollProp>::Destroy(IServerNetworkable*)
 T CEntityFactory<CRagdollProp>::GetEntitySize()
 T CEntityFactory<CRagdollPropAttached>::Create(char const*)
 T CEntityFactory<CRagdollPropAttached>::Destroy(IServerNetworkable*)
 T CEntityFactory<CRagdollPropAttached>::GetEntitySize()
 T CEntityFactory<CRevertSaved>::Create(char const*)
 T CEntityFactory<CRevertSaved>::Destroy(IServerNetworkable*)
 T CEntityFactory<CRevertSaved>::GetEntitySize()
 T CEntityFactory<CRopeKeyframe>::Create(char const*)
 T CEntityFactory<CRopeKeyframe>::Destroy(IServerNetworkable*)
 T CEntityFactory<CRopeKeyframe>::GetEntitySize()
 T CEntityFactory<CRotButton>::Create(char const*)
 T CEntityFactory<CRotButton>::Destroy(IServerNetworkable*)
 T CEntityFactory<CRotButton>::GetEntitySize()
 T CEntityFactory<CRotDoor>::Create(char const*)
 T CEntityFactory<CRotDoor>::Destroy(IServerNetworkable*)
 T CEntityFactory<CRotDoor>::GetEntitySize()
 T CEntityFactory<CRotorWashShooter>::Create(char const*)
 T CEntityFactory<CRotorWashShooter>::Destroy(IServerNetworkable*)
 T CEntityFactory<CRotorWashShooter>::GetEntitySize()
 T CEntityFactory<CSceneEntity>::Create(char const*)
 T CEntityFactory<CSceneEntity>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSceneEntity>::GetEntitySize()
 T CEntityFactory<CSceneListManager>::Create(char const*)
 T CEntityFactory<CSceneListManager>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSceneListManager>::GetEntitySize()
 T CEntityFactory<CSceneManager>::Create(char const*)
 T CEntityFactory<CSceneManager>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSceneManager>::GetEntitySize()
 T CEntityFactory<CServerRagdollTrigger>::Create(char const*)
 T CEntityFactory<CServerRagdollTrigger>::Destroy(IServerNetworkable*)
 T CEntityFactory<CServerRagdollTrigger>::GetEntitySize()
 T CEntityFactory<CShadowControl>::Create(char const*)
 T CEntityFactory<CShadowControl>::Destroy(IServerNetworkable*)
 T CEntityFactory<CShadowControl>::GetEntitySize()
 T CEntityFactory<CShower>::Create(char const*)
 T CEntityFactory<CShower>::Destroy(IServerNetworkable*)
 T CEntityFactory<CShower>::GetEntitySize()
 T CEntityFactory<CSimplePhysicsBrush>::Create(char const*)
 T CEntityFactory<CSimplePhysicsBrush>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSimplePhysicsBrush>::GetEntitySize()
 T CEntityFactory<CSimplePhysicsProp>::Create(char const*)
 T CEntityFactory<CSimplePhysicsProp>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSimplePhysicsProp>::GetEntitySize()
 T CEntityFactory<CSkyCamera>::Create(char const*)
 T CEntityFactory<CSkyCamera>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSkyCamera>::GetEntitySize()
 T CEntityFactory<CSlideshowDisplay>::Create(char const*)
 T CEntityFactory<CSlideshowDisplay>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSlideshowDisplay>::GetEntitySize()
 T CEntityFactory<CSmokeStack>::Create(char const*)
 T CEntityFactory<CSmokeStack>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSmokeStack>::GetEntitySize()
 T CEntityFactory<CSmokerClaw>::Create(char const*)
 T CEntityFactory<CSmokerClaw>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSmokerClaw>::GetEntitySize()
 T CEntityFactory<CSniperRifle>::Create(char const*)
 T CEntityFactory<CSniperRifle>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSniperRifle>::GetEntitySize()
 T CEntityFactory<CSoundEnt>::Create(char const*)
 T CEntityFactory<CSoundEnt>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSoundEnt>::GetEntitySize()
 T CEntityFactory<CSpotlightEnd>::Create(char const*)
 T CEntityFactory<CSpotlightEnd>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSpotlightEnd>::GetEntitySize()
 T CEntityFactory<CSprayCan>::Create(char const*)
 T CEntityFactory<CSprayCan>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSprayCan>::GetEntitySize()
 T CEntityFactory<CSprite>::Create(char const*)
 T CEntityFactory<CSprite>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSprite>::GetEntitySize()
 T CEntityFactory<CSpriteOriented>::Create(char const*)
 T CEntityFactory<CSpriteOriented>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSpriteOriented>::GetEntitySize()
 T CEntityFactory<CSpriteTrail>::Create(char const*)
 T CEntityFactory<CSpriteTrail>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSpriteTrail>::GetEntitySize()
 T CEntityFactory<CSteamJet>::Create(char const*)
 T CEntityFactory<CSteamJet>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSteamJet>::GetEntitySize()
 T CEntityFactory<CStripWeapons>::Create(char const*)
 T CEntityFactory<CStripWeapons>::Destroy(IServerNetworkable*)
 T CEntityFactory<CStripWeapons>::GetEntitySize()
 T CEntityFactory<CSubMachinegun>::Create(char const*)
 T CEntityFactory<CSubMachinegun>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSubMachinegun>::GetEntitySize()
 T CEntityFactory<CSun>::Create(char const*)
 T CEntityFactory<CSun>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSun>::GetEntitySize()
 T CEntityFactory<CSurroundTest>::Create(char const*)
 T CEntityFactory<CSurroundTest>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSurroundTest>::GetEntitySize()
 T CEntityFactory<CSurvivorCamera>::Create(char const*)
 T CEntityFactory<CSurvivorCamera>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSurvivorCamera>::GetEntitySize()
 T CEntityFactory<CSurvivorPosition>::Create(char const*)
 T CEntityFactory<CSurvivorPosition>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSurvivorPosition>::GetEntitySize()
 T CEntityFactory<CSurvivorRescue>::Create(char const*)
 T CEntityFactory<CSurvivorRescue>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSurvivorRescue>::GetEntitySize()
 T CEntityFactory<CTankClaw>::Create(char const*)
 T CEntityFactory<CTankClaw>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTankClaw>::GetEntitySize()
 T CEntityFactory<CTankRock>::Create(char const*)
 T CEntityFactory<CTankRock>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTankRock>::GetEntitySize()
 T CEntityFactory<CTankTargetChange>::Create(char const*)
 T CEntityFactory<CTankTargetChange>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTankTargetChange>::GetEntitySize()
 T CEntityFactory<CTankTrainAI>::Create(char const*)
 T CEntityFactory<CTankTrainAI>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTankTrainAI>::GetEntitySize()
 T CEntityFactory<CTargetCDAudioRep>::Create(char const*)
 T CEntityFactory<CTargetCDAudioRep>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTargetCDAudioRep>::GetEntitySize()
 T CEntityFactory<CTargetChangeGravity>::Create(char const*)
 T CEntityFactory<CTargetChangeGravity>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTargetChangeGravity>::GetEntitySize()
 T CEntityFactory<CTeam>::Create(char const*)
 T CEntityFactory<CTeam>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTeam>::GetEntitySize()
 T CEntityFactory<CTeamSpawnPoint>::Create(char const*)
 T CEntityFactory<CTeamSpawnPoint>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTeamSpawnPoint>::GetEntitySize()
 T CEntityFactory<CTeamVehicleSpawnPoint>::Create(char const*)
 T CEntityFactory<CTeamVehicleSpawnPoint>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTeamVehicleSpawnPoint>::GetEntitySize()
 T CEntityFactory<CTempEntTester>::Create(char const*)
 T CEntityFactory<CTempEntTester>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTempEntTester>::GetEntitySize()
 T CEntityFactory<CTerrorGameRulesProxy>::Create(char const*)
 T CEntityFactory<CTerrorGameRulesProxy>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTerrorGameRulesProxy>::GetEntitySize()
 T CEntityFactory<CTerrorPlayer>::Create(char const*)
 T CEntityFactory<CTerrorPlayer>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTerrorPlayer>::GetEntitySize()
 T CEntityFactory<CTerrorPlayerResource>::Create(char const*)
 T CEntityFactory<CTerrorPlayerResource>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTerrorPlayerResource>::GetEntitySize()
 T CEntityFactory<CTerrorViewModel>::Create(char const*)
 T CEntityFactory<CTerrorViewModel>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTerrorViewModel>::GetEntitySize()
 T CEntityFactory<CTestEffect>::Create(char const*)
 T CEntityFactory<CTestEffect>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTestEffect>::GetEntitySize()
 T CEntityFactory<CTestTraceline>::Create(char const*)
 T CEntityFactory<CTestTraceline>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTestTraceline>::GetEntitySize()
 T CEntityFactory<CTest_ProxyToggle_Networkable>::Create(char const*)
 T CEntityFactory<CTest_ProxyToggle_Networkable>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTest_ProxyToggle_Networkable>::GetEntitySize()
 T CEntityFactory<CTextureToggle>::Create(char const*)
 T CEntityFactory<CTextureToggle>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTextureToggle>::GetEntitySize()
 T CEntityFactory<CThrow>::Create(char const*)
 T CEntityFactory<CThrow>::Destroy(IServerNetworkable*)
 T CEntityFactory<CThrow>::GetEntitySize()
 T CEntityFactory<CTimerEntity>::Create(char const*)
 T CEntityFactory<CTimerEntity>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTimerEntity>::GetEntitySize()
 T CEntityFactory<CTonemapTrigger>::Create(char const*)
 T CEntityFactory<CTonemapTrigger>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTonemapTrigger>::GetEntitySize()
 T CEntityFactory<CTongue>::Create(char const*)
 T CEntityFactory<CTongue>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTongue>::GetEntitySize()
 T CEntityFactory<CTransitioningPlayer>::Create(char const*)
 T CEntityFactory<CTransitioningPlayer>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTransitioningPlayer>::GetEntitySize()
 T CEntityFactory<CTriggerAutoCrouch>::Create(char const*)
 T CEntityFactory<CTriggerAutoCrouch>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerAutoCrouch>::GetEntitySize()
 T CEntityFactory<CTriggerBrush>::Create(char const*)
 T CEntityFactory<CTriggerBrush>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerBrush>::GetEntitySize()
 T CEntityFactory<CTriggerCDAudio>::Create(char const*)
 T CEntityFactory<CTriggerCDAudio>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerCDAudio>::GetEntitySize()
 T CEntityFactory<CTriggerCamera>::Create(char const*)
 T CEntityFactory<CTriggerCamera>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerCamera>::GetEntitySize()
 T CEntityFactory<CTriggerCameraMultiplayer>::Create(char const*)
 T CEntityFactory<CTriggerCameraMultiplayer>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerCameraMultiplayer>::GetEntitySize()
 T CEntityFactory<CTriggerEscape>::Create(char const*)
 T CEntityFactory<CTriggerEscape>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerEscape>::GetEntitySize()
 T CEntityFactory<CTriggerGravity>::Create(char const*)
 T CEntityFactory<CTriggerGravity>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerGravity>::GetEntitySize()
 T CEntityFactory<CTriggerHurt>::Create(char const*)
 T CEntityFactory<CTriggerHurt>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerHurt>::GetEntitySize()
 T CEntityFactory<CTriggerHurtGhost>::Create(char const*)
 T CEntityFactory<CTriggerHurtGhost>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerHurtGhost>::GetEntitySize()
 T CEntityFactory<CTriggerImpact>::Create(char const*)
 T CEntityFactory<CTriggerImpact>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerImpact>::GetEntitySize()
 T CEntityFactory<CTriggerLook>::Create(char const*)
 T CEntityFactory<CTriggerLook>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerLook>::GetEntitySize()
 T CEntityFactory<CTriggerMultiple>::Create(char const*)
 T CEntityFactory<CTriggerMultiple>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerMultiple>::GetEntitySize()
 T CEntityFactory<CTriggerOnce>::Create(char const*)
 T CEntityFactory<CTriggerOnce>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerOnce>::GetEntitySize()
 T CEntityFactory<CTriggerPlayerMovement>::Create(char const*)
 T CEntityFactory<CTriggerPlayerMovement>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerPlayerMovement>::GetEntitySize()
 T CEntityFactory<CTriggerProximity>::Create(char const*)
 T CEntityFactory<CTriggerProximity>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerProximity>::GetEntitySize()
 T CEntityFactory<CTriggerPush>::Create(char const*)
 T CEntityFactory<CTriggerPush>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerPush>::GetEntitySize()
 T CEntityFactory<CTriggerRemove>::Create(char const*)
 T CEntityFactory<CTriggerRemove>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerRemove>::GetEntitySize()
 T CEntityFactory<CTriggerSave>::Create(char const*)
 T CEntityFactory<CTriggerSave>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerSave>::GetEntitySize()
 T CEntityFactory<CTriggerSoundscape>::Create(char const*)
 T CEntityFactory<CTriggerSoundscape>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerSoundscape>::GetEntitySize()
 T CEntityFactory<CTriggerTeleport>::Create(char const*)
 T CEntityFactory<CTriggerTeleport>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerTeleport>::GetEntitySize()
 T CEntityFactory<CTriggerToggleSave>::Create(char const*)
 T CEntityFactory<CTriggerToggleSave>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerToggleSave>::GetEntitySize()
 T CEntityFactory<CTriggerVPhysicsMotion>::Create(char const*)
 T CEntityFactory<CTriggerVPhysicsMotion>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerVPhysicsMotion>::GetEntitySize()
 T CEntityFactory<CTriggerVolume>::Create(char const*)
 T CEntityFactory<CTriggerVolume>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerVolume>::GetEntitySize()
 T CEntityFactory<CTriggerWind>::Create(char const*)
 T CEntityFactory<CTriggerWind>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerWind>::GetEntitySize()
 T CEntityFactory<CVGuiScreen>::Create(char const*)
 T CEntityFactory<CVGuiScreen>::Destroy(IServerNetworkable*)
 T CEntityFactory<CVGuiScreen>::GetEntitySize()
 T CEntityFactory<CVersusRandom>::Create(char const*)
 T CEntityFactory<CVersusRandom>::Destroy(IServerNetworkable*)
 T CEntityFactory<CVersusRandom>::GetEntitySize()
 T CEntityFactory<CVomit>::Create(char const*)
 T CEntityFactory<CVomit>::Destroy(IServerNetworkable*)
 T CEntityFactory<CVomit>::GetEntitySize()
 T CEntityFactory<CVomitParticle>::Create(char const*)
 T CEntityFactory<CVomitParticle>::Destroy(IServerNetworkable*)
 T CEntityFactory<CVomitParticle>::GetEntitySize()
 T CEntityFactory<CVoteController>::Create(char const*)
 T CEntityFactory<CVoteController>::Destroy(IServerNetworkable*)
 T CEntityFactory<CVoteController>::GetEntitySize()
 T CEntityFactory<CWC_UpdateIgnoreList>::Create(char const*)
 T CEntityFactory<CWC_UpdateIgnoreList>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWC_UpdateIgnoreList>::GetEntitySize()
 T CEntityFactory<CWaterBullet>::Create(char const*)
 T CEntityFactory<CWaterBullet>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWaterBullet>::GetEntitySize()
 T CEntityFactory<CWaterLODControl>::Create(char const*)
 T CEntityFactory<CWaterLODControl>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWaterLODControl>::GetEntitySize()
 T CEntityFactory<CWeaponAmmoSpawn>::Create(char const*)
 T CEntityFactory<CWeaponAmmoSpawn>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWeaponAmmoSpawn>::GetEntitySize()
 T CEntityFactory<CWeaponCSBase>::Create(char const*)
 T CEntityFactory<CWeaponCSBase>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWeaponCSBase>::GetEntitySize()
 T CEntityFactory<CWeaponCSBaseGun>::Create(char const*)
 T CEntityFactory<CWeaponCSBaseGun>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWeaponCSBaseGun>::GetEntitySize()
 T CEntityFactory<CWeaponHEGrenadeSpawn>::Create(char const*)
 T CEntityFactory<CWeaponHEGrenadeSpawn>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWeaponHEGrenadeSpawn>::GetEntitySize()
 T CEntityFactory<CWeaponautoshotgunSpawn>::Create(char const*)
 T CEntityFactory<CWeaponautoshotgunSpawn>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWeaponautoshotgunSpawn>::GetEntitySize()
 T CEntityFactory<CWeaponfirst_aid_kitSpawn>::Create(char const*)
 T CEntityFactory<CWeaponfirst_aid_kitSpawn>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWeaponfirst_aid_kitSpawn>::GetEntitySize()
 T CEntityFactory<CWeaponhunting_rifleSpawn>::Create(char const*)
 T CEntityFactory<CWeaponhunting_rifleSpawn>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWeaponhunting_rifleSpawn>::GetEntitySize()
 T CEntityFactory<CWeaponmolotovSpawn>::Create(char const*)
 T CEntityFactory<CWeaponmolotovSpawn>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWeaponmolotovSpawn>::GetEntitySize()
 T CEntityFactory<CWeaponpain_pillsSpawn>::Create(char const*)
 T CEntityFactory<CWeaponpain_pillsSpawn>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWeaponpain_pillsSpawn>::GetEntitySize()
 T CEntityFactory<CWeaponpipe_bombSpawn>::Create(char const*)
 T CEntityFactory<CWeaponpipe_bombSpawn>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWeaponpipe_bombSpawn>::GetEntitySize()
 T CEntityFactory<CWeaponpistolSpawn>::Create(char const*)
 T CEntityFactory<CWeaponpistolSpawn>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWeaponpistolSpawn>::GetEntitySize()
 T CEntityFactory<CWeaponpumpshotgunSpawn>::Create(char const*)
 T CEntityFactory<CWeaponpumpshotgunSpawn>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWeaponpumpshotgunSpawn>::GetEntitySize()
 T CEntityFactory<CWeaponrifleSpawn>::Create(char const*)
 T CEntityFactory<CWeaponrifleSpawn>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWeaponrifleSpawn>::GetEntitySize()
 T CEntityFactory<CWeaponsmgSpawn>::Create(char const*)
 T CEntityFactory<CWeaponsmgSpawn>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWeaponsmgSpawn>::GetEntitySize()
 T CEntityFactory<CWeightButton>::Create(char const*)
 T CEntityFactory<CWeightButton>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWeightButton>::GetEntitySize()
 T CEntityFactory<CWindowPane>::Create(char const*)
 T CEntityFactory<CWindowPane>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWindowPane>::GetEntitySize()
 T CEntityFactory<CWorld>::Create(char const*)
 T CEntityFactory<CWorld>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWorld>::GetEntitySize()
 T CEntityFactory<CWorldItem>::Create(char const*)
 T CEntityFactory<CWorldItem>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWorldItem>::GetEntitySize()
 T CEntityFactory<DustTrail>::Create(char const*)
 T CEntityFactory<DustTrail>::Destroy(IServerNetworkable*)
 T CEntityFactory<DustTrail>::GetEntitySize()
 T CEntityFactory<FilterDamageType>::Create(char const*)
 T CEntityFactory<FilterDamageType>::Destroy(IServerNetworkable*)
 T CEntityFactory<FilterDamageType>::GetEntitySize()
 T CEntityFactory<FilterInfectedClass>::Create(char const*)
 T CEntityFactory<FilterInfectedClass>::Destroy(IServerNetworkable*)
 T CEntityFactory<FilterInfectedClass>::GetEntitySize()
 T CEntityFactory<FilterTeam>::Create(char const*)
 T CEntityFactory<FilterTeam>::Destroy(IServerNetworkable*)
 T CEntityFactory<FilterTeam>::GetEntitySize()
 T CEntityFactory<Hunter>::Create(char const*)
 T CEntityFactory<Hunter>::Destroy(IServerNetworkable*)
 T CEntityFactory<Hunter>::GetEntitySize()
 T CEntityFactory<Infected>::Create(char const*)
 T CEntityFactory<Infected>::Destroy(IServerNetworkable*)
 T CEntityFactory<Infected>::GetEntitySize()
 T CEntityFactory<InfoChangelevel>::Create(char const*)
 T CEntityFactory<InfoChangelevel>::Destroy(IServerNetworkable*)
 T CEntityFactory<InfoChangelevel>::GetEntitySize()
 T CEntityFactory<MovieExplosion>::Create(char const*)
 T CEntityFactory<MovieExplosion>::Destroy(IServerNetworkable*)
 T CEntityFactory<MovieExplosion>::GetEntitySize()
 T CEntityFactory<ParticleSmokeGrenade>::Create(char const*)
 T CEntityFactory<ParticleSmokeGrenade>::Destroy(IServerNetworkable*)
 T CEntityFactory<ParticleSmokeGrenade>::GetEntitySize()
 T CEntityFactory<RocketTrail>::Create(char const*)
 T CEntityFactory<RocketTrail>::Destroy(IServerNetworkable*)
 T CEntityFactory<RocketTrail>::GetEntitySize()
 T CEntityFactory<SmokeTrail>::Create(char const*)
 T CEntityFactory<SmokeTrail>::Destroy(IServerNetworkable*)
 T CEntityFactory<SmokeTrail>::GetEntitySize()
 T CEntityFactory<Smoker>::Create(char const*)
 T CEntityFactory<Smoker>::Destroy(IServerNetworkable*)
 T CEntityFactory<Smoker>::GetEntitySize()
 T CEntityFactory<SporeExplosion>::Create(char const*)
 T CEntityFactory<SporeExplosion>::Destroy(IServerNetworkable*)
 T CEntityFactory<SporeExplosion>::GetEntitySize()
 T CEntityFactory<SporeTrail>::Create(char const*)
 T CEntityFactory<SporeTrail>::Destroy(IServerNetworkable*)
 T CEntityFactory<SporeTrail>::GetEntitySize()
 T CEntityFactory<SurvivorBot>::Create(char const*)
 T CEntityFactory<SurvivorBot>::Destroy(IServerNetworkable*)
 T CEntityFactory<SurvivorBot>::GetEntitySize()
 T CEntityFactory<Tank>::Create(char const*)
 T CEntityFactory<Tank>::Destroy(IServerNetworkable*)
 T CEntityFactory<Tank>::GetEntitySize()
 T CEntityFactory<Witch>::Create(char const*)
 T CEntityFactory<Witch>::Destroy(IServerNetworkable*)
 T CEntityFactory<Witch>::GetEntitySize()
 T CEntityFactoryDictionary::Create(char const*)
 T CEntityFactoryDictionary::Destroy(char const*, IServerNetworkable*)
 T CEntityFactoryDictionary::FindFactory(char const*)
 T CEntityFactoryDictionary::GetCannonicalName(char const*)
 T CEntityFactoryDictionary::InstallFactory(IEntityFactory*, char const*)
 T CEntityFactoryDictionary::~CEntityFactoryDictionary()
 T CEntityFlame::AttachToEntity(CBaseEntity*)
 T CEntityFlame::CEntityFlame()
 T CEntityFlame::Create(CBaseEntity*, bool)
 T CEntityFlame::FlameThink()
 T CEntityFlame::GetDataDescMap()
 T CEntityFlame::GetHitboxFireScale()
 T CEntityFlame::GetNumHitboxFires()
 T CEntityFlame::GetRemainingLife()
 T CEntityFlame::GetServerClass()
 T CEntityFlame::InputIgnite(inputdata_t&)
 T CEntityFlame::Precache()
 T CEntityFlame::SetHitboxFireScale(float)
 T CEntityFlame::SetLifetime(float)
 T CEntityFlame::SetNumHitboxFires(int)
 T CEntityFlame::UpdateOnRemove()
 T CEntityFlame::YouForgotToImplementOrDeclareServerClass()
 T CEntityFlame::~CEntityFlame()
 T CEntityList::AddEntity(CBaseEntity*)
 T CEntityList::CEntityList()
 T CEntityList::DeleteEntity(CBaseEntity*)
 T CEntityList::~CEntityList()
 T CEntityListSystem::FrameUpdatePostEntityThink()
 T CEntityListSystem::LevelInitPreEntity()
 T CEntityListSystem::LevelShutdownPostEntity()
 T CEntityListSystem::LevelShutdownPreEntity()
 T CEntityListSystem::~CEntityListSystem()
 T CEntityMapData::CurrentBufferPosition()
 T CEntityMapData::ExtractValue(char const*, char*)
 T CEntityMapData::GetFirstKey(char*, char*)
 T CEntityMapData::GetNextKey(char*, char*)
 T CEntityMapData::SetValue(char const*, char*, int)
 T CEntityParticleTrail::Create(CBaseEntity*, EntityParticleTrailInfo_t const&, CBaseEntity*)
 T CEntityParticleTrail::Destroy(CBaseEntity*, EntityParticleTrailInfo_t const&)
 T CEntityParticleTrail::GetDataDescMap()
 T CEntityParticleTrail::GetServerClass()
 T CEntityParticleTrail::NetworkVar_m_Info::NetworkStateChanged()
 T CEntityParticleTrail::NetworkVar_m_Info::NetworkStateChanged(void*)
 T CEntityParticleTrail::NotifySystemEvent(CBaseEntity*, notify_system_event_t, notify_system_event_params_t const&)
 T CEntityParticleTrail::SetTransmit(CCheckTransmitInfo*, bool)
 T CEntityParticleTrail::Spawn()
 T CEntityParticleTrail::UpdateOnRemove()
 T CEntityParticleTrail::YouForgotToImplementOrDeclareServerClass()
 T CEntityParticleTrail::~CEntityParticleTrail()
 T CEntitySaveRestoreBlockHandler::DoRestoreEntity(CBaseEntity*, IRestore*)
 T CEntitySaveRestoreBlockHandler::FindGlobalEntity(string_t, string_t)
 T CEntitySaveRestoreBlockHandler::GetBlockName()
 T CEntitySaveRestoreBlockHandler::PostRestore()
 T CEntitySaveRestoreBlockHandler::PostSave()
 T CEntitySaveRestoreBlockHandler::PreRestore()
 T CEntitySaveRestoreBlockHandler::PreSave(CSaveRestoreData*)
 T CEntitySaveRestoreBlockHandler::ReadRestoreHeaders(IRestore*)
 T CEntitySaveRestoreBlockHandler::Restore(IRestore*, bool)
 T CEntitySaveRestoreBlockHandler::RestoreEntity(CBaseEntity*, IRestore*, entitytable_t*)
 T CEntitySaveRestoreBlockHandler::RestoreGlobalEntity(CBaseEntity*, CSaveRestoreData*, entitytable_t*)
 T CEntitySaveRestoreBlockHandler::Save(ISave*)
 T CEntitySaveRestoreBlockHandler::SaveInitEntities(CSaveRestoreData*)
 T CEntitySaveRestoreBlockHandler::WriteSaveHeaders(ISave*)
 T CEntitySaveUtils::AddLevelTransitionSaveDependency(CBaseEntity*, CBaseEntity*)
 T CEntitySaveUtils::GetEntityDependencies(CBaseEntity*, int, CBaseEntity**)
 T CEntitySaveUtils::GetEntityDependencyCount(CBaseEntity*)
 T CEntitySphereQuery::CEntitySphereQuery(Vector const&, float, int)
 T CEntitySphereQuery::GetCurrentEntity()
 T CEntityTouchManager::FrameUpdatePostEntityThink()
 T CEntityTouchManager::LevelShutdownPostEntity()
 T CEntityTouchManager::OnEntityCreated(CBaseEntity*)
 T CEntityTouchManager::OnEntityDeleted(CBaseEntity*)
 T CEntityTouchManager::~CEntityTouchManager()
 T CEnvBeam::Activate()
 T CEnvBeam::BeamUpdateVars()
 T CEnvBeam::GetDataDescMap()
 T CEnvBeam::GetDecalName()
 T CEnvBeam::InputStrikeOnce(inputdata_t&)
 T CEnvBeam::InputToggle(inputdata_t&)
 T CEnvBeam::InputTurnOff(inputdata_t&)
 T CEnvBeam::InputTurnOn(inputdata_t&)
 T CEnvBeam::PassesTouchFilters(CBaseEntity*)
 T CEnvBeam::Precache()
 T CEnvBeam::RandomArea()
 T CEnvBeam::RandomPoint(Vector const&)
 T CEnvBeam::Spawn()
 T CEnvBeam::Strike()
 T CEnvBeam::StrikeThink()
 T CEnvBeam::TurnOn()
 T CEnvBeam::UpdateThink()
 T CEnvBeam::Zap(Vector const&, Vector const&)
 T CEnvBeam::~CEnvBeam()
 T CEnvBeverage::GetDataDescMap()
 T CEnvBeverage::InputActivate(inputdata_t&)
 T CEnvBeverage::KeyValue(char const*, char const*)
 T CEnvBeverage::Precache()
 T CEnvBeverage::Spawn()
 T CEnvBeverage::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CEnvBeverage::~CEnvBeverage()
 T CEnvCredits::CreditsThink()
 T CEnvCredits::GetDataDescMap()
 T CEnvCredits::InputStart(inputdata_t&)
 T CEnvCredits::ShowCreditLine(CTerrorPlayer*)
 T CEnvCredits::Spawn()
 T CEnvCredits::~CEnvCredits()
 T CEnvDOFController::GetDataDescMap()
 T CEnvDOFController::GetServerClass()
 T CEnvDOFController::InputSetFarBlurDepth(inputdata_t&)
 T CEnvDOFController::InputSetFarBlurRadius(inputdata_t&)
 T CEnvDOFController::InputSetFarFocusDepth(inputdata_t&)
 T CEnvDOFController::InputSetNearBlurDepth(inputdata_t&)
 T CEnvDOFController::InputSetNearBlurRadius(inputdata_t&)
 T CEnvDOFController::InputSetNearFocusDepth(inputdata_t&)
 T CEnvDOFController::Spawn()
 T CEnvDOFController::UpdateParamBlend()
 T CEnvDOFController::UpdateTransmitState()
 T CEnvDOFController::YouForgotToImplementOrDeclareServerClass()
 T CEnvDOFController::~CEnvDOFController()
 T CEnvDetailController::GetServerClass()
 T CEnvDetailController::KeyValue(char const*, char const*)
 T CEnvDetailController::UpdateTransmitState()
 T CEnvDetailController::YouForgotToImplementOrDeclareServerClass()
 T CEnvDetailController::~CEnvDetailController()
 T CEnvDustPuff::GetDataDescMap()
 T CEnvDustPuff::InputSpawnDust(inputdata_t&)
 T CEnvDustPuff::~CEnvDustPuff()
 T CEnvEffectsScript::GetDataDescMap()
 T CEnvEffectsScript::HandleAnimEvent(animevent_t*)
 T CEnvEffectsScript::InputSetSequence(inputdata_t&)
 T CEnvEffectsScript::ParseNewEffect()
 T CEnvEffectsScript::ParseScriptFile()
 T CEnvEffectsScript::Precache()
 T CEnvEffectsScript::Spawn()
 T CEnvEffectsScript::SpriteEffectEvent(CEffectScriptElement*)
 T CEnvEffectsScript::Think()
 T CEnvEffectsScript::TrailEffectEvent(CEffectScriptElement*)
 T CEnvEffectsScript::UpdateTransmitState()
 T CEnvEffectsScript::~CEnvEffectsScript()
 T CEnvEntityMaker::Activate()
 T CEnvEntityMaker::CheckSpawnThink()
 T CEnvEntityMaker::GetDataDescMap()
 T CEnvEntityMaker::HasRoomToSpawn()
 T CEnvEntityMaker::InputForceSpawn(inputdata_t&)
 T CEnvEntityMaker::InputForceSpawnAtEntityOrigin(inputdata_t&)
 T CEnvEntityMaker::IsPlayerLooking()
 T CEnvEntityMaker::Spawn()
 T CEnvEntityMaker::SpawnEntity(Vector, QAngle)
 T CEnvEntityMaker::~CEnvEntityMaker()
 T CEnvExplosion::DrawDebugTextOverlays()
 T CEnvExplosion::GetDataDescMap()
 T CEnvExplosion::InputExplode(inputdata_t&)
 T CEnvExplosion::KeyValue(char const*, char const*)
 T CEnvExplosion::Precache()
 T CEnvExplosion::Smoke()
 T CEnvExplosion::Spawn()
 T CEnvExplosion::~CEnvExplosion()
 T CEnvFade::DrawDebugTextOverlays()
 T CEnvFade::GetDataDescMap()
 T CEnvFade::InputFade(inputdata_t&)
 T CEnvFade::Spawn()
 T CEnvFade::~CEnvFade()
 T CEnvFireSensor::GetDataDescMap()
 T CEnvFireSensor::InputDisable(inputdata_t&)
 T CEnvFireSensor::InputEnable(inputdata_t&)
 T CEnvFireSensor::Spawn()
 T CEnvFireSensor::Think()
 T CEnvFireSensor::~CEnvFireSensor()
 T CEnvFireSource::GetDataDescMap()
 T CEnvFireSource::InputDisable(inputdata_t&)
 T CEnvFireSource::InputEnable(inputdata_t&)
 T CEnvFireSource::Spawn()
 T CEnvFireSource::Think()
 T CEnvFireSource::~CEnvFireSource()
 T CEnvFunnel::GetDataDescMap()
 T CEnvFunnel::Precache()
 T CEnvFunnel::Spawn()
 T CEnvFunnel::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CEnvFunnel::~CEnvFunnel()
 T CEnvGlobal::DrawDebugTextOverlays()
 T CEnvGlobal::GetDataDescMap()
 T CEnvGlobal::InputAddToCounter(inputdata_t&)
 T CEnvGlobal::InputGetCounter(inputdata_t&)
 T CEnvGlobal::InputRemove(inputdata_t&)
 T CEnvGlobal::InputSetCounter(inputdata_t&)
 T CEnvGlobal::InputToggle(inputdata_t&)
 T CEnvGlobal::InputTurnOff(inputdata_t&)
 T CEnvGlobal::InputTurnOn(inputdata_t&)
 T CEnvGlobal::Spawn()
 T CEnvGlobal::~CEnvGlobal()
 T CEnvGunfire::Activate()
 T CEnvGunfire::GetDataDescMap()
 T CEnvGunfire::InputDisable(inputdata_t&)
 T CEnvGunfire::InputEnable(inputdata_t&)
 T CEnvGunfire::Precache()
 T CEnvGunfire::ShootThink()
 T CEnvGunfire::Spawn()
 T CEnvGunfire::UpdateTarget()
 T CEnvGunfire::~CEnvGunfire()
 T CEnvHudHint::GetDataDescMap()
 T CEnvHudHint::InputHideHudHint(inputdata_t&)
 T CEnvHudHint::InputShowHudHint(inputdata_t&)
 T CEnvHudHint::Precache()
 T CEnvHudHint::Spawn()
 T CEnvHudHint::~CEnvHudHint()
 T CEnvLaser::FireAtPoint(CGameTrace&)
 T CEnvLaser::GetDataDescMap()
 T CEnvLaser::InputToggle(inputdata_t&)
 T CEnvLaser::InputTurnOff(inputdata_t&)
 T CEnvLaser::InputTurnOn(inputdata_t&)
 T CEnvLaser::KeyValue(char const*, char const*)
 T CEnvLaser::Precache()
 T CEnvLaser::Spawn()
 T CEnvLaser::StrikeThink()
 T CEnvLaser::TurnOn()
 T CEnvLaser::~CEnvLaser()
 T CEnvLight::KeyValue(char const*, char const*)
 T CEnvLight::Spawn()
 T CEnvLight::~CEnvLight()
 T CEnvMicrophone::Activate()
 T CEnvMicrophone::ActivateSpeaker()
 T CEnvMicrophone::CanHearSound(CSound*, float&)
 T CEnvMicrophone::CanHearSound(int, soundlevel_t, float&, Vector const*)
 T CEnvMicrophone::GetDataDescMap()
 T CEnvMicrophone::InputDisable(inputdata_t&)
 T CEnvMicrophone::InputEnable(inputdata_t&)
 T CEnvMicrophone::InputSetSpeakerName(inputdata_t&)
 T CEnvMicrophone::OnRestore()
 T CEnvMicrophone::OnSoundPlayed(int, char const*, soundlevel_t, float, int, int, Vector const*, float, CUtlVector<Vector, CUtlMemory<Vector, int> >&)
 T CEnvMicrophone::SoundPlayed(int, char const*, soundlevel_t, float, int, int, Vector const*, float, CUtlVector<Vector, CUtlMemory<Vector, int> >&)
 T CEnvMicrophone::Spawn()
 T CEnvMicrophone::Think()
 T CEnvMicrophone::~CEnvMicrophone()
 T CEnvMuzzleFlash::GetDataDescMap()
 T CEnvMuzzleFlash::InputFire(inputdata_t&)
 T CEnvMuzzleFlash::Spawn()
 T CEnvMuzzleFlash::~CEnvMuzzleFlash()
 T CEnvParticleScript::Activate()
 T CEnvParticleScript::GetDataDescMap()
 T CEnvParticleScript::GetServerClass()
 T CEnvParticleScript::InputSetSequence(inputdata_t&)
 T CEnvParticleScript::Precache()
 T CEnvParticleScript::PrecacheAnimationEventMaterials()
 T CEnvParticleScript::Spawn()
 T CEnvParticleScript::UpdateTransmitState()
 T CEnvParticleScript::YouForgotToImplementOrDeclareServerClass()
 T CEnvParticleScript::~CEnvParticleScript()
 T CEnvPlayerSurfaceTrigger::GetDataDescMap()
 T CEnvPlayerSurfaceTrigger::InputDisable(inputdata_t&)
 T CEnvPlayerSurfaceTrigger::InputEnable(inputdata_t&)
 T CEnvPlayerSurfaceTrigger::OnRestore()
 T CEnvPlayerSurfaceTrigger::PlayerSurfaceChanged(CBasePlayer*, char)
 T CEnvPlayerSurfaceTrigger::SetPlayerSurface(CBasePlayer*, char)
 T CEnvPlayerSurfaceTrigger::Spawn()
 T CEnvPlayerSurfaceTrigger::UpdateMaterialThink()
 T CEnvPlayerSurfaceTrigger::~CEnvPlayerSurfaceTrigger()
 T CEnvProjectedTexture::Activate()
 T CEnvProjectedTexture::CEnvProjectedTexture()
 T CEnvProjectedTexture::GetDataDescMap()
 T CEnvProjectedTexture::GetServerClass()
 T CEnvProjectedTexture::InitialThink()
 T CEnvProjectedTexture::InputSetAmbient(inputdata_t&)
 T CEnvProjectedTexture::InputSetCameraSpace(inputdata_t&)
 T CEnvProjectedTexture::InputSetEnableShadows(inputdata_t&)
 T CEnvProjectedTexture::InputSetFOV(inputdata_t&)
 T CEnvProjectedTexture::InputSetLightOnlyTarget(inputdata_t&)
 T CEnvProjectedTexture::InputSetLightWorld(inputdata_t&)
 T CEnvProjectedTexture::InputSetSpotlightTexture(inputdata_t&)
 T CEnvProjectedTexture::InputSetTarget(inputdata_t&)
 T CEnvProjectedTexture::InputTurnOff(inputdata_t&)
 T CEnvProjectedTexture::InputTurnOn(inputdata_t&)
 T CEnvProjectedTexture::KeyValue(char const*, char const*)
 T CEnvProjectedTexture::UpdateTransmitState()
 T CEnvProjectedTexture::YouForgotToImplementOrDeclareServerClass()
 T CEnvProjectedTexture::~CEnvProjectedTexture()
 T CEnvQuadraticBeam::GetDataDescMap()
 T CEnvQuadraticBeam::GetServerClass()
 T CEnvQuadraticBeam::Spawn()
 T CEnvQuadraticBeam::YouForgotToImplementOrDeclareServerClass()
 T CEnvQuadraticBeam::~CEnvQuadraticBeam()
 T CEnvRockLauncher::GetDataDescMap()
 T CEnvRockLauncher::InputLaunchRock(inputdata_t&)
 T CEnvRockLauncher::InputSetTarget(inputdata_t&)
 T CEnvRockLauncher::LaunchAtTarget(CBaseEntity*)
 T CEnvRockLauncher::LaunchCurrentDir()
 T CEnvRockLauncher::Spawn()
 T CEnvRockLauncher::~CEnvRockLauncher()
 T CEnvScreenEffect::GetDataDescMap()
 T CEnvScreenEffect::GetServerClass()
 T CEnvScreenEffect::InputStartEffect(inputdata_t&)
 T CEnvScreenEffect::InputStopEffect(inputdata_t&)
 T CEnvScreenEffect::Precache()
 T CEnvScreenEffect::Spawn()
 T CEnvScreenEffect::UpdateTransmitState()
 T CEnvScreenEffect::YouForgotToImplementOrDeclareServerClass()
 T CEnvScreenEffect::~CEnvScreenEffect()
 T CEnvScreenOverlay::CEnvScreenOverlay()
 T CEnvScreenOverlay::GetDataDescMap()
 T CEnvScreenOverlay::GetServerClass()
 T CEnvScreenOverlay::InputStartOverlay(inputdata_t&)
 T CEnvScreenOverlay::InputStopOverlay(inputdata_t&)
 T CEnvScreenOverlay::InputSwitchOverlay(inputdata_t&)
 T CEnvScreenOverlay::Precache()
 T CEnvScreenOverlay::Spawn()
 T CEnvScreenOverlay::UpdateTransmitState()
 T CEnvScreenOverlay::YouForgotToImplementOrDeclareServerClass()
 T CEnvScreenOverlay::~CEnvScreenOverlay()
 T CEnvShake::ApplyShake(ShakeCommand_t)
 T CEnvShake::DrawDebugTextOverlays()
 T CEnvShake::GetDataDescMap()
 T CEnvShake::InputAmplitude(inputdata_t&)
 T CEnvShake::InputFrequency(inputdata_t&)
 T CEnvShake::InputStartShake(inputdata_t&)
 T CEnvShake::InputStopShake(inputdata_t&)
 T CEnvShake::OnRestore()
 T CEnvShake::Precache()
 T CEnvShake::Spawn()
 T CEnvShake::Think()
 T CEnvShake::~CEnvShake()
 T CEnvShooter::CreateGib()
 T CEnvShooter::GetDataDescMap()
 T CEnvShooter::KeyValue(char const*, char const*)
 T CEnvShooter::Precache()
 T CEnvShooter::~CEnvShooter()
 T CEnvSoundscape::DrawDebugGeometryOverlays()
 T CEnvSoundscape::GetDataDescMap()
 T CEnvSoundscape::InRangeOfPlayer(CBasePlayer*)
 T CEnvSoundscape::InputDisable(inputdata_t&)
 T CEnvSoundscape::InputEnable(inputdata_t&)
 T CEnvSoundscape::InputToggleEnabled(inputdata_t&)
 T CEnvSoundscape::KeyValue(char const*, char const*)
 T CEnvSoundscape::Precache()
 T CEnvSoundscape::Spawn()
 T CEnvSoundscape::UpdateForPlayer(ss_update_t&)
 T CEnvSoundscape::WriteAudioParamsTo(audioparams_t&)
 T CEnvSoundscape::~CEnvSoundscape()
 T CEnvSoundscapeProxy::Activate()
 T CEnvSoundscapeProxy::GetDataDescMap()
 T CEnvSoundscapeProxy::Precache()
 T CEnvSoundscapeProxy::~CEnvSoundscapeProxy()
 T CEnvSoundscapeTriggerable::DelegateEndTouch(CBaseEntity*)
 T CEnvSoundscapeTriggerable::DelegateStartTouch(CBaseEntity*)
 T CEnvSoundscapeTriggerable::GetDataDescMap()
 T CEnvSoundscapeTriggerable::Think()
 T CEnvSoundscapeTriggerable::~CEnvSoundscapeTriggerable()
 T CEnvSpark::GetDataDescMap()
 T CEnvSpark::InputSparkOnce(inputdata_t&)
 T CEnvSpark::InputStartSpark(inputdata_t&)
 T CEnvSpark::InputStopSpark(inputdata_t&)
 T CEnvSpark::InputToggleSpark(inputdata_t&)
 T CEnvSpark::Precache()
 T CEnvSpark::SparkThink()
 T CEnvSpark::Spawn()
 T CEnvSpark::~CEnvSpark()
 T CEnvSplash::GetDataDescMap()
 T CEnvSplash::InputSplash(inputdata_t&)
 T CEnvSplash::Precache()
 T CEnvSplash::Spawn()
 T CEnvSplash::~CEnvSplash()
 T CEnvTonemapController::GetDataDescMap()
 T CEnvTonemapController::GetServerClass()
 T CEnvTonemapController::InputBlendTonemapScale(inputdata_t&)
 T CEnvTonemapController::InputSetAutoExposureMax(inputdata_t&)
 T CEnvTonemapController::InputSetAutoExposureMin(inputdata_t&)
 T CEnvTonemapController::InputSetBloomExponent(inputdata_t&)
 T CEnvTonemapController::InputSetBloomSaturation(inputdata_t&)
 T CEnvTonemapController::InputSetBloomScale(inputdata_t&)
 T CEnvTonemapController::InputSetBloomScaleRange(inputdata_t&)
 T CEnvTonemapController::InputSetTonemapRate(inputdata_t&)
 T CEnvTonemapController::InputSetTonemapScale(inputdata_t&)
 T CEnvTonemapController::InputUseDefaultAutoExposure(inputdata_t&)
 T CEnvTonemapController::InputUseDefaultBloomScale(inputdata_t&)
 T CEnvTonemapController::Spawn()
 T CEnvTonemapController::UpdateTonemapScaleBlend()
 T CEnvTonemapController::UpdateTransmitState()
 T CEnvTonemapController::YouForgotToImplementOrDeclareServerClass()
 T CEnvTonemapController::~CEnvTonemapController()
 T CEnvTracer::Activate()
 T CEnvTracer::GetDataDescMap()
 T CEnvTracer::Spawn()
 T CEnvTracer::TracerThink()
 T CEnvTracer::~CEnvTracer()
 T CEnvViewPunch::GetDataDescMap()
 T CEnvViewPunch::InputViewPunch(inputdata_t&)
 T CEnvViewPunch::Spawn()
 T CEnvViewPunch::~CEnvViewPunch()
 T CEnvWeaponfire::Activate()
 T CEnvWeaponfire::CEnvWeaponfire()
 T CEnvWeaponfire::EstablishTarget()
 T CEnvWeaponfire::FireShot()
 T CEnvWeaponfire::GetDataDescMap()
 T CEnvWeaponfire::GetServerClass()
 T CEnvWeaponfire::InputDisable(inputdata_t&)
 T CEnvWeaponfire::InputEnable(inputdata_t&)
 T CEnvWeaponfire::IsValidTarget(CBaseEntity*)
 T CEnvWeaponfire::Spawn()
 T CEnvWeaponfire::TraceShot(Vector const&)
 T CEnvWeaponfire::UpdateTransmitState()
 T CEnvWeaponfire::WeaponfireThink()
 T CEnvWeaponfire::YouForgotToImplementOrDeclareServerClass()
 T CEnvWeaponfire::~CEnvWeaponfire()
 T CEnvWind::GetDataDescMap()
 T CEnvWind::GetServerClass()
 T CEnvWind::NetworkVar_m_EnvWindShared::NetworkStateChanged()
 T CEnvWind::NetworkVar_m_EnvWindShared::NetworkStateChanged(void*)
 T CEnvWind::Precache()
 T CEnvWind::Spawn()
 T CEnvWind::UpdateTransmitState()
 T CEnvWind::WindThink()
 T CEnvWind::YouForgotToImplementOrDeclareServerClass()
 T CEnvWind::~CEnvWind()
 T CEnvWindShared::CEnvWindShared()
 T CEnvWindShared::Init(int, int, float, int, float)
 T CEnvWindShared::NetworkStateChanged()
 T CEnvWindShared::NetworkStateChanged(void*)
 T CEnvWindShared::WindThink(float)
 T CEnvWindShared::~CEnvWindShared()
 T CEnvZoom::GetDataDescMap()
 T CEnvZoom::InputUnZoom(inputdata_t&)
 T CEnvZoom::InputZoom(inputdata_t&)
 T CEnvZoom::~CEnvZoom()
 T CEnv_Blocker::GetDataDescMap()
 T CEnv_Blocker::InputTurnOff(inputdata_t&)
 T CEnv_Blocker::InputTurnOn(inputdata_t&)
 T CEnv_Blocker::ShouldCollide(int, int) const
 T CEnv_Blocker::Spawn()
 T CEnv_Blocker::~CEnv_Blocker()
 T CEscapeRoute::AddArea(TerrorNavArea*)
 T CEscapeRoute::AddNode(Vector const&, TerrorNavArea*)
 T CEscapeRoute::FinishPath()
 T CEscapeRoute::GetAreaFromFlow(float, TerrorNavArea::FlowType) const
 T CEscapeRoute::GetDataDescMap()
 T CEscapeRoute::GetFlowFromPathIndex(int, TerrorNavArea::FlowType) const
 T CEscapeRoute::GetPathIndexFromFlow(float, TerrorNavArea::FlowType) const
 T CEscapeRoute::GetPositionFromFlow(float, bool, Vector*, TerrorNavArea::FlowType) const
 T CEscapeRoute::GetPositionOnPath(float, Vector*) const
 T CEscapeRoute::OnEditDestroyNotify(CNavArea*)
 T CEscapeRoute::Precache()
 T CEscapeRoute::ResetPath()
 T CEscapeRoute::Spawn()
 T CEscapeRoute::UpdateTransmitState()
 T CEscapeRoute::~CEscapeRoute()
 T CEventAbsoluteTag::CEventAbsoluteTag(CEventAbsoluteTag const&)
 T CEventAbsoluteTag::GetPercentage()
 T CEventAbsoluteTag::SetLinear(bool)
 T CEventAbsoluteTag::SetPercentage(float)
 T CEventAction::CEventAction(char const*)
 T CEventLog::CEventLog()
 T CEventLog::FireGameEvent(IGameEvent*)
 T CEventLog::FormatPlayer(CBaseEntity*) const
 T CEventLog::FormatPlayer(CBaseEntity*, char*, int) const
 T CEventLog::Init()
 T CEventLog::PrintEvent(IGameEvent*)
 T CEventLog::PrintGameEvent(IGameEvent*)
 T CEventLog::PrintOtherEvent(IGameEvent*)
 T CEventLog::PrintPlayerEvent(IGameEvent*)
 T CEventLog::PrintTeamEvent(IGameEvent*)
 T CEventLog::~CEventLog()
 T CEventQueue::AddEvent(CBaseEntity*, char const*, float, CBaseEntity*, CBaseEntity*, int)
 T CEventQueue::AddEvent(CBaseEntity*, char const*, variant_t, float, CBaseEntity*, CBaseEntity*, int)
 T CEventQueue::AddEvent(char const*, char const*, variant_t, float, CBaseEntity*, CBaseEntity*, int)
 T CEventQueue::CancelEvents(CBaseEntity*)
 T CEventQueue::Clear()
 T CEventQueue::Dump()
 T CEventQueue::Init()
 T CEventQueue::Restore(IRestore&)
 T CEventQueue::ServiceEvents()
 T CEventQueue::~CEventQueue()
 T CEventQueueSaveLoadProxy::Restore(IRestore&)
 T CEventQueueSaveLoadProxy::Save(ISave&)
 T CEventQueueSaveLoadProxy::~CEventQueueSaveLoadProxy()
 T CEventQueue_SaveRestoreBlockHandler::GetBlockName()
 T CEventQueue_SaveRestoreBlockHandler::ReadRestoreHeaders(IRestore*)
 T CEventQueue_SaveRestoreBlockHandler::Restore(IRestore*, bool)
 T CEventQueue_SaveRestoreBlockHandler::Save(ISave*)
 T CEventQueue_SaveRestoreBlockHandler::WriteSaveHeaders(ISave*)
 T CEventRegister::CEventRegister()
 T CEventRegister::Init(CTimedEventMgr*, IEventRegisterCallback*)
 T CEventRegister::Reregister()
 T CEventRegister::SetUpdateInterval(float)
 T CEventRegister::StopUpdates()
 T CEventRegister::~CEventRegister()
 T CEventsSaveDataOps::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CEventsSaveDataOps::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CEventsSaveDataOps::Parse(SaveRestoreFieldInfo_t const&, char const*)
 T CEventsSaveDataOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CEventsSaveDataOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CEveryoneExceptUserFilter::~CEveryoneExceptUserFilter()
 T CExplosionAwardTemplate::CExplosionAwardTemplate(int)
 T CExplosionAwardTemplate::FireGameEvent(IGameEvent*)
 T CExplosionAwardTemplate::OnCreate()
 T CExplosionAwardTemplate::~CExplosionAwardTemplate()
 T CExpressionEvaluator::CExpressionEvaluator()
 T CExpressionEvaluator::FreeTree(ExprNode*&)
 T CExpressionEvaluator::~CExpressionEvaluator()
 T CFallCauserAwardTemplate::CFallCauserAwardTemplate(int)
 T CFallCauserAwardTemplate::FireGameEvent(IGameEvent*)
 T CFallCauserAwardTemplate::OnCreate()
 T CFallCauserAwardTemplate::~CFallCauserAwardTemplate()
 T CFilterClass::GetDataDescMap()
 T CFilterClass::PassesFilterImpl(CBaseEntity*, CBaseEntity*)
 T CFilterClass::~CFilterClass()
 T CFilterContext::GetDataDescMap()
 T CFilterContext::PassesFilterImpl(CBaseEntity*, CBaseEntity*)
 T CFilterContext::~CFilterContext()
 T CFilterEnemy::GetDataDescMap()
 T CFilterEnemy::PassesDamageFilterImpl(CTakeDamageInfo const&)
 T CFilterEnemy::PassesFilterImpl(CBaseEntity*, CBaseEntity*)
 T CFilterEnemy::PassesProximityFilter(CBaseEntity*, CBaseEntity*)
 T CFilterEnemy::~CFilterEnemy()
 T CFilterMassGreater::GetDataDescMap()
 T CFilterMassGreater::PassesFilterImpl(CBaseEntity*, CBaseEntity*)
 T CFilterMassGreater::~CFilterMassGreater()
 T CFilterModel::GetDataDescMap()
 T CFilterModel::PassesFilterImpl(CBaseEntity*, CBaseEntity*)
 T CFilterModel::~CFilterModel()
 T CFilterMultiple::Activate()
 T CFilterMultiple::GetDataDescMap()
 T CFilterMultiple::PassesDamageFilterImpl(CTakeDamageInfo const&)
 T CFilterMultiple::PassesFilterImpl(CBaseEntity*, CBaseEntity*)
 T CFilterMultiple::~CFilterMultiple()
 T CFilterName::GetDataDescMap()
 T CFilterName::PassesFilterImpl(CBaseEntity*, CBaseEntity*)
 T CFilterName::~CFilterName()
 T CFinaleTrigger::CFinaleTrigger()
 T CFinaleTrigger::DelayedFinaleStartThink()
 T CFinaleTrigger::DelayedHoldoutStartThink()
 T CFinaleTrigger::DrawDebugTextOverlays()
 T CFinaleTrigger::Event_Killed(CTakeDamageInfo const&)
 T CFinaleTrigger::FirstUseDelayThink()
 T CFinaleTrigger::GetDataDescMap()
 T CFinaleTrigger::GetServerClass()
 T CFinaleTrigger::InputDLC3AdvanceFinaleState(inputdata_t&)
 T CFinaleTrigger::InputDLC3FinaleEnableChaseTanks(inputdata_t&)
 T CFinaleTrigger::InputDLC3FinaleLost(inputdata_t&)
 T CFinaleTrigger::InputDLC3FinaleLull(inputdata_t&)
 T CFinaleTrigger::InputDLC3FinaleWon(inputdata_t&)
 T CFinaleTrigger::InputDLC3SacrificePlayerBeginsRun(inputdata_t&)
 T CFinaleTrigger::InputDisable(inputdata_t&)
 T CFinaleTrigger::InputDisableEscapeSequence(inputdata_t&)
 T CFinaleTrigger::InputEnable(inputdata_t&)
 T CFinaleTrigger::InputEnableEscapeSequence(inputdata_t&)
 T CFinaleTrigger::ObjectCaps()
 T CFinaleTrigger::OnFinaleEscapeFinished(inputdata_t&)
 T CFinaleTrigger::OnFinaleEscapeForceSurvivorPositions(inputdata_t&)
 T CFinaleTrigger::OnFinaleEscapeStarted(inputdata_t&)
 T CFinaleTrigger::OnFinaleEscapeVehicleReadyForSurvivors(inputdata_t&)
 T CFinaleTrigger::OnFinaleLost(inputdata_t&)
 T CFinaleTrigger::OnFinalePause(inputdata_t&)
 T CFinaleTrigger::OnFinaleWon(inputdata_t&)
 T CFinaleTrigger::OnForceFinaleStart(inputdata_t&)
 T CFinaleTrigger::OnTakeDamage(CTakeDamageInfo const&)
 T CFinaleTrigger::OverridePropdata()
 T CFinaleTrigger::Spawn()
 T CFinaleTrigger::StartFinale(CTerrorPlayer*)
 T CFinaleTrigger::StartHoldout(CTerrorPlayer*)
 T CFinaleTrigger::UpdateTransmitState()
 T CFinaleTrigger::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CFinaleTrigger::YouForgotToImplementOrDeclareServerClass()
 T CFinaleTrigger::~CFinaleTrigger()
 T CFindActiveTongues::operator()(CTerrorPlayer*)
 T CFire* _CreateEntityTemplate<CFire>(CFire*, char const*)
 T CFire::Activate()
 T CFire::AddHeat(float, bool)
 T CFire::BurnThink()
 T CFire::DrawDebugGeometryOverlays()
 T CFire::DrawDebugTextOverlays()
 T CFire::GetDataDescMap()
 T CFire::GoOut()
 T CFire::GoOutThink()
 T CFire::Init(Vector const&, float, float, float, int, int)
 T CFire::InputDisable(inputdata_t&)
 T CFire::InputEnable(inputdata_t&)
 T CFire::InputExtinguish(inputdata_t&)
 T CFire::InputExtinguishTemporary(inputdata_t&)
 T CFire::InputStartFire(inputdata_t&)
 T CFire::OnTakeDamage(CTakeDamageInfo const&)
 T CFire::Precache()
 T CFire::Spawn()
 T CFire::SpawnEffect(fireType_e, float)
 T CFire::StartFire()
 T CFire::Update(float)
 T CFire::UpdateOnRemove()
 T CFire::UpdateTransmitState()
 T CFire::~CFire()
 T CFireSmoke::CFireSmoke()
 T CFireSmoke::EnableGlow(int)
 T CFireSmoke::EnableSmoke(int)
 T CFireSmoke::EnableVisibleFromAbove(int)
 T CFireSmoke::GetDataDescMap()
 T CFireSmoke::GetServerClass()
 T CFireSmoke::Precache()
 T CFireSmoke::Spawn()
 T CFireSmoke::YouForgotToImplementOrDeclareServerClass()
 T CFireSmoke::~CFireSmoke()
 T CFireSphere::EnumElement(IHandleEntity*)
 T CFireTrail::GetDataDescMap()
 T CFireTrail::GetServerClass()
 T CFireTrail::Precache()
 T CFireTrail::YouForgotToImplementOrDeclareServerClass()
 T CFireTrail::~CFireTrail()
 T CFirstAidKit::CanBeSelected()
 T CFirstAidKit::CanExtendHelpingHand() const
 T CFirstAidKit::CanFidget()
 T CFirstAidKit::DoHeal(int)
 T CFirstAidKit::Drop(Vector const&)
 T CFirstAidKit::FinishHealing()
 T CFirstAidKit::GetDataDescMap()
 T CFirstAidKit::GetDeployActivity()
 T CFirstAidKit::GetProposedHealAmount(CTerrorPlayer*, CTerrorPlayer*)
 T CFirstAidKit::GetServerClass()
 T CFirstAidKit::GetViewmodelMeleeActivity()
 T CFirstAidKit::GetWeaponDeployActivity(PlayerAnimEvent_t, Activity)
 T CFirstAidKit::GetWeaponFireActivity(PlayerAnimEvent_t, Activity)
 T CFirstAidKit::GetWeaponID() const
 T CFirstAidKit::HasPrimaryAmmo()
 T CFirstAidKit::HasSecondaryMelee()
 T CFirstAidKit::Holster(CBaseCombatWeapon*)
 T CFirstAidKit::ItemPostFrame()
 T CFirstAidKit::OnHit(CGameTrace&, Vector const&, bool)
 T CFirstAidKit::Precache()
 T CFirstAidKit::PrimaryAttack()
 T CFirstAidKit::SecondaryAttack()
 T CFirstAidKit::SendWeaponAnim(int)
 T CFirstAidKit::Spawn()
 T CFirstAidKit::StartHealing(CFirstAidKit::HealTargetType)
 T CFirstAidKit::StopHealing()
 T CFirstAidKit::TranslateViewmodelActivity(Activity) const
 T CFirstAidKit::WeaponIdle()
 T CFirstAidKit::WeaponTranslateMainActivity(Activity)
 T CFirstAidKit::YouForgotToImplementOrDeclareServerClass()
 T CFirstAidKit::~CFirstAidKit()
 T CFish* _CreateEntityTemplate<CFish>(CFish*, char const*)
 T CFish::Avoid()
 T CFish::Event_Killed(CTakeDamageInfo const&)
 T CFish::FlockTo(CFish*, float)
 T CFish::GetDataDescMap()
 T CFish::GetServerClass()
 T CFish::Initialize(CFishPool*, unsigned int)
 T CFish::Panic()
 T CFish::Spawn()
 T CFish::Touch(CBaseEntity*)
 T CFish::Update(float)
 T CFish::YouForgotToImplementOrDeclareServerClass()
 T CFish::~CFish()
 T CFishPool::CFishPool()
 T CFishPool::FireGameEvent(IGameEvent*)
 T CFishPool::GetDataDescMap()
 T CFishPool::KeyValue(char const*, char const*)
 T CFishPool::Spawn()
 T CFishPool::Update()
 T CFishPool::~CFishPool()
 T CFlaggedEntitiesEnum::CFlaggedEntitiesEnum(CBaseEntity**, int, int)
 T CFlaggedEntitiesEnum::EnumElement(IHandleEntity*)
 T CFlexAnimationTrack::GetBoundedSample(int, bool&, int)
 T CFlexAnimationTrack::GetFlexControllerName()
 T CFlexAnimationTrack::GetFracIntensity(float, int)
 T CFlexAnimationTrack::GetIntensity(float, int)
 T CFlexAnimationTrack::GetIntensityInternal(float, int)
 T CFlexAnimationTrack::GetRawFlexControllerIndex(int)
 T CFlexAnimationTrack::IsComboType()
 T CFlexAnimationTrack::IsServerSide() const
 T CFlexAnimationTrack::IsTrackActive()
 T CFlexAnimationTrack::Resort(int)
 T CFlexAnimationTrack::SetFlexControllerIndex(LocalFlexController_t, int, int)
 T CFlexAnimationTrack::SetServerSide(bool)
 T CFlexAnimationTrack::~CFlexAnimationTrack()
 T CFlexCycler::GenericCyclerSpawn(char*, Vector, Vector)
 T CFlexCycler::GetDataDescMap()
 T CFlexCycler::IsAlive()
 T CFlexCycler::ObjectCaps()
 T CFlexCycler::OnTakeDamage(CTakeDamageInfo const&)
 T CFlexCycler::ProcessSceneEvents()
 T CFlexCycler::SetFlexTarget(LocalFlexController_t)
 T CFlexCycler::Spawn()
 T CFlexCycler::Think()
 T CFlexExpresser::CFlexExpresser()
 T CFlexExpresser::GetDataDescMap()
 T CFlexExpresser::GetResponseSystem()
 T CFlexExpresser::InputSpeakResponseConcept(inputdata_t&)
 T CFlexExpresser::OnTakeDamage(CTakeDamageInfo const&)
 T CFlexExpresser::Spawn()
 T CFlexExpresser::Think()
 T CFlexExpresser::~CFlexExpresser()
 T CFlexSceneFileManager::FindSceneFile(CBaseFlex*, char const*, bool)
 T CFlexSceneFileManager::Init()
 T CFlexSceneFileManager::Shutdown()
 T CFlexSceneFileManager::~CFlexSceneFileManager()
 T CFmtStrN<1024>::CFmtStrN(char const*, ...)
 T CFmtStrN<1024>::InitQuietTruncation()
 T CFmtStrN<128>::InitQuietTruncation()
 T CFmtStrN<128>::use_Q_snprintf_instead_of_sprintf(char const*, ...)
 T CFmtStrN<256>::CFmtStrN(char const**, ...)
 T CFmtStrN<256>::CFmtStrN(char const*, ...)
 T CFmtStrN<256>::InitQuietTruncation()
 T CFmtStrN<256>::use_Q_snprintf_instead_of_sprintf(char const*, ...)
 T CFmtStrN<260>::InitQuietTruncation()
 T CFmtStrN<260>::use_Q_snprintf_instead_of_sprintf(char const*, ...)
 T CFmtStrN<32>::CFmtStrN(char const*, ...)
 T CFmtStrN<32>::InitQuietTruncation()
 T CFmtStrN<64>::CFmtStrN(char const*, ...)
 T CFmtStrN<64>::InitQuietTruncation()
 T CFmtStrN<80>::InitQuietTruncation()
 T CFmtStrN<80>::use_Q_snprintf_instead_of_sprintf(char const*, ...)
 T CFogController::Activate()
 T CFogController::CFogController()
 T CFogController::DrawDebugTextOverlays()
 T CFogController::GetDataDescMap()
 T CFogController::GetServerClass()
 T CFogController::InputSetAngles(inputdata_t&)
 T CFogController::InputSetColor(inputdata_t&)
 T CFogController::InputSetColorLerpTo(inputdata_t&)
 T CFogController::InputSetColorSecondary(inputdata_t&)
 T CFogController::InputSetColorSecondaryLerpTo(inputdata_t&)
 T CFogController::InputSetEndDist(inputdata_t&)
 T CFogController::InputSetEndDistLerpTo(inputdata_t&)
 T CFogController::InputSetFarZ(inputdata_t&)
 T CFogController::InputSetMaxDensity(inputdata_t&)
 T CFogController::InputSetMaxDensityLerpTo(inputdata_t&)
 T CFogController::InputSetStartDist(inputdata_t&)
 T CFogController::InputSetStartDistLerpTo(inputdata_t&)
 T CFogController::InputStartFogTransition(inputdata_t&)
 T CFogController::InputTurnOff(inputdata_t&)
 T CFogController::InputTurnOn(inputdata_t&)
 T CFogController::NetworkVar_m_fog::NetworkStateChanged()
 T CFogController::NetworkVar_m_fog::NetworkStateChanged(void*)
 T CFogController::SetLerpValues()
 T CFogController::Spawn()
 T CFogController::UpdateTransmitState()
 T CFogController::YouForgotToImplementOrDeclareServerClass()
 T CFogController::~CFogController()
 T CFogSystem::FireGameEvent(IGameEvent*)
 T CFogSystem::LevelInitPostEntity()
 T CFogSystem::LevelInitPreEntity()
 T CFogSystem::~CFogSystem()
 T CFogTrigger::EndTouch(CBaseEntity*)
 T CFogTrigger::GetDataDescMap()
 T CFogTrigger::Spawn()
 T CFogTrigger::StartTouch(CBaseEntity*)
 T CFogTrigger::~CFogTrigger()
 T CFogVolume::Activate()
 T CFogVolume::CFogVolume()
 T CFogVolume::FindFogVolumeForPosition(Vector const&)
 T CFogVolume::GetDataDescMap()
 T CFogVolume::InputDisable(inputdata_t&)
 T CFogVolume::InputEnable(inputdata_t&)
 T CFogVolume::Spawn()
 T CFogVolume::~CFogVolume()
 T CForgetfulAwardTemplate::CForgetfulAwardTemplate(int)
 T CForgetfulAwardTemplate::CheckAndResetTimer()
 T CForgetfulAwardTemplate::FireGameEvent(IGameEvent*)
 T CForgetfulAwardTemplate::OnCreate()
 T CForgetfulAwardTemplate::~CForgetfulAwardTemplate()
 T CFourWheelServerVehicle::GetFourWheelVehicle()
 T CFourWheelServerVehicle::GetVehicleController()
 T CFourWheelServerVehicle::GetVehicleParams()
 T CFourWheelServerVehicle::GetVehicleViewPosition(int, Vector*, QAngle*, float*)
 T CFourWheelServerVehicle::IsPassengerEntering()
 T CFourWheelServerVehicle::IsPassengerExiting()
 T CFourWheelServerVehicle::IsVehicleBodyInWater()
 T CFourWheelServerVehicle::IsVehicleUpright()
 T CFourWheelServerVehicle::NPC_DriveVehicle()
 T CFourWheelServerVehicle::NPC_SetDriver(CNPC_VehicleDriver*)
 T CFourWheelServerVehicle::SetVehicle(CBaseEntity*)
 T CFourWheelServerVehicle::~CFourWheelServerVehicle()
 T CFourWheelVehiclePhysics::CFourWheelVehiclePhysics(CBaseAnimating*)
 T CFourWheelVehiclePhysics::CalcWheelData(vehicleparams_t&)
 T CFourWheelVehiclePhysics::DrawDebugGeometryOverlays()
 T CFourWheelVehiclePhysics::DrawDebugTextOverlays(int)
 T CFourWheelVehiclePhysics::GetDataDescMap()
 T CFourWheelVehiclePhysics::Initialize(char const*, unsigned int)
 T CFourWheelVehiclePhysics::InitializePoseParameters()
 T CFourWheelVehiclePhysics::ParseVehicleScript(char const*, solid_t&, vehicleparams_t&)
 T CFourWheelVehiclePhysics::PlaceWheelDust(int, bool)
 T CFourWheelVehiclePhysics::Precache()
 T CFourWheelVehiclePhysics::ReleaseHandbrake()
 T CFourWheelVehiclePhysics::SetAction(float)
 T CFourWheelVehiclePhysics::SetDisableEngine(bool)
 T CFourWheelVehiclePhysics::SetHandbrake(bool)
 T CFourWheelVehiclePhysics::SetSteering(float, float)
 T CFourWheelVehiclePhysics::SetThrottle(float)
 T CFourWheelVehiclePhysics::Spawn()
 T CFourWheelVehiclePhysics::SteeringTurn(float, vehicleparams_t const&, bool, bool, bool)
 T CFourWheelVehiclePhysics::SteeringTurnAnalog(float, vehicleparams_t const&, float)
 T CFourWheelVehiclePhysics::Teleport(matrix3x4_t&)
 T CFourWheelVehiclePhysics::Think()
 T CFourWheelVehiclePhysics::TurnOff()
 T CFourWheelVehiclePhysics::TurnOn()
 T CFourWheelVehiclePhysics::UpdateDriverControls(CUserCmd*, float)
 T CFourWheelVehiclePhysics::VPhysicsGetObjectList(IPhysicsObject**, int)
 T CFourWheelVehiclePhysics::VPhysicsUpdate(IPhysicsObject*)
 T CFourWheelVehiclePhysics::~CFourWheelVehiclePhysics()
 T CFriendlyFireAwardTemplate::AddIncidentToList(CUtlLinkedList<CFriendlyFireIncident, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CFriendlyFireIncident, unsigned short>, unsigned short> >*, int)
 T CFriendlyFireAwardTemplate::CFriendlyFireAwardTemplate(int)
 T CFriendlyFireAwardTemplate::FireGameEvent(IGameEvent*)
 T CFriendlyFireAwardTemplate::OnCreate()
 T CFriendlyFireAwardTemplate::PruneOldIncidents(CUtlLinkedList<CFriendlyFireIncident, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CFriendlyFireIncident, unsigned short>, unsigned short> >*)
 T CFriendlyFireAwardTemplate::Reset()
 T CFriendlyFireAwardTemplate::~CFriendlyFireAwardTemplate()
 T CFuelBarrelPiece::Activate()
 T CFuelBarrelPiece::Create(Vector const&, QAngle const&, string_t, string_t)
 T CFuelBarrelPiece::Detonate()
 T CFuelBarrelPiece::OnBreak(Vector const&, Vector const&, CBaseEntity*)
 T CFuelBarrelPiece::Precache()
 T CFuelBarrelPiece::Spawn()
 T CFuelBarrelPiece::UpdateOnRemove()
 T CFuelBarrelPiece::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CFuelBarrelPiece::~CFuelBarrelPiece()
 T CFuelBarrelProp::Activate()
 T CFuelBarrelProp::Detonate()
 T CFuelBarrelProp::Event_Killed(CTakeDamageInfo const&)
 T CFuelBarrelProp::GetDataDescMap()
 T CFuelBarrelProp::OnBreak(Vector const&, Vector const&, CBaseEntity*)
 T CFuelBarrelProp::OnTakeDamage(CTakeDamageInfo const&)
 T CFuelBarrelProp::Precache()
 T CFuelBarrelProp::Spawn()
 T CFuelBarrelProp::UpdateOnRemove()
 T CFuelBarrelProp::~CFuelBarrelProp()
 T CFuncAreaPortalBase::CFuncAreaPortalBase()
 T CFuncAreaPortalBase::GetDataDescMap()
 T CFuncAreaPortalBase::ObjectCaps()
 T CFuncAreaPortalBase::UpdateVisibility(CUtlVector<Vector, CUtlMemory<Vector, int> > const&, float, bool&)
 T CFuncAreaPortalBase::~CFuncAreaPortalBase()
 T CFuncAreaPortalWindow::Activate()
 T CFuncAreaPortalWindow::GetDataDescMap()
 T CFuncAreaPortalWindow::GetServerClass()
 T CFuncAreaPortalWindow::InputSetFadeEndDistance(inputdata_t&)
 T CFuncAreaPortalWindow::InputSetFadeStartDistance(inputdata_t&)
 T CFuncAreaPortalWindow::Spawn()
 T CFuncAreaPortalWindow::UpdateVisibility(CUtlVector<Vector, CUtlMemory<Vector, int> > const&, float, bool&)
 T CFuncAreaPortalWindow::YouForgotToImplementOrDeclareServerClass()
 T CFuncAreaPortalWindow::~CFuncAreaPortalWindow()
 T CFuncBrush::CreateVPhysics()
 T CFuncBrush::DrawDebugTextOverlays()
 T CFuncBrush::GetDataDescMap()
 T CFuncBrush::GetServerClass()
 T CFuncBrush::InputSetExcluded(inputdata_t&)
 T CFuncBrush::InputSetInvert(inputdata_t&)
 T CFuncBrush::InputToggle(inputdata_t&)
 T CFuncBrush::InputTurnOff(inputdata_t&)
 T CFuncBrush::InputTurnOn(inputdata_t&)
 T CFuncBrush::IsOn()
 T CFuncBrush::ObjectCaps()
 T CFuncBrush::Spawn()
 T CFuncBrush::YouForgotToImplementOrDeclareServerClass()
 T CFuncBrush::~CFuncBrush()
 T CFuncConveyor::CFuncConveyor()
 T CFuncConveyor::GetDataDescMap()
 T CFuncConveyor::GetGroundVelocityToApply(Vector&)
 T CFuncConveyor::GetServerClass()
 T CFuncConveyor::InputSetSpeed(inputdata_t&)
 T CFuncConveyor::InputToggleDirection(inputdata_t&)
 T CFuncConveyor::Spawn()
 T CFuncConveyor::UpdateSpeed(float)
 T CFuncConveyor::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CFuncConveyor::YouForgotToImplementOrDeclareServerClass()
 T CFuncConveyor::~CFuncConveyor()
 T CFuncElevator::AccelerationThink()
 T CFuncElevator::Blocked(CBaseEntity*)
 T CFuncElevator::CreateVPhysics()
 T CFuncElevator::DrawDebugTextOverlays()
 T CFuncElevator::FindPlayersOnElevator(CUtlVector<CBasePlayer*, CUtlMemory<CBasePlayer*, int> >*, int)
 T CFuncElevator::GetButtonAtCurrentHeight() const
 T CFuncElevator::GetCurrentFloor() const
 T CFuncElevator::GetCurrentHeight()
 T CFuncElevator::GetDataDescMap()
 T CFuncElevator::GetDestinationFloor() const
 T CFuncElevator::GetServerClass()
 T CFuncElevator::InputDisable(inputdata_t&)
 T CFuncElevator::InputMoveToFloor(inputdata_t&)
 T CFuncElevator::IsPlayerOnElevator(CBasePlayer*)
 T CFuncElevator::MoveDone()
 T CFuncElevator::MoveTo(float)
 T CFuncElevator::NetworkStateChanged_m_fFlags()
 T CFuncElevator::NetworkStateChanged_m_fFlags(void*)
 T CFuncElevator::NetworkStateChanged_m_vecVelocity()
 T CFuncElevator::NetworkStateChanged_m_vecVelocity(void*)
 T CFuncElevator::PhysicsSimulate()
 T CFuncElevator::Precache()
 T CFuncElevator::Spawn()
 T CFuncElevator::StopMoveSoundThink()
 T CFuncElevator::YouForgotToImplementOrDeclareServerClass()
 T CFuncElevator::~CFuncElevator()
 T CFuncFireExtinguisher::ExtinguishThink()
 T CFuncFireExtinguisher::GetDataDescMap()
 T CFuncFireExtinguisher::InputDisable(inputdata_t&)
 T CFuncFireExtinguisher::InputEnable(inputdata_t&)
 T CFuncFireExtinguisher::Spawn()
 T CFuncFireExtinguisher::~CFuncFireExtinguisher()
 T CFuncIllusionary::Spawn()
 T CFuncIllusionary::~CFuncIllusionary()
 T CFuncLadder::Activate()
 T CFuncLadder::CFuncLadder()
 T CFuncLadder::DrawDebugGeometryOverlays()
 T CFuncLadder::FindNearbyDismountPoints(Vector const&, float, CUtlVector<CHandle<CInfoLadderDismount>, CUtlMemory<CHandle<CInfoLadderDismount>, int> >&)
 T CFuncLadder::GetDataDescMap()
 T CFuncLadder::GetServerClass()
 T CFuncLadder::InputDisable(inputdata_t&)
 T CFuncLadder::InputEnable(inputdata_t&)
 T CFuncLadder::SearchForDismountPoints()
 T CFuncLadder::SetEndPoints(Vector const&, Vector const&)
 T CFuncLadder::Spawn()
 T CFuncLadder::UpdateTransmitState()
 T CFuncLadder::YouForgotToImplementOrDeclareServerClass()
 T CFuncLadder::~CFuncLadder()
 T CFuncLadderEndPoint::Activate()
 T CFuncLadderEndPoint::Validate()
 T CFuncLadderEndPoint::~CFuncLadderEndPoint()
 T CFuncMoveLinear::Blocked(CBaseEntity*)
 T CFuncMoveLinear::CreateVPhysics()
 T CFuncMoveLinear::DrawDebugTextOverlays()
 T CFuncMoveLinear::GetDataDescMap()
 T CFuncMoveLinear::GetServerClass()
 T CFuncMoveLinear::InputClose(inputdata_t&)
 T CFuncMoveLinear::InputOpen(inputdata_t&)
 T CFuncMoveLinear::InputSetPosition(inputdata_t&)
 T CFuncMoveLinear::InputSetSpeed(inputdata_t&)
 T CFuncMoveLinear::MoveDone()
 T CFuncMoveLinear::MoveTo(Vector, float)
 T CFuncMoveLinear::NetworkStateChanged_m_fFlags()
 T CFuncMoveLinear::NetworkStateChanged_m_fFlags(void*)
 T CFuncMoveLinear::NetworkStateChanged_m_vecVelocity()
 T CFuncMoveLinear::NetworkStateChanged_m_vecVelocity(void*)
 T CFuncMoveLinear::Precache()
 T CFuncMoveLinear::SetPosition(float)
 T CFuncMoveLinear::ShouldSavePhysics()
 T CFuncMoveLinear::Spawn()
 T CFuncMoveLinear::StopMoveSound()
 T CFuncMoveLinear::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CFuncMoveLinear::YouForgotToImplementOrDeclareServerClass()
 T CFuncMoveLinear::~CFuncMoveLinear()
 T CFuncNavAttributeRegion::DrawDebugTextOverlays()
 T CFuncNavAttributeRegion::GetDataDescMap()
 T CFuncNavAttributeRegion::InputApplyNavAttributes(inputdata_t&)
 T CFuncNavAttributeRegion::Spawn()
 T CFuncNavAttributeRegion::~CFuncNavAttributeRegion()
 T CFuncNavBlocker::DrawDebugTextOverlays()
 T CFuncNavBlocker::GetDataDescMap()
 T CFuncNavBlocker::InputBlockNav(inputdata_t&)
 T CFuncNavBlocker::InputUnblockNav(inputdata_t&)
 T CFuncNavBlocker::Spawn()
 T CFuncNavBlocker::UpdateOnRemove()
 T CFuncNavBlocker::~CFuncNavBlocker()
 T CFuncNavObstruction::CanObstructNavAreas() const
 T CFuncNavObstruction::DrawDebugTextOverlays()
 T CFuncNavObstruction::GetDataDescMap()
 T CFuncNavObstruction::GetNavObstructionHeight() const
 T CFuncNavObstruction::GetObstructingEntity()
 T CFuncNavObstruction::InputDisable(inputdata_t&)
 T CFuncNavObstruction::InputEnable(inputdata_t&)
 T CFuncNavObstruction::IsPotentiallyAbleToObstructNavAreas() const
 T CFuncNavObstruction::OnNavMeshLoaded()
 T CFuncNavObstruction::Spawn()
 T CFuncNavObstruction::UpdateOnRemove()
 T CFuncNavObstruction::~CFuncNavObstruction()
 T CFuncNavStairsToggle::GetDataDescMap()
 T CFuncNavStairsToggle::InputAddStairsAttribute(inputdata_t&)
 T CFuncNavStairsToggle::InputRemoveStairsAttribute(inputdata_t&)
 T CFuncNavStairsToggle::Spawn()
 T CFuncNavStairsToggle::ToggleAttribute(bool)
 T CFuncNavStairsToggle::~CFuncNavStairsToggle()
 T CFuncOccluder::CFuncOccluder()
 T CFuncOccluder::GetDataDescMap()
 T CFuncOccluder::GetServerClass()
 T CFuncOccluder::InputActivate(inputdata_t&)
 T CFuncOccluder::InputDeactivate(inputdata_t&)
 T CFuncOccluder::InputToggle(inputdata_t&)
 T CFuncOccluder::Spawn()
 T CFuncOccluder::UpdateTransmitState()
 T CFuncOccluder::YouForgotToImplementOrDeclareServerClass()
 T CFuncOccluder::~CFuncOccluder()
 T CFuncPlat::Blocked(CBaseEntity*)
 T CFuncPlat::CallGoDown()
 T CFuncPlat::CallHitBottom()
 T CFuncPlat::CallHitTop()
 T CFuncPlat::CreateVPhysics()
 T CFuncPlat::GetDataDescMap()
 T CFuncPlat::GoDown()
 T CFuncPlat::GoUp()
 T CFuncPlat::HitBottom()
 T CFuncPlat::HitTop()
 T CFuncPlat::InputGoDown(inputdata_t&)
 T CFuncPlat::InputGoUp(inputdata_t&)
 T CFuncPlat::InputToggle(inputdata_t&)
 T CFuncPlat::PlatUse(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CFuncPlat::Precache()
 T CFuncPlat::Setup()
 T CFuncPlat::Spawn()
 T CFuncPlat::~CFuncPlat()
 T CFuncPlatRot::GetDataDescMap()
 T CFuncPlatRot::GoDown()
 T CFuncPlatRot::GoUp()
 T CFuncPlatRot::HitBottom()
 T CFuncPlatRot::HitTop()
 T CFuncPlatRot::RotMove(QAngle&, float)
 T CFuncPlatRot::SetupRotation()
 T CFuncPlatRot::Spawn()
 T CFuncPlatRot::~CFuncPlatRot()
 T CFuncPlayerInfectedClip::GetDataDescMap()
 T CFuncPlayerInfectedClip::GetServerClass()
 T CFuncPlayerInfectedClip::ShouldCollide(int, int) const
 T CFuncPlayerInfectedClip::ShouldTransmit(CCheckTransmitInfo const*)
 T CFuncPlayerInfectedClip::Spawn()
 T CFuncPlayerInfectedClip::UpdateTransmitState()
 T CFuncPlayerInfectedClip::YouForgotToImplementOrDeclareServerClass()
 T CFuncPlayerInfectedClip::~CFuncPlayerInfectedClip()
 T CFuncRagdollFader::CFuncRagdollFader()
 T CFuncRagdollFader::Disable()
 T CFuncRagdollFader::Enable()
 T CFuncRagdollFader::GetDataDescMap()
 T CFuncRagdollFader::GetServerClass()
 T CFuncRagdollFader::InputDisable(inputdata_t&)
 T CFuncRagdollFader::InputEnable(inputdata_t&)
 T CFuncRagdollFader::Spawn()
 T CFuncRagdollFader::StartTouch(CBaseEntity*)
 T CFuncRagdollFader::UpdateOnRemove()
 T CFuncRagdollFader::YouForgotToImplementOrDeclareServerClass()
 T CFuncRagdollFader::~CFuncRagdollFader()
 T CFuncReflectiveGlass::GetDataDescMap()
 T CFuncReflectiveGlass::GetServerClass()
 T CFuncReflectiveGlass::YouForgotToImplementOrDeclareServerClass()
 T CFuncReflectiveGlass::~CFuncReflectiveGlass()
 T CFuncRotating::Blocked(CBaseEntity*)
 T CFuncRotating::CreateVPhysics()
 T CFuncRotating::DrawDebugTextOverlays()
 T CFuncRotating::GetDataDescMap()
 T CFuncRotating::GetServerClass()
 T CFuncRotating::HurtTouch(CBaseEntity*)
 T CFuncRotating::InputReverse(inputdata_t&)
 T CFuncRotating::InputSetSpeed(inputdata_t&)
 T CFuncRotating::InputStart(inputdata_t&)
 T CFuncRotating::InputStartBackward(inputdata_t&)
 T CFuncRotating::InputStartForward(inputdata_t&)
 T CFuncRotating::InputStop(inputdata_t&)
 T CFuncRotating::InputStopAtStartPos(inputdata_t&)
 T CFuncRotating::InputToggle(inputdata_t&)
 T CFuncRotating::KeyValue(char const*, char const*)
 T CFuncRotating::Precache()
 T CFuncRotating::RampPitchVol()
 T CFuncRotating::ReverseMove()
 T CFuncRotating::RotateMove()
 T CFuncRotating::RotatingUse(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CFuncRotating::SetTargetSpeed(float)
 T CFuncRotating::Spawn()
 T CFuncRotating::SpinDownMove()
 T CFuncRotating::SpinUpMove()
 T CFuncRotating::UpdateSpeed(float)
 T CFuncRotating::YouForgotToImplementOrDeclareServerClass()
 T CFuncRotating::~CFuncRotating()
 T CFuncSimpleLadder::Activate()
 T CFuncSimpleLadder::DrawDebugGeometryOverlays()
 T CFuncSimpleLadder::DrawDebugTextOverlays()
 T CFuncSimpleLadder::GetDataDescMap()
 T CFuncSimpleLadder::GetServerClass()
 T CFuncSimpleLadder::KeyValue(char const*, char const*)
 T CFuncSimpleLadder::Spawn()
 T CFuncSimpleLadder::YouForgotToImplementOrDeclareServerClass()
 T CFuncSimpleLadder::~CFuncSimpleLadder()
 T CFuncSmokeVolume::Activate()
 T CFuncSmokeVolume::CFuncSmokeVolume()
 T CFuncSmokeVolume::GetDataDescMap()
 T CFuncSmokeVolume::GetServerClass()
 T CFuncSmokeVolume::Spawn()
 T CFuncSmokeVolume::YouForgotToImplementOrDeclareServerClass()
 T CFuncSmokeVolume::~CFuncSmokeVolume()
 T CFuncSpawnVolume::BuildAreaSet()
 T CFuncSpawnVolume::GetDataDescMap()
 T CFuncSpawnVolume::InputDisable(inputdata_t&)
 T CFuncSpawnVolume::InputEnable(inputdata_t&)
 T CFuncSpawnVolume::RebuildActiveAreaSets()
 T CFuncSpawnVolume::Spawn()
 T CFuncSpawnVolume::UpdateOnRemove()
 T CFuncSpawnVolume::~CFuncSpawnVolume()
 T CFuncTankTrain::Blocked(CBaseEntity*)
 T CFuncTankTrain::Event_Killed(CTakeDamageInfo const&)
 T CFuncTankTrain::GetDataDescMap()
 T CFuncTankTrain::OnTakeDamage(CTakeDamageInfo const&)
 T CFuncTankTrain::Spawn()
 T CFuncTankTrain::~CFuncTankTrain()
 T CFuncTrackAuto::GetDataDescMap()
 T CFuncTrackAuto::TriggerTrackChange(inputdata_t&)
 T CFuncTrackAuto::UpdateAutoTargets(int)
 T CFuncTrackAuto::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CFuncTrackAuto::~CFuncTrackAuto()
 T CFuncTrackChange::Find()
 T CFuncTrackChange::GetDataDescMap()
 T CFuncTrackChange::GoDown()
 T CFuncTrackChange::GoUp()
 T CFuncTrackChange::HitBottom()
 T CFuncTrackChange::HitTop()
 T CFuncTrackChange::IsTogglePlat()
 T CFuncTrackChange::Precache()
 T CFuncTrackChange::Spawn()
 T CFuncTrackChange::Touch(CBaseEntity*)
 T CFuncTrackChange::UpdateAutoTargets(int)
 T CFuncTrackChange::UpdateTrain(QAngle&)
 T CFuncTrackChange::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CFuncTrackChange::~CFuncTrackChange()
 T CFuncTrackTrain* _CreateEntityTemplate<CFuncTrackTrain>(CFuncTrackTrain*, char const*)
 T CFuncTrackTrain::ArriveAtNode(CPathTrack*)
 T CFuncTrackTrain::Blocked(CBaseEntity*)
 T CFuncTrackTrain::CFuncTrackTrain()
 T CFuncTrackTrain::CreateVPhysics()
 T CFuncTrackTrain::DeadEnd()
 T CFuncTrackTrain::DoUpdateOrientation(QAngle const&, QAngle const&, float)
 T CFuncTrackTrain::DrawDebugGeometryOverlays()
 T CFuncTrackTrain::DrawDebugTextOverlays()
 T CFuncTrackTrain::Find()
 T CFuncTrackTrain::GetDataDescMap()
 T CFuncTrackTrain::GetServerClass()
 T CFuncTrackTrain::InputResume(inputdata_t&)
 T CFuncTrackTrain::InputReverse(inputdata_t&)
 T CFuncTrackTrain::InputSetSpeed(inputdata_t&)
 T CFuncTrackTrain::InputSetSpeedDir(inputdata_t&)
 T CFuncTrackTrain::InputSetSpeedReal(inputdata_t&)
 T CFuncTrackTrain::InputStartBackward(inputdata_t&)
 T CFuncTrackTrain::InputStartForward(inputdata_t&)
 T CFuncTrackTrain::InputStop(inputdata_t&)
 T CFuncTrackTrain::InputToggle(inputdata_t&)
 T CFuncTrackTrain::KeyValue(char const*, char const*)
 T CFuncTrackTrain::MoveDone()
 T CFuncTrackTrain::NearestPath()
 T CFuncTrackTrain::Next()
 T CFuncTrackTrain::OnControls(CBaseEntity*)
 T CFuncTrackTrain::OnRestore()
 T CFuncTrackTrain::Precache()
 T CFuncTrackTrain::SetDirForward(bool)
 T CFuncTrackTrain::SetSpeed(float)
 T CFuncTrackTrain::SoundStop()
 T CFuncTrackTrain::SoundUpdate()
 T CFuncTrackTrain::Spawn()
 T CFuncTrackTrain::TeleportToPathTrack(CPathTrack*)
 T CFuncTrackTrain::UpdateOnRemove()
 T CFuncTrackTrain::UpdateOrientationAtPathTracks(CPathTrack*, CPathTrack*, Vector const&, float)
 T CFuncTrackTrain::UpdateOrientationBlend(TrainOrientationType_t, CPathTrack*, CPathTrack*, Vector const&, float)
 T CFuncTrackTrain::UpdateTrainVelocity(CPathTrack*, CPathTrack*, Vector const&, float)
 T CFuncTrackTrain::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CFuncTrackTrain::YouForgotToImplementOrDeclareServerClass()
 T CFuncTrackTrain::~CFuncTrackTrain()
 T CFuncTrain::Activate()
 T CFuncTrain::Blocked(CBaseEntity*)
 T CFuncTrain::GetDataDescMap()
 T CFuncTrain::InputStart(inputdata_t&)
 T CFuncTrain::InputStop(inputdata_t&)
 T CFuncTrain::InputToggle(inputdata_t&)
 T CFuncTrain::Next()
 T CFuncTrain::OnRestore()
 T CFuncTrain::Precache()
 T CFuncTrain::SetupTarget()
 T CFuncTrain::Spawn()
 T CFuncTrain::Stop()
 T CFuncTrain::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CFuncTrain::Wait()
 T CFuncTrain::~CFuncTrain()
 T CFuncTrainControls::Find()
 T CFuncTrainControls::GetDataDescMap()
 T CFuncTrainControls::Spawn()
 T CFuncTrainControls::~CFuncTrainControls()
 T CFuncVPhysicsClip::Activate()
 T CFuncVPhysicsClip::CreateVPhysics()
 T CFuncVPhysicsClip::ForceVPhysicsCollide(CBaseEntity*)
 T CFuncVPhysicsClip::GetDataDescMap()
 T CFuncVPhysicsClip::InputDisable(inputdata_t&)
 T CFuncVPhysicsClip::InputEnable(inputdata_t&)
 T CFuncVPhysicsClip::Spawn()
 T CFuncVPhysicsClip::~CFuncVPhysicsClip()
 T CFuncVehicleClip::CreateVPhysics()
 T CFuncVehicleClip::GetDataDescMap()
 T CFuncVehicleClip::InputDisable(inputdata_t&)
 T CFuncVehicleClip::InputEnable(inputdata_t&)
 T CFuncVehicleClip::Spawn()
 T CFuncVehicleClip::~CFuncVehicleClip()
 T CFuncWall::CreateVPhysics()
 T CFuncWall::GetDataDescMap()
 T CFuncWall::Spawn()
 T CFuncWall::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CFuncWall::~CFuncWall()
 T CFuncWallToggle::GetDataDescMap()
 T CFuncWallToggle::InputToggle(inputdata_t&)
 T CFuncWallToggle::Spawn()
 T CFuncWallToggle::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CFuncWallToggle::~CFuncWallToggle()
 T CFunc_Dust::Activate()
 T CFunc_Dust::GetDataDescMap()
 T CFunc_Dust::GetServerClass()
 T CFunc_Dust::InputTurnOff(inputdata_t&)
 T CFunc_Dust::InputTurnOn(inputdata_t&)
 T CFunc_Dust::KeyValue(char const*, char const*)
 T CFunc_Dust::Precache()
 T CFunc_Dust::Spawn()
 T CFunc_Dust::YouForgotToImplementOrDeclareServerClass()
 T CFunc_Dust::~CFunc_Dust()
 T CFunc_DustCloud::~CFunc_DustCloud()
 T CFunc_DustMotes::CFunc_DustMotes()
 T CFunc_DustMotes::~CFunc_DustMotes()
 T CFunc_LOD::Activate()
 T CFunc_LOD::CreateVPhysics()
 T CFunc_LOD::GetDataDescMap()
 T CFunc_LOD::GetServerClass()
 T CFunc_LOD::KeyValue(char const*, char const*)
 T CFunc_LOD::Spawn()
 T CFunc_LOD::YouForgotToImplementOrDeclareServerClass()
 T CFunc_LOD::~CFunc_LOD()
 T CFunctor1<void (*)(bool), bool, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >::operator()()
 T CFunctor1<void (*)(bool), bool, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >::~CFunctor1()
 T CFunctor3<void (*)(IPhysicsObject*, Vector const&, Vector const&), IPhysicsObject*, Vector, Vector, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >::operator()()
 T CFunctor3<void (*)(IPhysicsObject*, Vector const&, Vector const&), IPhysicsObject*, Vector, Vector, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >::~CFunctor3()
 T CFunctor4<CBaseEntity* (*)(CBaseEntity*, CBaseEntity*, bool, float), CBaseEntity*, CBaseEntity*, bool, float, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >::operator()()
 T CFunctor4<CBaseEntity* (*)(CBaseEntity*, CBaseEntity*, bool, float), CBaseEntity*, CBaseEntity*, bool, float, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >::~CFunctor4()
 T CFunctorJob::Describe()
 T CFunctorJob::DoExecute()
 T CFunctorJob::~CFunctorJob()
 T CGameDLL_ConVarAccessor::RegisterConCommandBase(ConCommandBase*)
 T CGameEnd::GetDataDescMap()
 T CGameEnd::InputGameEnd(inputdata_t&)
 T CGameEnd::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CGameEnd::~CGameEnd()
 T CGameEventListener::GetEventDebugID()
 T CGameEventListener::~CGameEventListener()
 T CGameGibManager::Activate()
 T CGameGibManager::GetDataDescMap()
 T CGameGibManager::InputSetMaxPieces(inputdata_t&)
 T CGameGibManager::InputSetMaxPiecesDX8(inputdata_t&)
 T CGameGibManager::~CGameGibManager()
 T CGameMovement::Accelerate(Vector&, float, float)
 T CGameMovement::AirAccelerate(Vector&, float, float)
 T CGameMovement::AirMove()
 T CGameMovement::CGameMovement()
 T CGameMovement::CalcRoll(QAngle const&, Vector const&, float, float)
 T CGameMovement::CanAccelerate()
 T CGameMovement::CanBeStuck()
 T CGameMovement::CanPlayerSwim()
 T CGameMovement::CanStayOnGround() const
 T CGameMovement::CanUnDuckJump(CGameTrace&)
 T CGameMovement::CanUnduck()
 T CGameMovement::CategorizeGroundSurface(CGameTrace&)
 T CGameMovement::CategorizePosition(bool)
 T CGameMovement::CheckFalling()
 T CGameMovement::CheckJumpButton()
 T CGameMovement::CheckLungeButton()
 T CGameMovement::CheckParameters()
 T CGameMovement::CheckStuck()
 T CGameMovement::CheckVelocity()
 T CGameMovement::CheckWater()
 T CGameMovement::CheckWaterJump()
 T CGameMovement::ClimbSpeed() const
 T CGameMovement::ClipVelocity(Vector&, Vector&, Vector&, float)
 T CGameMovement::ComputeConstraintSpeedFactor()
 T CGameMovement::DecayPunchAngle()
 T CGameMovement::DiffPrint(char const*, ...)
 T CGameMovement::Duck()
 T CGameMovement::FinishDuck()
 T CGameMovement::FinishGravity()
 T CGameMovement::FinishTrackPredictionErrors(CBasePlayer*)
 T CGameMovement::FinishUnDuck()
 T CGameMovement::FinishUnDuckJump(CGameTrace&)
 T CGameMovement::FixPlayerCrouchStuck(bool)
 T CGameMovement::Friction()
 T CGameMovement::FullCustomMove()
 T CGameMovement::FullLadderMove()
 T CGameMovement::FullNoClipMove(float, float)
 T CGameMovement::FullObserverMove()
 T CGameMovement::FullTossMove()
 T CGameMovement::FullWalkMove()
 T CGameMovement::GameHasLadders() const
 T CGameMovement::GetCheckInterval(CGameMovement::IntervalType_t)
 T CGameMovement::GetMinGroundNormalZ() const
 T CGameMovement::GetMovingPlayer() const
 T CGameMovement::GetPlayerMaxs() const
 T CGameMovement::GetPlayerMaxs(bool) const
 T CGameMovement::GetPlayerMins() const
 T CGameMovement::GetPlayerMins(bool) const
 T CGameMovement::GetPlayerViewOffset(bool) const
 T CGameMovement::GetWaterCheckPosition(int, Vector*)
 T CGameMovement::GetWaterContentsForPointCached(Vector const&, int)
 T CGameMovement::HandleCustomCollision(Vector const&, Vector const&, CGameTrace*)
 T CGameMovement::HandleDuckingSpeedCrop()
 T CGameMovement::IsDead() const
 T CGameMovement::IsMovingPlayerStuck() const
 T CGameMovement::LadderDistance() const
 T CGameMovement::LadderLateralMultiplier() const
 T CGameMovement::LadderMask() const
 T CGameMovement::LadderMove()
 T CGameMovement::LockTraceFilter(int)
 T CGameMovement::OnLadder(CGameTrace&)
 T CGameMovement::OnTryPlayerMoveCollision(CGameTrace&)
 T CGameMovement::PerformFlyCollisionResolution(CGameTrace&, Vector&)
 T CGameMovement::PlaySwimSound()
 T CGameMovement::PlayerMove()
 T CGameMovement::PlayerRoughLandingEffects(float)
 T CGameMovement::PlayerSolidMask(bool, CBasePlayer*) const
 T CGameMovement::ProcessMovement(CBasePlayer*, CMoveData*)
 T CGameMovement::PushEntity(Vector&, CGameTrace*)
 T CGameMovement::ReduceTimers()
 T CGameMovement::Reset()
 T CGameMovement::SetDuckedEyeOffset(float)
 T CGameMovement::SetGroundEntity(CGameTrace*)
 T CGameMovement::SetupMovementBounds(CMoveData*)
 T CGameMovement::StartGravity()
 T CGameMovement::StartTrackPredictionErrors(CBasePlayer*)
 T CGameMovement::StartUnDuckJump()
 T CGameMovement::StayOnGround()
 T CGameMovement::StepMove(Vector&, CGameTrace&)
 T CGameMovement::TestPlayerPosition(Vector const&, int, CGameTrace&)
 T CGameMovement::TracePlayerBBox(Vector const&, Vector const&, unsigned int, int, CGameTrace&)
 T CGameMovement::TryAirPlayerMove()
 T CGameMovement::TryPlayerMove(Vector*, CGameTrace*)
 T CGameMovement::UnlockTraceFilter(ITraceFilter*&)
 T CGameMovement::WalkMove()
 T CGameMovement::WaterMove()
 T CGameMovement::~CGameMovement()
 T CGamePlayerEquip::GetDataDescMap()
 T CGamePlayerEquip::KeyValue(char const*, char const*)
 T CGamePlayerEquip::Touch(CBaseEntity*)
 T CGamePlayerEquip::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CGamePlayerEquip::~CGamePlayerEquip()
 T CGamePlayerTeam::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CGamePlayerTeam::~CGamePlayerTeam()
 T CGamePlayerZone::GetDataDescMap()
 T CGamePlayerZone::InputCountPlayersInZone(inputdata_t&)
 T CGamePlayerZone::~CGamePlayerZone()
 T CGameRules::AIClassText(int)
 T CGameRules::AdjustPlayerDamageInflicted(float)
 T CGameRules::AdjustPlayerDamageTaken(CTakeDamageInfo*)
 T CGameRules::AllowAutoTargetCrosshair()
 T CGameRules::CGameRules()
 T CGameRules::CanEntityBeUsePushed(CBaseEntity*)
 T CGameRules::CanHaveAmmo(CBaseCombatCharacter*, char const*)
 T CGameRules::CanHaveAmmo(CBaseCombatCharacter*, int)
 T CGameRules::CanHavePlayerItem(CBasePlayer*, CBaseCombatWeapon*)
 T CGameRules::ChangePlayerTeam(CBasePlayer*, char const*, bool, bool)
 T CGameRules::CheckChatText(CBasePlayer*, char*)
 T CGameRules::CheckHaptics(CBasePlayer*)
 T CGameRules::ClientCommand(CBaseEntity*, CCommand const&)
 T CGameRules::ClientSettingsChanged(CBasePlayer*)
 T CGameRules::CreateCustomNetworkStringTables()
 T CGameRules::CreateStandardEntities()
 T CGameRules::DefaultFOV()
 T CGameRules::EndGameFrame()
 T CGameRules::EndMultiplayerGame()
 T CGameRules::FPlayerCanTakeDamage(CBasePlayer*, CBaseEntity*)
 T CGameRules::FlHEVChargerRechargeTime()
 T CGameRules::FlPlayerFallDeathDoesScreenFade(CBasePlayer*)
 T CGameRules::ForceSplitScreenPlayersOnToSameTeam()
 T CGameRules::FrameUpdatePostEntityThink()
 T CGameRules::GetAmmoDamage(CBaseEntity*, CBaseEntity*, int)
 T CGameRules::GetAmmoQuantityScale(int)
 T CGameRules::GetAutoAimMode()
 T CGameRules::GetAutoAimScale(CBasePlayer*)
 T CGameRules::GetChatFormat(bool, CBasePlayer*)
 T CGameRules::GetChatLocation(bool, CBasePlayer*)
 T CGameRules::GetChatPrefix(bool, CBasePlayer*)
 T CGameRules::GetDamageCustomString(CTakeDamageInfo const&)
 T CGameRules::GetDamageMultiplier()
 T CGameRules::GetEncryptionKey()
 T CGameRules::GetGameDescription()
 T CGameRules::GetGameType()
 T CGameRules::GetGameTypeName()
 T CGameRules::GetIndexedTeamName(int)
 T CGameRules::GetMaxHumanPlayers() const
 T CGameRules::GetNextBestWeapon(CBaseCombatCharacter*, CBaseCombatWeapon*)
 T CGameRules::GetPlayerSpawnSpot(CBasePlayer*)
 T CGameRules::GetSkillLevel()
 T CGameRules::GetTaggedConVarList(KeyValues*)
 T CGameRules::GetTeamIndex(char const*)
 T CGameRules::GetViewVectors() const
 T CGameRules::InRoundRestart()
 T CGameRules::InitDefaultAIRelationships()
 T CGameRules::IsSkillLevel(int)
 T CGameRules::IsSpawnPointValid(CBaseEntity*, CBasePlayer*)
 T CGameRules::IsTeamplay()
 T CGameRules::IsValidTeam(char const*)
 T CGameRules::LevelShutdown()
 T CGameRules::MarkAchievement(IRecipientFilter&, char const*)
 T CGameRules::Name()
 T CGameRules::OnBeginChangeLevel(char const*, KeyValues*)
 T CGameRules::OnSkillLevelChanged(int)
 T CGameRules::PlayFootstepSounds(CBasePlayer*)
 T CGameRules::PlayTextureSounds()
 T CGameRules::Precache()
 T CGameRules::RadiusDamage(CTakeDamageInfo const&, Vector const&, float, int, CBaseEntity*)
 T CGameRules::RefreshSkillData(bool)
 T CGameRules::ResetMapCycleTimeStamp()
 T CGameRules::SetDefaultPlayerTeam(CBasePlayer*)
 T CGameRules::SetSkillLevel(int)
 T CGameRules::ShouldAutoAim(CBasePlayer*, edict_t*)
 T CGameRules::ShouldBurningPropsEmitLight()
 T CGameRules::ShouldCollide(int, int)
 T CGameRules::ShouldUseRobustRadiusDamage(CBaseEntity*)
 T CGameRules::SwitchToNextBestWeapon(CBaseCombatCharacter*, CBaseCombatWeapon*)
 T CGameRules::Think()
 T CGameRules::UpdateClientData(CBasePlayer*)
 T CGameRules::UpdateGameplayStatsFromSteam()
 T CGameRules::WeaponTraceEntity(CBaseEntity*, Vector const&, Vector const&, unsigned int, CGameTrace*)
 T CGameRules::~CGameRules()
 T CGameRulesProxy::CGameRulesProxy()
 T CGameRulesProxy::GetServerClass()
 T CGameRulesProxy::NotifyNetworkStateChanged()
 T CGameRulesProxy::ObjectCaps()
 T CGameRulesProxy::UpdateTransmitState()
 T CGameRulesProxy::YouForgotToImplementOrDeclareServerClass()
 T CGameRulesProxy::~CGameRulesProxy()
 T CGameRulesRegister::CGameRulesRegister(char const*, void (*)())
 T CGameSaveRestoreInfo::GetEntityIndex(CBaseEntity const*)
 T CGameScore::GetDataDescMap()
 T CGameScore::InputApplyScore(inputdata_t&)
 T CGameScore::KeyValue(char const*, char const*)
 T CGameScore::Spawn()
 T CGameScore::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CGameScore::~CGameScore()
 T CGameString::~CGameString()
 T CGameStringPool::Dump()
 T CGameStringPool::LevelShutdownPostEntity()
 T CGameStringPool::Name()
 T CGameStringPool::~CGameStringPool()
 T CGameText::Display(CBaseEntity*)
 T CGameText::GetDataDescMap()
 T CGameText::InputDisplay(inputdata_t&)
 T CGameText::KeyValue(char const*, char const*)
 T CGameText::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CGameText::~CGameText()
 T CGameTrace::DidHitNonWorldEntity() const
 T CGameTrace::DidHitWorld() const
 T CGameTrace::GetEntityIndex() const
 T CGameUI::Deactivate(CBaseEntity*)
 T CGameUI::GetDataDescMap()
 T CGameUI::InputActivate(inputdata_t&)
 T CGameUI::InputDeactivate(inputdata_t&)
 T CGameUI::Think()
 T CGameUI::~CGameUI()
 T CGameWeaponManager::CGameWeaponManager()
 T CGameWeaponManager::GetDataDescMap()
 T CGameWeaponManager::InputSetAmmoModifier(inputdata_t&)
 T CGameWeaponManager::InputSetMaxPieces(inputdata_t&)
 T CGameWeaponManager::Spawn()
 T CGameWeaponManager::Think()
 T CGameWeaponManager::~CGameWeaponManager()
 T CGasCan::GetDataDescMap()
 T CGasCan::GetDeployActivity()
 T CGasCan::GetPropName() const
 T CGasCan::GetServerClass()
 T CGasCan::GetViewmodelMeleeActivity()
 T CGasCan::GetWeaponID() const
 T CGasCan::TranslateViewmodelActivity(Activity) const
 T CGasCan::WeaponTranslateMainActivity(Activity)
 T CGasCan::YouForgotToImplementOrDeclareServerClass()
 T CGasCan::~CGasCan()
 T CGenericFlexCycler* _CreateEntityTemplate<CGenericFlexCycler>(CGenericFlexCycler*, char const*)
 T CGenericFlexCycler::Spawn()
 T CGenericFlexCycler::~CGenericFlexCycler()
 T CGib::BounceGibTouch(CBaseEntity*)
 T CGib::DieThink()
 T CGib::GetDataDescMap()
 T CGib::HasPhysicsAttacker(float)
 T CGib::InitGib(CBaseEntity*, float, float)
 T CGib::ObjectCaps()
 T CGib::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T CGib::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CGib::SUB_AllowedToFade()
 T CGib::SetBloodColor(int)
 T CGib::Spawn(char const*)
 T CGib::SpawnHeadGib(CBaseEntity*)
 T CGib::SpawnRandomGibs(CBaseEntity*, int, GibType_e)
 T CGib::StickyGibTouch(CBaseEntity*)
 T CGib::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CGib::WaitTillLand()
 T CGib::~CGib()
 T CGibShooter::CreateGib()
 T CGibShooter::GetDataDescMap()
 T CGibShooter::InitPointGib(CGib*, Vector const&, float)
 T CGibShooter::InputShoot(inputdata_t&)
 T CGibShooter::Precache()
 T CGibShooter::ShootThink()
 T CGibShooter::Spawn()
 T CGibShooter::SpawnGib(Vector const&, float)
 T CGibShooter::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CGibShooter::~CGibShooter()
 T CGlobalEntityList::AddListenerEntity(IEntityListener*)
 T CGlobalEntityList::AddPostClientMessageEntity(CBaseEntity*)
 T CGlobalEntityList::AddToDeleteList(IServerNetworkable*)
 T CGlobalEntityList::CleanupDeleteList()
 T CGlobalEntityList::Clear()
 T CGlobalEntityList::FindEntityByClassname(CBaseEntity*, char const*)
 T CGlobalEntityList::FindEntityByClassnameFast(CBaseEntity*, string_t)
 T CGlobalEntityList::FindEntityByClassnameNearest(char const*, Vector const&, float)
 T CGlobalEntityList::FindEntityByClassnameNearestFast(string_t, Vector const&, float)
 T CGlobalEntityList::FindEntityByClassnameWithin(CBaseEntity*, char const*, Vector const&, Vector const&)
 T CGlobalEntityList::FindEntityByClassnameWithin(CBaseEntity*, char const*, Vector const&, float)
 T CGlobalEntityList::FindEntityByModel(CBaseEntity*, char const*)
 T CGlobalEntityList::FindEntityByName(CBaseEntity*, char const*, CBaseEntity*, CBaseEntity*, CBaseEntity*, IEntityFindFilter*)
 T CGlobalEntityList::FindEntityByNameFast(CBaseEntity*, string_t)
 T CGlobalEntityList::FindEntityByOutputTarget(CBaseEntity*, string_t)
 T CGlobalEntityList::FindEntityByTarget(CBaseEntity*, char const*)
 T CGlobalEntityList::FindEntityClassNearestFacing(Vector const&, Vector const&, float, char*)
 T CGlobalEntityList::FindEntityGeneric(CBaseEntity*, char const*, CBaseEntity*, CBaseEntity*, CBaseEntity*)
 T CGlobalEntityList::FindEntityInSphere(CBaseEntity*, Vector const&, float)
 T CGlobalEntityList::FindEntityNearestFacing(Vector const&, Vector const&, float)
 T CGlobalEntityList::FindEntityProcedural(char const*, CBaseEntity*, CBaseEntity*, CBaseEntity*)
 T CGlobalEntityList::IsEntityPtr(void*)
 T CGlobalEntityList::NextEnt(CBaseEntity*)
 T CGlobalEntityList::NotifyCreateEntity(CBaseEntity*)
 T CGlobalEntityList::NotifyRemoveEntity(CBaseEntity*)
 T CGlobalEntityList::NotifySpawn(CBaseEntity*)
 T CGlobalEntityList::NumberOfEntities()
 T CGlobalEntityList::OnAddEntity(IHandleEntity*, CBaseHandle)
 T CGlobalEntityList::OnRemoveEntity(IHandleEntity*, CBaseHandle)
 T CGlobalEntityList::PostClientMessagesSent()
 T CGlobalEntityList::RemoveListenerEntity(IEntityListener*)
 T CGlobalEntityList::ReportEntityFlagsChanged(CBaseEntity*, unsigned int, unsigned int)
 T CGlobalEntityList::ResetDeleteList()
 T CGlobalEntityList::~CGlobalEntityList()
 T CGlobalState::AddEntity(char const*, char const*, GLOBALESTATE)
 T CGlobalState::DumpGlobals()
 T CGlobalState::LevelShutdownPostEntity()
 T CGlobalState::LevelShutdownPreEntity()
 T CGlobalState::~CGlobalState()
 T CGoodTeammateAwardTemplate::CGoodTeammateAwardTemplate(int)
 T CGoodTeammateAwardTemplate::FireGameEvent(IGameEvent*)
 T CGoodTeammateAwardTemplate::OnCreate()
 T CGoodTeammateAwardTemplate::~CGoodTeammateAwardTemplate()
 T CGotchaAwardTemplate::CGotchaAwardTemplate(int)
 T CGotchaAwardTemplate::FireGameEvent(IGameEvent*)
 T CGotchaAwardTemplate::OnCreate()
 T CGotchaAwardTemplate::~CGotchaAwardTemplate()
 T CGrabController::ComputeError()
 T CGrabController::DetachEntity(bool)
 T CGrabController::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)
 T CGrabController::UpdateObject(CBasePlayer*, float)
 T CGreedAwardTemplate::CGreedAwardTemplate(int)
 T CGreedAwardTemplate::FireGameEvent(IGameEvent*)
 T CGreedAwardTemplate::OnCreate()
 T CGreedAwardTemplate::~CGreedAwardTemplate()
 T CGrenadeBlunderAwardTemplate::CGrenadeBlunderAwardTemplate(int)
 T CGrenadeBlunderAwardTemplate::FireGameEvent(IGameEvent*)
 T CGrenadeBlunderAwardTemplate::OnCreate()
 T CGrenadeBlunderAwardTemplate::~CGrenadeBlunderAwardTemplate()
 T CGrenadeExpertAwardTemplate::CGrenadeExpertAwardTemplate(int)
 T CGrenadeExpertAwardTemplate::FireGameEvent(IGameEvent*)
 T CGrenadeExpertAwardTemplate::OnCreate()
 T CGrenadeExpertAwardTemplate::~CGrenadeExpertAwardTemplate()
 T CGrenadierAwardTemplate::CGrenadierAwardTemplate(int)
 T CGrenadierAwardTemplate::FireGameEvent(IGameEvent*)
 T CGrenadierAwardTemplate::OnCreate()
 T CGrenadierAwardTemplate::~CGrenadierAwardTemplate()
 T CGunTarget::Activate()
 T CGunTarget::BloodColor()
 T CGunTarget::BodyTarget(Vector const&, bool)
 T CGunTarget::Classify()
 T CGunTarget::CreateVPhysics()
 T CGunTarget::GetDataDescMap()
 T CGunTarget::InputStart(inputdata_t&)
 T CGunTarget::InputStop(inputdata_t&)
 T CGunTarget::InputToggle(inputdata_t&)
 T CGunTarget::Next()
 T CGunTarget::OnTakeDamage(CTakeDamageInfo const&)
 T CGunTarget::Spawn()
 T CGunTarget::Start()
 T CGunTarget::Wait()
 T CGunTarget::~CGunTarget()
 T CHLTVDirector::AnalyzeCameras()
 T CHLTVDirector::AnalyzePlayers()
 T CHLTVDirector::BuildActivePlayerList()
 T CHLTVDirector::BuildCameraList()
 T CHLTVDirector::CHLTVDirector()
 T CHLTVDirector::CreateShotFromEvent(CGameEvent*)
 T CHLTVDirector::FindBestGameEvent()
 T CHLTVDirector::FinishCameraManShot()
 T CHLTVDirector::FireGameEvent(IGameEvent*)
 T CHLTVDirector::FrameUpdatePostEntityThink()
 T CHLTVDirector::GetDelay()
 T CHLTVDirector::GetDirectorTick()
 T CHLTVDirector::GetFixedCameraEntityName()
 T CHLTVDirector::GetHLTVServer()
 T CHLTVDirector::GetModEvents()
 T CHLTVDirector::GetPVSEntity()
 T CHLTVDirector::GetPVSOrigin()
 T CHLTVDirector::Init()
 T CHLTVDirector::IsActive()
 T CHLTVDirector::LevelInitPostEntity()
 T CHLTVDirector::Name()
 T CHLTVDirector::RemoveEventsFromHistory(int)
 T CHLTVDirector::SetCameraMan(int)
 T CHLTVDirector::SetHLTVServer(IHLTVServer*)
 T CHLTVDirector::Shutdown()
 T CHLTVDirector::StartBestFixedCameraShot(bool)
 T CHLTVDirector::StartBestPlayerCameraShot()
 T CHLTVDirector::StartCameraManShot()
 T CHLTVDirector::StartChaseCameraShot(int, int, int, int, int, bool)
 T CHLTVDirector::StartDelayMessage()
 T CHLTVDirector::StartFixedCameraShot(int, int)
 T CHLTVDirector::StartInstantBroadcastShot()
 T CHLTVDirector::StartNewShot()
 T CHLTVDirector::StartRandomShot()
 T CHLTVDirector::UpdateSettings()
 T CHLTVDirector::~CHLTVDirector()
 T CHandleDummy::~CHandleDummy()
 T CHandleTest::CHandleTest()
 T CHandleTest::GetServerClass()
 T CHandleTest::SetTransmit(CCheckTransmitInfo*, bool)
 T CHandleTest::UpdateTransmitState()
 T CHandleTest::YouForgotToImplementOrDeclareServerClass()
 T CHandleTest::~CHandleTest()
 T CHeadhunterAwardTemplate::CHeadhunterAwardTemplate(int)
 T CHeadhunterAwardTemplate::FireGameEvent(IGameEvent*)
 T CHeadhunterAwardTemplate::OnCreate()
 T CHeadhunterAwardTemplate::~CHeadhunterAwardTemplate()
 T CHelpingHandAwardTemplate::CHelpingHandAwardTemplate(int)
 T CHelpingHandAwardTemplate::FireGameEvent(IGameEvent*)
 T CHelpingHandAwardTemplate::OnCreate()
 T CHelpingHandAwardTemplate::~CHelpingHandAwardTemplate()
 T CHeroAwardTemplate::CHeroAwardTemplate(int)
 T CHeroAwardTemplate::FireGameEvent(IGameEvent*)
 T CHeroAwardTemplate::OnCreate()
 T CHeroAwardTemplate::~CHeroAwardTemplate()
 T CHinderingEscapeAwardTemplate::CHinderingEscapeAwardTemplate(int)
 T CHinderingEscapeAwardTemplate::FireGameEvent(IGameEvent*)
 T CHinderingEscapeAwardTemplate::OnCreate()
 T CHinderingEscapeAwardTemplate::~CHinderingEscapeAwardTemplate()
 T CHintMessage::CHintMessage(char const*, CUtlVector<char const*, CUtlMemory<char const*, int> >*, float)
 T CHintMessage::Send(CBasePlayer*)
 T CHintMessageQueue::AddMessage(char const*, float, CUtlVector<char const*, CUtlMemory<char const*, int> >*)
 T CHintMessageQueue::CHintMessageQueue(CBasePlayer*)
 T CHintMessageQueue::Reset()
 T CHintMessageQueue::Update()
 T CHintMessageTimers::AddTimer(int, float, float, CUtlVector<char const*, CUtlMemory<char const*, int> >*)
 T CHintMessageTimers::Reset()
 T CHintMessageTimers::Update()
 T CHintSystem::HintMessage(int, bool, bool)
 T CHintSystem::ResetHintTimers()
 T CHintSystem::ResetHints()
 T CHintSystem::TimerShouldFire(int)
 T CHintSystem::Update()
 T CHitAndRunAwardTemplate::CHitAndRunAwardTemplate(int)
 T CHitAndRunAwardTemplate::FireGameEvent(IGameEvent*)
 T CHitAndRunAwardTemplate::OnConditionsMet(AwardType, CBaseEntity*)
 T CHitAndRunAwardTemplate::OnCreate()
 T CHitAndRunAwardTemplate::~CHitAndRunAwardTemplate()
 T CHitEverybodyAwardTemplate::CHitEverybodyAwardTemplate(int)
 T CHitEverybodyAwardTemplate::FireGameEvent(IGameEvent*)
 T CHitEverybodyAwardTemplate::OnCreate()
 T CHitEverybodyAwardTemplate::~CHitEverybodyAwardTemplate()
 T CHulkPhysicsAwardTemplate::CHulkPhysicsAwardTemplate(int)
 T CHulkPhysicsAwardTemplate::FireGameEvent(IGameEvent*)
 T CHulkPhysicsAwardTemplate::OnCreate()
 T CHulkPhysicsAwardTemplate::~CHulkPhysicsAwardTemplate()
 T CHulkPunchAwardTemplate::CHulkPunchAwardTemplate(int)
 T CHulkPunchAwardTemplate::FireGameEvent(IGameEvent*)
 T CHulkPunchAwardTemplate::OnCreate()
 T CHulkPunchAwardTemplate::~CHulkPunchAwardTemplate()
 T CHulkRockAwardTemplate::CHulkRockAwardTemplate(int)
 T CHulkRockAwardTemplate::FireGameEvent(IGameEvent*)
 T CHulkRockAwardTemplate::OnCreate()
 T CHulkRockAwardTemplate::~CHulkRockAwardTemplate()
 T CHulkShutOutAwardTemplate::CHulkShutOutAwardTemplate(int)
 T CHulkShutOutAwardTemplate::FireGameEvent(IGameEvent*)
 T CHulkShutOutAwardTemplate::OnCreate()
 T CHulkShutOutAwardTemplate::~CHulkShutOutAwardTemplate()
 T CHulkSlayerAwardTemplate::CHulkSlayerAwardTemplate(int)
 T CHulkSlayerAwardTemplate::FireGameEvent(IGameEvent*)
 T CHulkSlayerAwardTemplate::OnCreate()
 T CHulkSlayerAwardTemplate::~CHulkSlayerAwardTemplate()
 T CHunterClaw::GetDataDescMap()
 T CHunterClaw::GetServerClass()
 T CHunterClaw::GetWeaponID() const
 T CHunterClaw::HasSecondaryAttack()
 T CHunterClaw::OnLungedPlayer()
 T CHunterClaw::OnOwnerTakeDamage(CTakeDamageInfo const&)
 T CHunterClaw::OnStunned(float)
 T CHunterClaw::PrimaryAttack()
 T CHunterClaw::SecondaryAttack()
 T CHunterClaw::Spawn()
 T CHunterClaw::TrySwing(float, float, float)
 T CHunterClaw::WeaponIdle()
 T CHunterClaw::YouForgotToImplementOrDeclareServerClass()
 T CHunterClaw::~CHunterClaw()
 T CHurdleAwardTemplate::CHurdleAwardTemplate(int)
 T CHurdleAwardTemplate::FireGameEvent(IGameEvent*)
 T CHurdleAwardTemplate::OnCreate()
 T CHurdleAwardTemplate::~CHurdleAwardTemplate()
 T CIKContext::AddAutoplayLocks(Vector*, Quaternion*)
 T CIKContext::AddDependencies(mstudioseqdesc_t&, int, float, float const*, float)
 T CIKContext::AddSequenceLocks(mstudioseqdesc_t&, Vector*, Quaternion*)
 T CIKContext::AutoIKRelease()
 T CIKContext::CIKContext()
 T CIKContext::ClearTargets()
 T CIKContext::Init(CStudioHdr const*, QAngle const&, Vector const&, float, int, int)
 T CIKContext::SolveAutoplayLocks(Vector*, Quaternion*)
 T CIKContext::SolveDependencies(Vector*, Quaternion*, matrix3x4_t*, CBoneBitList&)
 T CIKContext::SolveLock(mstudioiklock_t const*, int, Vector*, Quaternion*, matrix3x4_t*, CBoneBitList&)
 T CIKContext::SolveSequenceLocks(mstudioseqdesc_t&, Vector*, Quaternion*)
 T CIKContext::UpdateTargets(Vector*, Quaternion*, matrix3x4_t*, CBoneBitList&)
 T CIKSaveRestoreOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CIKSaveRestoreOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CIKSolver::solve(float, float, float const*, float const*, float*)
 T CIKTarget::IsActive()
 T CIKTarget::SetAngles(QAngle const&)
 T CIKTarget::SetNormal(Vector const&)
 T CIKTarget::SetPos(Vector const&)
 T CIKTarget::SetPosWithNormalOffset(Vector const&, Vector const&)
 T CInfectedAnimationLayer::NetworkStateChanged()
 T CInfectedAnimationLayer::NetworkStateChanged(void*)
 T CInfectedAnimationLayer::Update(CBaseAnimating*, CAnimationLayer*, int)
 T CInfectedZooMaker::CInfectedZooMaker()
 T CInfectedZooMaker::GetDataDescMap()
 T CInfectedZooMaker::Input_SpawnAll(inputdata_t&)
 T CInfectedZooMaker::PerformSpawn()
 T CInfectedZooMaker::PerformSpawnModel(char const*, int, int&)
 T CInfectedZooMaker::Precache()
 T CInfectedZooMaker::Spawn()
 T CInfectedZooMaker::~CInfectedZooMaker()
 T CInfectedZooPuppet::Event_Killed(CTakeDamageInfo const&)
 T CInfectedZooPuppet::HandleAnimEvent(animevent_t*)
 T CInfectedZooPuppet::Ignite(float, CBaseEntity*)
 T CInfectedZooPuppet::Ignite(float, bool, float, bool)
 T CInfectedZooPuppet::OnNavAreaChanged(CNavArea*, CNavArea*)
 T CInfectedZooPuppet::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CInfectedZooPuppet::OnTakeDamage_Dying(CTakeDamageInfo const&)
 T CInfectedZooPuppet::Spawn()
 T CInfectedZooPuppet::Touch(CBaseEntity*)
 T CInfectedZooPuppet::Update()
 T CInfectedZooPuppet::~CInfectedZooPuppet()
 T CInferno::CanHarm(CBaseEntity*) const
 T CInferno::CreateFire(Vector const&, Vector const&, CInferno::FireInfo*, int)
 T CInferno::GetDataDescMap()
 T CInferno::GetServerClass()
 T CInferno::InfernoThink()
 T CInferno::IsTouching(CBaseEntity*, float, bool) const
 T CInferno::IsTouching(Vector const&, Vector const&, Vector*) const
 T CInferno::IsTouchingTrigger(CBaseEntity*)
 T CInferno::Precache()
 T CInferno::SetMaxFires(int)
 T CInferno::Spawn()
 T CInferno::Spread(Vector const&)
 T CInferno::StartBurning(Vector const&, Vector const&, Vector const&)
 T CInferno::UpdateTransmitState()
 T CInferno::YouForgotToImplementOrDeclareServerClass()
 T CInferno::~CInferno()
 T CInfoDirector::GetDataDescMap()
 T CInfoDirector::InputDisableTankFrustration(inputdata_t&)
 T CInfoDirector::InputEnableTankFrustration(inputdata_t&)
 T CInfoDirector::InputFinishIntro(inputdata_t&)
 T CInfoDirector::InputFireConceptToAny(inputdata_t&)
 T CInfoDirector::InputForceSurvivorPositions(inputdata_t&)
 T CInfoDirector::InputPanicEvent(inputdata_t&)
 T CInfoDirector::InputPanicEventControlled(inputdata_t&)
 T CInfoDirector::InputReleaseSurvivorPositions(inputdata_t&)
 T CInfoDirector::InputStartIntro(inputdata_t&)
 T CInfoDirector::~CInfoDirector()
 T CInfoElevatorFloor::GetDataDescMap()
 T CInfoElevatorFloor::~CInfoElevatorFloor()
 T CInfoGameEventProxy::GameEventProxyCallback(CBaseEntity*, CBasePlayer*)
 T CInfoGameEventProxy::GetDataDescMap()
 T CInfoGameEventProxy::InputGenerateGameEvent(inputdata_t&)
 T CInfoGameEventProxy::Spawn()
 T CInfoGameEventProxy::UpdateTransmitState()
 T CInfoGameEventProxy::~CInfoGameEventProxy()
 T CInfoGameMode::Activate()
 T CInfoGameMode::GetDataDescMap()
 T CInfoGameMode::ObjectCaps()
 T CInfoGameMode::~CInfoGameMode()
 T CInfoGoalInfectedChase::AttractInfectedThink()
 T CInfoGoalInfectedChase::GetDataDescMap()
 T CInfoGoalInfectedChase::InputDisable(inputdata_t&)
 T CInfoGoalInfectedChase::InputEnable(inputdata_t&)
 T CInfoGoalInfectedChase::Precache()
 T CInfoGoalInfectedChase::Spawn()
 T CInfoGoalInfectedChase::~CInfoGoalInfectedChase()
 T CInfoIntermission::Spawn()
 T CInfoIntermission::Think()
 T CInfoIntermission::~CInfoIntermission()
 T CInfoLadderDismount::DrawDebugGeometryOverlays()
 T CInfoLadderDismount::GetServerClass()
 T CInfoLadderDismount::YouForgotToImplementOrDeclareServerClass()
 T CInfoLadderDismount::~CInfoLadderDismount()
 T CInfoMassCenter::Spawn()
 T CInfoMassCenter::~CInfoMassCenter()
 T CInfoOverlayAccessor::GetDataDescMap()
 T CInfoOverlayAccessor::GetServerClass()
 T CInfoOverlayAccessor::UpdateTransmitState()
 T CInfoOverlayAccessor::YouForgotToImplementOrDeclareServerClass()
 T CInfoOverlayAccessor::~CInfoOverlayAccessor()
 T CInfoRemarkable::GetDataDescMap()
 T CInfoRemarkable::GetListOfAllThatIsRemarkable()
 T CInfoRemarkable::Spawn()
 T CInfoRemarkable::~CInfoRemarkable()
 T CInfoTarget::Spawn()
 T CInfoTarget::~CInfoTarget()
 T CInfoViewParameters::GetDataDescMap()
 T CInfoViewParameters::~CInfoViewParameters()
 T CInfoZombieSpawn::GetDataDescMap()
 T CInfoZombieSpawn::Precache()
 T CInfoZombieSpawn::Spawn()
 T CInfoZombieSpawn::SpawnZombie(inputdata_t&)
 T CInfoZombieSpawn::~CInfoZombieSpawn()
 T CInstancedResponseSystem::CInstancedResponseSystem(char const*)
 T CInstancedResponseSystem::GetScriptFile()
 T CInstancedResponseSystem::Init()
 T CInstancedResponseSystem::LevelInitPostEntity()
 T CInstancedResponseSystem::Release()
 T CInstancedResponseSystem::~CInstancedResponseSystem()
 T CInstancedSceneEntity::DispatchEndFace(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CInstancedSceneEntity::DispatchEndMoveTo(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CInstancedSceneEntity::DispatchEndSequence(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CInstancedSceneEntity::DispatchPauseScene(CChoreoScene*, char const*)
 T CInstancedSceneEntity::DispatchStartFace(CChoreoScene*, CBaseFlex*, CBaseEntity*, CChoreoEvent*)
 T CInstancedSceneEntity::DispatchStartMoveTo(CChoreoScene*, CBaseFlex*, CBaseEntity*, CChoreoEvent*)
 T CInstancedSceneEntity::DispatchStartSequence(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CInstancedSceneEntity::DoThink(float)
 T CInstancedSceneEntity::EstimateLength()
 T CInstancedSceneEntity::FindNamedActor(char const*)
 T CInstancedSceneEntity::FindNamedEntity(char const*)
 T CInstancedSceneEntity::GetDataDescMap()
 T CInstancedSceneEntity::GetPostSpeakDelay()
 T CInstancedSceneEntity::GetPreDelay()
 T CInstancedSceneEntity::OnLoaded()
 T CInstancedSceneEntity::OnRestore()
 T CInstancedSceneEntity::SetPostSpeakDelay(float)
 T CInstancedSceneEntity::SetPreDelay(float)
 T CInstancedSceneEntity::StartPlayback()
 T CInstancedSceneEntity::~CInstancedSceneEntity()
 T CItSurvivorAwardTemplate::CItSurvivorAwardTemplate(int)
 T CItSurvivorAwardTemplate::FireGameEvent(IGameEvent*)
 T CItSurvivorAwardTemplate::OnCreate()
 T CItSurvivorAwardTemplate::~CItSurvivorAwardTemplate()
 T CItem::CItem()
 T CItem::ComeToRest()
 T CItem::CreateItemVPhysicsObject()
 T CItem::GetDataDescMap()
 T CItem::HasBloatedCollision() const
 T CItem::ItemTouch(CBaseEntity*)
 T CItem::Materialize()
 T CItem::MyTouch(CBasePlayer*)
 T CItem::ObjectCaps()
 T CItem::OnEntityEvent(EntityEvent_t, void*)
 T CItem::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T CItem::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CItem::Precache()
 T CItem::Respawn()
 T CItem::Spawn()
 T CItem::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CItem::~CItem()
 T CItemSoda::CanThink()
 T CItemSoda::CanTouch(CBaseEntity*)
 T CItemSoda::GetDataDescMap()
 T CItemSoda::Precache()
 T CItemSoda::Spawn()
 T CItemSoda::~CItemSoda()
 T CJob::Abort(bool)
 T CJob::Describe()
 T CJob::DoAbort(bool)
 T CJob::DoCleanup()
 T CJob::~CJob()
 T CKeepUpright::Activate()
 T CKeepUpright::GetDataDescMap()
 T CKeepUpright::InputSetAngularLimit(inputdata_t&)
 T CKeepUpright::InputTurnOff(inputdata_t&)
 T CKeepUpright::InputTurnOn(inputdata_t&)
 T CKeepUpright::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)
 T CKeepUpright::Spawn()
 T CKeepUpright::~CKeepUpright()
 T CKeyValuesErrorStack::ReportError(char const*)
 T CKickIssue::CanCallVote(int, char const*, char*)
 T CKickIssue::ExecuteCommand()
 T CKickIssue::GetDetailsString()
 T CKickIssue::GetDisplayString()
 T CKickIssue::GetVotePassedString()
 T CKickIssue::IsAllyRestrictedVote()
 T CKickIssue::ListIssueDetails(CBasePlayer*)
 T CKickIssue::OnVoteStarted()
 T CKickIssue::~CKickIssue()
 T CKnockdownAwardTemplate::CKnockdownAwardTemplate(int)
 T CKnockdownAwardTemplate::FireGameEvent(IGameEvent*)
 T CKnockdownAwardTemplate::OnCreate()
 T CKnockdownAwardTemplate::~CKnockdownAwardTemplate()
 T CL4DGameStats::AddAchievementStats(KeyValues*)
 T CL4DGameStats::AddChokePounceStats(KeyValues*)
 T CL4DGameStats::AddDataForSend(KeyValues*, StatSendType_t)
 T CL4DGameStats::AddDeathStats(KeyValues*)
 T CL4DGameStats::AddMapStats(KeyValues*)
 T CL4DGameStats::AddSurvivorStats(KeyValues*)
 T CL4DGameStats::AddWeaponStats(KeyValues*)
 T CL4DGameStats::AddZombieStats(KeyValues*)
 T CL4DGameStats::CL4DGameStats()
 T CL4DGameStats::Clear()
 T CL4DGameStats::Event_ActorKilled(CBaseCombatCharacter*, CTakeDamageInfo const&)
 T CL4DGameStats::Event_CarAlarm()
 T CL4DGameStats::Event_ConvertedPills()
 T CL4DGameStats::Event_DirectorRelaxed()
 T CL4DGameStats::Event_LevelInit()
 T CL4DGameStats::Event_LevelShutdown(float)
 T CL4DGameStats::Event_MobSpawned()
 T CL4DGameStats::Event_PanicEventOver()
 T CL4DGameStats::Event_SpawnZombie(ZombieClassType, int)
 T CL4DGameStats::FindOrCreateStatReport(CTerrorPlayer*)
 T CL4DGameStats::FireGameEvent(IGameEvent*)
 T CL4DGameStats::GatherPlayerZombieDamages()
 T CL4DGameStats::GetAliveSurvivorCount()
 T CL4DGameStats::Init()
 T CL4DGameStats::SendClientWeaponStats(CTerrorPlayer*)
 T CL4DGameStats::SetStarRating(int)
 T CL4DGameStats::UseOldFormat()
 T CL4DGameStats::~CL4DGameStats()
 T CLadderTroubleReport::AddLadder(CNavLadder*)
 T CLagCompensationManager::BacktrackPlayer(CBaseAnimatingOverlay*, float, CUtlFixedLinkedList<LagRecord>*, LagRecord*, LagRecord*, bool)
 T CLagCompensationManager::FinishLagCompensation(CBasePlayer*)
 T CLagCompensationManager::FrameUpdatePostEntityThink()
 T CLagCompensationManager::LevelShutdownPostEntity()
 T CLagCompensationManager::RecordDataIntoTrack(CBaseAnimatingOverlay*, CUtlFixedLinkedList<LagRecord>*, bool)
 T CLagCompensationManager::RestoreEntityFromRecords(CBaseAnimatingOverlay*, LagRecord*, LagRecord*, bool)
 T CLagCompensationManager::Shutdown()
 T CLagCompensationManager::StartLagCompensation(CBasePlayer*, LagCompensationType, Vector const&, QAngle const&, float)
 T CLagCompensationManager::~CLagCompensationManager()
 T CLeft4DeadAwardTemplate::CLeft4DeadAwardTemplate(int)
 T CLeft4DeadAwardTemplate::FireGameEvent(IGameEvent*)
 T CLeft4DeadAwardTemplate::OnCreate()
 T CLeft4DeadAwardTemplate::~CLeft4DeadAwardTemplate()
 T CLeftBehindAwardTemplate::CLeftBehindAwardTemplate(int)
 T CLeftBehindAwardTemplate::FireGameEvent(IGameEvent*)
 T CLeftBehindAwardTemplate::OnCreate()
 T CLeftBehindAwardTemplate::~CLeftBehindAwardTemplate()
 T CLight::FadeThink()
 T CLight::GetDataDescMap()
 T CLight::InputFadeToPattern(inputdata_t&)
 T CLight::InputSetPattern(inputdata_t&)
 T CLight::InputToggle(inputdata_t&)
 T CLight::InputTurnOff(inputdata_t&)
 T CLight::InputTurnOn(inputdata_t&)
 T CLight::KeyValue(char const*, char const*)
 T CLight::Spawn()
 T CLight::TurnOff()
 T CLight::TurnOn()
 T CLight::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CLight::~CLight()
 T CLightGlow::Activate()
 T CLightGlow::CLightGlow()
 T CLightGlow::GetDataDescMap()
 T CLightGlow::GetServerClass()
 T CLightGlow::InputColor(inputdata_t&)
 T CLightGlow::Spawn()
 T CLightGlow::UpdateTransmitState()
 T CLightGlow::YouForgotToImplementOrDeclareServerClass()
 T CLightGlow::~CLightGlow()
 T CLogicActiveAutosave::GetDataDescMap()
 T CLogicActiveAutosave::InputDisable(inputdata_t&)
 T CLogicActiveAutosave::InputEnable(inputdata_t&)
 T CLogicActiveAutosave::SaveThink()
 T CLogicActiveAutosave::~CLogicActiveAutosave()
 T CLogicAuto::Activate()
 T CLogicAuto::GetDataDescMap()
 T CLogicAuto::ObjectCaps()
 T CLogicAuto::Think()
 T CLogicAuto::~CLogicAuto()
 T CLogicAutosave::GetDataDescMap()
 T CLogicAutosave::InputSave(inputdata_t&)
 T CLogicAutosave::InputSaveDangerous(inputdata_t&)
 T CLogicAutosave::InputSetMinHitpointsThreshold(inputdata_t&)
 T CLogicAutosave::~CLogicAutosave()
 T CLogicBranch::AddLogicBranchListener(CBaseEntity*)
 T CLogicBranch::DrawDebugTextOverlays()
 T CLogicBranch::GetDataDescMap()
 T CLogicBranch::InputSetValue(inputdata_t&)
 T CLogicBranch::InputSetValueTest(inputdata_t&)
 T CLogicBranch::InputTest(inputdata_t&)
 T CLogicBranch::InputToggle(inputdata_t&)
 T CLogicBranch::InputToggleTest(inputdata_t&)
 T CLogicBranch::UpdateOnRemove()
 T CLogicBranch::UpdateValue(bool, CBaseEntity*, CLogicBranch::LogicBranchFire_t)
 T CLogicBranch::~CLogicBranch()
 T CLogicBranchList::Activate()
 T CLogicBranchList::DoTest(CBaseEntity*)
 T CLogicBranchList::DrawDebugTextOverlays()
 T CLogicBranchList::GetDataDescMap()
 T CLogicBranchList::InputTest(inputdata_t&)
 T CLogicBranchList::Input_OnLogicBranchChanged(inputdata_t&)
 T CLogicBranchList::Input_OnLogicBranchRemoved(inputdata_t&)
 T CLogicBranchList::Spawn()
 T CLogicBranchList::~CLogicBranchList()
 T CLogicCase::GetDataDescMap()
 T CLogicCase::InputPickRandom(inputdata_t&)
 T CLogicCase::InputPickRandomShuffle(inputdata_t&)
 T CLogicCase::InputValue(inputdata_t&)
 T CLogicCase::Spawn()
 T CLogicCase::~CLogicCase()
 T CLogicCollisionPair::Activate()
 T CLogicCollisionPair::EnableCollisions(bool)
 T CLogicCollisionPair::GetDataDescMap()
 T CLogicCollisionPair::InputDisableCollisions(inputdata_t&)
 T CLogicCollisionPair::InputEnableCollisions(inputdata_t&)
 T CLogicCollisionPair::~CLogicCollisionPair()
 T CLogicCompare::DoCompare(CBaseEntity*, float)
 T CLogicCompare::DrawDebugTextOverlays()
 T CLogicCompare::GetDataDescMap()
 T CLogicCompare::InputCompare(inputdata_t&)
 T CLogicCompare::InputSetCompareValue(inputdata_t&)
 T CLogicCompare::InputSetValue(inputdata_t&)
 T CLogicCompare::InputSetValueCompare(inputdata_t&)
 T CLogicCompare::~CLogicCompare()
 T CLogicCompareInteger::GetDataDescMap()
 T CLogicCompareInteger::InputCompareValues(inputdata_t&)
 T CLogicCompareInteger::InputValue(inputdata_t&)
 T CLogicCompareInteger::~CLogicCompareInteger()
 T CLogicLineToEntity::Activate()
 T CLogicLineToEntity::GetDataDescMap()
 T CLogicLineToEntity::Spawn()
 T CLogicLineToEntity::Think()
 T CLogicLineToEntity::~CLogicLineToEntity()
 T CLogicMeasureMovement::Activate()
 T CLogicMeasureMovement::GetDataDescMap()
 T CLogicMeasureMovement::InputDisable(inputdata_t&)
 T CLogicMeasureMovement::InputEnable(inputdata_t&)
 T CLogicMeasureMovement::InputSetMeasureReference(inputdata_t&)
 T CLogicMeasureMovement::InputSetMeasureTarget(inputdata_t&)
 T CLogicMeasureMovement::InputSetTarget(inputdata_t&)
 T CLogicMeasureMovement::InputSetTargetReference(inputdata_t&)
 T CLogicMeasureMovement::InputSetTargetScale(inputdata_t&)
 T CLogicMeasureMovement::MeasureThink()
 T CLogicMeasureMovement::SetMeasureTarget(char const*)
 T CLogicMeasureMovement::~CLogicMeasureMovement()
 T CLogicNavigation::Activate()
 T CLogicNavigation::GetDataDescMap()
 T CLogicNavigation::InputToggle(inputdata_t&)
 T CLogicNavigation::InputTurnOff(inputdata_t&)
 T CLogicNavigation::InputTurnOn(inputdata_t&)
 T CLogicNavigation::KeyValue(char const*, char const*)
 T CLogicNavigation::OnEntitySpawned(CBaseEntity*)
 T CLogicNavigation::UpdateOnRemove()
 T CLogicNavigation::UpdateProperty()
 T CLogicNavigation::~CLogicNavigation()
 T CLogicRelay::Activate()
 T CLogicRelay::GetDataDescMap()
 T CLogicRelay::InputCancelPending(inputdata_t&)
 T CLogicRelay::InputDisable(inputdata_t&)
 T CLogicRelay::InputEnable(inputdata_t&)
 T CLogicRelay::InputEnableRefire(inputdata_t&)
 T CLogicRelay::InputToggle(inputdata_t&)
 T CLogicRelay::InputTrigger(inputdata_t&)
 T CLogicRelay::Think()
 T CLogicRelay::~CLogicRelay()
 T CLogicalEntity::KeyValue(char const*, char const*)
 T CLunge::ActivateAbility()
 T CLunge::GetButton() const
 T CLunge::GetDataDescMap()
 T CLunge::GetJumpVector(bool)
 T CLunge::GetServerClass()
 T CLunge::HandleCustomCollision(CBaseEntity*, Vector const&, Vector const&, CGameTrace*, CMoveData*)
 T CLunge::HasAbilityTarget() const
 T CLunge::IsAbilityReadyToFire() const
 T CLunge::IsActive() const
 T CLunge::IsPredicted() const
 T CLunge::NetworkVar_m_lungeAgainTimer::NetworkStateChanged()
 T CLunge::NetworkVar_m_lungeAgainTimer::NetworkStateChanged(void*)
 T CLunge::OnCreate(CTerrorPlayer*)
 T CLunge::OnCrouchStart()
 T CLunge::OnCrouched()
 T CLunge::OnOwnerTakeDamage(CTakeDamageInfo const&)
 T CLunge::OnStunned(float)
 T CLunge::OnTouch(CBaseEntity*)
 T CLunge::UpdateAbility()
 T CLunge::YouForgotToImplementOrDeclareServerClass()
 T CLunge::~CLunge()
 T CMD_ForcePanicEvent(CCommand const&)
 T CMD_ForceVersusStart(CCommand const&)
 T CMD_versus_boss_flow_test(CCommand const&)
 T CMVPAwardTemplate::CMVPAwardTemplate(int)
 T CMVPAwardTemplate::FireGameEvent(IGameEvent*)
 T CMVPAwardTemplate::OnCreate()
 T CMVPAwardTemplate::~CMVPAwardTemplate()
 T CMapEntitySpawner::AddEntity(CBaseEntity*, char const*, int)
 T CMapEntitySpawner::CMapEntitySpawner()
 T CMapEntitySpawner::HandleTemplates()
 T CMapEntitySpawner::SpawnAndActivate(bool)
 T CMapEntitySpawner::~CMapEntitySpawner()
 T CMapInfo::CMapInfo(bool)
 T CMapInfo::GetDataDescMap()
 T CMapInfo::GetFinaleItemClusterCount() const
 T CMapInfo::GetMolotovDensity() const
 T CMapInfo::GetPainPillDensity() const
 T CMapInfo::GetPipeBombDensity() const
 T CMapInfo::GetScavengeItemDensity(ScavengeItemType) const
 T CMapInfo::GetWeaponDensity() const
 T CMapInfo::InputUpdateCvars(inputdata_t&)
 T CMapInfo::KeyValue(char const*, char const*)
 T CMapInfo::Spawn()
 T CMapInfo::~CMapInfo()
 T CMapInfoVersus::CMapInfoVersus()
 T CMapInfoVersus::IsVersusInfo() const
 T CMapInfoVersus::~CMapInfoVersus()
 T CMapLoadEntityFilter::CreateNextEntity(char const*)
 T CMapLoadEntityFilter::ShouldCreateEntity(char const*)
 T CMaterialModifyControl::CMaterialModifyControl()
 T CMaterialModifyControl::GetDataDescMap()
 T CMaterialModifyControl::GetServerClass()
 T CMaterialModifyControl::InputStartAnimSequence(inputdata_t&)
 T CMaterialModifyControl::InputStartFloatLerp(inputdata_t&)
 T CMaterialModifyControl::KeyValue(char const*, char const*)
 T CMaterialModifyControl::ObjectCaps()
 T CMaterialModifyControl::SetMaterialVar(inputdata_t&)
 T CMaterialModifyControl::SetMaterialVarToCurrentTime(inputdata_t&)
 T CMaterialModifyControl::ShouldTransmit(CCheckTransmitInfo const*)
 T CMaterialModifyControl::Spawn()
 T CMaterialModifyControl::UpdateTransmitState()
 T CMaterialModifyControl::YouForgotToImplementOrDeclareServerClass()
 T CMaterialModifyControl::~CMaterialModifyControl()
 T CMaterialReference::CMaterialReference(char const*, char const*, bool)
 T CMaterialReference::Init(char const*, char const*, bool)
 T CMaterialReference::~CMaterialReference()
 T CMathColorBlend::GetDataDescMap()
 T CMathColorBlend::InputValue(inputdata_t&)
 T CMathColorBlend::Spawn()
 T CMathColorBlend::~CMathColorBlend()
 T CMathCounter::DrawDebugTextOverlays()
 T CMathCounter::GetDataDescMap()
 T CMathCounter::InputAdd(inputdata_t&)
 T CMathCounter::InputDisable(inputdata_t&)
 T CMathCounter::InputDivide(inputdata_t&)
 T CMathCounter::InputEnable(inputdata_t&)
 T CMathCounter::InputGetValue(inputdata_t&)
 T CMathCounter::InputMultiply(inputdata_t&)
 T CMathCounter::InputSetHitMax(inputdata_t&)
 T CMathCounter::InputSetHitMin(inputdata_t&)
 T CMathCounter::InputSetValue(inputdata_t&)
 T CMathCounter::InputSetValueNoFire(inputdata_t&)
 T CMathCounter::InputSubtract(inputdata_t&)
 T CMathCounter::KeyValue(char const*, char const*)
 T CMathCounter::Spawn()
 T CMathCounter::UpdateOutValue(CBaseEntity*, float)
 T CMathCounter::~CMathCounter()
 T CMathRemap::GetDataDescMap()
 T CMathRemap::InputDisable(inputdata_t&)
 T CMathRemap::InputEnable(inputdata_t&)
 T CMathRemap::InputValue(inputdata_t&)
 T CMathRemap::Spawn()
 T CMathRemap::~CMathRemap()
 T CMemberFunctor0<CParallelProcessor<QueryCacheUpdateRecord_t, CFuncJobItemProcessor<QueryCacheUpdateRecord_t>, 1>*, void (CParallelProcessor<QueryCacheUpdateRecord_t, CFuncJobItemProcessor<QueryCacheUpdateRecord_t>, 1>::*)(), CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>::operator()()
 T CMemberFunctor0<CParallelProcessor<QueryCacheUpdateRecord_t, CFuncJobItemProcessor<QueryCacheUpdateRecord_t>, 1>*, void (CParallelProcessor<QueryCacheUpdateRecord_t, CFuncJobItemProcessor<QueryCacheUpdateRecord_t>, 1>::*)(), CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>::~CMemberFunctor0()
 T CMemberFunctor3<CBreakableProp*, void (CBreakableProp::*)(Vector const&, Vector const&, QAngle const&), Vector, Vector, QAngle, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>::operator()()
 T CMemberFunctor3<CBreakableProp*, void (CBreakableProp::*)(Vector const&, Vector const&, QAngle const&), Vector, Vector, QAngle, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>::~CMemberFunctor3()
 T CMemoryStack::CMemoryStack()
 T CMemoryStack::CommitTo(unsigned char*)
 T CMemoryStack::FreeAll(bool)
 T CMemoryStack::Init(unsigned int, unsigned int, unsigned int, unsigned int)
 T CMemoryStack::~CMemoryStack()
 T CMessage::GetDataDescMap()
 T CMessage::InputShowMessage(inputdata_t&)
 T CMessage::Precache()
 T CMessage::Spawn()
 T CMessage::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CMessage::~CMessage()
 T CMessageEntity::Activate()
 T CMessageEntity::GetDataDescMap()
 T CMessageEntity::InputDisable(inputdata_t&)
 T CMessageEntity::InputEnable(inputdata_t&)
 T CMessageEntity::Spawn()
 T CMessageEntity::Think()
 T CMessageEntity::UpdateOnRemove()
 T CMessageEntity::~CMessageEntity()
 T CModelSoundsCache::BuildAnimationEventSoundList(CStudioHdr*, CUtlVector<unsigned short, CUtlMemory<unsigned short, int> >&)
 T CModelSoundsCache::CModelSoundsCache()
 T CModelSoundsCache::FindOrAddScriptSound(CUtlVector<unsigned short, CUtlMemory<unsigned short, int> >&, char const*)
 T CModelSoundsCache::PrecacheSoundList()
 T CModelSoundsCache::Rebuild(char const*)
 T CModelSoundsCache::Restore(CUtlBuffer&)
 T CModelSoundsCache::Save(CUtlBuffer&)
 T CModelSoundsCacheSaver::LevelInitPostEntity()
 T CModelSoundsCacheSaver::LevelShutdownPostEntity()
 T CModelSoundsCacheSaver::~CModelSoundsCacheSaver()
 T CMolotov::CanFidget()
 T CMolotov::Deploy()
 T CMolotov::EmitGrenade(Vector, QAngle, Vector, Vector, CBasePlayer*)
 T CMolotov::GetDataDescMap()
 T CMolotov::GetDeployActivity()
 T CMolotov::GetServerClass()
 T CMolotov::GetViewmodelMeleeActivity()
 T CMolotov::GetWeaponDeployActivity(PlayerAnimEvent_t, Activity)
 T CMolotov::GetWeaponFireActivity(PlayerAnimEvent_t, Activity)
 T CMolotov::GetWeaponID() const
 T CMolotov::Holster(CBaseCombatWeapon*)
 T CMolotov::IsGrenade() const
 T CMolotov::Precache()
 T CMolotov::SecondaryAttack()
 T CMolotov::SendWeaponAnim(int)
 T CMolotov::TranslateViewmodelActivity(Activity) const
 T CMolotov::YouForgotToImplementOrDeclareServerClass()
 T CMolotov::~CMolotov()
 T CMolotovProjectile::BounceSound()
 T CMolotovProjectile::BounceTouch(CBaseEntity*)
 T CMolotovProjectile::Create(Vector const&, QAngle const&, Vector const&, Vector const&, CBaseCombatCharacter*, float)
 T CMolotovProjectile::Detonate()
 T CMolotovProjectile::DetonateThink()
 T CMolotovProjectile::GetDamageType() const
 T CMolotovProjectile::GetServerClass()
 T CMolotovProjectile::Precache()
 T CMolotovProjectile::Spawn()
 T CMolotovProjectile::YouForgotToImplementOrDeclareServerClass()
 T CMolotovProjectile::~CMolotovProjectile()
 T CMomentaryRotButton::CreateVPhysics()
 T CMomentaryRotButton::Disable()
 T CMomentaryRotButton::DrawDebugTextOverlays()
 T CMomentaryRotButton::Enable()
 T CMomentaryRotButton::GetDataDescMap()
 T CMomentaryRotButton::InputDisable(inputdata_t&)
 T CMomentaryRotButton::InputDisableUpdateTarget(inputdata_t&)
 T CMomentaryRotButton::InputEnable(inputdata_t&)
 T CMomentaryRotButton::InputEnableUpdateTarget(inputdata_t&)
 T CMomentaryRotButton::InputSetPosition(inputdata_t&)
 T CMomentaryRotButton::InputSetPositionImmediately(inputdata_t&)
 T CMomentaryRotButton::Lock()
 T CMomentaryRotButton::ObjectCaps()
 T CMomentaryRotButton::PlaySound()
 T CMomentaryRotButton::ReturnMoveDone()
 T CMomentaryRotButton::SetPositionMoveDone()
 T CMomentaryRotButton::Spawn()
 T CMomentaryRotButton::Unlock()
 T CMomentaryRotButton::UpdateSelf(float, bool)
 T CMomentaryRotButton::UpdateThink()
 T CMomentaryRotButton::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CMomentaryRotButton::UseMoveDone()
 T CMomentaryRotButton::~CMomentaryRotButton()
 T CMostHitsAwardTemplate::CMostHitsAwardTemplate(int)
 T CMostHitsAwardTemplate::FireGameEvent(IGameEvent*)
 T CMostHitsAwardTemplate::OnCreate()
 T CMostHitsAwardTemplate::~CMostHitsAwardTemplate()
 T CMotorController::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)
 T CMovableEnum::EnumElement(IHandleEntity*)
 T CMoveHelperServer::AddToTouched(CGameTrace const&, Vector const&)
 T CMoveHelperServer::Con_NPrintf(int, char const*, ...)
 T CMoveHelperServer::GetName(CBaseHandle) const
 T CMoveHelperServer::GetSurfaceProps()
 T CMoveHelperServer::IsWorldEntity(CBaseHandle const&)
 T CMoveHelperServer::PlaybackEventFull(int, int, unsigned short, float, Vector&, Vector&, float, float, int, int, int, int)
 T CMoveHelperServer::PlayerFallingDamage()
 T CMoveHelperServer::PlayerSetAnimation(PLAYER_ANIM)
 T CMoveHelperServer::ProcessImpacts()
 T CMoveHelperServer::ResetTouchList()
 T CMoveHelperServer::SetGroundNormal(Vector const&)
 T CMoveHelperServer::SetHost(CBasePlayer*)
 T CMoveHelperServer::StartSound(Vector const&, char const*)
 T CMoveHelperServer::StartSound(Vector const&, int, char const*, float, soundlevel_t, int, int)
 T CMoveHelperServer::~CMoveHelperServer()
 T CMovementSpeedMod::GetDataDescMap()
 T CMovementSpeedMod::InputSpeedMod(inputdata_t&)
 T CMovementSpeedMod::~CMovementSpeedMod()
 T CMultiDamage::Init(CBaseEntity*, CBaseEntity*, CBaseEntity*, Vector const&, Vector const&, Vector const&, float, int, int)
 T CMultiInputVar::AddValue(variant_t, int)
 T CMultiInputVar::~CMultiInputVar()
 T CMultiSource::GetDataDescMap()
 T CMultiSource::IsTriggered(CBaseEntity*)
 T CMultiSource::KeyValue(char const*, char const*)
 T CMultiSource::ObjectCaps()
 T CMultiSource::Register()
 T CMultiSource::Spawn()
 T CMultiSource::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CMultiSource::~CMultiSource()
 T CMultiplayRules::AllowAutoTargetCrosshair()
 T CMultiplayRules::AllowDamage(CBaseEntity*, CTakeDamageInfo const&)
 T CMultiplayRules::CMultiplayRules()
 T CMultiplayRules::CanHaveItem(CBasePlayer*, CItem*)
 T CMultiplayRules::CanHavePlayerItem(CBasePlayer*, CBaseCombatWeapon*)
 T CMultiplayRules::ChangeLevel()
 T CMultiplayRules::ClientCommand(CBaseEntity*, CCommand const&)
 T CMultiplayRules::ClientConnected(edict_t*, char const*, char const*, char*, int)
 T CMultiplayRules::ClientDisconnected(edict_t*)
 T CMultiplayRules::ClientSettingsChanged(CBasePlayer*)
 T CMultiplayRules::Damage_GetNoPhysicsForce()
 T CMultiplayRules::Damage_GetShouldGibCorpse()
 T CMultiplayRules::Damage_GetShouldNotBleed()
 T CMultiplayRules::Damage_GetShowOnHud()
 T CMultiplayRules::Damage_GetTimeBased()
 T CMultiplayRules::Damage_IsTimeBased(int)
 T CMultiplayRules::Damage_NoPhysicsForce(int)
 T CMultiplayRules::Damage_ShouldGibCorpse(int)
 T CMultiplayRules::Damage_ShouldNotBleed(int)
 T CMultiplayRules::Damage_ShowOnHUD(int)
 T CMultiplayRules::DeadPlayerAmmo(CBasePlayer*)
 T CMultiplayRules::DeadPlayerWeapons(CBasePlayer*)
 T CMultiplayRules::DeathNotice(CBasePlayer*, CTakeDamageInfo const&)
 T CMultiplayRules::EndMultiplayerGame()
 T CMultiplayRules::FAllowFlashlight()
 T CMultiplayRules::FAllowNPCs()
 T CMultiplayRules::FPlayerCanRespawn(CBasePlayer*)
 T CMultiplayRules::FPlayerCanTakeDamage(CBasePlayer*, CBaseEntity*)
 T CMultiplayRules::FShouldSwitchWeapon(CBasePlayer*, CBaseCombatWeapon*)
 T CMultiplayRules::FlHEVChargerRechargeTime()
 T CMultiplayRules::FlHealthChargerRechargeTime()
 T CMultiplayRules::FlItemRespawnTime(CItem*)
 T CMultiplayRules::FlPlayerFallDamage(CBasePlayer*)
 T CMultiplayRules::FlPlayerSpawnTime(CBasePlayer*)
 T CMultiplayRules::FlWeaponRespawnTime(CBaseCombatWeapon*)
 T CMultiplayRules::FlWeaponTryRespawn(CBaseCombatWeapon*)
 T CMultiplayRules::GetDeathScorer(CBaseEntity*, CBaseEntity*)
 T CMultiplayRules::GetDeathScorer(CBaseEntity*, CBaseEntity*, CBaseEntity*)
 T CMultiplayRules::GetNextBestWeapon(CBaseCombatCharacter*, CBaseCombatWeapon*)
 T CMultiplayRules::GetNextLevelName(char*, int)
 T CMultiplayRules::GetPlayerSpawnSpot(CBasePlayer*)
 T CMultiplayRules::GetTeamID(CBaseEntity*)
 T CMultiplayRules::GoToIntermission()
 T CMultiplayRules::IPointsForKill(CBasePlayer*, CBasePlayer*)
 T CMultiplayRules::Init()
 T CMultiplayRules::InitCustomResponseRulesDicts()
 T CMultiplayRules::InitHUD(CBasePlayer*)
 T CMultiplayRules::IsAllowedToSpawn(CBaseEntity*)
 T CMultiplayRules::IsCoOp()
 T CMultiplayRules::IsDeathmatch()
 T CMultiplayRules::IsMultiplayer()
 T CMultiplayRules::ItemShouldRespawn(CItem*)
 T CMultiplayRules::LoadVoiceCommandScript()
 T CMultiplayRules::PlayFootstepSounds(CBasePlayer*)
 T CMultiplayRules::PlayTextureSounds()
 T CMultiplayRules::PlayerCanHearChat(CBasePlayer*, CBasePlayer*)
 T CMultiplayRules::PlayerGotAmmo(CBaseCombatCharacter*, char*, int)
 T CMultiplayRules::PlayerGotItem(CBasePlayer*, CItem*)
 T CMultiplayRules::PlayerKilled(CBasePlayer*, CTakeDamageInfo const&)
 T CMultiplayRules::PlayerRelationship(CBaseEntity*, CBaseEntity*)
 T CMultiplayRules::PlayerSpawn(CBasePlayer*)
 T CMultiplayRules::PlayerThink(CBasePlayer*)
 T CMultiplayRules::RefreshSkillData(bool)
 T CMultiplayRules::ResetMapCycleTimeStamp()
 T CMultiplayRules::ShutdownCustomResponseRulesDicts()
 T CMultiplayRules::SwitchToNextBestWeapon(CBaseCombatCharacter*, CBaseCombatWeapon*)
 T CMultiplayRules::Think()
 T CMultiplayRules::UseSuicidePenalty()
 T CMultiplayRules::VecItemRespawnAngles(CItem*)
 T CMultiplayRules::VecItemRespawnSpot(CItem*)
 T CMultiplayRules::VecWeaponRespawnSpot(CBaseCombatWeapon*)
 T CMultiplayRules::VoiceCommand(CBaseMultiplayerPlayer*, int, int)
 T CMultiplayRules::WeaponShouldRespawn(CBaseCombatWeapon*)
 T CMultiplayRules::~CMultiplayRules()
 T CMultiplayer_Expresser::AllowMultipleScenes()
 T CMultiplayer_Expresser::CMultiplayer_Expresser(CBaseFlex*)
 T CMultiplayer_Expresser::DisallowMultipleScenes()
 T CMultiplayer_Expresser::IsSpeaking()
 T CMurderAwardTemplate::CMurderAwardTemplate(int)
 T CMurderAwardTemplate::FireGameEvent(IGameEvent*)
 T CMurderAwardTemplate::OnCreate()
 T CMurderAwardTemplate::~CMurderAwardTemplate()
 T CNarrowEscapeAwardTemplate::CNarrowEscapeAwardTemplate(int)
 T CNarrowEscapeAwardTemplate::FireGameEvent(IGameEvent*)
 T CNarrowEscapeAwardTemplate::OnCreate()
 T CNarrowEscapeAwardTemplate::~CNarrowEscapeAwardTemplate()
 T CNavArea::AddIncomingConnection(CNavArea*, NavDirType)
 T CNavArea::AddLadderDown(CNavLadder*)
 T CNavArea::AddLadderUp(CNavLadder*)
 T CNavArea::AddSpotEncounters(CNavArea const*, NavDirType, CNavArea const*, NavDirType)
 T CNavArea::AddToOpenList()
 T CNavArea::AddToOpenListTail()
 T CNavArea::AssignNodes(CNavArea*)
 T CNavArea::Build(CNavNode*, CNavNode*, CNavNode*, CNavNode*)
 T CNavArea::Build(Vector const&, Vector const&)
 T CNavArea::Build(Vector const&, Vector const&, Vector const&, Vector const&)
 T CNavArea::CNavArea()
 T CNavArea::CheckFloor(CBaseEntity*)
 T CNavArea::CheckWaterLevel()
 T CNavArea::ClearSearchLists()
 T CNavArea::CompressIDs()
 T CNavArea::ComputeClosestPointInPortal(CNavArea const*, NavDirType, Vector const&, Vector*) const
 T CNavArea::ComputeEarliestOccupyTimes()
 T CNavArea::ComputeHeightChange(CNavArea const*)
 T CNavArea::ComputeHidingSpots()
 T CNavArea::ComputeLargestPortal(CNavArea const*, Vector*, float*) const
 T CNavArea::ComputeLighting()
 T CNavArea::ComputeNormal(Vector*, bool) const
 T CNavArea::ComputePortal(CNavArea const*, NavDirType, Vector*, float*) const
 T CNavArea::ComputeSniperSpots()
 T CNavArea::ComputeSpotEncounters()
 T CNavArea::ConnectElevators()
 T CNavArea::ConnectTo(CNavArea*, NavDirType)
 T CNavArea::ConnectTo(CNavLadder*)
 T CNavArea::Contains(CNavArea const*) const
 T CNavArea::Contains(Vector const&) const
 T CNavArea::CustomAnalysis(bool)
 T CNavArea::Disconnect(CNavArea*)
 T CNavArea::Disconnect(CNavLadder*)
 T CNavArea::Draw() const
 T CNavArea::DrawConnectedAreas() const
 T CNavArea::DrawFilled(int, int, int, int, float, bool) const
 T CNavArea::DrawHidingSpots() const
 T CNavArea::DrawSelectedSet(Vector const&) const
 T CNavArea::FindClosestNode(Vector const&, NavDirType) const
 T CNavArea::FinishMerge(CNavArea*)
 T CNavArea::FinishSplitEdit(CNavArea*, NavDirType)
 T CNavArea::GetClosestPointOnArea(Vector const*, Vector*) const
 T CNavArea::GetCorner(NavCornerType) const
 T CNavArea::GetCornerHotspot(NavCornerType, Vector*) const
 T CNavArea::GetDanger(int)
 T CNavArea::GetDangerDecayRate() const
 T CNavArea::GetDistanceSquaredToPoint(Vector const&) const
 T CNavArea::GetExtent(Extent*) const
 T CNavArea::GetLightIntensity() const
 T CNavArea::GetLightIntensity(Vector const&) const
 T CNavArea::GetNodes(NavDirType, CUtlVector<CNavNode*, CUtlMemory<CNavNode*, int> >*) const
 T CNavArea::GetRandomAdjacentArea(NavDirType) const
 T CNavArea::GetZ(float, float) const
 T CNavArea::HasNodes() const
 T CNavArea::IncreaseDanger(int, float)
 T CNavArea::InheritAttributes(CNavArea*, CNavArea*)
 T CNavArea::IsAbleToMergeWith(CNavArea*) const
 T CNavArea::IsBlocked(int, bool) const
 T CNavArea::IsConnected(CNavArea const*, NavDirType) const
 T CNavArea::IsConnected(CNavLadder const*, CNavLadder::LadderDirectionType) const
 T CNavArea::IsCoplanar(CNavArea const*) const
 T CNavArea::IsFlat() const
 T CNavArea::IsOverlapping(CNavArea const*) const
 T CNavArea::IsOverlapping(Extent const&) const
 T CNavArea::IsOverlapping(Vector const&, float) const
 T CNavArea::IsRoughlySquare() const
 T CNavArea::Load(CUtlBuffer&, unsigned int, unsigned int)
 T CNavArea::MarkAsBlocked(int, CBaseEntity*)
 T CNavArea::MarkObstacleToAvoid(float)
 T CNavArea::MergeAdjacentConnections(CNavArea*)
 T CNavArea::MergeEdit(CNavArea*)
 T CNavArea::OnDestroyNotify(CNavArea*)
 T CNavArea::OnDestroyNotify(CNavLadder*)
 T CNavArea::OnEditCreateNotify(CNavArea*)
 T CNavArea::OnEditDestroyNotify(CNavArea*)
 T CNavArea::OnEditDestroyNotify(CNavLadder*)
 T CNavArea::OnEnter(CBaseCombatCharacter*, CNavArea*)
 T CNavArea::OnExit(CBaseCombatCharacter*, CNavArea*)
 T CNavArea::OnRoundRestart()
 T CNavArea::OnRoundRestartPreEntity()
 T CNavArea::OnServerActivate()
 T CNavArea::PlaceOnGround(NavCornerType, float)
 T CNavArea::PostLoad()
 T CNavArea::RaiseCorner(NavCornerType, int, bool)
 T CNavArea::RemoveFromOpenList()
 T CNavArea::RemoveOrthogonalConnections(NavDirType)
 T CNavArea::ResetNodes()
 T CNavArea::RestoreFromSelectedSet(KeyValues*)
 T CNavArea::Save(CUtlBuffer&, unsigned int) const
 T CNavArea::SaveToSelectedSet(KeyValues*) const
 T CNavArea::Shift(Vector const&)
 T CNavArea::SpliceEdit(CNavArea*)
 T CNavArea::SplitEdit(bool, float, CNavArea**, CNavArea**)
 T CNavArea::Strip()
 T CNavArea::TestStairs()
 T CNavArea::UnblockArea()
 T CNavArea::UpdateAvoidanceObstacles()
 T CNavArea::UpdateBlocked(bool, int)
 T CNavArea::UpdateBlockedFromNavBlockers()
 T CNavArea::UpdateOnOpenList()
 T CNavArea::~CNavArea()
 T CNavAreaCriticalData::CNavAreaCriticalData()
 T CNavLadder::CompressIDs()
 T CNavLadder::ConnectGeneratedLadder(float)
 T CNavLadder::ConnectTo(CNavArea*)
 T CNavLadder::Disconnect(CNavArea*)
 T CNavLadder::DrawConnectedAreas()
 T CNavLadder::DrawLadder() const
 T CNavLadder::GetPosAtHeight(float) const
 T CNavLadder::IsConnected(CNavArea const*, CNavLadder::LadderDirectionType) const
 T CNavLadder::Load(CUtlBuffer&, unsigned int)
 T CNavLadder::OnDestroyNotify(CNavArea*)
 T CNavLadder::OnRoundRestart()
 T CNavLadder::OnSplit(CNavArea*, CNavArea*, CNavArea*)
 T CNavLadder::Save(CUtlBuffer&, unsigned int) const
 T CNavLadder::SetDir(NavDirType)
 T CNavLadder::Shift(Vector const&)
 T CNavLadder::~CNavLadder()
 T CNavMesh::AddNavArea(CNavArea*)
 T CNavMesh::AddNode(Vector const&, Vector const&, NavDirType, CNavNode*, bool, float, float, float)
 T CNavMesh::AddToSelectedSet(CNavArea*)
 T CNavMesh::AddWalkableSeed(Vector const&, Vector const&)
 T CNavMesh::AddWalkableSeeds()
 T CNavMesh::AllocateGrid(float, float, float, float)
 T CNavMesh::BeginAnalysis(bool)
 T CNavMesh::BeginGeneration(bool)
 T CNavMesh::BuildArea(CNavNode*, int, int)
 T CNavMesh::BuildLadders()
 T CNavMesh::BuildTransientAreaList()
 T CNavMesh::CNavMesh()
 T CNavMesh::ClearSelectedSet()
 T CNavMesh::CommandNavAddToSelectedSet()
 T CNavMesh::CommandNavAddToSelectedSetByID(CCommand const&)
 T CNavMesh::CommandNavBeginArea()
 T CNavMesh::CommandNavBeginSelecting()
 T CNavMesh::CommandNavBeginShiftXY()
 T CNavMesh::CommandNavBuildLadder()
 T CNavMesh::CommandNavClearSelectedSet()
 T CNavMesh::CommandNavConnect()
 T CNavMesh::CommandNavCornerLower(CCommand const&)
 T CNavMesh::CommandNavCornerPlaceOnGround(CCommand const&)
 T CNavMesh::CommandNavCornerRaise(CCommand const&)
 T CNavMesh::CommandNavCornerSelect()
 T CNavMesh::CommandNavDelete()
 T CNavMesh::CommandNavDeleteMarked()
 T CNavMesh::CommandNavDisconnect()
 T CNavMesh::CommandNavEndArea()
 T CNavMesh::CommandNavEndSelecting()
 T CNavMesh::CommandNavEndShiftXY()
 T CNavMesh::CommandNavFloodSelect(CCommand const&)
 T CNavMesh::CommandNavLadderFlip()
 T CNavMesh::CommandNavMakeSniperSpots()
 T CNavMesh::CommandNavMark(CCommand const&)
 T CNavMesh::CommandNavMarkUnnamed()
 T CNavMesh::CommandNavMarkWalkable()
 T CNavMesh::CommandNavMerge()
 T CNavMesh::CommandNavMergeMesh(CCommand const&)
 T CNavMesh::CommandNavPlaceFloodFill()
 T CNavMesh::CommandNavPlacePick()
 T CNavMesh::CommandNavPlaceSet()
 T CNavMesh::CommandNavRecallSelectedSet()
 T CNavMesh::CommandNavRemoveFromSelectedSet()
 T CNavMesh::CommandNavRemoveJumpAreas()
 T CNavMesh::CommandNavSaveSelected(CCommand const&)
 T CNavMesh::CommandNavSelectBlockedAreas()
 T CNavMesh::CommandNavSelectDamagingAreas()
 T CNavMesh::CommandNavSelectHalfSpace(CCommand const&)
 T CNavMesh::CommandNavSelectInvalidAreas()
 T CNavMesh::CommandNavSelectObstructedAreas()
 T CNavMesh::CommandNavSelectStairs()
 T CNavMesh::CommandNavSplice()
 T CNavMesh::CommandNavSplit()
 T CNavMesh::CommandNavStoreSelectedSet()
 T CNavMesh::CommandNavSubdivide(CCommand const&)
 T CNavMesh::CommandNavToggleAttribute(NavAttributeType)
 T CNavMesh::CommandNavToggleInSelectedSet()
 T CNavMesh::CommandNavTogglePlaceMode()
 T CNavMesh::CommandNavTogglePlacePainting()
 T CNavMesh::CommandNavToggleSelectedSet()
 T CNavMesh::CommandNavToggleSelecting(bool)
 T CNavMesh::CommandNavUnmark()
 T CNavMesh::CommandNavWarpToMark()
 T CNavMesh::ConnectGeneratedAreas()
 T CNavMesh::CreateArea() const
 T CNavMesh::CreateHidingSpot() const
 T CNavMesh::CreateLadder(Vector const&, Vector const&, float)
 T CNavMesh::CreateLadder(Vector const&, Vector const&, float, Vector2D const&, float)
 T CNavMesh::CreateNavAreasFromNodes()
 T CNavMesh::CreateObstacleTopAreaIfNecessary(CNavArea*, CNavArea*, NavDirType, bool)
 T CNavMesh::CreateObstacleTopAreas()
 T CNavMesh::DestroyArea(CNavArea*) const
 T CNavMesh::DestroyHidingSpots()
 T CNavMesh::DestroyLadders()
 T CNavMesh::DestroyNavigationMesh(bool)
 T CNavMesh::DoToggleAttribute(CNavArea*, NavAttributeType)
 T CNavMesh::DrawDanger() const
 T CNavMesh::DrawEditMode()
 T CNavMesh::FindActiveNavArea()
 T CNavMesh::FindGroundForNode(Vector*, Vector*)
 T CNavMesh::FindLadderCorners(Vector*, Vector*, Vector*)
 T CNavMesh::FindNavAreaOrLadderAlongRay(Vector const&, Vector const&, CNavArea**, CNavLadder**, CNavArea*)
 T CNavMesh::FireGameEvent(IGameEvent*)
 T CNavMesh::FixConnections()
 T CNavMesh::FixCornerOnCornerAreas()
 T CNavMesh::FixUpGeneratedAreas()
 T CNavMesh::GetEditVectors(Vector*, Vector*)
 T CNavMesh::GetFilename() const
 T CNavMesh::GetGroundHeight(Vector const&, float*, Vector*) const
 T CNavMesh::GetLadderByID(unsigned int) const
 T CNavMesh::GetMarkedArea() const
 T CNavMesh::GetNavArea(CBaseEntity*, int, float) const
 T CNavMesh::GetNavArea(Vector const&, float) const
 T CNavMesh::GetNavAreaByID(unsigned int) const
 T CNavMesh::GetNearestNavArea(CBaseEntity*, int, float) const
 T CNavMesh::GetNearestNavArea(Vector const&, bool, float, bool, bool) const
 T CNavMesh::GetNextWalkableSeedNode()
 T CNavMesh::GetPlacesFromNavFile(bool*)
 T CNavMesh::GetSelecteSetSize() const
 T CNavMesh::GetSelectedSet() const
 T CNavMesh::GetSimpleGroundHeight(Vector const&, float*, Vector*) const
 T CNavMesh::GetSubVersionNumber() const
 T CNavMesh::HandleObstacleTopAreas()
 T CNavMesh::IncreaseDangerNearby(int, float, CNavArea*, Vector const&, float, float)
 T CNavMesh::IsInSelectedSet(CNavArea const*) const
 T CNavMesh::IsSelectedSetEmpty() const
 T CNavMesh::Load()
 T CNavMesh::LoadCustomData(CUtlBuffer&, unsigned int)
 T CNavMesh::LoadCustomDataPreArea(CUtlBuffer&, unsigned int)
 T CNavMesh::LoadPlaceDatabase()
 T CNavMesh::MarkJumpAreas()
 T CNavMesh::MarkStairAreas()
 T CNavMesh::MergeGeneratedAreas()
 T CNavMesh::NameToPlace(char const*) const
 T CNavMesh::OnAreaBlocked(CNavArea*)
 T CNavMesh::OnAreaUnblocked(CNavArea*)
 T CNavMesh::OnAvoidanceObstacleEnteredArea(CNavArea*)
 T CNavMesh::OnAvoidanceObstacleLeftArea(CNavArea*)
 T CNavMesh::OnBreakableBroken(CBaseEntity*)
 T CNavMesh::OnBreakableCreated(CBaseEntity*)
 T CNavMesh::OnEditCreateNotify(CNavArea*)
 T CNavMesh::OnEditDestroyNotify(CNavArea*)
 T CNavMesh::OnEditDestroyNotify(CNavLadder*)
 T CNavMesh::OnEditModeEnd()
 T CNavMesh::OnEditModeStart()
 T CNavMesh::OnNodeAdded(CNavNode*)
 T CNavMesh::OnRoundRestart()
 T CNavMesh::OnRoundRestartPreEntity()
 T CNavMesh::OnServerActivate()
 T CNavMesh::PartialNameToPlace(char const*) const
 T CNavMesh::PlaceNameAutocomplete(char const*, char (*) [64])
 T CNavMesh::PlaceToName(unsigned int) const
 T CNavMesh::PostCustomAnalysis()
 T CNavMesh::PostLoad(unsigned int)
 T CNavMesh::PostProcessCliffAreas()
 T CNavMesh::PreLoadAreas(int)
 T CNavMesh::PrintAllPlaces() const
 T CNavMesh::RaiseAreasWithInternalObstacles()
 T CNavMesh::RegisterAvoidanceObstacle(INavAvoidanceObstacle*)
 T CNavMesh::RemoveFromSelectedSet(CNavArea*)
 T CNavMesh::RemoveJumpAreas()
 T CNavMesh::RemoveNavArea(CNavArea*)
 T CNavMesh::RemoveOverlappingObstacleTopAreas()
 T CNavMesh::Reset()
 T CNavMesh::SampleStep()
 T CNavMesh::Save() const
 T CNavMesh::SaveCustomData(CUtlBuffer&) const
 T CNavMesh::SaveCustomDataPreArea(CUtlBuffer&) const
 T CNavMesh::SetEditMode(CNavMesh::EditModeType)
 T CNavMesh::SetMarkedArea(CNavArea*)
 T CNavMesh::SimplifySelectedAreas()
 T CNavMesh::SnapToGrid(float, bool) const
 T CNavMesh::SplitAreasUnderOverhangs()
 T CNavMesh::SquareUpAreas()
 T CNavMesh::StichAndRemoveJumpAreas()
 T CNavMesh::StitchAreaSet(CUtlVector<CNavArea*, CUtlMemory<CNavArea*, int> >*)
 T CNavMesh::StripNavigationAreas()
 T CNavMesh::TestArea(CNavNode*, int, int)
 T CNavMesh::UnregisterAvoidanceObstacle(INavAvoidanceObstacle*)
 T CNavMesh::Update()
 T CNavMesh::UpdateGeneration(float)
 T CNavMesh::ValidateNavAreaConnections()
 T CNavMesh::~CNavMesh()
 T CNavNode::CNavNode(Vector const&, Vector const&, CNavNode*, bool)
 T CNavNode::CheckCrouch()
 T CNavNode::ConnectTo(CNavNode*, NavDirType, float, float, float)
 T CNavNode::Draw()
 T CNavNode::GetGroundHeightAboveNode(NavCornerType) const
 T CNavNode::GetNode(Vector const&)
 T CNavNode::IsClosedCell() const
 T CNavNode::TestForCrouchArea(NavCornerType, Vector const&, Vector const&, float*)
 T CNavVectorNoEditAllocator::Reset()
 T CNetworkColor32Base<color32_s, CBaseEntity::NetworkVar_m_clrRender>::SetVal(unsigned char&, unsigned char const&)
 T CNetworkHandleBase<CBaseCombatWeapon, CBaseCombatCharacter::NetworkVar_m_hActiveWeapon>::Set(CBaseCombatWeapon const*)
 T CNetworkHandleBase<CBaseEntity, CBaseEntity::NetworkVar_m_hMoveParent>::Set(CBaseEntity const*)
 T CNetworkHandleBase<CBaseEntity, CBasePlayer::NetworkVar_m_hUseEntity>::Set(CBaseEntity const*)
 T CNetworkHandleBase<CBaseEntity, CHandleTest::NetworkVar_m_Handle>::Set(CBaseEntity const*)
 T CNoSurvivorsAwardTemplate::CNoSurvivorsAwardTemplate(int)
 T CNoSurvivorsAwardTemplate::FireGameEvent(IGameEvent*)
 T CNoSurvivorsAwardTemplate::OnCreate()
 T CNoSurvivorsAwardTemplate::~CNoSurvivorsAwardTemplate()
 T CNonModifiedPointerProxy::CNonModifiedPointerProxy(void* (*)(SendProp const*, void const*, void const*, CSendProxyRecipients*, int))
 T CNotifyList::AddEntity(CBaseEntity*, CBaseEntity*)
 T CNotifyList::ClearEntity(CBaseEntity*)
 T CNotifyList::LevelShutdownPreEntity()
 T CNotifyList::OnEntityCreated(CBaseEntity*)
 T CNotifyList::OnEntityDeleted(CBaseEntity*)
 T CNotifyList::RemoveEntity(CBaseEntity*, CBaseEntity*)
 T CNotifyList::ReportNamedEvent(CBaseEntity*, char const*)
 T CNotifyList::ReportSystemEvent(CBaseEntity*, notify_system_event_t, notify_system_event_params_t const&)
 T CNotifyList::~CNotifyList()
 T CNullEntity::Spawn()
 T CNullEntity::~CNullEntity()
 T COrnamentProp::Activate()
 T COrnamentProp::AttachTo(char const*, CBaseEntity*, CBaseEntity*)
 T COrnamentProp::GetDataDescMap()
 T COrnamentProp::InputDetach(inputdata_t&)
 T COrnamentProp::InputSetAttached(inputdata_t&)
 T COrnamentProp::Spawn()
 T COrnamentProp::~COrnamentProp()
 T COutputEvent::FireOutput(CBaseEntity*, CBaseEntity*, float)
 T COuttroStats::CalcSkipState(int&, int&)
 T COuttroStats::GetDataDescMap()
 T COuttroStats::InputRollCredits(inputdata_t&)
 T COuttroStats::InputRollStatsCrawl(inputdata_t&)
 T COuttroStats::InputSkipStateChanged(inputdata_t&)
 T COuttroStats::SkipThink()
 T COuttroStats::Spawn()
 T COuttroStats::~COuttroStats()
 T COxygenTank::GetDataDescMap()
 T COxygenTank::GetDeployActivity()
 T COxygenTank::GetPropName() const
 T COxygenTank::GetServerClass()
 T COxygenTank::GetViewmodelMeleeActivity()
 T COxygenTank::GetWeaponFireActivity(PlayerAnimEvent_t, Activity)
 T COxygenTank::GetWeaponID() const
 T COxygenTank::TranslateViewmodelActivity(Activity) const
 T COxygenTank::WeaponTranslateMainActivity(Activity)
 T COxygenTank::YouForgotToImplementOrDeclareServerClass()
 T COxygenTank::~COxygenTank()
 T CPASAttenuationFilter::CPASAttenuationFilter(CBaseEntity*, char const*)
 T CPASAttenuationFilter::CPASAttenuationFilter(CBaseEntity*, char const*, short&)
 T CPASAttenuationFilter::CPASAttenuationFilter(CBaseEntity*, float)
 T CPASAttenuationFilter::CPASAttenuationFilter(CBaseEntity*, soundlevel_t)
 T CPASAttenuationFilter::CPASAttenuationFilter(Vector const&, soundlevel_t)
 T CPASAttenuationFilter::Filter(Vector const&, float)
 T CPASAttenuationFilter::~CPASAttenuationFilter()
 T CPASFilter::~CPASFilter()
 T CPVSFilter::~CPVSFilter()
 T CPainPills::CanBeSelected()
 T CPainPills::CanExtendHelpingHand() const
 T CPainPills::CanFidget()
 T CPainPills::Deploy()
 T CPainPills::GetDataDescMap()
 T CPainPills::GetDeployActivity()
 T CPainPills::GetServerClass()
 T CPainPills::GetViewmodelMeleeActivity()
 T CPainPills::GetWeaponDeployActivity(PlayerAnimEvent_t, Activity)
 T CPainPills::GetWeaponFireActivity(PlayerAnimEvent_t, Activity)
 T CPainPills::GetWeaponID() const
 T CPainPills::HasPrimaryAmmo()
 T CPainPills::HasSecondaryMelee()
 T CPainPills::Holster(CBaseCombatWeapon*)
 T CPainPills::ItemPostFrame()
 T CPainPills::NetworkVar_m_pillUseTimer::NetworkStateChanged()
 T CPainPills::NetworkVar_m_pillUseTimer::NetworkStateChanged(void*)
 T CPainPills::OnHit(CGameTrace&, Vector const&, bool)
 T CPainPills::Precache()
 T CPainPills::PrimaryAttack()
 T CPainPills::SecondaryAttack()
 T CPainPills::SendWeaponAnim(int)
 T CPainPills::Spawn()
 T CPainPills::TranslateViewmodelActivity(Activity) const
 T CPainPills::WeaponIdle()
 T CPainPills::WeaponTranslateMainActivity(Activity)
 T CPainPills::YouForgotToImplementOrDeclareServerClass()
 T CPainPills::~CPainPills()
 T CParallelProcessor<QueryCacheUpdateRecord_t, CFuncJobItemProcessor<QueryCacheUpdateRecord_t>, 1>::DoExecute()
 T CParallelProcessor<QueryCacheUpdateRecord_t, CFuncJobItemProcessor<QueryCacheUpdateRecord_t>, 1>::Run(QueryCacheUpdateRecord_t*, unsigned int, int, IThreadPool*)
 T CParryAwardTemplate::CParryAwardTemplate(int)
 T CParryAwardTemplate::FireGameEvent(IGameEvent*)
 T CParryAwardTemplate::OnCreate()
 T CParryAwardTemplate::~CParryAwardTemplate()
 T CParticleFire::GetDataDescMap()
 T CParticleFire::GetServerClass()
 T CParticleFire::YouForgotToImplementOrDeclareServerClass()
 T CParticleFire::~CParticleFire()
 T CParticleLight::GetDataDescMap()
 T CParticleLight::~CParticleLight()
 T CParticlePerformanceMonitor::GetDataDescMap()
 T CParticlePerformanceMonitor::GetServerClass()
 T CParticlePerformanceMonitor::InputStartMeasuring(inputdata_t&)
 T CParticlePerformanceMonitor::InputStopMeasuring(inputdata_t&)
 T CParticlePerformanceMonitor::InputTurnOffDisplay(inputdata_t&)
 T CParticlePerformanceMonitor::InputTurnOnDisplay(inputdata_t&)
 T CParticlePerformanceMonitor::Spawn()
 T CParticlePerformanceMonitor::UpdateTransmitState()
 T CParticlePerformanceMonitor::YouForgotToImplementOrDeclareServerClass()
 T CParticlePerformanceMonitor::~CParticlePerformanceMonitor()
 T CParticleSystem::Activate()
 T CParticleSystem::GetDataDescMap()
 T CParticleSystem::GetServerClass()
 T CParticleSystem::InputStart(inputdata_t&)
 T CParticleSystem::InputStop(inputdata_t&)
 T CParticleSystem::Precache()
 T CParticleSystem::ReadControlPointEnts()
 T CParticleSystem::Spawn()
 T CParticleSystem::StartParticleSystemThink()
 T CParticleSystem::UpdateTransmitState()
 T CParticleSystem::YouForgotToImplementOrDeclareServerClass()
 T CParticleSystem::~CParticleSystem()
 T CParticleSystemDefinition::CParticleSystemDefinition()
 T CParticleSystemDefinition::GetFallbackReplacementDefinition() const
 T CParticleSystemDefinition::ParseChildren(CDmxElement*)
 T CParticleSystemDefinition::ParseOperators(char const*, ParticleFunctionType_t, CDmxElement*, CUtlVector<CParticleOperatorInstance*, CUtlMemory<CParticleOperatorInstance*, int> >&)
 T CParticleSystemDefinition::Precache()
 T CParticleSystemDefinition::Read(CDmxElement*)
 T CParticleSystemDefinition::SetupContextData()
 T CParticleSystemDefinition::ShouldAlwaysPrecache() const
 T CParticleSystemDefinition::~CParticleSystemDefinition()
 T CParticleSystemDictionary::AddParticleSystem(CDmxElement*)
 T CParticleSystemDictionary::DestroyExistingElement(CDmxElement*)
 T CParticleSystemDictionary::FindOrAddParticleSystemHandle(char const*)
 T CParticleSystemDictionary::~CParticleSystemDictionary()
 T CParticleSystemMgr::CParticleSystemMgr()
 T CParticleSystemMgr::DecommitTempMemory()
 T CParticleSystemMgr::FindOrLoadSheet(CParticleSystemDefinition*)
 T CParticleSystemMgr::FindParticleSystem(char const*)
 T CParticleSystemMgr::GetParticleSystemCount()
 T CParticleSystemMgr::GetParticleSystemNameFromIndex(int)
 T CParticleSystemMgr::Init(IParticleSystemQuery*, bool)
 T CParticleSystemMgr::ReadParticleConfigFile(CUtlBuffer&, bool, bool, char const*)
 T CParticleSystemMgr::ReadParticleConfigFile(char const*, bool, bool)
 T CParticleSystemMgr::ReadParticleDefinitions(CUtlBuffer&, char const*, bool, bool)
 T CParticleSystemMgr::ShouldLoadSheets(bool)
 T CParticleSystemMgr::~CParticleSystemMgr()
 T CParticleSystemQuery::DebugDrawLine(Vector const&, Vector const&, int, int, int, bool, float)
 T CParticleSystemQuery::GetCollisionGroupFromName(char const*)
 T CParticleSystemQuery::GetControllingObjectHitBoxInfo(CParticleCollection*, int, int, ModelHitBoxInfo_t*)
 T CParticleSystemQuery::GetCurrentViewOrigin()
 T CParticleSystemQuery::GetLightingAtPoint(Vector const&, Color&)
 T CParticleSystemQuery::GetLocalPlayerEyeVectors(Vector*, Vector*, Vector*)
 T CParticleSystemQuery::GetLocalPlayerPos()
 T CParticleSystemQuery::GetPixelVisibility(int*, Vector const&, float)
 T CParticleSystemQuery::GetRandomPointsOnControllingObjectHitBox(CParticleCollection*, int, int, float, int, Vector*, Vector, Vector*, int*)
 T CParticleSystemQuery::GetRayTraceEnvironmentFromName(char const*)
 T CParticleSystemQuery::IsPointInControllingObjectHitBox(CParticleCollection*, int, Vector, bool)
 T CParticleSystemQuery::MovePointInsideControllingObject(CParticleCollection*, void*, Vector*)
 T CParticleSystemQuery::SetUpLightingEnvironment(Vector const&)
 T CParticleSystemQuery::TraceAgainstRayTraceEnv(int, FourRays const&, float __vector(4), float __vector(4), RayTracingResult*, int) const
 T CParticleSystemQuery::TraceLine(Vector const&, Vector const&, unsigned int, IHandleEntity const*, int, CBaseTrace*)
 T CPathCorner::DrawDebugGeometryOverlays()
 T CPathCorner::DrawDebugTextOverlays()
 T CPathCorner::GetDataDescMap()
 T CPathCorner::GetDelay()
 T CPathCorner::InputInPass(inputdata_t&)
 T CPathCorner::InputSetNextPathCorner(inputdata_t&)
 T CPathCorner::Spawn()
 T CPathCorner::~CPathCorner()
 T CPathCornerCrash::~CPathCornerCrash()
 T CPathKeyFrame::Activate()
 T CPathKeyFrame::CalculateFrameDuration()
 T CPathKeyFrame::GetDataDescMap()
 T CPathKeyFrame::Spawn()
 T CPathKeyFrame::~CPathKeyFrame()
 T CPathTrack::Activate()
 T CPathTrack::DisableAlternatePath()
 T CPathTrack::DisablePath()
 T CPathTrack::DrawDebugGeometryOverlays()
 T CPathTrack::EnableAlternatePath()
 T CPathTrack::EnablePath()
 T CPathTrack::GetDataDescMap()
 T CPathTrack::GetNext()
 T CPathTrack::GetOrientation(bool)
 T CPathTrack::GetPrevious()
 T CPathTrack::InputDisableAlternatePath(inputdata_t&)
 T CPathTrack::InputDisablePath(inputdata_t&)
 T CPathTrack::InputEnableAlternatePath(inputdata_t&)
 T CPathTrack::InputEnablePath(inputdata_t&)
 T CPathTrack::InputPass(inputdata_t&)
 T CPathTrack::InputToggleAlternatePath(inputdata_t&)
 T CPathTrack::InputTogglePath(inputdata_t&)
 T CPathTrack::Link()
 T CPathTrack::LookAhead(Vector&, float, int, CPathTrack**)
 T CPathTrack::Nearest(Vector const&)
 T CPathTrack::Spawn()
 T CPathTrack::ValidPath(CPathTrack*, int)
 T CPathTrack::~CPathTrack()
 T CPerfectTeamAwardTemplate::CPerfectTeamAwardTemplate(int)
 T CPerfectTeamAwardTemplate::FireGameEvent(IGameEvent*)
 T CPerfectTeamAwardTemplate::OnCreate()
 T CPerfectTeamAwardTemplate::~CPerfectTeamAwardTemplate()
 T CPhysBallSocket::CreateConstraint(IPhysicsConstraintGroup*, hl_constraint_info_t const&)
 T CPhysBallSocket::~CPhysBallSocket()
 T CPhysBox::CreateVPhysics()
 T CPhysBox::DrawDebugTextOverlays()
 T CPhysBox::GetDataDescMap()
 T CPhysBox::GetServerClass()
 T CPhysBox::HasPreferredCarryAnglesForPlayer(CBasePlayer*)
 T CPhysBox::InputDisableFloating(inputdata_t&)
 T CPhysBox::InputDisableMotion(inputdata_t&)
 T CPhysBox::InputEnableMotion(inputdata_t&)
 T CPhysBox::InputForceDrop(inputdata_t&)
 T CPhysBox::InputSleep(inputdata_t&)
 T CPhysBox::InputWake(inputdata_t&)
 T CPhysBox::ObjectCaps()
 T CPhysBox::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T CPhysBox::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CPhysBox::OnTakeDamage(CTakeDamageInfo const&)
 T CPhysBox::PreferredCarryAngles()
 T CPhysBox::Spawn()
 T CPhysBox::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CPhysBox::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CPhysBox::VPhysicsUpdate(IPhysicsObject*)
 T CPhysBox::YouForgotToImplementOrDeclareServerClass()
 T CPhysBox::~CPhysBox()
 T CPhysBoxMultiplayer::Activate()
 T CPhysBoxMultiplayer::GetDataDescMap()
 T CPhysBoxMultiplayer::GetMass()
 T CPhysBoxMultiplayer::GetMultiplayerPhysicsMode()
 T CPhysBoxMultiplayer::GetServerClass()
 T CPhysBoxMultiplayer::IsAsleep()
 T CPhysBoxMultiplayer::YouForgotToImplementOrDeclareServerClass()
 T CPhysBoxMultiplayer::~CPhysBoxMultiplayer()
 T CPhysConstraint::Activate()
 T CPhysConstraint::ActivateConstraint()
 T CPhysConstraint::Deactivate()
 T CPhysConstraint::DrawDebugGeometryOverlays()
 T CPhysConstraint::DrawDebugTextOverlays()
 T CPhysConstraint::GetConstraintObjects(hl_constraint_info_t&)
 T CPhysConstraint::GetDataDescMap()
 T CPhysConstraint::InputBreak(inputdata_t&)
 T CPhysConstraint::InputOnBreak(inputdata_t&)
 T CPhysConstraint::InputTurnOff(inputdata_t&)
 T CPhysConstraint::InputTurnOn(inputdata_t&)
 T CPhysConstraint::NotifySystemEvent(CBaseEntity*, notify_system_event_t, notify_system_event_params_t const&)
 T CPhysConstraint::OnBreak()
 T CPhysConstraint::OnConstraintSetup(hl_constraint_info_t&)
 T CPhysConstraint::Precache()
 T CPhysConstraint::Spawn()
 T CPhysConstraint::~CPhysConstraint()
 T CPhysConstraintEvents::ConstraintBroken(IPhysicsConstraint*)
 T CPhysConstraintSystem::GetDataDescMap()
 T CPhysConstraintSystem::Spawn()
 T CPhysConstraintSystem::~CPhysConstraintSystem()
 T CPhysConvert::GetDataDescMap()
 T CPhysConvert::InputConvertTarget(inputdata_t&)
 T CPhysConvert::~CPhysConvert()
 T CPhysExplosion::DrawDebugTextOverlays()
 T CPhysExplosion::Explode(CBaseEntity*, CBaseEntity*)
 T CPhysExplosion::FindEntity(CBaseEntity*, CBaseEntity*, CBaseEntity*)
 T CPhysExplosion::GetDataDescMap()
 T CPhysExplosion::InputExplode(inputdata_t&)
 T CPhysExplosion::Spawn()
 T CPhysExplosion::~CPhysExplosion()
 T CPhysFixed::CreateConstraint(IPhysicsConstraintGroup*, hl_constraint_info_t const&)
 T CPhysFixed::DrawDebugGeometryOverlays()
 T CPhysFixed::DrawDebugTextOverlays()
 T CPhysFixed::~CPhysFixed()
 T CPhysForce::Activate()
 T CPhysForce::ActivateForce()
 T CPhysForce::ForceOff()
 T CPhysForce::GetDataDescMap()
 T CPhysForce::InputActivate(inputdata_t&)
 T CPhysForce::InputDeactivate(inputdata_t&)
 T CPhysForce::InputForceScale(inputdata_t&)
 T CPhysForce::OnActivate()
 T CPhysForce::OnRestore()
 T CPhysForce::ScaleForce(float)
 T CPhysForce::Spawn()
 T CPhysForce::~CPhysForce()
 T CPhysHinge::CreateConstraint(IPhysicsConstraintGroup*, hl_constraint_info_t const&)
 T CPhysHinge::Deactivate()
 T CPhysHinge::DrawDebugGeometryOverlays()
 T CPhysHinge::GetDataDescMap()
 T CPhysHinge::InputSetHingeFriction(inputdata_t&)
 T CPhysHinge::InputSetVelocity(inputdata_t&)
 T CPhysHinge::IsWorldHinge(hl_constraint_info_t const&, int*)
 T CPhysHinge::NotifyVPhysicsStateChanged(IPhysicsObject*, CBaseEntity*, bool)
 T CPhysHinge::Spawn()
 T CPhysHinge::~CPhysHinge()
 T CPhysImpact::Activate()
 T CPhysImpact::GetDataDescMap()
 T CPhysImpact::InputImpact(inputdata_t&)
 T CPhysImpact::PointAtEntity()
 T CPhysImpact::Spawn()
 T CPhysImpact::~CPhysImpact()
 T CPhysLength::CreateConstraint(IPhysicsConstraintGroup*, hl_constraint_info_t const&)
 T CPhysLength::DrawDebugGeometryOverlays()
 T CPhysLength::GetDataDescMap()
 T CPhysLength::~CPhysLength()
 T CPhysMagnet::ConstraintBroken(IPhysicsConstraint*)
 T CPhysMagnet::DetachAll()
 T CPhysMagnet::DoMagnetSuck(CBaseEntity*)
 T CPhysMagnet::GetDataDescMap()
 T CPhysMagnet::GetServerClass()
 T CPhysMagnet::InputToggle(inputdata_t&)
 T CPhysMagnet::InputTurnOff(inputdata_t&)
 T CPhysMagnet::InputTurnOn(inputdata_t&)
 T CPhysMagnet::Precache()
 T CPhysMagnet::Spawn()
 T CPhysMagnet::Touch(CBaseEntity*)
 T CPhysMagnet::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CPhysMagnet::YouForgotToImplementOrDeclareServerClass()
 T CPhysMagnet::~CPhysMagnet()
 T CPhysMotor::Activate()
 T CPhysMotor::GetDataDescMap()
 T CPhysMotor::InputSetTargetSpeed(inputdata_t&)
 T CPhysMotor::InputTurnOff(inputdata_t&)
 T CPhysMotor::InputTurnOn(inputdata_t&)
 T CPhysMotor::OnRestore()
 T CPhysMotor::Spawn()
 T CPhysMotor::Think()
 T CPhysMotor::~CPhysMotor()
 T CPhysObjSaveRestoreOps::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CPhysObjSaveRestoreOps::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CPhysObjSaveRestoreOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CPhysObjSaveRestoreOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CPhysPulley::CreateConstraint(IPhysicsConstraintGroup*, hl_constraint_info_t const&)
 T CPhysPulley::DrawDebugGeometryOverlays()
 T CPhysPulley::GetDataDescMap()
 T CPhysPulley::~CPhysPulley()
 T CPhysSaveRestoreBlockHandler::AssociateModel(IPhysicsObject*, CPhysCollide const*)
 T CPhysSaveRestoreBlockHandler::AssociateModel(IPhysicsObject*, int)
 T CPhysSaveRestoreBlockHandler::CEntityRestoreSet::Add(CBaseEntity*, typedescription_t*, void**, PhysInterfaceId_t)
 T CPhysSaveRestoreBlockHandler::ForgetAllModels()
 T CPhysSaveRestoreBlockHandler::ForgetModel(IPhysicsObject*)
 T CPhysSaveRestoreBlockHandler::GetBlockName()
 T CPhysSaveRestoreBlockHandler::NoteBBox(Vector const&, Vector const&, CPhysCollide*)
 T CPhysSaveRestoreBlockHandler::OnEntityCreated(CBaseEntity*)
 T CPhysSaveRestoreBlockHandler::OnEntityDeleted(CBaseEntity*)
 T CPhysSaveRestoreBlockHandler::PostRestore()
 T CPhysSaveRestoreBlockHandler::PostSave()
 T CPhysSaveRestoreBlockHandler::PreRestore()
 T CPhysSaveRestoreBlockHandler::PreSave(CSaveRestoreData*)
 T CPhysSaveRestoreBlockHandler::QueueRestore(CBaseEntity*, typedescription_t*, void**, PhysInterfaceId_t)
 T CPhysSaveRestoreBlockHandler::QueueSave(CBaseEntity*, typedescription_t*, void**, PhysInterfaceId_t)
 T CPhysSaveRestoreBlockHandler::ReadRestoreHeaders(IRestore*)
 T CPhysSaveRestoreBlockHandler::Restore(IRestore*, bool)
 T CPhysSaveRestoreBlockHandler::RestoreBlock(IRestore*, PhysObjectHeader_t const&)
 T CPhysSaveRestoreBlockHandler::RestorePhysicsObjectAndModel(IRestore*, PhysObjectHeader_t const&, CPhysSaveRestoreBlockHandler::QueuedItem_t*, int)
 T CPhysSaveRestoreBlockHandler::Save(ISave*)
 T CPhysSaveRestoreBlockHandler::SaveQueueFunc(CPhysSaveRestoreBlockHandler::QueuedItem_t const&, CPhysSaveRestoreBlockHandler::QueuedItem_t const&)
 T CPhysSaveRestoreBlockHandler::WriteSaveHeaders(ISave*)
 T CPhysSaveRestoreBlockHandler::~CPhysSaveRestoreBlockHandler()
 T CPhysSlideConstraint::CreateConstraint(IPhysicsConstraintGroup*, hl_constraint_info_t const&)
 T CPhysSlideConstraint::DrawDebugGeometryOverlays()
 T CPhysSlideConstraint::GetDataDescMap()
 T CPhysSlideConstraint::InputSetVelocity(inputdata_t&)
 T CPhysSlideConstraint::NotifyVPhysicsStateChanged(IPhysicsObject*, CBaseEntity*, bool)
 T CPhysSlideConstraint::~CPhysSlideConstraint()
 T CPhysSphere::CreateVPhysics()
 T CPhysSphere::OverridePropdata()
 T CPhysSphere::~CPhysSphere()
 T CPhysThruster::GetDataDescMap()
 T CPhysThruster::OnActivate()
 T CPhysThruster::SetupForces(IPhysicsObject*, Vector&, Vector&)
 T CPhysThruster::~CPhysThruster()
 T CPhysTorque::GetDataDescMap()
 T CPhysTorque::SetupForces(IPhysicsObject*, Vector&, Vector&)
 T CPhysTorque::Spawn()
 T CPhysTorque::~CPhysTorque()
 T CPhysicsCannister::BeginShutdownThink()
 T CPhysicsCannister::CannisterActivate(CBaseEntity*, Vector const&)
 T CPhysicsCannister::CreateVPhysics()
 T CPhysicsCannister::Deactivate()
 T CPhysicsCannister::Explode(CBaseEntity*)
 T CPhysicsCannister::ExplodeTouch(CBaseEntity*)
 T CPhysicsCannister::GetDataDescMap()
 T CPhysicsCannister::HasPhysicsAttacker(float)
 T CPhysicsCannister::HasPreferredCarryAnglesForPlayer(CBasePlayer*)
 T CPhysicsCannister::InputActivate(inputdata_t&)
 T CPhysicsCannister::InputDeactivate(inputdata_t&)
 T CPhysicsCannister::InputExplode(inputdata_t&)
 T CPhysicsCannister::InputWake(inputdata_t&)
 T CPhysicsCannister::IsAlive()
 T CPhysicsCannister::ObjectCaps()
 T CPhysicsCannister::OnAttemptPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CPhysicsCannister::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T CPhysicsCannister::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CPhysicsCannister::OnRestore()
 T CPhysicsCannister::OnTakeDamage(CTakeDamageInfo const&)
 T CPhysicsCannister::PhysGunLaunchAngularImpulse()
 T CPhysicsCannister::PhysGunLaunchVelocity(Vector const&, float)
 T CPhysicsCannister::Precache()
 T CPhysicsCannister::PreferredCarryAngles()
 T CPhysicsCannister::ShouldPuntUseLaunchForces(PhysGunForce_t)
 T CPhysicsCannister::ShutdownJet()
 T CPhysicsCannister::Spawn()
 T CPhysicsCannister::TestCollision(Ray_t const&, unsigned int, CGameTrace&)
 T CPhysicsCannister::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*)
 T CPhysicsCannister::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CPhysicsCannister::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CPhysicsCannister::VPhysicsUpdate(IPhysicsObject*)
 T CPhysicsCannister::~CPhysicsCannister()
 T CPhysicsEntitySolver::GetDataDescMap()
 T CPhysicsEntitySolver::Spawn()
 T CPhysicsEntitySolver::Think()
 T CPhysicsEntitySolver::UpdateOnRemove()
 T CPhysicsEntitySolver::~CPhysicsEntitySolver()
 T CPhysicsGameTrace::VehiclePointInWater(Vector const&)
 T CPhysicsGameTrace::VehicleTraceRay(Ray_t const&, void*, CGameTrace*)
 T CPhysicsGameTrace::VehicleTraceRayWithWater(Ray_t const&, void*, CGameTrace*)
 T CPhysicsHook::FindOrAddVehicleScript(char const*, vehicleparams_t*, vehiclesounds_t*)
 T CPhysicsHook::FrameUpdatePostEntityThink()
 T CPhysicsHook::Init()
 T CPhysicsHook::LevelInitPostEntity()
 T CPhysicsHook::LevelInitPreEntity()
 T CPhysicsHook::LevelShutdownPostEntity()
 T CPhysicsHook::LevelShutdownPreEntity()
 T CPhysicsHook::Name()
 T CPhysicsHook::PreClientUpdate()
 T CPhysicsHook::~CPhysicsHook()
 T CPhysicsNPCSolver::BecomePenetrationSolver()
 T CPhysicsNPCSolver::CheckTouching()
 T CPhysicsNPCSolver::GetDataDescMap()
 T CPhysicsNPCSolver::IsContactOnNPCHead(IPhysicsFrictionSnapshot*, IPhysicsObject*, CAI_BaseNPC*)
 T CPhysicsNPCSolver::IsIntersecting()
 T CPhysicsNPCSolver::OnRestore()
 T CPhysicsNPCSolver::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)
 T CPhysicsNPCSolver::Spawn()
 T CPhysicsNPCSolver::Think()
 T CPhysicsNPCSolver::UpdateOnRemove()
 T CPhysicsNPCSolver::~CPhysicsNPCSolver()
 T CPhysicsPlayerCallback::ShouldMoveTo(IPhysicsObject*, Vector const&)
 T CPhysicsProp::CPhysicsProp()
 T CPhysicsProp::CanObstructNavAreas() const
 T CPhysicsProp::ClearFlagsThink()
 T CPhysicsProp::ComputeEnablingImpulse(int, gamevcollisionevent_t*)
 T CPhysicsProp::CreateVPhysics()
 T CPhysicsProp::DrawDebugTextOverlays()
 T CPhysicsProp::EnableMotion()
 T CPhysicsProp::GetDataDescMap()
 T CPhysicsProp::GetMass() const
 T CPhysicsProp::GetNavObstructionHeight() const
 T CPhysicsProp::GetObstructingEntity()
 T CPhysicsProp::GetPropDataAngles(char const*, QAngle&)
 T CPhysicsProp::GetServerClass()
 T CPhysicsProp::GetUsePriority(CBaseEntity*)
 T CPhysicsProp::HandleAnyCollisionInteractions(int, gamevcollisionevent_t*)
 T CPhysicsProp::InputDisableFloating(inputdata_t&)
 T CPhysicsProp::InputDisableMotion(inputdata_t&)
 T CPhysicsProp::InputDisableNavObstruction(inputdata_t&)
 T CPhysicsProp::InputEnableMotion(inputdata_t&)
 T CPhysicsProp::InputEnableNavObstruction(inputdata_t&)
 T CPhysicsProp::InputSleep(inputdata_t&)
 T CPhysicsProp::InputWake(inputdata_t&)
 T CPhysicsProp::IsMotionEnabled() const
 T CPhysicsProp::IsPotentialTankProjectile()
 T CPhysicsProp::IsPotentiallyAbleToObstructNavAreas() const
 T CPhysicsProp::NavThink()
 T CPhysicsProp::ObjectCaps()
 T CPhysicsProp::OnNavMeshLoaded()
 T CPhysicsProp::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T CPhysicsProp::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CPhysicsProp::OnScavengeSpawn()
 T CPhysicsProp::OnSpawnBreakProp(CBreakableProp*)
 T CPhysicsProp::OnTakeDamage(CTakeDamageInfo const&)
 T CPhysicsProp::OverridePropdata()
 T CPhysicsProp::Precache()
 T CPhysicsProp::Spawn()
 T CPhysicsProp::UpdateOnRemove()
 T CPhysicsProp::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CPhysicsProp::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CPhysicsProp::VPhysicsUpdate(IPhysicsObject*)
 T CPhysicsProp::WasHitByTank() const
 T CPhysicsProp::YouForgotToImplementOrDeclareServerClass()
 T CPhysicsProp::~CPhysicsProp()
 T CPhysicsPropRespawnable::Event_Killed(CTakeDamageInfo const&)
 T CPhysicsPropRespawnable::GetDataDescMap()
 T CPhysicsPropRespawnable::Materialize()
 T CPhysicsPropRespawnable::Spawn()
 T CPhysicsPropRespawnable::~CPhysicsPropRespawnable()
 T CPhysicsPushedEntities::AddEntity(CBaseEntity*)
 T CPhysicsPushedEntities::ComputeRotationalPushDirection(CBaseEntity*, CPhysicsPushedEntities::RotatingPushMove_t const&, Vector*, CBaseEntity*)
 T CPhysicsPushedEntities::FinishPush(bool, CPhysicsPushedEntities::RotatingPushMove_t const*)
 T CPhysicsPushedEntities::FinishRotPushedEntity(CBaseEntity*, CPhysicsPushedEntities::RotatingPushMove_t const&)
 T CPhysicsPushedEntities::GenerateBlockingEntityList()
 T CPhysicsPushedEntities::GenerateBlockingEntityListAddBox(Vector const&)
 T CPhysicsPushedEntities::IsPushedPositionValid(CBaseEntity*)
 T CPhysicsPushedEntities::LinearlyMoveRootEntity(CBaseEntity*, float, Vector*)
 T CPhysicsPushedEntities::PerformLinearPush(CBaseEntity*, float)
 T CPhysicsPushedEntities::PerformRotatePush(CBaseEntity*, float)
 T CPhysicsPushedEntities::RotateRootEntity(CBaseEntity*, float, CPhysicsPushedEntities::RotatingPushMove_t&)
 T CPhysicsPushedEntities::SetupAllInHierarchy(CBaseEntity*)
 T CPhysicsPushedEntities::SpeculativelyCheckPush(CPhysicsPushedEntities::PhysicsPushedInfo_t&, Vector const&, bool, CBaseEntity*)
 T CPhysicsPushedEntities::StoreMovedEntities(physicspushlist_t&)
 T CPhysicsPushedEntities::~CPhysicsPushedEntities()
 T CPhysicsShake::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)
 T CPhysicsSpring::Activate()
 T CPhysicsSpring::DrawDebugGeometryOverlays()
 T CPhysicsSpring::DrawDebugTextOverlays()
 T CPhysicsSpring::GetDataDescMap()
 T CPhysicsSpring::GetSpringObjectConnections(string_t, string_t, IPhysicsObject**, IPhysicsObject**)
 T CPhysicsSpring::InputSetSpringConstant(inputdata_t&)
 T CPhysicsSpring::InputSetSpringDamping(inputdata_t&)
 T CPhysicsSpring::InputSetSpringLength(inputdata_t&)
 T CPhysicsSpring::NotifySystemEvent(CBaseEntity*, notify_system_event_t, notify_system_event_params_t const&)
 T CPhysicsSpring::Spawn()
 T CPhysicsSpring::~CPhysicsSpring()
 T CPhysicsWind::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)
 T CPhysicsWire::GetDataDescMap()
 T CPhysicsWire::Precache()
 T CPhysicsWire::Spawn()
 T CPhysicsWire::~CPhysicsWire()
 T CPipeBomb::CanFidget()
 T CPipeBomb::EmitGrenade(Vector, QAngle, Vector, Vector, CBasePlayer*)
 T CPipeBomb::GetDataDescMap()
 T CPipeBomb::GetDeployActivity()
 T CPipeBomb::GetServerClass()
 T CPipeBomb::GetViewmodelMeleeActivity()
 T CPipeBomb::GetWeaponFireActivity(PlayerAnimEvent_t, Activity)
 T CPipeBomb::GetWeaponID() const
 T CPipeBomb::IsGrenade() const
 T CPipeBomb::SecondaryAttack()
 T CPipeBomb::SendWeaponAnim(int)
 T CPipeBomb::TranslateViewmodelActivity(Activity) const
 T CPipeBomb::YouForgotToImplementOrDeclareServerClass()
 T CPipeBomb::~CPipeBomb()
 T CPipeBombProjectile::BeepThink()
 T CPipeBombProjectile::BounceSound()
 T CPipeBombProjectile::BounceTouch(CBaseEntity*)
 T CPipeBombProjectile::Create(Vector const&, QAngle const&, Vector const&, Vector const&, CBaseCombatCharacter*, float)
 T CPipeBombProjectile::Detonate()
 T CPipeBombProjectile::GetDamageType() const
 T CPipeBombProjectile::GetServerClass()
 T CPipeBombProjectile::GetShakeAmplitude()
 T CPipeBombProjectile::GetShakeRadius()
 T CPipeBombProjectile::Precache()
 T CPipeBombProjectile::ResolveFlyCollisionCustom(CGameTrace&, Vector&)
 T CPipeBombProjectile::Spawn()
 T CPipeBombProjectile::YouForgotToImplementOrDeclareServerClass()
 T CPipeBombProjectile::~CPipeBombProjectile()
 T CPistol::CanBeDualWielded() const
 T CPistol::CanFidget()
 T CPistol::GetDataDescMap()
 T CPistol::GetDeployActivity()
 T CPistol::GetLayerForViewmodelActivity(Activity) const
 T CPistol::GetRateOfFire() const
 T CPistol::GetRumbleEffect() const
 T CPistol::GetServerClass()
 T CPistol::GetViewmodelMeleeActivity()
 T CPistol::GetWeaponDeployActivity(PlayerAnimEvent_t, Activity)
 T CPistol::GetWeaponFireActivity(PlayerAnimEvent_t, Activity)
 T CPistol::GetWeaponID() const
 T CPistol::GetWeaponReloadActivity(PlayerAnimEvent_t, Activity)
 T CPistol::GetWorldModel() const
 T CPistol::IsFullyAutomatic() const
 T CPistol::Precache()
 T CPistol::SendWeaponAnim(int)
 T CPistol::TranslateViewmodelActivity(Activity) const
 T CPistol::WeaponTranslateMainActivity(Activity)
 T CPistol::YouForgotToImplementOrDeclareServerClass()
 T CPistol::~CPistol()
 T CPlane::CPlane()
 T CPlane::InitializePlane(Vector const&, Vector const&)
 T CPlane::PointDist(Vector const&)
 T CPlane::PointInFront(Vector const&)
 T CPlasma::CPlasma()
 T CPlasma::EnableSmoke(int)
 T CPlasma::GetDataDescMap()
 T CPlasma::GetServerClass()
 T CPlasma::Precache()
 T CPlasma::YouForgotToImplementOrDeclareServerClass()
 T CPlasma::~CPlasma()
 T CPlatTrigger::ObjectCaps()
 T CPlatTrigger::SpawnInsideTrigger(CFuncPlat*)
 T CPlatTrigger::Touch(CBaseEntity*)
 T CPlatTrigger::~CPlatTrigger()
 T CPlayerInfo::ChangeTeam(int)
 T CPlayerInfo::GetAbsAngles()
 T CPlayerInfo::GetAbsOrigin()
 T CPlayerInfo::GetArmorValue()
 T CPlayerInfo::GetDeathCount()
 T CPlayerInfo::GetFragCount()
 T CPlayerInfo::GetHealth()
 T CPlayerInfo::GetLastUserCommand()
 T CPlayerInfo::GetLocalAngles()
 T CPlayerInfo::GetLocalOrigin()
 T CPlayerInfo::GetMaxHealth()
 T CPlayerInfo::GetModelName()
 T CPlayerInfo::GetName()
 T CPlayerInfo::GetNetworkIDString()
 T CPlayerInfo::GetPlayerMaxs()
 T CPlayerInfo::GetPlayerMins()
 T CPlayerInfo::GetTeamIndex()
 T CPlayerInfo::GetUserID()
 T CPlayerInfo::GetWeaponName()
 T CPlayerInfo::IsConnected()
 T CPlayerInfo::IsDead()
 T CPlayerInfo::IsEFlagSet(int)
 T CPlayerInfo::IsFakeClient()
 T CPlayerInfo::IsHLTV()
 T CPlayerInfo::IsInAVehicle()
 T CPlayerInfo::IsObserver()
 T CPlayerInfo::IsPlayer()
 T CPlayerInfo::PostClientMessagesSent()
 T CPlayerInfo::RemoveAllItems(bool)
 T CPlayerInfo::RunPlayerMove(CBotCmd*)
 T CPlayerInfo::SetAbsAngles(QAngle&)
 T CPlayerInfo::SetAbsOrigin(Vector&)
 T CPlayerInfo::SetActiveWeapon(char const*)
 T CPlayerInfo::SetLastUserCommand(CBotCmd const&)
 T CPlayerInfo::SetLocalAngles(QAngle const&)
 T CPlayerInfo::SetLocalOrigin(Vector const&)
 T CPlayerInfoManager::GetGlobalVars()
 T CPlayerInfoManager::GetPlayerInfo(edict_t*)
 T CPlayerLocalData::CPlayerLocalData()
 T CPlayerLocalData::NetworkStateChanged()
 T CPlayerLocalData::NetworkStateChanged(void*)
 T CPlayerLocalData::NetworkVar_m_audio::NetworkStateChanged()
 T CPlayerLocalData::NetworkVar_m_audio::NetworkStateChanged(void*)
 T CPlayerLocalData::NetworkVar_m_skybox3d::NetworkStateChanged()
 T CPlayerLocalData::NetworkVar_m_skybox3d::NetworkStateChanged(void*)
 T CPlayerLocalData::UpdateAreaBits(CBasePlayer*, unsigned char*)
 T CPlayerMove::CPlayerMove()
 T CPlayerMove::CheckMovingGround(CBasePlayer*, double)
 T CPlayerMove::FinishCommand(CBasePlayer*)
 T CPlayerMove::FinishMove(CBasePlayer*, CUserCmd*, CMoveData*)
 T CPlayerMove::RunCommand(CBasePlayer*, CUserCmd*, IMoveHelper*)
 T CPlayerMove::RunPostThink(CBasePlayer*)
 T CPlayerMove::RunPreThink(CBasePlayer*)
 T CPlayerMove::RunThink(CBasePlayer*, double)
 T CPlayerMove::SetupMove(CBasePlayer*, CUserCmd*, IMoveHelper*, CMoveData*)
 T CPlayerMove::StartCommand(CBasePlayer*, CUserCmd*)
 T CPlayerMove::~CPlayerMove()
 T CPlayerPickupController* _CreateEntityTemplate<CPlayerPickupController>(CPlayerPickupController*, char const*)
 T CPlayerPickupController::OnControls(CBaseEntity*)
 T CPlayerPickupController::OnRestore()
 T CPlayerPickupController::Shutdown(bool)
 T CPlayerPickupController::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CPlayerPickupController::VPhysicsShadowUpdate(IPhysicsObject*)
 T CPlayerPickupController::VPhysicsUpdate(IPhysicsObject*)
 T CPlayerPickupController::~CPlayerPickupController()
 T CPlayerResource::GetDataDescMap()
 T CPlayerResource::GetServerClass()
 T CPlayerResource::ObjectCaps()
 T CPlayerResource::ResourceThink()
 T CPlayerResource::Spawn()
 T CPlayerResource::UpdatePlayerData()
 T CPlayerResource::UpdateTransmitState()
 T CPlayerResource::YouForgotToImplementOrDeclareServerClass()
 T CPlayerResource::~CPlayerResource()
 T CPluginBotManager::CreateBot(char const*)
 T CPluginBotManager::GetBotController(edict_t*)
 T CPluginHelpersCheck::CreateMessage(char const*, edict_t*, DIALOG_TYPE, KeyValues*)
 T CPointAngleSensor* _CreateEntityTemplate<CPointAngleSensor>(CPointAngleSensor*, char const*)
 T CPointAngleSensor::Activate()
 T CPointAngleSensor::DrawDebugTextOverlays()
 T CPointAngleSensor::GetDataDescMap()
 T CPointAngleSensor::InputDisable(inputdata_t&)
 T CPointAngleSensor::InputEnable(inputdata_t&)
 T CPointAngleSensor::InputSetTargetEntity(inputdata_t&)
 T CPointAngleSensor::InputTest(inputdata_t&)
 T CPointAngleSensor::InputToggle(inputdata_t&)
 T CPointAngleSensor::IsFacingWithinTolerance(CBaseEntity*, CBaseEntity*, float, float*)
 T CPointAngleSensor::KeyValue(char const*, char const*)
 T CPointAngleSensor::Spawn()
 T CPointAngleSensor::Think()
 T CPointAngleSensor::~CPointAngleSensor()
 T CPointAngularVelocitySensor::Activate()
 T CPointAngularVelocitySensor::CompareToThreshold(CBaseEntity*, float, bool)
 T CPointAngularVelocitySensor::DrawDebugLines()
 T CPointAngularVelocitySensor::FireCompareOutput(int, CBaseEntity*)
 T CPointAngularVelocitySensor::GetDataDescMap()
 T CPointAngularVelocitySensor::InputTest(inputdata_t&)
 T CPointAngularVelocitySensor::InputTestWithInterval(inputdata_t&)
 T CPointAngularVelocitySensor::SampleAngularVelocity(CBaseEntity*)
 T CPointAngularVelocitySensor::Spawn()
 T CPointAngularVelocitySensor::Think()
 T CPointAngularVelocitySensor::~CPointAngularVelocitySensor()
 T CPointBonusMapsAccessor::Activate()
 T CPointBonusMapsAccessor::GetDataDescMap()
 T CPointBonusMapsAccessor::InputComplete(inputdata_t&)
 T CPointBonusMapsAccessor::InputSave(inputdata_t&)
 T CPointBonusMapsAccessor::InputUnlock(inputdata_t&)
 T CPointBonusMapsAccessor::~CPointBonusMapsAccessor()
 T CPointBroadcastClientCommand::GetDataDescMap()
 T CPointBroadcastClientCommand::InputCommand(inputdata_t&)
 T CPointBroadcastClientCommand::~CPointBroadcastClientCommand()
 T CPointClientCommand::GetDataDescMap()
 T CPointClientCommand::InputCommand(inputdata_t&)
 T CPointClientCommand::~CPointClientCommand()
 T CPointCommentaryNode::Activate()
 T CPointCommentaryNode::CleanupPostCommentary()
 T CPointCommentaryNode::FinishCommentary(bool)
 T CPointCommentaryNode::GetDataDescMap()
 T CPointCommentaryNode::GetServerClass()
 T CPointCommentaryNode::InputDisable(inputdata_t&)
 T CPointCommentaryNode::InputEnable(inputdata_t&)
 T CPointCommentaryNode::InputStartCommentary(inputdata_t&)
 T CPointCommentaryNode::InputStartUnstoppableCommentary(inputdata_t&)
 T CPointCommentaryNode::Precache()
 T CPointCommentaryNode::SetTransmit(CCheckTransmitInfo*, bool)
 T CPointCommentaryNode::Spawn()
 T CPointCommentaryNode::SpinThink()
 T CPointCommentaryNode::StartCommentary()
 T CPointCommentaryNode::TeleportTo(CBasePlayer*)
 T CPointCommentaryNode::TestCollision(Ray_t const&, unsigned int, CGameTrace&)
 T CPointCommentaryNode::UpdateTransmitState()
 T CPointCommentaryNode::UpdateViewPostThink()
 T CPointCommentaryNode::UpdateViewThink()
 T CPointCommentaryNode::YouForgotToImplementOrDeclareServerClass()
 T CPointCommentaryNode::~CPointCommentaryNode()
 T CPointDevShotCamera::DevShotThink_PostShot()
 T CPointDevShotCamera::DevShotThink_Setup()
 T CPointDevShotCamera::DevShotThink_TakeShot()
 T CPointDevShotCamera::GetDataDescMap()
 T CPointDevShotCamera::Spawn()
 T CPointDevShotCamera::UpdateTransmitState()
 T CPointDevShotCamera::~CPointDevShotCamera()
 T CPointEntity::KeyValue(char const*, char const*)
 T CPointEntity::ObjectCaps()
 T CPointEntity::Spawn()
 T CPointEntity::~CPointEntity()
 T CPointEntityFinder::Activate()
 T CPointEntityFinder::FindByDistance()
 T CPointEntityFinder::FindByRandom()
 T CPointEntityFinder::FindEntity()
 T CPointEntityFinder::GetDataDescMap()
 T CPointEntityFinder::InputFindEntity(inputdata_t&)
 T CPointEntityFinder::~CPointEntityFinder()
 T CPointGamestatsCounter::GetDataDescMap()
 T CPointGamestatsCounter::InputDisable(inputdata_t&)
 T CPointGamestatsCounter::InputEnable(inputdata_t&)
 T CPointGamestatsCounter::InputIncrement(inputdata_t&)
 T CPointGamestatsCounter::InputSetName(inputdata_t&)
 T CPointGamestatsCounter::~CPointGamestatsCounter()
 T CPointHurt::GetDataDescMap()
 T CPointHurt::HurtThink()
 T CPointHurt::InputHurt(inputdata_t&)
 T CPointHurt::InputToggle(inputdata_t&)
 T CPointHurt::InputTurnOff(inputdata_t&)
 T CPointHurt::InputTurnOn(inputdata_t&)
 T CPointHurt::Precache()
 T CPointHurt::Spawn()
 T CPointHurt::~CPointHurt()
 T CPointPlayerMoveConstraint::Activate()
 T CPointPlayerMoveConstraint::ConstraintThink()
 T CPointPlayerMoveConstraint::GetDataDescMap()
 T CPointPlayerMoveConstraint::InputTurnOff(inputdata_t&)
 T CPointPlayerMoveConstraint::InputTurnOn(inputdata_t&)
 T CPointPlayerMoveConstraint::UpdateTransmitState()
 T CPointPlayerMoveConstraint::~CPointPlayerMoveConstraint()
 T CPointProximitySensor::Activate()
 T CPointProximitySensor::GetDataDescMap()
 T CPointProximitySensor::InputDisable(inputdata_t&)
 T CPointProximitySensor::InputEnable(inputdata_t&)
 T CPointProximitySensor::InputSetTargetEntity(inputdata_t&)
 T CPointProximitySensor::InputToggle(inputdata_t&)
 T CPointProximitySensor::Think()
 T CPointProximitySensor::~CPointProximitySensor()
 T CPointPush::Activate()
 T CPointPush::GetDataDescMap()
 T CPointPush::InputDisable(inputdata_t&)
 T CPointPush::InputEnable(inputdata_t&)
 T CPointPush::PushEntity(CBaseEntity*)
 T CPointPush::PushThink()
 T CPointPush::~CPointPush()
 T CPointServerCommand::GetDataDescMap()
 T CPointServerCommand::InputCommand(inputdata_t&)
 T CPointServerCommand::~CPointServerCommand()
 T CPointSpotlight::Activate()
 T CPointSpotlight::ComputeRenderInfo()
 T CPointSpotlight::CreateEfficientSpotlight()
 T CPointSpotlight::GetDataDescMap()
 T CPointSpotlight::InputLightOff(inputdata_t&)
 T CPointSpotlight::InputLightOn(inputdata_t&)
 T CPointSpotlight::OnEntityEvent(EntityEvent_t, void*)
 T CPointSpotlight::Precache()
 T CPointSpotlight::Spawn()
 T CPointSpotlight::SpotlightCreate()
 T CPointSpotlight::SpotlightCurrentPos()
 T CPointSpotlight::SpotlightDestroy()
 T CPointSpotlight::SpotlightThink()
 T CPointSpotlight::SpotlightUpdate()
 T CPointSpotlight::UpdateTransmitState()
 T CPointSpotlight::~CPointSpotlight()
 T CPointTeleport::Activate()
 T CPointTeleport::DoTeleport(inputdata_t&, Vector const&, QAngle const&)
 T CPointTeleport::GetDataDescMap()
 T CPointTeleport::InputTeleport(inputdata_t&)
 T CPointTeleport::InputTeleportToCurrentPos(inputdata_t&)
 T CPointTeleport::~CPointTeleport()
 T CPointTemplate::AddTemplate(CBaseEntity*, char const*, int)
 T CPointTemplate::AllowNameFixup()
 T CPointTemplate::CreateInstance(Vector const&, QAngle const&, CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >*, bool)
 T CPointTemplate::FinishBuildingTemplates()
 T CPointTemplate::GetDataDescMap()
 T CPointTemplate::GetNumTemplateEntities()
 T CPointTemplate::GetNumTemplates()
 T CPointTemplate::GetTemplateEntity(int)
 T CPointTemplate::GetTemplateIndexForTemplate(int)
 T CPointTemplate::InputForceSpawn(inputdata_t&)
 T CPointTemplate::PerformPrecache()
 T CPointTemplate::Precache()
 T CPointTemplate::ShouldRemoveTemplateEntities()
 T CPointTemplate::Spawn()
 T CPointTemplate::StartBuildingTemplates()
 T CPointTemplate::~CPointTemplate()
 T CPointTemplatePrecacher::LevelInitPreEntity()
 T CPointTemplatePrecacher::Shutdown()
 T CPointTemplatePrecacher::~CPointTemplatePrecacher()
 T CPointVelocitySensor::Activate()
 T CPointVelocitySensor::GetDataDescMap()
 T CPointVelocitySensor::InputDisable(inputdata_t&)
 T CPointVelocitySensor::InputEnable(inputdata_t&)
 T CPointVelocitySensor::SampleVelocity()
 T CPointVelocitySensor::Spawn()
 T CPointVelocitySensor::Think()
 T CPointVelocitySensor::~CPointVelocitySensor()
 T CPoseController::BuildPoseIndexList()
 T CPoseController::BuildPropList()
 T CPoseController::GetDataDescMap()
 T CPoseController::GetServerClass()
 T CPoseController::InputGetFMod(inputdata_t&)
 T CPoseController::InputRandomizeFMod(inputdata_t&)
 T CPoseController::InputSetCycleFrequency(inputdata_t&)
 T CPoseController::InputSetFModAmplitude(inputdata_t&)
 T CPoseController::InputSetFModRate(inputdata_t&)
 T CPoseController::InputSetFModTimeOffset(inputdata_t&)
 T CPoseController::InputSetFModType(inputdata_t&)
 T CPoseController::InputSetInterpolationTime(inputdata_t&)
 T CPoseController::InputSetPoseParameterName(inputdata_t&)
 T CPoseController::InputSetPoseValue(inputdata_t&)
 T CPoseController::RandomizeFMod(float)
 T CPoseController::SetCurrentPose(float)
 T CPoseController::Spawn()
 T CPoseController::Think()
 T CPoseController::YouForgotToImplementOrDeclareServerClass()
 T CPoseController::~CPoseController()
 T CPostClientMessageManager::AddEntity(CBaseEntity*)
 T CPostClientMessageManager::~CPostClientMessageManager()
 T CPostProcessController::Activate()
 T CPostProcessController::CPostProcessController()
 T CPostProcessController::GetDataDescMap()
 T CPostProcessController::GetServerClass()
 T CPostProcessController::InputSetFadeTime(inputdata_t&)
 T CPostProcessController::InputSetFadeToBlackStrength(inputdata_t&)
 T CPostProcessController::InputSetLocalContrastEdgeStrength(inputdata_t&)
 T CPostProcessController::InputSetLocalContrastStrength(inputdata_t&)
 T CPostProcessController::InputSetVignetteBlurStrength(inputdata_t&)
 T CPostProcessController::InputSetVignetteEnd(inputdata_t&)
 T CPostProcessController::InputSetVignetteStart(inputdata_t&)
 T CPostProcessController::Spawn()
 T CPostProcessController::UpdateTransmitState()
 T CPostProcessController::YouForgotToImplementOrDeclareServerClass()
 T CPostProcessController::~CPostProcessController()
 T CPostProcessSystem::FireGameEvent(IGameEvent*)
 T CPostProcessSystem::InitMasterController()
 T CPostProcessSystem::LevelInitPostEntity()
 T CPostProcessSystem::LevelInitPreEntity()
 T CPostProcessSystem::~CPostProcessSystem()
 T CPounceAwardTemplate::CPounceAwardTemplate(int)
 T CPounceAwardTemplate::FireGameEvent(IGameEvent*)
 T CPounceAwardTemplate::OnCreate()
 T CPounceAwardTemplate::~CPounceAwardTemplate()
 T CPrecacheOtherList::LevelInitPreEntity()
 T CPrecacheOtherList::LevelShutdownPostEntity()
 T CPrecacheOtherList::~CPrecacheOtherList()
 T CPrecacheSystem::CPrecacheSystem()
 T CPrecacheSystem::Init()
 T CPrecacheSystem::IsPerFrame()
 T CPrecacheSystem::LevelInitPostEntity()
 T CPrecacheSystem::LevelInitPreEntity()
 T CPrecacheSystem::LevelShutdownPostEntity()
 T CPrecacheSystem::LevelShutdownPreEntity()
 T CPrecacheSystem::Name()
 T CPrecacheSystem::OnRestore()
 T CPrecacheSystem::OnSave()
 T CPrecacheSystem::PostInit()
 T CPrecacheSystem::SafeRemoveIfDesired()
 T CPrecacheSystem::Shutdown()
 T CPrecacheSystem::~CPrecacheSystem()
 T CPrecipitation::CPrecipitation()
 T CPrecipitation::GetDataDescMap()
 T CPrecipitation::GetServerClass()
 T CPrecipitation::Spawn()
 T CPrecipitation::UpdateTransmitState()
 T CPrecipitation::YouForgotToImplementOrDeclareServerClass()
 T CPrecipitation::~CPrecipitation()
 T CPrecipitationBlocker::GetDataDescMap()
 T CPrecipitationBlocker::GetServerClass()
 T CPrecipitationBlocker::Spawn()
 T CPrecipitationBlocker::UpdateTransmitState()
 T CPrecipitationBlocker::YouForgotToImplementOrDeclareServerClass()
 T CPrecipitationBlocker::~CPrecipitationBlocker()
 T CPredictedViewModel::CPredictedViewModel()
 T CPredictedViewModel::CalcViewModelLag(Vector&, QAngle&, QAngle&)
 T CPredictedViewModel::GetServerClass()
 T CPredictedViewModel::YouForgotToImplementOrDeclareServerClass()
 T CPredictedViewModel::~CPredictedViewModel()
 T CProjectedDecal::Activate()
 T CProjectedDecal::GetDataDescMap()
 T CProjectedDecal::InputActivate(inputdata_t&)
 T CProjectedDecal::KeyValue(char const*, char const*)
 T CProjectedDecal::Spawn()
 T CProjectedDecal::StaticDecal()
 T CProjectedDecal::TriggerDecal(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CProjectedDecal::~CProjectedDecal()
 T CPropData::GetRandomChunkModel(char const*, int)
 T CPropData::LevelInitPreEntity()
 T CPropData::LevelShutdownPostEntity()
 T CPropData::ParsePropDataFile()
 T CPropData::ParsePropFromBase(CBaseEntity*, char const*)
 T CPropData::ParsePropFromKV(CBaseEntity*, KeyValues*, KeyValues*)
 T CPropData::~CPropData()
 T CPropDoorRotating::AngularMove(QAngle const&, float)
 T CPropDoorRotating::BeginClosing()
 T CPropDoorRotating::BeginOpening(CBaseEntity*)
 T CPropDoorRotating::CalculateDoorVolume(QAngle, QAngle, Vector*, Vector*)
 T CPropDoorRotating::CheckDoorClear(doorCheck_e)
 T CPropDoorRotating::ComputeDoorExtent(Extent*, unsigned int)
 T CPropDoorRotating::DoorCanClose(bool)
 T CPropDoorRotating::DoorResume()
 T CPropDoorRotating::DoorStop()
 T CPropDoorRotating::DoorTeleportToSpawnPosition()
 T CPropDoorRotating::DrawDebugTextOverlays()
 T CPropDoorRotating::GetDataDescMap()
 T CPropDoorRotating::GetNPCOpenData(CAI_BaseNPC*, opendata_t&)
 T CPropDoorRotating::GetOpenInterval()
 T CPropDoorRotating::InputSetRotationDistance(inputdata_t&)
 T CPropDoorRotating::InputSetSpeed(inputdata_t&)
 T CPropDoorRotating::IsHingeOnLeft()
 T CPropDoorRotating::MoveDone()
 T CPropDoorRotating::OnDoorClosed()
 T CPropDoorRotating::OnDoorOpened()
 T CPropDoorRotating::OnRestore()
 T CPropDoorRotating::OverridePropdata()
 T CPropDoorRotating::PhysicsSolidMaskForEntity() const
 T CPropDoorRotating::Spawn()
 T CPropDoorRotating::~CPropDoorRotating()
 T CPropDoorRotatingBreakable::DrawDebugTextOverlays()
 T CPropDoorRotatingBreakable::Event_Killed(CTakeDamageInfo const&)
 T CPropDoorRotatingBreakable::GetDataDescMap()
 T CPropDoorRotatingBreakable::InputSetBreakable(inputdata_t&)
 T CPropDoorRotatingBreakable::InputSetUnbreakable(inputdata_t&)
 T CPropDoorRotatingBreakable::IsAbleToCloseAreaPortals() const
 T CPropDoorRotatingBreakable::OnDoorClosed()
 T CPropDoorRotatingBreakable::OnDoorOpened()
 T CPropDoorRotatingBreakable::OnTakeDamage(CTakeDamageInfo const&)
 T CPropDoorRotatingBreakable::Precache()
 T CPropDoorRotatingBreakable::PrecacheBreakables()
 T CPropDoorRotatingBreakable::Spawn()
 T CPropDoorRotatingBreakable::~CPropDoorRotatingBreakable()
 T CPropDoorRotatingCheckpoint::GetDataDescMap()
 T CPropDoorRotatingCheckpoint::GetServerClass()
 T CPropDoorRotatingCheckpoint::GetUsePriority(CBaseEntity*)
 T CPropDoorRotatingCheckpoint::IsCheckpointDoor() const
 T CPropDoorRotatingCheckpoint::IsCheckpointExitDoor() const
 T CPropDoorRotatingCheckpoint::IsUsableByTeam(int) const
 T CPropDoorRotatingCheckpoint::OnCheckpointDoorUnlocked(CBaseEntity*)
 T CPropDoorRotatingCheckpoint::OnDoorClosed()
 T CPropDoorRotatingCheckpoint::OnDoorOpened()
 T CPropDoorRotatingCheckpoint::OnTakeDamage(CTakeDamageInfo const&)
 T CPropDoorRotatingCheckpoint::Precache()
 T CPropDoorRotatingCheckpoint::Spawn()
 T CPropDoorRotatingCheckpoint::TryOpenClose(CBaseEntity*, CBaseEntity*, int)
 T CPropDoorRotatingCheckpoint::UnlockThink()
 T CPropDoorRotatingCheckpoint::YouForgotToImplementOrDeclareServerClass()
 T CPropDoorRotatingCheckpoint::~CPropDoorRotatingCheckpoint()
 T CPropGlowingObject::Activate()
 T CPropGlowingObject::CPropGlowingObject()
 T CPropGlowingObject::GetDataDescMap()
 T CPropGlowingObject::GetServerClass()
 T CPropGlowingObject::InputStartGlowing(inputdata_t&)
 T CPropGlowingObject::InputStopGlowing(inputdata_t&)
 T CPropGlowingObject::Precache()
 T CPropGlowingObject::Spawn()
 T CPropGlowingObject::UpdateOnRemove()
 T CPropGlowingObject::UpdateTransmitState()
 T CPropGlowingObject::YouForgotToImplementOrDeclareServerClass()
 T CPropGlowingObject::~CPropGlowingObject()
 T CPropHealthCabinet::CPropHealthCabinet()
 T CPropHealthCabinet::FireGameEvent(IGameEvent*)
 T CPropHealthCabinet::GetDataDescMap()
 T CPropHealthCabinet::GetServerClass()
 T CPropHealthCabinet::GetUsePriority(CBaseEntity*)
 T CPropHealthCabinet::ObjectCaps()
 T CPropHealthCabinet::Precache()
 T CPropHealthCabinet::Spawn()
 T CPropHealthCabinet::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CPropHealthCabinet::YouForgotToImplementOrDeclareServerClass()
 T CPropHealthCabinet::~CPropHealthCabinet()
 T CPropMinigun::AngleThink()
 T CPropMinigun::FireThink()
 T CPropMinigun::GetDataDescMap()
 T CPropMinigun::GetServerClass()
 T CPropMinigun::GetStandPosition(Vector*) const
 T CPropMinigun::ObjectCaps()
 T CPropMinigun::OnControls(CBaseEntity*)
 T CPropMinigun::OnFireStart()
 T CPropMinigun::OnFireStop()
 T CPropMinigun::OverridePropdata()
 T CPropMinigun::PopulatePoseParameters()
 T CPropMinigun::Precache()
 T CPropMinigun::ShouldCollide(int, int) const
 T CPropMinigun::ShouldTransmit(CCheckTransmitInfo const*)
 T CPropMinigun::Spawn()
 T CPropMinigun::UpdateBarrelMovement(float)
 T CPropMinigun::UpdateHeat(float)
 T CPropMinigun::UpdatePoseParameter(int, float, float, float, float)
 T CPropMinigun::UpdatePoseParameters()
 T CPropMinigun::UpdateTransmitState()
 T CPropMinigun::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CPropMinigun::YouForgotToImplementOrDeclareServerClass()
 T CPropMinigun::~CPropMinigun()
 T CPropMountedGun::AngleThink()
 T CPropMountedGun::FireThink()
 T CPropMountedGun::GetDataDescMap()
 T CPropMountedGun::GetServerClass()
 T CPropMountedGun::GetStandPosition(Vector*) const
 T CPropMountedGun::ObjectCaps()
 T CPropMountedGun::OnControls(CBaseEntity*)
 T CPropMountedGun::OverridePropdata()
 T CPropMountedGun::PopulatePoseParameters()
 T CPropMountedGun::Precache()
 T CPropMountedGun::ShouldCollide(int, int) const
 T CPropMountedGun::ShouldTransmit(CCheckTransmitInfo const*)
 T CPropMountedGun::Spawn()
 T CPropMountedGun::UpdateBarrelMovement(float)
 T CPropMountedGun::UpdateHeat(float)
 T CPropMountedGun::UpdatePoseParameter(int, float, float, float, float)
 T CPropMountedGun::UpdatePoseParameters()
 T CPropMountedGun::UpdateTransmitState()
 T CPropMountedGun::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CPropMountedGun::YouForgotToImplementOrDeclareServerClass()
 T CPropMountedGun::~CPropMountedGun()
 T CPropVehicle::DampenEyePosition(Vector&, QAngle&)
 T CPropVehicle::DrawDebugGeometryOverlays()
 T CPropVehicle::DrawDebugTextOverlays()
 T CPropVehicle::GetDataDescMap()
 T CPropVehicle::GetSmoothedVelocity()
 T CPropVehicle::GetUprightStrength()
 T CPropVehicle::GetUprightTime()
 T CPropVehicle::HasPhysicsAttacker(float)
 T CPropVehicle::InputAction(inputdata_t&)
 T CPropVehicle::InputHandBrakeOff(inputdata_t&)
 T CPropVehicle::InputHandBrakeOn(inputdata_t&)
 T CPropVehicle::InputSteering(inputdata_t&)
 T CPropVehicle::InputThrottle(inputdata_t&)
 T CPropVehicle::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CPropVehicle::Precache()
 T CPropVehicle::Restore(IRestore&)
 T CPropVehicle::Spawn()
 T CPropVehicle::Teleport(Vector const*, QAngle const*, Vector const*)
 T CPropVehicle::Think()
 T CPropVehicle::VPhysicsUpdate(IPhysicsObject*)
 T CPropVehicle::~CPropVehicle()
 T CPropVehicleDriveable::AllowBlockedExit(CBaseCombatCharacter*, int)
 T CPropVehicleDriveable::AllowMidairExit(CBaseCombatCharacter*, int)
 T CPropVehicleDriveable::CPropVehicleDriveable()
 T CPropVehicleDriveable::CanEnterVehicle(CBaseEntity*)
 T CPropVehicleDriveable::CanExitVehicle(CBaseEntity*)
 T CPropVehicleDriveable::CreateServerVehicle()
 T CPropVehicleDriveable::DriveVehicle(float, CUserCmd*, int, int)
 T CPropVehicleDriveable::EnterVehicle(CBaseCombatCharacter*)
 T CPropVehicleDriveable::Event_KilledOther(CBaseEntity*, CTakeDamageInfo const&)
 T CPropVehicleDriveable::ExitVehicle(int)
 T CPropVehicleDriveable::FinishMove(CBasePlayer*, CUserCmd*, CMoveData*)
 T CPropVehicleDriveable::GetDataDescMap()
 T CPropVehicleDriveable::GetDriver()
 T CPropVehicleDriveable::GetServerClass()
 T CPropVehicleDriveable::GetServerVehicle()
 T CPropVehicleDriveable::GetVectors(Vector*, Vector*, Vector*) const
 T CPropVehicleDriveable::GetVehicleScriptName()
 T CPropVehicleDriveable::InputLock(inputdata_t&)
 T CPropVehicleDriveable::InputTurnOff(inputdata_t&)
 T CPropVehicleDriveable::InputTurnOn(inputdata_t&)
 T CPropVehicleDriveable::InputUnlock(inputdata_t&)
 T CPropVehicleDriveable::IsOverturned()
 T CPropVehicleDriveable::IsVehicleBodyInWater()
 T CPropVehicleDriveable::ItemPostFrame(CBasePlayer*)
 T CPropVehicleDriveable::NPC_AddPassenger(CAI_BaseNPC*, string_t, int)
 T CPropVehicleDriveable::NPC_CanEnterVehicle(CAI_BaseNPC*, bool)
 T CPropVehicleDriveable::NPC_CanExitVehicle(CAI_BaseNPC*, bool)
 T CPropVehicleDriveable::NPC_FinishedEnterVehicle(CAI_BaseNPC*, bool)
 T CPropVehicleDriveable::NPC_FinishedExitVehicle(CAI_BaseNPC*, bool)
 T CPropVehicleDriveable::NPC_RemovePassenger(CAI_BaseNPC*)
 T CPropVehicleDriveable::ObjectCaps()
 T CPropVehicleDriveable::OnRestore()
 T CPropVehicleDriveable::PassengerShouldReceiveDamage(CTakeDamageInfo&)
 T CPropVehicleDriveable::PreExitVehicle(CBaseCombatCharacter*, int)
 T CPropVehicleDriveable::Precache()
 T CPropVehicleDriveable::ProcessMovement(CBasePlayer*, CMoveData*)
 T CPropVehicleDriveable::Restore(IRestore&)
 T CPropVehicleDriveable::SetVehicleEntryAnim(bool)
 T CPropVehicleDriveable::SetVehicleExitAnim(bool, Vector)
 T CPropVehicleDriveable::SetupMove(CBasePlayer*, CUserCmd*, IMoveHelper*, CMoveData*)
 T CPropVehicleDriveable::ShouldThink()
 T CPropVehicleDriveable::Spawn()
 T CPropVehicleDriveable::Think()
 T CPropVehicleDriveable::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*)
 T CPropVehicleDriveable::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CPropVehicleDriveable::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CPropVehicleDriveable::VPhysicsGetObjectList(IPhysicsObject**, int)
 T CPropVehicleDriveable::VehicleAngleVectors(QAngle const&, Vector*, Vector*, Vector*)
 T CPropVehicleDriveable::YouForgotToImplementOrDeclareServerClass()
 T CPropVehicleDriveable::~CPropVehicleDriveable()
 T CPropaneTank::GetDataDescMap()
 T CPropaneTank::GetDeployActivity()
 T CPropaneTank::GetPropName() const
 T CPropaneTank::GetServerClass()
 T CPropaneTank::GetViewmodelMeleeActivity()
 T CPropaneTank::GetWeaponID() const
 T CPropaneTank::TranslateViewmodelActivity(Activity) const
 T CPropaneTank::WeaponTranslateMainActivity(Activity)
 T CPropaneTank::YouForgotToImplementOrDeclareServerClass()
 T CPropaneTank::~CPropaneTank()
 T CProtectorAwardTemplate::CProtectorAwardTemplate(int)
 T CProtectorAwardTemplate::FireGameEvent(IGameEvent*)
 T CProtectorAwardTemplate::OnCreate()
 T CProtectorAwardTemplate::~CProtectorAwardTemplate()
 T CPumpShotgun::GetDataDescMap()
 T CPumpShotgun::GetLayerForViewmodelActivity(Activity) const
 T CPumpShotgun::GetRateOfFire() const
 T CPumpShotgun::GetServerClass()
 T CPumpShotgun::GetViewmodelTracerAttachmentIndex()
 T CPumpShotgun::GetWeaponDeployActivity(PlayerAnimEvent_t, Activity)
 T CPumpShotgun::GetWeaponFireActivity(PlayerAnimEvent_t, Activity)
 T CPumpShotgun::GetWeaponID() const
 T CPumpShotgun::GetWeaponReloadActivity(PlayerAnimEvent_t, Activity)
 T CPumpShotgun::Precache()
 T CPumpShotgun::TranslateViewmodelActivity(Activity) const
 T CPumpShotgun::WeaponTranslateMainActivity(Activity)
 T CPumpShotgun::YouForgotToImplementOrDeclareServerClass()
 T CPumpShotgun::~CPumpShotgun()
 T CPushAwayEnumerator::EnumElement(IHandleEntity*)
 T CPushBlockerEnum::CPushBlockerEnum(CPhysicsPushedEntities*)
 T CPushBlockerEnum::EnumElement(IHandleEntity*)
 T CPushBlockerEnum::GetPushableEntity(IHandleEntity*)
 T CPushBlockerEnum::IntersectsPushers(CBaseEntity*)
 T CPushable::CreateVPhysics()
 T CPushable::ObjectCaps()
 T CPushable::OnTakeDamage(CTakeDamageInfo const&)
 T CPushable::PhysicsSolidMaskForEntity() const
 T CPushable::Spawn()
 T CPushable::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CPushable::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CPushable::~CPushable()
 T CRC32_Final(unsigned long*)
 T CRC32_Init(unsigned long*)
 T CRC32_ProcessBuffer(unsigned long*, void const*, int)
 T CRagGib::Spawn(char const*, Vector const&, Vector const&, float)
 T CRagGib::~CRagGib()
 T CRagdollBoogie::AttachToEntity(CBaseEntity*)
 T CRagdollBoogie::BoogieThink()
 T CRagdollBoogie::Create(CBaseEntity*, float, float, float, int)
 T CRagdollBoogie::DecrementSuppressionCount(CBaseEntity*)
 T CRagdollBoogie::GetDataDescMap()
 T CRagdollBoogie::IncrementSuppressionCount(CBaseEntity*)
 T CRagdollBoogie::Precache()
 T CRagdollBoogie::Spawn()
 T CRagdollBoogie::ZapThink()
 T CRagdollBoogie::~CRagdollBoogie()
 T CRagdollConstraint::CreateConstraint(IPhysicsConstraintGroup*, hl_constraint_info_t const&)
 T CRagdollConstraint::GetDataDescMap()
 T CRagdollConstraint::~CRagdollConstraint()
 T CRagdollLRURetirement::FrameUpdatePostEntityThink()
 T CRagdollLRURetirement::LevelInitPreEntity()
 T CRagdollLRURetirement::MoveToTopOfLRU(CBaseAnimating*, RagdollType)
 T CRagdollLRURetirement::Update(float)
 T CRagdollLRURetirement::UpdateList(int, bool, bool)
 T CRagdollLRURetirement::~CRagdollLRURetirement()
 T CRagdollLowViolenceManager::SetLowViolence(char const*)
 T CRagdollMagnet::DistToPoint(Vector const&)
 T CRagdollMagnet::FindBestMagnet(CBaseEntity*)
 T CRagdollMagnet::GetDataDescMap()
 T CRagdollMagnet::GetForceVector(CBaseEntity*)
 T CRagdollMagnet::InputDisable(inputdata_t&)
 T CRagdollMagnet::InputEnable(inputdata_t&)
 T CRagdollMagnet::~CRagdollMagnet()
 T CRagdollManager::Activate()
 T CRagdollManager::CRagdollManager()
 T CRagdollManager::DrawDebugTextOverlays()
 T CRagdollManager::GetDataDescMap()
 T CRagdollManager::GetServerClass()
 T CRagdollManager::InputSetMaxRagdollCount(inputdata_t&)
 T CRagdollManager::UpdateCurrentMaxRagDollCount()
 T CRagdollManager::UpdateTransmitState()
 T CRagdollManager::YouForgotToImplementOrDeclareServerClass()
 T CRagdollManager::~CRagdollManager()
 T CRagdollProp::ClearFlagsThink()
 T CRagdollProp::DrawDebugGeometryOverlays()
 T CRagdollProp::DrawDebugTextOverlays()
 T CRagdollProp::FadeOut(float, float)
 T CRagdollProp::FadeOutThink()
 T CRagdollProp::GetAngleOverrideFromCurrentState(char*, int)
 T CRagdollProp::GetDataDescMap()
 T CRagdollProp::GetResponseSystem()
 T CRagdollProp::GetServerClass()
 T CRagdollProp::HandleFirstCollisionInteractions(int, gamevcollisionevent_t*)
 T CRagdollProp::HasPhysgunInteraction(char const*, char const*)
 T CRagdollProp::HasPhysicsAttacker(float)
 T CRagdollProp::InitRagdoll(Vector const&, int, Vector const&, matrix3x4_t*, matrix3x4_t*, float, int, bool, bool)
 T CRagdollProp::InitRagdollAnimation()
 T CRagdollProp::InputDisableMotion(inputdata_t&)
 T CRagdollProp::InputEnableMotion(inputdata_t&)
 T CRagdollProp::InputFadeAndRemove(inputdata_t&)
 T CRagdollProp::InputStartRadgollBoogie(inputdata_t&)
 T CRagdollProp::InputTurnOff(inputdata_t&)
 T CRagdollProp::InputTurnOn(inputdata_t&)
 T CRagdollProp::IsAlive()
 T CRagdollProp::IsRagdoll()
 T CRagdollProp::ModifyOrAppendCriteria(AI_CriteriaSet&)
 T CRagdollProp::ObjectCaps()
 T CRagdollProp::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T CRagdollProp::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CRagdollProp::OnRestore()
 T CRagdollProp::OnSave(IEntitySaveUtils*)
 T CRagdollProp::OnTakeDamage(CTakeDamageInfo const&)
 T CRagdollProp::PhysGunLaunchAngularImpulse()
 T CRagdollProp::Precache()
 T CRagdollProp::SetDamageEntity(CBaseEntity*)
 T CRagdollProp::SetDebrisThink()
 T CRagdollProp::SetupBones(matrix3x4_t*, int)
 T CRagdollProp::Spawn()
 T CRagdollProp::Teleport(Vector const*, QAngle const*, Vector const*)
 T CRagdollProp::TestCollision(Ray_t const&, unsigned int, CGameTrace&)
 T CRagdollProp::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*)
 T CRagdollProp::UpdateNetworkDataFromVPhysics(IPhysicsObject*, int)
 T CRagdollProp::UpdateOnRemove()
 T CRagdollProp::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CRagdollProp::VPhysicsGetObjectList(IPhysicsObject**, int)
 T CRagdollProp::VPhysicsUpdate(IPhysicsObject*)
 T CRagdollProp::YouForgotToImplementOrDeclareServerClass()
 T CRagdollProp::~CRagdollProp()
 T CRagdollPropAttached::Detach()
 T CRagdollPropAttached::GetDataDescMap()
 T CRagdollPropAttached::GetServerClass()
 T CRagdollPropAttached::InitRagdollAttached(IPhysicsObject*, Vector const&, int, matrix3x4_t*, matrix3x4_t*, float, int, CBaseAnimating*, int, Vector const&, int, Vector const&)
 T CRagdollPropAttached::VPhysicsUpdate(IPhysicsObject*)
 T CRagdollPropAttached::YouForgotToImplementOrDeclareServerClass()
 T CRagdollPropAttached::~CRagdollPropAttached()
 T CRecipientFilter::AddAllPlayers()
 T CRecipientFilter::AddPlayersFromBitMask(CBitVec<32>&)
 T CRecipientFilter::AddRecipient(CBasePlayer*)
 T CRecipientFilter::AddRecipientsByPAS(Vector const&)
 T CRecipientFilter::AddRecipientsByPVS(Vector const&)
 T CRecipientFilter::CRecipientFilter()
 T CRecipientFilter::CopyFrom(CRecipientFilter const&)
 T CRecipientFilter::GetRecipientCount() const
 T CRecipientFilter::GetRecipientIndex(int) const
 T CRecipientFilter::IgnorePredictionCull() const
 T CRecipientFilter::IsInitMessage() const
 T CRecipientFilter::IsReliable() const
 T CRecipientFilter::MakeInitMessage()
 T CRecipientFilter::MakeReliable()
 T CRecipientFilter::RemovePlayersFromBitMask(CBitVec<32>&)
 T CRecipientFilter::RemoveRecipient(CBasePlayer*)
 T CRecipientFilter::RemoveRecipientByPlayerIndex(int)
 T CRecipientFilter::RemoveRecipientsByPVS(Vector const&)
 T CRecipientFilter::RemoveRecipientsByTeam(CTeam*)
 T CRecipientFilter::RemoveRecipientsNotOnTeam(CTeam*)
 T CRecipientFilter::RemoveSplitScreenPlayers()
 T CRecipientFilter::SetIgnorePredictionCull(bool)
 T CRecipientFilter::UsePredictionRules()
 T CRecipientFilter::~CRecipientFilter()
 T CRedecoratorAwardTemplate::CRedecoratorAwardTemplate(int)
 T CRedecoratorAwardTemplate::FireGameEvent(IGameEvent*)
 T CRedecoratorAwardTemplate::OnCreate()
 T CRedecoratorAwardTemplate::~CRedecoratorAwardTemplate()
 T CRefCountServiceBase<true, CRefMT>::OnFinalRelease()
 T CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >::AddRef()
 T CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >::Release()
 T CRefCounted1<IRefCounted, CRefCountServiceBase<true, CRefMT> >::AddRef()
 T CRefCounted1<IRefCounted, CRefCountServiceBase<true, CRefMT> >::Release()
 T CRegistry::DirectInit(char const*)
 T CRegistry::Init(char const*)
 T CRegistry::ReadInt(char const*, char const*, int)
 T CRegistry::ReadInt(char const*, int)
 T CRegistry::ReadString(char const*, char const*)
 T CRegistry::ReadString(char const*, char const*, char const*)
 T CRegistry::Shutdown()
 T CRegistry::WriteInt(char const*, char const*, int)
 T CRegistry::WriteInt(char const*, int)
 T CRegistry::WriteString(char const*, char const*)
 T CRegistry::WriteString(char const*, char const*, char const*)
 T CRegistry::~CRegistry()
 T CReliableBroadcastRecipientFilter::~CReliableBroadcastRecipientFilter()
 T CRemarkableEntityList::LevelShutdownPostEntity()
 T CRemarkableEntityList::~CRemarkableEntityList()
 T CRescuerAwardTemplate::CRescuerAwardTemplate(int)
 T CRescuerAwardTemplate::FireGameEvent(IGameEvent*)
 T CRescuerAwardTemplate::OnCreate()
 T CRescuerAwardTemplate::~CRescuerAwardTemplate()
 T CRespawnEntitiesFilter::CreateNextEntity(char const*)
 T CRespawnEntitiesFilter::ShouldCreateEntity(char const*)
 T CResponseQueue::Add(CAI_Concept const&, AI_CriteriaSet const*, float, CResponseQueue::CFollowupTargetSpec_t const&, CBaseEntity*)
 T CResponseQueue::AddExpresserHost(CBaseEntity*)
 T CResponseQueue::DispatchOneResponse(CResponseQueue::CDeferredResponse&)
 T CResponseQueue::DispatchOneResponse_ThenANY(CResponseQueue::CDeferredResponse&, AI_CriteriaSet*, CBaseEntity*, float)
 T CResponseQueue::RemoveExpresserHost(CBaseEntity*)
 T CResponseQueueManager::FrameUpdatePostEntityThink()
 T CResponseQueueManager::LevelInitPreEntity()
 T CResponseQueueManager::Shutdown()
 T CResponseQueueManager::~CResponseQueueManager()
 T CResponseSystem::Clear()
 T CResponseSystem::CompareUsingMatcher(char const*, Matcher&, bool)
 T CResponseSystem::ComputeMatcher(Criteria*, Matcher&)
 T CResponseSystem::DebugPrint(int, char const*, ...)
 T CResponseSystem::DescribeResponseGroup(ResponseGroup*, int, int)
 T CResponseSystem::DumpRules()
 T CResponseSystem::FakeDepletes(ResponseGroup*, IResponseFilter*)
 T CResponseSystem::FindBestMatchingRule(AI_CriteriaSet const&, bool, float&)
 T CResponseSystem::FindBestResponse(AI_CriteriaSet const&, AI_Response&, IResponseFilter*)
 T CResponseSystem::GetAllResponses(CUtlVector<AI_Response, CUtlMemory<AI_Response, int> >*)
 T CResponseSystem::GetBestResponse(CResponseSystem::ResponseSearchResult&, Rule*, bool, IResponseFilter*)
 T CResponseSystem::IsRootCommand()
 T CResponseSystem::LoadFromBuffer(char const*, char const*, CStringPool&)
 T CResponseSystem::LoadRuleSet(char const*)
 T CResponseSystem::ParseEnumeration()
 T CResponseSystem::ParseInclude(CStringPool&)
 T CResponseSystem::ParseOneCriterion(char const*)
 T CResponseSystem::ParseOneResponse(char const*, ResponseGroup&)
 T CResponseSystem::ParseResponse()
 T CResponseSystem::ParseRule()
 T CResponseSystem::Precache()
 T CResponseSystem::PrecacheResponses(bool)
 T CResponseSystem::RecursiveScoreSubcriteriaAgainstRule(AI_CriteriaSet const&, Criteria*, bool&, bool)
 T CResponseSystem::ResolveResponse(CResponseSystem::ResponseSearchResult&, int, char const*, bool, IResponseFilter*)
 T CResponseSystem::ResolveToken(Matcher&, char*, unsigned long, char const*)
 T CResponseSystem::ResponseWarning(char const*, ...)
 T CResponseSystem::ScoreCriteriaAgainstRule(AI_CriteriaSet const&, CUtlDict<Rule, short>&, int, bool)
 T CResponseSystem::ScoreCriteriaAgainstRuleCriteria(AI_CriteriaSet const&, int, bool&, bool)
 T CResponseSystem::SelectWeightedResponseFromResponseGroup(ResponseGroup*, IResponseFilter*)
 T CResponseSystem::~CResponseSystem()
 T CRestartGameIssue::CanCallVote(int, char const*, char*)
 T CRestartGameIssue::ExecuteCommand()
 T CRestartGameIssue::GetDisplayString()
 T CRestartGameIssue::GetVotePassedString()
 T CRestartGameIssue::IsAllyRestrictedVote()
 T CRestartGameIssue::ListIssueDetails(CBasePlayer*)
 T CRestartGameIssue::~CRestartGameIssue()
 T CRestore::CRestore(CSaveRestoreData*)
 T CRestore::DoReadAll(void*, datamap_t*, datamap_t*)
 T CRestore::EmptyFields(void*, typedescription_t*, int)
 T CRestore::EndBlock()
 T CRestore::GetGameSaveRestoreInfo()
 T CRestore::GetPrecacheMode()
 T CRestore::GetReadPos() const
 T CRestore::ReadAll(void*, datamap_t*)
 T CRestore::ReadBasicField(SaveRestoreRecordHeader_t const&, void*, datamap_t*, typedescription_t*)
 T CRestore::ReadBool(bool*, int, int)
 T CRestore::ReadData(char*, int, int)
 T CRestore::ReadEHandle(CHandle<CBaseEntity>*, int, int)
 T CRestore::ReadEdictPtr(edict_t**, int, int)
 T CRestore::ReadEntityPtr(CBaseEntity**, int, int)
 T CRestore::ReadFields(char const*, void*, datamap_t*, typedescription_t*, int)
 T CRestore::ReadFloat(float*, int, int)
 T CRestore::ReadFunction(datamap_t*, void (CBaseEntity::***)(inputdata_t&), int, int)
 T CRestore::ReadGameField(SaveRestoreRecordHeader_t const&, void*, datamap_t*, typedescription_t*)
 T CRestore::ReadHeader(SaveRestoreRecordHeader_t*)
 T CRestore::ReadInt()
 T CRestore::ReadInt(int*, int, int)
 T CRestore::ReadMatrix3x4Worldspace(matrix3x4_t*, int, int)
 T CRestore::ReadPositionVector(Vector*)
 T CRestore::ReadPositionVector(Vector*, int, int)
 T CRestore::ReadQuaternion(Quaternion*)
 T CRestore::ReadQuaternion(Quaternion*, int, int)
 T CRestore::ReadShort()
 T CRestore::ReadShort(short*, int, int)
 T CRestore::ReadString(char*, int, int)
 T CRestore::ReadString(string_t*, int, int)
 T CRestore::ReadTick(int*, int, int)
 T CRestore::ReadTime(float*, int, int)
 T CRestore::ReadVMatrix(VMatrix*, int, int)
 T CRestore::ReadVMatrixWorldspace(VMatrix*, int, int)
 T CRestore::ReadVector(Vector*)
 T CRestore::ReadVector(Vector*, int, int)
 T CRestore::ScanAheadForHammerID()
 T CRestore::SetReadPos(int)
 T CRestore::SkipEntityData()
 T CRestore::SkipHeader()
 T CRestore::StartBlock()
 T CRestore::StartBlock(SaveRestoreRecordHeader_t*)
 T CRestore::StartBlock(char*)
 T CRestore::StringFromHeaderSymbol(int)
 T CRestore::~CRestore()
 T CReturnToLobbyIssue::CanCallVote(int, char const*, char*)
 T CReturnToLobbyIssue::ExecuteCommand()
 T CReturnToLobbyIssue::GetDisplayString()
 T CReturnToLobbyIssue::GetVotePassedString()
 T CReturnToLobbyIssue::IsAllyRestrictedVote()
 T CReturnToLobbyIssue::ListIssueDetails(CBasePlayer*)
 T CReturnToLobbyIssue::~CReturnToLobbyIssue()
 T CRevertSaved::GetDataDescMap()
 T CRevertSaved::InputReload(inputdata_t&)
 T CRevertSaved::LoadThink()
 T CRevertSaved::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CRevertSaved::~CRevertSaved()
 T CReviveFriendAwardTemplate::CReviveFriendAwardTemplate(int)
 T CReviveFriendAwardTemplate::FireGameEvent(IGameEvent*)
 T CReviveFriendAwardTemplate::OnCreate()
 T CReviveFriendAwardTemplate::~CReviveFriendAwardTemplate()
 T CRopeKeyframe::Activate()
 T CRopeKeyframe::Break()
 T CRopeKeyframe::CRopeKeyframe()
 T CRopeKeyframe::EndpointsChanged()
 T CRopeKeyframe::GetDataDescMap()
 T CRopeKeyframe::GetEndPointPos(int, Vector&)
 T CRopeKeyframe::GetServerClass()
 T CRopeKeyframe::Init()
 T CRopeKeyframe::InputBreak(inputdata_t&)
 T CRopeKeyframe::InputSetForce(inputdata_t&)
 T CRopeKeyframe::InputSetScrollSpeed(inputdata_t&)
 T CRopeKeyframe::KeyValue(char const*, char const*)
 T CRopeKeyframe::NotifyPositionChanged(CBaseEntity*)
 T CRopeKeyframe::ObjectCaps()
 T CRopeKeyframe::OnTakeDamage(CTakeDamageInfo const&)
 T CRopeKeyframe::Precache()
 T CRopeKeyframe::PrecacheShakeRopes()
 T CRopeKeyframe::PropagateForce(CBaseEntity*, CBaseEntity*, CBaseEntity*, float, float, float)
 T CRopeKeyframe::RecalculateLength()
 T CRopeKeyframe::SetAttachmentPoint(CBaseHandle&, short&, CBaseEntity*, int)
 T CRopeKeyframe::SetParent(CBaseEntity*, int)
 T CRopeKeyframe::SetTransmit(CCheckTransmitInfo*, bool)
 T CRopeKeyframe::ShakeRopes(Vector const&, float, float)
 T CRopeKeyframe::Spawn()
 T CRopeKeyframe::UpdateBBox(bool)
 T CRopeKeyframe::UpdateTransmitState()
 T CRopeKeyframe::YouForgotToImplementOrDeclareServerClass()
 T CRopeKeyframe::~CRopeKeyframe()
 T CRotButton* _CreateEntityTemplate<CRotButton>(CRotButton*, char const*)
 T CRotButton::CreateVPhysics()
 T CRotButton::Spawn()
 T CRotButton::~CRotButton()
 T CRotDoor::CreateVPhysics()
 T CRotDoor::GetDataDescMap()
 T CRotDoor::IsRotatingDoor()
 T CRotDoor::SetToggleState(int)
 T CRotDoor::Spawn()
 T CRotDoor::~CRotDoor()
 T CRotorWashShooter::DoWashPush(float, Vector const&)
 T CRotorWashShooter::GetDataDescMap()
 T CRotorWashShooter::Spawn()
 T CRotorWashShooter::~CRotorWashShooter()
 T CRuleBrushEntity::Spawn()
 T CRulePointEntity::GetDataDescMap()
 T CRulePointEntity::Spawn()
 T CSave::CSave(CSaveRestoreData*)
 T CSave::DoWriteAll(void const*, datamap_t*, datamap_t*)
 T CSave::EndBlock()
 T CSave::EndLogging()
 T CSave::EntityFlagsSet(int, int)
 T CSave::EntityIndex(CBaseEntity const*)
 T CSave::GetGameSaveRestoreInfo()
 T CSave::GetWritePos() const
 T CSave::IsAsync()
 T CSave::SetWritePos(int)
 T CSave::ShouldSaveField(void const*, typedescription_t*)
 T CSave::StartBlock()
 T CSave::StartBlock(char const*)
 T CSave::StartLogging(char const*)
 T CSave::WriteAll(void const*, datamap_t*)
 T CSave::WriteBasicField(char const*, void*, datamap_t*, typedescription_t*)
 T CSave::WriteBool(bool const*, int)
 T CSave::WriteBool(char const*, bool const*, int)
 T CSave::WriteData(char const*, int)
 T CSave::WriteData(char const*, int, char const*)
 T CSave::WriteEHandle(CHandle<CBaseEntity> const*, int)
 T CSave::WriteEHandle(char const*, CHandle<CBaseEntity> const*, int)
 T CSave::WriteEdictPtr(char const*, edict_t**, int)
 T CSave::WriteEdictPtr(edict_t**, int)
 T CSave::WriteEntityPtr(CBaseEntity**, int)
 T CSave::WriteEntityPtr(char const*, CBaseEntity**, int)
 T CSave::WriteFields(char const*, void const*, datamap_t*, typedescription_t*, int)
 T CSave::WriteFloat(char const*, float const*, int)
 T CSave::WriteFloat(float const*, int)
 T CSave::WriteFunction(datamap_t*, char const*, void (CBaseEntity::***)(inputdata_t&), int)
 T CSave::WriteGameField(char const*, void*, datamap_t*, typedescription_t*)
 T CSave::WriteHeader(char const*, int)
 T CSave::WriteInt(char const*, int const*, int)
 T CSave::WriteInt(int const*, int)
 T CSave::WriteMatrix3x4Worldspace(matrix3x4_t const*, int)
 T CSave::WritePositionVector(Vector const&)
 T CSave::WritePositionVector(Vector const*, int)
 T CSave::WritePositionVector(char const*, Vector const&)
 T CSave::WritePositionVector(char const*, Vector const*, int)
 T CSave::WriteQuaternion(Quaternion const&)
 T CSave::WriteQuaternion(Quaternion const*, int)
 T CSave::WriteQuaternion(char const*, Quaternion const&)
 T CSave::WriteQuaternion(char const*, Quaternion const*, int)
 T CSave::WriteShort(char const*, short const*, int)
 T CSave::WriteShort(short const*, int)
 T CSave::WriteString(char const*)
 T CSave::WriteString(char const*, char const*)
 T CSave::WriteString(char const*, string_t const*, int)
 T CSave::WriteString(string_t const*, int)
 T CSave::WriteTick(char const*, int const*, int)
 T CSave::WriteTick(int const*, int)
 T CSave::WriteTime(char const*, float const*, int)
 T CSave::WriteTime(float const*, int)
 T CSave::WriteVMatrixWorldspace(VMatrix const*, int)
 T CSave::WriteVector(Vector const&)
 T CSave::WriteVector(Vector const*, int)
 T CSave::WriteVector(char const*, Vector const&)
 T CSave::WriteVector(char const*, Vector const*, int)
 T CSave::~CSave()
 T CSaveRestoreBlockSet::AddBlockHandler(ISaveRestoreBlockHandler*)
 T CSaveRestoreBlockSet::CSaveRestoreBlockSet(char const*)
 T CSaveRestoreBlockSet::CallBlockHandlerRestore(ISaveRestoreBlockHandler*, int, IRestore*, bool)
 T CSaveRestoreBlockSet::GetBlockName()
 T CSaveRestoreBlockSet::PostRestore()
 T CSaveRestoreBlockSet::PostSave()
 T CSaveRestoreBlockSet::PreRestore()
 T CSaveRestoreBlockSet::PreSave(CSaveRestoreData*)
 T CSaveRestoreBlockSet::ReadRestoreHeaders(IRestore*)
 T CSaveRestoreBlockSet::RemoveBlockHandler(ISaveRestoreBlockHandler*)
 T CSaveRestoreBlockSet::Restore(IRestore*, bool)
 T CSaveRestoreBlockSet::Save(ISave*)
 T CSaveRestoreBlockSet::WriteSaveHeaders(ISave*)
 T CSaveRestoreBlockSet::~CSaveRestoreBlockSet()
 T CSaveRestoreData::CSaveRestoreData()
 T CSaviorAwardTemplate::CSaviorAwardTemplate(int)
 T CSaviorAwardTemplate::FireGameEvent(IGameEvent*)
 T CSaviorAwardTemplate::OnCreate()
 T CSaviorAwardTemplate::~CSaviorAwardTemplate()
 T CScenarioWinAwardTemplate::CScenarioWinAwardTemplate(int)
 T CScenarioWinAwardTemplate::FireGameEvent(IGameEvent*)
 T CScenarioWinAwardTemplate::OnCreate()
 T CScenarioWinAwardTemplate::~CScenarioWinAwardTemplate()
 T CSceneEntity::Activate()
 T CSceneEntity::AddListManager(CSceneListManager*)
 T CSceneEntity::BuildSortedSpeakEventSoundsPrefetchList(CChoreoScene*, CUtlSymbolTable&, CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, bool (*)(CSceneEntity::SpeakEventSound_t const&, CSceneEntity::SpeakEventSound_t const&), CUtlMemory<UtlRBTreeNode_t<CSceneEntity::SpeakEventSound_t, unsigned short>, unsigned short> >&, float)
 T CSceneEntity::CSceneEntity()
 T CSceneEntity::CancelPlayback()
 T CSceneEntity::CheckActors()
 T CSceneEntity::CheckEvent(float, CChoreoScene*, CChoreoEvent*)
 T CSceneEntity::CheckInterruptCompletion()
 T CSceneEntity::ClearActivatorTargets()
 T CSceneEntity::ClearInterrupt()
 T CSceneEntity::ClearSceneEvents(CChoreoScene*, bool)
 T CSceneEntity::ClearSchedules(CChoreoScene*)
 T CSceneEntity::DispatchEndExpression(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchEndFace(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchEndFlexAnimation(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchEndGeneric(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchEndGesture(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchEndInterrupt(CChoreoScene*, CChoreoEvent*)
 T CSceneEntity::DispatchEndLookAt(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchEndMoveTo(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchEndPermitResponses(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchEndSequence(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchEndSpeak(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchPauseScene(CChoreoScene*, char const*)
 T CSceneEntity::DispatchProcessLoop(CChoreoScene*, CChoreoEvent*)
 T CSceneEntity::DispatchStartExpression(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchStartFace(CChoreoScene*, CBaseFlex*, CBaseEntity*, CChoreoEvent*)
 T CSceneEntity::DispatchStartFlexAnimation(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchStartGeneric(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchStartGesture(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchStartInterrupt(CChoreoScene*, CChoreoEvent*)
 T CSceneEntity::DispatchStartLookAt(CChoreoScene*, CBaseFlex*, CBaseEntity*, CChoreoEvent*)
 T CSceneEntity::DispatchStartMoveTo(CChoreoScene*, CBaseFlex*, CBaseEntity*, CChoreoEvent*)
 T CSceneEntity::DispatchStartPermitResponses(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchStartSequence(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchStartSpeak(CChoreoScene*, CBaseFlex*, CChoreoEvent*, soundlevel_t)
 T CSceneEntity::DispatchStartSubScene(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchStopPoint(CChoreoScene*, char const*)
 T CSceneEntity::DoThink(float)
 T CSceneEntity::EndEvent(float, CChoreoScene*, CChoreoEvent*)
 T CSceneEntity::EstimateLength()
 T CSceneEntity::FindNamedActor(CChoreoActor*)
 T CSceneEntity::FindNamedActor(char const*)
 T CSceneEntity::FindNamedActor(int)
 T CSceneEntity::FindNamedEntity(char const*, CBaseEntity*, bool, bool)
 T CSceneEntity::FindNamedEntityClosest(char const*, CBaseEntity*, bool, bool, char const*)
 T CSceneEntity::FindNamedTarget(string_t, bool)
 T CSceneEntity::GenerateSceneForSound(CBaseFlex*, char const*)
 T CSceneEntity::GetDataDescMap()
 T CSceneEntity::GetPostSpeakDelay()
 T CSceneEntity::GetServerClass()
 T CSceneEntity::GetSoundNameForPlayer(CChoreoEvent*, CBasePlayer*, char*, unsigned long)
 T CSceneEntity::InputCancelAtNextInterrupt(inputdata_t&)
 T CSceneEntity::InputCancelPlayback(inputdata_t&)
 T CSceneEntity::InputInterjectResponse(inputdata_t&)
 T CSceneEntity::InputPausePlayback(inputdata_t&)
 T CSceneEntity::InputPitchShiftPlayback(inputdata_t&)
 T CSceneEntity::InputResumePlayback(inputdata_t&)
 T CSceneEntity::InputScriptPlayerDeath(inputdata_t&)
 T CSceneEntity::InputStartPlayback(inputdata_t&)
 T CSceneEntity::InputStopWaitingForActor(inputdata_t&)
 T CSceneEntity::InputTriggerEvent(inputdata_t&)
 T CSceneEntity::InterruptThisScene(CSceneEntity*)
 T CSceneEntity::LoadScene(char const*, IChoreoEventCallback*)
 T CSceneEntity::NotifyOfCompletion(CSceneEntity*)
 T CSceneEntity::OnLoaded()
 T CSceneEntity::OnRestore()
 T CSceneEntity::OnSceneFinished(bool, bool)
 T CSceneEntity::PausePlayback()
 T CSceneEntity::PauseThink()
 T CSceneEntity::PitchShiftPlayback(float)
 T CSceneEntity::Precache()
 T CSceneEntity::PrefetchAnimBlocks(CChoreoScene*)
 T CSceneEntity::ProcessEvent(float, CChoreoScene*, CChoreoEvent*)
 T CSceneEntity::QueueResumePlayback()
 T CSceneEntity::RequestCompletionNotification(CSceneEntity*)
 T CSceneEntity::ResumePlayback()
 T CSceneEntity::ShouldNetwork() const
 T CSceneEntity::ShouldTransmit(CCheckTransmitInfo const*)
 T CSceneEntity::Spawn()
 T CSceneEntity::SpeakEventSoundLessFunc(CSceneEntity::SpeakEventSound_t const&, CSceneEntity::SpeakEventSound_t const&)
 T CSceneEntity::StartEvent(float, CChoreoScene*, CChoreoEvent*)
 T CSceneEntity::StartPlayback()
 T CSceneEntity::Think()
 T CSceneEntity::UnloadScene()
 T CSceneEntity::UpdateOnRemove()
 T CSceneEntity::UpdateTransmitState()
 T CSceneEntity::YouForgotToImplementOrDeclareServerClass()
 T CSceneEntity::~CSceneEntity()
 T CSceneFindMarkFilter::GetFilterResult()
 T CSceneFindMarkFilter::ShouldFindEntity(CBaseEntity*)
 T CSceneFindNearestMarkFilter::CSceneFindNearestMarkFilter(CBaseEntity const*, Vector const&, float)
 T CSceneFindNearestMarkFilter::GetFilterResult()
 T CSceneFindNearestMarkFilter::ShouldFindEntity(CBaseEntity*)
 T CSceneListManager::Activate()
 T CSceneListManager::AddListManager(CSceneListManager*)
 T CSceneListManager::GetDataDescMap()
 T CSceneListManager::InputShutdown(inputdata_t&)
 T CSceneListManager::RemoveScene(int)
 T CSceneListManager::SceneStarted(CBaseEntity*)
 T CSceneListManager::~CSceneListManager()
 T CSceneManager::AddSceneEntity(CSceneEntity*)
 T CSceneManager::GetDataDescMap()
 T CSceneManager::IsInInterruptableScenes(CBaseFlex*)
 T CSceneManager::IsRunningScriptedScene(CBaseFlex*, bool)
 T CSceneManager::IsRunningScriptedSceneWithSpeech(CBaseFlex*, bool)
 T CSceneManager::ObjectCaps()
 T CSceneManager::OnClientActive(CBasePlayer*)
 T CSceneManager::PauseActorsScenes(CBaseFlex*, bool)
 T CSceneManager::QueueActorsScenesToResume(CBaseFlex*, bool)
 T CSceneManager::QueueRestoredSound(CBaseFlex*, char const*, soundlevel_t, float)
 T CSceneManager::RemoveActorFromScenes(CBaseFlex*, bool, bool, char const*)
 T CSceneManager::Spawn()
 T CSceneManager::Think()
 T CSceneManager::~CSceneManager()
 T CSceneTokenProcessor::CurrentToken()
 T CSceneTokenProcessor::Error(char const*, ...)
 T CSceneTokenProcessor::GetToken(bool)
 T CSceneTokenProcessor::TokenAvailable()
 T CSecurityFailureAwardTemplate::CSecurityFailureAwardTemplate(int)
 T CSecurityFailureAwardTemplate::FireGameEvent(IGameEvent*)
 T CSecurityFailureAwardTemplate::OnCreate()
 T CSecurityFailureAwardTemplate::~CSecurityFailureAwardTemplate()
 T CSendProxyRecipients::ExcludeOnly(int)
 T CSendProxyRecipients::SetOnly(int)
 T CSequenceTransitioner::CheckForSequenceChange(CStudioHdr*, int, bool, bool)
 T CSequenceTransitioner::UpdateCurrent(CStudioHdr*, int, float, float, float)
 T CServerDLLSharedAppSystems::CServerDLLSharedAppSystems()
 T CServerDLLSharedAppSystems::Count()
 T CServerDLLSharedAppSystems::GetDllName(int)
 T CServerDLLSharedAppSystems::GetInterfaceName(int)
 T CServerDLLSharedAppSystems::~CServerDLLSharedAppSystems()
 T CServerGameClients::ClientActive(edict_t*, bool)
 T CServerGameClients::ClientCommand(edict_t*, CCommand const&)
 T CServerGameClients::ClientCommandKeyValues(edict_t*, KeyValues*)
 T CServerGameClients::ClientConnect(edict_t*, char const*, char const*, char*, int)
 T CServerGameClients::ClientDisconnect(edict_t*)
 T CServerGameClients::ClientEarPosition(edict_t*, Vector*)
 T CServerGameClients::ClientPutInServer(edict_t*, char const*)
 T CServerGameClients::ClientSettingsChanged(edict_t*)
 T CServerGameClients::ClientSetupVisibility(edict_t*, edict_t*, unsigned char*, int)
 T CServerGameClients::ClientVoice(edict_t*)
 T CServerGameClients::GetBugReportInfo(char*, int)
 T CServerGameClients::GetMaxHumanPlayers()
 T CServerGameClients::GetMaxSplitscreenPlayers()
 T CServerGameClients::GetPlayerLimits(int&, int&, int&) const
 T CServerGameClients::GetPlayerState(edict_t*)
 T CServerGameClients::GetReplayDelay(edict_t*, int&)
 T CServerGameClients::NetworkIDValidated(char const*, char const*)
 T CServerGameClients::PostClientMessagesSent()
 T CServerGameClients::ProcessUsercmds(edict_t*, bf_read*, int, int, int, bool, bool)
 T CServerGameClients::SetCommandClient(int)
 T CServerGameDLL::ApplyGameSettings(KeyValues*)
 T CServerGameDLL::BuildAdjacentMapList()
 T CServerGameDLL::CreateEntityTransitionList(CSaveRestoreData*, int)
 T CServerGameDLL::CreateNetworkStringTables()
 T CServerGameDLL::DLLInit(void* (*)(char const*, int*), void* (*)(char const*, int*), void* (*)(char const*, int*), CGlobalVars*)
 T CServerGameDLL::DLLShutdown()
 T CServerGameDLL::GameFrame(bool)
 T CServerGameDLL::GameInit()
 T CServerGameDLL::GameShutdown()
 T CServerGameDLL::GenerateLumpFileName(char const*, char*, int, int)
 T CServerGameDLL::GetAllServerClasses()
 T CServerGameDLL::GetGameDescription()
 T CServerGameDLL::GetMatchmakingGameData(char*, unsigned long)
 T CServerGameDLL::GetMatchmakingTags(char*, unsigned long)
 T CServerGameDLL::GetSaveComment(char*, int, float, float, bool)
 T CServerGameDLL::GetStandardSendProxies()
 T CServerGameDLL::GetTickInterval() const
 T CServerGameDLL::GetUserMessageInfo(int, char*, int, int&)
 T CServerGameDLL::InvalidateMdlCache()
 T CServerGameDLL::IsRestoring()
 T CServerGameDLL::LevelInit(char const*, char const*, char const*, char const*, bool, bool)
 T CServerGameDLL::LevelInit_ParseAllEntities(char const*)
 T CServerGameDLL::LevelShutdown()
 T CServerGameDLL::OnQueryCvarValueFinished(int, edict_t*, EQueryCvarValueStatus, char const*, char const*)
 T CServerGameDLL::PostInit()
 T CServerGameDLL::PostToolsInit()
 T CServerGameDLL::PreClientUpdate(bool)
 T CServerGameDLL::PreSave(CSaveRestoreData*)
 T CServerGameDLL::PreSaveGameLoaded(char const*, bool)
 T CServerGameDLL::ReadRestoreHeaders(CSaveRestoreData*)
 T CServerGameDLL::Restore(CSaveRestoreData*, bool)
 T CServerGameDLL::RestoreGlobalState(CSaveRestoreData*)
 T CServerGameDLL::Save(CSaveRestoreData*)
 T CServerGameDLL::SaveGlobalState(CSaveRestoreData*)
 T CServerGameDLL::SaveInit(int)
 T CServerGameDLL::SaveReadFields(CSaveRestoreData*, char const*, void*, datamap_t*, typedescription_t*, int)
 T CServerGameDLL::SaveWriteFields(CSaveRestoreData*, char const*, void*, datamap_t*, typedescription_t*, int)
 T CServerGameDLL::ServerActivate(edict_t*, int, int)
 T CServerGameDLL::ServerHibernationUpdate(bool)
 T CServerGameDLL::ShouldHideServer()
 T CServerGameDLL::SupportsSaveRestore()
 T CServerGameDLL::Think(bool)
 T CServerGameDLL::WriteSaveHeaders(CSaveRestoreData*)
 T CServerGameEnts::BaseEntityToEdict(CBaseEntity*)
 T CServerGameEnts::CheckTransmit(CCheckTransmitInfo*, unsigned short const*, int)
 T CServerGameEnts::EdictToBaseEntity(edict_t*)
 T CServerGameEnts::FreeContainingEntity(edict_t*)
 T CServerGameEnts::MarkEntitiesAsTouching(edict_t*, edict_t*)
 T CServerGameEnts::PrepareForFullUpdate(edict_t*)
 T CServerGameEnts::~CServerGameEnts()
 T CServerGameTags::GetTaggedConVarList(KeyValues*)
 T CServerNetworkProperty::AreaNum() const
 T CServerNetworkProperty::AttachEdict(edict_t*)
 T CServerNetworkProperty::CServerNetworkProperty()
 T CServerNetworkProperty::FireEvent()
 T CServerNetworkProperty::GetBaseEntity()
 T CServerNetworkProperty::GetBaseNetworkable()
 T CServerNetworkProperty::GetClassName() const
 T CServerNetworkProperty::GetDataDescMap()
 T CServerNetworkProperty::GetEdict() const
 T CServerNetworkProperty::GetEntityHandle()
 T CServerNetworkProperty::GetNetworkParent()
 T CServerNetworkProperty::GetPVSInfo()
 T CServerNetworkProperty::GetServerClass()
 T CServerNetworkProperty::Init(CBaseEntity*)
 T CServerNetworkProperty::IsInPVS(CCheckTransmitInfo const*)
 T CServerNetworkProperty::IsMarkedForDeletion() const
 T CServerNetworkProperty::MarkForDeletion()
 T CServerNetworkProperty::RecomputePVSInformation()
 T CServerNetworkProperty::Release()
 T CServerNetworkProperty::SetUpdateInterval(float)
 T CServerNetworkProperty::~CServerNetworkProperty()
 T CServerOnlyEntity::ObjectCaps()
 T CServerOnlyPointEntity::KeyValue(char const*, char const*)
 T CServerRagdollTrigger::EndTouch(CBaseEntity*)
 T CServerRagdollTrigger::Spawn()
 T CServerRagdollTrigger::StartTouch(CBaseEntity*)
 T CServerRagdollTrigger::~CServerRagdollTrigger()
 T CServerTools::AddOriginToPVS(Vector const&)
 T CServerTools::CreateEntityByName(char const*)
 T CServerTools::DestroyEntityByHammerId(int)
 T CServerTools::DispatchSpawn(void*)
 T CServerTools::FindEntityByHammerID(int)
 T CServerTools::FirstEntity()
 T CServerTools::GetIServerEntity(IClientEntity*)
 T CServerTools::GetKeyValue(void*, char const*, char*, int)
 T CServerTools::GetPlayerFOV(IClientEntity*)
 T CServerTools::GetPlayerPosition(Vector&, QAngle&, IClientEntity*)
 T CServerTools::IsInNoClipMode(IClientEntity*)
 T CServerTools::MoveEngineViewTo(Vector const&, QAngle const&)
 T CServerTools::NextEntity(void*)
 T CServerTools::ReloadParticleDefintions(char const*, void const*, int)
 T CServerTools::RemoveEntity(int)
 T CServerTools::RespawnEntitiesWithEdits(CEntityRespawnInfo*, int)
 T CServerTools::SetKeyValue(void*, char const*, Vector const&)
 T CServerTools::SetKeyValue(void*, char const*, char const*)
 T CServerTools::SetKeyValue(void*, char const*, float)
 T CServerTools::SetPlayerFOV(int, IClientEntity*)
 T CServerTools::SnapPlayerToPosition(Vector const&, QAngle const&, IClientEntity*)
 T CServerTools::~CServerTools()
 T CShadowControl::CShadowControl()
 T CShadowControl::GetDataDescMap()
 T CShadowControl::GetServerClass()
 T CShadowControl::InputSetAngles(inputdata_t&)
 T CShadowControl::KeyValue(char const*, char const*)
 T CShadowControl::ObjectCaps()
 T CShadowControl::Spawn()
 T CShadowControl::UpdateTransmitState()
 T CShadowControl::YouForgotToImplementOrDeclareServerClass()
 T CShadowControl::~CShadowControl()
 T CSharingAwardTemplate::CSharingAwardTemplate(int)
 T CSharingAwardTemplate::FireGameEvent(IGameEvent*)
 T CSharingAwardTemplate::OnCreate()
 T CSharingAwardTemplate::~CSharingAwardTemplate()
 T CSharpshooterAwardTemplate::CSharpshooterAwardTemplate(int)
 T CSharpshooterAwardTemplate::FireGameEvent(IGameEvent*)
 T CSharpshooterAwardTemplate::OnCreate()
 T CSharpshooterAwardTemplate::~CSharpshooterAwardTemplate()
 T CSheet::CSheet(CUtlBuffer&)
 T CSheet::~CSheet()
 T CShower::ObjectCaps()
 T CShower::Spawn()
 T CShower::Think()
 T CShower::Touch(CBaseEntity*)
 T CShower::~CShower()
 T CSimThinkManager::EntityChanged(CBaseEntity*)
 T CSimThinkManager::LevelShutdownPostEntity()
 T CSimThinkManager::OnEntityCreated(CBaseEntity*)
 T CSimThinkManager::OnEntityDeleted(CBaseEntity*)
 T CSimThinkManager::~CSimThinkManager()
 T CSimplePhysicsBrush::Spawn()
 T CSimplePhysicsBrush::~CSimplePhysicsBrush()
 T CSimplePhysicsProp::ObjectCaps()
 T CSimplePhysicsProp::Spawn()
 T CSimplePhysicsProp::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CSimplePhysicsProp::~CSimplePhysicsProp()
 T CSingleUserPlusObserversFilter::CSingleUserPlusObserversFilter(CBasePlayer*, bool)
 T CSingleUserPlusObserversFilter::~CSingleUserPlusObserversFilter()
 T CSingleUserRecipientFilter::~CSingleUserRecipientFilter()
 T CSkeetShootAwardTemplate::CSkeetShootAwardTemplate(int)
 T CSkeetShootAwardTemplate::FireGameEvent(IGameEvent*)
 T CSkeetShootAwardTemplate::OnCreate()
 T CSkeetShootAwardTemplate::~CSkeetShootAwardTemplate()
 T CSkipKeys::ParseKeyValue(void*, char const*, char const*)
 T CSkipKeys::SetDefaults(void*)
 T CSkyCamera::Activate()
 T CSkyCamera::GetDataDescMap()
 T CSkyCamera::Spawn()
 T CSkyCamera::~CSkyCamera()
 T CSlideshowDisplay::BuildSlideShowImagesList()
 T CSlideshowDisplay::GetDataDescMap()
 T CSlideshowDisplay::GetServerClass()
 T CSlideshowDisplay::InputAddSlides(inputdata_t&)
 T CSlideshowDisplay::InputDisable(inputdata_t&)
 T CSlideshowDisplay::InputEnable(inputdata_t&)
 T CSlideshowDisplay::InputRemoveAllSlides(inputdata_t&)
 T CSlideshowDisplay::InputSetCycleType(inputdata_t&)
 T CSlideshowDisplay::InputSetDisplayText(inputdata_t&)
 T CSlideshowDisplay::InputSetMaxSlideTime(inputdata_t&)
 T CSlideshowDisplay::InputSetMinSlideTime(inputdata_t&)
 T CSlideshowDisplay::InputSetNoListRepeats(inputdata_t&)
 T CSlideshowDisplay::KeyValue(char const*, char const*)
 T CSlideshowDisplay::OnRestore()
 T CSlideshowDisplay::Precache()
 T CSlideshowDisplay::RestoreControlPanels()
 T CSlideshowDisplay::ScreenVisible(bool)
 T CSlideshowDisplay::SetTransmit(CCheckTransmitInfo*, bool)
 T CSlideshowDisplay::Spawn()
 T CSlideshowDisplay::SpawnControlPanels()
 T CSlideshowDisplay::UpdateTransmitState()
 T CSlideshowDisplay::YouForgotToImplementOrDeclareServerClass()
 T CSlideshowDisplay::~CSlideshowDisplay()
 T CSmokeCloudSystem::FireGameEvent(IGameEvent*)
 T CSmokeCloudSystem::FrameUpdatePostEntityThink()
 T CSmokeCloudSystem::LevelInitPreEntity()
 T CSmokeCloudSystem::~CSmokeCloudSystem()
 T CSmokeStack::Activate()
 T CSmokeStack::CSmokeStack()
 T CSmokeStack::GetDataDescMap()
 T CSmokeStack::GetServerClass()
 T CSmokeStack::InputToggle(inputdata_t&)
 T CSmokeStack::InputTurnOff(inputdata_t&)
 T CSmokeStack::InputTurnOn(inputdata_t&)
 T CSmokeStack::KeyValue(char const*, char const*)
 T CSmokeStack::Precache()
 T CSmokeStack::Spawn()
 T CSmokeStack::YouForgotToImplementOrDeclareServerClass()
 T CSmokeStack::~CSmokeStack()
 T CSmokerClaw::GetDataDescMap()
 T CSmokerClaw::GetServerClass()
 T CSmokerClaw::GetWeaponID() const
 T CSmokerClaw::HasSecondaryAttack()
 T CSmokerClaw::Precache()
 T CSmokerClaw::PrimaryAttack()
 T CSmokerClaw::SecondaryAttack()
 T CSmokerClaw::YouForgotToImplementOrDeclareServerClass()
 T CSmokerClaw::~CSmokerClaw()
 T CSniperAwardTemplate::CSniperAwardTemplate(int)
 T CSniperAwardTemplate::FireGameEvent(IGameEvent*)
 T CSniperAwardTemplate::OnCreate()
 T CSniperAwardTemplate::~CSniperAwardTemplate()
 T CSniperRifle::CanFidget()
 T CSniperRifle::CanZoom() const
 T CSniperRifle::GetDataDescMap()
 T CSniperRifle::GetDeployActivity()
 T CSniperRifle::GetLayerForViewmodelActivity(Activity) const
 T CSniperRifle::GetMaxAutoAimDeflection()
 T CSniperRifle::GetMaxMovementSpread() const
 T CSniperRifle::GetMinDuckingSpread() const
 T CSniperRifle::GetMinStandingSpread() const
 T CSniperRifle::GetServerClass()
 T CSniperRifle::GetViewmodelMeleeActivity()
 T CSniperRifle::GetViewmodelTracerAttachmentIndex()
 T CSniperRifle::GetWeaponFireActivity(PlayerAnimEvent_t, Activity)
 T CSniperRifle::GetWeaponID() const
 T CSniperRifle::GetWeaponReloadActivity(PlayerAnimEvent_t, Activity)
 T CSniperRifle::IsFullyAutomatic() const
 T CSniperRifle::Precache()
 T CSniperRifle::TranslateViewmodelActivity(Activity) const
 T CSniperRifle::ViewMovementAffectsAccuracy() const
 T CSniperRifle::WeaponTranslateMainActivity(Activity)
 T CSniperRifle::YouForgotToImplementOrDeclareServerClass()
 T CSniperRifle::~CSniperRifle()
 T CSolidSetDefaults::ParseKeyValue(void*, char const*, char const*)
 T CSolidSetDefaults::SetDefaults(void*)
 T CSortedEntityList::ReportEntityList()
 T CSound::Reset()
 T CSoundControllerImp::CheckLoopingSoundsForPlayer(CBasePlayer*)
 T CSoundControllerImp::CommandAdd(CSoundPatch*, float, soundcommands_t, float, float)
 T CSoundControllerImp::CommandClear(CSoundPatch*)
 T CSoundControllerImp::LevelShutdownPreEntity()
 T CSoundControllerImp::OnRestore()
 T CSoundControllerImp::Play(CSoundPatch*, float, float, float)
 T CSoundControllerImp::PreClientUpdate()
 T CSoundControllerImp::ProcessCommand(SoundCommand_t*)
 T CSoundControllerImp::RemoveFromList(CSoundPatch*)
 T CSoundControllerImp::RestoreSoundPatch(CSoundPatch**, IRestore*)
 T CSoundControllerImp::SaveSoundPatch(CSoundPatch*, ISave*)
 T CSoundControllerImp::Shutdown(CSoundPatch*)
 T CSoundControllerImp::SoundChangePitch(CSoundPatch*, float, float)
 T CSoundControllerImp::SoundChangeVolume(CSoundPatch*, float, float)
 T CSoundControllerImp::SoundCreate(IRecipientFilter&, int, EmitSound_t const&)
 T CSoundControllerImp::SoundCreate(IRecipientFilter&, int, char const*)
 T CSoundControllerImp::SoundCreate(IRecipientFilter&, int, int, char const*, float, Vector const*, float)
 T CSoundControllerImp::SoundCreate(IRecipientFilter&, int, int, char const*, float, float)
 T CSoundControllerImp::SoundCreate(IRecipientFilter&, int, int, char const*, soundlevel_t)
 T CSoundControllerImp::SoundDestroy(CSoundPatch*)
 T CSoundControllerImp::SoundFadeOut(CSoundPatch*, float, bool)
 T CSoundControllerImp::SoundGetElapsedTime(CSoundPatch*)
 T CSoundControllerImp::SoundGetGuid(CSoundPatch*)
 T CSoundControllerImp::SoundGetName(CSoundPatch*)
 T CSoundControllerImp::SoundGetPitch(CSoundPatch*)
 T CSoundControllerImp::SoundGetVolume(CSoundPatch*)
 T CSoundControllerImp::SoundIsStillPlaying(CSoundPatch*)
 T CSoundControllerImp::SoundPlayEnvelope(CSoundPatch*, soundcommands_t, envelopeDescription_t*)
 T CSoundControllerImp::SoundPlayEnvelope(CSoundPatch*, soundcommands_t, envelopePoint_t*, int)
 T CSoundControllerImp::SoundSetCloseCaptionDuration(CSoundPatch*, float)
 T CSoundControllerImp::SystemReset()
 T CSoundControllerImp::SystemUpdate()
 T CSoundControllerImp::~CSoundControllerImp()
 T CSoundEmitterSystem::AddCaptionFile(char const*)
 T CSoundEmitterSystem::EmitAmbientSound(int, Vector const&, char const*, float, int, int, float, float*)
 T CSoundEmitterSystem::EmitAmbientSound(int, Vector const&, char const*, float, soundlevel_t, int, int, float, float*)
 T CSoundEmitterSystem::EmitCloseCaption(IRecipientFilter&, int, CSoundParameters const&, EmitSound_t const&)
 T CSoundEmitterSystem::EmitCloseCaption(IRecipientFilter&, int, bool, char const*, CUtlVector<Vector, CUtlMemory<Vector, int> >&, float, bool, bool)
 T CSoundEmitterSystem::EmitSound(IRecipientFilter&, int, EmitSound_t const&)
 T CSoundEmitterSystem::EmitSoundByHandle(IRecipientFilter&, int, EmitSound_t const&, short&)
 T CSoundEmitterSystem::GetCaptionHash(char const*, bool, unsigned int&)
 T CSoundEmitterSystem::Init()
 T CSoundEmitterSystem::InternalPrecacheWaves(int)
 T CSoundEmitterSystem::LevelInitPostEntity()
 T CSoundEmitterSystem::LevelInitPreEntity()
 T CSoundEmitterSystem::LevelShutdownPostEntity()
 T CSoundEmitterSystem::LogPrecache(char const*)
 T CSoundEmitterSystem::Name()
 T CSoundEmitterSystem::PrecacheScriptSound(char const*)
 T CSoundEmitterSystem::PrefetchScriptSound(char const*)
 T CSoundEmitterSystem::Shutdown()
 T CSoundEmitterSystem::StartLog()
 T CSoundEmitterSystem::StopSound(int, int, char const*)
 T CSoundEmitterSystem::StopSoundByHandle(int, char const*, short&)
 T CSoundEmitterSystem::TraceEmitSound(int, char const*, ...)
 T CSoundEmitterSystem::~CSoundEmitterSystem()
 T CSoundEnt::ActiveList()
 T CSoundEnt::ClientSoundIndex(edict_t*)
 T CSoundEnt::GetDataDescMap()
 T CSoundEnt::GetLoudestSoundOfType(int, Vector const&)
 T CSoundEnt::InitSoundEnt()
 T CSoundEnt::Initialize()
 T CSoundEnt::InsertSound(int, Vector const&, int, float, CBaseEntity*, int, CBaseEntity*)
 T CSoundEnt::ObjectCaps()
 T CSoundEnt::OnRestore()
 T CSoundEnt::Precache()
 T CSoundEnt::ShutdownSoundEnt()
 T CSoundEnt::SoundPointerForIndex(int)
 T CSoundEnt::Spawn()
 T CSoundEnt::Think()
 T CSoundEnt::~CSoundEnt()
 T CSoundEnvelopeController::GetController()
 T CSoundPatch::AddPlayerPost(CBasePlayer*)
 T CSoundPatch::Init(IRecipientFilter*, CBaseEntity*, int, char const*, soundlevel_t, Vector const*, float)
 T CSoundPatch::ResumeSound()
 T CSoundPatch::StartSound(float)
 T CSoundPatch::Update(float, float)
 T CSoundPatchSaveRestoreOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CSoundPatchSaveRestoreOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CSoundscapeSystem::AddSoundscapeEntity(CEnvSoundscape*)
 T CSoundscapeSystem::AddSoundscapeFile(char const*)
 T CSoundscapeSystem::FrameUpdatePostEntityThink()
 T CSoundscapeSystem::GetSoundscapeIndex(char const*)
 T CSoundscapeSystem::Init()
 T CSoundscapeSystem::IsValidIndex(int)
 T CSoundscapeSystem::LevelInitPostEntity()
 T CSoundscapeSystem::LevelInitPreEntity()
 T CSoundscapeSystem::PrintDebugInfo()
 T CSoundscapeSystem::RemoveSoundscapeEntity(CEnvSoundscape*)
 T CSoundscapeSystem::Shutdown()
 T CSoundscapeSystem::~CSoundscapeSystem()
 T CSpotlightEnd::GetDataDescMap()
 T CSpotlightEnd::GetServerClass()
 T CSpotlightEnd::ObjectCaps()
 T CSpotlightEnd::Spawn()
 T CSpotlightEnd::YouForgotToImplementOrDeclareServerClass()
 T CSpotlightEnd::~CSpotlightEnd()
 T CSprayCan::ObjectCaps()
 T CSprayCan::Precache()
 T CSprayCan::Think()
 T CSprayCan::~CSprayCan()
 T CSprite::Animate(float)
 T CSprite::AnimateThink()
 T CSprite::AnimateUntilDead()
 T CSprite::BeginFadeOutThink()
 T CSprite::CSprite()
 T CSprite::ComputeWorldSpaceSurroundingBox(Vector*, Vector*)
 T CSprite::ExpandThink()
 T CSprite::GetDataDescMap()
 T CSprite::GetServerClass()
 T CSprite::InputColorBlueValue(inputdata_t&)
 T CSprite::InputColorGreenValue(inputdata_t&)
 T CSprite::InputColorRedValue(inputdata_t&)
 T CSprite::InputHideSprite(inputdata_t&)
 T CSprite::InputShowSprite(inputdata_t&)
 T CSprite::InputToggleSprite(inputdata_t&)
 T CSprite::ObjectCaps()
 T CSprite::OnRestore()
 T CSprite::Precache()
 T CSprite::SetBrightness(int, float)
 T CSprite::SetModel(char const*)
 T CSprite::SetScale(float, float)
 T CSprite::ShouldTransmit(CCheckTransmitInfo const*)
 T CSprite::Spawn()
 T CSprite::SpriteCreate(char const*, Vector const&, bool)
 T CSprite::SpriteInit(char const*, Vector const&)
 T CSprite::TurnOff()
 T CSprite::TurnOn()
 T CSprite::UpdateTransmitState()
 T CSprite::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CSprite::YouForgotToImplementOrDeclareServerClass()
 T CSprite::~CSprite()
 T CSpriteOriented::GetServerClass()
 T CSpriteOriented::Spawn()
 T CSpriteOriented::YouForgotToImplementOrDeclareServerClass()
 T CSpriteOriented::~CSpriteOriented()
 T CSpriteTrail::CSpriteTrail()
 T CSpriteTrail::GetDataDescMap()
 T CSpriteTrail::GetServerClass()
 T CSpriteTrail::Precache()
 T CSpriteTrail::SetLifeTime(float)
 T CSpriteTrail::SetStartWidth(float)
 T CSpriteTrail::SetTextureResolution(float)
 T CSpriteTrail::Spawn()
 T CSpriteTrail::SpriteTrailCreate(char const*, Vector const&, bool)
 T CSpriteTrail::YouForgotToImplementOrDeclareServerClass()
 T CSpriteTrail::~CSpriteTrail()
 T CSteamAPIContext::Init()
 T CSteamJet::GetDataDescMap()
 T CSteamJet::GetServerClass()
 T CSteamJet::InputToggle(inputdata_t&)
 T CSteamJet::InputTurnOff(inputdata_t&)
 T CSteamJet::InputTurnOn(inputdata_t&)
 T CSteamJet::Precache()
 T CSteamJet::Spawn()
 T CSteamJet::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CSteamJet::YouForgotToImplementOrDeclareServerClass()
 T CSteamJet::~CSteamJet()
 T CStringPool::Allocate(char const*)
 T CStringPool::CStringPool(StringPoolCase_t)
 T CStringPool::Find(char const*)
 T CStringPool::FreeAll()
 T CStringPool::~CStringPool()
 T CStringRegistry::AddString(char const*, int)
 T CStringRegistry::CStringRegistry()
 T CStringRegistry::ClearStrings()
 T CStringRegistry::First() const
 T CStringRegistry::GetIDForKey(unsigned short)
 T CStringRegistry::GetStringForKey(unsigned short)
 T CStringRegistry::GetStringID(char const*)
 T CStringRegistry::GetStringText(int)
 T CStringRegistry::InvalidIndex() const
 T CStringRegistry::Next(unsigned short) const
 T CStringRegistry::~CStringRegistry()
 T CStringTableSaveRestoreOps::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CStringTableSaveRestoreOps::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CStringTableSaveRestoreOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CStringTableSaveRestoreOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CStripWeapons::GetDataDescMap()
 T CStripWeapons::InputStripWeapons(inputdata_t&)
 T CStripWeapons::InputStripWeaponsAndSuit(inputdata_t&)
 T CStripWeapons::~CStripWeapons()
 T CStudioHdr::CActivityToSequenceMapping::FindMapping(CStudioHdr const*)
 T CStudioHdr::CActivityToSequenceMapping::Initialize(CStudioHdr const*)
 T CStudioHdr::CActivityToSequenceMapping::Reinitialize(CStudioHdr*)
 T CStudioHdr::CActivityToSequenceMapping::ReleaseMapping(CStudioHdr::CActivityToSequenceMapping*)
 T CStudioHdr::CActivityToSequenceMapping::ResetMappings()
 T CStudioHdr::CActivityToSequenceMapping::SelectWeightedSequence(CStudioHdr*, int, int)
 T CStudioHdr::CActivityToSequenceMapping::ValidateAgainst(CStudioHdr const*)
 T CStudioHdr::CActivityToSequenceMapping::~CActivityToSequenceMapping()
 T CStudioHdr::CStudioHdr()
 T CStudioHdr::CStudioHdr(studiohdr_t const*, IMDLCache*)
 T CStudioHdr::EntryNode(int)
 T CStudioHdr::ExitNode(int)
 T CStudioHdr::GetActivityListVersion()
 T CStudioHdr::GetAttachmentBone(int)
 T CStudioHdr::GetNumAttachments() const
 T CStudioHdr::GetNumIKAutoplayLocks() const
 T CStudioHdr::GetNumPoseParameters() const
 T CStudioHdr::GetNumSeq() const
 T CStudioHdr::GetSharedPoseParameter(int, int) const
 T CStudioHdr::GetTransition(int, int) const
 T CStudioHdr::GroupStudioHdr(int)
 T CStudioHdr::Init(studiohdr_t const*, IMDLCache*)
 T CStudioHdr::RemapSeqBone(int, int) const
 T CStudioHdr::ResetVModel(virtualmodel_t const*) const
 T CStudioHdr::SequencesAvailable() const
 T CStudioHdr::SetActivityListVersion(int)
 T CStudioHdr::Term()
 T CStudioHdr::iRelativeAnim(int, int) const
 T CStudioHdr::iRelativeSeq(int, int) const
 T CStudioHdr::pAnimStudioHdr(int)
 T CStudioHdr::pAnimdesc(int)
 T CStudioHdr::pAttachment(int)
 T CStudioHdr::pIKAutoplayLock(int)
 T CStudioHdr::pPoseParameter(int)
 T CStudioHdr::pSeqStudioHdr(int)
 T CStudioHdr::pSeqdesc(int)
 T CStudioHdr::pszNodeName(int)
 T CStudioHdr::~CStudioHdr()
 T CSubMachinegun::GetDataDescMap()
 T CSubMachinegun::GetDeployActivity()
 T CSubMachinegun::GetLayerForViewmodelActivity(Activity) const
 T CSubMachinegun::GetServerClass()
 T CSubMachinegun::GetViewmodelMeleeActivity()
 T CSubMachinegun::GetViewmodelTracerAttachmentIndex()
 T CSubMachinegun::GetWeaponFireActivity(PlayerAnimEvent_t, Activity)
 T CSubMachinegun::GetWeaponID() const
 T CSubMachinegun::GetWeaponReloadActivity(PlayerAnimEvent_t, Activity)
 T CSubMachinegun::Precache()
 T CSubMachinegun::TranslateViewmodelActivity(Activity) const
 T CSubMachinegun::WeaponTranslateMainActivity(Activity)
 T CSubMachinegun::YouForgotToImplementOrDeclareServerClass()
 T CSubMachinegun::~CSubMachinegun()
 T CSun::Activate()
 T CSun::CSun()
 T CSun::GetDataDescMap()
 T CSun::GetServerClass()
 T CSun::InputSetColor(inputdata_t&)
 T CSun::InputTurnOff(inputdata_t&)
 T CSun::InputTurnOn(inputdata_t&)
 T CSun::UpdateTransmitState()
 T CSun::YouForgotToImplementOrDeclareServerClass()
 T CSun::~CSun()
 T CSurroundTest::FireCorrectOutput(inputdata_t&)
 T CSurroundTest::GetDataDescMap()
 T CSurroundTest::Spawn()
 T CSurroundTest::~CSurroundTest()
 T CSurvivorCamera::Disable()
 T CSurvivorCamera::Enable()
 T CSurvivorCamera::FollowTarget()
 T CSurvivorCamera::GetDataDescMap()
 T CSurvivorCamera::InputDisable(inputdata_t&)
 T CSurvivorCamera::InputEnable(inputdata_t&)
 T CSurvivorCamera::InputStartMovement(inputdata_t&)
 T CSurvivorCamera::Move()
 T CSurvivorCamera::Spawn()
 T CSurvivorCamera::StartMovement()
 T CSurvivorCamera::UpdateTransmitState()
 T CSurvivorCamera::~CSurvivorCamera()
 T CSurvivorGroupInfo::FrameUpdatePostEntityThink()
 T CSurvivorGroupInfo::~CSurvivorGroupInfo()
 T CSurvivorKillAwardTemplate::CSurvivorKillAwardTemplate(int)
 T CSurvivorKillAwardTemplate::FireGameEvent(IGameEvent*)
 T CSurvivorKillAwardTemplate::OnCreate()
 T CSurvivorKillAwardTemplate::~CSurvivorKillAwardTemplate()
 T CSurvivorPosition::GetDataDescMap()
 T CSurvivorPosition::GetServerClass()
 T CSurvivorPosition::GetSurvivorName()
 T CSurvivorPosition::InputSetViewControl(inputdata_t&)
 T CSurvivorPosition::Precache()
 T CSurvivorPosition::Spawn()
 T CSurvivorPosition::UpdateTransmitState()
 T CSurvivorPosition::YouForgotToImplementOrDeclareServerClass()
 T CSurvivorPosition::~CSurvivorPosition()
 T CSurvivorRescue::AreaScanThink()
 T CSurvivorRescue::CSurvivorRescue()
 T CSurvivorRescue::CallForHelp(CTerrorPlayer*)
 T CSurvivorRescue::CloseDoors()
 T CSurvivorRescue::DrawDebugTextOverlays()
 T CSurvivorRescue::EyePosition()
 T CSurvivorRescue::FireGameEvent(IGameEvent*)
 T CSurvivorRescue::GetDataDescMap()
 T CSurvivorRescue::GetDistanceToNearestSurvivor(float)
 T CSurvivorRescue::GetRescueNavArea()
 T CSurvivorRescue::GetServerClass()
 T CSurvivorRescue::GetSurvivor() const
 T CSurvivorRescue::InputRescue(inputdata_t&)
 T CSurvivorRescue::IsBehindClosedDoor()
 T CSurvivorRescue::IsCallingForHelp()
 T CSurvivorRescue::IsLiveSurvivorInside()
 T CSurvivorRescue::ModifyOrAppendCriteria(AI_CriteriaSet&)
 T CSurvivorRescue::Precache()
 T CSurvivorRescue::RescueThink()
 T CSurvivorRescue::Spawn()
 T CSurvivorRescue::UpdateTransmitState()
 T CSurvivorRescue::ValidateSurvivor()
 T CSurvivorRescue::YellThink()
 T CSurvivorRescue::YouForgotToImplementOrDeclareServerClass()
 T CSurvivorRescue::~CSurvivorRescue()
 T CTEArmorRicochet::GetServerClass()
 T CTEArmorRicochet::YouForgotToImplementOrDeclareServerClass()
 T CTEArmorRicochet::~CTEArmorRicochet()
 T CTEBSPDecal::GetServerClass()
 T CTEBSPDecal::Test(Vector const&, QAngle const&)
 T CTEBSPDecal::YouForgotToImplementOrDeclareServerClass()
 T CTEBSPDecal::~CTEBSPDecal()
 T CTEBaseBeam::CTEBaseBeam(char const*)
 T CTEBaseBeam::GetServerClass()
 T CTEBaseBeam::YouForgotToImplementOrDeclareServerClass()
 T CTEBaseBeam::~CTEBaseBeam()
 T CTEBeamEntPoint::GetServerClass()
 T CTEBeamEntPoint::Test(Vector const&, QAngle const&)
 T CTEBeamEntPoint::YouForgotToImplementOrDeclareServerClass()
 T CTEBeamEntPoint::~CTEBeamEntPoint()
 T CTEBeamEnts::GetServerClass()
 T CTEBeamEnts::Test(Vector const&, QAngle const&)
 T CTEBeamEnts::YouForgotToImplementOrDeclareServerClass()
 T CTEBeamEnts::~CTEBeamEnts()
 T CTEBeamFollow::GetServerClass()
 T CTEBeamFollow::Test(Vector const&, QAngle const&)
 T CTEBeamFollow::YouForgotToImplementOrDeclareServerClass()
 T CTEBeamFollow::~CTEBeamFollow()
 T CTEBeamLaser::GetServerClass()
 T CTEBeamLaser::Test(Vector const&, QAngle const&)
 T CTEBeamLaser::YouForgotToImplementOrDeclareServerClass()
 T CTEBeamLaser::~CTEBeamLaser()
 T CTEBeamPoints::GetServerClass()
 T CTEBeamPoints::Test(Vector const&, QAngle const&)
 T CTEBeamPoints::YouForgotToImplementOrDeclareServerClass()
 T CTEBeamPoints::~CTEBeamPoints()
 T CTEBeamRing::GetServerClass()
 T CTEBeamRing::Test(Vector const&, QAngle const&)
 T CTEBeamRing::YouForgotToImplementOrDeclareServerClass()
 T CTEBeamRing::~CTEBeamRing()
 T CTEBeamRingPoint::GetServerClass()
 T CTEBeamRingPoint::Test(Vector const&, QAngle const&)
 T CTEBeamRingPoint::YouForgotToImplementOrDeclareServerClass()
 T CTEBeamRingPoint::~CTEBeamRingPoint()
 T CTEBeamSpline::GetServerClass()
 T CTEBeamSpline::Test(Vector const&, QAngle const&)
 T CTEBeamSpline::YouForgotToImplementOrDeclareServerClass()
 T CTEBeamSpline::~CTEBeamSpline()
 T CTEBloodSprite::CTEBloodSprite(char const*)
 T CTEBloodSprite::GetServerClass()
 T CTEBloodSprite::Test(Vector const&, QAngle const&)
 T CTEBloodSprite::YouForgotToImplementOrDeclareServerClass()
 T CTEBloodSprite::~CTEBloodSprite()
 T CTEBloodStream::GetServerClass()
 T CTEBloodStream::Test(Vector const&, QAngle const&)
 T CTEBloodStream::YouForgotToImplementOrDeclareServerClass()
 T CTEBloodStream::~CTEBloodStream()
 T CTEBreakModel::CTEBreakModel(char const*)
 T CTEBreakModel::GetServerClass()
 T CTEBreakModel::YouForgotToImplementOrDeclareServerClass()
 T CTEBreakModel::~CTEBreakModel()
 T CTEBubbleTrail::CTEBubbleTrail(char const*)
 T CTEBubbleTrail::GetServerClass()
 T CTEBubbleTrail::Test(Vector const&, QAngle const&)
 T CTEBubbleTrail::YouForgotToImplementOrDeclareServerClass()
 T CTEBubbleTrail::~CTEBubbleTrail()
 T CTEBubbles::CTEBubbles(char const*)
 T CTEBubbles::GetServerClass()
 T CTEBubbles::Test(Vector const&, QAngle const&)
 T CTEBubbles::YouForgotToImplementOrDeclareServerClass()
 T CTEBubbles::~CTEBubbles()
 T CTEBullets::GetServerClass()
 T CTEBullets::YouForgotToImplementOrDeclareServerClass()
 T CTEBullets::~CTEBullets()
 T CTEClientProjectile::GetServerClass()
 T CTEClientProjectile::Test(Vector const&, QAngle const&)
 T CTEClientProjectile::YouForgotToImplementOrDeclareServerClass()
 T CTEClientProjectile::~CTEClientProjectile()
 T CTEDecal::GetServerClass()
 T CTEDecal::Test(Vector const&, QAngle const&)
 T CTEDecal::YouForgotToImplementOrDeclareServerClass()
 T CTEDecal::~CTEDecal()
 T CTEDust::GetServerClass()
 T CTEDust::Test(Vector const&, QAngle const&)
 T CTEDust::YouForgotToImplementOrDeclareServerClass()
 T CTEDust::~CTEDust()
 T CTEDynamicLight::CTEDynamicLight(char const*)
 T CTEDynamicLight::GetServerClass()
 T CTEDynamicLight::Test(Vector const&, QAngle const&)
 T CTEDynamicLight::YouForgotToImplementOrDeclareServerClass()
 T CTEDynamicLight::~CTEDynamicLight()
 T CTEEffectDispatch::GetServerClass()
 T CTEEffectDispatch::YouForgotToImplementOrDeclareServerClass()
 T CTEEffectDispatch::~CTEEffectDispatch()
 T CTEEnergySplash::GetServerClass()
 T CTEEnergySplash::Test(Vector const&, QAngle const&)
 T CTEEnergySplash::YouForgotToImplementOrDeclareServerClass()
 T CTEEnergySplash::~CTEEnergySplash()
 T CTEExplosion::CTEExplosion(char const*)
 T CTEExplosion::GetServerClass()
 T CTEExplosion::Test(Vector const&, QAngle const&)
 T CTEExplosion::YouForgotToImplementOrDeclareServerClass()
 T CTEExplosion::~CTEExplosion()
 T CTEFizz::GetServerClass()
 T CTEFizz::Precache()
 T CTEFizz::Test(Vector const&, QAngle const&)
 T CTEFizz::YouForgotToImplementOrDeclareServerClass()
 T CTEFizz::~CTEFizz()
 T CTEFootprintDecal::GetServerClass()
 T CTEFootprintDecal::YouForgotToImplementOrDeclareServerClass()
 T CTEFootprintDecal::~CTEFootprintDecal()
 T CTEFoundryHelpers::GetServerClass()
 T CTEFoundryHelpers::YouForgotToImplementOrDeclareServerClass()
 T CTEFoundryHelpers::~CTEFoundryHelpers()
 T CTEGaussExplosion::GetServerClass()
 T CTEGaussExplosion::Test(Vector const&, QAngle const&)
 T CTEGaussExplosion::YouForgotToImplementOrDeclareServerClass()
 T CTEGaussExplosion::~CTEGaussExplosion()
 T CTEGlowSprite::GetServerClass()
 T CTEGlowSprite::Test(Vector const&, QAngle const&)
 T CTEGlowSprite::YouForgotToImplementOrDeclareServerClass()
 T CTEGlowSprite::~CTEGlowSprite()
 T CTEImpact::GetServerClass()
 T CTEImpact::Precache()
 T CTEImpact::YouForgotToImplementOrDeclareServerClass()
 T CTEImpact::~CTEImpact()
 T CTEKillPlayerAttachments::GetServerClass()
 T CTEKillPlayerAttachments::Test(Vector const&, QAngle const&)
 T CTEKillPlayerAttachments::YouForgotToImplementOrDeclareServerClass()
 T CTEKillPlayerAttachments::~CTEKillPlayerAttachments()
 T CTELargeFunnel::GetServerClass()
 T CTELargeFunnel::Test(Vector const&, QAngle const&)
 T CTELargeFunnel::YouForgotToImplementOrDeclareServerClass()
 T CTELargeFunnel::~CTELargeFunnel()
 T CTEMetalSparks::GetServerClass()
 T CTEMetalSparks::Test(Vector const&, QAngle const&)
 T CTEMetalSparks::YouForgotToImplementOrDeclareServerClass()
 T CTEMetalSparks::~CTEMetalSparks()
 T CTEMuzzleFlash::GetServerClass()
 T CTEMuzzleFlash::Test(Vector const&, QAngle const&)
 T CTEMuzzleFlash::YouForgotToImplementOrDeclareServerClass()
 T CTEMuzzleFlash::~CTEMuzzleFlash()
 T CTEPhysicsProp::CTEPhysicsProp(char const*)
 T CTEPhysicsProp::GetServerClass()
 T CTEPhysicsProp::YouForgotToImplementOrDeclareServerClass()
 T CTEPhysicsProp::~CTEPhysicsProp()
 T CTEPlayerAnimEvent::GetServerClass()
 T CTEPlayerAnimEvent::YouForgotToImplementOrDeclareServerClass()
 T CTEPlayerAnimEvent::~CTEPlayerAnimEvent()
 T CTEPlayerDecal::GetServerClass()
 T CTEPlayerDecal::Test(Vector const&, QAngle const&)
 T CTEPlayerDecal::YouForgotToImplementOrDeclareServerClass()
 T CTEPlayerDecal::~CTEPlayerDecal()
 T CTEProjectedDecal::GetServerClass()
 T CTEProjectedDecal::Test(Vector const&, QAngle const&)
 T CTEProjectedDecal::YouForgotToImplementOrDeclareServerClass()
 T CTEProjectedDecal::~CTEProjectedDecal()
 T CTEShatterSurface::CTEShatterSurface(char const*)
 T CTEShatterSurface::GetServerClass()
 T CTEShatterSurface::Test(Vector const&, QAngle const&)
 T CTEShatterSurface::YouForgotToImplementOrDeclareServerClass()
 T CTEShatterSurface::~CTEShatterSurface()
 T CTEShowLine::GetServerClass()
 T CTEShowLine::Test(Vector const&, QAngle const&)
 T CTEShowLine::YouForgotToImplementOrDeclareServerClass()
 T CTEShowLine::~CTEShowLine()
 T CTESmoke::GetServerClass()
 T CTESmoke::Test(Vector const&, QAngle const&)
 T CTESmoke::YouForgotToImplementOrDeclareServerClass()
 T CTESmoke::~CTESmoke()
 T CTESparks::GetServerClass()
 T CTESparks::Test(Vector const&, QAngle const&)
 T CTESparks::YouForgotToImplementOrDeclareServerClass()
 T CTESparks::~CTESparks()
 T CTESprite::GetServerClass()
 T CTESprite::Precache()
 T CTESprite::Test(Vector const&, QAngle const&)
 T CTESprite::YouForgotToImplementOrDeclareServerClass()
 T CTESprite::~CTESprite()
 T CTESpriteSpray::CTESpriteSpray(char const*)
 T CTESpriteSpray::GetServerClass()
 T CTESpriteSpray::Test(Vector const&, QAngle const&)
 T CTESpriteSpray::YouForgotToImplementOrDeclareServerClass()
 T CTESpriteSpray::~CTESpriteSpray()
 T CTEWorldDecal::GetServerClass()
 T CTEWorldDecal::Test(Vector const&, QAngle const&)
 T CTEWorldDecal::YouForgotToImplementOrDeclareServerClass()
 T CTEWorldDecal::~CTEWorldDecal()
 T CTSListWithFreeList<CBaseHandle>::Purge()
 T CTSListWithFreeList<CBaseHandle>::PushItem(CBaseHandle const&)
 T CTSListWithFreeList<CBaseHandle>::~CTSListWithFreeList()
 T CTSQueue<CFunctor*, false>::CTSQueue()
 T CTSQueue<CFunctor*, false>::Pop()
 T CTSQueue<CFunctor*, false>::Purge()
 T CTSQueue<CFunctor*, false>::PushItem(CFunctor* const&)
 T CTSQueue<CFunctor*, false>::~CTSQueue()
 T CTakeDamageInfo::AdjustPlayerDamageInflictedForSkillLevel()
 T CTakeDamageInfo::CTakeDamageInfo()
 T CTakeDamageInfo::CTakeDamageInfo(CBaseEntity*, CBaseEntity*, Vector const&, Vector const&, float, int, int, Vector*)
 T CTakeDamageInfo::CTakeDamageInfo(CBaseEntity*, CBaseEntity*, float, int, int)
 T CTakeDamageInfo::DebugGetDamageTypeString(unsigned int, char*, int)
 T CTankClaw::CTankClaw()
 T CTankClaw::CanBeDropped() const
 T CTankClaw::CanPlayerMove() const
 T CTankClaw::DoSwing()
 T CTankClaw::GetDataDescMap()
 T CTankClaw::GetPlayerDamage(CTerrorPlayer*) const
 T CTankClaw::GetPushDirection(CBaseEntity*, Vector)
 T CTankClaw::GetPushForce(CBaseEntity*, Vector)
 T CTankClaw::GetServerClass()
 T CTankClaw::GetSwingForward()
 T CTankClaw::GetWeaponID() const
 T CTankClaw::GroundPound()
 T CTankClaw::ItemBusyFrame()
 T CTankClaw::ItemPostFrame()
 T CTankClaw::NetworkVar_m_lowAttackDurationTimer::NetworkStateChanged()
 T CTankClaw::NetworkVar_m_lowAttackDurationTimer::NetworkStateChanged(void*)
 T CTankClaw::OnHit(CGameTrace&, Vector const&, bool)
 T CTankClaw::OnPlayerHit(CTerrorPlayer*, bool)
 T CTankClaw::OnSwingEnd(bool)
 T CTankClaw::OnSwingStart()
 T CTankClaw::OnWindupFinished()
 T CTankClaw::Precache()
 T CTankClaw::PrimaryAttack()
 T CTankClaw::SecondaryAttack()
 T CTankClaw::ShootPosition()
 T CTankClaw::SweepFist(Vector const&, Vector const&)
 T CTankClaw::SwingYawEnd() const
 T CTankClaw::SwingYawStart() const
 T CTankClaw::TrySwing(float, float, float, CBaseEntity*)
 T CTankClaw::YouForgotToImplementOrDeclareServerClass()
 T CTankClaw::~CTankClaw()
 T CTankRock::BounceTouch(CBaseEntity*)
 T CTankRock::Create(Vector const&, QAngle const&, Vector const&, CBaseCombatCharacter*)
 T CTankRock::Detonate()
 T CTankRock::GetDataDescMap()
 T CTankRock::OnRelease(Vector const&, QAngle const&, Vector const&, Vector const&)
 T CTankRock::Precache()
 T CTankRock::ProximityThink()
 T CTankRock::ResolveFlyCollisionCustom(CGameTrace&, Vector&)
 T CTankRock::Spawn()
 T CTankRock::~CTankRock()
 T CTankTargetChange::GetDataDescMap()
 T CTankTargetChange::Precache()
 T CTankTargetChange::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CTankTargetChange::~CTankTargetChange()
 T CTankTrainAI::Activate()
 T CTankTrainAI::GetDataDescMap()
 T CTankTrainAI::InputTargetEntity(inputdata_t&)
 T CTankTrainAI::Precache()
 T CTankTrainAI::SoundEngineStart()
 T CTankTrainAI::Spawn()
 T CTankTrainAI::Think()
 T CTankTrainAI::~CTankTrainAI()
 T CTargetCDAudioRep::GetDataDescMap()
 T CTargetCDAudioRep::InputChangeCDTrack(inputdata_t&)
 T CTargetCDAudioRep::~CTargetCDAudioRep()
 T CTargetChangeGravity::GetDataDescMap()
 T CTargetChangeGravity::InputChangeGrav(inputdata_t&)
 T CTargetChangeGravity::InputResetGrav(inputdata_t&)
 T CTargetChangeGravity::~CTargetChangeGravity()
 T CTeam::AddPlayer(CBasePlayer*)
 T CTeam::AddScore(int)
 T CTeam::AddSpawnpoint(CTeamSpawnPoint*)
 T CTeam::CTeam()
 T CTeam::GetName()
 T CTeam::GetNumPlayers()
 T CTeam::GetPlayer(int)
 T CTeam::GetRoundsWon()
 T CTeam::GetScore()
 T CTeam::GetServerClass()
 T CTeam::GetTeamNumber() const
 T CTeam::IncrementRoundsWon()
 T CTeam::Init(char const*, int)
 T CTeam::InitializePlayers()
 T CTeam::InitializeSpawnpoints()
 T CTeam::Precache()
 T CTeam::RemovePlayer(CBasePlayer*)
 T CTeam::RemoveSpawnpoint(CTeamSpawnPoint*)
 T CTeam::ResetScores()
 T CTeam::SetRoundsWon(int)
 T CTeam::SetScore(int)
 T CTeam::ShouldTransmitToPlayer(CBasePlayer*, CBaseEntity*)
 T CTeam::SpawnPlayer(CBasePlayer*)
 T CTeam::Think()
 T CTeam::UpdateClientData(CBasePlayer*)
 T CTeam::UpdateTransmitState()
 T CTeam::YouForgotToImplementOrDeclareServerClass()
 T CTeam::~CTeam()
 T CTeamSpawnPoint::Activate()
 T CTeamSpawnPoint::GetDataDescMap()
 T CTeamSpawnPoint::InputDisable(inputdata_t&)
 T CTeamSpawnPoint::InputEnable(inputdata_t&)
 T CTeamSpawnPoint::IsValid(CBasePlayer*)
 T CTeamSpawnPoint::~CTeamSpawnPoint()
 T CTeamVehicleSpawnPoint::Activate()
 T CTeamVehicleSpawnPoint::GetDataDescMap()
 T CTeamVehicleSpawnPoint::~CTeamVehicleSpawnPoint()
 T CTeamplayRoundBasedRulesProxy::InputSetStalemateOnTimelimit(inputdata_t&)
 T CTeamplayRules::CTeamplayRules()
 T CTeamplayRules::ChangePlayerTeam(CBasePlayer*, char const*, bool, bool)
 T CTeamplayRules::ClientCommand(CBaseEntity*, CCommand const&)
 T CTeamplayRules::ClientDisconnected(edict_t*)
 T CTeamplayRules::ClientSettingsChanged(CBasePlayer*)
 T CTeamplayRules::DeathNotice(CBasePlayer*, CTakeDamageInfo const&)
 T CTeamplayRules::FPlayerCanTakeDamage(CBasePlayer*, CBaseEntity*)
 T CTeamplayRules::GetCaptureValueForPlayer(CBasePlayer*)
 T CTeamplayRules::GetGameDescription()
 T CTeamplayRules::GetIndexedTeamName(int)
 T CTeamplayRules::GetTeamID(CBaseEntity*)
 T CTeamplayRules::GetTeamIndex(char const*)
 T CTeamplayRules::HandleScrambleTeams()
 T CTeamplayRules::HandleSwitchTeams()
 T CTeamplayRules::IPointsForKill(CBasePlayer*, CBasePlayer*)
 T CTeamplayRules::InitHUD(CBasePlayer*)
 T CTeamplayRules::IsTeamplay()
 T CTeamplayRules::IsValidTeam(char const*)
 T CTeamplayRules::PlayerCanHearChat(CBasePlayer*, CBasePlayer*)
 T CTeamplayRules::PlayerKilled(CBasePlayer*, CTakeDamageInfo const&)
 T CTeamplayRules::PlayerMayBlockPoint(CBasePlayer*, int, char*, int)
 T CTeamplayRules::PlayerMayCapturePoint(CBasePlayer*, int, char*, int)
 T CTeamplayRules::PlayerRelationship(CBaseEntity*, CBaseEntity*)
 T CTeamplayRules::PointsMayBeCaptured()
 T CTeamplayRules::Precache()
 T CTeamplayRules::RecountTeams()
 T CTeamplayRules::SetDefaultPlayerTeam(CBasePlayer*)
 T CTeamplayRules::SetScrambleTeams(bool)
 T CTeamplayRules::SetStalemate(int, bool, bool)
 T CTeamplayRules::SetSwitchTeams(bool)
 T CTeamplayRules::SetWinningTeam(int, int, bool, bool)
 T CTeamplayRules::ShouldAutoAim(CBasePlayer*, edict_t*)
 T CTeamplayRules::ShouldScrambleTeams()
 T CTeamplayRules::ShouldSwitchTeams()
 T CTeamplayRules::TeamMayCapturePoint(int, int)
 T CTeamplayRules::Think()
 T CTeamplayRules::TimerMayExpire()
 T CTeamplayRules::~CTeamplayRules()
 T CTempEntTester::Create(Vector const&, QAngle const&, char const*, char const*)
 T CTempEntTester::Spawn()
 T CTempEntTester::Think()
 T CTempEntTester::~CTempEntTester()
 T CTempEntsSystem::ArmorRicochet(IRecipientFilter&, float, Vector const*, Vector const*)
 T CTempEntsSystem::BSPDecal(IRecipientFilter&, float, Vector const*, int, int)
 T CTempEntsSystem::BeamEntPoint(IRecipientFilter&, float, int, Vector const*, int, Vector const*, int, int, int, int, float, float, float, int, float, int, int, int, int, int)
 T CTempEntsSystem::BeamEnts(IRecipientFilter&, float, int, int, int, int, int, int, float, float, float, int, float, int, int, int, int, int)
 T CTempEntsSystem::BeamFollow(IRecipientFilter&, float, int, int, int, float, float, float, float, float, float, float, float)
 T CTempEntsSystem::BeamLaser(IRecipientFilter&, float, int, int, int, int, int, int, float, float, float, int, float, int, int, int, int, int)
 T CTempEntsSystem::BeamPoints(IRecipientFilter&, float, Vector const*, Vector const*, int, int, int, int, float, float, float, int, float, int, int, int, int, int)
 T CTempEntsSystem::BeamRing(IRecipientFilter&, float, int, int, int, int, int, int, float, float, int, float, int, int, int, int, int, int)
 T CTempEntsSystem::BeamRingPoint(IRecipientFilter&, float, Vector const&, float, float, int, int, int, int, float, float, int, float, int, int, int, int, int, int)
 T CTempEntsSystem::BeamSpline(IRecipientFilter&, float, int, Vector*)
 T CTempEntsSystem::BloodSprite(IRecipientFilter&, float, Vector const*, Vector const*, int, int, int, int, int)
 T CTempEntsSystem::BloodStream(IRecipientFilter&, float, Vector const*, Vector const*, int, int, int, int, int)
 T CTempEntsSystem::BreakModel(IRecipientFilter&, float, Vector const&, QAngle const&, Vector const&, Vector const&, int, int, int, float, int)
 T CTempEntsSystem::BubbleTrail(IRecipientFilter&, float, Vector const*, Vector const*, float, int, int, float)
 T CTempEntsSystem::Bubbles(IRecipientFilter&, float, Vector const*, Vector const*, float, int, int, float)
 T CTempEntsSystem::ClientProjectile(IRecipientFilter&, float, Vector const*, Vector const*, int, int, CBaseEntity*)
 T CTempEntsSystem::Decal(IRecipientFilter&, float, Vector const*, Vector const*, int, int, int)
 T CTempEntsSystem::Dust(IRecipientFilter&, float, Vector const&, Vector const&, float, float)
 T CTempEntsSystem::DynamicLight(IRecipientFilter&, float, Vector const*, int, int, int, int, float, float, float)
 T CTempEntsSystem::EnergySplash(IRecipientFilter&, float, Vector const*, Vector const*, bool)
 T CTempEntsSystem::Explosion(IRecipientFilter&, float, Vector const*, int, float, int, int, int, int, Vector const*, unsigned char)
 T CTempEntsSystem::Fizz(IRecipientFilter&, float, CBaseEntity const*, int, int, int)
 T CTempEntsSystem::FootprintDecal(IRecipientFilter&, float, Vector const*, Vector const*, int, int, unsigned char)
 T CTempEntsSystem::GaussExplosion(IRecipientFilter&, float, Vector const&, Vector const&, int)
 T CTempEntsSystem::GlowSprite(IRecipientFilter&, float, Vector const*, int, float, float, int)
 T CTempEntsSystem::KillPlayerAttachments(IRecipientFilter&, float, int)
 T CTempEntsSystem::LargeFunnel(IRecipientFilter&, float, Vector const*, int, int)
 T CTempEntsSystem::MetalSparks(IRecipientFilter&, float, Vector const*, Vector const*)
 T CTempEntsSystem::MuzzleFlash(IRecipientFilter&, float, Vector const&, QAngle const&, float, int)
 T CTempEntsSystem::PhysicsProp(IRecipientFilter&, float, int, int, Vector const&, QAngle const&, Vector const&, int, int)
 T CTempEntsSystem::PlayerDecal(IRecipientFilter&, float, Vector const*, int, int)
 T CTempEntsSystem::ProjectDecal(IRecipientFilter&, float, Vector const*, QAngle const*, float, int)
 T CTempEntsSystem::ShatterSurface(IRecipientFilter&, float, Vector const*, QAngle const*, Vector const*, Vector const*, float, float, float, ShatterSurface_t, int, int, int, int, int, int)
 T CTempEntsSystem::ShowLine(IRecipientFilter&, float, Vector const*, Vector const*)
 T CTempEntsSystem::Smoke(IRecipientFilter&, float, Vector const*, int, float, int)
 T CTempEntsSystem::Sparks(IRecipientFilter&, float, Vector const*, int, int, Vector const*)
 T CTempEntsSystem::Sprite(IRecipientFilter&, float, Vector const*, int, float, int)
 T CTempEntsSystem::SpriteSpray(IRecipientFilter&, float, Vector const*, Vector const*, int, int, float, int)
 T CTempEntsSystem::SuppressTE(IRecipientFilter&)
 T CTempEntsSystem::TriggerTempEntity(KeyValues*)
 T CTempEntsSystem::WorldDecal(IRecipientFilter&, float, Vector const*, int)
 T CTempEntsSystem::~CTempEntsSystem()
 T CTemplate_SaveRestoreBlockHandler::GetBlockName()
 T CTemplate_SaveRestoreBlockHandler::ReadRestoreHeaders(IRestore*)
 T CTemplate_SaveRestoreBlockHandler::Restore(IRestore*, bool)
 T CTemplate_SaveRestoreBlockHandler::Save(ISave*)
 T CTemplate_SaveRestoreBlockHandler::WriteSaveHeaders(ISave*)
 T CTemplatesHook::LevelShutdownPostEntity()
 T CTemplatesHook::~CTemplatesHook()
 T CTerrorAmmoDef::MaxCarry(int, CBaseCombatCharacter const*)
 T CTerrorAmmoDef::~CTerrorAmmoDef()
 T CTerrorAmmoDefSystem::FrameUpdatePreEntityThink()
 T CTerrorAmmoDefSystem::Init()
 T CTerrorAmmoDefSystem::~CTerrorAmmoDefSystem()
 T CTerrorEventLog::FormatPlayer(CBaseEntity*, char*, int) const
 T CTerrorEventLog::Init()
 T CTerrorEventLog::PrintEvent(IGameEvent*)
 T CTerrorEventLog::PrintTerrorEvent(IGameEvent*)
 T CTerrorEventLog::~CTerrorEventLog()
 T CTerrorGameMovement::AdjustPosture(CGameTrace const&, Vector const&, ITraceFilter*, bool)
 T CTerrorGameMovement::AirMove()
 T CTerrorGameMovement::CanBeStuck()
 T CTerrorGameMovement::CanPlayerSwim()
 T CTerrorGameMovement::CanStayOnGround() const
 T CTerrorGameMovement::CategorizeGroundSurface(CGameTrace&)
 T CTerrorGameMovement::CategorizePosition(bool)
 T CTerrorGameMovement::CheckFalling()
 T CTerrorGameMovement::CheckForLadders(bool)
 T CTerrorGameMovement::CheckForLedge(Vector const&, float, float)
 T CTerrorGameMovement::CheckForLedges()
 T CTerrorGameMovement::CheckJumpButton()
 T CTerrorGameMovement::CheckLungeButton()
 T CTerrorGameMovement::CheckParameters()
 T CTerrorGameMovement::CheckStacking()
 T CTerrorGameMovement::CheckWaterJump()
 T CTerrorGameMovement::ClimbSpeed() const
 T CTerrorGameMovement::DecayPunchAngle()
 T CTerrorGameMovement::DoJump(Vector*)
 T CTerrorGameMovement::FinishDuck()
 T CTerrorGameMovement::FinishUnDuck()
 T CTerrorGameMovement::FullCustomMove()
 T CTerrorGameMovement::GetMinGroundNormalZ() const
 T CTerrorGameMovement::GetPlayerViewOffset(bool) const
 T CTerrorGameMovement::GetVelocityModifier()
 T CTerrorGameMovement::GetWaterCheckPosition(int, Vector*)
 T CTerrorGameMovement::HandleCustomCollision(Vector const&, Vector const&, CGameTrace*)
 T CTerrorGameMovement::HandleDuckingSpeedCrop()
 T CTerrorGameMovement::LadderMask() const
 T CTerrorGameMovement::LadderMove()
 T CTerrorGameMovement::LedgeMove()
 T CTerrorGameMovement::LockTraceFilter(int)
 T CTerrorGameMovement::OnCrouchStart()
 T CTerrorGameMovement::OnLadder(CGameTrace&)
 T CTerrorGameMovement::PlaySwimSound()
 T CTerrorGameMovement::PlayerMove()
 T CTerrorGameMovement::PlayerMovementTraceHull(Vector const&, Vector const&, Vector const&, Vector const&, unsigned int, ITraceFilter*, CGameTrace*)
 T CTerrorGameMovement::PlayerRoughLandingEffects(float)
 T CTerrorGameMovement::PlayerSolidMask(bool, CBasePlayer*) const
 T CTerrorGameMovement::ProcessMovement(CBasePlayer*, CMoveData*)
 T CTerrorGameMovement::SetGroundEntity(CGameTrace*)
 T CTerrorGameMovement::TongueMove()
 T CTerrorGameMovement::TryOtherPlayerMove(CTerrorPlayer*, Vector&, Vector&, Vector*, CGameTrace*)
 T CTerrorGameMovement::UnblockPusher(CBasePlayer*, CBaseEntity*)
 T CTerrorGameMovement::UnlockTraceFilter(ITraceFilter*&)
 T CTerrorGameMovement::UpdateMinGroundNormalZ()
 T CTerrorGameMovement::UpdatePosition(CTerrorPlayer*, Vector const&, Vector const&, float, Vector*, CGameTrace*, ITraceFilter*, int, Vector*)
 T CTerrorGameMovement::UpdatePosition(Vector const&, float)
 T CTerrorGameMovement::WalkMove()
 T CTerrorGameMovement::WaterMove()
 T CTerrorGameMovement::~CTerrorGameMovement()
 T CTerrorGameRules::AllowSurvivorRescue()
 T CTerrorGameRules::CTerrorGameRules()
 T CTerrorGameRules::CalcCampaignMapMaxScore(int) const
 T CTerrorGameRules::CheckFragLimit()
 T CTerrorGameRules::CheckGameOver()
 T CTerrorGameRules::CheckMaxRounds()
 T CTerrorGameRules::CheckRestartRound()
 T CTerrorGameRules::CheckRoundTimeExpired()
 T CTerrorGameRules::CheckWinConditions()
 T CTerrorGameRules::CheckWinLimit()
 T CTerrorGameRules::CleanUpMap()
 T CTerrorGameRules::ClearMapScores()
 T CTerrorGameRules::ClearPlayerZombieDamage()
 T CTerrorGameRules::ClearTeamScores()
 T CTerrorGameRules::ClientConnected(edict_t*, char const*, char const*, char*, int)
 T CTerrorGameRules::ClientDisconnected(edict_t*)
 T CTerrorGameRules::ClientSettingsChanged(CBasePlayer*)
 T CTerrorGameRules::CreateStandardEntities()
 T CTerrorGameRules::DeathNoticeForInfected(CBaseCombatCharacter*, CTakeDamageInfo const&)
 T CTerrorGameRules::DoesEntityBlockExplosions(CBaseEntity*) const
 T CTerrorGameRules::FPlayerCanRespawn(CBasePlayer*)
 T CTerrorGameRules::FShouldSwitchWeapon(CBasePlayer*, CBaseCombatWeapon*)
 T CTerrorGameRules::FlPlayerFallDamage(CBasePlayer*)
 T CTerrorGameRules::GetAmmoDamage(CBaseEntity*, CBaseEntity*, int)
 T CTerrorGameRules::GetAutoAimMode()
 T CTerrorGameRules::GetBuyTimeLength() const
 T CTerrorGameRules::GetChatFormat(bool, CBasePlayer*)
 T CTerrorGameRules::GetChatLocation(bool, CBasePlayer*)
 T CTerrorGameRules::GetChatPrefix(bool, CBasePlayer*)
 T CTerrorGameRules::GetDeathScorer(CBaseEntity*, CBaseEntity*)
 T CTerrorGameRules::GetEncryptionKey()
 T CTerrorGameRules::GetGameDescription()
 T CTerrorGameRules::GetHoldoutDuration() const
 T CTerrorGameRules::GetHoldoutMedalForTime(float) const
 T CTerrorGameRules::GetMaxHumanPlayers() const
 T CTerrorGameRules::GetMissionCurrentMap(KeyValues**)
 T CTerrorGameRules::GetMissionFirstMap(KeyValues**)
 T CTerrorGameRules::GetMissionInfo()
 T CTerrorGameRules::GetMissionNextMap(KeyValues**)
 T CTerrorGameRules::GetPlayerSpawnSpot(CBasePlayer*)
 T CTerrorGameRules::GetPlayerZombieDamage(ZombieClassType, bool)
 T CTerrorGameRules::GetTeamScore(int, bool) const
 T CTerrorGameRules::GetViewVectors() const
 T CTerrorGameRules::HasPlayerControlledZombies()
 T CTerrorGameRules::InRoundRestart()
 T CTerrorGameRules::InitVersusFinaleProgressScoreFactor()
 T CTerrorGameRules::InitVersusScoreMultiplier()
 T CTerrorGameRules::IsCoopMode()
 T CTerrorGameRules::IsDLC3Escapee(CTerrorPlayer*) const
 T CTerrorGameRules::IsGarageCampaign()
 T CTerrorGameRules::IsHoldoutMode()
 T CTerrorGameRules::IsMissionFinalMap()
 T CTerrorGameRules::IsOriginalCampaign()
 T CTerrorGameRules::IsRiverCampaign()
 T CTerrorGameRules::IsSingleChapterMode()
 T CTerrorGameRules::IsTeamOnTeamMode()
 T CTerrorGameRules::IsVersusMode()
 T CTerrorGameRules::LevelInitPostEntity()
 T CTerrorGameRules::LevelInitPreEntity()
 T CTerrorGameRules::NeededPlayersCheck(bool&)
 T CTerrorGameRules::OnBeginChangeLevel(char const*, KeyValues*)
 T CTerrorGameRules::OnGSGetGameplayStatsResponse(GSGameplayStats_t*)
 T CTerrorGameRules::OnPlayerTeleported(CTerrorPlayer*)
 T CTerrorGameRules::PlayerKilled(CBasePlayer*, CTakeDamageInfo const&)
 T CTerrorGameRules::PlayerSpawn(CBasePlayer*)
 T CTerrorGameRules::PlayersAllowedToAttack() const
 T CTerrorGameRules::PopulateDeathEvent(IGameEvent*, CBaseEntity const*, CBaseCombatCharacter const*, CTakeDamageInfo const&)
 T CTerrorGameRules::PopulateDeathEvent(KeyValues*, CBaseEntity const*, CBaseCombatCharacter const*, CTakeDamageInfo const&)
 T CTerrorGameRules::PrepareGameConVars()
 T CTerrorGameRules::RecomputeTeamScores()
 T CTerrorGameRules::RestartRound()
 T CTerrorGameRules::SetCampaignScores(int, int)
 T CTerrorGameRules::SetHoldoutEndTime(float)
 T CTerrorGameRules::SetHoldoutStartTime(float)
 T CTerrorGameRules::SetMapScores(int, int, int)
 T CTerrorGameRules::StoreDLC3Escapees()
 T CTerrorGameRules::TeamFull(int)
 T CTerrorGameRules::TerminateRound(float, int)
 T CTerrorGameRules::Think()
 T CTerrorGameRules::TrackPlayerZombieDamage(CTerrorPlayer*, int, bool)
 T CTerrorGameRules::UpdateGameplayStatsFromSteam()
 T CTerrorGameRules::WeaponTraceEntity(CBaseEntity*, Vector const&, Vector const&, unsigned int, CGameTrace*)
 T CTerrorGameRules::~CTerrorGameRules()
 T CTerrorGameRulesProxy::GetServerClass()
 T CTerrorGameRulesProxy::YouForgotToImplementOrDeclareServerClass()
 T CTerrorGameRulesProxy::~CTerrorGameRulesProxy()
 T CTerrorGun::AbortReload()
 T CTerrorGun::CTerrorGun()
 T CTerrorGun::CanBeDualWielded() const
 T CTerrorGun::CanZoom() const
 T CTerrorGun::CycleZoom()
 T CTerrorGun::Deploy()
 T CTerrorGun::DropSecondWeapon()
 T CTerrorGun::EquipSecondWeapon()
 T CTerrorGun::FinishReload()
 T CTerrorGun::FireBullet()
 T CTerrorGun::GetDataDescMap()
 T CTerrorGun::GetFireRate()
 T CTerrorGun::GetMaxAutoAimDeflection()
 T CTerrorGun::GetMaxAutoAimRange()
 T CTerrorGun::GetMaxClip1() const
 T CTerrorGun::GetMaxMovementSpread() const
 T CTerrorGun::GetMinDuckingSpread() const
 T CTerrorGun::GetMinInAirSpread() const
 T CTerrorGun::GetMinStandingSpread() const
 T CTerrorGun::GetRateOfFire() const
 T CTerrorGun::GetReloadEndDuration(bool) const
 T CTerrorGun::GetServerClass()
 T CTerrorGun::GetTerrorGun()
 T CTerrorGun::GetTracerAttachmentIndex()
 T CTerrorGun::GetViewmodelTracerAttachmentIndex()
 T CTerrorGun::HasScope() const
 T CTerrorGun::HasSecondaryMelee()
 T CTerrorGun::Holster(CBaseCombatWeapon*)
 T CTerrorGun::IsDualWielding() const
 T CTerrorGun::IsFullyAutomatic() const
 T CTerrorGun::IsSingleReload() const
 T CTerrorGun::ItemBusyFrame()
 T CTerrorGun::ItemPostFrame()
 T CTerrorGun::OnSwingStart()
 T CTerrorGun::Operator_HandleAnimEvent(animevent_t*, CBaseCombatCharacter*)
 T CTerrorGun::PrimaryAttack()
 T CTerrorGun::Reload()
 T CTerrorGun::RemoveSecondWeapon()
 T CTerrorGun::SendWeaponAnim(int)
 T CTerrorGun::SetNextAttackTimes(float)
 T CTerrorGun::ShouldUnzoom() const
 T CTerrorGun::Spawn()
 T CTerrorGun::UnZoom()
 T CTerrorGun::UpdateDualWield()
 T CTerrorGun::UpdateSpread()
 T CTerrorGun::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CTerrorGun::ViewMovementAffectsAccuracy() const
 T CTerrorGun::WantsCSItemPostFrame() const
 T CTerrorGun::WeaponAutoAimScale()
 T CTerrorGun::YouForgotToImplementOrDeclareServerClass()
 T CTerrorGun::~CTerrorGun()
 T CTerrorPlayer* Director::GetSurvivorAbleToReachEntityFirst<AlwaysTruePlayerRelationshipFilter>(CBaseEntity*, AlwaysTruePlayerRelationshipFilter const&, float*) const
 T CTerrorPlayer* Director::GetSurvivorAbleToReachEntityFirst<SurvivorHasItemFilter>(CBaseEntity*, SurvivorHasItemFilter const&, float*) const
 T CTerrorPlayer::AbilityDebug(CTerrorPlayer*, char const*, ...)
 T CTerrorPlayer::AddHealthBuffer(float, float)
 T CTerrorPlayer::AddSurvivorDamage(int, bool, SurvivorCharacterType)
 T CTerrorPlayer::AddToActiveSet(TerrorNavArea*)
 T CTerrorPlayer::AddUpgrade(SurvivorUpgradeType)
 T CTerrorPlayer::AllowDamage(CTakeDamageInfo const&)
 T CTerrorPlayer::AreFootstepsAudible() const
 T CTerrorPlayer::AutoSelectTeam()
 T CTerrorPlayer::AvoidPlayers(CUserCmd*)
 T CTerrorPlayer::BecomeGhost(ZombieClassType, bool)
 T CTerrorPlayer::BoomerVisibilityMonitorCallback(CBaseEntity*, CBasePlayer*)
 T CTerrorPlayer::BumpWeapon(CBaseCombatWeapon*)
 T CTerrorPlayer::CTerrorPlayer()
 T CTerrorPlayer::CanAttack() const
 T CTerrorPlayer::CanBeA(ZombieClassType) const
 T CTerrorPlayer::CanBeShoved()
 T CTerrorPlayer::CanBecomeGhost(bool)
 T CTerrorPlayer::CanBreatheUnderwater() const
 T CTerrorPlayer::CanChangeName() const
 T CTerrorPlayer::CanCrawl() const
 T CTerrorPlayer::CanDualWield() const
 T CTerrorPlayer::CanPlayerJump() const
 T CTerrorPlayer::CanRecoverCurrentDrowningDamage() const
 T CTerrorPlayer::CanUseFlashlight() const
 T CTerrorPlayer::CanUseWeapon(CSWeaponID) const
 T CTerrorPlayer::CancelRangeCull()
 T CTerrorPlayer::CancelStagger()
 T CTerrorPlayer::CancelTug()
 T CTerrorPlayer::ChangeName(char const*)
 T CTerrorPlayer::ChangeTeam(int)
 T CTerrorPlayer::CheatImpulseCommands(int)
 T CTerrorPlayer::CheckChatText(char*, int)
 T CTerrorPlayer::CheckEnemySightings()
 T CTerrorPlayer::CheckFriendSightings()
 T CTerrorPlayer::CheckpointRespawn(Checkpoint const*)
 T CTerrorPlayer::ChooseSurvivorModel(char const*) const
 T CTerrorPlayer::ClassifyZombie(CBaseEntity*)
 T CTerrorPlayer::CleanupPlayerState()
 T CTerrorPlayer::ClearGrabTarget()
 T CTerrorPlayer::ClientCommand(CCommand const&)
 T CTerrorPlayer::CollectValidObserverTargets(CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >*)
 T CTerrorPlayer::CommitSuicide(bool)
 T CTerrorPlayer::Cough(CBasePlayer*)
 T CTerrorPlayer::CreateNoise(float)
 T CTerrorPlayer::CreatePlayer(char const*, edict_t*)
 T CTerrorPlayer::CreateRagdollEntity(CTakeDamageInfo const&)
 T CTerrorPlayer::CullZombie()
 T CTerrorPlayer::Deafen(float, float, float)
 T CTerrorPlayer::DeathSound(CTakeDamageInfo const&)
 T CTerrorPlayer::DecayLineOfScrimmage()
 T CTerrorPlayer::DoAnimationEvent(PlayerAnimEvent_t, int)
 T CTerrorPlayer::DoBloodEffect(float, CTakeDamageInfo const&, Vector const&, CGameTrace*)
 T CTerrorPlayer::DropWeapons(bool)
 T CTerrorPlayer::DualWieldingFilter(CBaseEntity*, CBasePlayer*)
 T CTerrorPlayer::EmitInfectedPainSound(CTakeDamageInfo const&)
 T CTerrorPlayer::EmitSurvivorPainSound(CTakeDamageInfo const&)
 T CTerrorPlayer::EmitTrackedSound(char const*, float)
 T CTerrorPlayer::EntSelectSpawnPoint()
 T CTerrorPlayer::EstimateFallingDamage()
 T CTerrorPlayer::Event_Killed(CTakeDamageInfo const&)
 T CTerrorPlayer::ExpireSingleMapUpgrades()
 T CTerrorPlayer::Extinguish()
 T CTerrorPlayer::FindNextObserverTarget(bool)
 T CTerrorPlayer::FindPotentialLineOfScrimmage(bool, float, float*, Vector*, QAngle*)
 T CTerrorPlayer::FindResponseSubject(AI_CriteriaSet*)
 T CTerrorPlayer::FindUseEntity(float, float, bool*)
 T CTerrorPlayer::FireBullet(Vector, QAngle const&, CSWeaponID, int)
 T CTerrorPlayer::FlashlightTurnOff(bool)
 T CTerrorPlayer::FlashlightTurnOn(bool)
 T CTerrorPlayer::ForceDropOfCarriedPhysObjects(CBaseEntity*)
 T CTerrorPlayer::ForceIdleStateWhenTakingOverDeadBot()
 T CTerrorPlayer::GetActiveTerrorWeapon() const
 T CTerrorPlayer::GetAdjustedDamage(CTakeDamageInfo const&, float, float, bool)
 T CTerrorPlayer::GetAvailableSteadyStateSlots()
 T CTerrorPlayer::GetCharacterDisplayName()
 T CTerrorPlayer::GetClass() const
 T CTerrorPlayer::GetClassString() const
 T CTerrorPlayer::GetCrawlTopSpeed() const
 T CTerrorPlayer::GetCrouchTopSpeed() const
 T CTerrorPlayer::GetCurrentLoadoutSlots() const
 T CTerrorPlayer::GetCurrentPushDistance() const
 T CTerrorPlayer::GetCurrentStats(int) const
 T CTerrorPlayer::GetDataDescMap()
 T CTerrorPlayer::GetFlinchEvent(CTakeDamageInfo const&)
 T CTerrorPlayer::GetFlowDistance(TerrorNavArea::FlowType) const
 T CTerrorPlayer::GetFootstepSound(char const*, bool, float, bool) const
 T CTerrorPlayer::GetFriction() const
 T CTerrorPlayer::GetFriendlyFireScale(CBaseEntity const*, int) const
 T CTerrorPlayer::GetGhostPausedSpawnState() const
 T CTerrorPlayer::GetHealthBuffer() const
 T CTerrorPlayer::GetHeldObjectMass(IPhysicsObject*)
 T CTerrorPlayer::GetHurrahConcept()
 T CTerrorPlayer::GetIdealViewDistance() const
 T CTerrorPlayer::GetIntoGame()
 T CTerrorPlayer::GetLastKnownArea() const
 T CTerrorPlayer::GetLineOfScrimmageFlow() const
 T CTerrorPlayer::GetMaxLoadoutSlots() const
 T CTerrorPlayer::GetMinigun() const
 T CTerrorPlayer::GetMountedWeapon() const
 T CTerrorPlayer::GetNearbyFriendCount(float, bool)
 T CTerrorPlayer::GetNextShoveTime()
 T CTerrorPlayer::GetNoiseLevel() const
 T CTerrorPlayer::GetOtherResponsibleForMovement() const
 T CTerrorPlayer::GetPlayerByCharacter(SurvivorCharacterType)
 T CTerrorPlayer::GetPlayerReportID()
 T CTerrorPlayer::GetProgressBarPercent() const
 T CTerrorPlayer::GetRagdollType() const
 T CTerrorPlayer::GetRecentPullPlayer() const
 T CTerrorPlayer::GetRecentPusher() const
 T CTerrorPlayer::GetResponseSystem()
 T CTerrorPlayer::GetRunTopSpeed() const
 T CTerrorPlayer::GetScrimmageSphereCenter() const
 T CTerrorPlayer::GetScrimmageSphereRadius() const
 T CTerrorPlayer::GetServerClass()
 T CTerrorPlayer::GetShovePenalty()
 T CTerrorPlayer::GetSmartLookConcept(CBaseEntity*)
 T CTerrorPlayer::GetSpottedSpawnID(ZombieClassType) const
 T CTerrorPlayer::GetStaggerDir() const
 T CTerrorPlayer::GetStillTime(StillnessType) const
 T CTerrorPlayer::GetSurvivorFlowCenter()
 T CTerrorPlayer::GetTeamSwitchRule() const
 T CTerrorPlayer::GetTerrorWeapon(CSWeaponID) const
 T CTerrorPlayer::GetTimeFriendInFOV(CTerrorPlayer*) const
 T CTerrorPlayer::GetTimeSinceAttackedByEnemy() const
 T CTerrorPlayer::GetTimeSinceInjured() const
 T CTerrorPlayer::GetTimeSinceLastCombat() const
 T CTerrorPlayer::GetTimeSinceLastCombatForAllSurvivors(bool)
 T CTerrorPlayer::GetTimeSinceLastFiredWeapon() const
 T CTerrorPlayer::GetTongueDestination(bool) const
 T CTerrorPlayer::GetTugDir() const
 T CTerrorPlayer::GetUsePriority(CBaseEntity*)
 T CTerrorPlayer::GetWalkTopSpeed() const
 T CTerrorPlayer::GiveActiveWeapon()
 T CTerrorPlayer::GiveDefaultItems()
 T CTerrorPlayer::GiveNamedItem(char const*, int, bool)
 T CTerrorPlayer::GiveRandomUpgrade()
 T CTerrorPlayer::GoAwayFromKeyboard()
 T CTerrorPlayer::GrabVictimWithTongue(CTerrorPlayer*)
 T CTerrorPlayer::HandleAnimEvent(animevent_t*)
 T CTerrorPlayer::HandleCommand_JoinTeam(int, char const*, bool)
 T CTerrorPlayer::Ignite(float, bool, float, bool)
 T CTerrorPlayer::ImpulseCommands()
 T CTerrorPlayer::IncrementHeadshots(int)
 T CTerrorPlayer::IncrementMolotovsUsed()
 T CTerrorPlayer::IncrementPipebombsUsed()
 T CTerrorPlayer::InhibitCalm(float)
 T CTerrorPlayer::InitVCollision(Vector const&, Vector const&)
 T CTerrorPlayer::InitialSpawn()
 T CTerrorPlayer::InputSetCommentaryStatueMode(inputdata_t&)
 T CTerrorPlayer::IsAbleToAutoCenterOnLadders() const
 T CTerrorPlayer::IsAbleToMove() const
 T CTerrorPlayer::IsAreaTraversable(CNavArea const*) const
 T CTerrorPlayer::IsAutoCrouchEnabled() const
 T CTerrorPlayer::IsAutoCrouched() const
 T CTerrorPlayer::IsAwayFromKeyboard() const
 T CTerrorPlayer::IsBeingHealed() const
 T CTerrorPlayer::IsCrawling() const
 T CTerrorPlayer::IsFiringWeapon() const
 T CTerrorPlayer::IsFootstepAudible(float, bool) const
 T CTerrorPlayer::IsGettingUp() const
 T CTerrorPlayer::IsGhost() const
 T CTerrorPlayer::IsHealingSelf() const
 T CTerrorPlayer::IsHealingSomeoneElse() const
 T CTerrorPlayer::IsHoldingEntity(CBaseEntity*)
 T CTerrorPlayer::IsImmobilized() const
 T CTerrorPlayer::IsInCombat() const
 T CTerrorPlayer::IsIncapacitated() const
 T CTerrorPlayer::IsInvulnerable() const
 T CTerrorPlayer::IsLunging() const
 T CTerrorPlayer::IsMotionControlledXY(Activity) const
 T CTerrorPlayer::IsMotionControlledZ(Activity) const
 T CTerrorPlayer::IsPlayingDeathAnim() const
 T CTerrorPlayer::IsProgressBarActive() const
 T CTerrorPlayer::IsReadyToShove()
 T CTerrorPlayer::IsRenderYawOverridden() const
 T CTerrorPlayer::IsRunning() const
 T CTerrorPlayer::IsShoving() const
 T CTerrorPlayer::IsStaggering() const
 T CTerrorPlayer::IsStill(StillnessType) const
 T CTerrorPlayer::IsTransitioned() const
 T CTerrorPlayer::IsUseableEntity(CBaseEntity*, unsigned int)
 T CTerrorPlayer::IsValidObserverTarget(CBaseEntity*)
 T CTerrorPlayer::IsWielding(CSWeaponID) const
 T CTerrorPlayer::IsZoomed()
 T CTerrorPlayer::ItemPostFrame()
 T CTerrorPlayer::KickBack(float, float, float, float, float, float, int)
 T CTerrorPlayer::MakeIncapacitatedEventFromInfo(CTakeDamageInfo const&, bool)
 T CTerrorPlayer::MarkAsNotSpectating()
 T CTerrorPlayer::MaterializeFromGhost()
 T CTerrorPlayer::ModifyOrAppendCriteria(AI_CriteriaSet&)
 T CTerrorPlayer::ModifyOrAppendDerivedCriteria(AI_CriteriaSet&)
 T CTerrorPlayer::NetworkStateChanged_m_iMaxHealth()
 T CTerrorPlayer::NetworkStateChanged_m_iMaxHealth(void*)
 T CTerrorPlayer::NetworkVar_m_autoCrouchTimer::NetworkStateChanged()
 T CTerrorPlayer::NetworkVar_m_autoCrouchTimer::NetworkStateChanged(void*)
 T CTerrorPlayer::NetworkVar_m_hangTimer::NetworkStateChanged()
 T CTerrorPlayer::NetworkVar_m_hangTimer::NetworkStateChanged(void*)
 T CTerrorPlayer::NetworkVar_m_itTimer::NetworkStateChanged()
 T CTerrorPlayer::NetworkVar_m_itTimer::NetworkStateChanged(void*)
 T CTerrorPlayer::NetworkVar_m_knockdownTimer::NetworkStateChanged()
 T CTerrorPlayer::NetworkVar_m_knockdownTimer::NetworkStateChanged(void*)
 T CTerrorPlayer::NetworkVar_m_noAvoidanceTimer::NetworkStateChanged()
 T CTerrorPlayer::NetworkVar_m_noAvoidanceTimer::NetworkStateChanged(void*)
 T CTerrorPlayer::NetworkVar_m_staggerTimer::NetworkStateChanged()
 T CTerrorPlayer::NetworkVar_m_staggerTimer::NetworkStateChanged(void*)
 T CTerrorPlayer::NetworkVar_m_stunTimer::NetworkStateChanged()
 T CTerrorPlayer::NetworkVar_m_stunTimer::NetworkStateChanged(void*)
 T CTerrorPlayer::NetworkVar_m_suicideCountdown::NetworkStateChanged()
 T CTerrorPlayer::NetworkVar_m_suicideCountdown::NetworkStateChanged(void*)
 T CTerrorPlayer::NetworkVar_m_tongueVictimTimer::NetworkStateChanged()
 T CTerrorPlayer::NetworkVar_m_tongueVictimTimer::NetworkStateChanged(void*)
 T CTerrorPlayer::NetworkVar_m_tugTimer::NetworkStateChanged()
 T CTerrorPlayer::NetworkVar_m_tugTimer::NetworkStateChanged(void*)
 T CTerrorPlayer::NetworkVar_m_vocalizationSubjectTimer::NetworkStateChanged()
 T CTerrorPlayer::NetworkVar_m_vocalizationSubjectTimer::NetworkStateChanged(void*)
 T CTerrorPlayer::NoteIdleState()
 T CTerrorPlayer::NoteIdleStateWhenTakingOverDeadBot()
 T CTerrorPlayer::NotifyTongueIsPulling(bool)
 T CTerrorPlayer::ObjectCaps()
 T CTerrorPlayer::ObserverRoundRespawn()
 T CTerrorPlayer::OnAmmoPickedUp()
 T CTerrorPlayer::OnAttackSuccess(CBaseCombatCharacter*, bool)
 T CTerrorPlayer::OnAutoCrouch()
 T CTerrorPlayer::OnAwardEarned(AwardType, CBaseEntity*)
 T CTerrorPlayer::OnAwardLost(AwardType)
 T CTerrorPlayer::OnBeginChangeLevel(char const*, KeyValues*)
 T CTerrorPlayer::OnChokedSurvivor(SurvivorCharacterType)
 T CTerrorPlayer::OnClientSettingsChanged()
 T CTerrorPlayer::OnCrouchStart()
 T CTerrorPlayer::OnCrouched()
 T CTerrorPlayer::OnEditDestroyNotify(CNavArea*)
 T CTerrorPlayer::OnEndChangeLevel()
 T CTerrorPlayer::OnEnterGhostState()
 T CTerrorPlayer::OnEnterIntroCameraState()
 T CTerrorPlayer::OnEnterRescueState()
 T CTerrorPlayer::OnFallDamage(float)
 T CTerrorPlayer::OnFalling()
 T CTerrorPlayer::OnFinaleEscapeStart()
 T CTerrorPlayer::OnFinaleEscapeVehicleReady()
 T CTerrorPlayer::OnFinaleStart()
 T CTerrorPlayer::OnFirstSpawnForMission()
 T CTerrorPlayer::OnFootstep(Vector const&, bool, bool, bool, bool)
 T CTerrorPlayer::OnFriendlyFire(CTerrorPlayer*, IGameEvent*)
 T CTerrorPlayer::OnGSClientAchievementStatusResponse(GSClientAchievementStatus_t*)
 T CTerrorPlayer::OnGameOver()
 T CTerrorPlayer::OnGivenWeapon(CTerrorWeapon*)
 T CTerrorPlayer::OnGrabbedByTongue(CTerrorPlayer*)
 T CTerrorPlayer::OnGrabbingWithTongue(CTerrorPlayer*)
 T CTerrorPlayer::OnGroundChanged(CBaseEntity*, CBaseEntity*)
 T CTerrorPlayer::OnHitPlayer(int, float, float, int)
 T CTerrorPlayer::OnHitSurvivorWithBoomerBomb(SurvivorCharacterType)
 T CTerrorPlayer::OnHitSurvivorWithClaw(SurvivorCharacterType)
 T CTerrorPlayer::OnHitSurvivorWithTankPhysics(SurvivorCharacterType)
 T CTerrorPlayer::OnHitSurvivorWithTankRock(SurvivorCharacterType)
 T CTerrorPlayer::OnHitSurvivorWithVomit(SurvivorCharacterType)
 T CTerrorPlayer::OnHoldoutStart()
 T CTerrorPlayer::OnITExpired()
 T CTerrorPlayer::OnIncapacitatedAsSurvivor(CTakeDamageInfo const&)
 T CTerrorPlayer::OnIncapacitatedAsTank(CTakeDamageInfo const&)
 T CTerrorPlayer::OnIncapacitatedAttack()
 T CTerrorPlayer::OnKnockedDown(CTerrorPlayer::KnockdownReasonType)
 T CTerrorPlayer::OnLadderDismount()
 T CTerrorPlayer::OnLadderMount()
 T CTerrorPlayer::OnLeaveActiveState()
 T CTerrorPlayer::OnLeaveDeathAnimState()
 T CTerrorPlayer::OnLeaveDeathWaitForKeyState()
 T CTerrorPlayer::OnLeaveGhostState()
 T CTerrorPlayer::OnLeaveIntroCameraState()
 T CTerrorPlayer::OnLeaveRescueState()
 T CTerrorPlayer::OnLeavingCheckpoint()
 T CTerrorPlayer::OnLedgeGrabbed(Vector const&)
 T CTerrorPlayer::OnLedgeMoved()
 T CTerrorPlayer::OnLungeEnd()
 T CTerrorPlayer::OnLungeStart()
 T CTerrorPlayer::OnLungedInto(CTerrorPlayer*)
 T CTerrorPlayer::OnMainActivityComplete(Activity, Activity)
 T CTerrorPlayer::OnMainActivityInterrupted(Activity, Activity)
 T CTerrorPlayer::OnMeleeAttack()
 T CTerrorPlayer::OnMissionAborted()
 T CTerrorPlayer::OnMissionLost()
 T CTerrorPlayer::OnMissionWon()
 T CTerrorPlayer::OnNavAreaChanged(CNavArea*, CNavArea*)
 T CTerrorPlayer::OnNavAreaRemoved(CNavArea*)
 T CTerrorPlayer::OnOfferVocalized(CTerrorWeapon*, CTerrorPlayer*, bool)
 T CTerrorPlayer::OnPlayerDisconnected(CTerrorPlayer*)
 T CTerrorPlayer::OnPlayerUse(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CTerrorPlayer::OnPounceEnded()
 T CTerrorPlayer::OnPouncedOnSurvivor(CTerrorPlayer*)
 T CTerrorPlayer::OnPouncedUpon(CTerrorPlayer*)
 T CTerrorPlayer::OnPreThinkGhostState()
 T CTerrorPlayer::OnPreThinkIntroCameraState()
 T CTerrorPlayer::OnPreThinkObserverMode()
 T CTerrorPlayer::OnPreThinkRescueState()
 T CTerrorPlayer::OnPulledSurvivor(SurvivorCharacterType)
 T CTerrorPlayer::OnPursuedBy(INextBot*)
 T CTerrorPlayer::OnReleasedByTongue()
 T CTerrorPlayer::OnReleasingWithTongue()
 T CTerrorPlayer::OnReloadAbort()
 T CTerrorPlayer::OnReloadEnd()
 T CTerrorPlayer::OnReloadStart(bool, int, bool)
 T CTerrorPlayer::OnRevived()
 T CTerrorPlayer::OnShovedByLunge(CTerrorPlayer*, bool)
 T CTerrorPlayer::OnShovedByPounceLanding(CTerrorPlayer*, bool)
 T CTerrorPlayer::OnShovedBySurvivor(CTerrorPlayer*, Vector const&)
 T CTerrorPlayer::OnSpawn()
 T CTerrorPlayer::OnSpeak(CBasePlayer*, char const*, float)
 T CTerrorPlayer::OnSpokeConcept(CAI_Concept, AI_Response*)
 T CTerrorPlayer::OnStaggered(CBaseEntity*, Vector const*)
 T CTerrorPlayer::OnStartHangingFromTongue(int)
 T CTerrorPlayer::OnStopHangingFromTongue(int)
 T CTerrorPlayer::OnStunned(float)
 T CTerrorPlayer::OnTakeDamage(CTakeDamageInfo const&)
 T CTerrorPlayer::OnTakeDamageInternal(CTakeDamageInfo&)
 T CTerrorPlayer::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CTerrorPlayer::OnTeamChanged(int)
 T CTerrorPlayer::OnTugged(CBaseEntity*)
 T CTerrorPlayer::OnUseEntity(CBaseEntity*, USE_TYPE)
 T CTerrorPlayer::OnUseEntityChanged()
 T CTerrorPlayer::OnVoiceTransmit()
 T CTerrorPlayer::OnVomitedUpon(CTerrorPlayer*, bool, bool)
 T CTerrorPlayer::OnWeaponFired()
 T CTerrorPlayer::OnWeaponPickedUp(CBaseCombatWeapon*)
 T CTerrorPlayer::OnZombieDied(CTerrorPlayer*)
 T CTerrorPlayer::OnZombieSpawned(CTerrorPlayer*)
 T CTerrorPlayer::OnZombieStateAlert()
 T CTerrorPlayer::Pain(bool)
 T CTerrorPlayer::PassesObserverFilter(CBaseEntity const*)
 T CTerrorPlayer::PickupObject(CBaseEntity*, bool)
 T CTerrorPlayer::PlayScene(char const*, float, AI_Response*, IRecipientFilter*)
 T CTerrorPlayer::PlayWadeSound()
 T CTerrorPlayer::PlayerRunCommand(CUserCmd*, IMoveHelper*)
 T CTerrorPlayer::PlayerSolidMask(bool) const
 T CTerrorPlayer::PlayerUse(CBaseEntity*)
 T CTerrorPlayer::PlayerZombieAbortControl()
 T CTerrorPlayer::PostThink()
 T CTerrorPlayer::PreThink()
 T CTerrorPlayer::Precache()
 T CTerrorPlayer::PrecacheResponseSystem()
 T CTerrorPlayer::ProcessDamageForTankPhysicsProjectile(CTakeDamageInfo const&)
 T CTerrorPlayer::RecalculateVersusScore()
 T CTerrorPlayer::RecordDamageTaken(char const*, int)
 T CTerrorPlayer::ReleaseTongueVictim(bool)
 T CTerrorPlayer::RemoveAllUpgrades()
 T CTerrorPlayer::RemovePistol()
 T CTerrorPlayer::RemoveUpgrade(SurvivorUpgradeType)
 T CTerrorPlayer::ReplaceWithBot(bool)
 T CTerrorPlayer::ResetCheckpointStats()
 T CTerrorPlayer::ResetClassSpawnSystem()
 T CTerrorPlayer::ResetMaxSpeed()
 T CTerrorPlayer::ResetSurvivorDamage()
 T CTerrorPlayer::ResizeScrimmageSphere()
 T CTerrorPlayer::RestoreSpawn()
 T CTerrorPlayer::RestoreWeapons()
 T CTerrorPlayer::RoundRespawn()
 T CTerrorPlayer::ScoreKilledZombie(ZombieClassType)
 T CTerrorPlayer::SelectDeathPose(CTakeDamageInfo const&)
 T CTerrorPlayer::SetCharacter()
 T CTerrorPlayer::SetClass(ZombieClassType)
 T CTerrorPlayer::SetClassState(ZombieClassStateType)
 T CTerrorPlayer::SetDoingRestore(bool)
 T CTerrorPlayer::SetGrabTarget(Vector const&, Vector const&, Vector const&, Vector const&, Vector const&, CBaseEntity*, TerrorNavArea*)
 T CTerrorPlayer::SetGrenadesBanned(bool)
 T CTerrorPlayer::SetHealthBuffer(float)
 T CTerrorPlayer::SetLookatPlayer(CTerrorPlayer*)
 T CTerrorPlayer::SetMainActivity(Activity, bool)
 T CTerrorPlayer::SetModelFromClass()
 T CTerrorPlayer::SetModelFromClassAtSpawn()
 T CTerrorPlayer::SetNextShoveTime(float)
 T CTerrorPlayer::SetObserverMode(int)
 T CTerrorPlayer::SetObserverTarget(CBaseEntity*)
 T CTerrorPlayer::SetOverriddenRenderYaw(float)
 T CTerrorPlayer::SetPlayerPositionEntity(CSurvivorPosition*)
 T CTerrorPlayer::SetPlayerReportID(unsigned int)
 T CTerrorPlayer::SetPreSpawnClass(ZombieClassType)
 T CTerrorPlayer::SetPushEntity(CBaseEntity*)
 T CTerrorPlayer::SetResponsibleForAirMovement(CBaseCombatCharacter*)
 T CTerrorPlayer::SetShoveForce(Vector const&)
 T CTerrorPlayer::SetShovePenalty(int)
 T CTerrorPlayer::SetSkill(SurvivorSkillType, bool)
 T CTerrorPlayer::SetTeamChangeCharacterName(char const*)
 T CTerrorPlayer::SetTransitioned(bool)
 T CTerrorPlayer::SetWantsToPlay(bool)
 T CTerrorPlayer::ShouldAttractAutoAim(CBaseEntity*)
 T CTerrorPlayer::ShouldCollide(int, int) const
 T CTerrorPlayer::ShouldPostThink()
 T CTerrorPlayer::ShouldTransmit(CCheckTransmitInfo const*)
 T CTerrorPlayer::ShowCurrentLifeStats()
 T CTerrorPlayer::ShowHostDetails()
 T CTerrorPlayer::ShowTransitionStats()
 T CTerrorPlayer::Spawn()
 T CTerrorPlayer::SpeakIfAllowed(CAI_Concept, SpeechPriorityType, char const*, char*, unsigned long, IRecipientFilter*)
 T CTerrorPlayer::StartDragging(CTerrorPlayer*)
 T CTerrorPlayer::StartGettingDraggedBy(CTerrorPlayer*)
 T CTerrorPlayer::StartHealing(CTerrorPlayer*)
 T CTerrorPlayer::StartRangeCull()
 T CTerrorPlayer::StartReviving(CTerrorPlayer*)
 T CTerrorPlayer::StartSurvivorDeathAnim(CTakeDamageInfo const&)
 T CTerrorPlayer::StartTankDeathAnim()
 T CTerrorPlayer::StopBeingDragged()
 T CTerrorPlayer::StopBeingHealed()
 T CTerrorPlayer::StopBeingRevived(bool)
 T CTerrorPlayer::StopDragging()
 T CTerrorPlayer::StopHealingSomeone()
 T CTerrorPlayer::StopRevivingSomeone(bool)
 T CTerrorPlayer::TakeHealth(float, int)
 T CTerrorPlayer::TakeOverBot(bool)
 T CTerrorPlayer::TakeOverZombieBot(CTerrorPlayer*)
 T CTerrorPlayer::Teleport(Vector const*, QAngle const*, Vector const*)
 T CTerrorPlayer::TestHitboxes(Ray_t const&, unsigned int, CGameTrace&)
 T CTerrorPlayer::TestWallIntersection(int)
 T CTerrorPlayer::ThrowWeapon(CTerrorWeapon*, CTerrorPlayer*, float, char const*, char const*)
 T CTerrorPlayer::Touch(CBaseEntity*)
 T CTerrorPlayer::TrackSound(char const*)
 T CTerrorPlayer::TransitionRestore()
 T CTerrorPlayer::UpdateAddonBits()
 T CTerrorPlayer::UpdateAirMovementResponsibility()
 T CTerrorPlayer::UpdateAnimLayerSequences()
 T CTerrorPlayer::UpdateBeingDragged()
 T CTerrorPlayer::UpdateBeingOnFire()
 T CTerrorPlayer::UpdateBloodSpatters()
 T CTerrorPlayer::UpdateCalmAnimState()
 T CTerrorPlayer::UpdateCollisionBounds()
 T CTerrorPlayer::UpdateDraggingSomeone()
 T CTerrorPlayer::UpdateFXVolume()
 T CTerrorPlayer::UpdateFallingFromLedge()
 T CTerrorPlayer::UpdateGameEventsForBeingIT()
 T CTerrorPlayer::UpdateHangingFromTongue()
 T CTerrorPlayer::UpdateHoldoutRecordTime(float)
 T CTerrorPlayer::UpdateImpendingCull()
 T CTerrorPlayer::UpdateIncapacitatedAndRevival()
 T CTerrorPlayer::UpdateInfectedMainActivity(Activity)
 T CTerrorPlayer::UpdateLineOfScrimmage(float, float)
 T CTerrorPlayer::UpdateMainActivity()
 T CTerrorPlayer::UpdateMissionStats()
 T CTerrorPlayer::UpdateNoiseLevel()
 T CTerrorPlayer::UpdatePendingDeafenEffects()
 T CTerrorPlayer::UpdatePounce()
 T CTerrorPlayer::UpdateRadar()
 T CTerrorPlayer::UpdateRangeCull()
 T CTerrorPlayer::UpdateRunningSneakingExertionTimers()
 T CTerrorPlayer::UpdateSoundPropagation()
 T CTerrorPlayer::UpdateSpectatorWantsToPlay()
 T CTerrorPlayer::UpdateSpeechFriendlyFire()
 T CTerrorPlayer::UpdateSpeechIdle()
 T CTerrorPlayer::UpdateSpeechRemarkUponWorld()
 T CTerrorPlayer::UpdateStagger()
 T CTerrorPlayer::UpdateStillTimer()
 T CTerrorPlayer::UpdateSurvivorDebugDraws()
 T CTerrorPlayer::UpdateSurvivorGroupieSkill()
 T CTerrorPlayer::UpdateSurvivorMainActivity(Activity)
 T CTerrorPlayer::UpdateSurvivorRespiration()
 T CTerrorPlayer::UpdateTankEffects()
 T CTerrorPlayer::UpdateTeamDesired()
 T CTerrorPlayer::UpdateTonemapController()
 T CTerrorPlayer::UpdateTrackingWhoPushedMeOffALedge()
 T CTerrorPlayer::UpdateViewOffset(Vector const&, QAngle const&)
 T CTerrorPlayer::UpdateWeaponEquipage()
 T CTerrorPlayer::UpdateYardLines(float)
 T CTerrorPlayer::UpdateZombieBoomerFallNoise()
 T CTerrorPlayer::UpdateZombieClassState()
 T CTerrorPlayer::UpdateZombieDebugDraws()
 T CTerrorPlayer::UpdateZombieFrustration()
 T CTerrorPlayer::UpdateZombieIncapacitation()
 T CTerrorPlayer::UpdateZombieSounds()
 T CTerrorPlayer::VPhysicsShadowUpdate(IPhysicsObject*)
 T CTerrorPlayer::Vocalize(char const*, float, float)
 T CTerrorPlayer::WantsLagCompensationOnEntity(CBaseAnimatingOverlay const*, CUserCmd const*, CBitVec<2048> const*) const
 T CTerrorPlayer::WantsMOTD() const
 T CTerrorPlayer::WantsRoamingObserverMode() const
 T CTerrorPlayer::WantsToPlay() const
 T CTerrorPlayer::WarpGhostToInitialPosition()
 T CTerrorPlayer::WarpToValidPositionIfStuck()
 T CTerrorPlayer::WasSpawnedAtCheckpoint() const
 T CTerrorPlayer::WasSpawnedThisMission() const
 T CTerrorPlayer::Weapon_CanUse(CBaseCombatWeapon*)
 T CTerrorPlayer::Weapon_Equip(CBaseCombatWeapon*)
 T CTerrorPlayer::Weapon_ShootPosition()
 T CTerrorPlayer::YouForgotToImplementOrDeclareServerClass()
 T CTerrorPlayer::~CTerrorPlayer()
 T CTerrorPlayerResource::GetDataDescMap()
 T CTerrorPlayerResource::GetServerClass()
 T CTerrorPlayerResource::SetBecomeGhostAt(int, float)
 T CTerrorPlayerResource::Spawn()
 T CTerrorPlayerResource::UpdatePlayerData()
 T CTerrorPlayerResource::YouForgotToImplementOrDeclareServerClass()
 T CTerrorPlayerResource::~CTerrorPlayerResource()
 T CTerrorUsePushFilter::ShouldHitEntity(IHandleEntity*, int)
 T CTerrorViewModel::CalcViewModelLag(Vector&, QAngle&, QAngle&)
 T CTerrorViewModel::CalcViewModelView(CBasePlayer*, Vector const&, QAngle const&)
 T CTerrorViewModel::GetServerClass()
 T CTerrorViewModel::Precache()
 T CTerrorViewModel::YouForgotToImplementOrDeclareServerClass()
 T CTerrorViewModel::~CTerrorViewModel()
 T CTerrorWeapon::CTerrorWeapon()
 T CTerrorWeapon::CanDeploy()
 T CTerrorWeapon::CanExtendHelpingHand() const
 T CTerrorWeapon::CanFidget()
 T CTerrorWeapon::CanPlayerMove() const
 T CTerrorWeapon::CanPlayerTouch(CCSPlayer*)
 T CTerrorWeapon::CanSecondaryMeleeInterruptReload()
 T CTerrorWeapon::CheckCancelledReload()
 T CTerrorWeapon::CheckQueuedReload()
 T CTerrorWeapon::DefaultTouch(CBaseEntity*)
 T CTerrorWeapon::Deploy()
 T CTerrorWeapon::DetermineHelpTarget()
 T CTerrorWeapon::DoSwing()
 T CTerrorWeapon::Drop(Vector const&)
 T CTerrorWeapon::GetAttackTimer() const
 T CTerrorWeapon::GetDataDescMap()
 T CTerrorWeapon::GetDeployDurationModifier()
 T CTerrorWeapon::GetDroppingPlayer() const
 T CTerrorWeapon::GetLayerForViewmodelActivity(Activity) const
 T CTerrorWeapon::GetPlayerOwner() const
 T CTerrorWeapon::GetReloadDurationModifier()
 T CTerrorWeapon::GetServerClass()
 T CTerrorWeapon::GetSwingForward()
 T CTerrorWeapon::GetTerrorWeaponData() const
 T CTerrorWeapon::GetViewModel(int) const
 T CTerrorWeapon::GetViewmodelMeleeActivity()
 T CTerrorWeapon::GiveThink()
 T CTerrorWeapon::HasBeenPreviouslyHit(CBaseEntity*) const
 T CTerrorWeapon::HasSecondaryMelee()
 T CTerrorWeapon::HelpingHandPrimaryAttack()
 T CTerrorWeapon::HelpingHandSecondaryAttack()
 T CTerrorWeapon::Holster(CBaseCombatWeapon*)
 T CTerrorWeapon::IsAttacking() const
 T CTerrorWeapon::IsDroppedWhenHolstered() const
 T CTerrorWeapon::IsDualWielding() const
 T CTerrorWeapon::IsHelpingHandExtended() const
 T CTerrorWeapon::ItemBusyFrame()
 T CTerrorWeapon::ItemPostFrame()
 T CTerrorWeapon::MarkAsHit(CBaseEntity*)
 T CTerrorWeapon::NetworkVar_m_attackTimer::NetworkStateChanged()
 T CTerrorWeapon::NetworkVar_m_attackTimer::NetworkStateChanged(void*)
 T CTerrorWeapon::NetworkVar_m_helpingHandSuppressionTimer::NetworkStateChanged()
 T CTerrorWeapon::NetworkVar_m_helpingHandSuppressionTimer::NetworkStateChanged(void*)
 T CTerrorWeapon::NetworkVar_m_helpingHandTargetTimer::NetworkStateChanged()
 T CTerrorWeapon::NetworkVar_m_helpingHandTargetTimer::NetworkStateChanged(void*)
 T CTerrorWeapon::NetworkVar_m_helpingHandTimer::NetworkStateChanged()
 T CTerrorWeapon::NetworkVar_m_helpingHandTimer::NetworkStateChanged(void*)
 T CTerrorWeapon::NetworkVar_m_swingTimer::NetworkStateChanged()
 T CTerrorWeapon::NetworkVar_m_swingTimer::NetworkStateChanged(void*)
 T CTerrorWeapon::OnDropped(CTerrorPlayer*, CTerrorPlayer*)
 T CTerrorWeapon::OnHit(CGameTrace&, Vector const&, bool)
 T CTerrorWeapon::OnOwnerTakeDamage(CTakeDamageInfo const&)
 T CTerrorWeapon::OnPouncedUpon()
 T CTerrorWeapon::OnStunned(float)
 T CTerrorWeapon::OnSwingEnd(bool)
 T CTerrorWeapon::OnSwingStart()
 T CTerrorWeapon::Operator_HandleAnimEvent(animevent_t*, CBaseCombatCharacter*)
 T CTerrorWeapon::Precache()
 T CTerrorWeapon::SecondaryAttack()
 T CTerrorWeapon::SetHelpingHandState(CTerrorWeapon::HelpingHandState)
 T CTerrorWeapon::Spawn()
 T CTerrorWeapon::StartAttackTimer(float)
 T CTerrorWeapon::StartSwingTimer(float)
 T CTerrorWeapon::SuppressHelpingHands(float)
 T CTerrorWeapon::SwingYawEnd() const
 T CTerrorWeapon::SwingYawStart() const
 T CTerrorWeapon::TestSwingCollision(Vector const&)
 T CTerrorWeapon::TranslateViewmodelActivity(Activity) const
 T CTerrorWeapon::TrySwing(float, float, float)
 T CTerrorWeapon::UpdateHelpingHand()
 T CTerrorWeapon::WantsCSItemPostFrame() const
 T CTerrorWeapon::YouForgotToImplementOrDeclareServerClass()
 T CTerrorWeapon::~CTerrorWeapon()
 T CTerrorWeaponInfo::GetWeaponInfo(CSWeaponID)
 T CTerrorWeaponInfo::Parse(KeyValues*, char const*)
 T CTerrorWeaponInfo::PrecacheViewmodels() const
 T CTerrorWeaponInfo::RemoveViewmodels()
 T CTerrorWeaponInfo::~CTerrorWeaponInfo()
 T CTestEffect::Precache()
 T CTestEffect::Spawn()
 T CTestEffect::Think()
 T CTestEffect::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CTestEffect::~CTestEffect()
 T CTestTraceline::GetDataDescMap()
 T CTestTraceline::GetServerClass()
 T CTestTraceline::Spawn()
 T CTestTraceline::Spin()
 T CTestTraceline::UpdateTransmitState()
 T CTestTraceline::YouForgotToImplementOrDeclareServerClass()
 T CTestTraceline::~CTestTraceline()
 T CTest_ProxyToggle_Networkable::CTest_ProxyToggle_Networkable()
 T CTest_ProxyToggle_Networkable::GetServerClass()
 T CTest_ProxyToggle_Networkable::UpdateTransmitState()
 T CTest_ProxyToggle_Networkable::YouForgotToImplementOrDeclareServerClass()
 T CTest_ProxyToggle_Networkable::~CTest_ProxyToggle_Networkable()
 T CTextStat::~CTextStat()
 T CTextStatsMgr::GetStatsFilename()
 T CTextStatsMgr::SetStatsFilename(char*)
 T CTextStatsMgr::WriteFile(IFileSystem*, char const*)
 T CTextureToggle::GetDataDescMap()
 T CTextureToggle::InputIncrementBrushTexIndex(inputdata_t&)
 T CTextureToggle::InputSetBrushTexIndex(inputdata_t&)
 T CTextureToggle::~CTextureToggle()
 T CThinkContextsSaveDataOps::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CThinkContextsSaveDataOps::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CThinkContextsSaveDataOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CThinkContextsSaveDataOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CThinkSyncTester::EntityThinking(int, CBaseEntity*, float, int)
 T CThinkSyncTester::FindOrAddItem(CBaseEntity*, float)
 T CThinkSyncTester::Report()
 T CThinkSyncTester::ThinkLessFunc(ThinkSync const&, ThinkSync const&)
 T CThinkSyncTester::~CThinkSyncTester()
 T CThreadRWLock::CThreadRWLock()
 T CThrow::ActivateAbility()
 T CThrow::GetDataDescMap()
 T CThrow::GetServerClass()
 T CThrow::HasAbilityTarget() const
 T CThrow::IsActive() const
 T CThrow::OnCreate(CTerrorPlayer*)
 T CThrow::OnStunned(float)
 T CThrow::Precache()
 T CThrow::UpdateAbility()
 T CThrow::YouForgotToImplementOrDeclareServerClass()
 T CThrow::~CThrow()
 T CThrustController::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)
 T CTimedEventMgr::CTimedEventMgr()
 T CTimedEventMgr::FireEvents()
 T CTimedEventMgr::~CTimedEventMgr()
 T CTimerEntity::DrawDebugTextOverlays()
 T CTimerEntity::FireTimer()
 T CTimerEntity::GetDataDescMap()
 T CTimerEntity::InputAddToTimer(inputdata_t&)
 T CTimerEntity::InputDisable(inputdata_t&)
 T CTimerEntity::InputEnable(inputdata_t&)
 T CTimerEntity::InputFireTimer(inputdata_t&)
 T CTimerEntity::InputRefireTime(inputdata_t&)
 T CTimerEntity::InputResetTimer(inputdata_t&)
 T CTimerEntity::InputSubtractFromTimer(inputdata_t&)
 T CTimerEntity::InputToggle(inputdata_t&)
 T CTimerEntity::Spawn()
 T CTimerEntity::Think()
 T CTimerEntity::~CTimerEntity()
 T CTonemapSystem::LevelInitPostEntity()
 T CTonemapSystem::LevelInitPreEntity()
 T CTonemapSystem::~CTonemapSystem()
 T CTonemapTrigger::EndTouch(CBaseEntity*)
 T CTonemapTrigger::GetDataDescMap()
 T CTonemapTrigger::Spawn()
 T CTonemapTrigger::StartTouch(CBaseEntity*)
 T CTonemapTrigger::~CTonemapTrigger()
 T CTongue::AbilityDebug(CTerrorPlayer*, char const*, ...)
 T CTongue::AbilityDebug(char const*, ...)
 T CTongue::ActivateAbility()
 T CTongue::GetAbilityActivationDelay()
 T CTongue::GetButton() const
 T CTongue::GetCurrentTongueTarget() const
 T CTongue::GetDataDescMap()
 T CTongue::GetNumSegments() const
 T CTongue::GetSegmentEnd(int) const
 T CTongue::GetSegmentStart(int) const
 T CTongue::GetServerClass()
 T CTongue::GetTonguePullDestination(bool) const
 T CTongue::GetTonguePullDestinationGround()
 T CTongue::HasAbilityTarget() const
 T CTongue::IsAbilityReadyToFire() const
 T CTongue::IsTongueActive() const
 T CTongue::IsTongueThirdPerson() const
 T CTongue::OnButtonPressed()
 T CTongue::OnCreate(CTerrorPlayer*)
 T CTongue::OnDestroy()
 T CTongue::OnEnterAttachedToTargetState()
 T CTongue::OnEnterDroppingToGroundState()
 T CTongue::OnEnterExtendingState()
 T CTongue::OnEnterInMouthState()
 T CTongue::OnEnterMisfireState()
 T CTongue::OnLeaveAttachedToTargetState(TongueState)
 T CTongue::OnLeaveDroppingToGroundState(TongueState)
 T CTongue::OnLeaveExtendingState(TongueState)
 T CTongue::OnLeaveInMouthState(TongueState)
 T CTongue::OnLeaveMisfireState(TongueState)
 T CTongue::OnOwnerLeaveActiveState()
 T CTongue::OnOwnerTakeDamage(CTakeDamageInfo const&)
 T CTongue::OnTongueShot(CTerrorPlayer*, float, Vector const&, Vector const&)
 T CTongue::OnTouch(CBaseEntity*)
 T CTongue::OnUpdateAttachedToTargetState()
 T CTongue::OnUpdateDroppingToGroundState()
 T CTongue::OnUpdateExtendingState()
 T CTongue::OnUpdateInMouthState()
 T CTongue::OnUpdateMisfireState()
 T CTongue::PrintDebugInfo()
 T CTongue::ResetTongueTimer()
 T CTongue::ShouldTransmit(CCheckTransmitInfo const*)
 T CTongue::SnapTongueBackToMouth()
 T CTongue::State_Enter(TongueState)
 T CTongue::TestBend(Vector const&, Vector const&)
 T CTongue::UpdateAbility()
 T CTongue::UpdateAirChoke()
 T CTongue::UpdateBend()
 T CTongue::UpdateGroundChoke()
 T CTongue::UpdateTongueTarget()
 T CTongue::YouForgotToImplementOrDeclareServerClass()
 T CTongue::~CTongue()
 T CTongueChokeAwardTemplate::CTongueChokeAwardTemplate(int)
 T CTongueChokeAwardTemplate::FireGameEvent(IGameEvent*)
 T CTongueChokeAwardTemplate::OnConditionsMet(AwardType, CBaseEntity*)
 T CTongueChokeAwardTemplate::OnCreate()
 T CTongueChokeAwardTemplate::~CTongueChokeAwardTemplate()
 T CToolFrameworkServer::FrameUpdatePostEntityThink()
 T CToolFrameworkServer::FrameUpdatePreEntityThink()
 T CToolFrameworkServer::Init()
 T CToolFrameworkServer::LevelInitPostEntity()
 T CToolFrameworkServer::LevelInitPreEntity()
 T CToolFrameworkServer::LevelShutdownPostEntity()
 T CToolFrameworkServer::LevelShutdownPreEntity()
 T CToolFrameworkServer::PreClientUpdate()
 T CToolFrameworkServer::PreSetupVisibility()
 T CToolFrameworkServer::~CToolFrameworkServer()
 T CToughGuyAwardTemplate::CToughGuyAwardTemplate(int)
 T CToughGuyAwardTemplate::FireGameEvent(IGameEvent*)
 T CToughGuyAwardTemplate::OnCreate()
 T CToughGuyAwardTemplate::~CToughGuyAwardTemplate()
 T CTraceBulletEntityEnumerator::EnumElement(IHandleEntity*)
 T CTraceBulletEntityEnumerator::PerformMultiTrace(Ray_t&, Vector const&, unsigned int, ITraceFilter*)
 T CTraceFilter::GetTraceType() const
 T CTraceFilterAgainstEntityList::GetTraceType() const
 T CTraceFilterAgainstEntityList::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterChain::CTraceFilterChain(ITraceFilter*, ITraceFilter*)
 T CTraceFilterChain::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterDoor::CTraceFilterDoor(IHandleEntity const*, IHandleEntity const*, int)
 T CTraceFilterDoor::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterEntitiesOnly::GetTraceType() const
 T CTraceFilterEntity::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterEntityIgnoreOther::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterGroundEntities::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterIgnoreActors::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterIgnoreMoveableObjects::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterLOS::CTraceFilterLOS(IHandleEntity*, int, IHandleEntity*)
 T CTraceFilterLOS::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterMelee::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterNoCombatCharacters::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterNoNPCsOrPlayer::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterOnlyPhysicsDamage::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterPhysics::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterPlayerMovement::SetPassEntity(IHandleEntity const*)
 T CTraceFilterPlayerMovement::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterPlayersNPCs::GetTraceType() const
 T CTraceFilterPlayersNPCs::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterPlayersNPCsPhysicsProps::GetTraceType() const
 T CTraceFilterPlayersNPCsPhysicsProps::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterPushFinal::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterPushMove::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterSimple::CTraceFilterSimple(IHandleEntity const*, int, bool (*)(IHandleEntity*, int))
 T CTraceFilterSimple::SetCollisionGroup(int)
 T CTraceFilterSimple::SetPassEntity(IHandleEntity const*)
 T CTraceFilterSimple::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterSimpleList::AddEntitiesToIgnore(int, IHandleEntity**)
 T CTraceFilterSimpleList::AddEntityToIgnore(IHandleEntity*)
 T CTraceFilterSimpleList::CTraceFilterSimpleList(int)
 T CTraceFilterSimpleList::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterSimpleListNoGhosts::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterSimpleListNoInfectedOrGhosts::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterSkipClassname::CTraceFilterSkipClassname(IHandleEntity const*, char const*, int)
 T CTraceFilterSkipClassname::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterSkipNPCs::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterSkipTeam::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterSkipTwoEntities::CTraceFilterSkipTwoEntities(IHandleEntity const*, IHandleEntity const*, int)
 T CTraceFilterSkipTwoEntities::SetPassEntity2(IHandleEntity const*)
 T CTraceFilterSkipTwoEntities::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterSkipTwoEntitiesAndTeammates::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterTongue::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterValidForDecal::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterViewOffset::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterWalkableEntities::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterWorldOnly::GetTraceType() const
 T CTraceFilterWorldOnly::ShouldHitEntity(IHandleEntity*, int)
 T CTransitioningPlayer::CTransitioningPlayer()
 T CTransitioningPlayer::FireGameEvent(IGameEvent*)
 T CTransitioningPlayer::GetDataDescMap()
 T CTransitioningPlayer::GetHealth() const
 T CTransitioningPlayer::GetServerClass()
 T CTransitioningPlayer::Init(char const*, int, int, int, int, int, int, bool, bool, bool, bool, SurvivorCharacterType)
 T CTransitioningPlayer::InitItems(CSWeaponID, bool, bool, bool, bool)
 T CTransitioningPlayer::IsAlive() const
 T CTransitioningPlayer::ShouldTransmit(CCheckTransmitInfo const*)
 T CTransitioningPlayer::TransitionThink()
 T CTransitioningPlayer::YouForgotToImplementOrDeclareServerClass()
 T CTransitioningPlayer::~CTransitioningPlayer()
 T CTriggerAutoCrouch::EndTouch(CBaseEntity*)
 T CTriggerAutoCrouch::GetDataDescMap()
 T CTriggerAutoCrouch::PassesTriggerFilters(CBaseEntity*)
 T CTriggerAutoCrouch::Spawn()
 T CTriggerAutoCrouch::StartTouch(CBaseEntity*)
 T CTriggerAutoCrouch::~CTriggerAutoCrouch()
 T CTriggerBrush::EndTouch(CBaseEntity*)
 T CTriggerBrush::GetDataDescMap()
 T CTriggerBrush::InputDisable(inputdata_t&)
 T CTriggerBrush::InputEnable(inputdata_t&)
 T CTriggerBrush::Spawn()
 T CTriggerBrush::StartTouch(CBaseEntity*)
 T CTriggerBrush::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CTriggerBrush::~CTriggerBrush()
 T CTriggerCDAudio::PlayTrack()
 T CTriggerCDAudio::Spawn()
 T CTriggerCDAudio::Touch(CBaseEntity*)
 T CTriggerCDAudio::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CTriggerCDAudio::~CTriggerCDAudio()
 T CTriggerCamera::Disable()
 T CTriggerCamera::Enable()
 T CTriggerCamera::FollowTarget()
 T CTriggerCamera::GetDataDescMap()
 T CTriggerCamera::InputDisable(inputdata_t&)
 T CTriggerCamera::InputEnable(inputdata_t&)
 T CTriggerCamera::KeyValue(char const*, char const*)
 T CTriggerCamera::Move()
 T CTriggerCamera::Spawn()
 T CTriggerCamera::UpdateTransmitState()
 T CTriggerCamera::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CTriggerCamera::~CTriggerCamera()
 T CTriggerCameraMultiplayer::AddPlayer(CBasePlayer*)
 T CTriggerCameraMultiplayer::Enable()
 T CTriggerCameraMultiplayer::GetDataDescMap()
 T CTriggerCameraMultiplayer::InputAddPlayer(inputdata_t&)
 T CTriggerCameraMultiplayer::InputDisable(inputdata_t&)
 T CTriggerCameraMultiplayer::InputEnable(inputdata_t&)
 T CTriggerCameraMultiplayer::InputRemovePlayer(inputdata_t&)
 T CTriggerCameraMultiplayer::RemovePlayer(CBasePlayer*)
 T CTriggerCameraMultiplayer::Spawn()
 T CTriggerCameraMultiplayer::UpdateTransmitState()
 T CTriggerCameraMultiplayer::~CTriggerCameraMultiplayer()
 T CTriggerEscape::GetDataDescMap()
 T CTriggerEscape::InputDisable(inputdata_t&)
 T CTriggerEscape::InputEnable(inputdata_t&)
 T CTriggerEscape::PassesTriggerFilters(CBaseEntity*)
 T CTriggerEscape::Spawn()
 T CTriggerEscape::TeamEscapeThink()
 T CTriggerEscape::~CTriggerEscape()
 T CTriggerGravity::GetDataDescMap()
 T CTriggerGravity::GravityTouch(CBaseEntity*)
 T CTriggerGravity::Spawn()
 T CTriggerGravity::~CTriggerGravity()
 T CTriggerHurt::EndTouch(CBaseEntity*)
 T CTriggerHurt::GetDataDescMap()
 T CTriggerHurt::HurtAllTouchers(float)
 T CTriggerHurt::HurtEntity(CBaseEntity*, float)
 T CTriggerHurt::HurtThink()
 T CTriggerHurt::NavThink()
 T CTriggerHurt::RadiationThink()
 T CTriggerHurt::Spawn()
 T CTriggerHurt::Touch(CBaseEntity*)
 T CTriggerHurt::~CTriggerHurt()
 T CTriggerHurtGhost::~CTriggerHurtGhost()
 T CTriggerImpact::DrawDebugTextOverlays()
 T CTriggerImpact::GetDataDescMap()
 T CTriggerImpact::InputImpact(inputdata_t&)
 T CTriggerImpact::InputSetMagnitude(inputdata_t&)
 T CTriggerImpact::Spawn()
 T CTriggerImpact::StartTouch(CBaseEntity*)
 T CTriggerImpact::~CTriggerImpact()
 T CTriggerLook* _CreateEntityTemplate<CTriggerLook>(CTriggerLook*, char const*)
 T CTriggerLook::DrawDebugTextOverlays()
 T CTriggerLook::EndTouch(CBaseEntity*)
 T CTriggerLook::GetDataDescMap()
 T CTriggerLook::Spawn()
 T CTriggerLook::StartTouch(CBaseEntity*)
 T CTriggerLook::TimeoutThink()
 T CTriggerLook::Touch(CBaseEntity*)
 T CTriggerLook::Trigger(CBaseEntity*, bool)
 T CTriggerLook::~CTriggerLook()
 T CTriggerMultiple::ActivateMultiTrigger(CBaseEntity*)
 T CTriggerMultiple::DrawDebugTextOverlays()
 T CTriggerMultiple::EndTouch(CBaseEntity*)
 T CTriggerMultiple::GetDataDescMap()
 T CTriggerMultiple::MultiTouch(CBaseEntity*)
 T CTriggerMultiple::MultiWaitOver()
 T CTriggerMultiple::PassesTriggerFilters(CBaseEntity*)
 T CTriggerMultiple::Spawn()
 T CTriggerMultiple::StartTouch(CBaseEntity*)
 T CTriggerMultiple::TeamTouchThink()
 T CTriggerMultiple::~CTriggerMultiple()
 T CTriggerOnce::Spawn()
 T CTriggerOnce::~CTriggerOnce()
 T CTriggerPlayerMovement::EndTouch(CBaseEntity*)
 T CTriggerPlayerMovement::GetDataDescMap()
 T CTriggerPlayerMovement::GetServerClass()
 T CTriggerPlayerMovement::Spawn()
 T CTriggerPlayerMovement::StartTouch(CBaseEntity*)
 T CTriggerPlayerMovement::YouForgotToImplementOrDeclareServerClass()
 T CTriggerPlayerMovement::~CTriggerPlayerMovement()
 T CTriggerProximity::Activate()
 T CTriggerProximity::EndTouch(CBaseEntity*)
 T CTriggerProximity::GetDataDescMap()
 T CTriggerProximity::MeasureThink()
 T CTriggerProximity::Spawn()
 T CTriggerProximity::StartTouch(CBaseEntity*)
 T CTriggerProximity::~CTriggerProximity()
 T CTriggerPush::Activate()
 T CTriggerPush::DrawDebugGeometryOverlays()
 T CTriggerPush::GetDataDescMap()
 T CTriggerPush::Spawn()
 T CTriggerPush::Touch(CBaseEntity*)
 T CTriggerPush::~CTriggerPush()
 T CTriggerRemove::GetDataDescMap()
 T CTriggerRemove::Spawn()
 T CTriggerRemove::Touch(CBaseEntity*)
 T CTriggerRemove::~CTriggerRemove()
 T CTriggerSave::GetDataDescMap()
 T CTriggerSave::Spawn()
 T CTriggerSave::Touch(CBaseEntity*)
 T CTriggerSave::~CTriggerSave()
 T CTriggerSoundscape::Activate()
 T CTriggerSoundscape::EndTouch(CBaseEntity*)
 T CTriggerSoundscape::GetDataDescMap()
 T CTriggerSoundscape::PlayerUpdateThink()
 T CTriggerSoundscape::Spawn()
 T CTriggerSoundscape::StartTouch(CBaseEntity*)
 T CTriggerSoundscape::~CTriggerSoundscape()
 T CTriggerTeleport::GetDataDescMap()
 T CTriggerTeleport::Spawn()
 T CTriggerTeleport::Touch(CBaseEntity*)
 T CTriggerTeleport::~CTriggerTeleport()
 T CTriggerToggleSave::GetDataDescMap()
 T CTriggerToggleSave::InputDisable(inputdata_t&)
 T CTriggerToggleSave::InputEnable(inputdata_t&)
 T CTriggerToggleSave::Spawn()
 T CTriggerToggleSave::Touch(CBaseEntity*)
 T CTriggerToggleSave::~CTriggerToggleSave()
 T CTriggerTraceEnum::EnumEntity(IHandleEntity*)
 T CTriggerVPhysicsMotion* _CreateEntityTemplate<CTriggerVPhysicsMotion>(CTriggerVPhysicsMotion*, char const*)
 T CTriggerVPhysicsMotion::CreateVPhysics()
 T CTriggerVPhysicsMotion::EndTouch(CBaseEntity*)
 T CTriggerVPhysicsMotion::GetDataDescMap()
 T CTriggerVPhysicsMotion::InputSetVelocityLimitTime(inputdata_t&)
 T CTriggerVPhysicsMotion::OnRestore()
 T CTriggerVPhysicsMotion::Precache()
 T CTriggerVPhysicsMotion::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)
 T CTriggerVPhysicsMotion::Spawn()
 T CTriggerVPhysicsMotion::StartTouch(CBaseEntity*)
 T CTriggerVPhysicsMotion::UpdateOnRemove()
 T CTriggerVPhysicsMotion::~CTriggerVPhysicsMotion()
 T CTriggerVolume::Spawn()
 T CTriggerVolume::~CTriggerVolume()
 T CTriggerWind::CreateVPhysics()
 T CTriggerWind::DrawDebugTextOverlays()
 T CTriggerWind::EndTouch(CBaseEntity*)
 T CTriggerWind::GetDataDescMap()
 T CTriggerWind::InputSetSpeed(inputdata_t&)
 T CTriggerWind::KeyValue(char const*, char const*)
 T CTriggerWind::OnRestore()
 T CTriggerWind::Spawn()
 T CTriggerWind::StartTouch(CBaseEntity*)
 T CTriggerWind::UpdateOnRemove()
 T CTriggerWind::WindThink()
 T CTriggerWind::~CTriggerWind()
 T CTutorLesson::GetServerClass()
 T CTutorLesson::YouForgotToImplementOrDeclareServerClass()
 T CTutorLesson::~CTutorLesson()
 T CUseTraceFilter::ShouldHitEntity(IHandleEntity*, int)
 T CUserCmd::~CUserCmd()
 T CUserMessageThrottleMgr::Start(char const**, int)
 T CUserMessageThrottleMgr::~CUserMessageThrottleMgr()
 T CUserMessages::GetUserMessageName(int)
 T CUserMessages::GetUserMessageSize(int)
 T CUserMessages::IsValidIndex(int)
 T CUserMessages::LookupUserMessage(char const*)
 T CUserMessages::Register(char const*, int)
 T CUserMessages::~CUserMessages()
 T CUtlBinaryBlock::CUtlBinaryBlock(CUtlBinaryBlock const&)
 T CUtlBinaryBlock::CUtlBinaryBlock(int, int)
 T CUtlBinaryBlock::SetLength(int)
 T CUtlBuffer::AddNullTermination()
 T CUtlBuffer::AssumeMemory(void*, int, int, int)
 T CUtlBuffer::CUtlBuffer(int, int, int)
 T CUtlBuffer::CUtlBuffer(void const*, int, int)
 T CUtlBuffer::CheckArbitraryPeekGet(int, int&)
 T CUtlBuffer::CheckGet(int)
 T CUtlBuffer::CheckPut(int)
 T CUtlBuffer::EatCPPComment()
 T CUtlBuffer::EatWhiteSpace()
 T CUtlBuffer::EnsureCapacity(int)
 T CUtlBuffer::Get(void*, int)
 T CUtlBuffer::GetDelimitedCharInternal(CUtlCharConversion*)
 T CUtlBuffer::GetDelimitedString(CUtlCharConversion*, char*, int)
 T CUtlBuffer::GetLine(char*, int)
 T CUtlBuffer::GetOverflow(int)
 T CUtlBuffer::GetString(char*, int)
 T CUtlBuffer::GetToken(char const*)
 T CUtlBuffer::ParseToken(char const*, char const*, char*, int)
 T CUtlBuffer::PeekDelimitedStringLength(CUtlCharConversion*, bool)
 T CUtlBuffer::PeekGet(int, int)
 T CUtlBuffer::PeekLineLength()
 T CUtlBuffer::PeekStringLength()
 T CUtlBuffer::PeekStringMatch(int, char const*, int)
 T CUtlBuffer::PeekWhiteSpace(int)
 T CUtlBuffer::Printf(char const*, ...)
 T CUtlBuffer::Put(void const*, int)
 T CUtlBuffer::PutChar(char)
 T CUtlBuffer::PutOverflow(int)
 T CUtlBuffer::PutString(char const*)
 T CUtlBuffer::Scanf(char const*, ...)
 T CUtlBuffer::SeekGet(CUtlBuffer::SeekType_t, int)
 T CUtlBuffer::SeekPut(CUtlBuffer::SeekType_t, int)
 T CUtlBuffer::SetBufferType(bool, bool)
 T CUtlBuffer::SetExternalBuffer(void*, int, int, int)
 T CUtlBuffer::VaScanf(char const*, char*)
 T CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)
 T CUtlCStringConversion::FindConversion(char const*, int*)
 T CUtlCachedFileData<CModelSoundsCache>::CUtlCachedFileData(char const*, int, unsigned int (*)(), UtlCachedFileDataType_t, bool, bool, bool, bool)
 T CUtlCachedFileData<CModelSoundsCache>::CheckDiskInfo(bool, long)
 T CUtlCachedFileData<CModelSoundsCache>::FileNameHandleLessFunc(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&, CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&)
 T CUtlCachedFileData<CModelSoundsCache>::Get(char const*)
 T CUtlCachedFileData<CModelSoundsCache>::GetIndex(char const*)
 T CUtlCachedFileData<CModelSoundsCache>::Init()
 T CUtlCachedFileData<CModelSoundsCache>::InitLargeBuffer(void*&, bool&)
 T CUtlCachedFileData<CModelSoundsCache>::InitSmallBuffer(void*&, int, bool&)
 T CUtlCachedFileData<CModelSoundsCache>::Save()
 T CUtlCachedFileData<CModelSoundsCache>::SaveManifest()
 T CUtlCachedFileData<CModelSoundsCache>::Shutdown()
 T CUtlCachedFileData<CModelSoundsCache>::~CUtlCachedFileData()
 T CUtlCharConversion::FindConversion(char const*, int*)
 T CUtlDict<BasicGameStatsRecord_t, unsigned short>::~CUtlDict()
 T CUtlDict<CActivityRemapCache, int>::~CUtlDict()
 T CUtlDict<CBitVec<32>, int>::~CUtlDict()
 T CUtlDict<CDecalEmitterSystem::DecalEntry, int>::~CUtlDict()
 T CUtlDict<CInstancedResponseSystem*, int>::~CUtlDict()
 T CUtlDict<CNavArea*, int>::~CUtlDict()
 T CUtlDict<CResponseSystem::Enumeration, short>::~CUtlDict()
 T CUtlDict<CUserMessage*, int>::~CUtlDict()
 T CUtlDict<ConceptHistory_t, int>::Insert(char const*, ConceptHistory_t const&)
 T CUtlDict<ConceptHistory_t, int>::~CUtlDict()
 T CUtlDict<Criteria, short>::~CUtlDict()
 T CUtlDict<EventGroup, int>::~CUtlDict()
 T CUtlDict<FileWeaponInfo_t*, unsigned short>::~CUtlDict()
 T CUtlDict<IEntityFactory*, unsigned short>::~CUtlDict()
 T CUtlDict<ResponseGroup, short>::Find(char const*) const
 T CUtlDict<ResponseGroup, short>::~CUtlDict()
 T CUtlDict<Rule, short>::~CUtlDict()
 T CUtlDict<float, int>::~CUtlDict()
 T CUtlDict<int, int>::~CUtlDict()
 T CUtlDict<int, unsigned short>::~CUtlDict()
 T CUtlHash<CEntityDataInstantiator<CWatcherList>::HashEntry, bool (*)(CEntityDataInstantiator<CWatcherList>::HashEntry const&, CEntityDataInstantiator<CWatcherList>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<CWatcherList>::HashEntry const&)>::CUtlHash(int, int, int, bool (*)(CEntityDataInstantiator<CWatcherList>::HashEntry const&, CEntityDataInstantiator<CWatcherList>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<CWatcherList>::HashEntry const&))
 T CUtlHash<CEntityDataInstantiator<CWatcherList>::HashEntry, bool (*)(CEntityDataInstantiator<CWatcherList>::HashEntry const&, CEntityDataInstantiator<CWatcherList>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<CWatcherList>::HashEntry const&)>::Insert(CEntityDataInstantiator<CWatcherList>::HashEntry const&)
 T CUtlHash<CEntityDataInstantiator<CWatcherList>::HashEntry, bool (*)(CEntityDataInstantiator<CWatcherList>::HashEntry const&, CEntityDataInstantiator<CWatcherList>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<CWatcherList>::HashEntry const&)>::~CUtlHash()
 T CUtlHash<CEntityDataInstantiator<ModelWidthScale>::HashEntry, bool (*)(CEntityDataInstantiator<ModelWidthScale>::HashEntry const&, CEntityDataInstantiator<ModelWidthScale>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<ModelWidthScale>::HashEntry const&)>::CUtlHash(int, int, int, bool (*)(CEntityDataInstantiator<ModelWidthScale>::HashEntry const&, CEntityDataInstantiator<ModelWidthScale>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<ModelWidthScale>::HashEntry const&))
 T CUtlHash<CEntityDataInstantiator<ModelWidthScale>::HashEntry, bool (*)(CEntityDataInstantiator<ModelWidthScale>::HashEntry const&, CEntityDataInstantiator<ModelWidthScale>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<ModelWidthScale>::HashEntry const&)>::Insert(CEntityDataInstantiator<ModelWidthScale>::HashEntry const&)
 T CUtlHash<CEntityDataInstantiator<ModelWidthScale>::HashEntry, bool (*)(CEntityDataInstantiator<ModelWidthScale>::HashEntry const&, CEntityDataInstantiator<ModelWidthScale>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<ModelWidthScale>::HashEntry const&)>::~CUtlHash()
 T CUtlHash<CEntityDataInstantiator<StepSimulationData>::HashEntry, bool (*)(CEntityDataInstantiator<StepSimulationData>::HashEntry const&, CEntityDataInstantiator<StepSimulationData>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<StepSimulationData>::HashEntry const&)>::CUtlHash(int, int, int, bool (*)(CEntityDataInstantiator<StepSimulationData>::HashEntry const&, CEntityDataInstantiator<StepSimulationData>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<StepSimulationData>::HashEntry const&))
 T CUtlHash<CEntityDataInstantiator<StepSimulationData>::HashEntry, bool (*)(CEntityDataInstantiator<StepSimulationData>::HashEntry const&, CEntityDataInstantiator<StepSimulationData>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<StepSimulationData>::HashEntry const&)>::Insert(CEntityDataInstantiator<StepSimulationData>::HashEntry const&)
 T CUtlHash<CEntityDataInstantiator<StepSimulationData>::HashEntry, bool (*)(CEntityDataInstantiator<StepSimulationData>::HashEntry const&, CEntityDataInstantiator<StepSimulationData>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<StepSimulationData>::HashEntry const&)>::~CUtlHash()
 T CUtlHash<CEntityDataInstantiator<groundlink_t>::HashEntry, bool (*)(CEntityDataInstantiator<groundlink_t>::HashEntry const&, CEntityDataInstantiator<groundlink_t>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<groundlink_t>::HashEntry const&)>::CUtlHash(int, int, int, bool (*)(CEntityDataInstantiator<groundlink_t>::HashEntry const&, CEntityDataInstantiator<groundlink_t>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<groundlink_t>::HashEntry const&))
 T CUtlHash<CEntityDataInstantiator<groundlink_t>::HashEntry, bool (*)(CEntityDataInstantiator<groundlink_t>::HashEntry const&, CEntityDataInstantiator<groundlink_t>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<groundlink_t>::HashEntry const&)>::Insert(CEntityDataInstantiator<groundlink_t>::HashEntry const&)
 T CUtlHash<CEntityDataInstantiator<groundlink_t>::HashEntry, bool (*)(CEntityDataInstantiator<groundlink_t>::HashEntry const&, CEntityDataInstantiator<groundlink_t>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<groundlink_t>::HashEntry const&)>::~CUtlHash()
 T CUtlHash<CEntityDataInstantiator<physicspushlist_t>::HashEntry, bool (*)(CEntityDataInstantiator<physicspushlist_t>::HashEntry const&, CEntityDataInstantiator<physicspushlist_t>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<physicspushlist_t>::HashEntry const&)>::CUtlHash(int, int, int, bool (*)(CEntityDataInstantiator<physicspushlist_t>::HashEntry const&, CEntityDataInstantiator<physicspushlist_t>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<physicspushlist_t>::HashEntry const&))
 T CUtlHash<CEntityDataInstantiator<physicspushlist_t>::HashEntry, bool (*)(CEntityDataInstantiator<physicspushlist_t>::HashEntry const&, CEntityDataInstantiator<physicspushlist_t>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<physicspushlist_t>::HashEntry const&)>::Insert(CEntityDataInstantiator<physicspushlist_t>::HashEntry const&)
 T CUtlHash<CEntityDataInstantiator<physicspushlist_t>::HashEntry, bool (*)(CEntityDataInstantiator<physicspushlist_t>::HashEntry const&, CEntityDataInstantiator<physicspushlist_t>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<physicspushlist_t>::HashEntry const&)>::~CUtlHash()
 T CUtlHash<CEntityDataInstantiator<touchlink_t>::HashEntry, bool (*)(CEntityDataInstantiator<touchlink_t>::HashEntry const&, CEntityDataInstantiator<touchlink_t>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<touchlink_t>::HashEntry const&)>::CUtlHash(int, int, int, bool (*)(CEntityDataInstantiator<touchlink_t>::HashEntry const&, CEntityDataInstantiator<touchlink_t>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<touchlink_t>::HashEntry const&))
 T CUtlHash<CEntityDataInstantiator<touchlink_t>::HashEntry, bool (*)(CEntityDataInstantiator<touchlink_t>::HashEntry const&, CEntityDataInstantiator<touchlink_t>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<touchlink_t>::HashEntry const&)>::Insert(CEntityDataInstantiator<touchlink_t>::HashEntry const&)
 T CUtlHash<CEntityDataInstantiator<touchlink_t>::HashEntry, bool (*)(CEntityDataInstantiator<touchlink_t>::HashEntry const&, CEntityDataInstantiator<touchlink_t>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<touchlink_t>::HashEntry const&)>::~CUtlHash()
 T CUtlHash<CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry, bool (*)(CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry const&, CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry const&)>::CUtlHash(int, int, int, bool (*)(CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry const&, CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry const&))
 T CUtlHash<CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry, bool (*)(CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry const&, CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry const&)>::Insert(CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry const&)
 T CUtlHash<CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry, bool (*)(CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry const&, CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry const&)>::~CUtlHash()
 T CUtlHash<CGameSaveRestoreInfo::CHashElement, CGameSaveRestoreInfo::CHashFuncs, CGameSaveRestoreInfo::CHashFuncs>::Insert(CGameSaveRestoreInfo::CHashElement const&)
 T CUtlHash<CStudioHdr::CActivityToSequenceMapping::HashValueType, CStudioHdr::CActivityToSequenceMapping::HashValueType::HashFuncs, CStudioHdr::CActivityToSequenceMapping::HashValueType::HashFuncs>::CUtlHash(int, int, int, CStudioHdr::CActivityToSequenceMapping::HashValueType::HashFuncs, CStudioHdr::CActivityToSequenceMapping::HashValueType::HashFuncs)
 T CUtlHash<CStudioHdr::CActivityToSequenceMapping::HashValueType, CStudioHdr::CActivityToSequenceMapping::HashValueType::HashFuncs, CStudioHdr::CActivityToSequenceMapping::HashValueType::HashFuncs>::Insert(CStudioHdr::CActivityToSequenceMapping::HashValueType const&)
 T CUtlHash<CStudioHdr::CActivityToSequenceMapping::HashValueType, CStudioHdr::CActivityToSequenceMapping::HashValueType::HashFuncs, CStudioHdr::CActivityToSequenceMapping::HashValueType::HashFuncs>::~CUtlHash()
 T CUtlHash<EntsByStringList_t, CEntsByStringHashFuncs, CEntsByStringHashFuncs>::Insert(EntsByStringList_t const&)
 T CUtlHash<EntsByStringList_t, CEntsByStringHashFuncs, CEntsByStringHashFuncs>::~CUtlHash()
 T CUtlLinkedList<CAbandonmentAwardTemplate::RegretStruct, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CAbandonmentAwardTemplate::RegretStruct, unsigned short>, unsigned short> >::AllocInternal(bool)
 T CUtlLinkedList<CAbandonmentAwardTemplate::RegretStruct, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CAbandonmentAwardTemplate::RegretStruct, unsigned short>, unsigned short> >::LinkBefore(unsigned short, unsigned short)
 T CUtlLinkedList<CAwardTemplate*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CAwardTemplate*, unsigned short>, unsigned short> >::AllocInternal(bool)
 T CUtlLinkedList<CAwardTemplate*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CAwardTemplate*, unsigned short>, unsigned short> >::LinkBefore(unsigned short, unsigned short)
 T CUtlLinkedList<CBaseCombatWeapon*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CBaseCombatWeapon*, unsigned short>, unsigned short> >::AllocInternal(bool)
 T CUtlLinkedList<CBaseCombatWeapon*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CBaseCombatWeapon*, unsigned short>, unsigned short> >::LinkBefore(unsigned short, unsigned short)
 T CUtlLinkedList<CBaseCombatWeapon*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CBaseCombatWeapon*, unsigned short>, unsigned short> >::Purge()
 T CUtlLinkedList<CDamageRecord*, int, false, int, CUtlMemory<UtlLinkedListElem_t<CDamageRecord*, int>, int> >::AllocInternal(bool)
 T CUtlLinkedList<CDamageRecord*, int, false, int, CUtlMemory<UtlLinkedListElem_t<CDamageRecord*, int>, int> >::PurgeAndDeleteElements()
 T CUtlLinkedList<CEnvWindShared*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CEnvWindShared*, unsigned short>, unsigned short> >::AllocInternal(bool)
 T CUtlLinkedList<CEnvWindShared*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CEnvWindShared*, unsigned short>, unsigned short> >::LinkBefore(unsigned short, unsigned short)
 T CUtlLinkedList<CEnvWindShared*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CEnvWindShared*, unsigned short>, unsigned short> >::~CUtlLinkedList()
 T CUtlLinkedList<CFoundryEntitySpawnRecord*, int, false, int, CUtlMemory<UtlLinkedListElem_t<CFoundryEntitySpawnRecord*, int>, int> >::AllocInternal(bool)
 T CUtlLinkedList<CFoundryEntitySpawnRecord*, int, false, int, CUtlMemory<UtlLinkedListElem_t<CFoundryEntitySpawnRecord*, int>, int> >::PurgeAndDeleteElements()
 T CUtlLinkedList<CFoundryEntitySpawnRecord*, int, false, int, CUtlMemory<UtlLinkedListElem_t<CFoundryEntitySpawnRecord*, int>, int> >::~CUtlLinkedList()
 T CUtlLinkedList<CFriendlyFireIncident, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CFriendlyFireIncident, unsigned short>, unsigned short> >::AllocInternal(bool)
 T CUtlLinkedList<CFriendlyFireIncident, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CFriendlyFireIncident, unsigned short>, unsigned short> >::LinkBefore(unsigned short, unsigned short)
 T CUtlLinkedList<CFuncAreaPortalBase*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CFuncAreaPortalBase*, unsigned short>, unsigned short> >::AllocInternal(bool)
 T CUtlLinkedList<CFuncAreaPortalBase*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CFuncAreaPortalBase*, unsigned short>, unsigned short> >::LinkBefore(unsigned short, unsigned short)
 T CUtlLinkedList<CFuncAreaPortalBase*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CFuncAreaPortalBase*, unsigned short>, unsigned short> >::~CUtlLinkedList()
 T CUtlLinkedList<CHandle<CBaseAnimating>, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CHandle<CBaseAnimating>, unsigned short>, unsigned short> >::AllocInternal(bool)
 T CUtlLinkedList<CHandle<CBaseAnimating>, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CHandle<CBaseAnimating>, unsigned short>, unsigned short> >::LinkBefore(unsigned short, unsigned short)
 T CUtlLinkedList<CHandle<CBaseAnimating>, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CHandle<CBaseAnimating>, unsigned short>, unsigned short> >::Purge()
 T CUtlLinkedList<CHandle<CBaseAnimating>, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CHandle<CBaseAnimating>, unsigned short>, unsigned short> >::~CUtlLinkedList()
 T CUtlLinkedList<CInfoRemarkable*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CInfoRemarkable*, unsigned short>, unsigned short> >::AllocInternal(bool)
 T CUtlLinkedList<CInfoRemarkable*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CInfoRemarkable*, unsigned short>, unsigned short> >::LinkBefore(unsigned short, unsigned short)
 T CUtlLinkedList<CInfoRemarkable*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CInfoRemarkable*, unsigned short>, unsigned short> >::Purge()
 T CUtlLinkedList<CMapEntityRef, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CMapEntityRef, unsigned short>, unsigned short> >::AllocInternal(bool)
 T CUtlLinkedList<CMapEntityRef, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CMapEntityRef, unsigned short>, unsigned short> >::LinkBefore(unsigned short, unsigned short)
 T CUtlLinkedList<CMapEntityRef, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CMapEntityRef, unsigned short>, unsigned short> >::Purge()
 T CUtlLinkedList<CMapEntityRef, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CMapEntityRef, unsigned short>, unsigned short> >::~CUtlLinkedList()
 T CUtlLinkedList<CPlayerCmdInfo, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CPlayerCmdInfo, unsigned short>, unsigned short> >::AllocInternal(bool)
 T CUtlLinkedList<CPlayerCmdInfo, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CPlayerCmdInfo, unsigned short>, unsigned short> >::LinkBefore(unsigned short, unsigned short)
 T CUtlLinkedList<CPlayerSimInfo, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CPlayerSimInfo, unsigned short>, unsigned short> >::AllocInternal(bool)
 T CUtlLinkedList<CPlayerSimInfo, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CPlayerSimInfo, unsigned short>, unsigned short> >::LinkBefore(unsigned short, unsigned short)
 T CUtlLinkedList<CResponseQueue::CDeferredResponse, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<CResponseQueue::CDeferredResponse, int> > >::AllocInternal(bool)
 T CUtlLinkedList<CResponseQueue::CDeferredResponse, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<CResponseQueue::CDeferredResponse, int> > >::RemoveAll()
 T CUtlLinkedList<CResponseQueue::CDeferredResponse, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<CResponseQueue::CDeferredResponse, int> > >::Unlink(int)
 T CUtlLinkedList<CTerrorPlayer*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CTerrorPlayer*, unsigned short>, unsigned short> >::AllocInternal(bool)
 T CUtlLinkedList<CTerrorPlayer*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CTerrorPlayer*, unsigned short>, unsigned short> >::LinkAfter(unsigned short, unsigned short)
 T CUtlLinkedList<CTerrorPlayer*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CTerrorPlayer*, unsigned short>, unsigned short> >::LinkBefore(unsigned short, unsigned short)
 T CUtlLinkedList<CTerrorPlayer*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CTerrorPlayer*, unsigned short>, unsigned short> >::~CUtlLinkedList()
 T CUtlLinkedList<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short>, unsigned short> >::AllocInternal(bool)
 T CUtlLinkedList<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short>, unsigned short> >::LinkBefore(unsigned short, unsigned short)
 T CUtlLinkedList<CUtlMultiList<watcher_t, unsigned short>::List_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<watcher_t, unsigned short>::List_t, unsigned short>, unsigned short> >::AllocInternal(bool)
 T CUtlLinkedList<CUtlMultiList<watcher_t, unsigned short>::List_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<watcher_t, unsigned short>::List_t, unsigned short>, unsigned short> >::LinkBefore(unsigned short, unsigned short)
 T CUtlLinkedList<INextBot*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<INextBot*, unsigned short>, unsigned short> >::AllocInternal(bool)
 T CUtlLinkedList<INextBot*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<INextBot*, unsigned short>, unsigned short> >::LinkAfter(unsigned short, unsigned short)
 T CUtlLinkedList<INextBot*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<INextBot*, unsigned short>, unsigned short> >::LinkBefore(unsigned short, unsigned short)
 T CUtlLinkedList<L4D_PlayerStatData*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<L4D_PlayerStatData*, unsigned short>, unsigned short> >::AllocInternal(bool)
 T CUtlLinkedList<L4D_PlayerStatData*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<L4D_PlayerStatData*, unsigned short>, unsigned short> >::LinkBefore(unsigned short, unsigned short)
 T CUtlLinkedList<L4D_PlayerStatData*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<L4D_PlayerStatData*, unsigned short>, unsigned short> >::Purge()
 T CUtlLinkedList<L4D_PlayerStatData*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<L4D_PlayerStatData*, unsigned short>, unsigned short> >::PurgeAndDeleteElements()
 T CUtlLinkedList<LagRecord, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<LagRecord, int> > >::AllocInternal(bool)
 T CUtlLinkedList<LagRecord, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<LagRecord, int> > >::LinkAfter(int, int)
 T CUtlLinkedList<LagRecord, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<LagRecord, int> > >::RemoveAll()
 T CUtlLinkedList<LagRecord, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<LagRecord, int> > >::Unlink(int)
 T CUtlLinkedList<PlayerReport*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<PlayerReport*, unsigned short>, unsigned short> >::AllocInternal(bool)
 T CUtlLinkedList<PlayerReport*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<PlayerReport*, unsigned short>, unsigned short> >::LinkBefore(unsigned short, unsigned short)
 T CUtlLinkedList<PlayerReport*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<PlayerReport*, unsigned short>, unsigned short> >::Purge()
 T CUtlLinkedList<Vector, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<Vector, unsigned short>, unsigned short> >::AllocInternal(bool)
 T CUtlLinkedList<Vector, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<Vector, unsigned short>, unsigned short> >::LinkBefore(unsigned short, unsigned short)
 T CUtlLinkedList<Vector, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<Vector, unsigned short>, unsigned short> >::Purge()
 T CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Find(char const* const&) const
 T CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Insert(char const* const&, CDecalEmitterSystem::DecalEntry const&)
 T CUtlMap<char const*, Criteria, short>::Find(char const* const&) const
 T CUtlMap<char const*, Criteria, short>::Insert(char const* const&, Criteria const&)
 T CUtlMap<char const*, EventGroup, int>::Find(char const* const&) const
 T CUtlMap<char const*, EventGroup, int>::Insert(char const* const&, EventGroup const&)
 T CUtlMap<char const*, ResponseGroup, short>::Insert(char const* const&, ResponseGroup const&)
 T CUtlMap<studiohdr_t const*, StudioHdrToActivityMapEntry_t, unsigned short>::~CUtlMap()
 T CUtlMemory<AI_Response, int>::Grow(int)
 T CUtlMemory<AppSystemInfo_t, int>::Grow(int)
 T CUtlMemory<AsyncCaption_t, int>::Grow(int)
 T CUtlMemory<CAnimationLayer, int>::Grow(int)
 T CUtlMemory<CBaseCombatCharacter*, int>::Grow(int)
 T CUtlMemory<CBaseEntity*, int>::Grow(int)
 T CUtlMemory<CBaseIssue*, int>::Grow(int)
 T CUtlMemory<CBaseIssue::FailedVote*, int>::Grow(int)
 T CUtlMemory<CBasePlayer*, int>::Grow(int)
 T CUtlMemory<CBasePropDoor*, int>::Grow(int)
 T CUtlMemory<CBaseServerVehicle::entryanim_t, int>::Grow(int)
 T CUtlMemory<CBaseServerVehicle::exitanim_t, int>::Grow(int)
 T CUtlMemory<CChoreoActor*, int>::Grow(int)
 T CUtlMemory<CChoreoChannel*, int>::Grow(int)
 T CUtlMemory<CChoreoEvent*, int>::Grow(int)
 T CUtlMemory<CChoreoScene*, int>::Grow(int)
 T CUtlMemory<CCommandContext, int>::Grow(int)
 T CUtlMemory<CConstraintFloodEntry, int>::Grow(int)
 T CUtlMemory<CDecalEmitterSystem::DecalListEntry, int>::Grow(int)
 T CUtlMemory<CDmxAttribute*, int>::Grow(int)
 T CUtlMemory<CDmxElement*, int>::Grow(int)
 T CUtlMemory<CDmxElementDictionary::AttributeInfo_t, int>::Grow(int)
 T CUtlMemory<CDmxElementDictionary::DictInfo_t, int>::Grow(int)
 T CUtlMemory<CEffectScriptElement, int>::Grow(int)
 T CUtlMemory<CEntityDataInstantiator<CWatcherList>::HashEntry, int>::Grow(int)
 T CUtlMemory<CEntityDataInstantiator<ModelWidthScale>::HashEntry, int>::Grow(int)
 T CUtlMemory<CEntityDataInstantiator<StepSimulationData>::HashEntry, int>::Grow(int)
 T CUtlMemory<CEntityDataInstantiator<groundlink_t>::HashEntry, int>::Grow(int)
 T CUtlMemory<CEntityDataInstantiator<physicspushlist_t>::HashEntry, int>::Grow(int)
 T CUtlMemory<CEntityDataInstantiator<touchlink_t>::HashEntry, int>::Grow(int)
 T CUtlMemory<CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry, int>::Grow(int)
 T CUtlMemory<CEnvSoundscape*, int>::Grow(int)
 T CUtlMemory<CEventAbsoluteTag, int>::Grow(int)
 T CUtlMemory<CEventRegister*, int>::Grow(int)
 T CUtlMemory<CEventRelativeTag, int>::Grow(int)
 T CUtlMemory<CExpressionSample, int>::Grow(int)
 T CUtlMemory<CFish*, int>::Grow(int)
 T CUtlMemory<CFlexAnimationTrack*, int>::Grow(int)
 T CUtlMemory<CFlexSceneFile*, int>::Grow(int)
 T CUtlMemory<CFlexTimingTag, int>::Grow(int)
 T CUtlMemory<CFogVolume*, int>::Grow(int)
 T CUtlMemory<CFuncLadder*, int>::Grow(int)
 T CUtlMemory<CGameSaveRestoreInfo::CHashElement, int>::Grow(int)
 T CUtlMemory<CGameWeaponManager*, int>::Grow(int)
 T CUtlMemory<CHandle<CBaseCombatCharacter>, int>::Grow(int)
 T CUtlMemory<CHandle<CBaseEntity>, int>::Grow(int)
 T CUtlMemory<CHandle<CBaseFlex>, int>::Grow(int)
 T CUtlMemory<CHandle<CBasePlayer>, int>::Grow(int)
 T CUtlMemory<CHandle<CBasePropDoor>, int>::Grow(int)
 T CUtlMemory<CHandle<CEnvMicrophone>, int>::Grow(int)
 T CUtlMemory<CHandle<CEnvPlayerSurfaceTrigger>, int>::Grow(int)
 T CUtlMemory<CHandle<CFish>, int>::Grow(int)
 T CUtlMemory<CHandle<CInfoLadderDismount>, int>::Grow(int)
 T CUtlMemory<CHandle<CMessageEntity>, int>::Grow(int)
 T CUtlMemory<CHandle<CPointTemplate>, int>::Grow(int)
 T CUtlMemory<CHandle<CSceneEntity>, int>::Grow(int)
 T CUtlMemory<CHandle<CSceneListManager>, int>::Grow(int)
 T CUtlMemory<CHandle<CSurvivorRescue>, int>::Grow(int)
 T CUtlMemory<CHandle<CTerrorPlayer>, int>::Grow(int)
 T CUtlMemory<CHandle<CTonemapTrigger>, int>::Grow(int)
 T CUtlMemory<CHandle<CVGuiScreen>, int>::Grow(int)
 T CUtlMemory<CHandle<Infected>, int>::Grow(int)
 T CUtlMemory<CHintMessage*, int>::Grow(int)
 T CUtlMemory<CHintMessageTimers::hintmessagetime_t*, int>::Grow(int)
 T CUtlMemory<CInfectedAnimationLayer, int>::Grow(int)
 T CUtlMemory<CModelSoundsCache*, int>::Grow(int)
 T CUtlMemory<CMoveHelperServer::touchlist_t, int>::Grow(int)
 T CUtlMemory<CNavArea*, int>::Grow(int)
 T CUtlMemory<CNavLadder*, int>::Grow(int)
 T CUtlMemory<CNavMesh::WalkableSeedSpot, int>::Grow(int)
 T CUtlMemory<CNavNode*, int>::Grow(int)
 T CUtlMemory<CParticleOperatorInstance*, int>::Grow(int)
 T CUtlMemory<CParticleSystemDefinition*, int>::Grow(int)
 T CUtlMemory<CPassengerInfo, int>::Grow(int)
 T CUtlMemory<CPassengerRole, int>::Grow(int)
 T CUtlMemory<CPassengerSeat, int>::Grow(int)
 T CUtlMemory<CPassengerSeatTransition, int>::Grow(int)
 T CUtlMemory<CPhysSaveRestoreBlockHandler::QueuedItem_t, int>::Grow(int)
 T CUtlMemory<CPhysicsPushedEntities::PhysicsPushedInfo_t, int>::Grow(int)
 T CUtlMemory<CPhysicsPushedEntities::PhysicsPusherInfo_t, int>::Grow(int)
 T CUtlMemory<CPointTemplate*, int>::Grow(int)
 T CUtlMemory<CPropData::propdata_breakablechunk_t, int>::Grow(int)
 T CUtlMemory<CResponseSystem::ScriptEntry, int>::Grow(int)
 T CUtlMemory<CSceneEventInfo, int>::Grow(int)
 T CUtlMemory<CSceneManager::CRestoreSceneSound, int>::Grow(int)
 T CUtlMemory<CSheet*, int>::Grow(int)
 T CUtlMemory<CSmokeCloudSystem::SmokeCloudType, int>::Grow(int)
 T CUtlMemory<CSoundPatch*, int>::Grow(int)
 T CUtlMemory<CStressEntityReg*, int>::Grow(int)
 T CUtlMemory<CStudioHdr::CActivityToSequenceMapping::HashValueType, int>::Grow(int)
 T CUtlMemory<CTeam*, int>::Grow(int)
 T CUtlMemory<CTeamSpawnPoint*, int>::Grow(int)
 T CUtlMemory<CTerrorGameRules::TeleportedPlayer, int>::Grow(int)
 T CUtlMemory<CTerrorPlayer*, int>::Grow(int)
 T CUtlMemory<CTerrorPlayer::TrackedSoundType, int>::Grow(int)
 T CUtlMemory<CTerrorWeapon*, int>::Grow(int)
 T CUtlMemory<CTransitioningPlayer*, int>::Grow(int)
 T CUtlMemory<CUserCmd, int>::Grow(int)
 T CUtlMemory<CUtlBinaryBlock, int>::Grow(int)
 T CUtlMemory<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::ListElem_t, int>::Grow(int)
 T CUtlMemory<CUtlMultiList<watcher_t, unsigned short>::ListElem_t, int>::Grow(int)
 T CUtlMemory<CUtlString, int>::Grow(int)
 T CUtlMemory<CUtlSymbolTable::StringPool_t*, int>::Grow(int)
 T CUtlMemory<CUtlVector<CEntityDataInstantiator<CWatcherList>::HashEntry, CUtlMemory<CEntityDataInstantiator<CWatcherList>::HashEntry, int> >, int>::Grow(int)
 T CUtlMemory<CUtlVector<CEntityDataInstantiator<ModelWidthScale>::HashEntry, CUtlMemory<CEntityDataInstantiator<ModelWidthScale>::HashEntry, int> >, int>::Grow(int)
 T CUtlMemory<CUtlVector<CEntityDataInstantiator<StepSimulationData>::HashEntry, CUtlMemory<CEntityDataInstantiator<StepSimulationData>::HashEntry, int> >, int>::Grow(int)
 T CUtlMemory<CUtlVector<CEntityDataInstantiator<groundlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<groundlink_t>::HashEntry, int> >, int>::Grow(int)
 T CUtlMemory<CUtlVector<CEntityDataInstantiator<physicspushlist_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<physicspushlist_t>::HashEntry, int> >, int>::Grow(int)
 T CUtlMemory<CUtlVector<CEntityDataInstantiator<touchlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<touchlink_t>::HashEntry, int> >, int>::Grow(int)
 T CUtlMemory<CUtlVector<CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry, int> >, int>::Grow(int)
 T CUtlMemory<CUtlVector<CGameSaveRestoreInfo::CHashElement, CUtlMemory<CGameSaveRestoreInfo::CHashElement, int> >, int>::Grow(int)
 T CUtlMemory<CUtlVector<CNavArea*, CUtlMemory<CNavArea*, int> >, int>::Grow(int)
 T CUtlMemory<CUtlVector<CStudioHdr::CActivityToSequenceMapping::HashValueType, CUtlMemory<CStudioHdr::CActivityToSequenceMapping::HashValueType, int> >, int>::Grow(int)
 T CUtlMemory<CUtlVector<EntsByStringList_t, CUtlMemory<EntsByStringList_t, int> >, int>::Grow(int)
 T CUtlMemory<CUtlVector<VoiceCommandMenuItem_t, CUtlMemory<VoiceCommandMenuItem_t, int> >, int>::Grow(int)
 T CUtlMemory<CUtlVector<ikcontextikrule_t, CUtlMemory<ikcontextikrule_t, int> >, int>::Grow(int)
 T CUtlMemory<CWeaponCSBase*, int>::Grow(int)
 T CUtlMemory<CWeaponSpawn*, int>::Grow(int)
 T CUtlMemory<CaptionLookup_t, int>::Grow(int)
 T CUtlMemory<Checkpoint*, int>::Grow(int)
 T CUtlMemory<Color, int>::Grow(int)
 T CUtlMemory<Director::DLC3FinaleEventType, int>::Grow(int)
 T CUtlMemory<Director::FadeOutInfo_t, int>::Grow(int)
 T CUtlMemory<Director::HealingItemInfo, int>::Grow(int)
 T CUtlMemory<Director::HealingItemRecord, int>::Grow(int)
 T CUtlMemory<Director::ItemLocationInfo*, int>::Grow(int)
 T CUtlMemory<Director::ItemLocationInfo, int>::Grow(int)
 T CUtlMemory<Director::NewPlayerType, int>::Grow(int)
 T CUtlMemory<Director::ScavengeItemRecord, int>::Grow(int)
 T CUtlMemory<DmeTime_t, int>::Grow(int)
 T CUtlMemory<EntsByStringList_t, int>::Grow(int)
 T CUtlMemory<Extent, int>::Grow(int)
 T CUtlMemory<FloorInfo, int>::Grow(int)
 T CUtlMemory<IEntityListener*, int>::Grow(int)
 T CUtlMemory<IGameSystem*, int>::Grow(int)
 T CUtlMemory<IGameSystemPerFrame*, int>::Grow(int)
 T CUtlMemory<IHandleEntity const*, int>::Grow(int)
 T CUtlMemory<IHandleEntity*, int>::Grow(int)
 T CUtlMemory<INavAvoidanceObstacle*, int>::Grow(int)
 T CUtlMemory<INextBot::NextBotDebugLineType const*, int>::Grow(int)
 T CUtlMemory<INextBot::NextBotDebugLineType*, int>::Grow(int)
 T CUtlMemory<IParticleOperatorDefinition*, int>::Grow(int)
 T CUtlMemory<ISaveRestoreBlockHandler*, int>::Grow(int)
 T CUtlMemory<IServerNetworkable*, int>::Grow(int)
 T CUtlMemory<IVision::RecognizeInfo, int>::Grow(int)
 T CUtlMemory<Infected*, int>::Grow(int)
 T CUtlMemory<KeyValues*, int>::Grow(int)
 T CUtlMemory<L4D_ChokePounce_Stat_Data, int>::Grow(int)
 T CUtlMemory<L4D_Death_Position_Data, int>::Grow(int)
 T CUtlMemory<NavConnect const*, int>::Grow(int)
 T CUtlMemory<NextBotManager::DebugFilter, int>::Grow(int)
 T CUtlMemory<OneWayLink_t, int>::Grow(int)
 T CUtlMemory<ParticleChildrenInfo_t, int>::Grow(int)
 T CUtlMemory<PlayerSaveData, int>::Grow(int)
 T CUtlMemory<QAngle, int>::Grow(int)
 T CUtlMemory<Quaternion, int>::Grow(int)
 T CUtlMemory<RecognizedActor, int>::Grow(int)
 T CUtlMemory<Relationship_t, int>::Grow(int)
 T CUtlMemory<Response, int>::Grow(int)
 T CUtlMemory<ResponseContext_t, int>::Grow(int)
 T CUtlMemory<SaveRestoreBlockHeader_t, int>::Grow(int)
 T CUtlMemory<SavedWeapon, int>::Grow(int)
 T CUtlMemory<SavedWeaponSpawn, int>::Grow(int)
 T CUtlMemory<ScrimmageUpdate::PlayerFlowType, int>::Grow(int)
 T CUtlMemory<SlideKeywordList_t*, int>::Grow(int)
 T CUtlMemory<SoundCommand_t*, int>::Grow(int)
 T CUtlMemory<SpotOrder, int>::Grow(int)
 T CUtlMemory<SurvivorBotSaveData, int>::Grow(int)
 T CUtlMemory<SurvivorIntention::AudibleThreat, int>::Grow(int)
 T CUtlMemory<TeleportListEntry_t, int>::Grow(int)
 T CUtlMemory<TemplateEntityData_t*, int>::Grow(int)
 T CUtlMemory<TerrorNavArea*, int>::Grow(int)
 T CUtlMemory<TongueAttackPositionScan::AttackArea, int>::Grow(int)
 T CUtlMemory<UtlLinkedListElem_t<CAbandonmentAwardTemplate::RegretStruct, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlLinkedListElem_t<CAwardTemplate*, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlLinkedListElem_t<CBaseCombatWeapon*, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlLinkedListElem_t<CDamageRecord*, int>, int>::Grow(int)
 T CUtlMemory<UtlLinkedListElem_t<CEnvWindShared*, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlLinkedListElem_t<CFoundryEntitySpawnRecord*, int>, int>::Grow(int)
 T CUtlMemory<UtlLinkedListElem_t<CFriendlyFireIncident, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlLinkedListElem_t<CFuncAreaPortalBase*, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlLinkedListElem_t<CHandle<CBaseAnimating>, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlLinkedListElem_t<CInfoRemarkable*, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlLinkedListElem_t<CMapEntityRef, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlLinkedListElem_t<CPlayerCmdInfo, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlLinkedListElem_t<CPlayerSimInfo, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlLinkedListElem_t<CTerrorPlayer*, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<watcher_t, unsigned short>::List_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlLinkedListElem_t<INextBot*, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlLinkedListElem_t<L4D_PlayerStatData*, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlLinkedListElem_t<PlayerReport*, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlLinkedListElem_t<Vector, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CBaseFlex::FS_LocalToGlobal_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CBreakModelsPrecached::breakable_precache_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CChoreoScene::ActiveList, int>, int>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CCombatCharVisCache::VisCacheEntry_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CGameEvent, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CSceneEntity::SpeakEventSound_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, AI_CriteriaSet::CritEntry_t const*, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CBitVec<32>, int>::Node_t, int>, int>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int>, int>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int>, int>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CNavArea*, int>::Node_t, int>, int>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short>, short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUserMessage*, int>::Node_t, int>, int>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int>, int>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Criteria, short>::Node_t, short>, short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EventGroup, int>::Node_t, int>, int>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ResponseGroup, short>::Node_t, short>, short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Rule, short>::Node_t, short>, short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, char const*, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, float, int>::Node_t, int>, int>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<edict_t const*, KeyValues*, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<float, CTraceBulletEntityEnumerator::BulletTrace_t, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<studiohdr_t const*, StudioHdrToActivityMapEntry_t, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, float, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlString, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<ThinkSync, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<VisibilityCacheEntry_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<unsigned int, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<VMatrix, int>::Grow(int)
 T CUtlMemory<Vector, int>::Grow(int)
 T CUtlMemory<Vector2D, int>::Grow(int)
 T CUtlMemory<Vector4D, int>::Grow(int)
 T CUtlMemory<VoiceCommandMenuItem_t, int>::Grow(int)
 T CUtlMemory<ZombieClassType, int>::Grow(int)
 T CUtlMemory<activitylist_t, int>::Grow(int)
 T CUtlMemory<bool, int>::Grow(int)
 T CUtlMemory<breakmodel_t, int>::Grow(int)
 T CUtlMemory<char const*, int>::Grow(int)
 T CUtlMemory<char*, int>::Grow(int)
 T CUtlMemory<char, int>::Grow(int)
 T CUtlMemory<clusterSoundscapeList_t, int>::Grow(int)
 T CUtlMemory<constraint_anchor_t, int>::Grow(int)
 T CUtlMemory<damageevent_t, int>::Grow(int)
 T CUtlMemory<entitynotify_t, int>::Grow(int)
 T CUtlMemory<eventlist_t, int>::Grow(int)
 T CUtlMemory<float, int>::Grow(int)
 T CUtlMemory<fluidevent_t, int>::Grow(int)
 T CUtlMemory<globalentity_t, int>::Grow(int)
 T CUtlMemory<ikcontextikrule_t, int>::Grow(int)
 T CUtlMemory<inflictorstate_t, int>::Grow(int)
 T CUtlMemory<int, int>::Grow(int)
 T CUtlMemory<magnetted_objects_t, int>::Grow(int)
 T CUtlMemory<masscenteroverride_t, int>::Grow(int)
 T CUtlMemory<modifiedconvars_t, int>::Grow(int)
 T CUtlMemory<penetrateevent_t, int>::Grow(int)
 T CUtlMemory<physfollower_t, int>::Grow(int)
 T CUtlMemory<physicssound::breaksound_t, int>::Grow(int)
 T CUtlMemory<physicssound::impactsound_t, int>::Grow(int)
 T CUtlMemory<scavengelist_t, int>::Grow(int)
 T CUtlMemory<simthinkentry_t, int>::Grow(int)
 T CUtlMemory<string_t, int>::Grow(int)
 T CUtlMemory<studiohdr_t const*, int>::Grow(int)
 T CUtlMemory<template_t, int>::Grow(int)
 T CUtlMemory<thinkfunc_t, int>::Grow(int)
 T CUtlMemory<touchevent_t, int>::Grow(int)
 T CUtlMemory<unsigned char, int>::Grow(int)
 T CUtlMemory<unsigned int, int>::Grow(int)
 T CUtlMemory<unsigned long, int>::Grow(int)
 T CUtlMemory<unsigned short, int>::Grow(int)
 T CUtlMemory<vehicle_crashsound_t, int>::Grow(int)
 T CUtlMemory<vehicle_gear_t, int>::Grow(int)
 T CUtlMemory<vehiclescript_t, int>::Grow(int)
 T CUtlMemory<visibility_target_t, int>::Grow(int)
 T CUtlMemoryPool::AddNewBlob()
 T CUtlMemoryPool::Alloc(unsigned long)
 T CUtlMemoryPool::CUtlMemoryPool(int, int, int, char const*, int)
 T CUtlMemoryPool::Free(void*)
 T CUtlMemoryPool::~CUtlMemoryPool()
 T CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::Alloc()
 T CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::LinkBefore(unsigned short, unsigned short, unsigned short)
 T CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::~CUtlMultiList()
 T CUtlMultiList<watcher_t, unsigned short>::Alloc()
 T CUtlMultiList<watcher_t, unsigned short>::LinkBefore(unsigned short, unsigned short, unsigned short)
 T CUtlMultiList<watcher_t, unsigned short>::Remove(unsigned short, unsigned short)
 T CUtlMultiList<watcher_t, unsigned short>::~CUtlMultiList()
 T CUtlNoEscConversion::FindConversion(char const*, int*)
 T CUtlPriorityQueue<CEventRegister*>::Insert(CEventRegister* const&)
 T CUtlPriorityQueue<CEventRegister*>::RemoveAt(int)
 T CUtlPriorityQueue<CEventRegister*>::RemoveAtHead()
 T CUtlPriorityQueue<CPhysSaveRestoreBlockHandler::QueuedItem_t>::Insert(CPhysSaveRestoreBlockHandler::QueuedItem_t const&)
 T CUtlPriorityQueue<CPhysSaveRestoreBlockHandler::QueuedItem_t>::RemoveAtHead()
 T CUtlPriorityQueue<SoundCommand_t*>::Insert(SoundCommand_t* const&)
 T CUtlPriorityQueue<SoundCommand_t*>::RemoveAt(int)
 T CUtlPriorityQueue<SoundCommand_t*>::RemoveAtHead()
 T CUtlRBTree<AI_CriteriaSet::CritEntry_t, short, bool (*)(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&), CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short> >::Find(AI_CriteriaSet::CritEntry_t const&) const
 T CUtlRBTree<AI_CriteriaSet::CritEntry_t, short, bool (*)(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&), CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short> >::FindInsertionPosition(AI_CriteriaSet::CritEntry_t const&, short&, bool&)
 T CUtlRBTree<AI_CriteriaSet::CritEntry_t, short, bool (*)(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&), CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short> >::FirstInorder() const
 T CUtlRBTree<AI_CriteriaSet::CritEntry_t, short, bool (*)(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&), CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short> >::Insert(AI_CriteriaSet::CritEntry_t const&)
 T CUtlRBTree<AI_CriteriaSet::CritEntry_t, short, bool (*)(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&), CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short> >::InsertRebalance(short)
 T CUtlRBTree<AI_CriteriaSet::CritEntry_t, short, bool (*)(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&), CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short> >::IsLeftChild(short) const
 T CUtlRBTree<AI_CriteriaSet::CritEntry_t, short, bool (*)(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&), CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short> >::IsRightChild(short) const
 T CUtlRBTree<AI_CriteriaSet::CritEntry_t, short, bool (*)(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&), CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short> >::NewNode()
 T CUtlRBTree<AI_CriteriaSet::CritEntry_t, short, bool (*)(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&), CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short> >::NextInorder(short) const
 T CUtlRBTree<AI_CriteriaSet::CritEntry_t, short, bool (*)(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&), CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short> >::RemoveAll()
 T CUtlRBTree<AI_CriteriaSet::CritEntry_t, short, bool (*)(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&), CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short> >::RemoveRebalance(short)
 T CUtlRBTree<AI_CriteriaSet::CritEntry_t, short, bool (*)(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&), CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short> >::RotateLeft(short)
 T CUtlRBTree<AI_CriteriaSet::CritEntry_t, short, bool (*)(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&), CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short> >::RotateRight(short)
 T CUtlRBTree<AI_CriteriaSet::CritEntry_t, short, bool (*)(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&), CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short> >::Unlink(short)
 T CUtlRBTree<AsyncCaption_t::BlockInfo_t, unsigned short, bool (*)(AsyncCaption_t::BlockInfo_t const&, AsyncCaption_t::BlockInfo_t const&), CUtlMemory<UtlRBTreeNode_t<AsyncCaption_t::BlockInfo_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CBaseFlex::FS_LocalToGlobal_t, unsigned short, bool (*)(CBaseFlex::FS_LocalToGlobal_t const&, CBaseFlex::FS_LocalToGlobal_t const&), CUtlMemory<UtlRBTreeNode_t<CBaseFlex::FS_LocalToGlobal_t, unsigned short>, unsigned short> >::Find(CBaseFlex::FS_LocalToGlobal_t const&) const
 T CUtlRBTree<CBaseFlex::FS_LocalToGlobal_t, unsigned short, bool (*)(CBaseFlex::FS_LocalToGlobal_t const&, CBaseFlex::FS_LocalToGlobal_t const&), CUtlMemory<UtlRBTreeNode_t<CBaseFlex::FS_LocalToGlobal_t, unsigned short>, unsigned short> >::FindInsertionPosition(CBaseFlex::FS_LocalToGlobal_t const&, unsigned short&, bool&)
 T CUtlRBTree<CBaseFlex::FS_LocalToGlobal_t, unsigned short, bool (*)(CBaseFlex::FS_LocalToGlobal_t const&, CBaseFlex::FS_LocalToGlobal_t const&), CUtlMemory<UtlRBTreeNode_t<CBaseFlex::FS_LocalToGlobal_t, unsigned short>, unsigned short> >::Insert(CBaseFlex::FS_LocalToGlobal_t const&)
 T CUtlRBTree<CBaseFlex::FS_LocalToGlobal_t, unsigned short, bool (*)(CBaseFlex::FS_LocalToGlobal_t const&, CBaseFlex::FS_LocalToGlobal_t const&), CUtlMemory<UtlRBTreeNode_t<CBaseFlex::FS_LocalToGlobal_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CBaseFlex::FS_LocalToGlobal_t, unsigned short, bool (*)(CBaseFlex::FS_LocalToGlobal_t const&, CBaseFlex::FS_LocalToGlobal_t const&), CUtlMemory<UtlRBTreeNode_t<CBaseFlex::FS_LocalToGlobal_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CBaseFlex::FS_LocalToGlobal_t, unsigned short, bool (*)(CBaseFlex::FS_LocalToGlobal_t const&, CBaseFlex::FS_LocalToGlobal_t const&), CUtlMemory<UtlRBTreeNode_t<CBaseFlex::FS_LocalToGlobal_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CBaseFlex::FS_LocalToGlobal_t, unsigned short, bool (*)(CBaseFlex::FS_LocalToGlobal_t const&, CBaseFlex::FS_LocalToGlobal_t const&), CUtlMemory<UtlRBTreeNode_t<CBaseFlex::FS_LocalToGlobal_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CBaseFlex::FS_LocalToGlobal_t, unsigned short, bool (*)(CBaseFlex::FS_LocalToGlobal_t const&, CBaseFlex::FS_LocalToGlobal_t const&), CUtlMemory<UtlRBTreeNode_t<CBaseFlex::FS_LocalToGlobal_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CBaseFlex::FS_LocalToGlobal_t, unsigned short, bool (*)(CBaseFlex::FS_LocalToGlobal_t const&, CBaseFlex::FS_LocalToGlobal_t const&), CUtlMemory<UtlRBTreeNode_t<CBaseFlex::FS_LocalToGlobal_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CBaseFlex::FS_LocalToGlobal_t, unsigned short, bool (*)(CBaseFlex::FS_LocalToGlobal_t const&, CBaseFlex::FS_LocalToGlobal_t const&), CUtlMemory<UtlRBTreeNode_t<CBaseFlex::FS_LocalToGlobal_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, bool (*)(CBreakModelsPrecached::breakable_precache_t const&, CBreakModelsPrecached::breakable_precache_t const&), CUtlMemory<UtlRBTreeNode_t<CBreakModelsPrecached::breakable_precache_t, unsigned short>, unsigned short> >::Find(CBreakModelsPrecached::breakable_precache_t const&) const
 T CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, bool (*)(CBreakModelsPrecached::breakable_precache_t const&, CBreakModelsPrecached::breakable_precache_t const&), CUtlMemory<UtlRBTreeNode_t<CBreakModelsPrecached::breakable_precache_t, unsigned short>, unsigned short> >::FindInsertionPosition(CBreakModelsPrecached::breakable_precache_t const&, unsigned short&, bool&)
 T CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, bool (*)(CBreakModelsPrecached::breakable_precache_t const&, CBreakModelsPrecached::breakable_precache_t const&), CUtlMemory<UtlRBTreeNode_t<CBreakModelsPrecached::breakable_precache_t, unsigned short>, unsigned short> >::Insert(CBreakModelsPrecached::breakable_precache_t const&)
 T CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, bool (*)(CBreakModelsPrecached::breakable_precache_t const&, CBreakModelsPrecached::breakable_precache_t const&), CUtlMemory<UtlRBTreeNode_t<CBreakModelsPrecached::breakable_precache_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, bool (*)(CBreakModelsPrecached::breakable_precache_t const&, CBreakModelsPrecached::breakable_precache_t const&), CUtlMemory<UtlRBTreeNode_t<CBreakModelsPrecached::breakable_precache_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, bool (*)(CBreakModelsPrecached::breakable_precache_t const&, CBreakModelsPrecached::breakable_precache_t const&), CUtlMemory<UtlRBTreeNode_t<CBreakModelsPrecached::breakable_precache_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, bool (*)(CBreakModelsPrecached::breakable_precache_t const&, CBreakModelsPrecached::breakable_precache_t const&), CUtlMemory<UtlRBTreeNode_t<CBreakModelsPrecached::breakable_precache_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, bool (*)(CBreakModelsPrecached::breakable_precache_t const&, CBreakModelsPrecached::breakable_precache_t const&), CUtlMemory<UtlRBTreeNode_t<CBreakModelsPrecached::breakable_precache_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, bool (*)(CBreakModelsPrecached::breakable_precache_t const&, CBreakModelsPrecached::breakable_precache_t const&), CUtlMemory<UtlRBTreeNode_t<CBreakModelsPrecached::breakable_precache_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, bool (*)(CBreakModelsPrecached::breakable_precache_t const&, CBreakModelsPrecached::breakable_precache_t const&), CUtlMemory<UtlRBTreeNode_t<CBreakModelsPrecached::breakable_precache_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CChoreoEvent*, unsigned short, bool (*)(CChoreoEvent* const&, CChoreoEvent* const&), CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short> >::FindInsertionPosition(CChoreoEvent* const&, unsigned short&, bool&)
 T CUtlRBTree<CChoreoEvent*, unsigned short, bool (*)(CChoreoEvent* const&, CChoreoEvent* const&), CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CChoreoEvent*, unsigned short, bool (*)(CChoreoEvent* const&, CChoreoEvent* const&), CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short> >::Insert(CChoreoEvent* const&)
 T CUtlRBTree<CChoreoEvent*, unsigned short, bool (*)(CChoreoEvent* const&, CChoreoEvent* const&), CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CChoreoEvent*, unsigned short, bool (*)(CChoreoEvent* const&, CChoreoEvent* const&), CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CChoreoEvent*, unsigned short, bool (*)(CChoreoEvent* const&, CChoreoEvent* const&), CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CChoreoEvent*, unsigned short, bool (*)(CChoreoEvent* const&, CChoreoEvent* const&), CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CChoreoEvent*, unsigned short, bool (*)(CChoreoEvent* const&, CChoreoEvent* const&), CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CChoreoEvent*, unsigned short, bool (*)(CChoreoEvent* const&, CChoreoEvent* const&), CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CChoreoEvent*, unsigned short, bool (*)(CChoreoEvent* const&, CChoreoEvent* const&), CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CChoreoEvent*, unsigned short, bool (*)(CChoreoEvent* const&, CChoreoEvent* const&), CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CChoreoScene::ActiveList, int, bool (*)(CChoreoScene::ActiveList const&, CChoreoScene::ActiveList const&), CUtlMemory<UtlRBTreeNode_t<CChoreoScene::ActiveList, int>, int> >::FindInsertionPosition(CChoreoScene::ActiveList const&, int&, bool&)
 T CUtlRBTree<CChoreoScene::ActiveList, int, bool (*)(CChoreoScene::ActiveList const&, CChoreoScene::ActiveList const&), CUtlMemory<UtlRBTreeNode_t<CChoreoScene::ActiveList, int>, int> >::FirstInorder() const
 T CUtlRBTree<CChoreoScene::ActiveList, int, bool (*)(CChoreoScene::ActiveList const&, CChoreoScene::ActiveList const&), CUtlMemory<UtlRBTreeNode_t<CChoreoScene::ActiveList, int>, int> >::Insert(CChoreoScene::ActiveList const&)
 T CUtlRBTree<CChoreoScene::ActiveList, int, bool (*)(CChoreoScene::ActiveList const&, CChoreoScene::ActiveList const&), CUtlMemory<UtlRBTreeNode_t<CChoreoScene::ActiveList, int>, int> >::InsertRebalance(int)
 T CUtlRBTree<CChoreoScene::ActiveList, int, bool (*)(CChoreoScene::ActiveList const&, CChoreoScene::ActiveList const&), CUtlMemory<UtlRBTreeNode_t<CChoreoScene::ActiveList, int>, int> >::IsLeftChild(int) const
 T CUtlRBTree<CChoreoScene::ActiveList, int, bool (*)(CChoreoScene::ActiveList const&, CChoreoScene::ActiveList const&), CUtlMemory<UtlRBTreeNode_t<CChoreoScene::ActiveList, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CChoreoScene::ActiveList, int, bool (*)(CChoreoScene::ActiveList const&, CChoreoScene::ActiveList const&), CUtlMemory<UtlRBTreeNode_t<CChoreoScene::ActiveList, int>, int> >::NewNode()
 T CUtlRBTree<CChoreoScene::ActiveList, int, bool (*)(CChoreoScene::ActiveList const&, CChoreoScene::ActiveList const&), CUtlMemory<UtlRBTreeNode_t<CChoreoScene::ActiveList, int>, int> >::NextInorder(int) const
 T CUtlRBTree<CChoreoScene::ActiveList, int, bool (*)(CChoreoScene::ActiveList const&, CChoreoScene::ActiveList const&), CUtlMemory<UtlRBTreeNode_t<CChoreoScene::ActiveList, int>, int> >::RemoveAll()
 T CUtlRBTree<CChoreoScene::ActiveList, int, bool (*)(CChoreoScene::ActiveList const&, CChoreoScene::ActiveList const&), CUtlMemory<UtlRBTreeNode_t<CChoreoScene::ActiveList, int>, int> >::RotateLeft(int)
 T CUtlRBTree<CChoreoScene::ActiveList, int, bool (*)(CChoreoScene::ActiveList const&, CChoreoScene::ActiveList const&), CUtlMemory<UtlRBTreeNode_t<CChoreoScene::ActiveList, int>, int> >::RotateRight(int)
 T CUtlRBTree<CCombatCharVisCache::VisCacheEntry_t, unsigned short, CCombatCharVisCache::CVisCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<CCombatCharVisCache::VisCacheEntry_t, unsigned short>, unsigned short> >::Find(CCombatCharVisCache::VisCacheEntry_t const&) const
 T CUtlRBTree<CCombatCharVisCache::VisCacheEntry_t, unsigned short, CCombatCharVisCache::CVisCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<CCombatCharVisCache::VisCacheEntry_t, unsigned short>, unsigned short> >::FindInsertionPosition(CCombatCharVisCache::VisCacheEntry_t const&, unsigned short&, bool&)
 T CUtlRBTree<CCombatCharVisCache::VisCacheEntry_t, unsigned short, CCombatCharVisCache::CVisCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<CCombatCharVisCache::VisCacheEntry_t, unsigned short>, unsigned short> >::Insert(CCombatCharVisCache::VisCacheEntry_t const&)
 T CUtlRBTree<CCombatCharVisCache::VisCacheEntry_t, unsigned short, CCombatCharVisCache::CVisCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<CCombatCharVisCache::VisCacheEntry_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CCombatCharVisCache::VisCacheEntry_t, unsigned short, CCombatCharVisCache::CVisCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<CCombatCharVisCache::VisCacheEntry_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CCombatCharVisCache::VisCacheEntry_t, unsigned short, CCombatCharVisCache::CVisCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<CCombatCharVisCache::VisCacheEntry_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CCombatCharVisCache::VisCacheEntry_t, unsigned short, CCombatCharVisCache::CVisCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<CCombatCharVisCache::VisCacheEntry_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CCombatCharVisCache::VisCacheEntry_t, unsigned short, CCombatCharVisCache::CVisCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<CCombatCharVisCache::VisCacheEntry_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CCombatCharVisCache::VisCacheEntry_t, unsigned short, CCombatCharVisCache::CVisCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<CCombatCharVisCache::VisCacheEntry_t, unsigned short>, unsigned short> >::RemoveRebalance(unsigned short)
 T CUtlRBTree<CCombatCharVisCache::VisCacheEntry_t, unsigned short, CCombatCharVisCache::CVisCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<CCombatCharVisCache::VisCacheEntry_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CCombatCharVisCache::VisCacheEntry_t, unsigned short, CCombatCharVisCache::CVisCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<CCombatCharVisCache::VisCacheEntry_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CCombatCharVisCache::VisCacheEntry_t, unsigned short, CCombatCharVisCache::CVisCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<CCombatCharVisCache::VisCacheEntry_t, unsigned short>, unsigned short> >::Unlink(unsigned short)
 T CUtlRBTree<CGameEvent, unsigned short, bool (*)(CGameEvent const&, CGameEvent const&), CUtlMemory<UtlRBTreeNode_t<CGameEvent, unsigned short>, unsigned short> >::FindInsertionPosition(CGameEvent const&, unsigned short&, bool&)
 T CUtlRBTree<CGameEvent, unsigned short, bool (*)(CGameEvent const&, CGameEvent const&), CUtlMemory<UtlRBTreeNode_t<CGameEvent, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CGameEvent, unsigned short, bool (*)(CGameEvent const&, CGameEvent const&), CUtlMemory<UtlRBTreeNode_t<CGameEvent, unsigned short>, unsigned short> >::Insert(CGameEvent const&)
 T CUtlRBTree<CGameEvent, unsigned short, bool (*)(CGameEvent const&, CGameEvent const&), CUtlMemory<UtlRBTreeNode_t<CGameEvent, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CGameEvent, unsigned short, bool (*)(CGameEvent const&, CGameEvent const&), CUtlMemory<UtlRBTreeNode_t<CGameEvent, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CGameEvent, unsigned short, bool (*)(CGameEvent const&, CGameEvent const&), CUtlMemory<UtlRBTreeNode_t<CGameEvent, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CGameEvent, unsigned short, bool (*)(CGameEvent const&, CGameEvent const&), CUtlMemory<UtlRBTreeNode_t<CGameEvent, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CGameEvent, unsigned short, bool (*)(CGameEvent const&, CGameEvent const&), CUtlMemory<UtlRBTreeNode_t<CGameEvent, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CGameEvent, unsigned short, bool (*)(CGameEvent const&, CGameEvent const&), CUtlMemory<UtlRBTreeNode_t<CGameEvent, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CGameEvent, unsigned short, bool (*)(CGameEvent const&, CGameEvent const&), CUtlMemory<UtlRBTreeNode_t<CGameEvent, unsigned short>, unsigned short> >::RemoveRebalance(unsigned short)
 T CUtlRBTree<CGameEvent, unsigned short, bool (*)(CGameEvent const&, CGameEvent const&), CUtlMemory<UtlRBTreeNode_t<CGameEvent, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CGameEvent, unsigned short, bool (*)(CGameEvent const&, CGameEvent const&), CUtlMemory<UtlRBTreeNode_t<CGameEvent, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CGameEvent, unsigned short, bool (*)(CGameEvent const&, CGameEvent const&), CUtlMemory<UtlRBTreeNode_t<CGameEvent, unsigned short>, unsigned short> >::Unlink(unsigned short)
 T CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, bool (*)(CSceneEntity::SpeakEventSound_t const&, CSceneEntity::SpeakEventSound_t const&), CUtlMemory<UtlRBTreeNode_t<CSceneEntity::SpeakEventSound_t, unsigned short>, unsigned short> >::FindInsertionPosition(CSceneEntity::SpeakEventSound_t const&, unsigned short&, bool&)
 T CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, bool (*)(CSceneEntity::SpeakEventSound_t const&, CSceneEntity::SpeakEventSound_t const&), CUtlMemory<UtlRBTreeNode_t<CSceneEntity::SpeakEventSound_t, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, bool (*)(CSceneEntity::SpeakEventSound_t const&, CSceneEntity::SpeakEventSound_t const&), CUtlMemory<UtlRBTreeNode_t<CSceneEntity::SpeakEventSound_t, unsigned short>, unsigned short> >::Insert(CSceneEntity::SpeakEventSound_t const&)
 T CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, bool (*)(CSceneEntity::SpeakEventSound_t const&, CSceneEntity::SpeakEventSound_t const&), CUtlMemory<UtlRBTreeNode_t<CSceneEntity::SpeakEventSound_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, bool (*)(CSceneEntity::SpeakEventSound_t const&, CSceneEntity::SpeakEventSound_t const&), CUtlMemory<UtlRBTreeNode_t<CSceneEntity::SpeakEventSound_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, bool (*)(CSceneEntity::SpeakEventSound_t const&, CSceneEntity::SpeakEventSound_t const&), CUtlMemory<UtlRBTreeNode_t<CSceneEntity::SpeakEventSound_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, bool (*)(CSceneEntity::SpeakEventSound_t const&, CSceneEntity::SpeakEventSound_t const&), CUtlMemory<UtlRBTreeNode_t<CSceneEntity::SpeakEventSound_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, bool (*)(CSceneEntity::SpeakEventSound_t const&, CSceneEntity::SpeakEventSound_t const&), CUtlMemory<UtlRBTreeNode_t<CSceneEntity::SpeakEventSound_t, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, bool (*)(CSceneEntity::SpeakEventSound_t const&, CSceneEntity::SpeakEventSound_t const&), CUtlMemory<UtlRBTreeNode_t<CSceneEntity::SpeakEventSound_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, bool (*)(CSceneEntity::SpeakEventSound_t const&, CSceneEntity::SpeakEventSound_t const&), CUtlMemory<UtlRBTreeNode_t<CSceneEntity::SpeakEventSound_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, bool (*)(CSceneEntity::SpeakEventSound_t const&, CSceneEntity::SpeakEventSound_t const&), CUtlMemory<UtlRBTreeNode_t<CSceneEntity::SpeakEventSound_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short, bool (*)(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&, CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&), CUtlMemory<UtlRBTreeNode_t<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short>, unsigned short> >::Find(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&) const
 T CUtlRBTree<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short, bool (*)(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&, CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&), CUtlMemory<UtlRBTreeNode_t<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short, bool (*)(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&, CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&), CUtlMemory<UtlRBTreeNode_t<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short, bool (*)(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&, CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&), CUtlMemory<UtlRBTreeNode_t<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short>, unsigned short> >::Insert(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&)
 T CUtlRBTree<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short, bool (*)(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&, CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&), CUtlMemory<UtlRBTreeNode_t<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short, bool (*)(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&, CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&), CUtlMemory<UtlRBTreeNode_t<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short, bool (*)(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&, CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&), CUtlMemory<UtlRBTreeNode_t<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short, bool (*)(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&, CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&), CUtlMemory<UtlRBTreeNode_t<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short, bool (*)(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&, CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&), CUtlMemory<UtlRBTreeNode_t<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short, bool (*)(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&, CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&), CUtlMemory<UtlRBTreeNode_t<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short, bool (*)(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&, CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&), CUtlMemory<UtlRBTreeNode_t<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short, bool (*)(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&, CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&), CUtlMemory<UtlRBTreeNode_t<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Unlink(unsigned short)
 T CUtlRBTree<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<CBaseEntity*, int, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<CBaseEntity*, int, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<CBaseEntity*, int, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short, CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short, CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short, CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short, CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short, CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short, CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short, CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short, CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short, CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short, CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short, CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short, CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short, CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short, CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short, CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short, CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short, CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short, CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short, CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short, CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Unlink(unsigned short)
 T CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Unlink(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, AI_CriteriaSet::CritEntry_t const*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, AI_CriteriaSet::CritEntry_t const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, AI_CriteriaSet::CritEntry_t const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<char const*, AI_CriteriaSet::CritEntry_t const*, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<char const*, AI_CriteriaSet::CritEntry_t const*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, AI_CriteriaSet::CritEntry_t const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, AI_CriteriaSet::CritEntry_t const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, AI_CriteriaSet::CritEntry_t const*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, AI_CriteriaSet::CritEntry_t const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, AI_CriteriaSet::CritEntry_t const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<char const*, AI_CriteriaSet::CritEntry_t const*, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, AI_CriteriaSet::CritEntry_t const*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, AI_CriteriaSet::CritEntry_t const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, AI_CriteriaSet::CritEntry_t const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, AI_CriteriaSet::CritEntry_t const*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, AI_CriteriaSet::CritEntry_t const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, AI_CriteriaSet::CritEntry_t const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, AI_CriteriaSet::CritEntry_t const*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, AI_CriteriaSet::CritEntry_t const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, AI_CriteriaSet::CritEntry_t const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, AI_CriteriaSet::CritEntry_t const*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, AI_CriteriaSet::CritEntry_t const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, AI_CriteriaSet::CritEntry_t const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, AI_CriteriaSet::CritEntry_t const*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, AI_CriteriaSet::CritEntry_t const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, AI_CriteriaSet::CritEntry_t const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, AI_CriteriaSet::CritEntry_t const*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, AI_CriteriaSet::CritEntry_t const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, AI_CriteriaSet::CritEntry_t const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, AI_CriteriaSet::CritEntry_t const*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, AI_CriteriaSet::CritEntry_t const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, AI_CriteriaSet::CritEntry_t const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, AI_CriteriaSet::CritEntry_t const*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, AI_CriteriaSet::CritEntry_t const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, AI_CriteriaSet::CritEntry_t const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int, CUtlMap<char const*, CActivityRemapCache, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int>, int> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int, CUtlMap<char const*, CActivityRemapCache, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int, CUtlMap<char const*, CActivityRemapCache, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int>, int> >::NextInorder(int) const
 T CUtlRBTree<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int, CUtlMap<char const*, CActivityRemapCache, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int>, int> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, CBitVec<32>, int>::Node_t, int, CUtlMap<char const*, CBitVec<32>, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CBitVec<32>, int>::Node_t, int>, int> >::Find(CUtlMap<char const*, CBitVec<32>, int>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, CBitVec<32>, int>::Node_t, int, CUtlMap<char const*, CBitVec<32>, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CBitVec<32>, int>::Node_t, int>, int> >::FindInsertionPosition(CUtlMap<char const*, CBitVec<32>, int>::Node_t const&, int&, bool&)
 T CUtlRBTree<CUtlMap<char const*, CBitVec<32>, int>::Node_t, int, CUtlMap<char const*, CBitVec<32>, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CBitVec<32>, int>::Node_t, int>, int> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, CBitVec<32>, int>::Node_t, int, CUtlMap<char const*, CBitVec<32>, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CBitVec<32>, int>::Node_t, int>, int> >::Insert(CUtlMap<char const*, CBitVec<32>, int>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, CBitVec<32>, int>::Node_t, int, CUtlMap<char const*, CBitVec<32>, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CBitVec<32>, int>::Node_t, int>, int> >::InsertRebalance(int)
 T CUtlRBTree<CUtlMap<char const*, CBitVec<32>, int>::Node_t, int, CUtlMap<char const*, CBitVec<32>, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CBitVec<32>, int>::Node_t, int>, int> >::IsLeftChild(int) const
 T CUtlRBTree<CUtlMap<char const*, CBitVec<32>, int>::Node_t, int, CUtlMap<char const*, CBitVec<32>, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CBitVec<32>, int>::Node_t, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CUtlMap<char const*, CBitVec<32>, int>::Node_t, int, CUtlMap<char const*, CBitVec<32>, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CBitVec<32>, int>::Node_t, int>, int> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, CBitVec<32>, int>::Node_t, int, CUtlMap<char const*, CBitVec<32>, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CBitVec<32>, int>::Node_t, int>, int> >::NextInorder(int) const
 T CUtlRBTree<CUtlMap<char const*, CBitVec<32>, int>::Node_t, int, CUtlMap<char const*, CBitVec<32>, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CBitVec<32>, int>::Node_t, int>, int> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, CBitVec<32>, int>::Node_t, int, CUtlMap<char const*, CBitVec<32>, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CBitVec<32>, int>::Node_t, int>, int> >::RotateLeft(int)
 T CUtlRBTree<CUtlMap<char const*, CBitVec<32>, int>::Node_t, int, CUtlMap<char const*, CBitVec<32>, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CBitVec<32>, int>::Node_t, int>, int> >::RotateRight(int)
 T CUtlRBTree<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int, CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int>, int> >::Find(CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int, CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int>, int> >::FindInsertionPosition(CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t const&, int&, bool&)
 T CUtlRBTree<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int, CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int>, int> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int, CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int>, int> >::Insert(CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int, CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int>, int> >::InsertRebalance(int)
 T CUtlRBTree<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int, CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int>, int> >::IsLeftChild(int) const
 T CUtlRBTree<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int, CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int, CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int>, int> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int, CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int>, int> >::NextInorder(int) const
 T CUtlRBTree<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int, CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int>, int> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int, CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int>, int> >::RotateLeft(int)
 T CUtlRBTree<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int, CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int>, int> >::RotateRight(int)
 T CUtlRBTree<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int, CUtlMap<char const*, CInstancedResponseSystem*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int>, int> >::Find(CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int, CUtlMap<char const*, CInstancedResponseSystem*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int>, int> >::FindInsertionPosition(CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t const&, int&, bool&)
 T CUtlRBTree<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int, CUtlMap<char const*, CInstancedResponseSystem*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int>, int> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int, CUtlMap<char const*, CInstancedResponseSystem*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int>, int> >::Insert(CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int, CUtlMap<char const*, CInstancedResponseSystem*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int>, int> >::InsertRebalance(int)
 T CUtlRBTree<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int, CUtlMap<char const*, CInstancedResponseSystem*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int>, int> >::IsLeftChild(int) const
 T CUtlRBTree<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int, CUtlMap<char const*, CInstancedResponseSystem*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int, CUtlMap<char const*, CInstancedResponseSystem*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int>, int> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int, CUtlMap<char const*, CInstancedResponseSystem*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int>, int> >::NextInorder(int) const
 T CUtlRBTree<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int, CUtlMap<char const*, CInstancedResponseSystem*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int>, int> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int, CUtlMap<char const*, CInstancedResponseSystem*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int>, int> >::RemoveRebalance(int)
 T CUtlRBTree<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int, CUtlMap<char const*, CInstancedResponseSystem*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int>, int> >::RotateLeft(int)
 T CUtlRBTree<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int, CUtlMap<char const*, CInstancedResponseSystem*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int>, int> >::RotateRight(int)
 T CUtlRBTree<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int, CUtlMap<char const*, CInstancedResponseSystem*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int>, int> >::Unlink(int)
 T CUtlRBTree<CUtlMap<char const*, CNavArea*, int>::Node_t, int, CUtlMap<char const*, CNavArea*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CNavArea*, int>::Node_t, int>, int> >::Find(CUtlMap<char const*, CNavArea*, int>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, CNavArea*, int>::Node_t, int, CUtlMap<char const*, CNavArea*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CNavArea*, int>::Node_t, int>, int> >::FindInsertionPosition(CUtlMap<char const*, CNavArea*, int>::Node_t const&, int&, bool&)
 T CUtlRBTree<CUtlMap<char const*, CNavArea*, int>::Node_t, int, CUtlMap<char const*, CNavArea*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CNavArea*, int>::Node_t, int>, int> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, CNavArea*, int>::Node_t, int, CUtlMap<char const*, CNavArea*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CNavArea*, int>::Node_t, int>, int> >::Insert(CUtlMap<char const*, CNavArea*, int>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, CNavArea*, int>::Node_t, int, CUtlMap<char const*, CNavArea*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CNavArea*, int>::Node_t, int>, int> >::InsertRebalance(int)
 T CUtlRBTree<CUtlMap<char const*, CNavArea*, int>::Node_t, int, CUtlMap<char const*, CNavArea*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CNavArea*, int>::Node_t, int>, int> >::IsLeftChild(int) const
 T CUtlRBTree<CUtlMap<char const*, CNavArea*, int>::Node_t, int, CUtlMap<char const*, CNavArea*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CNavArea*, int>::Node_t, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CUtlMap<char const*, CNavArea*, int>::Node_t, int, CUtlMap<char const*, CNavArea*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CNavArea*, int>::Node_t, int>, int> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, CNavArea*, int>::Node_t, int, CUtlMap<char const*, CNavArea*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CNavArea*, int>::Node_t, int>, int> >::NextInorder(int) const
 T CUtlRBTree<CUtlMap<char const*, CNavArea*, int>::Node_t, int, CUtlMap<char const*, CNavArea*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CNavArea*, int>::Node_t, int>, int> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, CNavArea*, int>::Node_t, int, CUtlMap<char const*, CNavArea*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CNavArea*, int>::Node_t, int>, int> >::RotateLeft(int)
 T CUtlRBTree<CUtlMap<char const*, CNavArea*, int>::Node_t, int, CUtlMap<char const*, CNavArea*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CNavArea*, int>::Node_t, int>, int> >::RotateRight(int)
 T CUtlRBTree<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short, CUtlMap<char const*, CResponseSystem::Enumeration, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short>, short> >::Find(CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short, CUtlMap<char const*, CResponseSystem::Enumeration, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short>, short> >::FindInsertionPosition(CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t const&, short&, bool&)
 T CUtlRBTree<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short, CUtlMap<char const*, CResponseSystem::Enumeration, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short>, short> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short, CUtlMap<char const*, CResponseSystem::Enumeration, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short>, short> >::Insert(CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short, CUtlMap<char const*, CResponseSystem::Enumeration, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short>, short> >::InsertRebalance(short)
 T CUtlRBTree<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short, CUtlMap<char const*, CResponseSystem::Enumeration, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short>, short> >::IsLeftChild(short) const
 T CUtlRBTree<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short, CUtlMap<char const*, CResponseSystem::Enumeration, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short>, short> >::IsRightChild(short) const
 T CUtlRBTree<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short, CUtlMap<char const*, CResponseSystem::Enumeration, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short>, short> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short, CUtlMap<char const*, CResponseSystem::Enumeration, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short>, short> >::NextInorder(short) const
 T CUtlRBTree<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short, CUtlMap<char const*, CResponseSystem::Enumeration, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short>, short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short, CUtlMap<char const*, CResponseSystem::Enumeration, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short>, short> >::RotateLeft(short)
 T CUtlRBTree<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short, CUtlMap<char const*, CResponseSystem::Enumeration, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short>, short> >::RotateRight(short)
 T CUtlRBTree<CUtlMap<char const*, CUserMessage*, int>::Node_t, int, CUtlMap<char const*, CUserMessage*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUserMessage*, int>::Node_t, int>, int> >::Find(CUtlMap<char const*, CUserMessage*, int>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, CUserMessage*, int>::Node_t, int, CUtlMap<char const*, CUserMessage*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUserMessage*, int>::Node_t, int>, int> >::FindInsertionPosition(CUtlMap<char const*, CUserMessage*, int>::Node_t const&, int&, bool&)
 T CUtlRBTree<CUtlMap<char const*, CUserMessage*, int>::Node_t, int, CUtlMap<char const*, CUserMessage*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUserMessage*, int>::Node_t, int>, int> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, CUserMessage*, int>::Node_t, int, CUtlMap<char const*, CUserMessage*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUserMessage*, int>::Node_t, int>, int> >::Insert(CUtlMap<char const*, CUserMessage*, int>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, CUserMessage*, int>::Node_t, int, CUtlMap<char const*, CUserMessage*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUserMessage*, int>::Node_t, int>, int> >::InsertRebalance(int)
 T CUtlRBTree<CUtlMap<char const*, CUserMessage*, int>::Node_t, int, CUtlMap<char const*, CUserMessage*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUserMessage*, int>::Node_t, int>, int> >::IsLeftChild(int) const
 T CUtlRBTree<CUtlMap<char const*, CUserMessage*, int>::Node_t, int, CUtlMap<char const*, CUserMessage*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUserMessage*, int>::Node_t, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CUtlMap<char const*, CUserMessage*, int>::Node_t, int, CUtlMap<char const*, CUserMessage*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUserMessage*, int>::Node_t, int>, int> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, CUserMessage*, int>::Node_t, int, CUtlMap<char const*, CUserMessage*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUserMessage*, int>::Node_t, int>, int> >::NextInorder(int) const
 T CUtlRBTree<CUtlMap<char const*, CUserMessage*, int>::Node_t, int, CUtlMap<char const*, CUserMessage*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUserMessage*, int>::Node_t, int>, int> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, CUserMessage*, int>::Node_t, int, CUtlMap<char const*, CUserMessage*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUserMessage*, int>::Node_t, int>, int> >::RotateLeft(int)
 T CUtlRBTree<CUtlMap<char const*, CUserMessage*, int>::Node_t, int, CUtlMap<char const*, CUserMessage*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUserMessage*, int>::Node_t, int>, int> >::RotateRight(int)
 T CUtlRBTree<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int, CUtlMap<char const*, ConceptHistory_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int>, int> >::Find(CUtlMap<char const*, ConceptHistory_t, int>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int, CUtlMap<char const*, ConceptHistory_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int>, int> >::FindInsertionPosition(CUtlMap<char const*, ConceptHistory_t, int>::Node_t const&, int&, bool&)
 T CUtlRBTree<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int, CUtlMap<char const*, ConceptHistory_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int>, int> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int, CUtlMap<char const*, ConceptHistory_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int>, int> >::Insert(CUtlMap<char const*, ConceptHistory_t, int>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int, CUtlMap<char const*, ConceptHistory_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int>, int> >::InsertRebalance(int)
 T CUtlRBTree<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int, CUtlMap<char const*, ConceptHistory_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int>, int> >::IsLeftChild(int) const
 T CUtlRBTree<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int, CUtlMap<char const*, ConceptHistory_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int, CUtlMap<char const*, ConceptHistory_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int>, int> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int, CUtlMap<char const*, ConceptHistory_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int>, int> >::NextInorder(int) const
 T CUtlRBTree<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int, CUtlMap<char const*, ConceptHistory_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int>, int> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int, CUtlMap<char const*, ConceptHistory_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int>, int> >::RotateLeft(int)
 T CUtlRBTree<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int, CUtlMap<char const*, ConceptHistory_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int>, int> >::RotateRight(int)
 T CUtlRBTree<CUtlMap<char const*, Criteria, short>::Node_t, short, CUtlMap<char const*, Criteria, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Criteria, short>::Node_t, short>, short> >::Find(CUtlMap<char const*, Criteria, short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, Criteria, short>::Node_t, short, CUtlMap<char const*, Criteria, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Criteria, short>::Node_t, short>, short> >::FindInsertionPosition(CUtlMap<char const*, Criteria, short>::Node_t const&, short&, bool&)
 T CUtlRBTree<CUtlMap<char const*, Criteria, short>::Node_t, short, CUtlMap<char const*, Criteria, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Criteria, short>::Node_t, short>, short> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, Criteria, short>::Node_t, short, CUtlMap<char const*, Criteria, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Criteria, short>::Node_t, short>, short> >::Insert(CUtlMap<char const*, Criteria, short>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, Criteria, short>::Node_t, short, CUtlMap<char const*, Criteria, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Criteria, short>::Node_t, short>, short> >::InsertRebalance(short)
 T CUtlRBTree<CUtlMap<char const*, Criteria, short>::Node_t, short, CUtlMap<char const*, Criteria, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Criteria, short>::Node_t, short>, short> >::IsLeftChild(short) const
 T CUtlRBTree<CUtlMap<char const*, Criteria, short>::Node_t, short, CUtlMap<char const*, Criteria, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Criteria, short>::Node_t, short>, short> >::IsRightChild(short) const
 T CUtlRBTree<CUtlMap<char const*, Criteria, short>::Node_t, short, CUtlMap<char const*, Criteria, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Criteria, short>::Node_t, short>, short> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, Criteria, short>::Node_t, short, CUtlMap<char const*, Criteria, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Criteria, short>::Node_t, short>, short> >::NextInorder(short) const
 T CUtlRBTree<CUtlMap<char const*, Criteria, short>::Node_t, short, CUtlMap<char const*, Criteria, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Criteria, short>::Node_t, short>, short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, Criteria, short>::Node_t, short, CUtlMap<char const*, Criteria, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Criteria, short>::Node_t, short>, short> >::RotateLeft(short)
 T CUtlRBTree<CUtlMap<char const*, Criteria, short>::Node_t, short, CUtlMap<char const*, Criteria, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Criteria, short>::Node_t, short>, short> >::RotateRight(short)
 T CUtlRBTree<CUtlMap<char const*, EventGroup, int>::Node_t, int, CUtlMap<char const*, EventGroup, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EventGroup, int>::Node_t, int>, int> >::Find(CUtlMap<char const*, EventGroup, int>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, EventGroup, int>::Node_t, int, CUtlMap<char const*, EventGroup, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EventGroup, int>::Node_t, int>, int> >::FindInsertionPosition(CUtlMap<char const*, EventGroup, int>::Node_t const&, int&, bool&)
 T CUtlRBTree<CUtlMap<char const*, EventGroup, int>::Node_t, int, CUtlMap<char const*, EventGroup, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EventGroup, int>::Node_t, int>, int> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, EventGroup, int>::Node_t, int, CUtlMap<char const*, EventGroup, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EventGroup, int>::Node_t, int>, int> >::Insert(CUtlMap<char const*, EventGroup, int>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, EventGroup, int>::Node_t, int, CUtlMap<char const*, EventGroup, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EventGroup, int>::Node_t, int>, int> >::InsertRebalance(int)
 T CUtlRBTree<CUtlMap<char const*, EventGroup, int>::Node_t, int, CUtlMap<char const*, EventGroup, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EventGroup, int>::Node_t, int>, int> >::IsLeftChild(int) const
 T CUtlRBTree<CUtlMap<char const*, EventGroup, int>::Node_t, int, CUtlMap<char const*, EventGroup, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EventGroup, int>::Node_t, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CUtlMap<char const*, EventGroup, int>::Node_t, int, CUtlMap<char const*, EventGroup, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EventGroup, int>::Node_t, int>, int> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, EventGroup, int>::Node_t, int, CUtlMap<char const*, EventGroup, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EventGroup, int>::Node_t, int>, int> >::NextInorder(int) const
 T CUtlRBTree<CUtlMap<char const*, EventGroup, int>::Node_t, int, CUtlMap<char const*, EventGroup, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EventGroup, int>::Node_t, int>, int> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, EventGroup, int>::Node_t, int, CUtlMap<char const*, EventGroup, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EventGroup, int>::Node_t, int>, int> >::RotateLeft(int)
 T CUtlRBTree<CUtlMap<char const*, EventGroup, int>::Node_t, int, CUtlMap<char const*, EventGroup, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EventGroup, int>::Node_t, int>, int> >::RotateRight(int)
 T CUtlRBTree<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, IEntityFactory*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, IEntityFactory*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, IEntityFactory*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, IEntityFactory*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, IEntityFactory*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, IEntityFactory*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, IEntityFactory*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, IEntityFactory*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, IEntityFactory*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, IEntityFactory*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, IEntityFactory*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, IEntityFactory*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, ResponseGroup, short>::Node_t, short, CUtlMap<char const*, ResponseGroup, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ResponseGroup, short>::Node_t, short>, short> >::Find(CUtlMap<char const*, ResponseGroup, short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, ResponseGroup, short>::Node_t, short, CUtlMap<char const*, ResponseGroup, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ResponseGroup, short>::Node_t, short>, short> >::FindInsertionPosition(CUtlMap<char const*, ResponseGroup, short>::Node_t const&, short&, bool&)
 T CUtlRBTree<CUtlMap<char const*, ResponseGroup, short>::Node_t, short, CUtlMap<char const*, ResponseGroup, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ResponseGroup, short>::Node_t, short>, short> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, ResponseGroup, short>::Node_t, short, CUtlMap<char const*, ResponseGroup, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ResponseGroup, short>::Node_t, short>, short> >::Insert(CUtlMap<char const*, ResponseGroup, short>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, ResponseGroup, short>::Node_t, short, CUtlMap<char const*, ResponseGroup, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ResponseGroup, short>::Node_t, short>, short> >::InsertRebalance(short)
 T CUtlRBTree<CUtlMap<char const*, ResponseGroup, short>::Node_t, short, CUtlMap<char const*, ResponseGroup, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ResponseGroup, short>::Node_t, short>, short> >::IsLeftChild(short) const
 T CUtlRBTree<CUtlMap<char const*, ResponseGroup, short>::Node_t, short, CUtlMap<char const*, ResponseGroup, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ResponseGroup, short>::Node_t, short>, short> >::IsRightChild(short) const
 T CUtlRBTree<CUtlMap<char const*, ResponseGroup, short>::Node_t, short, CUtlMap<char const*, ResponseGroup, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ResponseGroup, short>::Node_t, short>, short> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, ResponseGroup, short>::Node_t, short, CUtlMap<char const*, ResponseGroup, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ResponseGroup, short>::Node_t, short>, short> >::NextInorder(short) const
 T CUtlRBTree<CUtlMap<char const*, ResponseGroup, short>::Node_t, short, CUtlMap<char const*, ResponseGroup, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ResponseGroup, short>::Node_t, short>, short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, ResponseGroup, short>::Node_t, short, CUtlMap<char const*, ResponseGroup, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ResponseGroup, short>::Node_t, short>, short> >::RotateLeft(short)
 T CUtlRBTree<CUtlMap<char const*, ResponseGroup, short>::Node_t, short, CUtlMap<char const*, ResponseGroup, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ResponseGroup, short>::Node_t, short>, short> >::RotateRight(short)
 T CUtlRBTree<CUtlMap<char const*, Rule, short>::Node_t, short, CUtlMap<char const*, Rule, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Rule, short>::Node_t, short>, short> >::FindInsertionPosition(CUtlMap<char const*, Rule, short>::Node_t const&, short&, bool&)
 T CUtlRBTree<CUtlMap<char const*, Rule, short>::Node_t, short, CUtlMap<char const*, Rule, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Rule, short>::Node_t, short>, short> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, Rule, short>::Node_t, short, CUtlMap<char const*, Rule, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Rule, short>::Node_t, short>, short> >::Insert(CUtlMap<char const*, Rule, short>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, Rule, short>::Node_t, short, CUtlMap<char const*, Rule, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Rule, short>::Node_t, short>, short> >::InsertRebalance(short)
 T CUtlRBTree<CUtlMap<char const*, Rule, short>::Node_t, short, CUtlMap<char const*, Rule, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Rule, short>::Node_t, short>, short> >::IsLeftChild(short) const
 T CUtlRBTree<CUtlMap<char const*, Rule, short>::Node_t, short, CUtlMap<char const*, Rule, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Rule, short>::Node_t, short>, short> >::IsRightChild(short) const
 T CUtlRBTree<CUtlMap<char const*, Rule, short>::Node_t, short, CUtlMap<char const*, Rule, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Rule, short>::Node_t, short>, short> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, Rule, short>::Node_t, short, CUtlMap<char const*, Rule, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Rule, short>::Node_t, short>, short> >::NextInorder(short) const
 T CUtlRBTree<CUtlMap<char const*, Rule, short>::Node_t, short, CUtlMap<char const*, Rule, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Rule, short>::Node_t, short>, short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, Rule, short>::Node_t, short, CUtlMap<char const*, Rule, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Rule, short>::Node_t, short>, short> >::RotateLeft(short)
 T CUtlRBTree<CUtlMap<char const*, Rule, short>::Node_t, short, CUtlMap<char const*, Rule, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Rule, short>::Node_t, short>, short> >::RotateRight(short)
 T CUtlRBTree<CUtlMap<char const*, char const*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, char const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, char const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<char const*, char const*, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, char const*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, char const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, char const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<char const*, char const*, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<char const*, char const*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, char const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, char const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, char const*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, char const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, char const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<char const*, char const*, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, char const*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, char const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, char const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, char const*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, char const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, char const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, char const*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, char const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, char const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, char const*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, char const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, char const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, char const*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, char const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, char const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, char const*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, char const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, char const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, char const*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, char const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, char const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, char const*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, char const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, char const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, float, int>::Node_t, int, CUtlMap<char const*, float, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, float, int>::Node_t, int>, int> >::Find(CUtlMap<char const*, float, int>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, float, int>::Node_t, int, CUtlMap<char const*, float, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, float, int>::Node_t, int>, int> >::FindInsertionPosition(CUtlMap<char const*, float, int>::Node_t const&, int&, bool&)
 T CUtlRBTree<CUtlMap<char const*, float, int>::Node_t, int, CUtlMap<char const*, float, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, float, int>::Node_t, int>, int> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, float, int>::Node_t, int, CUtlMap<char const*, float, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, float, int>::Node_t, int>, int> >::Insert(CUtlMap<char const*, float, int>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, float, int>::Node_t, int, CUtlMap<char const*, float, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, float, int>::Node_t, int>, int> >::InsertRebalance(int)
 T CUtlRBTree<CUtlMap<char const*, float, int>::Node_t, int, CUtlMap<char const*, float, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, float, int>::Node_t, int>, int> >::IsLeftChild(int) const
 T CUtlRBTree<CUtlMap<char const*, float, int>::Node_t, int, CUtlMap<char const*, float, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, float, int>::Node_t, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CUtlMap<char const*, float, int>::Node_t, int, CUtlMap<char const*, float, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, float, int>::Node_t, int>, int> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, float, int>::Node_t, int, CUtlMap<char const*, float, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, float, int>::Node_t, int>, int> >::NextInorder(int) const
 T CUtlRBTree<CUtlMap<char const*, float, int>::Node_t, int, CUtlMap<char const*, float, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, float, int>::Node_t, int>, int> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, float, int>::Node_t, int, CUtlMap<char const*, float, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, float, int>::Node_t, int>, int> >::RotateLeft(int)
 T CUtlRBTree<CUtlMap<char const*, float, int>::Node_t, int, CUtlMap<char const*, float, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, float, int>::Node_t, int>, int> >::RotateRight(int)
 T CUtlRBTree<CUtlMap<char const*, int, int>::Node_t, int, CUtlMap<char const*, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int> >::Find(CUtlMap<char const*, int, int>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, int, int>::Node_t, int, CUtlMap<char const*, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int> >::FindInsertionPosition(CUtlMap<char const*, int, int>::Node_t const&, int&, bool&)
 T CUtlRBTree<CUtlMap<char const*, int, int>::Node_t, int, CUtlMap<char const*, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, int, int>::Node_t, int, CUtlMap<char const*, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int> >::Insert(CUtlMap<char const*, int, int>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, int, int>::Node_t, int, CUtlMap<char const*, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int> >::InsertRebalance(int)
 T CUtlRBTree<CUtlMap<char const*, int, int>::Node_t, int, CUtlMap<char const*, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int> >::IsLeftChild(int) const
 T CUtlRBTree<CUtlMap<char const*, int, int>::Node_t, int, CUtlMap<char const*, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CUtlMap<char const*, int, int>::Node_t, int, CUtlMap<char const*, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, int, int>::Node_t, int, CUtlMap<char const*, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int> >::NextInorder(int) const
 T CUtlRBTree<CUtlMap<char const*, int, int>::Node_t, int, CUtlMap<char const*, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, int, int>::Node_t, int, CUtlMap<char const*, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int> >::RotateLeft(int)
 T CUtlRBTree<CUtlMap<char const*, int, int>::Node_t, int, CUtlMap<char const*, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int> >::RotateRight(int)
 T CUtlRBTree<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<char const*, int, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<char const*, int, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<char const*, int, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<edict_t const*, KeyValues*, unsigned short>::Node_t, unsigned short, CUtlMap<edict_t const*, KeyValues*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<edict_t const*, KeyValues*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<edict_t const*, KeyValues*, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<edict_t const*, KeyValues*, unsigned short>::Node_t, unsigned short, CUtlMap<edict_t const*, KeyValues*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<edict_t const*, KeyValues*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<edict_t const*, KeyValues*, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<edict_t const*, KeyValues*, unsigned short>::Node_t, unsigned short, CUtlMap<edict_t const*, KeyValues*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<edict_t const*, KeyValues*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<edict_t const*, KeyValues*, unsigned short>::Node_t, unsigned short, CUtlMap<edict_t const*, KeyValues*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<edict_t const*, KeyValues*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<edict_t const*, KeyValues*, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<edict_t const*, KeyValues*, unsigned short>::Node_t, unsigned short, CUtlMap<edict_t const*, KeyValues*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<edict_t const*, KeyValues*, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<edict_t const*, KeyValues*, unsigned short>::Node_t, unsigned short, CUtlMap<edict_t const*, KeyValues*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<edict_t const*, KeyValues*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<edict_t const*, KeyValues*, unsigned short>::Node_t, unsigned short, CUtlMap<edict_t const*, KeyValues*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<edict_t const*, KeyValues*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<edict_t const*, KeyValues*, unsigned short>::Node_t, unsigned short, CUtlMap<edict_t const*, KeyValues*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<edict_t const*, KeyValues*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<edict_t const*, KeyValues*, unsigned short>::Node_t, unsigned short, CUtlMap<edict_t const*, KeyValues*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<edict_t const*, KeyValues*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CUtlMap<edict_t const*, KeyValues*, unsigned short>::Node_t, unsigned short, CUtlMap<edict_t const*, KeyValues*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<edict_t const*, KeyValues*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<edict_t const*, KeyValues*, unsigned short>::Node_t, unsigned short, CUtlMap<edict_t const*, KeyValues*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<edict_t const*, KeyValues*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<edict_t const*, KeyValues*, unsigned short>::Node_t, unsigned short, CUtlMap<edict_t const*, KeyValues*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<edict_t const*, KeyValues*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<edict_t const*, KeyValues*, unsigned short>::Node_t, unsigned short, CUtlMap<edict_t const*, KeyValues*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<edict_t const*, KeyValues*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<edict_t const*, KeyValues*, unsigned short>::Node_t, unsigned short, CUtlMap<edict_t const*, KeyValues*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<edict_t const*, KeyValues*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Unlink(unsigned short)
 T CUtlRBTree<CUtlMap<float, CTraceBulletEntityEnumerator::BulletTrace_t, unsigned short>::Node_t, unsigned short, CUtlMap<float, CTraceBulletEntityEnumerator::BulletTrace_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<float, CTraceBulletEntityEnumerator::BulletTrace_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<float, CTraceBulletEntityEnumerator::BulletTrace_t, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<float, CTraceBulletEntityEnumerator::BulletTrace_t, unsigned short>::Node_t, unsigned short, CUtlMap<float, CTraceBulletEntityEnumerator::BulletTrace_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<float, CTraceBulletEntityEnumerator::BulletTrace_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<float, CTraceBulletEntityEnumerator::BulletTrace_t, unsigned short>::Node_t, unsigned short, CUtlMap<float, CTraceBulletEntityEnumerator::BulletTrace_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<float, CTraceBulletEntityEnumerator::BulletTrace_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<float, CTraceBulletEntityEnumerator::BulletTrace_t, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<float, CTraceBulletEntityEnumerator::BulletTrace_t, unsigned short>::Node_t, unsigned short, CUtlMap<float, CTraceBulletEntityEnumerator::BulletTrace_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<float, CTraceBulletEntityEnumerator::BulletTrace_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<float, CTraceBulletEntityEnumerator::BulletTrace_t, unsigned short>::Node_t, unsigned short, CUtlMap<float, CTraceBulletEntityEnumerator::BulletTrace_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<float, CTraceBulletEntityEnumerator::BulletTrace_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<float, CTraceBulletEntityEnumerator::BulletTrace_t, unsigned short>::Node_t, unsigned short, CUtlMap<float, CTraceBulletEntityEnumerator::BulletTrace_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<float, CTraceBulletEntityEnumerator::BulletTrace_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<float, CTraceBulletEntityEnumerator::BulletTrace_t, unsigned short>::Node_t, unsigned short, CUtlMap<float, CTraceBulletEntityEnumerator::BulletTrace_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<float, CTraceBulletEntityEnumerator::BulletTrace_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<float, CTraceBulletEntityEnumerator::BulletTrace_t, unsigned short>::Node_t, unsigned short, CUtlMap<float, CTraceBulletEntityEnumerator::BulletTrace_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<float, CTraceBulletEntityEnumerator::BulletTrace_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CUtlMap<float, CTraceBulletEntityEnumerator::BulletTrace_t, unsigned short>::Node_t, unsigned short, CUtlMap<float, CTraceBulletEntityEnumerator::BulletTrace_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<float, CTraceBulletEntityEnumerator::BulletTrace_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<float, CTraceBulletEntityEnumerator::BulletTrace_t, unsigned short>::Node_t, unsigned short, CUtlMap<float, CTraceBulletEntityEnumerator::BulletTrace_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<float, CTraceBulletEntityEnumerator::BulletTrace_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<float, CTraceBulletEntityEnumerator::BulletTrace_t, unsigned short>::Node_t, unsigned short, CUtlMap<float, CTraceBulletEntityEnumerator::BulletTrace_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<float, CTraceBulletEntityEnumerator::BulletTrace_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<int, CBaseAchievement*, unsigned short>::Node_t, unsigned short, CUtlMap<int, CBaseAchievement*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CBaseAchievement*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<int, CBaseAchievement*, unsigned short>::Node_t, unsigned short, CUtlMap<int, CBaseAchievement*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CBaseAchievement*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<int, CBaseAchievement*, unsigned short>::Node_t, unsigned short, CUtlMap<int, CBaseAchievement*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CBaseAchievement*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CUtlMap<studiohdr_t const*, StudioHdrToActivityMapEntry_t, unsigned short>::Node_t, unsigned short, CUtlMap<studiohdr_t const*, StudioHdrToActivityMapEntry_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<studiohdr_t const*, StudioHdrToActivityMapEntry_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<studiohdr_t const*, StudioHdrToActivityMapEntry_t, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<studiohdr_t const*, StudioHdrToActivityMapEntry_t, unsigned short>::Node_t, unsigned short, CUtlMap<studiohdr_t const*, StudioHdrToActivityMapEntry_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<studiohdr_t const*, StudioHdrToActivityMapEntry_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<studiohdr_t const*, StudioHdrToActivityMapEntry_t, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<studiohdr_t const*, StudioHdrToActivityMapEntry_t, unsigned short>::Node_t, unsigned short, CUtlMap<studiohdr_t const*, StudioHdrToActivityMapEntry_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<studiohdr_t const*, StudioHdrToActivityMapEntry_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<studiohdr_t const*, StudioHdrToActivityMapEntry_t, unsigned short>::Node_t, unsigned short, CUtlMap<studiohdr_t const*, StudioHdrToActivityMapEntry_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<studiohdr_t const*, StudioHdrToActivityMapEntry_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<studiohdr_t const*, StudioHdrToActivityMapEntry_t, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<studiohdr_t const*, StudioHdrToActivityMapEntry_t, unsigned short>::Node_t, unsigned short, CUtlMap<studiohdr_t const*, StudioHdrToActivityMapEntry_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<studiohdr_t const*, StudioHdrToActivityMapEntry_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<studiohdr_t const*, StudioHdrToActivityMapEntry_t, unsigned short>::Node_t, unsigned short, CUtlMap<studiohdr_t const*, StudioHdrToActivityMapEntry_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<studiohdr_t const*, StudioHdrToActivityMapEntry_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<studiohdr_t const*, StudioHdrToActivityMapEntry_t, unsigned short>::Node_t, unsigned short, CUtlMap<studiohdr_t const*, StudioHdrToActivityMapEntry_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<studiohdr_t const*, StudioHdrToActivityMapEntry_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<studiohdr_t const*, StudioHdrToActivityMapEntry_t, unsigned short>::Node_t, unsigned short, CUtlMap<studiohdr_t const*, StudioHdrToActivityMapEntry_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<studiohdr_t const*, StudioHdrToActivityMapEntry_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<studiohdr_t const*, StudioHdrToActivityMapEntry_t, unsigned short>::Node_t, unsigned short, CUtlMap<studiohdr_t const*, StudioHdrToActivityMapEntry_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<studiohdr_t const*, StudioHdrToActivityMapEntry_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CUtlMap<studiohdr_t const*, StudioHdrToActivityMapEntry_t, unsigned short>::Node_t, unsigned short, CUtlMap<studiohdr_t const*, StudioHdrToActivityMapEntry_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<studiohdr_t const*, StudioHdrToActivityMapEntry_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<studiohdr_t const*, StudioHdrToActivityMapEntry_t, unsigned short>::Node_t, unsigned short, CUtlMap<studiohdr_t const*, StudioHdrToActivityMapEntry_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<studiohdr_t const*, StudioHdrToActivityMapEntry_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<studiohdr_t const*, StudioHdrToActivityMapEntry_t, unsigned short>::Node_t, unsigned short, CUtlMap<studiohdr_t const*, StudioHdrToActivityMapEntry_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<studiohdr_t const*, StudioHdrToActivityMapEntry_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<studiohdr_t const*, StudioHdrToActivityMapEntry_t, unsigned short>::Node_t, unsigned short, CUtlMap<studiohdr_t const*, StudioHdrToActivityMapEntry_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<studiohdr_t const*, StudioHdrToActivityMapEntry_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<studiohdr_t const*, StudioHdrToActivityMapEntry_t, unsigned short>::Node_t, unsigned short, CUtlMap<studiohdr_t const*, StudioHdrToActivityMapEntry_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<studiohdr_t const*, StudioHdrToActivityMapEntry_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Unlink(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned int, float, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<unsigned int, float, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<unsigned int, float, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<unsigned int, float, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<unsigned int, float, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<unsigned int, float, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<unsigned int, float, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<unsigned int, float, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned int, float, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<unsigned int, float, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<unsigned int, float, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<unsigned int, float, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CUtlMap<unsigned int, float, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<unsigned int, float, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned int, float, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned int, float, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned int, float, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::Unlink(unsigned short)
 T CUtlRBTree<CUtlString, unsigned short, bool (*)(CUtlString const&, CUtlString const&), CUtlMemory<UtlRBTreeNode_t<CUtlString, unsigned short>, unsigned short> >::Find(CUtlString const&) const
 T CUtlRBTree<CUtlString, unsigned short, bool (*)(CUtlString const&, CUtlString const&), CUtlMemory<UtlRBTreeNode_t<CUtlString, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlString const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlString, unsigned short, bool (*)(CUtlString const&, CUtlString const&), CUtlMemory<UtlRBTreeNode_t<CUtlString, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CUtlString, unsigned short, bool (*)(CUtlString const&, CUtlString const&), CUtlMemory<UtlRBTreeNode_t<CUtlString, unsigned short>, unsigned short> >::Insert(CUtlString const&)
 T CUtlRBTree<CUtlString, unsigned short, bool (*)(CUtlString const&, CUtlString const&), CUtlMemory<UtlRBTreeNode_t<CUtlString, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlString, unsigned short, bool (*)(CUtlString const&, CUtlString const&), CUtlMemory<UtlRBTreeNode_t<CUtlString, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlString, unsigned short, bool (*)(CUtlString const&, CUtlString const&), CUtlMemory<UtlRBTreeNode_t<CUtlString, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlString, unsigned short, bool (*)(CUtlString const&, CUtlString const&), CUtlMemory<UtlRBTreeNode_t<CUtlString, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlString, unsigned short, bool (*)(CUtlString const&, CUtlString const&), CUtlMemory<UtlRBTreeNode_t<CUtlString, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CUtlString, unsigned short, bool (*)(CUtlString const&, CUtlString const&), CUtlMemory<UtlRBTreeNode_t<CUtlString, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlString, unsigned short, bool (*)(CUtlString const&, CUtlString const&), CUtlMemory<UtlRBTreeNode_t<CUtlString, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlString, unsigned short, bool (*)(CUtlString const&, CUtlString const&), CUtlMemory<UtlRBTreeNode_t<CUtlString, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::Find(CUtlSymbolTable::CStringPoolIndex const&) const
 T CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlSymbolTable::CStringPoolIndex const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::Insert(CUtlSymbolTable::CStringPoolIndex const&)
 T CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<ThinkSync, unsigned short, bool (*)(ThinkSync const&, ThinkSync const&), CUtlMemory<UtlRBTreeNode_t<ThinkSync, unsigned short>, unsigned short> >::Find(ThinkSync const&) const
 T CUtlRBTree<ThinkSync, unsigned short, bool (*)(ThinkSync const&, ThinkSync const&), CUtlMemory<UtlRBTreeNode_t<ThinkSync, unsigned short>, unsigned short> >::FindInsertionPosition(ThinkSync const&, unsigned short&, bool&)
 T CUtlRBTree<ThinkSync, unsigned short, bool (*)(ThinkSync const&, ThinkSync const&), CUtlMemory<UtlRBTreeNode_t<ThinkSync, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<ThinkSync, unsigned short, bool (*)(ThinkSync const&, ThinkSync const&), CUtlMemory<UtlRBTreeNode_t<ThinkSync, unsigned short>, unsigned short> >::Insert(ThinkSync const&)
 T CUtlRBTree<ThinkSync, unsigned short, bool (*)(ThinkSync const&, ThinkSync const&), CUtlMemory<UtlRBTreeNode_t<ThinkSync, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<ThinkSync, unsigned short, bool (*)(ThinkSync const&, ThinkSync const&), CUtlMemory<UtlRBTreeNode_t<ThinkSync, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<ThinkSync, unsigned short, bool (*)(ThinkSync const&, ThinkSync const&), CUtlMemory<UtlRBTreeNode_t<ThinkSync, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<ThinkSync, unsigned short, bool (*)(ThinkSync const&, ThinkSync const&), CUtlMemory<UtlRBTreeNode_t<ThinkSync, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<ThinkSync, unsigned short, bool (*)(ThinkSync const&, ThinkSync const&), CUtlMemory<UtlRBTreeNode_t<ThinkSync, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<ThinkSync, unsigned short, bool (*)(ThinkSync const&, ThinkSync const&), CUtlMemory<UtlRBTreeNode_t<ThinkSync, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<ThinkSync, unsigned short, bool (*)(ThinkSync const&, ThinkSync const&), CUtlMemory<UtlRBTreeNode_t<ThinkSync, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<ThinkSync, unsigned short, bool (*)(ThinkSync const&, ThinkSync const&), CUtlMemory<UtlRBTreeNode_t<ThinkSync, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<VisibilityCacheEntry_t, unsigned short, CVisibilityCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<VisibilityCacheEntry_t, unsigned short>, unsigned short> >::Find(VisibilityCacheEntry_t const&) const
 T CUtlRBTree<VisibilityCacheEntry_t, unsigned short, CVisibilityCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<VisibilityCacheEntry_t, unsigned short>, unsigned short> >::FindInsertionPosition(VisibilityCacheEntry_t const&, unsigned short&, bool&)
 T CUtlRBTree<VisibilityCacheEntry_t, unsigned short, CVisibilityCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<VisibilityCacheEntry_t, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<VisibilityCacheEntry_t, unsigned short, CVisibilityCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<VisibilityCacheEntry_t, unsigned short>, unsigned short> >::Insert(VisibilityCacheEntry_t const&)
 T CUtlRBTree<VisibilityCacheEntry_t, unsigned short, CVisibilityCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<VisibilityCacheEntry_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<VisibilityCacheEntry_t, unsigned short, CVisibilityCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<VisibilityCacheEntry_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<VisibilityCacheEntry_t, unsigned short, CVisibilityCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<VisibilityCacheEntry_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<VisibilityCacheEntry_t, unsigned short, CVisibilityCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<VisibilityCacheEntry_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<VisibilityCacheEntry_t, unsigned short, CVisibilityCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<VisibilityCacheEntry_t, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<VisibilityCacheEntry_t, unsigned short, CVisibilityCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<VisibilityCacheEntry_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<VisibilityCacheEntry_t, unsigned short, CVisibilityCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<VisibilityCacheEntry_t, unsigned short>, unsigned short> >::RemoveRebalance(unsigned short)
 T CUtlRBTree<VisibilityCacheEntry_t, unsigned short, CVisibilityCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<VisibilityCacheEntry_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<VisibilityCacheEntry_t, unsigned short, CVisibilityCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<VisibilityCacheEntry_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<VisibilityCacheEntry_t, unsigned short, CVisibilityCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<VisibilityCacheEntry_t, unsigned short>, unsigned short> >::Unlink(unsigned short)
 T CUtlRBTree<VisibilityCacheEntry_t, unsigned short, CVisibilityCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<VisibilityCacheEntry_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::Find(char const* const&) const
 T CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::FindInsertionPosition(char const* const&, unsigned short&, bool&)
 T CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::Insert(char const* const&)
 T CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<unsigned int, unsigned short, bool (*)(unsigned int const&, unsigned int const&), CUtlMemory<UtlRBTreeNode_t<unsigned int, unsigned short>, unsigned short> >::Find(unsigned int const&) const
 T CUtlRBTree<unsigned int, unsigned short, bool (*)(unsigned int const&, unsigned int const&), CUtlMemory<UtlRBTreeNode_t<unsigned int, unsigned short>, unsigned short> >::FindInsertionPosition(unsigned int const&, unsigned short&, bool&)
 T CUtlRBTree<unsigned int, unsigned short, bool (*)(unsigned int const&, unsigned int const&), CUtlMemory<UtlRBTreeNode_t<unsigned int, unsigned short>, unsigned short> >::Insert(unsigned int const&)
 T CUtlRBTree<unsigned int, unsigned short, bool (*)(unsigned int const&, unsigned int const&), CUtlMemory<UtlRBTreeNode_t<unsigned int, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<unsigned int, unsigned short, bool (*)(unsigned int const&, unsigned int const&), CUtlMemory<UtlRBTreeNode_t<unsigned int, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<unsigned int, unsigned short, bool (*)(unsigned int const&, unsigned int const&), CUtlMemory<UtlRBTreeNode_t<unsigned int, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<unsigned int, unsigned short, bool (*)(unsigned int const&, unsigned int const&), CUtlMemory<UtlRBTreeNode_t<unsigned int, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<unsigned int, unsigned short, bool (*)(unsigned int const&, unsigned int const&), CUtlMemory<UtlRBTreeNode_t<unsigned int, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<unsigned int, unsigned short, bool (*)(unsigned int const&, unsigned int const&), CUtlMemory<UtlRBTreeNode_t<unsigned int, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<unsigned int, unsigned short, bool (*)(unsigned int const&, unsigned int const&), CUtlMemory<UtlRBTreeNode_t<unsigned int, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<unsigned int, unsigned short, bool (*)(unsigned int const&, unsigned int const&), CUtlMemory<UtlRBTreeNode_t<unsigned int, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlSortVector<CBaseEntity*, CSortedEntityList::CEntityReportLess>::FindLessOrEqual(CBaseEntity* const&) const
 T CUtlSortVector<CBaseEntity*, CSortedEntityList::CEntityReportLess>::Insert(CBaseEntity* const&)
 T CUtlSortVector<CDmxAttribute*, CDmxAttributeLess>::CompareHelper(CDmxAttribute* const*, CDmxAttribute* const*)
 T CUtlSortVector<CDmxAttribute*, CDmxAttributeLess>::Find(CDmxAttribute* const&) const
 T CUtlSortVector<CSortedCacheFile, CSortedCacheFile>::CompareHelper(CSortedCacheFile const*, CSortedCacheFile const*)
 T CUtlSortVector<CaptionLookup_t, CCaptionLookupLess>::CompareHelper(CaptionLookup_t const*, CaptionLookup_t const*)
 T CUtlSortVector<CaptionLookup_t, CCaptionLookupLess>::Find(CaptionLookup_t const&) const
 T CUtlString const& CDmxElement::GetValue<CUtlString>(char const*) const
 T CUtlString::CUtlString()
 T CUtlString::CUtlString(CUtlString const&)
 T CUtlString::CUtlString(char const*)
 T CUtlString::Get()
 T CUtlString::Get() const
 T CUtlString::Length() const
 T CUtlString::Set(char const*)
 T CUtlString::SetLength(int)
 T CUtlString::operator char const*() const
 T CUtlString::operator+=(char const*)
 T CUtlString::operator=(CUtlString const&)
 T CUtlString::operator=(char const*)
 T CUtlString::~CUtlString()
 T CUtlStringMap<CParticleSystemDefinition*>::operator[](char const*)
 T CUtlStringMap<CSheet*>::PurgeAndDeleteElements()
 T CUtlSymbol::CUtlSymbol(char const*)
 T CUtlSymbol::Initialize()
 T CUtlSymbolDataOps::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlSymbolDataOps::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlSymbolDataOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlSymbolDataOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlSymbolTable::AddString(char const*)
 T CUtlSymbolTable::CLess::operator()(CUtlSymbolTable::CStringPoolIndex const&, CUtlSymbolTable::CStringPoolIndex const&) const
 T CUtlSymbolTable::CUtlSymbolTable(int, int, bool)
 T CUtlSymbolTable::Find(char const*) const
 T CUtlSymbolTable::RemoveAll()
 T CUtlSymbolTable::String(CUtlSymbol) const
 T CUtlSymbolTable::~CUtlSymbolTable()
 T CUtlSymbolTableMT::String(CUtlSymbol) const
 T CUtlSymbolTableMT::~CUtlSymbolTableMT()
 T CUtlVector<AI_Response, CUtlMemory<AI_Response, int> >::InsertBefore(int)
 T CUtlVector<AsyncCaption_t, CUtlMemory<AsyncCaption_t, int> >::InsertBefore(int)
 T CUtlVector<AsyncCaption_t, CUtlMemory<AsyncCaption_t, int> >::Purge()
 T CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer, int> >::InsertBefore(int)
 T CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer, int> >::InsertMultipleBefore(int, int, CAnimationLayer const*)
 T CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >::~CUtlVector()
 T CUtlVector<CBaseEntity*, CUtlMemoryFixedGrowable<CBaseEntity*, 256ul, int> >::InsertBefore(int, CBaseEntity* const&)
 T CUtlVector<CCommandContext, CUtlMemory<CCommandContext, int> >::RemoveAll()
 T CUtlVector<CConstraintFloodEntry, CUtlMemory<CConstraintFloodEntry, int> >::Purge()
 T CUtlVector<CDmxElement*, CUtlMemory<CDmxElement*, int> > const& CDmxElement::GetArray<CDmxElement*>(char const*) const
 T CUtlVector<CDmxElement*, CUtlMemory<CDmxElement*, int> >::~CUtlVector()
 T CUtlVector<CEffectScriptElement, CUtlMemory<CEffectScriptElement, int> >::InsertBefore(int, CEffectScriptElement const&)
 T CUtlVector<CEntityDataInstantiator<CWatcherList>::HashEntry, CUtlMemory<CEntityDataInstantiator<CWatcherList>::HashEntry, int> >::InsertMultipleBefore(int, int, CEntityDataInstantiator<CWatcherList>::HashEntry const*)
 T CUtlVector<CEntityDataInstantiator<ModelWidthScale>::HashEntry, CUtlMemory<CEntityDataInstantiator<ModelWidthScale>::HashEntry, int> >::InsertMultipleBefore(int, int, CEntityDataInstantiator<ModelWidthScale>::HashEntry const*)
 T CUtlVector<CEntityDataInstantiator<StepSimulationData>::HashEntry, CUtlMemory<CEntityDataInstantiator<StepSimulationData>::HashEntry, int> >::InsertMultipleBefore(int, int, CEntityDataInstantiator<StepSimulationData>::HashEntry const*)
 T CUtlVector<CEntityDataInstantiator<groundlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<groundlink_t>::HashEntry, int> >::InsertMultipleBefore(int, int, CEntityDataInstantiator<groundlink_t>::HashEntry const*)
 T CUtlVector<CEntityDataInstantiator<physicspushlist_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<physicspushlist_t>::HashEntry, int> >::InsertMultipleBefore(int, int, CEntityDataInstantiator<physicspushlist_t>::HashEntry const*)
 T CUtlVector<CEntityDataInstantiator<touchlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<touchlink_t>::HashEntry, int> >::InsertMultipleBefore(int, int, CEntityDataInstantiator<touchlink_t>::HashEntry const*)
 T CUtlVector<CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry, int> >::InsertMultipleBefore(int, int, CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry const*)
 T CUtlVector<CEventAbsoluteTag, CUtlMemory<CEventAbsoluteTag, int> >::InsertBefore(int, CEventAbsoluteTag const&)
 T CUtlVector<CEventAbsoluteTag, CUtlMemory<CEventAbsoluteTag, int> >::~CUtlVector()
 T CUtlVector<CEventRelativeTag, CUtlMemory<CEventRelativeTag, int> >::InsertBefore(int, CEventRelativeTag const&)
 T CUtlVector<CEventRelativeTag, CUtlMemory<CEventRelativeTag, int> >::~CUtlVector()
 T CUtlVector<CFlexSceneFile*, CUtlMemory<CFlexSceneFile*, int> >::AddToTail(CFlexSceneFile* const&)
 T CUtlVector<CFlexTimingTag, CUtlMemory<CFlexTimingTag, int> >::InsertBefore(int, CFlexTimingTag const&)
 T CUtlVector<CFlexTimingTag, CUtlMemory<CFlexTimingTag, int> >::~CUtlVector()
 T CUtlVector<CFogVolume*, CUtlMemory<CFogVolume*, int> >::~CUtlVector()
 T CUtlVector<CFuncLadder*, CUtlMemory<CFuncLadder*, int> >::~CUtlVector()
 T CUtlVector<CGameSaveRestoreInfo::CHashElement, CUtlMemory<CGameSaveRestoreInfo::CHashElement, int> >::operator=(CUtlVector<CGameSaveRestoreInfo::CHashElement, CUtlMemory<CGameSaveRestoreInfo::CHashElement, int> > const&)
 T CUtlVector<CGameWeaponManager*, CUtlMemory<CGameWeaponManager*, int> >::~CUtlVector()
 T CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity>, int> >::FindAndRemove(CHandle<CBaseEntity> const&)
 T CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity>, int> >::InsertMultipleBefore(int, int, CHandle<CBaseEntity> const*)
 T CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity>, int> >::~CUtlVector()
 T CUtlVector<CHandle<CBaseFlex>, CUtlMemory<CHandle<CBaseFlex>, int> >::InsertMultipleBefore(int, int, CHandle<CBaseFlex> const*)
 T CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer>, int> >::FindAndRemove(CHandle<CBasePlayer> const&)
 T CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer>, int> >::InsertMultipleBefore(int, int, CHandle<CBasePlayer> const*)
 T CUtlVector<CHandle<CEnvMicrophone>, CUtlMemory<CHandle<CEnvMicrophone>, int> >::FindAndRemove(CHandle<CEnvMicrophone> const&)
 T CUtlVector<CHandle<CEnvMicrophone>, CUtlMemory<CHandle<CEnvMicrophone>, int> >::~CUtlVector()
 T CUtlVector<CHandle<CEnvPlayerSurfaceTrigger>, CUtlMemory<CHandle<CEnvPlayerSurfaceTrigger>, int> >::FindAndRemove(CHandle<CEnvPlayerSurfaceTrigger> const&)
 T CUtlVector<CHandle<CEnvPlayerSurfaceTrigger>, CUtlMemory<CHandle<CEnvPlayerSurfaceTrigger>, int> >::~CUtlVector()
 T CUtlVector<CHandle<CFish>, CUtlMemory<CHandle<CFish>, int> >::InsertMultipleBefore(int, int, CHandle<CFish> const*)
 T CUtlVector<CHandle<CFuncRagdollFader>, CUtlMemory<CHandle<CFuncRagdollFader>, int> >::FindAndRemove(CHandle<CFuncRagdollFader> const&)
 T CUtlVector<CHandle<CMessageEntity>, CUtlMemory<CHandle<CMessageEntity>, int> >::FindAndRemove(CHandle<CMessageEntity> const&)
 T CUtlVector<CHandle<CMessageEntity>, CUtlMemory<CHandle<CMessageEntity>, int> >::~CUtlVector()
 T CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity>, int> >::FindAndRemove(CHandle<CSceneEntity> const&)
 T CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity>, int> >::InsertMultipleBefore(int, int, CHandle<CSceneEntity> const*)
 T CUtlVector<CHandle<CSceneListManager>, CUtlMemory<CHandle<CSceneListManager>, int> >::InsertMultipleBefore(int, int, CHandle<CSceneListManager> const*)
 T CUtlVector<CHandle<CTeamControlPointMaster>, CUtlMemory<CHandle<CTeamControlPointMaster>, int> >::~CUtlVector()
 T CUtlVector<CHandle<CTonemapTrigger>, CUtlMemory<CHandle<CTonemapTrigger>, int> >::FindAndRemove(CHandle<CTonemapTrigger> const&)
 T CUtlVector<CHandle<CTriggerMultiple>, CUtlMemory<CHandle<CTriggerMultiple>, int> >::~CUtlVector()
 T CUtlVector<CHandle<CVGuiScreen>, CUtlMemory<CHandle<CVGuiScreen>, int> >::InsertMultipleBefore(int, int, CHandle<CVGuiScreen> const*)
 T CUtlVector<CInfectedAnimationLayer, CUtlMemory<CInfectedAnimationLayer, int> >::InsertMultipleBefore(int, int, CInfectedAnimationLayer const*)
 T CUtlVector<CMultiplayRules::ResponseRules_t, CUtlMemory<CMultiplayRules::ResponseRules_t, int> >::Purge()
 T CUtlVector<CNavArea*, CUtlMemory<CNavArea*, int> >::operator=(CUtlVector<CNavArea*, CUtlMemory<CNavArea*, int> > const&)
 T CUtlVector<CNavArea*, CUtlMemory<CNavArea*, int> >::~CUtlVector()
 T CUtlVector<CNavArea*, CUtlMemoryConservative<CNavArea*> >::InsertBefore(int, CNavArea* const&)
 T CUtlVector<CParticleSystemMgr::RenderCache_t, CUtlMemory<CParticleSystemMgr::RenderCache_t, int> >::Purge()
 T CUtlVector<CPassengerInfo, CUtlMemory<CPassengerInfo, int> >::InsertBefore(int)
 T CUtlVector<CPassengerInfo, CUtlMemory<CPassengerInfo, int> >::InsertMultipleBefore(int, int, CPassengerInfo const*)
 T CUtlVector<CPassengerSeat, CUtlMemory<CPassengerSeat, int> >::~CUtlVector()
 T CUtlVector<CPropData::propdata_breakablechunk_t, CUtlMemory<CPropData::propdata_breakablechunk_t, int> >::Purge()
 T CUtlVector<CSceneEventInfo, CUtlMemory<CSceneEventInfo, int> >::InsertBefore(int, CSceneEventInfo const&)
 T CUtlVector<CStressEntityReg*, CUtlMemory<CStressEntityReg*, int> >::~CUtlVector()
 T CUtlVector<CStudioHdr::CActivityToSequenceMapping::HashValueType, CUtlMemory<CStudioHdr::CActivityToSequenceMapping::HashValueType, int> >::InsertMultipleBefore(int, int, CStudioHdr::CActivityToSequenceMapping::HashValueType const*)
 T CUtlVector<CTeam*, CUtlMemory<CTeam*, int> >::~CUtlVector()
 T CUtlVector<CTransitioningPlayer*, CUtlMemory<CTransitioningPlayer*, int> >::~CUtlVector()
 T CUtlVector<CUserCmd, CUtlMemory<CUserCmd, int> >::InsertBefore(int, CUserCmd const&)
 T CUtlVector<CUtlBinaryBlock, CUtlMemory<CUtlBinaryBlock, int> >::InsertBefore(int)
 T CUtlVector<CUtlBinaryBlock, CUtlMemory<CUtlBinaryBlock, int> >::InsertBefore(int, CUtlBinaryBlock const&)
 T CUtlVector<CUtlBinaryBlock, CUtlMemory<CUtlBinaryBlock, int> >::~CUtlVector()
 T CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >::InsertBefore(int)
 T CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >::InsertBefore(int, CUtlString const&)
 T CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >::~CUtlVector()
 T CUtlVector<CUtlVector<CEntityDataInstantiator<CWatcherList>::HashEntry, CUtlMemory<CEntityDataInstantiator<CWatcherList>::HashEntry, int> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<CWatcherList>::HashEntry, CUtlMemory<CEntityDataInstantiator<CWatcherList>::HashEntry, int> >, int> >::InsertMultipleBefore(int, int, CUtlVector<CEntityDataInstantiator<CWatcherList>::HashEntry, CUtlMemory<CEntityDataInstantiator<CWatcherList>::HashEntry, int> > const*)
 T CUtlVector<CUtlVector<CEntityDataInstantiator<CWatcherList>::HashEntry, CUtlMemory<CEntityDataInstantiator<CWatcherList>::HashEntry, int> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<CWatcherList>::HashEntry, CUtlMemory<CEntityDataInstantiator<CWatcherList>::HashEntry, int> >, int> >::Purge()
 T CUtlVector<CUtlVector<CEntityDataInstantiator<CWatcherList>::HashEntry, CUtlMemory<CEntityDataInstantiator<CWatcherList>::HashEntry, int> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<CWatcherList>::HashEntry, CUtlMemory<CEntityDataInstantiator<CWatcherList>::HashEntry, int> >, int> >::SetCount(int)
 T CUtlVector<CUtlVector<CEntityDataInstantiator<ModelWidthScale>::HashEntry, CUtlMemory<CEntityDataInstantiator<ModelWidthScale>::HashEntry, int> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<ModelWidthScale>::HashEntry, CUtlMemory<CEntityDataInstantiator<ModelWidthScale>::HashEntry, int> >, int> >::InsertMultipleBefore(int, int, CUtlVector<CEntityDataInstantiator<ModelWidthScale>::HashEntry, CUtlMemory<CEntityDataInstantiator<ModelWidthScale>::HashEntry, int> > const*)
 T CUtlVector<CUtlVector<CEntityDataInstantiator<ModelWidthScale>::HashEntry, CUtlMemory<CEntityDataInstantiator<ModelWidthScale>::HashEntry, int> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<ModelWidthScale>::HashEntry, CUtlMemory<CEntityDataInstantiator<ModelWidthScale>::HashEntry, int> >, int> >::Purge()
 T CUtlVector<CUtlVector<CEntityDataInstantiator<ModelWidthScale>::HashEntry, CUtlMemory<CEntityDataInstantiator<ModelWidthScale>::HashEntry, int> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<ModelWidthScale>::HashEntry, CUtlMemory<CEntityDataInstantiator<ModelWidthScale>::HashEntry, int> >, int> >::SetCount(int)
 T CUtlVector<CUtlVector<CEntityDataInstantiator<StepSimulationData>::HashEntry, CUtlMemory<CEntityDataInstantiator<StepSimulationData>::HashEntry, int> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<StepSimulationData>::HashEntry, CUtlMemory<CEntityDataInstantiator<StepSimulationData>::HashEntry, int> >, int> >::InsertMultipleBefore(int, int, CUtlVector<CEntityDataInstantiator<StepSimulationData>::HashEntry, CUtlMemory<CEntityDataInstantiator<StepSimulationData>::HashEntry, int> > const*)
 T CUtlVector<CUtlVector<CEntityDataInstantiator<StepSimulationData>::HashEntry, CUtlMemory<CEntityDataInstantiator<StepSimulationData>::HashEntry, int> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<StepSimulationData>::HashEntry, CUtlMemory<CEntityDataInstantiator<StepSimulationData>::HashEntry, int> >, int> >::Purge()
 T CUtlVector<CUtlVector<CEntityDataInstantiator<StepSimulationData>::HashEntry, CUtlMemory<CEntityDataInstantiator<StepSimulationData>::HashEntry, int> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<StepSimulationData>::HashEntry, CUtlMemory<CEntityDataInstantiator<StepSimulationData>::HashEntry, int> >, int> >::SetCount(int)
 T CUtlVector<CUtlVector<CEntityDataInstantiator<groundlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<groundlink_t>::HashEntry, int> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<groundlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<groundlink_t>::HashEntry, int> >, int> >::InsertMultipleBefore(int, int, CUtlVector<CEntityDataInstantiator<groundlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<groundlink_t>::HashEntry, int> > const*)
 T CUtlVector<CUtlVector<CEntityDataInstantiator<groundlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<groundlink_t>::HashEntry, int> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<groundlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<groundlink_t>::HashEntry, int> >, int> >::Purge()
 T CUtlVector<CUtlVector<CEntityDataInstantiator<groundlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<groundlink_t>::HashEntry, int> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<groundlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<groundlink_t>::HashEntry, int> >, int> >::SetCount(int)
 T CUtlVector<CUtlVector<CEntityDataInstantiator<physicspushlist_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<physicspushlist_t>::HashEntry, int> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<physicspushlist_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<physicspushlist_t>::HashEntry, int> >, int> >::InsertMultipleBefore(int, int, CUtlVector<CEntityDataInstantiator<physicspushlist_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<physicspushlist_t>::HashEntry, int> > const*)
 T CUtlVector<CUtlVector<CEntityDataInstantiator<physicspushlist_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<physicspushlist_t>::HashEntry, int> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<physicspushlist_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<physicspushlist_t>::HashEntry, int> >, int> >::Purge()
 T CUtlVector<CUtlVector<CEntityDataInstantiator<physicspushlist_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<physicspushlist_t>::HashEntry, int> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<physicspushlist_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<physicspushlist_t>::HashEntry, int> >, int> >::SetCount(int)
 T CUtlVector<CUtlVector<CEntityDataInstantiator<touchlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<touchlink_t>::HashEntry, int> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<touchlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<touchlink_t>::HashEntry, int> >, int> >::InsertMultipleBefore(int, int, CUtlVector<CEntityDataInstantiator<touchlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<touchlink_t>::HashEntry, int> > const*)
 T CUtlVector<CUtlVector<CEntityDataInstantiator<touchlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<touchlink_t>::HashEntry, int> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<touchlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<touchlink_t>::HashEntry, int> >, int> >::Purge()
 T CUtlVector<CUtlVector<CEntityDataInstantiator<touchlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<touchlink_t>::HashEntry, int> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<touchlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<touchlink_t>::HashEntry, int> >, int> >::SetCount(int)
 T CUtlVector<CUtlVector<CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry, int> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry, int> >, int> >::InsertMultipleBefore(int, int, CUtlVector<CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry, int> > const*)
 T CUtlVector<CUtlVector<CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry, int> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry, int> >, int> >::Purge()
 T CUtlVector<CUtlVector<CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry, int> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry, int> >, int> >::SetCount(int)
 T CUtlVector<CUtlVector<CGameSaveRestoreInfo::CHashElement, CUtlMemory<CGameSaveRestoreInfo::CHashElement, int> >, CUtlMemory<CUtlVector<CGameSaveRestoreInfo::CHashElement, CUtlMemory<CGameSaveRestoreInfo::CHashElement, int> >, int> >::InsertMultipleBefore(int, int, CUtlVector<CGameSaveRestoreInfo::CHashElement, CUtlMemory<CGameSaveRestoreInfo::CHashElement, int> > const*)
 T CUtlVector<CUtlVector<CGameSaveRestoreInfo::CHashElement, CUtlMemory<CGameSaveRestoreInfo::CHashElement, int> >, CUtlMemory<CUtlVector<CGameSaveRestoreInfo::CHashElement, CUtlMemory<CGameSaveRestoreInfo::CHashElement, int> >, int> >::Purge()
 T CUtlVector<CUtlVector<CGameSaveRestoreInfo::CHashElement, CUtlMemory<CGameSaveRestoreInfo::CHashElement, int> >, CUtlMemory<CUtlVector<CGameSaveRestoreInfo::CHashElement, CUtlMemory<CGameSaveRestoreInfo::CHashElement, int> >, int> >::SetCount(int)
 T CUtlVector<CUtlVector<CNavArea*, CUtlMemory<CNavArea*, int> >, CUtlMemory<CUtlVector<CNavArea*, CUtlMemory<CNavArea*, int> >, int> >::InsertMultipleBefore(int, int, CUtlVector<CNavArea*, CUtlMemory<CNavArea*, int> > const*)
 T CUtlVector<CUtlVector<CNavArea*, CUtlMemory<CNavArea*, int> >, CUtlMemory<CUtlVector<CNavArea*, CUtlMemory<CNavArea*, int> >, int> >::Purge()
 T CUtlVector<CUtlVector<CNavArea*, CUtlMemory<CNavArea*, int> >, CUtlMemory<CUtlVector<CNavArea*, CUtlMemory<CNavArea*, int> >, int> >::SetCount(int)
 T CUtlVector<CUtlVector<CStudioHdr::CActivityToSequenceMapping::HashValueType, CUtlMemory<CStudioHdr::CActivityToSequenceMapping::HashValueType, int> >, CUtlMemory<CUtlVector<CStudioHdr::CActivityToSequenceMapping::HashValueType, CUtlMemory<CStudioHdr::CActivityToSequenceMapping::HashValueType, int> >, int> >::InsertMultipleBefore(int, int, CUtlVector<CStudioHdr::CActivityToSequenceMapping::HashValueType, CUtlMemory<CStudioHdr::CActivityToSequenceMapping::HashValueType, int> > const*)
 T CUtlVector<CUtlVector<CStudioHdr::CActivityToSequenceMapping::HashValueType, CUtlMemory<CStudioHdr::CActivityToSequenceMapping::HashValueType, int> >, CUtlMemory<CUtlVector<CStudioHdr::CActivityToSequenceMapping::HashValueType, CUtlMemory<CStudioHdr::CActivityToSequenceMapping::HashValueType, int> >, int> >::Purge()
 T CUtlVector<CUtlVector<CStudioHdr::CActivityToSequenceMapping::HashValueType, CUtlMemory<CStudioHdr::CActivityToSequenceMapping::HashValueType, int> >, CUtlMemory<CUtlVector<CStudioHdr::CActivityToSequenceMapping::HashValueType, CUtlMemory<CStudioHdr::CActivityToSequenceMapping::HashValueType, int> >, int> >::SetCount(int)
 T CUtlVector<CUtlVector<EntsByStringList_t, CUtlMemory<EntsByStringList_t, int> >, CUtlMemory<CUtlVector<EntsByStringList_t, CUtlMemory<EntsByStringList_t, int> >, int> >::InsertMultipleBefore(int, int, CUtlVector<EntsByStringList_t, CUtlMemory<EntsByStringList_t, int> > const*)
 T CUtlVector<CUtlVector<EntsByStringList_t, CUtlMemory<EntsByStringList_t, int> >, CUtlMemory<CUtlVector<EntsByStringList_t, CUtlMemory<EntsByStringList_t, int> >, int> >::Purge()
 T CUtlVector<CUtlVector<EntsByStringList_t, CUtlMemory<EntsByStringList_t, int> >, CUtlMemory<CUtlVector<EntsByStringList_t, CUtlMemory<EntsByStringList_t, int> >, int> >::SetCount(int)
 T CUtlVector<CUtlVector<VoiceCommandMenuItem_t, CUtlMemory<VoiceCommandMenuItem_t, int> >, CUtlMemory<CUtlVector<VoiceCommandMenuItem_t, CUtlMemory<VoiceCommandMenuItem_t, int> >, int> >::Purge()
 T CUtlVector<CUtlVector<ikcontextikrule_t, CUtlMemory<ikcontextikrule_t, int> >, CUtlMemory<CUtlVector<ikcontextikrule_t, CUtlMemory<ikcontextikrule_t, int> >, int> >::InsertMultipleBefore(int, int, CUtlVector<ikcontextikrule_t, CUtlMemory<ikcontextikrule_t, int> > const*)
 T CUtlVector<CUtlVector<ikcontextikrule_t, CUtlMemory<ikcontextikrule_t, int> >, CUtlMemory<CUtlVector<ikcontextikrule_t, CUtlMemory<ikcontextikrule_t, int> >, int> >::Purge()
 T CUtlVector<CUtlVector<ikcontextikrule_t, CUtlMemory<ikcontextikrule_t, int> >, CUtlMemory<CUtlVector<ikcontextikrule_t, CUtlMemory<ikcontextikrule_t, int> >, int> >::SetCount(int)
 T CUtlVector<CWeaponCSBase*, CUtlMemory<CWeaponCSBase*, int> >::~CUtlVector()
 T CUtlVector<CWeaponSpawn*, CUtlMemory<CWeaponSpawn*, int> >::~CUtlVector()
 T CUtlVector<Director::ItemLocationInfo, CUtlMemory<Director::ItemLocationInfo, int> >::Sort(int (*)(Director::ItemLocationInfo const*, Director::ItemLocationInfo const*))
 T CUtlVector<EntsByStringList_t, CUtlMemory<EntsByStringList_t, int> >::operator=(CUtlVector<EntsByStringList_t, CUtlMemory<EntsByStringList_t, int> > const&)
 T CUtlVector<IGameSystem*, CUtlMemory<IGameSystem*, int> >::~CUtlVector()
 T CUtlVector<IGameSystemPerFrame*, CUtlMemory<IGameSystemPerFrame*, int> >::~CUtlVector()
 T CUtlVector<IHandleEntity*, CUtlMemoryFixedGrowable<IHandleEntity*, 256ul, int> >::InsertBefore(int, IHandleEntity* const&)
 T CUtlVector<IServerNetworkable*, CUtlMemory<IServerNetworkable*, int> >::~CUtlVector()
 T CUtlVector<NavConnect const*, CUtlMemoryFixedGrowable<NavConnect const*, 64ul, int> >::InsertBefore(int, NavConnect const* const&)
 T CUtlVector<OneWayLink_t, CUtlMemoryFixedGrowable<OneWayLink_t, 512ul, int> >::InsertBefore(int, OneWayLink_t const&)
 T CUtlVector<PlayerSaveData, CUtlMemory<PlayerSaveData, int> >::InsertBefore(int, PlayerSaveData const&)
 T CUtlVector<PlayerSaveData, CUtlMemory<PlayerSaveData, int> >::~CUtlVector()
 T CUtlVector<RecognizedActor, CUtlMemory<RecognizedActor, int> >::InsertBefore(int, RecognizedActor const&)
 T CUtlVector<Relationship_t, CUtlMemory<Relationship_t, int> >::InsertMultipleBefore(int, int, Relationship_t const*)
 T CUtlVector<Response, CUtlMemory<Response, int> >::InsertBefore(int, Response const&)
 T CUtlVector<SavedWeapon, CUtlMemory<SavedWeapon, int> >::InsertBefore(int, SavedWeapon const&)
 T CUtlVector<SavedWeapon, CUtlMemory<SavedWeapon, int> >::~CUtlVector()
 T CUtlVector<SavedWeaponSpawn, CUtlMemory<SavedWeaponSpawn, int> >::InsertBefore(int, SavedWeaponSpawn const&)
 T CUtlVector<SavedWeaponSpawn, CUtlMemory<SavedWeaponSpawn, int> >::~CUtlVector()
 T CUtlVector<SurvivorBotSaveData, CUtlMemory<SurvivorBotSaveData, int> >::InsertBefore(int, SurvivorBotSaveData const&)
 T CUtlVector<SurvivorBotSaveData, CUtlMemory<SurvivorBotSaveData, int> >::~CUtlVector()
 T CUtlVector<TemplateEntityData_t*, CUtlMemory<TemplateEntityData_t*, int> >::~CUtlVector()
 T CUtlVector<TerrorNavArea::AreaBindInfo, CUtlMemoryConservative<TerrorNavArea::AreaBindInfo> >::InsertBefore(int, TerrorNavArea::AreaBindInfo const&)
 T CUtlVector<activitylist_t, CUtlMemory<activitylist_t, int> >::~CUtlVector()
 T CUtlVector<char const*, CUtlMemory<char const*, int> >::operator=(CUtlVector<char const*, CUtlMemory<char const*, int> > const&)
 T CUtlVector<char const*, CUtlMemory<char const*, int> >::~CUtlVector()
 T CUtlVector<char*, CUtlMemory<char*, int> >::InsertBefore(int, char* const&)
 T CUtlVector<char*, CUtlMemory<char*, int> >::~CUtlVector()
 T CUtlVector<damageevent_t, CUtlMemory<damageevent_t, int> >::InsertBefore(int)
 T CUtlVector<eventlist_t, CUtlMemory<eventlist_t, int> >::~CUtlVector()
 T CUtlVector<globalentity_t, CUtlMemory<globalentity_t, int> >::InsertMultipleBefore(int, int, globalentity_t const*)
 T CUtlVector<ikcontextikrule_t, CUtlMemory<ikcontextikrule_t, int> >::operator=(CUtlVector<ikcontextikrule_t, CUtlMemory<ikcontextikrule_t, int> > const&)
 T CUtlVector<int, CUtlMemory<int, int> >::AddToTail(int const&)
 T CUtlVector<magnetted_objects_t, CUtlMemory<magnetted_objects_t, int> >::InsertMultipleBefore(int, int, magnetted_objects_t const*)
 T CUtlVector<physfollower_t, CUtlMemory<physfollower_t, int> >::InsertMultipleBefore(int, int, physfollower_t const*)
 T CUtlVector<scavengelist_t, CUtlMemoryFixedGrowable<scavengelist_t, 64ul, int> >::InsertBefore(int)
 T CUtlVector<vehicle_crashsound_t, CUtlMemory<vehicle_crashsound_t, int> >::InsertMultipleBefore(int, int, vehicle_crashsound_t const*)
 T CUtlVector<vehicle_gear_t, CUtlMemory<vehicle_gear_t, int> >::InsertMultipleBefore(int, int, vehicle_gear_t const*)
 T CUtlVector<vehiclescript_t, CUtlMemory<vehiclescript_t, int> >::~CUtlVector()
 T CUtlVectorConservative<TerrorNavArea::AreaBindInfo>::~CUtlVectorConservative()
 T CUtlVectorDataOps<CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer, int> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer, int> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer, int> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer, int> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >, 12>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >, 12>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >, 12>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >, 12>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity>, int> >, 13>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity>, int> >, 13>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity>, int> >, 13>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity>, int> >, 13>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<CHandle<CBaseFlex>, CUtlMemory<CHandle<CBaseFlex>, int> >, 13>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CHandle<CBaseFlex>, CUtlMemory<CHandle<CBaseFlex>, int> >, 13>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CHandle<CBaseFlex>, CUtlMemory<CHandle<CBaseFlex>, int> >, 13>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<CHandle<CBaseFlex>, CUtlMemory<CHandle<CBaseFlex>, int> >, 13>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer>, int> >, 13>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer>, int> >, 13>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer>, int> >, 13>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer>, int> >, 13>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<CHandle<CFish>, CUtlMemory<CHandle<CFish>, int> >, 13>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CHandle<CFish>, CUtlMemory<CHandle<CFish>, int> >, 13>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CHandle<CFish>, CUtlMemory<CHandle<CFish>, int> >, 13>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<CHandle<CFish>, CUtlMemory<CHandle<CFish>, int> >, 13>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity>, int> >, 13>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity>, int> >, 13>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity>, int> >, 13>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity>, int> >, 13>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<CHandle<CSceneListManager>, CUtlMemory<CHandle<CSceneListManager>, int> >, 13>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CHandle<CSceneListManager>, CUtlMemory<CHandle<CSceneListManager>, int> >, 13>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CHandle<CSceneListManager>, CUtlMemory<CHandle<CSceneListManager>, int> >, 13>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<CHandle<CSceneListManager>, CUtlMemory<CHandle<CSceneListManager>, int> >, 13>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<CHandle<CVGuiScreen>, CUtlMemory<CHandle<CVGuiScreen>, int> >, 13>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CHandle<CVGuiScreen>, CUtlMemory<CHandle<CVGuiScreen>, int> >, 13>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CHandle<CVGuiScreen>, CUtlMemory<CHandle<CVGuiScreen>, int> >, 13>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<CHandle<CVGuiScreen>, CUtlMemory<CHandle<CVGuiScreen>, int> >, 13>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<CPassengerInfo, CUtlMemory<CPassengerInfo, int> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CPassengerInfo, CUtlMemory<CPassengerInfo, int> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CPassengerInfo, CUtlMemory<CPassengerInfo, int> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<CPassengerInfo, CUtlMemory<CPassengerInfo, int> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<Relationship_t, CUtlMemory<Relationship_t, int> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<Relationship_t, CUtlMemory<Relationship_t, int> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<Relationship_t, CUtlMemory<Relationship_t, int> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<Relationship_t, CUtlMemory<Relationship_t, int> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<ResponseContext_t, CUtlMemory<ResponseContext_t, int> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<ResponseContext_t, CUtlMemory<ResponseContext_t, int> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<ResponseContext_t, CUtlMemory<ResponseContext_t, int> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<ResponseContext_t, CUtlMemory<ResponseContext_t, int> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<SaveRestoreBlockHeader_t, CUtlMemory<SaveRestoreBlockHeader_t, int> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<SaveRestoreBlockHeader_t, CUtlMemory<SaveRestoreBlockHeader_t, int> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<SaveRestoreBlockHeader_t, CUtlMemory<SaveRestoreBlockHeader_t, int> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<SaveRestoreBlockHeader_t, CUtlMemory<SaveRestoreBlockHeader_t, int> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<globalentity_t, CUtlMemory<globalentity_t, int> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<globalentity_t, CUtlMemory<globalentity_t, int> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<globalentity_t, CUtlMemory<globalentity_t, int> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<globalentity_t, CUtlMemory<globalentity_t, int> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<int, CUtlMemory<int, int> >, 5>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<int, CUtlMemory<int, int> >, 5>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<int, CUtlMemory<int, int> >, 5>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<int, CUtlMemory<int, int> >, 5>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<magnetted_objects_t, CUtlMemory<magnetted_objects_t, int> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<magnetted_objects_t, CUtlMemory<magnetted_objects_t, int> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<magnetted_objects_t, CUtlMemory<magnetted_objects_t, int> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<magnetted_objects_t, CUtlMemory<magnetted_objects_t, int> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<modifiedconvars_t, CUtlMemory<modifiedconvars_t, int> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<modifiedconvars_t, CUtlMemory<modifiedconvars_t, int> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<modifiedconvars_t, CUtlMemory<modifiedconvars_t, int> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<modifiedconvars_t, CUtlMemory<modifiedconvars_t, int> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<physfollower_t, CUtlMemory<physfollower_t, int> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<physfollower_t, CUtlMemory<physfollower_t, int> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<physfollower_t, CUtlMemory<physfollower_t, int> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<physfollower_t, CUtlMemory<physfollower_t, int> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<template_t, CUtlMemory<template_t, int> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<template_t, CUtlMemory<template_t, int> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<template_t, CUtlMemory<template_t, int> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<template_t, CUtlMemory<template_t, int> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<thinkfunc_t, CUtlMemory<thinkfunc_t, int> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<thinkfunc_t, CUtlMemory<thinkfunc_t, int> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<thinkfunc_t, CUtlMemory<thinkfunc_t, int> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<thinkfunc_t, CUtlMemory<thinkfunc_t, int> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<vehicle_crashsound_t, CUtlMemory<vehicle_crashsound_t, int> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<vehicle_crashsound_t, CUtlMemory<vehicle_crashsound_t, int> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<vehicle_crashsound_t, CUtlMemory<vehicle_crashsound_t, int> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<vehicle_crashsound_t, CUtlMemory<vehicle_crashsound_t, int> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<vehicle_gear_t, CUtlMemory<vehicle_gear_t, int> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<vehicle_gear_t, CUtlMemory<vehicle_gear_t, int> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<vehicle_gear_t, CUtlMemory<vehicle_gear_t, int> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<vehicle_gear_t, CUtlMemory<vehicle_gear_t, int> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorInitialized<char const*>::~CUtlVectorInitialized()
 T CUtlVectorUltraConservative<HidingSpot*, CUtlVectorUltraConservativeAllocator>::~CUtlVectorUltraConservative()
 T CUtlVectorUltraConservative<NavConnect, CUtlVectorUltraConservativeAllocator>::EnsureCapacity(int)
 T CUtlVectorUltraConservative<NavConnect, CUtlVectorUltraConservativeAllocator>::Remove(int)
 T CUtlVectorUltraConservative<NavConnect, CUtlVectorUltraConservativeAllocator>::RemoveAll()
 T CUtlVectorUltraConservative<SpotEncounter*, CUtlVectorUltraConservativeAllocator>::PurgeAndDeleteElements()
 T CVGuiScreen::Activate()
 T CVGuiScreen::CVGuiScreen()
 T CVGuiScreen::GetDataDescMap()
 T CVGuiScreen::GetPanelName() const
 T CVGuiScreen::GetServerClass()
 T CVGuiScreen::InputSetActive(inputdata_t&)
 T CVGuiScreen::InputSetInactive(inputdata_t&)
 T CVGuiScreen::KeyValue(char const*, char const*)
 T CVGuiScreen::MakeVisibleOnlyToTeammates(bool)
 T CVGuiScreen::OnRestore()
 T CVGuiScreen::Precache()
 T CVGuiScreen::SetActive(bool)
 T CVGuiScreen::SetActualSize(float, float)
 T CVGuiScreen::SetAttachedToViewModel(bool)
 T CVGuiScreen::SetTransparency(bool)
 T CVGuiScreen::ShouldTransmit(CCheckTransmitInfo const*)
 T CVGuiScreen::Spawn()
 T CVGuiScreen::UpdateTransmitState()
 T CVGuiScreen::YouForgotToImplementOrDeclareServerClass()
 T CVGuiScreen::~CVGuiScreen()
 T CV_GlobalChange_Commentary(IConVar*, char const*, float)
 T CVariantSaveDataOps::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CVariantSaveDataOps::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CVariantSaveDataOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CVariantSaveDataOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CVehicleSoundsParser::CVehicleSoundsParser()
 T CVehicleSoundsParser::ParseKeyValue(void*, char const*, char const*)
 T CVehicleSoundsParser::SetDefaults(void*)
 T CVersusRandom::CVersusRandom()
 T CVersusRandom::GetDataDescMap()
 T CVersusRandom::InputPickRandom(inputdata_t&)
 T CVersusRandom::PickNewRandom(bool, inputdata_t&)
 T CVersusRandom::PickStoredRandom(inputdata_t&)
 T CVersusRandom::Spawn()
 T CVersusRandom::~CVersusRandom()
 T CVisibilityMonitor::AddEntity(CBaseEntity*, float, bool (*)(CBaseEntity*, CBasePlayer*), bool (*)(CBaseEntity*, CBasePlayer*))
 T CVisibilityMonitor::EntityIsVisibleToPlayer(visibility_target_t const&, CBasePlayer*, int*)
 T CVisibilityMonitor::FrameUpdatePostEntityThink()
 T CVisibilityMonitor::Init()
 T CVisibilityMonitor::LevelInitPostEntity()
 T CVisibilityMonitor::LevelInitPreEntity()
 T CVisibilityMonitor::LevelShutdownPreEntity()
 T CVisibilityMonitor::Name()
 T CVisibilityMonitor::RemoveEntity(CBaseEntity*)
 T CVisibilityMonitor::Shutdown()
 T CVisibilityMonitor::~CVisibilityMonitor()
 T CVoiceGameMgr::ClientCommand(CBasePlayer*, CCommand const&)
 T CVoiceGameMgr::ClientConnected(edict_t*)
 T CVoiceGameMgr::Init(IVoiceGameMgrHelper*, int)
 T CVoiceGameMgr::IsPlayerIgnoringPlayer(int, int)
 T CVoiceGameMgr::Update(double)
 T CVoiceGameMgr::UpdateMasks()
 T CVoiceGameMgr::~CVoiceGameMgr()
 T CVoiceGameMgrHelper::CanPlayerHearPlayer(CBasePlayer*, CBasePlayer*, bool&)
 T CVoiceGameMgrHelper::~CVoiceGameMgrHelper()
 T CVomit::ActivateAbility()
 T CVomit::GetButton() const
 T CVomit::GetDataDescMap()
 T CVomit::GetServerClass()
 T CVomit::HasAbilityTarget() const
 T CVomit::IsAbilityReadyToFire() const
 T CVomit::IsActive() const
 T CVomit::NetworkVar_m_attackDuration::NetworkStateChanged()
 T CVomit::NetworkVar_m_attackDuration::NetworkStateChanged(void*)
 T CVomit::NetworkVar_m_nextSpray::NetworkStateChanged()
 T CVomit::NetworkVar_m_nextSpray::NetworkStateChanged(void*)
 T CVomit::OnCreate(CTerrorPlayer*)
 T CVomit::OnStunned(float)
 T CVomit::Operator_HandleAnimEvent(animevent_t*, CBaseCombatCharacter*)
 T CVomit::Precache()
 T CVomit::StartVomitEffect()
 T CVomit::StopVomitEffect()
 T CVomit::UpdateAbility()
 T CVomit::YouForgotToImplementOrDeclareServerClass()
 T CVomit::~CVomit()
 T CVomitHitAwardTemplate::CVomitHitAwardTemplate(int)
 T CVomitHitAwardTemplate::FireGameEvent(IGameEvent*)
 T CVomitHitAwardTemplate::OnConditionsMet(AwardType, CBaseEntity*)
 T CVomitHitAwardTemplate::OnCreate()
 T CVomitHitAwardTemplate::~CVomitHitAwardTemplate()
 T CVomitParticle::Create(Vector const&, QAngle const&, CBaseEntity*, CTerrorPlayer*)
 T CVomitParticle::FlyThink()
 T CVomitParticle::OnCollide(CBaseEntity*)
 T CVomitParticle::PhysicsSolidMaskForEntity()
 T CVomitParticle::ResolveFlyCollisionCustom(CGameTrace&, Vector&)
 T CVomitParticle::Spawn()
 T CVomitParticle::~CVomitParticle()
 T CVomitStopAwardTemplate::CVomitStopAwardTemplate(int)
 T CVomitStopAwardTemplate::FireGameEvent(IGameEvent*)
 T CVomitStopAwardTemplate::OnCreate()
 T CVomitStopAwardTemplate::~CVomitStopAwardTemplate()
 T CVoteController::CanTeamCastVote(int) const
 T CVoteController::GetDataDescMap()
 T CVoteController::GetServerClass()
 T CVoteController::ResetData()
 T CVoteController::SendVoteFailedMessage(CBasePlayer*, vote_create_failed_t)
 T CVoteController::Spawn()
 T CVoteController::TryCastVote(int, char const*)
 T CVoteController::TryCreateVote(int, char const*, char const*)
 T CVoteController::UpdateTransmitState()
 T CVoteController::VoteControllerThink()
 T CVoteController::YouForgotToImplementOrDeclareServerClass()
 T CVoteController::~CVoteController()
 T CWC_UpdateIgnoreList::GetDataDescMap()
 T CWC_UpdateIgnoreList::~CWC_UpdateIgnoreList()
 T CWatcherList::AddToList(CBaseEntity*)
 T CWatcherList::NotifyPositionChanged(CBaseEntity*)
 T CWatcherList::NotifyVPhysicsStateChanged(IPhysicsObject*, CBaseEntity*, bool)
 T CWatcherList::~CWatcherList()
 T CWaterBullet::BulletThink()
 T CWaterBullet::GetDataDescMap()
 T CWaterBullet::GetServerClass()
 T CWaterBullet::Precache()
 T CWaterBullet::Touch(CBaseEntity*)
 T CWaterBullet::YouForgotToImplementOrDeclareServerClass()
 T CWaterBullet::~CWaterBullet()
 T CWaterLODControl::CWaterLODControl()
 T CWaterLODControl::GetDataDescMap()
 T CWaterLODControl::GetServerClass()
 T CWaterLODControl::KeyValue(char const*, char const*)
 T CWaterLODControl::ObjectCaps()
 T CWaterLODControl::Spawn()
 T CWaterLODControl::UpdateTransmitState()
 T CWaterLODControl::YouForgotToImplementOrDeclareServerClass()
 T CWaterLODControl::~CWaterLODControl()
 T CWeaponAmmoSpawn::GetDataDescMap()
 T CWeaponAmmoSpawn::GetServerClass()
 T CWeaponAmmoSpawn::GetWeaponID() const
 T CWeaponAmmoSpawn::GetWeaponModel() const
 T CWeaponAmmoSpawn::Spawn()
 T CWeaponAmmoSpawn::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CWeaponAmmoSpawn::YouForgotToImplementOrDeclareServerClass()
 T CWeaponAmmoSpawn::~CWeaponAmmoSpawn()
 T CWeaponCSBase::AddViewmodelBob(CBaseViewModel*, Vector&, QAngle&)
 T CWeaponCSBase::ArePlayerTouchesAllowed() const
 T CWeaponCSBase::AttemptToMaterialize()
 T CWeaponCSBase::BulletWasFired(Vector const&, Vector const&)
 T CWeaponCSBase::CWeaponCSBase()
 T CWeaponCSBase::CalcViewmodelBob()
 T CWeaponCSBase::CanBeDropped() const
 T CWeaponCSBase::CanBeSelected()
 T CWeaponCSBase::CanDeploy()
 T CWeaponCSBase::CanPlayerTouch(CCSPlayer*)
 T CWeaponCSBase::CanZoom() const
 T CWeaponCSBase::CheckRespawn()
 T CWeaponCSBase::CycleZoom()
 T CWeaponCSBase::DefaultDeploy(char*, char*, int, char*)
 T CWeaponCSBase::DefaultPistolReload()
 T CWeaponCSBase::DefaultReload(int, int, int)
 T CWeaponCSBase::DefaultTouch(CBaseEntity*)
 T CWeaponCSBase::Deploy()
 T CWeaponCSBase::DeployResetsAttackTime()
 T CWeaponCSBase::Drop(Vector const&)
 T CWeaponCSBase::GetBulletSpread()
 T CWeaponCSBase::GetCSWpnData() const
 T CWeaponCSBase::GetDataDescMap()
 T CWeaponCSBase::GetDefaultAnimSpeed()
 T CWeaponCSBase::GetDeployActivity()
 T CWeaponCSBase::GetMaxSpeed() const
 T CWeaponCSBase::GetServerClass()
 T CWeaponCSBase::GetViewModel(int) const
 T CWeaponCSBase::GetWeaponDeployActivity(PlayerAnimEvent_t, Activity)
 T CWeaponCSBase::GetWeaponFireActivity(PlayerAnimEvent_t, Activity)
 T CWeaponCSBase::GetWeaponID() const
 T CWeaponCSBase::GetWeaponReloadActivity(PlayerAnimEvent_t, Activity)
 T CWeaponCSBase::HasScope() const
 T CWeaponCSBase::HasSecondaryAttack()
 T CWeaponCSBase::Holster(CBaseCombatWeapon*)
 T CWeaponCSBase::IsAttacking() const
 T CWeaponCSBase::IsAwp() const
 T CWeaponCSBase::IsHelpingHandExtended() const
 T CWeaponCSBase::IsPredicted() const
 T CWeaponCSBase::IsRemoveable()
 T CWeaponCSBase::IsSilenced() const
 T CWeaponCSBase::ItemPostFrame()
 T CWeaponCSBase::KeyValue(char const*, char const*)
 T CWeaponCSBase::Materialize()
 T CWeaponCSBase::OnPickedUp(CBaseCombatCharacter*)
 T CWeaponCSBase::PhysicsSplash(Vector const&, Vector const&, float, float)
 T CWeaponCSBase::PlayEmptySound()
 T CWeaponCSBase::Precache()
 T CWeaponCSBase::Reload()
 T CWeaponCSBase::RemovalThink()
 T CWeaponCSBase::Respawn()
 T CWeaponCSBase::SecondaryAttack()
 T CWeaponCSBase::SendReloadEvents()
 T CWeaponCSBase::SendWeaponAnim(int)
 T CWeaponCSBase::SetWeaponModelIndex(char const*)
 T CWeaponCSBase::ShouldRemoveOnRoundRestart()
 T CWeaponCSBase::Spawn()
 T CWeaponCSBase::UpdateShieldState()
 T CWeaponCSBase::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CWeaponCSBase::WeaponTranslateMainActivity(Activity)
 T CWeaponCSBase::YouForgotToImplementOrDeclareServerClass()
 T CWeaponCSBase::~CWeaponCSBase()
 T CWeaponCSBaseGun::Deploy()
 T CWeaponCSBaseGun::DoFireEffects()
 T CWeaponCSBaseGun::GetNoiseFactor()
 T CWeaponCSBaseGun::GetServerClass()
 T CWeaponCSBaseGun::ItemPostFrame()
 T CWeaponCSBaseGun::PrimaryAttack()
 T CWeaponCSBaseGun::Reload()
 T CWeaponCSBaseGun::SetAccuracyForThisShot()
 T CWeaponCSBaseGun::Spawn()
 T CWeaponCSBaseGun::WeaponIdle()
 T CWeaponCSBaseGun::YouForgotToImplementOrDeclareServerClass()
 T CWeaponCSBaseGun::~CWeaponCSBaseGun()
 T CWeaponExpertAwardTemplate::CWeaponExpertAwardTemplate(int)
 T CWeaponExpertAwardTemplate::FireGameEvent(IGameEvent*)
 T CWeaponExpertAwardTemplate::OnCreate()
 T CWeaponExpertAwardTemplate::~CWeaponExpertAwardTemplate()
 T CWeaponHEGrenadeSpawn::GetWeaponClassname() const
 T CWeaponHEGrenadeSpawn::GetWeaponID() const
 T CWeaponHEGrenadeSpawn::GetWeaponModel() const
 T CWeaponHEGrenadeSpawn::~CWeaponHEGrenadeSpawn()
 T CWeaponLOSFilter::ShouldHitEntity(IHandleEntity*, int)
 T CWeaponList::LevelShutdownPostEntity()
 T CWeaponList::~CWeaponList()
 T CWeaponSpawn::AbsorbWeapon(CWeaponCSBase*)
 T CWeaponSpawn::CWeaponSpawn()
 T CWeaponSpawn::DoItemSpawnEvents()
 T CWeaponSpawn::GetDataDescMap()
 T CWeaponSpawn::GetServerClass()
 T CWeaponSpawn::GetUsePriority(CBaseEntity*)
 T CWeaponSpawn::GetUseType(CBaseEntity*)
 T CWeaponSpawn::GetWeaponClassname() const
 T CWeaponSpawn::GetWeaponID() const
 T CWeaponSpawn::GetWeaponModel() const
 T CWeaponSpawn::HasBloatedCollision() const
 T CWeaponSpawn::IsScavengeItem() const
 T CWeaponSpawn::MyTouch(CBasePlayer*)
 T CWeaponSpawn::ObjectCaps()
 T CWeaponSpawn::Precache()
 T CWeaponSpawn::Spawn()
 T CWeaponSpawn::Touch(CBaseEntity*)
 T CWeaponSpawn::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CWeaponSpawn::YouForgotToImplementOrDeclareServerClass()
 T CWeaponSpawn::~CWeaponSpawn()
 T CWeaponSpawnEnum::EnumElement(IHandleEntity*)
 T CWeaponautoshotgunSpawn::GetWeaponClassname() const
 T CWeaponautoshotgunSpawn::GetWeaponID() const
 T CWeaponautoshotgunSpawn::GetWeaponModel() const
 T CWeaponautoshotgunSpawn::~CWeaponautoshotgunSpawn()
 T CWeaponfirst_aid_kitSpawn::GetWeaponClassname() const
 T CWeaponfirst_aid_kitSpawn::GetWeaponID() const
 T CWeaponfirst_aid_kitSpawn::GetWeaponModel() const
 T CWeaponfirst_aid_kitSpawn::~CWeaponfirst_aid_kitSpawn()
 T CWeaponhunting_rifleSpawn::GetWeaponClassname() const
 T CWeaponhunting_rifleSpawn::GetWeaponID() const
 T CWeaponhunting_rifleSpawn::GetWeaponModel() const
 T CWeaponhunting_rifleSpawn::~CWeaponhunting_rifleSpawn()
 T CWeaponmolotovSpawn::GetWeaponClassname() const
 T CWeaponmolotovSpawn::GetWeaponID() const
 T CWeaponmolotovSpawn::GetWeaponModel() const
 T CWeaponmolotovSpawn::~CWeaponmolotovSpawn()
 T CWeaponpain_pillsSpawn::GetWeaponClassname() const
 T CWeaponpain_pillsSpawn::GetWeaponID() const
 T CWeaponpain_pillsSpawn::GetWeaponModel() const
 T CWeaponpain_pillsSpawn::~CWeaponpain_pillsSpawn()
 T CWeaponpipe_bombSpawn::GetWeaponClassname() const
 T CWeaponpipe_bombSpawn::GetWeaponID() const
 T CWeaponpipe_bombSpawn::GetWeaponModel() const
 T CWeaponpipe_bombSpawn::~CWeaponpipe_bombSpawn()
 T CWeaponpistolSpawn::GetWeaponClassname() const
 T CWeaponpistolSpawn::GetWeaponID() const
 T CWeaponpistolSpawn::GetWeaponModel() const
 T CWeaponpistolSpawn::~CWeaponpistolSpawn()
 T CWeaponpumpshotgunSpawn::GetWeaponClassname() const
 T CWeaponpumpshotgunSpawn::GetWeaponID() const
 T CWeaponpumpshotgunSpawn::GetWeaponModel() const
 T CWeaponpumpshotgunSpawn::~CWeaponpumpshotgunSpawn()
 T CWeaponrifleSpawn::GetWeaponClassname() const
 T CWeaponrifleSpawn::GetWeaponID() const
 T CWeaponrifleSpawn::GetWeaponModel() const
 T CWeaponrifleSpawn::~CWeaponrifleSpawn()
 T CWeaponsmgSpawn::GetWeaponClassname() const
 T CWeaponsmgSpawn::GetWeaponID() const
 T CWeaponsmgSpawn::GetWeaponModel() const
 T CWeaponsmgSpawn::~CWeaponsmgSpawn()
 T CWeightButton::CreateVPhysics()
 T CWeightButton::GetDataDescMap()
 T CWeightButton::Spawn()
 T CWeightButton::TriggerThink()
 T CWeightButton::~CWeightButton()
 T CWhiplashAwardTemplate::CWhiplashAwardTemplate(int)
 T CWhiplashAwardTemplate::FireGameEvent(IGameEvent*)
 T CWhiplashAwardTemplate::OnCreate()
 T CWhiplashAwardTemplate::~CWhiplashAwardTemplate()
 T CWindowPane::CreateWindowPane(Vector const&, QAngle const&)
 T CWindowPane::Die()
 T CWindowPane::GetDataDescMap()
 T CWindowPane::PaneTouch(CBaseEntity*)
 T CWindowPane::Precache()
 T CWindowPane::Spawn()
 T CWindowPane::~CWindowPane()
 T CWitchHarassmentAwardTemplate::CWitchHarassmentAwardTemplate(int)
 T CWitchHarassmentAwardTemplate::FireGameEvent(IGameEvent*)
 T CWitchHarassmentAwardTemplate::OnCreate()
 T CWitchHarassmentAwardTemplate::~CWitchHarassmentAwardTemplate()
 T CWitchSlayerAwardTemplate::CWitchSlayerAwardTemplate(int)
 T CWitchSlayerAwardTemplate::FireGameEvent(IGameEvent*)
 T CWitchSlayerAwardTemplate::OnCreate()
 T CWitchSlayerAwardTemplate::~CWitchSlayerAwardTemplate()
 T CWorld::CWorld()
 T CWorld::DecalTrace(CGameTrace*, char const*)
 T CWorld::GetDataDescMap()
 T CWorld::GetDisplayTitle() const
 T CWorld::GetServerClass()
 T CWorld::KeyValue(char const*, char const*)
 T CWorld::Precache()
 T CWorld::RequiredEdictIndex()
 T CWorld::SetDisplayTitle(bool)
 T CWorld::Spawn()
 T CWorld::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CWorld::VPhysicsFriction(IPhysicsObject*, float, int, int)
 T CWorld::YouForgotToImplementOrDeclareServerClass()
 T CWorld::~CWorld()
 T CWorldItem::GetDataDescMap()
 T CWorldItem::KeyValue(char const*, char const*)
 T CWorldItem::Spawn()
 T CWorldItem::~CWorldItem()
 T Calc3WayBlendIndices(int, int, float, float, mstudioseqdesc_t const&, int*, float*)
 T CalcAutoplaySequences(CStudioHdr const*, CIKContext*, Vector*, Quaternion*, float const*, int, float)
 T CalcBoneAdj(CStudioHdr const*, Vector*, Quaternion*, float const*, int)
 T CalcBoneDerivatives(Vector&, Vector&, matrix3x4_t const&, matrix3x4_t const&, float)
 T CalcBonePosition(int, float, Vector const&, Vector const&, mstudio_rle_anim_t const*, Vector&)
 T CalcBoneQuaternion(int, float, Quaternion const&, RadianEuler const&, Vector const&, int, Quaternion const&, mstudio_rle_anim_t const*, Quaternion&)
 T CalcClosestPointOnAABB(Vector const&, Vector const&, Vector const&, Vector&)
 T CalcClosestPointOnLine(Vector const&, Vector const&, Vector const&, Vector&, float*)
 T CalcClosestPointOnLineSegment(Vector const&, Vector const&, Vector const&, Vector&, float*)
 T CalcDistanceSqrToLine(Vector const&, Vector const&, Vector const&, float*)
 T CalcLeanViewOffset(Vector const&, QAngle const&, float, bool)
 T CalcLineToLineIntersectionSegment(Vector const&, Vector const&, Vector const&, Vector const&, Vector*, Vector*, float*, float*)
 T CalcPoseSingle(CStudioHdr const*, Vector*, QuaternionAligned*, mstudioseqdesc_t&, int, float, float const*, int, float)
 T CalcSqrDistanceToAABB(Vector const&, Vector const&, Vector const&)
 T CalculateBulletDamageForce(CTakeDamageInfo*, int, Vector const&, Vector const&, float)
 T CalculateDefaultPhysicsDamage(int, gamevcollisionevent_t*, float, bool, int&, string_t, bool)
 T CalculateExplosiveDamageForce(CTakeDamageInfo*, Vector const&, Vector const&, float)
 T CalculateMeleeDamageForce(CTakeDamageInfo*, Vector const&, Vector const&, float)
 T CalculateObjectStress(IPhysicsObject*, CBaseEntity*, vphysics_objectstress_t*)
 T CalculatePhysicsImpactDamage(int, gamevcollisionevent_t*, impactdamagetable_t const&, float, bool, int&, bool)
 T CanCausePlayerPhysicsDamage(CBaseEntity*)
 T CanEmitCaption(unsigned int)
 T CanOverrideEnvZoomOwner(CBaseEntity*)
 T CaptionLookup_t::SetHash(char const*)
 T CaselessStringLessThan(char const* const&, char const* const&)
 T Catmull_Rom_Spline(Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
 T Catmull_Rom_Spline_Normalize(Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
 T Catmull_Rom_Spline_NormalizeX(Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
 T Catmull_Rom_Spline_Tangent(Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
 T CauseNearbyCoughing::operator()(CBasePlayer*)
 T ChangelevelPlayerCollector::operator()(CBasePlayer*)
 T ChasePath::GetLeadRadius() const
 T ChasePath::GetLifetime() const
 T ChasePath::GetMaxPathLength() const
 T ChasePath::Invalidate()
 T ChasePath::IsRepathNeeded(INextBot*, CBaseEntity*) const
 T ChasePath::PredictSubjectPosition(INextBot*, CBaseEntity*) const
 T ChasePath::RefreshPath(INextBot*, CBaseEntity*, IPathCost const&, Vector*)
 T ChasePath::Update(INextBot*, CBaseEntity*, IPathCost const&, Vector*)
 T ChasePath::~ChasePath()
 T ChaseVictim::AvoidNeighbors(Infected*, CBaseEntity*)
 T ChaseVictim::ChaseVictim(InfectedAttack*)
 T ChaseVictim::GetName() const
 T ChaseVictim::IsAbleToBlockMovementOf(INextBot const*) const
 T ChaseVictim::OnAnimationEvent(Infected*, animevent_t*)
 T ChaseVictim::OnCommandAttack(Infected*, CBaseEntity*)
 T ChaseVictim::OnContact(Infected*, CBaseEntity*, CGameTrace*)
 T ChaseVictim::OnEnd(Infected*)
 T ChaseVictim::OnResume(Infected*, Action<Infected>*)
 T ChaseVictim::OnStart(Infected*, Action<Infected>*)
 T ChaseVictim::OnSuspend(Infected*, Action<Infected>*)
 T ChaseVictim::Update(Infected*, float)
 T ChaseVictim::~ChaseVictim()
 T CheckCliff(Vector const*, NavDirType, bool)
 T CheckForClimbableSurface(Vector const&, Vector const&)
 T Checkpoint::AddArea(TerrorNavArea*)
 T Checkpoint::AddSpawnArea(TerrorNavArea*)
 T Checkpoint::AreAllDoorsClosed() const
 T Checkpoint::ContainsArea(TerrorNavArea*) const
 T Checkpoint::FindInterestingLookAtTarget(Vector const&) const
 T Checkpoint::GetAreaFarthestFrom(Vector const&) const
 T Checkpoint::GetExtent() const
 T Checkpoint::GetLargestArea() const
 T Checkpoint::GetOpenDoor() const
 T Checkpoint::GetSpawnPosition(Vector*, QAngle*, TerrorNavArea**) const
 T Checkpoint::IsLocked() const
 T Checkpoint::LockAllDoors() const
 T Checkpoint::OnNavAreaRemoved(CNavArea*)
 T Checkpoint::OnRoundRestart()
 T Checkpoint::RespawnSurvivors() const
 T Checkpoint::Update()
 T Checkpoint::~Checkpoint()
 T CheckpointCollector::operator()(CNavArea*)
 T CheckpointDoorScan::EnumElement(IHandleEntity*)
 T ClassifyCorners(Vector*, Vector&, Vector&, Vector&, Vector&)
 T ClassifySniperSpot(HidingSpot*)
 T CleanupDMX(CDmxElement*)
 T ClearBounds(Vector&, Vector&)
 T ClearModelSoundsCache()
 T ClearMultiDamage()
 T ClearNonFinaleAreasOfNextBots::operator()(INextBot*)
 T ClearSpecTarget(CCommand const&)
 T ClearTransitionedLandmarkName()
 T ClientActive(edict_t*, bool)
 T ClientCommand(CBasePlayer*, CCommand const&)
 T ClientData_Update(CBasePlayer*)
 T ClientGamePrecache()
 T ClientPrecache()
 T ClientPrecachePrecache::CResourcePrecacher::Cache(bool, ResourceList_t__*, bool)
 T ClientPrint(CBasePlayer*, int, char const*, char const*, char const*, char const*, char const*)
 T ClientPutInServer(edict_t*, char const*)
 T ClientPutInServerOverride(CBasePlayer* (*)(edict_t*, char const*))
 T ClipTraceToTongue::ClipTongueSegment(CTongue*, Vector const&, Vector const&)
 T ClipTraceToTongue::ClipTraceToTongue(Vector const&, Vector const&)
 T ClipTraceToTongue::operator()(CTerrorPlayer*)
 T ClosestITSurvivorScan::operator()(CTerrorPlayer*)
 T ClosestPlayerScan::operator()(CBasePlayer*)
 T ClosestSurvivorScan::operator()(CTerrorPlayer*)
 T ClosestVisibleSurvivorScan::operator()(CTerrorPlayer*)
 T Cmd_FadeCrosshair_f(CCommand const&)
 T Cmd_ShowtriggersToggle_f(CCommand const&)
 T CollectActiveAreas::operator()(CNavArea*)
 T CollectNeighbors::operator()(CBaseCombatCharacter*)
 T CollectVisible::operator()(CBaseCombatCharacter*)
 T ColorCorrectionSystem()
 T CommandListIssues()
 T CommandNavAddToSelectedSet()
 T CommandNavAnalyze()
 T CommandNavAnalyzeScripted(CCommand const&)
 T CommandNavAvoid()
 T CommandNavBeginArea()
 T CommandNavBeginSelecting()
 T CommandNavBeginShiftXY()
 T CommandNavBuildLadder()
 T CommandNavCenterInWorld()
 T CommandNavCheckFileConsistency()
 T CommandNavClearSelectedSet()
 T CommandNavClearWalkableMarks()
 T CommandNavCompressID()
 T CommandNavConnect()
 T CommandNavCornerSelect()
 T CommandNavCrouch()
 T CommandNavDelete()
 T CommandNavDeleteMarked()
 T CommandNavDisconnect()
 T CommandNavDontHide()
 T CommandNavEndArea()
 T CommandNavEndSelecting()
 T CommandNavEndShiftXY()
 T CommandNavFogPick()
 T CommandNavGenerate()
 T CommandNavGenerateIncremental()
 T CommandNavJump()
 T CommandNavLadderFlip()
 T CommandNavLoad()
 T CommandNavMakeSniperSpots()
 T CommandNavMark(CCommand const&)
 T CommandNavMarkUnnamed()
 T CommandNavMarkWalkable()
 T CommandNavMerge()
 T CommandNavNoHostages()
 T CommandNavNoJump()
 T CommandNavPlaceFloodFill()
 T CommandNavPlaceList()
 T CommandNavPlacePick()
 T CommandNavPlaceReplace(CCommand const&)
 T CommandNavPlaceSet()
 T CommandNavPrecise()
 T CommandNavRecallSelectedSet()
 T CommandNavRemoveFromSelectedSet()
 T CommandNavRemoveJumpAreas()
 T CommandNavRun()
 T CommandNavSave()
 T CommandNavSelectCompletelyVisible()
 T CommandNavSelectInvalidAreas()
 T CommandNavSelectParitallyVisible()
 T CommandNavSelectThreat()
 T CommandNavSetPlaceMode(CCommand const&)
 T CommandNavShowLadderBounds()
 T CommandNavSplice()
 T CommandNavSplit()
 T CommandNavStand()
 T CommandNavStop()
 T CommandNavStoreSelectedSet()
 T CommandNavStrip()
 T CommandNavTestVisibility()
 T CommandNavToggleInSelectedSet()
 T CommandNavTogglePlaceMode()
 T CommandNavTogglePlacePainting()
 T CommandNavToggleSelectedSet()
 T CommandNavToggleSelecting()
 T CommandNavTransient()
 T CommandNavUnmark()
 T CommandNavUsePlace(CCommand const&)
 T CommandNavWalk()
 T CommandNavWarpToMark()
 T CommandSurvivorBotMoveToCursor()
 T CommentarySystem_PePlayerRunCommand(CBasePlayer*, CUserCmd*)
 T Commentary_AbortCurrentNode()
 T Commentary_IsCommentaryEntity(CBaseEntity*)
 T CommonInfectedCollector::operator()(INextBot*)
 T ComputeInterveningImpacts(BulletGroupTraceInfo_t const&, BulletTraceInfo_t const&, CGameTrace const&)
 T ComputeMovementPoseParams(CBaseAnimating*, int, int, float, float, float, Vector2D*)
 T ComputeRotSpeedToAlignAxes(Vector const&, Vector const&, Vector const&, float, float, float)
 T ComputeSeparatingPlane(Vector const&, QAngle const&, Vector const&, Vector const&, Vector const&, QAngle const&, Vector const&, Vector const&, float, cplane_t*)
 T ConCommand::AutoCompleteSuggest(char const*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >&)
 T ConCommand::CanAutoComplete()
 T ConCommand::ConCommand(char const*, ICommandCallback*, char const*, int, ICommandCompletionCallback*)
 T ConCommand::ConCommand(char const*, void (*)(), char const*, int, int (*)(char const*, char (*) [64]))
 T ConCommand::ConCommand(char const*, void (*)(CCommand const&), char const*, int, int (*)(char const*, char (*) [64]))
 T ConCommand::Dispatch(CCommand const&)
 T ConCommand::IsCommand() const
 T ConCommand::~ConCommand()
 T ConCommandBase::AddFlags(int)
 T ConCommandBase::Create(char const*, char const*, int)
 T ConCommandBase::GetDLLIdentifier() const
 T ConCommandBase::GetFlags() const
 T ConCommandBase::GetHelpText() const
 T ConCommandBase::GetName() const
 T ConCommandBase::Init()
 T ConCommandBase::IsFlagSet(int) const
 T ConCommandBase::IsRegistered() const
 T ConCommandBase::RemoveFlags(int)
 T ConVar::AddFlags(int)
 T ConVar::ChangeStringValue(char const*, float)
 T ConVar::ClampValue(float&)
 T ConVar::ConVar(char const*, char const*, int)
 T ConVar::ConVar(char const*, char const*, int, char const*)
 T ConVar::ConVar(char const*, char const*, int, char const*, bool, float, bool, float)
 T ConVar::ConVar(char const*, char const*, int, char const*, bool, float, bool, float, void (*)(IConVar*, char const*, float))
 T ConVar::ConVar(char const*, char const*, int, char const*, void (*)(IConVar*, char const*, float))
 T ConVar::Create(char const*, char const*, int, char const*, bool, float, bool, float, void (*)(IConVar*, char const*, float))
 T ConVar::GetBaseName() const
 T ConVar::GetDefault() const
 T ConVar::GetFlags() const
 T ConVar::GetHelpText() const
 T ConVar::GetName() const
 T ConVar::GetSplitScreenPlayerSlot() const
 T ConVar::Init()
 T ConVar::InternalSetFloatValue(float)
 T ConVar::InternalSetIntValue(int)
 T ConVar::InternalSetValue(char const*)
 T ConVar::IsCommand() const
 T ConVar::IsFlagSet(int) const
 T ConVar::IsRegistered() const
 T ConVar::Revert()
 T ConVar::SetValue(char const*)
 T ConVar::SetValue(float)
 T ConVar::SetValue(int)
 T ConVar::~ConVar()
 T ConVarRef::ConVarRef(IConVar*)
 T ConVarRef::ConVarRef(char const*)
 T ConVarRef::ConVarRef(char const*, bool)
 T ConVarRef::IsValid() const
 T ConVar_Register(int, IConCommandBaseAccessor*)
 T ConVar_Unregister()
 T ConcatTransforms(matrix3x4_t const&, matrix3x4_t const&, matrix3x4_t&)
 T ConcatTransforms_Aligned(matrix3x4_t const&, matrix3x4_t const&, matrix3x4_t&)
 T ConnectTier1Libraries(void* (**)(char const*, int*), int)
 T ConnectTier2Libraries(void* (**)(char const*, int*), int)
 T ConnectTier3Libraries(void* (**)(char const*, int*), int)
 T ConsiderRecognizedSet::operator()(CBaseEntity*, Vector const&, float)
 T ConsoleFireTargets(CBasePlayer*, char const*)
 T ConsoleKillTarget(CBasePlayer*, char const*)
 T CopyUniqueId(UniqueId_t const&, UniqueId_t*)
 T CountdownTimer::NetworkStateChanged()
 T CountdownTimer::NetworkStateChanged(void*)
 T CountdownTimer::Now() const
 T CreateBlackMarketString()
 T CreateBoneFollowersFromRagdoll(CBaseAnimating*, CBoneFollowerManager*, vcollide_t*)
 T CreateEntitiesInTransitionList(CSaveRestoreData*, int)
 T CreateEntityByName(char const*, int, bool)
 T CreateEntityTransitionList(CSaveRestoreData*, int)
 T CreateExplosion(CTakeDamageInfo const&, float, float, ExplosionFxType)
 T CreateGameRulesObject(char const*)
 T CreateInfoTransitioningPlayers()
 T CreateInterface
 T CreateKeepUpright(Vector const&, QAngle const&, CBaseEntity*, float, bool)
 T CreateNetworkStringTables_GameRules()
 T CreatePlayerAnimState(CBaseAnimatingOverlay*, ICSPlayerAnimStateHelpers*, LegAnimType_t, bool)
 T CreateRagGib(char const*, Vector const&, QAngle const&, Vector const&, float, bool)
 T CreateServerRagdoll(CBaseAnimating*, int, CTakeDamageInfo const&, int, bool)
 T CreateServerRagdollAttached(CBaseAnimating*, Vector const&, int, int, IPhysicsObject*, CBaseAnimating*, int, Vector const&, int, Vector const&)
 T CreateServerRagdollSubmodel(CBaseAnimating*, char const*, Vector const&, QAngle const&, int)
 T CreateUniqueId(UniqueId_t*)
 T CreateVGuiScreen(char const*, char const*, CBaseEntity*, CBaseEntity*, int)
 T CreateWeaponInfo()
 T CreateWeaponManager(char const*, int)
 T Criteria::Criteria(Criteria const&)
 T Criteria::operator=(Criteria const&)
 T CrossProduct(float const*, float const*, float*)
 T Cubic_Spline_NormalizeX(Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
 T DMXAlloc(unsigned long)
 T DangerousZombieScan::operator()(CBaseCombatCharacter*)
 T DebugConstraint(CBaseEntity*)
 T DebugDrawContactPoints(IPhysicsObject*)
 T DebugDrawLine(Vector const&, Vector const&, int, int, int, bool, float)
 T DebugFireFailure(CTerrorPlayer*, char const*)
 T DebugIntensity::operator()(CTerrorPlayer*)
 T DebugMoveTo::DebugMoveTo(Vector const&)
 T DebugMoveTo::GetName() const
 T DebugMoveTo::IsAbleToBlockMovementOf(INextBot const*) const
 T DebugMoveTo::OnContact(Infected*, CBaseEntity*, CGameTrace*)
 T DebugMoveTo::OnStart(Infected*, Action<Infected>*)
 T DebugMoveTo::Update(Infected*, float)
 T DebugMoveTo::~DebugMoveTo()
 T DecommitDMXMemory()
 T DefaultCompletionFunc(char const*, char (*) [64])
 T DescribeSubject(CBaseEntity*)
 T DestroyVGuiScreen(CVGuiScreen*)
 T DetachAttachedRagdollsForEntity(CBaseEntity*)
 T DirectChasePath::ComputeAreaCrossing(INextBot*, CNavArea const*, Vector const&, CNavArea const*, NavDirType, Vector*) const
 T DirectChasePath::DirectChase(bool*, Vector*, INextBot*, CBaseEntity*)
 T DirectChasePath::IsRepathNeeded(INextBot*, CBaseEntity*) const
 T DirectChasePath::NotifyVictim(INextBot*, CBaseEntity*)
 T DirectChasePath::Update(INextBot*, CBaseEntity*, IPathCost const&, Vector*)
 T DirectChasePath::~DirectChasePath()
 T Director::AddSpawnedItemsToList(Director::ItemPopulationInfo*, CUtlVector<Director::ItemLocationInfo, CUtlMemory<Director::ItemLocationInfo, int> >&)
 T Director::AddSurvivorBot(SurvivorCharacterType) const
 T Director::AddSurvivorBot(char const*) const
 T Director::AreAllSurvivorsInBattlefield() const
 T Director::AreAllSurvivorsInFinaleArea() const
 T Director::AreGhostsAllowedInFinale() const
 T Director::AreHumanZombiesAllowed() const
 T Director::AreWanderersAllowed() const
 T Director::AuditActivePipeBombs()
 T Director::CalcFinaleProgress() const
 T Director::CalculateScavengeWalkableArea()
 T Director::Chapter_VersusBossSpawning(KeyValues*, float&, float&, float&, float&, bool&)
 T Director::CheckConvarForcedRestart()
 T Director::CheckForDeadPlayers()
 T Director::CollateEncounters(Director::ItemPopulationInfo*, bool)
 T Director::CollectAllScavengeItemLocations()
 T Director::CollectHealingItems()
 T Director::CollectItemLocations(char const*, Director::ItemPopulationInfo*, bool)
 T Director::CollectPropPhysicsLocations(char const*, Director::ItemPopulationInfo*)
 T Director::CompareFlow(Director::HealingItemInfo const*, Director::HealingItemInfo const*)
 T Director::ConvertPillsToKits()
 T Director::ConvertPillsToKits_Versus()
 T Director::CreateHoldoutSpecials()
 T Director::CreateMobs()
 T Director::CreateRescuableSurvivors()
 T Director::CreateSpecials()
 T Director::CreateTanks()
 T Director::DLC3FinalePanicEvent()
 T Director::DLC3FinaleSpawnTankForState(Director::FinaleStageType)
 T Director::Director()
 T Director::DrawDebug()
 T Director::DrawScavengeItems(char const*, Director::ItemPopulationInfo*)
 T Director::EndScenario(ScenarioRestartReason)
 T Director::EndVersusModeRound(bool)
 T Director::FadeOutOnAllTanksDead(CBaseEntity*)
 T Director::FadeOutQueuedEntities()
 T Director::FinishScenarioExit()
 T Director::FireGameEvent(IGameEvent*)
 T Director::FixupMapRescueClosets()
 T Director::ForceVersusStart()
 T Director::GetBossThreatSpawnAllowedTypes(bool&, bool&) const
 T Director::GetBossThreatSpawnSeperation(float&, float&, float&) const
 T Director::GetClosestActivePipeBomb(Vector const&) const
 T Director::GetClosestSurvivor(CBaseCombatCharacter const*, bool, bool) const
 T Director::GetClosestSurvivor(Vector const&, bool, bool) const
 T Director::GetClosestSurvivorWhoIsIT(CBaseCombatCharacter const*) const
 T Director::GetCommonInfectedCount(Director::CommonInfectedCountType) const
 T Director::GetForbiddenTargets() const
 T Director::GetHighestFlowSurvivor(TerrorNavArea::FlowType) const
 T Director::GetHunterAttackDamage() const
 T Director::GetLowestFlowSurvivor() const
 T Director::GetMapTankModelVariant(char*, int) const
 T Director::GetMaxPlayerZombies() const
 T Director::GetMissionWipes() const
 T Director::GetOpponentProgress() const
 T Director::GetPlayerCount(int, Director::PlayerCountType) const
 T Director::GetPopulationData()
 T Director::GetRandomSurvivor() const
 T Director::GetSpecialZombiesInRange(float, CUtlVector<float, CUtlMemory<float, int> >&, CUtlVector<CTerrorPlayer*, CUtlMemory<CTerrorPlayer*, int> >&, CBaseEntity*) const
 T Director::GetTankDamage(CBaseEntity*) const
 T Director::GetTankHealth() const
 T Director::GetTimeUntilNextGhostWave(float)
 T Director::GetTimeUntilTeamReady() const
 T Director::GetTotalElapsedMissionTime() const
 T Director::GetVersusBossSpawningParams(float&, float&, float&, float&, bool&)
 T Director::GetZombieAttackDamage(CTerrorPlayer*) const
 T Director::GetZombieBreakableDamage() const
 T Director::HasAnySurvivorLeftSafeArea()
 T Director::InitVersusBossSpawning()
 T Director::InitializeRoundScavengeItems()
 T Director::IsAllBotGame() const
 T Director::IsAnySurvivorBypassingTank() const
 T Director::IsAnySurvivorInCombat() const
 T Director::IsAnySurvivorInExitCheckpoint() const
 T Director::IsAnySurvivorInStartArea() const
 T Director::IsAtSurvivorBotMinimum() const
 T Director::IsBackgroundMap() const
 T Director::IsClassAllowed(ZombieClassType) const
 T Director::IsDLC3Finale() const
 T Director::IsDLC3FinaleInLull() const
 T Director::IsDLC3FinaleLost() const
 T Director::IsDLC3FinaleOver() const
 T Director::IsDLC3FinaleWaitingForTanks() const
 T Director::IsDLC3FinaleWon() const
 T Director::IsFinaleEscapeInProgress() const
 T Director::IsFinaleVehicleReady() const
 T Director::IsFinaleWon() const
 T Director::IsHoldoutMode() const
 T Director::IsInTransition() const
 T Director::IsInfectedModelAllowedInLowViolence(char const*) const
 T Director::IsPlayingIntro() const
 T Director::IsSoloGame() const
 T Director::IsTeamFull(int, Director::PlayerCountType) const
 T Director::IsTransitionScenarioRestart() const
 T Director::IsTransitioned() const
 T Director::IsVisibleToTeam(CBaseEntity const*, int, int, float, TerrorNavArea*) const
 T Director::IsVisibleToTeam(Vector const&, int, int, float, TerrorNavArea*, CBaseEntity const*) const
 T Director::IsWaitingForTeamReady() const
 T Director::IsWeaponAllowed(CWeaponSpawn*) const
 T Director::JoinNewPlayer(Director::NewPlayerType&)
 T Director::LogBossThreatSpawn(char const*)
 T Director::LogScavengeItems(char const*)
 T Director::MakeLowViolenceServer()
 T Director::NewPlayerFindAndPossessBot(Director::NewPlayerType&)
 T Director::NewPlayerPossessBot(Director::NewPlayerType&, SurvivorBot*)
 T Director::OnBeginChangeLevel()
 T Director::OnBeginTransition(bool, KeyValues*)
 T Director::OnChangeChapterVote(char const*)
 T Director::OnChangeMissionVote(char const*)
 T Director::OnCheckpointReached()
 T Director::OnDLC3FinaleAdvanceState()
 T Director::OnDLC3FinaleStarted()
 T Director::OnFinaleEscapeFinished()
 T Director::OnFinaleEscapeForceSurvivorPositions(CUtlVector<CTerrorPlayer*, CUtlMemory<CTerrorPlayer*, int> > const&)
 T Director::OnFinaleEscapeVehicleReady()
 T Director::OnFinalePause()
 T Director::OnFinaleStarted()
 T Director::OnFinaleWon()
 T Director::OnFirstSurvivorLeftSafeArea(CTerrorPlayer*)
 T Director::OnFlowDistancesInitialized(TerrorNavArea*)
 T Director::OnFlowDistancesRecomputed(TerrorNavArea*)
 T Director::OnForceSurvivorPositions(CUtlVector<CTerrorPlayer*, CUtlMemory<CTerrorPlayer*, int> > const&)
 T Director::OnHealthCabinetOpened(CBaseEntity*)
 T Director::OnHoldoutStarted(Director::HoldoutTriggerType)
 T Director::OnLevelInitPreEntity()
 T Director::OnMapInvokedPanicEvent(int, CBasePlayer*)
 T Director::OnMapLoaded()
 T Director::OnMissionStart()
 T Director::OnMobRushStart()
 T Director::OnNavAreaRemoved(TerrorNavArea*)
 T Director::OnPlayerConnected(CTerrorPlayer*)
 T Director::OnPlayerDeath(CTerrorPlayer*)
 T Director::OnPlayerDisconnected(CTerrorPlayer*)
 T Director::OnPlayerFullyConnected(CTerrorPlayer*)
 T Director::OnPlayerNavAreaChanged(CTerrorPlayer*, CNavArea*, CNavArea*)
 T Director::OnPlayerTransitioned()
 T Director::OnRoundStart()
 T Director::OnServerShutdown()
 T Director::OnSurvivorAdded(CTerrorPlayer*)
 T Director::OnSurvivorRemoved(CTerrorPlayer*)
 T Director::OnTeamChanged(CTerrorPlayer*, int)
 T Director::OnThreatEncountered(TerrorNavArea*)
 T Director::OnWitchAdded(Infected*)
 T Director::OnWitchRemoved(Infected*)
 T Director::OnZombieAdded(CTerrorPlayer*)
 T Director::OnZombieRemoved(CTerrorPlayer*)
 T Director::PlayerAvatarGet(edict_t*)
 T Director::PlayerAvatarResetAll()
 T Director::PlayerAvatarSet(edict_t*, KeyValues*)
 T Director::PlayerAvatarUnpack(KeyValues*, int&, SurvivorCharacterType&)
 T Director::PopulateAllItems_Random(float)
 T Director::PopulateAllItems_Recorded()
 T Director::PopulateItems_Random(CUtlVector<Director::ItemLocationInfo*, CUtlMemory<Director::ItemLocationInfo*, int> >*, int)
 T Director::PopulateItems_Recorded(CUtlVector<Director::ItemLocationInfo*, CUtlMemory<Director::ItemLocationInfo*, int> >*)
 T Director::PopulateWorldWithScavengeItems()
 T Director::ProcessTransitionRestoration()
 T Director::QueueEntitiesToFadeOut()
 T Director::RecordScavengeItemLocations()
 T Director::RegisterForbiddenTarget(CBaseEntity*)
 T Director::Reset()
 T Director::ResetResponseContexts()
 T Director::Restart()
 T Director::RestartHoldoutRound()
 T Director::RestartScenarioFromVote(char const*)
 T Director::RestartVsMode()
 T Director::RunItemSpawnOutputs()
 T Director::SendInRescueVehicle()
 T Director::SetDLC3ChaseTanksEnabled(bool)
 T Director::SetDLC3FinaleLost(bool)
 T Director::SetDLC3FinaleWon(bool)
 T Director::SetEscapeEnabled(bool)
 T Director::SetLotteryTank(CBaseEntity*, bool)
 T Director::ShuffleThreatRoster(ZombieClassType)
 T Director::SortItemLocationInfoByFlowDistance(Director::ItemLocationInfo const*, Director::ItemLocationInfo const*)
 T Director::SortNavAreaByFlowDistance(TerrorNavArea* const*, TerrorNavArea* const*)
 T Director::StartHoldoutPanicEvent()
 T Director::StartPanicEvent(int, CBasePlayer*)
 T Director::StartScenarioExit()
 T Director::SurvivorsCanLevelChange()
 T Director::SurvivorsReachedChangelevel()
 T Director::TryOfferingTankBot(CBaseEntity*, bool)
 T Director::TryOfferingTankFromLastMap()
 T Director::TryToStartSurvivorRescue(bool, CTerrorPlayer*)
 T Director::TryToTakeOverCharacter(Director::NewPlayerType&, SurvivorCharacterType)
 T Director::UnfreezeTeam()
 T Director::UnregisterForbiddenTarget(CBaseEntity*)
 T Director::Update()
 T Director::UpdateDLC3Finale()
 T Director::UpdateDLC3FinaleFailureConditions()
 T Director::UpdateDLC3FinaleTankStatus()
 T Director::UpdateDisconnectedPlayers()
 T Director::UpdateFinale()
 T Director::UpdateHoldout()
 T Director::UpdateMapScores()
 T Director::UpdateMusic()
 T Director::UpdateNewPlayers()
 T Director::UpdatePanicEvents()
 T Director::UpdatePlaytestSetup()
 T Director::UpdateScenarioState()
 T Director::UpdateTeamReadiness()
 T Director::UpdateTeams(Director::TeamUpdateType)
 T Director::UpdateTestLoop()
 T Director::UpdateVersusBossSpawning()
 T Director::WriteScavengeItemsToLog(void*, char const*, Director::ItemPopulationInfo*, float, float)
 T Director::~Director()
 T DisableManualSpawnOverride()
 T DisableNoClip(CBasePlayer*)
 T DisconnectTier1Libraries()
 T DisconnectTier2Libraries()
 T DisconnectTier3Libraries()
 T DispatchEffect(IRecipientFilter&, float, char const*, CEffectData const&)
 T DispatchEffect(char const*, CEffectData const&)
 T DispatchParticleEffect(char const*, ParticleAttachment_t, CBaseEntity*, int, bool, int)
 T DispatchParticleEffect(char const*, Vector, QAngle, CBaseEntity*, bool, int)
 T DispatchParticleEffect(char const*, Vector, Vector, QAngle, CBaseEntity*, bool, int)
 T DispatchResponseToSurvivors::operator()(CBasePlayer*)
 T DispatchResponseToSurvivorsWithVisibility::operator()(CBasePlayer*)
 T DispatchSpawn(CBaseEntity*)
 T DistanceToRay(Vector const&, Vector const&, Vector const&, float*, Vector*)
 T DmxElementUnpackStructure_t* DmxElementUnpackInit<CParticleSystemDefinition>(CParticleSystemDefinition*)
 T DoSpark(CBaseEntity*, Vector const&, int, int, bool, Vector const&)
 T DoorUnlockedFilter(CBaseEntity*, CBasePlayer*)
 T DrawAllDebugOverlays()
 T DrawMessageEntities()
 T DropToGround(CBaseEntity*, Vector const&, Vector const&, Vector const&)
 T DumpAchievementCounters(CCommand const&)
 T DumpData::operator()(CTerrorPlayer*)
 T DumpEntityFactories_f()
 T DustTrail::DustTrail()
 T DustTrail::GetDataDescMap()
 T DustTrail::GetServerClass()
 T DustTrail::KeyValue(char const*, char const*)
 T DustTrail::YouForgotToImplementOrDeclareServerClass()
 T DustTrail::~DustTrail()
 T EditNav_PrecachePrecache::CResourcePrecacher::Cache(bool, ResourceList_t__*, bool)
 T Editor_RotateEntity(char const*, float, float, float, QAngle const&, bool)
 T Editor_SetKeyValue(char const*, float, float, float, char const*, char const*, bool)
 T EffectsPrecachePrecache::CResourcePrecacher::Cache(bool, ResourceList_t__*, bool)
 T ElevatorPlayerCollector::operator()(CBasePlayer*)
 T EmitSound_t::EmitSound_t(CSoundParameters const&)
 T EnableManualSpawnOverride()
 T EnableNoClip(CBasePlayer*)
 T EndDMXContext(bool)
 T EndRestoreEntities()
 T EnsureTeamSize::OnEndIteration(bool)
 T EnsureTeamSize::operator()(CBasePlayer*)
 T EntireTeamCheck::operator()(CBasePlayer*)
 T EntityFactoryDictionary()
 T EntityMatrix::InitFromEntity(CBaseEntity*, int)
 T EntityMatrix::InitFromEntityLocal(CBaseEntity*)
 T EntityMessageBegin(CBaseEntity*, bool)
 T EntityParticleTrailInfo_t::EntityParticleTrailInfo_t()
 T EntityParticleTrailInfo_t::NetworkStateChanged()
 T EntityParticleTrailInfo_t::NetworkStateChanged(void*)
 T EntityPhysics_CreateSolver(CBaseEntity*, CBaseEntity*, bool, float)
 T EntityPlacementTest(CBaseEntity*, Vector const&, Vector&, bool, unsigned int, ITraceFilter*)
 T EntityTouch_Add(CBaseEntity*)
 T EscapeFlamesScan::operator()(CNavArea*)
 T EscapeScan::EscapeScan(BossZombiePlayerBot*)
 T EscapeScan::operator()(CNavArea*)
 T EventGroup::EventGroup(EventGroup const&)
 T EventList_AddEventEntry(char const*, int, bool, int)
 T EventList_Free()
 T EventList_GetEventType(int)
 T EventList_IndexForName(char const*)
 T EventList_Init()
 T EventList_NameForIndex(int)
 T EventList_RegisterPrivateEvent(char const*)
 T EventList_RegisterSharedEvents()
 T ExplosionCreate(Vector const&, QAngle const&, CBaseEntity*, int, int, bool, float, bool, bool, int)
 T ExplosionCreate(Vector const&, QAngle const&, CBaseEntity*, int, int, int, float, CBaseEntity*, int, CHandle<CBaseEntity> const*, Class_T)
 T ExposedAreaCollector::operator()(TerrorNavArea*)
 T ExtractAnimValue(int, mstudioanimvalue_t*, float, float&, float&)
 T ExtractBbox(CStudioHdr*, int, Vector&, Vector&)
 T ExtractKeyvalue(void*, typedescription_t*, int, char const*, char*, int)
 T ExtractSingleFrame(unsigned char, unsigned char*&, unsigned char*&, Quaternion&, Vector&, bool, mstudiolinearbone_t const*, int)
 T ExtractTwoFrames(unsigned char, float, unsigned char*&, unsigned char*&, int, Quaternion&, Vector&, bool, mstudiolinearbone_t const*, int)
 T FactoryList_Retrieve(factorylist_t&)
 T FactoryList_Store(factorylist_t const&)
 T FallingDamageForSpeed(float)
 T FarthestSurvivorScan::operator()(CTerrorPlayer*)
 T FastCos(float)
 T FileWeaponInfo_t::FileWeaponInfo_t()
 T FileWeaponInfo_t::Parse(KeyValues*, char const*)
 T FilterDamageType::GetDataDescMap()
 T FilterDamageType::PassesDamageFilterImpl(CTakeDamageInfo const&)
 T FilterDamageType::PassesFilterImpl(CBaseEntity*, CBaseEntity*)
 T FilterDamageType::~FilterDamageType()
 T FilterInfectedClass::GetDataDescMap()
 T FilterInfectedClass::PassesFilterImpl(CBaseEntity*, CBaseEntity*)
 T FilterInfectedClass::~FilterInfectedClass()
 T FilterTeam::GetDataDescMap()
 T FilterTeam::PassesFilterImpl(CBaseEntity*, CBaseEntity*)
 T FilterTeam::~FilterTeam()
 T FinaleLossSetup::FinaleLossSetup()
 T FinaleLossSetup::operator()(CTerrorPlayer*)
 T FinaleRescuableSurvivor::operator()(CTerrorPlayer*)
 T FinaleStageMusic::FinaleStageMusic(Director::FinaleStageType)
 T FinaleStageMusic::operator()(CTerrorPlayer*)
 T FindBodygroupByName(CStudioHdr*, char const*)
 T FindBotSpectator::operator()(CTerrorPlayer*)
 T FindEmptySpace(CBaseEntity*, unsigned int, Vector const&, Vector const&, Vector const&, Vector*)
 T FindEmptySpace(CBaseEntity*, unsigned int, Vector const&, Vector*)
 T FindEntityClassForward(CBasePlayer*, char*)
 T FindEntityForward(CBasePlayer*, bool)
 T FindFriendInDanger::operator()(CTerrorPlayer*)
 T FindGhostSpawnPosition(CTerrorPlayer*, CTerrorPlayer*, float)
 T FindGroundZFromPoint(Vector const&, Vector const&)
 T FindHitboxSetByName(CStudioHdr*, char const*)
 T FindInList(char const**, char const*)
 T FindLineOfScrimmage(float, bool, Vector*, QAngle*)
 T FindMaxContact(IPhysicsObject*, float, IPhysicsObject**, Vector*, Vector*)
 T FindNearbySpawnSpot(CTerrorPlayer*, Vector*, int, bool, float)
 T FindNearbyTongue::operator()(CBasePlayer*)
 T FindPhysicsAnchor(string_t, hl_constraint_info_t&, int, CBaseEntity*)
 T FindPhysicsObjectByName(char const*, CBaseEntity*)
 T FindPickerEntity(CBasePlayer*)
 T FindPickerEntityClass(CBasePlayer*, char*)
 T FindPooledString(char const*)
 T FindSafeStandingPosition(CTerrorPlayer*, Vector const&, TerrorNavArea*)
 T FindTransitionSequence(CStudioHdr*, int, int, int*)
 T FindWeaponSpawnLookAtAngles(Vector const&, QAngle*)
 T FireSystem_AddHeatInRadius(Vector const&, float, float)
 T FireTargets(char const*, CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T FireTerrorBullets(int, Vector const&, QAngle const&, CSWeaponID, int, int, float)
 T FixPlayerCrouchStuck(CBasePlayer*)
 T FixupAngles(QAngle&)
 T FloodSelectCollector::FloodSelectCollector(TerrorNavArea*, unsigned int, unsigned int, unsigned int, float, float, float)
 T FloodSelectCollector::operator()(CNavArea*)
 T FogSystem()
 T FoundryHelpers_ClearEntityHighlightEffects()
 T FreeContainingEntity(edict_t*)
 T FriendThreatenedScan::operator()(CBaseCombatCharacter*)
 T Gain(float, float)
 T GameLogSystem()
 T GameStartFrame()
 T GameStringSystem()
 T Game_SetOneWayTransition()
 T GammaToLinear(float)
 T GetAchievementSaveRestoreBlockHandler()
 T GetAllChildren(CBaseEntity*, CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >&)
 T GetAllInHierarchy(CBaseEntity*, CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >&)
 T GetAmmoDef()
 T GetAnimationEvent(CStudioHdr*, int, animevent_t*, float, float, int)
 T GetAttachmentLocalSpace(CStudioHdr*, int, matrix3x4_t&)
 T GetAutoMultiplayerPhysicsMode(Vector, float)
 T GetBodygroup(CStudioHdr*, int, int)
 T GetBodygroupCount(CStudioHdr*, int)
 T GetBodygroupPartName(CStudioHdr*, int, int)
 T GetBreakableDamage(CTakeDamageInfo const&, IBreakableWithPropData*)
 T GetCSLevelIndex(char const*)
 T GetCStringCharConversion()
 T GetCaptionHash(char const*, bool, unsigned int&)
 T GetCharacterFromModel(char const*)
 T GetCharacterFromName(char const*)
 T GetClientColor(CTerrorPlayer*)
 T GetCommentarySaveRestoreBlockHandler()
 T GetConstraintAttachments(CBaseEntity*, CBaseEntity**, IPhysicsObject**)
 T GetCrosshairOrNamedEntities(CCommand const&, CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >&)
 T GetCurrentSkyCamera()
 T GetDeathPoseActivity(CBaseAnimating*, CTakeDamageInfo const&, bool)
 T GetDebugHistory()
 T GetDefaultLightstyleString(int)
 T GetDefaultResponseSystemSaveRestoreBlockHandler()
 T GetDifficulty()
 T GetDifficultyString(DifficultyType)
 T GetEffectIndex(char const*)
 T GetEntitySaveRestoreBlockHandler()
 T GetEventQueueSaveRestoreBlockHandler()
 T GetEyePosition(CStudioHdr*, Vector&)
 T GetFileWeaponInfoFromHandle(unsigned short)
 T GetGameDescription()
 T GetGameModeString(GameMode)
 T GetGlobalTeam(int)
 T GetHidingSpotByID(unsigned int)
 T GetInterpolationData(float const*, float const*, int, int, float, bool, float*, float*, float*)
 T GetInvalidWeaponInfoHandle()
 T GetMPConceptIndexFromString(char const*)
 T GetMapInfo()
 T GetMassEquivalent(float)
 T GetMaterialIndex(char const*)
 T GetMaterialNameFromIndex(int)
 T GetMaterialParameters(int, float&, float&)
 T GetNextCommandEntity(CBasePlayer*, char const*, CBaseEntity*)
 T GetNoEscCharConversion()
 T GetNumBodyGroups(CStudioHdr*)
 T GetNumPlayersForMode(GameMode)
 T GetNumberOfTeams()
 T GetParticleManifest(CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >&)
 T GetParticleSystemIndex(char const*)
 T GetPhysObjSaveRestoreOps(PhysInterfaceId_t)
 T GetPhysSaveRestoreBlockHandler()
 T GetPlayerSpawnPosition(SurvivorCharacterType, Vector*, QAngle*, TerrorNavArea**)
 T GetPlayerViewOffset(CTerrorPlayer*, bool)
 T GetPushawayEnts(CBaseCombatCharacter*, CBaseEntity**, int, float, int, CPushAwayEnumerator*)
 T GetRecentNPCSpeech(recentNPCSpeech_t*)
 T GetSavedSurvivorBotCount()
 T GetScavengeItemDebugName(CBaseEntity*)
 T GetScavengeItemType(CBaseEntity*)
 T GetScavengeItemTypeName(ScavengeItemType)
 T GetSceneDuration(char const*)
 T GetSceneManager()
 T GetSceneSpeechCount(char const*)
 T GetSequenceActivity(CStudioHdr*, int, int*)
 T GetSequenceActivityName(CStudioHdr*, int)
 T GetSequenceFlags(CStudioHdr*, int)
 T GetSequenceLinearMotion(CStudioHdr*, int, float const*, Vector*)
 T GetSequenceName(CStudioHdr*, int)
 T GetSkyCameraList()
 T GetSoundSaveRestoreOps()
 T GetSpringAttachments(CBaseEntity*, CBaseEntity**, IPhysicsObject**)
 T GetTeamName(int)
 T GetTemplateSaveRestoreBlockHandler()
 T GetTerrainAmbientLightAtPoint(Vector const&, Vector*, CBaseAnimating*)
 T GetTransitionedLandmarkName()
 T GetTransitionedLandmarkOffset()
 T GetUpgradeInfo(SurvivorUpgradeType)
 T GetUseTypeForWeapon(CBaseEntity*, CSWeaponID, int, int, CSWeaponID*)
 T GetVoiceGameMgr()
 T GetWeaponIDFromEntity(CBaseEntity*)
 T GetWeaponInfo(CSWeaponID)
 T GetWeaponProficiencyName(WeaponProficiency_t)
 T GetWorldEntity()
 T GetWorldFogParams(CBaseCombatCharacter*, fogparams_t&)
 T GetZombieClassFromName(char const*)
 T GhostPreferenceSort(CTerrorPlayer* const*, CTerrorPlayer* const*)
 T GhostProximityScan::operator()(CTerrorPlayer*)
 T GhostSpawnCollector::GhostSpawnCollector()
 T GhostSpawnCollector::Sort()
 T GhostSpawnCollector::operator()(CTerrorPlayer*)
 T Give(CCommand const&)
 T GiveAutocomplete(char const*, char (*) [64])
 T GlobalEntity_Add(char const*, char const*, GLOBALESTATE)
 T GlobalEntity_AddToCounter(int, int)
 T GlobalEntity_EnableStateUpdates(bool)
 T GlobalEntity_GetCounter(int)
 T GlobalEntity_GetIndex(char const*)
 T GlobalEntity_GetMap(int)
 T GlobalEntity_GetName(int)
 T GlobalEntity_GetNumGlobals()
 T GlobalEntity_GetState(int)
 T GlobalEntity_SetCounter(int, int)
 T GlobalEntity_SetMap(int, string_t)
 T GlobalEntity_SetState(int, GLOBALESTATE)
 T GotoSequence(CStudioHdr*, int, float, float, int, int&, float&, int&)
 T GuessDamageForce(CTakeDamageInfo*, Vector const&, Vector const&, float)
 T HLTVDirector()
 T HLTVDirectorSystem()
 T Hack_FixEscapeChars(char*)
 T HandleFoundryEntitySpawnRecords()
 T HapticProcessSound(char const*, int)
 T HapticSendWeaponAnim(CBaseCombatWeapon*, int)
 T HapticSetDrag(CBasePlayer*, float)
 T Hash4(void const*)
 T HashInt(int)
 T HashString(char const*)
 T HashStringCaseless(char const*)
 T Hermite_Spline(Quaternion const&, Quaternion const&, Quaternion const&, float, Quaternion&)
 T Hermite_Spline(Vector const&, Vector const&, Vector const&, float, Vector&)
 T HidingSpot::HidingSpot()
 T HidingSpot::Load(CUtlBuffer&, unsigned int)
 T HidingSpot::PostLoad()
 T HidingSpot::Save(CUtlBuffer&, unsigned int) const
 T HidingSpot::~HidingSpot()
 T HighestFlowDistance::operator()(CTerrorPlayer*)
 T HintClear()
 T HitAnnouncement::operator()(CTerrorPlayer*)
 T Host_Say(edict_t*, CCommand const&, bool)
 T HulkSmashableEnumerator::EnumElement(IHandleEntity*)
 T HulkSmashableEnumerator::TrackHit(CBaseEntity*)
 T Hunter* NextBotCreatePlayerBot<Hunter>(char const*)
 T Hunter::AllocatePlayerEntity(edict_t*, char const*)
 T Hunter::CanBeA(ZombieClassType) const
 T Hunter::GetBodyInterface() const
 T Hunter::GetDataDescMap()
 T Hunter::GetEntity() const
 T Hunter::GetIntentionInterface() const
 T Hunter::GetLocomotionInterface() const
 T Hunter::GetServerClass()
 T Hunter::GetVisionInterface() const
 T Hunter::Hunter()
 T Hunter::IsAbleToBreak(CBaseEntity const*) const
 T Hunter::Precache()
 T Hunter::Spawn()
 T Hunter::YouForgotToImplementOrDeclareServerClass()
 T Hunter::~Hunter()
 T HunterAttack::GetName() const
 T HunterAttack::HunterAttack()
 T HunterAttack::OnCommandApproach(Hunter*, Vector const&, float)
 T HunterAttack::OnCommandAttack(Hunter*, CBaseEntity*)
 T HunterAttack::OnContact(Hunter*, CBaseEntity*, CGameTrace*)
 T HunterAttack::OnInjured(Hunter*, CTakeDamageInfo const&)
 T HunterAttack::OnShoved(Hunter*, CBaseEntity*)
 T HunterAttack::OnStart(Hunter*, Action<Hunter>*)
 T HunterAttack::Update(Hunter*, float)
 T HunterAttack::~HunterAttack()
 T HunterBehavior::GetName() const
 T HunterBehavior::InitialContainedAction(Hunter*)
 T HunterBehavior::OnContact(Hunter*, CBaseEntity*, CGameTrace*)
 T HunterBehavior::Update(Hunter*, float)
 T HunterBehavior::~HunterBehavior()
 T HunterIntention::FirstContainedResponder() const
 T HunterIntention::HunterIntention(INextBot*)
 T HunterIntention::Reset()
 T HunterIntention::Update()
 T HunterIntention::~HunterIntention()
 T HunterLeapToCover::GetName() const
 T HunterLeapToCover::OnContact(Hunter*, CBaseEntity*, CGameTrace*)
 T HunterLeapToCover::OnInjured(Hunter*, CTakeDamageInfo const&)
 T HunterLeapToCover::OnShoved(Hunter*, CBaseEntity*)
 T HunterLeapToCover::OnStart(Hunter*, Action<Hunter>*)
 T HunterLeapToCover::Update(Hunter*, float)
 T HunterLeapToCover::~HunterLeapToCover()
 T HunterLocomotion::HunterLocomotion(INextBot*)
 T HunterLocomotion::IsAreaTraversable(CNavArea const*) const
 T HunterLocomotion::IsEntityTraversable(CBaseEntity*, ILocomotion::TraverseWhenType) const
 T HunterLocomotion::Reset()
 T HunterLocomotion::Update()
 T HunterLocomotion::~HunterLocomotion()
 T HunterLungeAtVictim::GetName() const
 T HunterLungeAtVictim::HunterLungeAtVictim(CTerrorPlayer*)
 T HunterLungeAtVictim::OnContact(Hunter*, CBaseEntity*, CGameTrace*)
 T HunterLungeAtVictim::OnInjured(Hunter*, CTakeDamageInfo const&)
 T HunterLungeAtVictim::OnShoved(Hunter*, CBaseEntity*)
 T HunterLungeAtVictim::OnStart(Hunter*, Action<Hunter>*)
 T HunterLungeAtVictim::Update(Hunter*, float)
 T HunterLungeAtVictim::~HunterLungeAtVictim()
 T IBody::AimHeadTowards(CBaseEntity*, IBody::LookAtPriorityType, float, INextBotReply*, char const*)
 T IBody::AimHeadTowards(Vector const&, IBody::LookAtPriorityType, float, INextBotReply*, char const*)
 T IBody::GetActivity() const
 T IBody::GetActualPosture() const
 T IBody::GetArousal() const
 T IBody::GetCrouchHullHeight() const
 T IBody::GetDesiredPosture() const
 T IBody::GetEntity()
 T IBody::GetEyePosition() const
 T IBody::GetHeadSteadyDuration() const
 T IBody::GetHullHeight() const
 T IBody::GetHullMaxs() const
 T IBody::GetHullMins() const
 T IBody::GetHullWidth() const
 T IBody::GetMaxHeadAngularVelocity() const
 T IBody::GetSolidMask() const
 T IBody::GetStandHullHeight() const
 T IBody::GetViewVector() const
 T IBody::HasActivityType(unsigned int) const
 T IBody::IsActivity(Activity) const
 T IBody::IsActualPosture(IBody::PostureType) const
 T IBody::IsArousal(IBody::ArousalType) const
 T IBody::IsDesiredPosture(IBody::PostureType) const
 T IBody::IsHeadAimingOnTarget() const
 T IBody::IsHeadSteady() const
 T IBody::IsInDesiredPosture() const
 T IBody::IsPostureChanging() const
 T IBody::IsPostureMobile() const
 T IBody::Reset()
 T IBody::SelectAnimationSequence(Activity) const
 T IBody::SetArousal(IBody::ArousalType)
 T IBody::SetDesiredPosture(IBody::PostureType)
 T IBody::SetPosition(Vector const&)
 T IBody::StartActivity(Activity, unsigned int)
 T IBody::Update()
 T IBody::~IBody()
 T IContextualQuery::IsHindrance(INextBot const*, CBaseEntity*) const
 T IContextualQuery::IsPositionAllowed(INextBot const*, Vector const&) const
 T IContextualQuery::QueryCurrentPath(INextBot const*) const
 T IContextualQuery::SelectMoreDangerousThreat(INextBot const*, CBaseCombatCharacter const*, CBaseCombatCharacter*, CBaseCombatCharacter*) const
 T IContextualQuery::SelectTargetPoint(INextBot const*, CBaseCombatCharacter const*) const
 T IContextualQuery::ShouldHurry(INextBot const*) const
 T IContextualQuery::ShouldPickUp(INextBot const*, CBaseEntity*) const
 T IEntityListener::OnEntityCreated(CBaseEntity*)
 T IEntityListener::OnEntityDeleted(CBaseEntity*)
 T IEntityListener::OnEntitySpawned(CBaseEntity*)
 T IGameSystem::Add(IGameSystem*)
 T IGameSystem::FrameUpdatePostEntityThinkAllSystems()
 T IGameSystem::FrameUpdatePreEntityThinkAllSystems()
 T IGameSystem::InitAllSystems()
 T IGameSystem::LevelInitPostEntityAllSystems()
 T IGameSystem::LevelInitPreEntityAllSystems(char const*)
 T IGameSystem::LevelShutdownPostEntityAllSystems()
 T IGameSystem::LevelShutdownPreEntityAllSystems()
 T IGameSystem::OnRestoreAllSystems()
 T IGameSystem::OnSaveAllSystems()
 T IGameSystem::PostInitAllSystems()
 T IGameSystem::PreClientUpdateAllSystems()
 T IGameSystem::Remove(IGameSystem*)
 T IGameSystem::ShutdownAllSystems()
 T IGameSystem::~IGameSystem()
 T IGameSystemPerFrame::~IGameSystemPerFrame()
 T IIntention::IsHindrance(INextBot const*, CBaseEntity*) const
 T IIntention::IsPositionAllowed(INextBot const*, Vector const&) const
 T IIntention::QueryCurrentPath(INextBot const*) const
 T IIntention::Reset()
 T IIntention::SelectMoreDangerousThreat(INextBot const*, CBaseCombatCharacter const*, CBaseCombatCharacter*, CBaseCombatCharacter*) const
 T IIntention::SelectTargetPoint(INextBot const*, CBaseCombatCharacter const*) const
 T IIntention::ShouldHurry(INextBot const*) const
 T IIntention::ShouldPickUp(INextBot const*, CBaseEntity*) const
 T IIntention::Update()
 T IIntention::~IIntention()
 T ILocomotion::AdjustPosture(Vector const&)
 T ILocomotion::Approach(Vector const&, float)
 T ILocomotion::ClearStuckStatus(char const*)
 T ILocomotion::ClimbLadder(CNavLadder const*, CNavArea const*)
 T ILocomotion::ClimbUpToLedge(Vector const&, Vector const&, CBaseEntity const*)
 T ILocomotion::DescendLadder(CNavLadder const*, CNavArea const*)
 T ILocomotion::DriveTo(Vector const&)
 T ILocomotion::FaceTowards(Vector const&)
 T ILocomotion::GetDeathDropHeight() const
 T ILocomotion::GetDesiredLean() const
 T ILocomotion::GetDesiredSpeed() const
 T ILocomotion::GetFeet() const
 T ILocomotion::GetGround() const
 T ILocomotion::GetGroundMotionVector() const
 T ILocomotion::GetGroundNormal() const
 T ILocomotion::GetGroundSpeed() const
 T ILocomotion::GetMaxAcceleration() const
 T ILocomotion::GetMaxDeceleration() const
 T ILocomotion::GetMaxJumpHeight() const
 T ILocomotion::GetMotionVector() const
 T ILocomotion::GetRunSpeed() const
 T ILocomotion::GetSpeed() const
 T ILocomotion::GetSpeedLimit() const
 T ILocomotion::GetStepHeight() const
 T ILocomotion::GetStuckDuration() const
 T ILocomotion::GetTraversableSlopeLimit() const
 T ILocomotion::GetVelocity() const
 T ILocomotion::GetWalkSpeed() const
 T ILocomotion::HasPotentialGap(Vector const&, Vector const&, float*) const
 T ILocomotion::ILocomotion(INextBot*)
 T ILocomotion::IsAbleToAutoCenterOnLadder() const
 T ILocomotion::IsAreaTraversable(CNavArea const*) const
 T ILocomotion::IsAscendingOrDescendingLadder() const
 T ILocomotion::IsAttemptingToMove() const
 T ILocomotion::IsClimbingOrJumping() const
 T ILocomotion::IsClimbingUpToLedge() const
 T ILocomotion::IsEntityTraversable(CBaseEntity*, ILocomotion::TraverseWhenType) const
 T ILocomotion::IsGap(Vector const&, Vector const&) const
 T ILocomotion::IsJumpingAcrossGap() const
 T ILocomotion::IsOnGround() const
 T ILocomotion::IsPotentiallyTraversable(Vector const&, Vector const&, ILocomotion::TraverseWhenType, float*) const
 T ILocomotion::IsRunning() const
 T ILocomotion::IsScrambling() const
 T ILocomotion::IsStuck() const
 T ILocomotion::IsUsingLadder() const
 T ILocomotion::Jump()
 T ILocomotion::JumpAcrossGap(Vector const&, Vector const&)
 T ILocomotion::OnLandOnGround(CBaseEntity*)
 T ILocomotion::OnLeaveGround(CBaseEntity*)
 T ILocomotion::Reset()
 T ILocomotion::Run()
 T ILocomotion::SetDesiredLean(QAngle const&)
 T ILocomotion::SetDesiredSpeed(float)
 T ILocomotion::SetSpeedLimit(float)
 T ILocomotion::Stop()
 T ILocomotion::StuckMonitor()
 T ILocomotion::Update()
 T ILocomotion::Walk()
 T ILocomotion::~ILocomotion()
 T INextBot* NextBotManager::GetClosestBot<ZombieBossFilter>(Vector const&, ZombieBossFilter&)
 T INextBot::BeginUpdate()
 T INextBot::ClearImmobileStatus()
 T INextBot::DebugConColorMsg(NextBotDebugType, Color const&, char const*, ...)
 T INextBot::DisplayDebugText(char const*) const
 T INextBot::EndUpdate()
 T INextBot::FirstContainedResponder() const
 T INextBot::GetBodyInterface() const
 T INextBot::GetDebugHistory(unsigned int, CUtlVector<INextBot::NextBotDebugLineType const*, CUtlMemory<INextBot::NextBotDebugLineType const*, int> >*) const
 T INextBot::GetDebugIdentifier() const
 T INextBot::GetImmobileDuration() const
 T INextBot::GetImmobileSpeedThreshold() const
 T INextBot::GetIntentionInterface() const
 T INextBot::GetLocomotionInterface() const
 T INextBot::GetNextBotCombatCharacter() const
 T INextBot::GetPosition() const
 T INextBot::GetRangeSquaredTo(CBaseEntity*) const
 T INextBot::GetRangeSquaredTo(Vector const&) const
 T INextBot::GetRangeTo(CBaseEntity*) const
 T INextBot::GetRangeTo(Vector const&) const
 T INextBot::GetVisionInterface() const
 T INextBot::INextBot()
 T INextBot::IsAbleToBlockMovementOf(INextBot const*) const
 T INextBot::IsAbleToBreak(CBaseEntity const*) const
 T INextBot::IsAbleToClimbOnto(CBaseEntity const*) const
 T INextBot::IsDebugFilterMatch(char const*) const
 T INextBot::IsDebugging(unsigned int) const
 T INextBot::IsEnemy(CBaseCombatCharacter const*) const
 T INextBot::IsFriend(CBaseCombatCharacter const*) const
 T INextBot::IsImmobile() const
 T INextBot::IsRangeGreaterThan(CBaseEntity*, float) const
 T INextBot::IsRangeGreaterThan(Vector const&, float) const
 T INextBot::IsRangeLessThan(CBaseEntity*, float) const
 T INextBot::IsRangeLessThan(Vector const&, float) const
 T INextBot::IsRemovedOnReset() const
 T INextBot::IsSelf(CBaseCombatCharacter const*) const
 T INextBot::MySurvivorBotPointer() const
 T INextBot::NextContainedResponder(INextBotEventResponder*) const
 T INextBot::RegisterComponent(INextBotComponent*)
 T INextBot::Reset()
 T INextBot::SetPosition(Vector const&)
 T INextBot::ShouldTouch(CBaseEntity const*) const
 T INextBot::Update()
 T INextBot::UpdateImmobileStatus()
 T INextBot::Upkeep()
 T INextBot::~INextBot()
 T INextBotComponent::GetBot() const
 T INextBotComponent::INextBotComponent(INextBot*)
 T INextBotComponent::Reset()
 T INextBotComponent::Upkeep()
 T INextBotComponent::~INextBotComponent()
 T INextBotEventResponder::FirstContainedResponder() const
 T INextBotEventResponder::NextContainedResponder(INextBotEventResponder*) const
 T INextBotEventResponder::OnAnimationActivityComplete(int)
 T INextBotEventResponder::OnAnimationActivityInterrupted(int)
 T INextBotEventResponder::OnAnimationEvent(animevent_t*)
 T INextBotEventResponder::OnBlinded(CBaseEntity*)
 T INextBotEventResponder::OnCommandApproach(CBaseEntity*)
 T INextBotEventResponder::OnCommandApproach(Vector const&, float)
 T INextBotEventResponder::OnCommandAttack(CBaseEntity*)
 T INextBotEventResponder::OnCommandPause(float)
 T INextBotEventResponder::OnCommandResume()
 T INextBotEventResponder::OnCommandRetreat(CBaseEntity*, float)
 T INextBotEventResponder::OnContact(CBaseEntity*, CGameTrace*)
 T INextBotEventResponder::OnDrop(CBaseEntity*)
 T INextBotEventResponder::OnIgnite()
 T INextBotEventResponder::OnInjured(CTakeDamageInfo const&)
 T INextBotEventResponder::OnKilled(CTakeDamageInfo const&)
 T INextBotEventResponder::OnLandOnGround(CBaseEntity*)
 T INextBotEventResponder::OnLeaveGround(CBaseEntity*)
 T INextBotEventResponder::OnLostSight(CBaseEntity*)
 T INextBotEventResponder::OnModelChanged()
 T INextBotEventResponder::OnMoveToFailure(Path const*, MoveToFailureType)
 T INextBotEventResponder::OnMoveToSuccess(Path const*)
 T INextBotEventResponder::OnNavAreaChanged(CNavArea*, CNavArea*)
 T INextBotEventResponder::OnOtherKilled(CBaseCombatCharacter*, CTakeDamageInfo const&)
 T INextBotEventResponder::OnPickUp(CBaseEntity*, CBaseCombatCharacter*)
 T INextBotEventResponder::OnPostureChanged()
 T INextBotEventResponder::OnShoved(CBaseEntity*)
 T INextBotEventResponder::OnSight(CBaseEntity*)
 T INextBotEventResponder::OnSound(CBaseEntity*, Vector const&, KeyValues*)
 T INextBotEventResponder::OnSpokeConcept(CBaseCombatCharacter*, CAI_Concept, AI_Response*)
 T INextBotEventResponder::OnStuck()
 T INextBotEventResponder::OnThreatChanged(CBaseEntity*)
 T INextBotEventResponder::OnUnStuck()
 T INextBotReply::OnFail(INextBot*, INextBotReply::FailureReason)
 T IParticleSystemQuery::GetCollisionGroupFromName(char const*)
 T IParticleSystemQuery::GetControllingObjectHitBoxInfo(CParticleCollection*, int, int, ModelHitBoxInfo_t*)
 T IParticleSystemQuery::GetLocalPlayerEyeVectors(Vector*, Vector*, Vector*)
 T IParticleSystemQuery::GetLocalPlayerPos()
 T IParticleSystemQuery::GetRayTraceEnvironmentFromName(char const*)
 T IParticleSystemQuery::IsPointInControllingObjectHitBox(CParticleCollection*, int, Vector, bool)
 T IParticleSystemQuery::MovePointInsideControllingObject(CParticleCollection*, void*, Vector*)
 T IParticleSystemQuery::SetUpLightingEnvironment(Vector const&)
 T IPlayerFunctor::OnBeginIteration()
 T IPredictionSystem::~IPredictionSystem()
 T IVision::GetClosestRecognized(INextBotEntityFilter const&) const
 T IVision::GetClosestRecognized(int) const
 T IVision::GetDefaultFieldOfView() const
 T IVision::GetFieldOfView() const
 T IVision::GetMaxVisionRange() const
 T IVision::GetMinRecognizeTime() const
 T IVision::GetPrimaryRecognizedThreat() const
 T IVision::GetRecognizedCount(int, float) const
 T IVision::GetTimeSinceVisible(int) const
 T IVision::IVision(INextBot*)
 T IVision::IsAbleToSee(CBaseEntity*, IVision::FieldOfViewCheckType, Vector*) const
 T IVision::IsAbleToSee(Vector const&, IVision::FieldOfViewCheckType) const
 T IVision::IsIgnored(CBaseEntity*) const
 T IVision::IsInFieldOfView(CBaseEntity*) const
 T IVision::IsInFieldOfView(Vector const&) const
 T IVision::IsLineOfSightClear(Vector const&) const
 T IVision::IsLineOfSightClearToEntity(CBaseEntity*, Vector*) const
 T IVision::IsLookingAt(CBaseCombatCharacter const*, float) const
 T IVision::IsLookingAt(Vector const&, float) const
 T IVision::IsNoticed(CBaseEntity*) const
 T IVision::Reset()
 T IVision::SetFieldOfView(float)
 T IVision::Update()
 T IVision::UpdateRecognizedSet()
 T IVision::~IVision()
 T IceKey::IceKey(int)
 T IceKey::blockSize() const
 T IceKey::decrypt(unsigned char const*, unsigned char*) const
 T IceKey::scheduleBuild(unsigned short*, int, int const*)
 T IceKey::set(unsigned char const*)
 T IceKey::~IceKey()
 T IgnoreActorsTraceFilterFunction(IHandleEntity*, int)
 T IncapLog(char const*, CTerrorPlayer*, CTerrorPlayer*)
 T IncomingMobScan::IncomingMobScan(CTerrorPlayer const*, int)
 T IncomingMobScan::operator()(CBaseCombatCharacter*)
 T IncrementInfectedBodyGroup(Infected*, char const*)
 T IndexModelSequences(CStudioHdr*)
 T Infected::AttackSurvivorTeam()
 T Infected::Classify()
 T Infected::CreateComponents()
 T Infected::CreateDeathAction(CTakeDamageInfo const&)
 T Infected::DoBloodEffect(float, CTakeDamageInfo const&, Vector const&, CGameTrace*)
 T Infected::DrawDebugTextOverlays()
 T Infected::DrawInfectedDebug()
 T Infected::Event_Killed(CTakeDamageInfo const&)
 T Infected::EyePosition()
 T Infected::GetBodyInterface() const
 T Infected::GetClass() const
 T Infected::GetEntity() const
 T Infected::GetEyeOffsetUpdateInterval() const
 T Infected::GetFlowDistance() const
 T Infected::GetFootstepSound(char const*, bool, float, bool) const
 T Infected::GetIntentionInterface() const
 T Infected::GetLastKnownArea() const
 T Infected::GetLocomotionInterface() const
 T Infected::GetServerClass()
 T Infected::GetVisionInterface() const
 T Infected::Infected()
 T Infected::IsAbleToBlockMovementOf(INextBot const*) const
 T Infected::IsAbleToBreak(CBaseEntity const*) const
 T Infected::IsAbleToClimbOnto(CBaseEntity const*) const
 T Infected::IsGroundLevel(float) const
 T Infected::IsOutside() const
 T Infected::IsSacrificeFor(ZombieClassType) const
 T Infected::IsStumbling() const
 T Infected::MakeLowViolence()
 T Infected::MyInfectedPointer()
 T Infected::NetworkStateChanged_m_fFlags()
 T Infected::NetworkStateChanged_m_fFlags(void*)
 T Infected::OnAmbushed(CTerrorPlayer*)
 T Infected::OnIgnite()
 T Infected::OnSequenceSet(int)
 T Infected::PhysicsSolidMaskForEntity() const
 T Infected::Precache()
 T Infected::ReportAnimationState(CBasePlayer*)
 T Infected::SetAlertBodyGroupVariant(char const*, char const*)
 T Infected::SetClientLeanYaw(float)
 T Infected::SetClientLookatTarget(CBaseEntity*)
 T Infected::SetDamagedBodyGroupVariant(char const*, char const*)
 T Infected::SetIdleBodyGroupVariant(char const*, char const*)
 T Infected::SetLimbForce(Vector const&)
 T Infected::SetLimbGibs(int)
 T Infected::ShouldCollide(int, int) const
 T Infected::ShouldTouch(CBaseEntity const*) const
 T Infected::Spawn()
 T Infected::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*)
 T Infected::TryToCull()
 T Infected::Update()
 T Infected::UpdateClientAnimationLayers()
 T Infected::UpdateNeighbors()
 T Infected::Vocalize(char const*, bool)
 T Infected::YouForgotToImplementOrDeclareServerClass()
 T Infected::~Infected()
 T InfectedAlert::GetName() const
 T InfectedAlert::InfectedAlert(Vector const&, InfectedAlert::AlertCauseType)
 T InfectedAlert::IsAbleToBlockMovementOf(INextBot const*) const
 T InfectedAlert::LookTowardsDisturbance(Infected*)
 T InfectedAlert::OnAnimationActivityComplete(Infected*, int)
 T InfectedAlert::OnBlinded(Infected*, CBaseEntity*)
 T InfectedAlert::OnCommandAttack(Infected*, CBaseEntity*)
 T InfectedAlert::OnContact(Infected*, CBaseEntity*, CGameTrace*)
 T InfectedAlert::OnInjured(Infected*, CTakeDamageInfo const&)
 T InfectedAlert::OnOtherKilled(Infected*, CBaseCombatCharacter*, CTakeDamageInfo const&)
 T InfectedAlert::OnPostureChanged(Infected*)
 T InfectedAlert::OnResume(Infected*, Action<Infected>*)
 T InfectedAlert::OnShoved(Infected*, CBaseEntity*)
 T InfectedAlert::OnSound(Infected*, CBaseEntity*, Vector const&, KeyValues*)
 T InfectedAlert::OnStart(Infected*, Action<Infected>*)
 T InfectedAlert::Update(Infected*, float)
 T InfectedAlert::~InfectedAlert()
 T InfectedAttack::GetName() const
 T InfectedAttack::InfectedAttack(CBaseEntity*)
 T InfectedAttack::InitialContainedAction(Infected*)
 T InfectedAttack::IsUnderground(Infected*) const
 T InfectedAttack::OnBlinded(Infected*, CBaseEntity*)
 T InfectedAttack::OnContact(Infected*, CBaseEntity*, CGameTrace*)
 T InfectedAttack::OnInjured(Infected*, CTakeDamageInfo const&)
 T InfectedAttack::OnLandOnGround(Infected*, CBaseEntity*)
 T InfectedAttack::OnLeaveGround(Infected*, CBaseEntity*)
 T InfectedAttack::OnPunch(Infected*, CBaseEntity*)
 T InfectedAttack::OnShoved(Infected*, CBaseEntity*)
 T InfectedAttack::OnSound(Infected*, CBaseEntity*, Vector const&, KeyValues*)
 T InfectedAttack::OnStart(Infected*, Action<Infected>*)
 T InfectedAttack::OnSuspend(Infected*, Action<Infected>*)
 T InfectedAttack::Update(Infected*, float)
 T InfectedAttack::~InfectedAttack()
 T InfectedBehavior::GetName() const
 T InfectedBehavior::InfectedBehavior()
 T InfectedBehavior::InitialContainedAction(Infected*)
 T InfectedBehavior::OnCommandApproach(Infected*, Vector const&, float)
 T InfectedBehavior::OnIgnite(Infected*)
 T InfectedBehavior::OnInjured(Infected*, CTakeDamageInfo const&)
 T InfectedBehavior::OnKilled(Infected*, CTakeDamageInfo const&)
 T InfectedBehavior::OnShoved(Infected*, CBaseEntity*)
 T InfectedBehavior::Update(Infected*, float)
 T InfectedBehavior::~InfectedBehavior()
 T InfectedBlinded::GetName() const
 T InfectedBlinded::InfectedBlinded(Action<Infected>*, char const*)
 T InfectedBlinded::OnBlinded(Infected*, CBaseEntity*)
 T InfectedBlinded::OnContact(Infected*, CBaseEntity*, CGameTrace*)
 T InfectedBlinded::OnInjured(Infected*, CTakeDamageInfo const&)
 T InfectedBlinded::OnShoved(Infected*, CBaseEntity*)
 T InfectedBlinded::OnSound(Infected*, CBaseEntity*, Vector const&, KeyValues*)
 T InfectedBlinded::OnStart(Infected*, Action<Infected>*)
 T InfectedBlinded::Update(Infected*, float)
 T InfectedBlinded::~InfectedBlinded()
 T InfectedBurn::GetName() const
 T InfectedBurn::OnContact(Infected*, CBaseEntity*, CGameTrace*)
 T InfectedBurn::OnInjured(Infected*, CTakeDamageInfo const&)
 T InfectedBurn::OnShoved(Infected*, CBaseEntity*)
 T InfectedBurn::OnStart(Infected*, Action<Infected>*)
 T InfectedBurn::Update(Infected*, float)
 T InfectedBurn::~InfectedBurn()
 T InfectedChangePosture::GetName() const
 T InfectedChangePosture::OnStart(Infected*, Action<Infected>*)
 T InfectedChangePosture::Update(Infected*, float)
 T InfectedChangePosture::~InfectedChangePosture()
 T InfectedChasePath::ComputeAreaCrossing(INextBot*, CNavArea const*, Vector const&, CNavArea const*, NavDirType, Vector*) const
 T InfectedChasePath::~InfectedChasePath()
 T InfectedDying::BecomeRagdoll(Infected*)
 T InfectedDying::ComputeShoveForce(Infected*, Vector const&)
 T InfectedDying::GetName() const
 T InfectedDying::InfectedDying(CTakeDamageInfo const&)
 T InfectedDying::IsAbleToBlockMovementOf(INextBot const*) const
 T InfectedDying::OnAnimationActivityComplete(Infected*, int)
 T InfectedDying::OnAnimationEvent(Infected*, animevent_t*)
 T InfectedDying::OnContact(Infected*, CBaseEntity*, CGameTrace*)
 T InfectedDying::OnShoved(Infected*, CBaseEntity*)
 T InfectedDying::OnStart(Infected*, Action<Infected>*)
 T InfectedDying::TryToStartDeathThroes(Infected*)
 T InfectedDying::Update(Infected*, float)
 T InfectedDying::~InfectedDying()
 T InfectedExecAction::GetName() const
 T InfectedExecAction::InfectedExecAction()
 T InfectedExecAction::InitialContainedAction(Infected*)
 T InfectedExecAction::OnInjured(Infected*, CTakeDamageInfo const&)
 T InfectedExecAction::Update(Infected*, float)
 T InfectedExecAction::~InfectedExecAction()
 T InfectedGroundCollector::operator()(CBaseCombatCharacter*)
 T InfectedIntention::FirstContainedResponder() const
 T InfectedIntention::InfectedIntention(INextBot*)
 T InfectedIntention::InitialAction() const
 T InfectedIntention::IsAbleToBlockMovementOf(INextBot const*) const
 T InfectedIntention::NextContainedResponder(INextBotEventResponder*) const
 T InfectedIntention::Reset()
 T InfectedIntention::Update()
 T InfectedIntention::~InfectedIntention()
 T InfectedLeanOnWall::GetName() const
 T InfectedLeanOnWall::OnResume(Infected*, Action<Infected>*)
 T InfectedLeanOnWall::OnStart(Infected*, Action<Infected>*)
 T InfectedLeanOnWall::Update(Infected*, float)
 T InfectedLeanOnWall::~InfectedLeanOnWall()
 T InfectedLieDown::GetName() const
 T InfectedLieDown::OnStart(Infected*, Action<Infected>*)
 T InfectedLieDown::Update(Infected*, float)
 T InfectedLieDown::~InfectedLieDown()
 T InfectedPathCost::operator()(CNavArea*, CNavArea*, CNavLadder const*, CFuncElevator const*, float) const
 T InfectedRandomColorArray(int*)
 T InfectedShoved::GetName() const
 T InfectedShoved::InfectedShoved(CBaseEntity*, Action<Infected>*)
 T InfectedShoved::IsAbleToBlockMovementOf(INextBot const*) const
 T InfectedShoved::OnAnimationActivityComplete(Infected*, int)
 T InfectedShoved::OnContact(Infected*, CBaseEntity*, CGameTrace*)
 T InfectedShoved::OnInjured(Infected*, CTakeDamageInfo const&)
 T InfectedShoved::OnShoved(Infected*, CBaseEntity*)
 T InfectedShoved::OnStart(Infected*, Action<Infected>*)
 T InfectedShoved::StartShovedActivity(Infected*)
 T InfectedShoved::~InfectedShoved()
 T InfectedSitDown::GetName() const
 T InfectedSitDown::OnStart(Infected*, Action<Infected>*)
 T InfectedSitDown::Update(Infected*, float)
 T InfectedSitDown::~InfectedSitDown()
 T InfectedStaggerAround::GetName() const
 T InfectedStaggerAround::OnAnimationActivityComplete(Infected*, int)
 T InfectedStaggerAround::OnContact(Infected*, CBaseEntity*, CGameTrace*)
 T InfectedStaggerAround::OnResume(Infected*, Action<Infected>*)
 T InfectedStaggerAround::OnStart(Infected*, Action<Infected>*)
 T InfectedStaggerAround::Update(Infected*, float)
 T InfectedStaggerAround::~InfectedStaggerAround()
 T InfectedStandDazed::GetName() const
 T InfectedStandDazed::OnAnimationActivityComplete(Infected*, int)
 T InfectedStandDazed::OnResume(Infected*, Action<Infected>*)
 T InfectedStandDazed::OnStart(Infected*, Action<Infected>*)
 T InfectedStandDazed::~InfectedStandDazed()
 T InfectedStandingActivity::GetName() const
 T InfectedStandingActivity::InfectedStandingActivity(Activity, float, Action<Infected>*)
 T InfectedStandingActivity::OnAnimationActivityComplete(Infected*, int)
 T InfectedStandingActivity::OnStart(Infected*, Action<Infected>*)
 T InfectedStandingActivity::Update(Infected*, float)
 T InfectedStandingActivity::~InfectedStandingActivity()
 T InfectedWander::BecomeAlert(Infected*, Vector const&)
 T InfectedWander::GetName() const
 T InfectedWander::InitialContainedAction(Infected*)
 T InfectedWander::OnBlinded(Infected*, CBaseEntity*)
 T InfectedWander::OnCommandAttack(Infected*, CBaseEntity*)
 T InfectedWander::OnContact(Infected*, CBaseEntity*, CGameTrace*)
 T InfectedWander::OnInjured(Infected*, CTakeDamageInfo const&)
 T InfectedWander::OnOtherKilled(Infected*, CBaseCombatCharacter*, CTakeDamageInfo const&)
 T InfectedWander::OnResume(Infected*, Action<Infected>*)
 T InfectedWander::OnShoved(Infected*, CBaseEntity*)
 T InfectedWander::OnSound(Infected*, CBaseEntity*, Vector const&, KeyValues*)
 T InfectedWander::OnStart(Infected*, Action<Infected>*)
 T InfectedWander::Update(Infected*, float)
 T InfectedWander::~InfectedWander()
 T InfoChangelevel::Activate()
 T InfoChangelevel::ChangeLevelNow()
 T InfoChangelevel::ChangeLevelSpeechDelay()
 T InfoChangelevel::ChangelevelThink()
 T InfoChangelevel::DrawDebugTextOverlays()
 T InfoChangelevel::GetDataDescMap()
 T InfoChangelevel::IsValidChangelevel() const
 T InfoChangelevel::KeyValue(char const*, char const*)
 T InfoChangelevel::OnCheckpointDoorClosed(inputdata_t&)
 T InfoChangelevel::OnCheckpointDoorOpened(inputdata_t&)
 T InfoChangelevel::SaveEntities(KeyValues*)
 T InfoChangelevel::Spawn()
 T InfoChangelevel::StartChangeLevel(Checkpoint const*)
 T InfoChangelevel::TouchChangeLevel(CBaseEntity*)
 T InfoChangelevel::UpdateChangelevel(InfoChangelevelPlayerCollector*)
 T InfoChangelevel::~InfoChangelevel()
 T InfoChangelevelPlayerCollector::operator()(CBaseCombatCharacter*)
 T InitBodyQue()
 T InitPose(CStudioHdr const*, Vector*, QuaternionAligned*, int)
 T InitializeCvars()
 T InstallBotControl()
 T InstallGameRules()
 T InstanceRegistry(char const*)
 T InstancedAutoGeneratedSoundScene(CBaseFlex*, char const*, CHandle<CBaseEntity>*)
 T InstancedScriptedScene(CBaseFlex*, char const*, CHandle<CBaseEntity>*, float, bool, AI_Response*, bool, IRecipientFilter*)
 T Intensity::Increase(Intensity::IntensityType)
 T Intensity::Intensity()
 T Intensity::Reset()
 T Intensity::Update()
 T Intensity::~Intensity()
 T InterfaceReg::InterfaceReg(void* (*)(), char const*)
 T InternalSendPropArray(int, int, char*, int (*)(void const*, int))
 T Interpolator_CurveInterpolate(int, Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
 T Interpolator_CurveInterpolatorsForType(int, int&, int&)
 T IntersectRayWithBox(Vector const&, Vector const&, Vector const&, Vector const&, float, BoxTraceInfo_t*)
 T IntersectRayWithBox(Vector const&, Vector const&, Vector const&, Vector const&, float, CBaseTrace*, float*)
 T IntersectRayWithOBB(Ray_t const&, matrix3x4_t const&, Vector const&, Vector const&, float, CBaseTrace*)
 T IntersectRayWithOBB(Vector const&, Vector const&, matrix3x4_t const&, Vector const&, Vector const&, float, CBaseTrace*)
 T IntersectRayWithTriangle(Ray_t const&, Vector const&, Vector const&, Vector const&, bool)
 T IntervalDistance(float, float, float)
 T IntervalTimer::NetworkStateChanged()
 T IntervalTimer::NetworkStateChanged(void*)
 T IntervalTimer::Now() const
 T InvalidateQueryCache()
 T InvalidateUniqueId(UniqueId_t*)
 T IsAllIdleSpectatingPlayer::operator()(CTerrorPlayer*)
 T IsBoxIntersectingBox(Vector const&, Vector const&, Vector const&, Vector const&)
 T IsBoxIntersectingRay(Vector const&, Vector const&, Vector const&, Vector const&, float)
 T IsBoxIntersectingSphere(Vector const&, Vector const&, Vector const&, float)
 T IsBreakableEntity(CBaseEntity*, bool, bool)
 T IsEngineThreaded()
 T IsEntityWalkable(CBaseEntity*, unsigned int)
 T IsExplosionTraceBlocked(CGameTrace*)
 T IsFlimsy(CBaseEntity*)
 T IsHeadTrackingEnabled()
 T IsHeightDifferenceValid(float, float, float, float)
 T IsHidingSpotInCover(Vector const&)
 T IsInCommentaryMode()
 T IsLineOfSightBetweenTwoEntitiesClear(CBaseEntity*, EEntityOffsetMode_t, CBaseEntity*, EEntityOffsetMode_t, CBaseEntity*, int, unsigned int, bool (*)(IHandleEntity*, int), float)
 T IsListeningToCommentary()
 T IsOBBIntersectingOBB(Vector const&, QAngle const&, Vector const&, Vector const&, Vector const&, QAngle const&, Vector const&, Vector const&, float)
 T IsPointInBox(Vector const&, Vector const&, Vector const&)
 T IsPointInMap(Vector const&, CTerrorPlayer*)
 T IsPushAwayEntity(CBaseEntity*)
 T IsPushableEntity(CBaseEntity*)
 T IsRunningScriptedScene(CBaseFlex*, bool)
 T IsSkinUsedByTransitioningPlayer(char const*)
 T IsStairs(Vector const&, Vector const&, StairTestType)
 T IsStaticPointEntity(CBaseEntity*)
 T IsUniqueIdEqual(UniqueId_t const&, UniqueId_t const&)
 T IterateActivePhysicsEntities(void (*)(CBaseEntity*))
 T JumpConnector::TryToConnect(CNavArea*, CNavArea*, CUtlVectorUltraConservative<NavConnect, CUtlVectorUltraConservativeAllocator> const*, NavDirType)
 T JumpConnector::TryToConnect(CNavArea*, CUtlVectorUltraConservative<NavConnect, CUtlVectorUltraConservativeAllocator> const*, CUtlVectorUltraConservative<NavConnect, CUtlVectorUltraConservativeAllocator> const*, NavDirType)
 T JumpConnector::operator()(CNavArea*)
 T KeyValues::AddSubKey(KeyValues*)
 T KeyValues::Clear()
 T KeyValues::CreateKey(char const*)
 T KeyValues::EvaluateConditional(char const*)
 T KeyValues::FindKey(char const*, bool)
 T KeyValues::GetDataType(char const*)
 T KeyValues::GetFirstSubKey()
 T KeyValues::GetFirstTrueSubKey()
 T KeyValues::GetFirstValue()
 T KeyValues::GetFloat(char const*, float)
 T KeyValues::GetInt(char const*, int)
 T KeyValues::GetName() const
 T KeyValues::GetNextKey()
 T KeyValues::GetNextTrueSubKey()
 T KeyValues::GetNextValue()
 T KeyValues::GetString(char const*, char const*)
 T KeyValues::GetUint64(char const*, unsigned long long)
 T KeyValues::KeyValues(char const*)
 T KeyValues::KeyValues(char const*, char const*, char const*)
 T KeyValues::LoadFromBuffer(char const*, CUtlBuffer&, IBaseFileSystem*, char const*)
 T KeyValues::LoadFromBuffer(char const*, char const*, IBaseFileSystem*, char const*)
 T KeyValues::LoadFromFile(IBaseFileSystem*, char const*, char const*)
 T KeyValues::MakeCopy() const
 T KeyValues::ParseIncludedKeys(char const*, char const*, IBaseFileSystem*, char const*, CUtlVector<KeyValues*, CUtlMemory<KeyValues*, int> >&)
 T KeyValues::ReadToken(CUtlBuffer&, bool&, bool&)
 T KeyValues::RecursiveLoadFromBuffer(char const*, CUtlBuffer&)
 T KeyValues::RecursiveMergeKeyValues(KeyValues*)
 T KeyValues::RecursiveSaveToFile(CUtlBuffer&, int)
 T KeyValues::RecursiveSaveToFile(IBaseFileSystem*, void*, CUtlBuffer*, int)
 T KeyValues::RemoveEverything()
 T KeyValues::RemoveSubKey(KeyValues*)
 T KeyValues::SaveToFile(IBaseFileSystem*, char const*, char const*)
 T KeyValues::SetFloat(char const*, float)
 T KeyValues::SetInt(char const*, int)
 T KeyValues::SetName(char const*)
 T KeyValues::SetString(char const*, char const*)
 T KeyValues::UsesEscapeSequences(bool)
 T KeyValues::WriteConvertedString(IBaseFileSystem*, void*, CUtlBuffer*, char const*)
 T KeyValues::deleteThis()
 T KeyValues::operator delete(void*)
 T KeyValues::operator new(unsigned long)
 T KillTargets(char const*)
 T Kochanek_Bartels_Spline(float, float, float, Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
 T Kochanek_Bartels_Spline_NormalizeX(float, float, float, Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
 T LadderEndSearch(Vector const*, NavDirType)
 T LinkChild(CBaseEntity*, CBaseEntity*)
 T LiveSurvivorCounter::operator()(CBasePlayer*)
 T LoadMOTDFile(char const*, ConVar*)
 T LocalScene_Printf(char const*, ...)
 T LogDamage(CTerrorPlayer*, CTakeDamageInfo const&, DamageResolutionType)
 T LookupActivity(CStudioHdr*, char const*)
 T LookupSequence(CStudioHdr*, char const*)
 T LookupWeaponInfoSlot(char const*)
 T LostVictim::GetName() const
 T LostVictim::OnAnimationActivityComplete(Infected*, int)
 T LostVictim::OnContact(Infected*, CBaseEntity*, CGameTrace*)
 T LostVictim::OnResume(Infected*, Action<Infected>*)
 T LostVictim::OnStart(Infected*, Action<Infected>*)
 T LostVictim::Update(Infected*, float)
 T LostVictim::~LostVictim()
 T LowestFlowDistance::operator()(CTerrorPlayer*)
 T MD5Update(MD5Context_t*, unsigned char const*, unsigned int)
 T MD5_PseudoRandom(unsigned int)
 T MainPathCost::operator()(CNavArea*, CNavArea*, CNavLadder const*, CFuncElevator const*, float)
 T MakeSniperSpots(CNavArea*)
 T MapCycleFileChangedCallback(IConVar*, char const*, float)
 T MapEntity_GetNumKeysInEntity(char const*)
 T MapEntity_ParseAllEntites_SpawnTemplates(CPointTemplate**, int, CBaseEntity**, HierarchicalSpawnMapData_t*, int)
 T MapEntity_ParseAllEntities(char const*, IMapEntityFilter*, bool)
 T MapEntity_ParseEntity(CBaseEntity*&, char const*, IMapEntityFilter*)
 T MapEntity_ParseToken(char const*, char*)
 T MapEntity_PrecacheEntity(char const*, int&)
 T MapEntity_SkipToNextEntity(char const*, char*)
 T MatchPlayer::operator()(CBasePlayer*)
 T MathLib_Init(float, float, float, int, bool, bool, bool, bool)
 T MatrixAngles(matrix3x4_t const&, Quaternion&, Vector&)
 T MatrixAngles(matrix3x4_t const&, float*)
 T MatrixBuildRotateZ(VMatrix&, float)
 T MatrixBuildRotationAboutAxis(VMatrix&, Vector const&, float)
 T MatrixBuildRotationAboutAxis(Vector const&, float, matrix3x4_t&)
 T MatrixCopy(matrix3x4_t const&, matrix3x4_t&)
 T MatrixFromAngles(QAngle const&, VMatrix&)
 T MatrixGetColumn(matrix3x4_t const&, int, Vector&)
 T MatrixInvert(matrix3x4_t const&, matrix3x4_t&)
 T MatrixMultiply(VMatrix const&, VMatrix const&, VMatrix&)
 T MatrixSetColumn(Vector const&, int, matrix3x4_t&)
 T MatrixSetIdentity(VMatrix&)
 T MatrixToAngles(VMatrix const&, QAngle&)
 T MaxPlayerZombieCallback(IConVar*, char const*, float)
 T MaxSurvivorCallback(IConVar*, char const*, float)
 T MessageEnd()
 T MessageWriteBitVecIntegral(Vector const&)
 T MessageWriteByte(int)
 T MessageWriteFloat(float)
 T MessageWriteLong(int)
 T MessageWriteSBitLong(int, int)
 T MessageWriteShort(int)
 T MessageWriteString(char const*)
 T MessageWriteUBitLong(unsigned int, int)
 T MessageWriteVec3Coord(Vector const&)
 T MinigunFire(CTerrorPlayer*, CPropMinigun*, Vector const&, Vector const&, QAngle const&, float, bool)
 T MinigunTargetScan::operator()(CBaseCombatCharacter*)
 T MissingSceneWarning(char const*)
 T ModelSoundsCacheInit()
 T ModelSoundsCacheShutdown()
 T ModelSoundsCache_FinishModel(CStudioHdr*)
 T ModelSoundsCache_LoadModel(char const*)
 T ModelSoundsCache_PrecacheScriptSound(char const*)
 T MostRecentITFlowDistance::operator()(CBasePlayer*)
 T MountedGunFire(CTerrorPlayer*, CPropMountedGun*, Vector const&, Vector const&, Vector const&, float, bool)
 T MoveHelperServer()
 T MovePropAway(CBaseEntity*, CBasePlayer*)
 T MovieExplosion::GetServerClass()
 T MovieExplosion::YouForgotToImplementOrDeclareServerClass()
 T MovieExplosion::~MovieExplosion()
 T Music::AppendMissionStr(char*, char*, int)
 T Music::ClearDeathDSP()
 T Music::CollectZombieData()
 T Music::Init()
 T Music::Music(CTerrorPlayer*)
 T Music::NetworkStateChanged()
 T Music::NetworkStateChanged(void*)
 T Music::OnBleedingOut()
 T Music::OnBleedingOutEnded()
 T Music::OnBoomerAlert(int, float)
 T Music::OnBoomerSpawn()
 T Music::OnBossApproaching()
 T Music::OnBossDefeated(ZombieClassType)
 T Music::OnBossSeen()
 T Music::OnCheckpointReached()
 T Music::OnChoked()
 T Music::OnDown()
 T Music::OnDownAndBeaten()
 T Music::OnDownAndBeatenEnded()
 T Music::OnDownEnded()
 T Music::OnDroppedFromLedgeHang()
 T Music::OnEnterCheckpoint()
 T Music::OnEnterHoldout()
 T Music::OnFellToDeathFromLedgeHang()
 T Music::OnFinaleCheckpointReached()
 T Music::OnFinaleEscapeStart()
 T Music::OnFinaleFinalBattle()
 T Music::OnFinaleHalftimeTank()
 T Music::OnFinaleStart()
 T Music::OnFinaleTankBrothers()
 T Music::OnFinaleWave(int)
 T Music::OnHoldoutStart()
 T Music::OnHunterAlert(int, float)
 T Music::OnHunterSpawn()
 T Music::OnITExpired()
 T Music::OnITMobApproaching()
 T Music::OnKilled(bool)
 T Music::OnLandmarkRevealed(string_t)
 T Music::OnLargeAreaRevealed()
 T Music::OnLeaveCheckpoint()
 T Music::OnLeaveMissionStartArea()
 T Music::OnLedgeHangBleedingOut()
 T Music::OnLedgeHangFingers()
 T Music::OnLedgeHangOneHand()
 T Music::OnLedgeHangTwoHands()
 T Music::OnLunged()
 T Music::OnMissionLost()
 T Music::OnMissionStart()
 T Music::OnMissionWon()
 T Music::OnMissionWonDone()
 T Music::OnMobApproachingFar(int)
 T Music::OnMobApproachingNear(int)
 T Music::OnMobSpawn(int, int)
 T Music::OnPZInRange()
 T Music::OnPlayerRestored(CTerrorPlayer*)
 T Music::OnPounceEnded()
 T Music::OnPounced()
 T Music::OnPulledByTongue()
 T Music::OnReleasedByTongue()
 T Music::OnSavedFromLedgeHang()
 T Music::OnSmallAreaRevealed()
 T Music::OnSmokerAlert(int, float)
 T Music::OnSmokerSpawn()
 T Music::OnVomitedUpon()
 T Music::OnWitchAlert(int, float)
 T Music::OnWitchAttackDone()
 T Music::OnWitchAttacking()
 T Music::OnWitchBurning()
 T Music::OnWitchGettingMad()
 T Music::OnWitchKilled()
 T Music::Play(char const*, int, float, bool, bool)
 T Music::PlayInOut(char const*, char const*, int)
 T Music::Precache()
 T Music::PrecacheMusicEvent(char const*)
 T Music::Reset()
 T Music::SendCommand(char const*, char const*, char const*, int)
 T Music::SetPZAlertTimerMins()
 T Music::StopPlaying(char const*, float, bool)
 T Music::Update()
 T Music::UpdateMeters()
 T Music::~Music()
 T MusicMsg(char*, ...)
 T NAI_Hull::Maxs(int)
 T NAI_Hull::Mins(int)
 T NDebugOverlay::Axis(Vector const&, QAngle const&, float, bool, float)
 T NDebugOverlay::Box(Vector const&, Vector const&, Vector const&, int, int, int, int, float)
 T NDebugOverlay::BoxAngles(Vector const&, Vector const&, Vector const&, QAngle const&, int, int, int, int, float)
 T NDebugOverlay::BoxDirection(Vector const&, Vector const&, Vector const&, Vector const&, int, int, int, int, float)
 T NDebugOverlay::Circle(Vector const&, QAngle const&, float, int, int, int, int, bool, float)
 T NDebugOverlay::Circle(Vector const&, Vector const&, Vector const&, float, int, int, int, int, bool, float)
 T NDebugOverlay::Circle(Vector const&, float, int, int, int, int, bool, float)
 T NDebugOverlay::Cone(Vector const&, Vector const&, float, float, int, int, int, int, bool, float)
 T NDebugOverlay::Cross(Vector const&, float, int, int, int, bool, float)
 T NDebugOverlay::Cross3D(Vector const&, Vector const&, Vector const&, int, int, int, bool, float)
 T NDebugOverlay::Cross3D(Vector const&, float, int, int, int, bool, float)
 T NDebugOverlay::EntityBounds(CBaseEntity const*, int, int, int, int, float)
 T NDebugOverlay::EntityText(int, int, char const*, float, int, int, int, int)
 T NDebugOverlay::EntityTextAtPosition(Vector const&, int, char const*, float, int, int, int, int)
 T NDebugOverlay::HorzArrow(Vector const&, Vector const&, float, int, int, int, int, bool, float)
 T NDebugOverlay::Line(Vector const&, Vector const&, int, int, int, bool, float)
 T NDebugOverlay::ScreenText(float, float, char const*, int, int, int, int, float)
 T NDebugOverlay::Sphere(Vector const&, QAngle const&, float, int, int, int, int, bool, float)
 T NDebugOverlay::Sphere(Vector const&, float, int, int, int, bool, float)
 T NDebugOverlay::SweptBox(Vector const&, Vector const&, Vector const&, Vector const&, QAngle const&, int, int, int, int, float)
 T NDebugOverlay::Text(Vector const&, char const*, bool, float)
 T NDebugOverlay::Triangle(Vector const&, Vector const&, Vector const&, int, int, int, int, bool, float)
 T NDebugOverlay::VertArrow(Vector const&, Vector const&, float, int, int, int, int, bool, float)
 T NPCPhysics_CreateSolver(CAI_BaseNPC*, CBaseEntity*, bool, float)
 T NWCEdit::RememberEntityPosition(CBaseEntity*)
 T NWCEdit::UpdateEntityPosition(CBaseEntity*)
 T NameToNavAttribute(char const*)
 T NarrowEscapeZombieConsideration::operator()(CBaseCombatCharacter*)
 T NavAreaCollector::operator()(CNavArea*)
 T NavAttributeToggler::operator()(CNavArea*)
 T NavDrawDashedLine(Vector const&, Vector const&, NavEditColor)
 T NavDrawFilledTriangle(Vector const&, Vector const&, Vector const&, NavEditColor, bool)
 T NavDrawHorizontalArrow(Vector const&, Vector const&, float, NavEditColor)
 T NavDrawLine(Vector const&, Vector const&, NavEditColor)
 T NavDrawTriangle(Vector const&, Vector const&, Vector const&, NavEditColor)
 T NavEditClearAllAttributes()
 T NavEditClearAttribute(CCommand const&)
 T NavEditMarkAttribute(CCommand const&)
 T NavMeshFactory()
 T NavMeshMergeAutocomplete(char const*, char (*) [64])
 T NearbyCalmInhibitor::operator()(CTerrorPlayer*)
 T NextBotApproacher::NextBotApproacher()
 T NextBotAttackTheIT::operator()(INextBot*)
 T NextBotCombatCharacter::BecomeRagdoll(CTakeDamageInfo const&, Vector const&)
 T NextBotCombatCharacter::DoThink()
 T NextBotCombatCharacter::Event_Killed(CTakeDamageInfo const&)
 T NextBotCombatCharacter::EyePosition()
 T NextBotCombatCharacter::GetDataDescMap()
 T NextBotCombatCharacter::GetEntity() const
 T NextBotCombatCharacter::GetLastAttacker() const
 T NextBotCombatCharacter::GetNextBotCombatCharacter() const
 T NextBotCombatCharacter::GetServerClass()
 T NextBotCombatCharacter::HandleAnimEvent(animevent_t*)
 T NextBotCombatCharacter::Ignite(float, CBaseEntity*)
 T NextBotCombatCharacter::Ignite(float, bool, float, bool)
 T NextBotCombatCharacter::IsAreaTraversable(CNavArea const*) const
 T NextBotCombatCharacter::IsUseableEntity(CBaseEntity*, unsigned int)
 T NextBotCombatCharacter::MyNextBotPointer()
 T NextBotCombatCharacter::NextBotCombatCharacter()
 T NextBotCombatCharacter::OnNavAreaChanged(CNavArea*, CNavArea*)
 T NextBotCombatCharacter::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T NextBotCombatCharacter::OnTakeDamage_Dying(CTakeDamageInfo const&)
 T NextBotCombatCharacter::PerformCustomPhysics(Vector*, Vector*, QAngle*, QAngle*)
 T NextBotCombatCharacter::SetModel(char const*)
 T NextBotCombatCharacter::Spawn()
 T NextBotCombatCharacter::Touch(CBaseEntity*)
 T NextBotCombatCharacter::UseEntity(CBaseEntity*, USE_TYPE)
 T NextBotCombatCharacter::YouForgotToImplementOrDeclareServerClass()
 T NextBotCombatCharacter::~NextBotCombatCharacter()
 T NextBotDestroyer::NextBotDestroyer(int)
 T NextBotDestroyer::operator()(INextBot*)
 T NextBotManager::DebugFilterAdd(char const*)
 T NextBotManager::GetBotUnderCrosshair(CBasePlayer*)
 T NextBotManager::IsDebugFilterMatch(INextBot const*) const
 T NextBotManager::NotifyBeginUpdate(INextBot*)
 T NextBotManager::NotifyEndUpdate(INextBot*)
 T NextBotManager::OnBeginChangeLevel()
 T NextBotManager::OnKilled(CBaseCombatCharacter*, CTakeDamageInfo const&)
 T NextBotManager::OnMapLoaded()
 T NextBotManager::OnRoundRestart()
 T NextBotManager::OnSound(CBaseEntity*, Vector const&, KeyValues*)
 T NextBotManager::OnSpokeConcept(CBaseCombatCharacter*, CAI_Concept, AI_Response*)
 T NextBotManager::OnSurvivorVomitedUpon(CTerrorPlayer*)
 T NextBotManager::Register(INextBot*)
 T NextBotManager::ShouldUpdate(INextBot*)
 T NextBotManager::UnRegister(INextBot*)
 T NextBotManager::Update()
 T NextBotManager::~NextBotManager()
 T NextBotPlayer<CTerrorPlayer>::Event_Killed(CTakeDamageInfo const&)
 T NextBotPlayer<CTerrorPlayer>::HandleAnimEvent(animevent_t*)
 T NextBotPlayer<CTerrorPlayer>::IsAbleToAutoCenterOnLadders() const
 T NextBotPlayer<CTerrorPlayer>::IsBot() const
 T NextBotPlayer<CTerrorPlayer>::IsFakeClient() const
 T NextBotPlayer<CTerrorPlayer>::IsNetClient() const
 T NextBotPlayer<CTerrorPlayer>::IsRemovedOnReset() const
 T NextBotPlayer<CTerrorPlayer>::MyNextBotPointer()
 T NextBotPlayer<CTerrorPlayer>::NextBotPlayer()
 T NextBotPlayer<CTerrorPlayer>::OnMainActivityComplete(Activity, Activity)
 T NextBotPlayer<CTerrorPlayer>::OnMainActivityInterrupted(Activity, Activity)
 T NextBotPlayer<CTerrorPlayer>::OnNavAreaChanged(CNavArea*, CNavArea*)
 T NextBotPlayer<CTerrorPlayer>::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T NextBotPlayer<CTerrorPlayer>::OnTakeDamage_Dying(CTakeDamageInfo const&)
 T NextBotPlayer<CTerrorPlayer>::PhysicsSimulate()
 T NextBotPlayer<CTerrorPlayer>::PressBackwardButton(float)
 T NextBotPlayer<CTerrorPlayer>::PressCrouchButton(float)
 T NextBotPlayer<CTerrorPlayer>::PressFireButton(float)
 T NextBotPlayer<CTerrorPlayer>::PressForwardButton(float)
 T NextBotPlayer<CTerrorPlayer>::PressJumpButton(float)
 T NextBotPlayer<CTerrorPlayer>::PressLeftButton(float)
 T NextBotPlayer<CTerrorPlayer>::PressMeleeButton(float)
 T NextBotPlayer<CTerrorPlayer>::PressReloadButton(float)
 T NextBotPlayer<CTerrorPlayer>::PressRightButton(float)
 T NextBotPlayer<CTerrorPlayer>::PressUseButton(float)
 T NextBotPlayer<CTerrorPlayer>::PressWalkButton(float)
 T NextBotPlayer<CTerrorPlayer>::ReleaseBackwardButton()
 T NextBotPlayer<CTerrorPlayer>::ReleaseCrouchButton()
 T NextBotPlayer<CTerrorPlayer>::ReleaseFireButton()
 T NextBotPlayer<CTerrorPlayer>::ReleaseForwardButton()
 T NextBotPlayer<CTerrorPlayer>::ReleaseJumpButton()
 T NextBotPlayer<CTerrorPlayer>::ReleaseLeftButton()
 T NextBotPlayer<CTerrorPlayer>::ReleaseMeleeButton()
 T NextBotPlayer<CTerrorPlayer>::ReleaseReloadButton()
 T NextBotPlayer<CTerrorPlayer>::ReleaseRightButton()
 T NextBotPlayer<CTerrorPlayer>::ReleaseUseButton()
 T NextBotPlayer<CTerrorPlayer>::ReleaseWalkButton()
 T NextBotPlayer<CTerrorPlayer>::SetButtonScale(float, float)
 T NextBotPlayer<CTerrorPlayer>::Spawn()
 T NextBotPlayer<CTerrorPlayer>::Touch(CBaseEntity*)
 T NextBotPlayer<CTerrorPlayer>::Update()
 T NextBotPlayer<CTerrorPlayer>::Weapon_Drop(CBaseCombatWeapon*, Vector const*, Vector const*)
 T NextBotPlayer<CTerrorPlayer>::Weapon_Equip(CBaseCombatWeapon*)
 T NextBotPlayer<CTerrorPlayer>::~NextBotPlayer()
 T NextBotTraceFilterOnlyActors::GetTraceType() const
 T NextBotTraceFilterOnlyActors::ShouldHitEntity(IHandleEntity*, int)
 T NextBotTraversableTraceFilter::ShouldHitEntity(IHandleEntity*, int)
 T OnAllBotTeamChanged(IConVar*, char const*, float)
 T OnBaseCombatWeaponDestroyed(CBaseCombatWeapon*)
 T OnVomitCollide(CTerrorPlayer*, CBaseEntity*, CBaseEntity*, int, Vector, Vector)
 T OneWayLink_t::Compare(OneWayLink_t const*, OneWayLink_t const*)
 T ParseKeyvalue(void*, typedescription_t*, int, char const*, char const*)
 T ParseParticleEffects(bool)
 T ParticleSmokeGrenade::GetDataDescMap()
 T ParticleSmokeGrenade::GetServerClass()
 T ParticleSmokeGrenade::ParticleSmokeGrenade()
 T ParticleSmokeGrenade::Spawn()
 T ParticleSmokeGrenade::Think()
 T ParticleSmokeGrenade::UpdateTransmitState()
 T ParticleSmokeGrenade::YouForgotToImplementOrDeclareServerClass()
 T ParticleSmokeGrenade::~ParticleSmokeGrenade()
 T Particle_Test_Start(CBasePlayer*, char const*, bool)
 T Particle_Test_Stop(CBasePlayer*, char const*, bool)
 T PassServerEntityFilter(IHandleEntity const*, IHandleEntity const*)
 T Path::AssemblePrecomputedPath(INextBot*, Vector const&, CNavArea*)
 T Path::BuildTrivialPath(INextBot*, Vector const&)
 T Path::CollectAdjacentAreas(CNavArea*)
 T Path::ComputeAreaCrossing(INextBot*, CNavArea const*, Vector const&, CNavArea const*, NavDirType, Vector*) const
 T Path::ComputePathDetails(INextBot*, Vector const&)
 T Path::ComputeWithOpenGoal(INextBot*, IPathCost const&, IPathOpenGoalSelector const&, float)
 T Path::Copy(INextBot*, Path const&)
 T Path::Draw(Path::Segment const*) const
 T Path::DrawInterpolated(float, float)
 T Path::FirstSegment() const
 T Path::GetAge() const
 T Path::GetClosestPosition(Vector const&, Path::Segment const*, float) const
 T Path::GetCurrentGoal() const
 T Path::GetCursorData() const
 T Path::GetCursorPosition() const
 T Path::GetEndPosition() const
 T Path::GetLength() const
 T Path::GetPosition(float, Path::Segment const*) const
 T Path::GetStartPosition() const
 T Path::GetSubject() const
 T Path::InsertSegment(Path::Segment, int)
 T Path::Invalidate()
 T Path::IsValid() const
 T Path::LastSegment() const
 T Path::MoveCursor(float, Path::MoveCursorType)
 T Path::MoveCursorToClosestPosition(Vector const&, Path::SeekType, float) const
 T Path::MoveCursorToEnd()
 T Path::MoveCursorToStart()
 T Path::NextSegment(Path::Segment const*) const
 T Path::OnPathChanged(INextBot*, Path::ResultType)
 T Path::Optimize(INextBot*)
 T Path::Path()
 T Path::PostProcess()
 T Path::PriorSegment(Path::Segment const*) const
 T Path::~Path()
 T PathFindDirection(CPathTrack*, Vector const&, Vector const&)
 T PathFollower::AdjustSpeed(INextBot*)
 T PathFollower::Avoid(INextBot*, Vector const&, Vector const&, Vector const&)
 T PathFollower::CheckProgress(INextBot*)
 T PathFollower::Climbing(INextBot*, Path::Segment const*, Vector const&, Vector const&, float)
 T PathFollower::Draw(Path::Segment const*) const
 T PathFollower::FindBlocker(INextBot*)
 T PathFollower::GetCurrentGoal() const
 T PathFollower::GetHindrance() const
 T PathFollower::Invalidate()
 T PathFollower::IsAtGoal(INextBot*) const
 T PathFollower::IsDiscontinuityAhead(INextBot*, Path::SegmentType, float) const
 T PathFollower::JumpOverGaps(INextBot*, Path::Segment const*, Vector const&, Vector const&, float)
 T PathFollower::LadderUpdate(INextBot*)
 T PathFollower::OnPathChanged(INextBot*, Path::ResultType)
 T PathFollower::PathFollower()
 T PathFollower::SetMinLookAheadDistance(float)
 T PathFollower::Update(INextBot*)
 T PathFollower::~PathFollower()
 T PerformObstaclePushaway(CBaseCombatCharacter*)
 T PhysAddShadow(CBaseEntity*)
 T PhysBreakSound(CBaseEntity*, IPhysicsObject*, Vector)
 T PhysCallbackDamage(CBaseEntity*, CTakeDamageInfo const&)
 T PhysCallbackDamage(CBaseEntity*, CTakeDamageInfo const&, gamevcollisionevent_t&, int)
 T PhysCallbackImpulse(IPhysicsObject*, Vector const&, Vector const&)
 T PhysCallbackRemove(IServerNetworkable*)
 T PhysCleanupFrictionSounds(CBaseEntity*)
 T PhysCollisionDust(gamevcollisionevent_t*, surfacedata_t*)
 T PhysCollisionScreenShake(gamevcollisionevent_t*, int)
 T PhysCollisionSound(CBaseEntity*, IPhysicsObject*, int, int, int, float, float)
 T PhysComputeSlideDirection(IPhysicsObject*, Vector const&, Vector const&, Vector*, Vector*, float)
 T PhysCreateBbox(Vector const&, Vector const&)
 T PhysCreateVirtualTerrain(CBaseEntity*, objectparams_t const&)
 T PhysCreateWorld_Shared(CBaseEntity*, vcollide_t*, objectparams_t const&)
 T PhysDestroyObject(IPhysicsObject*, CBaseEntity*)
 T PhysDisableEntityCollisions(CBaseEntity*, CBaseEntity*)
 T PhysDisableEntityCollisions(IPhysicsObject*, IPhysicsObject*)
 T PhysEnableEntityCollisions(CBaseEntity*, CBaseEntity*)
 T PhysEnableEntityCollisions(IPhysicsObject*, IPhysicsObject*)
 T PhysEnableFloating(IPhysicsObject*, bool)
 T PhysEntityCollisionsAreDisabled(CBaseEntity*, CBaseEntity*)
 T PhysFindOrAddVehicleScript(char const*, vehicleparams_t*, vehiclesounds_t*)
 T PhysFlushVehicleScripts()
 T PhysForceClearVelocity(IPhysicsObject*)
 T PhysFrictionEffect(Vector&, Vector, float, int, int)
 T PhysFrictionEffectPrecache::CResourcePrecacher::Cache(bool, ResourceList_t__*, bool)
 T PhysFrictionSound(CBaseEntity*, IPhysicsObject*, char const*, short&, float)
 T PhysFrictionSound(CBaseEntity*, IPhysicsObject*, float, int, int)
 T PhysGetEntityMass(CBaseEntity*)
 T PhysGetListOfPenetratingEntities(CBaseEntity*, CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >&)
 T PhysGetMassCenterOverride(CBaseEntity*, vcollide_t*, solid_t&)
 T PhysGetTriggerEvent(triggerevent_t*, CBaseEntity*)
 T PhysHasContactWithOtherInDirection(IPhysicsObject*, Vector const&)
 T PhysIsFinalTick()
 T PhysIsInCallback()
 T PhysModelCreate(CBaseEntity*, int, Vector const&, QAngle const&, solid_t*)
 T PhysModelCreateBox(CBaseEntity*, Vector const&, Vector const&, Vector const&, bool)
 T PhysModelCreateCustom(CBaseEntity*, CPhysCollide const*, Vector const&, QAngle const&, char const*, bool, solid_t*)
 T PhysModelCreateOBB(CBaseEntity*, Vector const&, Vector const&, Vector const&, QAngle const&, bool)
 T PhysModelCreateUnmoveable(CBaseEntity*, int, Vector const&, QAngle const&)
 T PhysModelParseSolid(solid_t&, CBaseEntity*, int)
 T PhysModelParseSolidByIndex(solid_t&, CBaseEntity*, int, int)
 T PhysModelParseSolidByIndex(solid_t&, CBaseEntity*, vcollide_t*, int)
 T PhysOnCleanupDeleteList()
 T PhysParseSurfaceData(IPhysicsSurfaceProps*, IFileSystem*)
 T PhysRemoveShadow(CBaseEntity*)
 T PhysSetMassCenterOverride(masscenteroverride_t&)
 T PhysSolidOverride(solid_t&, string_t)
 T PhysTeleportConstrainedEntity(CBaseEntity*, IPhysicsObject*, IPhysicsObject*, Vector const&, QAngle const&, bool)
 T PhysicsCommand(CCommand const&, void (*)(CBaseEntity*))
 T PhysicsDamage::operator()(CTerrorPlayer*)
 T PhysicsGameSystem()
 T PhysicsSplash(IPhysicsFluidController*, IPhysicsObject*, CBaseEntity*)
 T Physics_RunThinkFunctions(bool)
 T Physics_SimulateEntity(CBaseEntity*)
 T PickTankProjectileForGround(int)
 T Pickup_DefaultPhysGunLaunchVelocity(Vector const&, float)
 T Pickup_ForcePlayerToDropThisObject(CBaseEntity*)
 T Pickup_GetPreferredCarryAngles(CBaseEntity*, CBasePlayer*, matrix3x4_t&, QAngle&)
 T Pickup_OnPhysGunDrop(CBaseEntity*, CBasePlayer*, PhysGunDrop_t)
 T PlaceDirectory::AddPlace(unsigned int)
 T PlaceDirectory::Load(CUtlBuffer&, int)
 T PlaceDirectory::Save(CUtlBuffer&)
 T PlaceDirectory::~PlaceDirectory()
 T PlayLockSounds(CBaseEntity*, locksound_t*, int, int)
 T PlayReloadSoundEffects(CTerrorPlayer*, int, CTerrorGun*, WeaponSound_t)
 T PlayerBody::AimHeadTowards(CBaseEntity*, IBody::LookAtPriorityType, float, INextBotReply*, char const*)
 T PlayerBody::AimHeadTowards(Vector const&, IBody::LookAtPriorityType, float, INextBotReply*, char const*)
 T PlayerBody::GetActivity() const
 T PlayerBody::GetActualPosture() const
 T PlayerBody::GetArousal() const
 T PlayerBody::GetCrouchHullHeight() const
 T PlayerBody::GetDesiredPosture() const
 T PlayerBody::GetEntity()
 T PlayerBody::GetEyePosition() const
 T PlayerBody::GetHeadSteadyDuration() const
 T PlayerBody::GetHullHeight() const
 T PlayerBody::GetHullMaxs() const
 T PlayerBody::GetHullMins() const
 T PlayerBody::GetHullWidth() const
 T PlayerBody::GetMaxHeadAngularVelocity() const
 T PlayerBody::GetSolidMask() const
 T PlayerBody::GetStandHullHeight() const
 T PlayerBody::GetViewVector() const
 T PlayerBody::HasActivityType(unsigned int) const
 T PlayerBody::IsActivity(Activity) const
 T PlayerBody::IsActualPosture(IBody::PostureType) const
 T PlayerBody::IsArousal(IBody::ArousalType) const
 T PlayerBody::IsDesiredPosture(IBody::PostureType) const
 T PlayerBody::IsHeadAimingOnTarget() const
 T PlayerBody::IsHeadSteady() const
 T PlayerBody::IsInDesiredPosture() const
 T PlayerBody::IsPostureChanging() const
 T PlayerBody::IsPostureMobile() const
 T PlayerBody::PlayerBody(INextBot*)
 T PlayerBody::Reset()
 T PlayerBody::SetArousal(IBody::ArousalType)
 T PlayerBody::SetDesiredPosture(IBody::PostureType)
 T PlayerBody::SetPosition(Vector const&)
 T PlayerBody::StartActivity(Activity, unsigned int)
 T PlayerBody::Upkeep()
 T PlayerBody::~PlayerBody()
 T PlayerCollector::operator()(CBasePlayer*)
 T PlayerLocomotion::AdjustPosture(Vector const&)
 T PlayerLocomotion::Approach(Vector const&, float)
 T PlayerLocomotion::ApproachAscendingLadder()
 T PlayerLocomotion::ApproachDescendingLadder()
 T PlayerLocomotion::AscendLadder()
 T PlayerLocomotion::ClimbLadder(CNavLadder const*, CNavArea const*)
 T PlayerLocomotion::ClimbUpToLedge(Vector const&, Vector const&, CBaseEntity const*)
 T PlayerLocomotion::DescendLadder()
 T PlayerLocomotion::DescendLadder(CNavLadder const*, CNavArea const*)
 T PlayerLocomotion::DismountLadderTop()
 T PlayerLocomotion::DriveTo(Vector const&)
 T PlayerLocomotion::FaceTowards(Vector const&)
 T PlayerLocomotion::GetDeathDropHeight() const
 T PlayerLocomotion::GetDesiredLean() const
 T PlayerLocomotion::GetDesiredSpeed() const
 T PlayerLocomotion::GetFeet() const
 T PlayerLocomotion::GetGround() const
 T PlayerLocomotion::GetGroundNormal() const
 T PlayerLocomotion::GetMaxAcceleration() const
 T PlayerLocomotion::GetMaxDeceleration() const
 T PlayerLocomotion::GetMaxJumpHeight() const
 T PlayerLocomotion::GetRunSpeed() const
 T PlayerLocomotion::GetStepHeight() const
 T PlayerLocomotion::GetVelocity() const
 T PlayerLocomotion::GetWalkSpeed() const
 T PlayerLocomotion::IsAbleToAutoCenterOnLadder() const
 T PlayerLocomotion::IsAscendingOrDescendingLadder() const
 T PlayerLocomotion::IsClimbPossible(INextBot*, CBaseEntity const*) const
 T PlayerLocomotion::IsClimbingOrJumping() const
 T PlayerLocomotion::IsClimbingUpToLedge() const
 T PlayerLocomotion::IsJumpingAcrossGap() const
 T PlayerLocomotion::IsOnGround() const
 T PlayerLocomotion::IsRunning() const
 T PlayerLocomotion::IsUsingLadder() const
 T PlayerLocomotion::Jump()
 T PlayerLocomotion::JumpAcrossGap(Vector const&, Vector const&)
 T PlayerLocomotion::PlayerLocomotion(INextBot*)
 T PlayerLocomotion::Reset()
 T PlayerLocomotion::Run()
 T PlayerLocomotion::SetDesiredLean(QAngle const&)
 T PlayerLocomotion::SetDesiredSpeed(float)
 T PlayerLocomotion::SetMaximumSpeedLimit(float)
 T PlayerLocomotion::SetMinimumSpeedLimit(float)
 T PlayerLocomotion::Stop()
 T PlayerLocomotion::TraverseLadder()
 T PlayerLocomotion::Update()
 T PlayerLocomotion::Walk()
 T PlayerLocomotion::~PlayerLocomotion()
 T PlayerMove()
 T PlayerPickupControllerIsHoldingEntity(CBaseEntity*, CBaseEntity*)
 T PlayerPickupGetHeldObjectMass(CBaseEntity*, IPhysicsObject*)
 T PlayerReport::GetAccuracy() const
 T PlayerReport::GetHeadshotAccuracy() const
 T PlayerReport::GetTotalDamageTaken() const
 T PlayerReport::NotePlayerInjury(CTerrorPlayer*)
 T PlayerReport::OnCheckpointReached()
 T PlayerReport::OnDeath(CTerrorPlayer*)
 T PlayerReport::OnFinaleWon()
 T PlayerReport::PlayerReport(int, int, int, bool)
 T PlayerReport::Print(CBasePlayer*, char const*) const
 T PlayerReport::PrintCheckpoint(char const*) const
 T PlayerReport::PrintClear(char const*) const
 T PlayerReport::PrintFriendlyFire(char const*) const
 T PlayerReport::PrintInjuries(char const*) const
 T PlayerReport::PrintKillers(char const*) const
 T PlayerReport::PrintMedic(char const*) const
 T PlayerReport::PrintSkill(char const*) const
 T PlayerReport::PrintVictims(char const*) const
 T PlayerReport::PrintWins(char const*) const
 T PlayerReport::RecordTimeAlive()
 T PlayerReport::~PlayerReport()
 T PlayerReportDump::operator()(PlayerReport const*)
 T PlayerReporter::CreateAwardTemplatesForPlayer(CTerrorPlayer*)
 T PlayerReporter::CreateOrFindCurrentReport(CTerrorPlayer*)
 T PlayerReporter::FireGameEvent(IGameEvent*)
 T PlayerReporter::OnFirstSpawnForMission(CTerrorPlayer*)
 T PlayerReporter::OnGameOver(CTerrorPlayer*)
 T PlayerReporter::OnMissionAborted(CTerrorPlayer*)
 T PlayerReporter::OnMissionLost(CTerrorPlayer*)
 T PlayerReporter::OnMissionStarted(CTerrorPlayer*)
 T PlayerReporter::OnMissionWon(CTerrorPlayer*)
 T PlayerReporter::OnPlayerDisconnected(CTerrorPlayer*)
 T PlayerReporter::PlayerReporter()
 T PlayerReporter::RecalcRating()
 T PlayerReporter::~PlayerReporter()
 T PlayerSaveData::ChangeToDeadOnTeam(int)
 T PlayerSaveData::GiveWeapon(CTerrorPlayer*, CSWeaponID, KeyValues*)
 T PlayerSaveData::PlayerSaveData(CTerrorPlayer*, char const*)
 T PlayerSaveData::Restore(CTerrorPlayer*)
 T PlayerSaveData::RestoreModelData(CTerrorPlayer*)
 T PlayerSaveData::SetWeapon(CSWeaponID, CTerrorWeapon*)
 T PlayerZombieCandidateCollector::ShuffleOrder()
 T PlayerZombieCandidateCollector::operator()(CBasePlayer*)
 T PointOnLineNearestPoint(Vector const&, Vector const&, Vector const&)
 T PositionSort(CSurvivorPosition* const*, CSurvivorPosition* const*)
 T PostProcessSystem()
 T PounceStumbleNearbySurvivors::operator()(CTerrorPlayer*)
 T PrecacheCustomResponseSystem(char const*)
 T PrecacheEffect(char const*)
 T PrecacheFileWeaponInfoDatabase(IFileSystem*, unsigned char const*)
 T PrecacheInfectedFromPlace(CBaseAnimating*, char const*, KeyValues*, CUtlVector<char const*, CUtlMemory<char const*, int> >*, CUtlVector<char const*, CUtlMemory<char const*, int> >*)
 T PrecacheInfectedModels(CBaseAnimating*, CUtlVector<char const*, CUtlMemory<char const*, int> >*, CUtlVector<char const*, CUtlMemory<char const*, int> >*)
 T PrecacheInstancedScene(char const*)
 T PrecacheMaterial(char const*)
 T PrecacheParticleSystem(char const*)
 T PrecachePhysicsSounds()
 T PrecachePlayerModelAndMaterials(CBaseAnimating*, char const*, CUtlVector<char const*, CUtlMemory<char const*, int> >*)
 T PrecachePointCommentaryNodePrecache::CResourcePrecacher::Cache(bool, ResourceList_t__*, bool)
 T PrecachePointTemplates()
 T PrecacheStandardParticleSystems()
 T PrecacheTransitionedWeaponSpawnModels()
 T PrecacheVGuiScreen(char const*)
 T PressAltFireButtonReply::OnSuccess(INextBot*)
 T PressFireButtonReply::OnSuccess(INextBot*)
 T ProcessQueryCacheUpdate(QueryCacheUpdateRecord_t&)
 T PropBreakableCapEdictsOnCreateAll(int, IPhysicsObject*, breakablepropparams_t const&, CBaseEntity*, int)
 T PropBreakableCreateAll(int, IPhysicsObject*, Vector const&, QAngle const&, Vector const&, Vector const&, float, float, int, CBaseEntity*, bool)
 T PropBreakableCreateAll(int, IPhysicsObject*, breakablepropparams_t const&, CBaseEntity*, int, bool, bool)
 T PropBreakablePrecacheAll(string_t)
 T PropIsGib(CBaseEntity*)
 T ProximityCheck::operator()(CBasePlayer*)
 T PunchVictim::GetName() const
 T PunchVictim::OnAnimationEvent(Infected*, animevent_t*)
 T PunchVictim::OnCommandAttack(Infected*, CBaseEntity*)
 T PunchVictim::OnContact(Infected*, CBaseEntity*, CGameTrace*)
 T PunchVictim::OnStart(Infected*, Action<Infected>*)
 T PunchVictim::PunchVictim(InfectedAttack*, CBaseEntity*)
 T PunchVictim::Update(Infected*, float)
 T PunchVictim::~PunchVictim()
 T Q_log2(unsigned int)
 T QuaternionAlign(Quaternion const&, Quaternion const&, Quaternion&)
 T QuaternionAngleDiff(Quaternion const&, Quaternion const&)
 T QuaternionAngles(Quaternion const&, QAngle&)
 T QuaternionAngles(Quaternion const&, RadianEuler&)
 T QuaternionBlend(Quaternion const&, Quaternion const&, float, Quaternion&)
 T QuaternionBlendNoAlign(Quaternion const&, Quaternion const&, float, Quaternion&)
 T QuaternionIdentityBlend(Quaternion const&, float, Quaternion&)
 T QuaternionMatrix(Quaternion const&, Vector const&, matrix3x4_t&)
 T QuaternionMatrix(Quaternion const&, matrix3x4_t&)
 T QuaternionMult(Quaternion const&, Quaternion const&, Quaternion&)
 T QuaternionNormalize(Quaternion&)
 T QuaternionScale(Quaternion const&, float, Quaternion&)
 T QuaternionSlerp(Quaternion const&, Quaternion const&, float, Quaternion&)
 T QuaternionSlerpNoAlign(Quaternion const&, Quaternion const&, float, Quaternion&)
 T QueryCacheEntry_t::IssueQuery()
 T QueryCacheKey_t::Matches(QueryCacheKey_t const*) const
 T RadiusDamage(CTakeDamageInfo const&, Vector const&, float, int, CBaseEntity*)
 T RadiusSelect::operator()(CNavArea*)
 T RagdollActivate(ragdoll_t&, vcollide_t*, int, bool)
 T RagdollApplyAnimationAsVelocity(ragdoll_t&, matrix3x4_t const*, matrix3x4_t const*, float)
 T RagdollCreate(ragdoll_t&, ragdollparams_t const&, IPhysicsEnvironment*)
 T RagdollDestroy(ragdoll_t&)
 T RagdollGetBoneMatrix(ragdoll_t const&, CBoneAccessor&, int)
 T RagdollIsAsleep(ragdoll_t const&)
 T RagdollSetupCollisions(ragdoll_t&, vcollide_t*, int)
 T RagdollSolveSeparation(ragdoll_t&, CBaseEntity*)
 T Ragdoll_GetAngleOverrideString(char*, int, CBaseEntity*)
 T Ragdoll_GetRagdoll(CBaseEntity*)
 T Ragdoll_IsPropRagdoll(CBaseEntity*)
 T RandomInterval(interval_t const&)
 T Ray_t::Init(Vector const&, Vector const&, Vector const&, Vector const&)
 T ReadDMXHeader(CUtlBuffer&, char*, int, int&, char*, int, int&)
 T ReadEncryptedKVFile(IFileSystem*, char const*, unsigned char const*)
 T ReadInterval(char const*)
 T ReadUsercmd(bf_read*, CUserCmd*, CUserCmd*)
 T ReadWeaponDataFromFileForSlot(IFileSystem*, char const*, unsigned short*, unsigned char const*)
 T RecognizedActor::RecognizedActor(CBaseCombatCharacter*)
 T RecognizedActor::UpdateAudible()
 T RecognizedActor::UpdateVisible()
 T ReconnectMergedArea(CUtlDict<CNavArea*, int>&, KeyValues*, NavDirType, char const*)
 T RecreateTransitionedEntities(KeyValues*)
 T RecreateTransitionedPlayers(KeyValues*)
 T RegisterHapticMessages()
 T RegisterTerrorActivities()
 T RegisterUserMessages()
 T RegisterViewmodelActivities()
 T RegisterWeaponActivities()
 T ReleaseInstancedRegistry(IRegistry*)
 T RemapViewAngles(ViewSmoothingData_t*, QAngle&)
 T RemoveActorFromScriptedScenes(CBaseFlex*, bool, bool, char const*)
 T RemoveBotControl()
 T RemoveItems(CCommand const&)
 T RemoveTransitioningPlayerRecord(int)
 T ReportDump::operator()(PlayerReport const*)
 T ReportPositionChanged(CBaseEntity*)
 T ReportVPhysicsStateChanged(IPhysicsObject*, CBaseEntity*, bool)
 T RescueAreaCollector::operator()(CNavArea*)
 T ResetGlobalState()
 T ResetTransitionedEntities()
 T ResetTransitionedSurvivors()
 T ResetWindspeed()
 T RespawnEntities()
 T Response::Response(Response const&)
 T Response::~Response()
 T ResponseGroup::ResponseGroup(ResponseGroup const&)
 T ResponseGroup::operator=(ResponseGroup const&)
 T ResponseRulePartition::GetDictForCriteria(AI_CriteriaSet const&)
 T ResponseRulePartition::GetDictForRule(CResponseSystem*, Rule*)
 T RestoreGlobalState(CSaveRestoreData*)
 T RestoreTransitionedEntities()
 T RestoreTransitionedSurvivorBots()
 T RetreatPathBuilder::CollectAdjacentAreas(CNavArea*)
 T RetreatPathBuilder::ComputePath()
 T RetreatPathBuilder::Cost(CNavArea*, CNavArea*, CNavLadder const*)
 T RetreatPathBuilder::RetreatPathBuilder(INextBot*, CBaseEntity*, float)
 T RocketTrail::GetDataDescMap()
 T RocketTrail::GetServerClass()
 T RocketTrail::RocketTrail()
 T RocketTrail::YouForgotToImplementOrDeclareServerClass()
 T RocketTrail::~RocketTrail()
 T RotationDelta(QAngle const&, QAngle const&, QAngle*)
 T RotationDeltaAxisAngle(QAngle const&, QAngle const&, Vector&, float&)
 T Rule::RecursiveGetValueForRuleCriterionByName(CResponseSystem*, Criteria const*, char const*)
 T Rule::Rule(Rule const&)
 T Rule::operator=(Rule const&)
 T Rule::~Rule()
 T SENTENCEG_GetIndex(char const*)
 T SENTENCEG_Init()
 T SENTENCEG_Lookup(char const*)
 T SENTENCEG_PlayRndI(edict_t*, int, float, soundlevel_t, int, int)
 T SENTENCEG_PlayRndSz(edict_t*, char const*, float, soundlevel_t, int, int)
 T SENTENCEG_PlaySequentialSz(edict_t*, char const*, float, soundlevel_t, int, int, int, int)
 T SaveGlobalState(CSaveRestoreData*)
 T SaveInit(int)
 T SavedEntity::PostSpawn(CBaseEntity*)
 T SavedEntity::PreSpawn(CBaseEntity*)
 T SavedEntity::Recreate()
 T SavedEntity::SavedEntity(CBaseEntity*)
 T SavedEntity::~SavedEntity()
 T SavedTerrorGun::PostSpawn(CBaseEntity*)
 T SavedTerrorGun::PreSpawn(CBaseEntity*)
 T SavedTerrorGun::SavedTerrorGun(CTerrorGun*)
 T SavedTerrorGun::~SavedTerrorGun()
 T SavedWeapon::PostSpawn(CBaseEntity*)
 T SavedWeapon::SavedWeapon(CWeaponCSBase*)
 T SavedWeapon::~SavedWeapon()
 T SavedWeaponSpawn::PostSpawn(CBaseEntity*)
 T SavedWeaponSpawn::PreSpawn(CBaseEntity*)
 T SavedWeaponSpawn::SavedWeaponSpawn(CWeaponSpawn*)
 T SavedWeaponSpawn::~SavedWeaponSpawn()
 T ScalarDeltaMeter::UpdateMeter(float, float, float, bool, bool)
 T ScalarDeltaMeter::UpdateMeterMax(float, float, bool, bool)
 T ScaleBones(CStudioHdr const*, Quaternion*, Vector*, int, float, int)
 T ScavengeScan::ChooseItem(CBaseEntity*, CSWeaponID, float)
 T ScavengeScan::EnumList(scavengelist_t*, int)
 T SceneManager_ClientActive(CBasePlayer*)
 T Scene_Printf(char const*, ...)
 T ScrimmageUpdate::ScrimmageUpdate()
 T SealCheckpointCheck::operator()(CTerrorPlayer*)
 T SeatPrioritySort(CPassengerSeatTransition const*, CPassengerSeatTransition const*)
 T SeedRandSIMD(unsigned int)
 T SelectDeathPoseActivityAndFrame(CBaseAnimating*, CTakeDamageInfo const&, int, Activity&, int&, bool)
 T SelectHeaviestSequence(CStudioHdr*, int)
 T SelectModelByPopulation(char const*, CUtlVector<char const*, CUtlMemory<char const*, int> >&)
 T SelectOverlappingAreas::operator()(CNavArea*)
 T SelectWeightedSequence(CStudioHdr*, int, int)
 T Selector::operator()(INextBot*)
 T SendProp::SendProp()
 T SendProp::~SendProp()
 T SendPropAngle(char*, int, int, int, int, void (*)(SendProp const*, void const*, void const*, DVariant*, int, int))
 T SendPropArray3(char*, int, int, int, SendProp, void* (*)(SendProp const*, void const*, void const*, CSendProxyRecipients*, int))
 T SendPropBool(char*, int, int)
 T SendPropDataTable(char*, int, SendTable*, void* (*)(SendProp const*, void const*, void const*, CSendProxyRecipients*, int))
 T SendPropEHandle(char*, int, int, int, void (*)(SendProp const*, void const*, void const*, DVariant*, int, int))
 T SendPropExclude(char*, char*)
 T SendPropFloat(char*, int, int, int, int, float, float, void (*)(SendProp const*, void const*, void const*, DVariant*, int, int))
 T SendPropInt(char*, int, int, int, int, void (*)(SendProp const*, void const*, void const*, DVariant*, int, int))
 T SendPropIntWithMinusOneFlag(char*, int, int, int, void (*)(SendProp const*, void const*, void const*, DVariant*, int, int))
 T SendPropQAngles(char*, int, int, int, int, void (*)(SendProp const*, void const*, void const*, DVariant*, int, int))
 T SendPropString(char*, int, int, int, void (*)(SendProp const*, void const*, void const*, DVariant*, int, int))
 T SendPropStringT(char*, int, int)
 T SendPropTime(char*, int, int)
 T SendPropUtlVector(char*, int, int, void (*)(void*, int, int), int, SendProp, void* (*)(SendProp const*, void const*, void const*, CSendProxyRecipients*, int))
 T SendPropVector(char*, int, int, int, int, float, float, void (*)(SendProp const*, void const*, void const*, DVariant*, int, int))
 T SendPropVectorXY(char*, int, int, int, int, float, float, void (*)(SendProp const*, void const*, void const*, DVariant*, int, int))
 T SendProxyArrayLength_PlayerArray(void const*, int)
 T SendProxy_AngleToFloat(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_Angles(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_AnimTime(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_CSGameRules(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_ClientSideAnimation(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_Color32ToInt32(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_CropFlagsToPlayerFlagBitsLength(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_DataTablePtrToDataTable(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_DataTableToDataTable(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_EHandleToInt(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_FishAngle(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_FlexWeights(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_FloatToFloat(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_FuncRotatingAngle(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_FuncRotatingOrigin(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_FuncRotatingSimulationTime(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_Health(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_InfectedAngle(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_Int16ToInt32(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_Int32ToInt32(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_Int8ToInt32(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_IntAddOne(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_LengthTable(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_OnlyToTeam(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_Origin(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_OriginXY(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_OriginZ(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_PlayerList(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_QAngles(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_SendActiveLocalWeaponDataTable(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_SendBaseCombatCharacterLocalDataTable(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_SendLocalDataTable(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_SendLocalWeaponDataTable(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_SendNonLocalDataTable(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_ShortAddOne(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_SimulationTime(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_StringT_To_String(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_StringToString(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_String_tToString(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_TeamplayRoundBasedRules(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_TerrorGameRules(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_TestProxyToggle(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_UInt16ToInt32(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_UInt32ToInt32(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_UInt8ToInt32(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_UtlVectorElement(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_UtlVectorElement_DataTable(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_UtlVectorLength(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_VectorToVector(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendTable::Construct(SendProp*, int, char*)
 T SendTable::SendTable()
 T SendTable::SendTable(SendProp*, int, char*)
 T SendTable::~SendTable()
 T ServiceEventQueue()
 T SetActivityForSequence(CStudioHdr*, int)
 T SetBodygroup(CStudioHdr*, int&, int, int)
 T SetDebugBits(CBasePlayer*, char const*, int)
 T SetEventIndexForSequence(mstudioseqdesc_t&)
 T SetHumanTeamFunctor::SetHumanTeamFunctor(int)
 T SetHumanTeamFunctor::operator()(CBasePlayer*)
 T SetIdentityMatrix(matrix3x4_t&)
 T SetNeedToRestoreTransitionedEntities(bool)
 T SetSerializationDelimiter(CUtlCharConversion*)
 T SetSpecTarget(CCommand const&)
 T SetTransitionedLandmark(char const*, Vector const&)
 T SetVisibility::operator()(TerrorNavArea*)
 T SetupLightNormalFromProps(QAngle const&, float, float, Vector&)
 T SetupMatrixAngles(QAngle const&)
 T SetupParentsForSpawnList(int, HierarchicalSpawn_t*)
 T SharedRandomFloat(char const*, float, float, int)
 T SharedRandomInt(char const*, int, int, int)
 T SharedVehicleViewSmoothing(CBasePlayer*, Vector*, QAngle*, bool, bool, Vector const&, ViewSmoothingData_t*, float*)
 T ShiftSet::operator()(CNavArea*)
 T ShouldGib(Infected*, CTakeDamageInfo const&)
 T ShouldRemoveThisRagdoll(CBaseAnimating*)
 T ShowViewPortPanelToAll(char const*, bool, KeyValues*)
 T SignbitsForPlane(cplane_t*)
 T SimThink_EntityChanged(CBaseEntity*)
 T SimThink_ListCopy(CBaseEntity**, int)
 T SimThink_ListCount()
 T SlerpBones(CStudioHdr const*, Quaternion*, Vector*, mstudioseqdesc_t&, int, QuaternionAligned const*, Vector const*, float, int)
 T SlerpBonesSpeedy(CStudioHdr const*, QuaternionAligned*, Vector*, mstudioseqdesc_t&, int, QuaternionAligned const*, Vector const*, float, int)
 T SmokeTrail::GetDataDescMap()
 T SmokeTrail::GetServerClass()
 T SmokeTrail::KeyValue(char const*, char const*)
 T SmokeTrail::SmokeTrail()
 T SmokeTrail::YouForgotToImplementOrDeclareServerClass()
 T SmokeTrail::~SmokeTrail()
 T Smoker* NextBotCreatePlayerBot<Smoker>(char const*)
 T Smoker::AllocatePlayerEntity(edict_t*, char const*)
 T Smoker::CanBeA(ZombieClassType) const
 T Smoker::GetBodyInterface() const
 T Smoker::GetDataDescMap()
 T Smoker::GetEntity() const
 T Smoker::GetIntentionInterface() const
 T Smoker::GetLocomotionInterface() const
 T Smoker::GetServerClass()
 T Smoker::GetVisionInterface() const
 T Smoker::IsAbleToBreak(CBaseEntity const*) const
 T Smoker::Precache()
 T Smoker::Smoker()
 T Smoker::Spawn()
 T Smoker::YouForgotToImplementOrDeclareServerClass()
 T Smoker::~Smoker()
 T SmokerAttack::GetName() const
 T SmokerAttack::OnCommandApproach(Smoker*, Vector const&, float)
 T SmokerAttack::OnCommandAttack(Smoker*, CBaseEntity*)
 T SmokerAttack::OnContact(Smoker*, CBaseEntity*, CGameTrace*)
 T SmokerAttack::OnInjured(Smoker*, CTakeDamageInfo const&)
 T SmokerAttack::OnShoved(Smoker*, CBaseEntity*)
 T SmokerAttack::OnStart(Smoker*, Action<Smoker>*)
 T SmokerAttack::SmokerAttack()
 T SmokerAttack::Update(Smoker*, float)
 T SmokerAttack::~SmokerAttack()
 T SmokerBehavior::GetName() const
 T SmokerBehavior::InitialContainedAction(Smoker*)
 T SmokerBehavior::OnContact(Smoker*, CBaseEntity*, CGameTrace*)
 T SmokerBehavior::Update(Smoker*, float)
 T SmokerBehavior::~SmokerBehavior()
 T SmokerIntention::FirstContainedResponder() const
 T SmokerIntention::Reset()
 T SmokerIntention::SmokerIntention(INextBot*)
 T SmokerIntention::Update()
 T SmokerIntention::~SmokerIntention()
 T SmokerLocomotion::IsAreaTraversable(CNavArea const*) const
 T SmokerLocomotion::IsEntityTraversable(CBaseEntity*, ILocomotion::TraverseWhenType) const
 T SmokerLocomotion::Reset()
 T SmokerLocomotion::SmokerLocomotion(INextBot*)
 T SmokerLocomotion::Update()
 T SmokerLocomotion::~SmokerLocomotion()
 T SmokerMoveToAttackPosition::ComputePath(Smoker*)
 T SmokerMoveToAttackPosition::GetName() const
 T SmokerMoveToAttackPosition::OnStart(Smoker*, Action<Smoker>*)
 T SmokerMoveToAttackPosition::OnStuck(Smoker*)
 T SmokerMoveToAttackPosition::SmokerMoveToAttackPosition(CTerrorPlayer*)
 T SmokerMoveToAttackPosition::Update(Smoker*, float)
 T SmokerMoveToAttackPosition::~SmokerMoveToAttackPosition()
 T SmokerPathCost::operator()(CNavArea*, CNavArea*, CNavLadder const*, CFuncElevator const*, float) const
 T SmokerRetreatToCover::GetName() const
 T SmokerRetreatToCover::OnInjured(Smoker*, CTakeDamageInfo const&)
 T SmokerRetreatToCover::OnMoveToFailure(Smoker*, Path const*, MoveToFailureType)
 T SmokerRetreatToCover::OnMoveToSuccess(Smoker*, Path const*)
 T SmokerRetreatToCover::OnShoved(Smoker*, CBaseEntity*)
 T SmokerRetreatToCover::OnStart(Smoker*, Action<Smoker>*)
 T SmokerRetreatToCover::Update(Smoker*, float)
 T SmokerRetreatToCover::~SmokerRetreatToCover()
 T SmokerTongueVictim::GetName() const
 T SmokerTongueVictim::OnStart(Smoker*, Action<Smoker>*)
 T SmokerTongueVictim::SmokerTongueVictim(CTerrorPlayer*)
 T SmokerTongueVictim::Update(Smoker*, float)
 T SmokerTongueVictim::~SmokerTongueVictim()
 T SndPlayInOut(CCommand const&)
 T SoundCommandLessFunc(SoundCommand_t* const&, SoundCommand_t* const&)
 T SoundEmitterSystem()
 T SpawnAllEntities(int, HierarchicalSpawn_t*, bool)
 T SpawnBackgroundZombies(int, bool)
 T SpawnBlood(Vector, Vector const&, int, float)
 T SpawnHierarchicalList(int, HierarchicalSpawn_t*, bool)
 T SpawnablePZScan::operator()(CTerrorPlayer*)
 T Spline_Normalize(Vector const&, Vector const&, Vector const&, Vector const&, Vector&, Vector&)
 T SplitContext(char const*, char*, int, char*, int, float*, char const*)
 T SporeExplosion::GetDataDescMap()
 T SporeExplosion::GetServerClass()
 T SporeExplosion::InputDisable(inputdata_t&)
 T SporeExplosion::InputEnable(inputdata_t&)
 T SporeExplosion::Spawn()
 T SporeExplosion::SporeExplosion()
 T SporeExplosion::YouForgotToImplementOrDeclareServerClass()
 T SporeExplosion::~SporeExplosion()
 T SporeTrail::GetDataDescMap()
 T SporeTrail::GetServerClass()
 T SporeTrail::SporeTrail()
 T SporeTrail::YouForgotToImplementOrDeclareServerClass()
 T SporeTrail::~SporeTrail()
 T StandardFilterRules(IHandleEntity*, int)
 T StayOnFloor(CGameTrace*, float)
 T Steam3Server()
 T StrLessInsensitive(char const* const&, char const* const&)
 T StrLessSensitive(char const* const&, char const* const&)
 T StringAfterPrefix(char const*, char const*)
 T StringSort(char const* const*, char const* const*)
 T StringToSkill(char const*)
 T Studio_AlignIKMatrix(matrix3x4_t&, Vector const&)
 T Studio_AnimMovement(mstudioanimdesc_t*, float, float, Vector&, QAngle&)
 T Studio_AnimPosition(mstudioanimdesc_t*, float, Vector&, QAngle&)
 T Studio_BoneIndexByName(CStudioHdr const*, char const*)
 T Studio_BuildMatrices(CStudioHdr const*, QAngle const&, Vector const&, Vector const*, Quaternion const*, int, matrix3x4_t*, int)
 T Studio_CPS(CStudioHdr const*, mstudioseqdesc_t&, int, float const*)
 T Studio_CalcBoneToBoneTransform(CStudioHdr const*, int, int, matrix3x4_t&)
 T Studio_CreateBoneCache(bonecacheparams_t&)
 T Studio_DestroyBoneCache(memhandle_t__*)
 T Studio_Duration(CStudioHdr const*, int, float const*)
 T Studio_FindAttachment(CStudioHdr const*, char const*)
 T Studio_GetBoneCache(memhandle_t__*, bool)
 T Studio_GetDefaultSurfaceProps(CStudioHdr*)
 T Studio_GetKeyValueText(CStudioHdr const*, int)
 T Studio_GetMass(CStudioHdr*)
 T Studio_GetPoseParameter(CStudioHdr const*, int, float)
 T Studio_IKAnimationError(CStudioHdr const*, mstudioikrule_t*, mstudioanimdesc_t const*, float, Vector&, Quaternion&, float&)
 T Studio_IKRuleWeight(mstudioikrule_t&, mstudioanimdesc_t const*, float, int&, float&)
 T Studio_IKSequenceError(CStudioHdr const*, mstudioseqdesc_t&, int, float, int, float const*, mstudioanimdesc_t**, float*, ikcontextikrule_t&)
 T Studio_InvalidateBoneCache(memhandle_t__*)
 T Studio_LocalPoseParameter(CStudioHdr const*, float const*, mstudioseqdesc_t&, int, int, float&, int&)
 T Studio_SeqAnims(CStudioHdr const*, mstudioseqdesc_t&, int, float const*, mstudioanimdesc_t**, float*)
 T Studio_SeqMovement(CStudioHdr const*, int, float, float, float const*, Vector&, QAngle&)
 T Studio_SetController(CStudioHdr const*, int, float, float&)
 T Studio_SetPoseParameter(CStudioHdr const*, int, float, float&)
 T Studio_SolveIK(int, int, int, Vector&, Vector&, Vector&, matrix3x4_t*)
 T Studio_SolveIK(int, int, int, Vector&, matrix3x4_t*)
 T Studio_SolveIK(mstudioikchain_t*, Vector&, matrix3x4_t*)
 T Subdivider::SubdivideX(CNavArea*, bool, bool, int)
 T Subdivider::SubdivideY(CNavArea*, bool, bool, int)
 T SurvivorAmbushBoomer::GetName() const
 T SurvivorAmbushBoomer::IsHindrance(INextBot const*, CBaseEntity*) const
 T SurvivorAmbushBoomer::OnStartUse(SurvivorBot*)
 T SurvivorAmbushBoomer::ShouldGiveUp(SurvivorBot*) const
 T SurvivorAmbushBoomer::ShouldHurry(INextBot const*) const
 T SurvivorAmbushBoomer::SurvivorAmbushBoomer(CBaseEntity*)
 T SurvivorAmbushBoomer::~SurvivorAmbushBoomer()
 T SurvivorAttack::EquipBestWeapon(SurvivorBot*) const
 T SurvivorAttack::FireWeapon(SurvivorBot*)
 T SurvivorAttack::GetName() const
 T SurvivorAttack::IsHindrance(INextBot const*, CBaseEntity*) const
 T SurvivorAttack::OnContact(SurvivorBot*, CBaseEntity*, CGameTrace*)
 T SurvivorAttack::OnEnd(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorAttack::OnInjured(SurvivorBot*, CTakeDamageInfo const&)
 T SurvivorAttack::OnShoved(SurvivorBot*, CBaseEntity*)
 T SurvivorAttack::OnStart(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorAttack::OnSuspend(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorAttack::OnThreatChanged(SurvivorBot*, CBaseEntity*)
 T SurvivorAttack::SelectTarget(SurvivorBot*)
 T SurvivorAttack::ShouldHurry(INextBot const*) const
 T SurvivorAttack::Update(SurvivorBot*, float)
 T SurvivorAttack::~SurvivorAttack()
 T SurvivorBehavior::GetName() const
 T SurvivorBehavior::InitialContainedAction(SurvivorBot*)
 T SurvivorBehavior::IsHindrance(INextBot const*, CBaseEntity*) const
 T SurvivorBehavior::OnCommandApproach(SurvivorBot*, Vector const&, float)
 T SurvivorBehavior::OnContact(SurvivorBot*, CBaseEntity*, CGameTrace*)
 T SurvivorBehavior::OnIgnite(SurvivorBot*)
 T SurvivorBehavior::OnInjured(SurvivorBot*, CTakeDamageInfo const&)
 T SurvivorBehavior::OnNavAreaChanged(SurvivorBot*, CNavArea*, CNavArea*)
 T SurvivorBehavior::OnOtherKilled(SurvivorBot*, CBaseCombatCharacter*, CTakeDamageInfo const&)
 T SurvivorBehavior::OnPickUp(SurvivorBot*, CBaseEntity*, CBaseCombatCharacter*)
 T SurvivorBehavior::OnResume(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorBehavior::OnShoved(SurvivorBot*, CBaseEntity*)
 T SurvivorBehavior::OnSight(SurvivorBot*, CBaseEntity*)
 T SurvivorBehavior::OnSpokeConcept(SurvivorBot*, CBaseCombatCharacter*, CAI_Concept, AI_Response*)
 T SurvivorBehavior::OnStart(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorBehavior::OnThreatChanged(SurvivorBot*, CBaseEntity*)
 T SurvivorBehavior::SelectCloserThreat(CTerrorPlayer const*, CBaseCombatCharacter*, CBaseCombatCharacter*) const
 T SurvivorBehavior::SelectMoreDangerousThreat(INextBot const*, CBaseCombatCharacter const*, CBaseCombatCharacter*, CBaseCombatCharacter*) const
 T SurvivorBehavior::SelectTargetPoint(INextBot const*, CBaseCombatCharacter const*) const
 T SurvivorBehavior::ShouldHurry(INextBot const*) const
 T SurvivorBehavior::Update(SurvivorBot*, float)
 T SurvivorBehavior::~SurvivorBehavior()
 T SurvivorBody::GetMaxHeadAngularVelocity() const
 T SurvivorBody::SurvivorBody(INextBot*)
 T SurvivorBody::Upkeep()
 T SurvivorBody::~SurvivorBody()
 T SurvivorBot* NextBotCreatePlayerBot<SurvivorBot>(char const*)
 T SurvivorBot::AcknowledgeFriendsAttention()
 T SurvivorBot::AllocatePlayerEntity(edict_t*, char const*)
 T SurvivorBot::EnforceProximityToHumans()
 T SurvivorBot::EquipWeapon()
 T SurvivorBot::Event_Killed(CTakeDamageInfo const&)
 T SurvivorBot::FindScavengeItem(float) const
 T SurvivorBot::GetAvoidRange(CBaseEntity*) const
 T SurvivorBot::GetBodyInterface() const
 T SurvivorBot::GetDataDescMap()
 T SurvivorBot::GetDebugIdentifier() const
 T SurvivorBot::GetEntity() const
 T SurvivorBot::GetIntentionInterface() const
 T SurvivorBot::GetLocomotionInterface() const
 T SurvivorBot::GetPace() const
 T SurvivorBot::GetServerClass()
 T SurvivorBot::GetTeamSituation() const
 T SurvivorBot::GetVisionInterface() const
 T SurvivorBot::InhibitFlashlight(float)
 T SurvivorBot::InitialSpawn()
 T SurvivorBot::InteractWithUsables(Action<SurvivorBot>*)
 T SurvivorBot::IsAbleToBreak(CBaseEntity const*) const
 T SurvivorBot::IsAbleToCoverFriend(CTerrorPlayer*) const
 T SurvivorBot::IsAheadOf(CTerrorPlayer*) const
 T SurvivorBot::IsAvailable() const
 T SurvivorBot::IsBehind(CTerrorPlayer*) const
 T SurvivorBot::IsNearCheckpoint() const
 T SurvivorBot::IsReachable(CBaseEntity*) const
 T SurvivorBot::IsReachable(CNavArea*, CNavArea*) const
 T SurvivorBot::IsReachable(CTerrorPlayer*) const
 T SurvivorBot::IsReachableNeighbor(CNavArea*, CNavArea*, bool) const
 T SurvivorBot::LookAround()
 T SurvivorBot::LookAtRandomSpot()
 T SurvivorBot::Maintain()
 T SurvivorBot::MaintainWeaponry()
 T SurvivorBot::ModifyOrAppendCriteria(AI_CriteriaSet&)
 T SurvivorBot::MySurvivorBotPointer() const
 T SurvivorBot::OnAwardEarned(AwardType, CBaseEntity*)
 T SurvivorBot::OnBeginChangeLevel(char const*, KeyValues*)
 T SurvivorBot::OnNavAreaChanged(CNavArea*, CNavArea*)
 T SurvivorBot::OnPlayerDisconnected(CTerrorPlayer*)
 T SurvivorBot::OnTeamChanged(int)
 T SurvivorBot::PhysicsSimulate()
 T SurvivorBot::QueryReachableCache(CNavArea*, CNavArea*) const
 T SurvivorBot::QueryReachableCacheNeighbor(CNavArea*, CNavArea*) const
 T SurvivorBot::RescueImmobilizedFriends(Action<SurvivorBot>*)
 T SurvivorBot::ResetHumanSpectator()
 T SurvivorBot::ResolveStuckSituation(Path*)
 T SurvivorBot::SaveFriendsInImmediateTrouble(Action<SurvivorBot>*)
 T SurvivorBot::Say(char const*, SurvivorBot::SayPriorityType, float, CBaseCombatCharacter*)
 T SurvivorBot::ScavengeNearbyItems(Action<SurvivorBot>*)
 T SurvivorBot::SetHumanSpectator(CTerrorPlayer*)
 T SurvivorBot::SetHumanSpectatorByUserID(int, char const*)
 T SurvivorBot::Spawn()
 T SurvivorBot::SurvivorBot()
 T SurvivorBot::TestPosition(Vector const&, CBaseEntity*)
 T SurvivorBot::TryLeaveCheckpoint(Action<SurvivorBot>*)
 T SurvivorBot::Update()
 T SurvivorBot::UpdateEscapePath()
 T SurvivorBot::UpdateTeamSituation()
 T SurvivorBot::UseHealingItems(Action<SurvivorBot>*)
 T SurvivorBot::Weapon_Switch(CBaseCombatWeapon*, int)
 T SurvivorBot::YouForgotToImplementOrDeclareServerClass()
 T SurvivorBot::~SurvivorBot()
 T SurvivorBotMeleeOnReply::OnSuccess(INextBot*)
 T SurvivorBotPathCost::operator()(CNavArea*, CNavArea*, CNavLadder const*, CFuncElevator const*, float) const
 T SurvivorBotPlaceholderCount::operator()(CTerrorPlayer*)
 T SurvivorBotUseOnReply::OnSuccess(INextBot*)
 T SurvivorCharacterDisplayName(SurvivorCharacterType)
 T SurvivorCharacterName(SurvivorCharacterType)
 T SurvivorCheckpointLeaving::GetName() const
 T SurvivorCheckpointLeaving::InitialContainedAction(SurvivorBot*)
 T SurvivorCheckpointLeaving::OnContact(SurvivorBot*, CBaseEntity*, CGameTrace*)
 T SurvivorCheckpointLeaving::OnEnd(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorCheckpointLeaving::OnPickUp(SurvivorBot*, CBaseEntity*, CBaseCombatCharacter*)
 T SurvivorCheckpointLeaving::OnResume(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorCheckpointLeaving::OnStart(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorCheckpointLeaving::ShouldPickUp(INextBot const*, CBaseEntity*) const
 T SurvivorCheckpointLeaving::Update(SurvivorBot*, float)
 T SurvivorCheckpointLeaving::~SurvivorCheckpointLeaving()
 T SurvivorCheckpointReached::GetName() const
 T SurvivorCheckpointReached::InitialContainedAction(SurvivorBot*)
 T SurvivorCheckpointReached::OnEnd(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorCheckpointReached::OnResume(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorCheckpointReached::OnStart(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorCheckpointReached::ShouldPickUp(INextBot const*, CBaseEntity*) const
 T SurvivorCheckpointReached::Update(SurvivorBot*, float)
 T SurvivorCheckpointReached::~SurvivorCheckpointReached()
 T SurvivorCloseDoor::GetName() const
 T SurvivorCloseDoor::InitialContainedAction(SurvivorBot*)
 T SurvivorCloseDoor::OnEnd(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorCloseDoor::OnResume(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorCloseDoor::OnStart(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorCloseDoor::SurvivorCloseDoor(CBasePropDoor*)
 T SurvivorCloseDoor::Update(SurvivorBot*, float)
 T SurvivorCloseDoor::~SurvivorCloseDoor()
 T SurvivorCollectObject::GetName() const
 T SurvivorCollectObject::InitialContainedAction(SurvivorBot*)
 T SurvivorCollectObject::OnMoveToFailure(SurvivorBot*, Path const*, MoveToFailureType)
 T SurvivorCollectObject::ShouldGiveUp(SurvivorBot*) const
 T SurvivorCollectObject::SurvivorCollectObject(CBaseEntity*)
 T SurvivorCollectObject::~SurvivorCollectObject()
 T SurvivorDebugApproach::GetName() const
 T SurvivorDebugApproach::IsHindrance(INextBot const*, CBaseEntity*) const
 T SurvivorDebugApproach::OnCommandApproach(SurvivorBot*, CBaseEntity*)
 T SurvivorDebugApproach::OnCommandApproach(SurvivorBot*, Vector const&, float)
 T SurvivorDebugApproach::OnEnd(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorDebugApproach::OnStart(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorDebugApproach::ShouldHurry(INextBot const*) const
 T SurvivorDebugApproach::Update(SurvivorBot*, float)
 T SurvivorDebugApproach::~SurvivorDebugApproach()
 T SurvivorDislodgeVictim::GetName() const
 T SurvivorDislodgeVictim::GetUsePoint(SurvivorBot*, CBaseEntity*) const
 T SurvivorDislodgeVictim::InitialContainedAction(SurvivorBot*)
 T SurvivorDislodgeVictim::IsHindrance(INextBot const*, CBaseEntity*) const
 T SurvivorDislodgeVictim::OnContact(SurvivorBot*, CBaseEntity*, CGameTrace*)
 T SurvivorDislodgeVictim::OnInjured(SurvivorBot*, CTakeDamageInfo const&)
 T SurvivorDislodgeVictim::OnStart(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorDislodgeVictim::OnStartUse(SurvivorBot*)
 T SurvivorDislodgeVictim::ShouldGiveUp(SurvivorBot*) const
 T SurvivorDislodgeVictim::ShouldHurry(INextBot const*) const
 T SurvivorDislodgeVictim::SurvivorDislodgeVictim(CBaseEntity*)
 T SurvivorDislodgeVictim::~SurvivorDislodgeVictim()
 T SurvivorElevatorEnter::GetName() const
 T SurvivorElevatorEnter::InitialContainedAction(SurvivorBot*)
 T SurvivorElevatorEnter::OnEnd(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorElevatorEnter::OnResume(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorElevatorEnter::OnStart(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorElevatorEnter::Update(SurvivorBot*, float)
 T SurvivorElevatorEnter::~SurvivorElevatorEnter()
 T SurvivorElevatorRide::GetName() const
 T SurvivorElevatorRide::InitialContainedAction(SurvivorBot*)
 T SurvivorElevatorRide::OnEnd(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorElevatorRide::OnResume(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorElevatorRide::OnStart(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorElevatorRide::Update(SurvivorBot*, float)
 T SurvivorElevatorRide::~SurvivorElevatorRide()
 T SurvivorEscapeFlames::GetName() const
 T SurvivorEscapeFlames::InitialContainedAction(SurvivorBot*)
 T SurvivorEscapeFlames::IsHindrance(INextBot const*, CBaseEntity*) const
 T SurvivorEscapeFlames::OnEnd(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorEscapeFlames::OnIgnite(SurvivorBot*)
 T SurvivorEscapeFlames::OnInjured(SurvivorBot*, CTakeDamageInfo const&)
 T SurvivorEscapeFlames::OnStart(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorEscapeFlames::ShouldHurry(INextBot const*) const
 T SurvivorEscapeFlames::Update(SurvivorBot*, float)
 T SurvivorEscapeFlames::~SurvivorEscapeFlames()
 T SurvivorEscapeLadderAmbush::GetName() const
 T SurvivorEscapeLadderAmbush::InitialContainedAction(SurvivorBot*)
 T SurvivorEscapeLadderAmbush::OnEnd(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorEscapeLadderAmbush::OnStart(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorEscapeLadderAmbush::Update(SurvivorBot*, float)
 T SurvivorEscapeLadderAmbush::~SurvivorEscapeLadderAmbush()
 T SurvivorGivePillsToFriend::GetName() const
 T SurvivorGivePillsToFriend::OnEnd(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorGivePillsToFriend::OnStartUse(SurvivorBot*)
 T SurvivorGivePillsToFriend::SurvivorGivePillsToFriend(CTerrorPlayer*)
 T SurvivorGivePillsToFriend::Update(SurvivorBot*, float)
 T SurvivorGivePillsToFriend::~SurvivorGivePillsToFriend()
 T SurvivorHealFriend::GetName() const
 T SurvivorHealFriend::OnEnd(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorHealFriend::OnInjured(SurvivorBot*, CTakeDamageInfo const&)
 T SurvivorHealFriend::OnStart(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorHealFriend::OnStuck(SurvivorBot*)
 T SurvivorHealFriend::ShouldHurry(INextBot const*) const
 T SurvivorHealFriend::SurvivorHealFriend(CTerrorPlayer*)
 T SurvivorHealFriend::Update(SurvivorBot*, float)
 T SurvivorHealFriend::~SurvivorHealFriend()
 T SurvivorHealSelf::GetName() const
 T SurvivorHealSelf::OnEnd(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorHealSelf::OnInjured(SurvivorBot*, CTakeDamageInfo const&)
 T SurvivorHealSelf::OnShoved(SurvivorBot*, CBaseEntity*)
 T SurvivorHealSelf::OnStart(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorHealSelf::Update(SurvivorBot*, float)
 T SurvivorHealSelf::~SurvivorHealSelf()
 T SurvivorIntention::AddThreat(CBaseCombatCharacter*)
 T SurvivorIntention::FirstContainedResponder() const
 T SurvivorIntention::IsBoomerImmediatelyDangerousTo(CTerrorPlayer const*, CBaseCombatCharacter*) const
 T SurvivorIntention::IsCommonImmediatelyDangerousTo(CTerrorPlayer const*, CBaseCombatCharacter*) const
 T SurvivorIntention::IsDangerousTo(CTerrorPlayer const*, CBaseCombatCharacter*) const
 T SurvivorIntention::IsHunterImmediatelyDangerousTo(CTerrorPlayer const*, CBaseCombatCharacter*) const
 T SurvivorIntention::IsImmediatelyDangerousTo(CTerrorPlayer const*, CBaseCombatCharacter*) const
 T SurvivorIntention::IsPositionAllowed(INextBot const*, Vector const&) const
 T SurvivorIntention::IsSmokerImmediatelyDangerousTo(CTerrorPlayer const*, CBaseCombatCharacter*) const
 T SurvivorIntention::IsTankImmediatelyDangerousTo(CTerrorPlayer const*, CBaseCombatCharacter*) const
 T SurvivorIntention::NextContainedResponder(INextBotEventResponder*) const
 T SurvivorIntention::OnInjured(CTakeDamageInfo const&)
 T SurvivorIntention::OnSound(CBaseEntity*, Vector const&, KeyValues*)
 T SurvivorIntention::Reset()
 T SurvivorIntention::ShouldHurry(INextBot const*) const
 T SurvivorIntention::SurvivorIntention(INextBot*)
 T SurvivorIntention::Update()
 T SurvivorIntention::UpdateThreats()
 T SurvivorIntention::~SurvivorIntention()
 T SurvivorLegsApproach::ComputePath(SurvivorBot*)
 T SurvivorLegsApproach::GetName() const
 T SurvivorLegsApproach::OnResume(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorLegsApproach::OnStart(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorLegsApproach::OnStuck(SurvivorBot*)
 T SurvivorLegsApproach::QueryCurrentPath(INextBot const*) const
 T SurvivorLegsApproach::SurvivorLegsApproach(CBaseEntity*)
 T SurvivorLegsApproach::SurvivorLegsApproach(Vector const&)
 T SurvivorLegsApproach::Update(SurvivorBot*, float)
 T SurvivorLegsApproach::~SurvivorLegsApproach()
 T SurvivorLegsApproachElevator::GetName() const
 T SurvivorLegsApproachElevator::OnStart(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorLegsApproachElevator::OnStuck(SurvivorBot*)
 T SurvivorLegsApproachElevator::QueryCurrentPath(INextBot const*) const
 T SurvivorLegsApproachElevator::Update(SurvivorBot*, float)
 T SurvivorLegsApproachElevator::~SurvivorLegsApproachElevator()
 T SurvivorLegsBattleStations::FindBattleStation(SurvivorBot*, TerrorNavArea*)
 T SurvivorLegsBattleStations::GetName() const
 T SurvivorLegsBattleStations::OnResume(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorLegsBattleStations::OnStart(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorLegsBattleStations::OnStuck(SurvivorBot*)
 T SurvivorLegsBattleStations::QueryCurrentPath(INextBot const*) const
 T SurvivorLegsBattleStations::Update(SurvivorBot*, float)
 T SurvivorLegsBattleStations::~SurvivorLegsBattleStations()
 T SurvivorLegsCoverFriendInCombat::GetName() const
 T SurvivorLegsCoverFriendInCombat::OnStart(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorLegsCoverFriendInCombat::OnStuck(SurvivorBot*)
 T SurvivorLegsCoverFriendInCombat::QueryCurrentPath(INextBot const*) const
 T SurvivorLegsCoverFriendInCombat::SurvivorLegsCoverFriendInCombat(CTerrorPlayer*)
 T SurvivorLegsCoverFriendInCombat::Update(SurvivorBot*, float)
 T SurvivorLegsCoverFriendInCombat::~SurvivorLegsCoverFriendInCombat()
 T SurvivorLegsCoverOrphan::GetName() const
 T SurvivorLegsCoverOrphan::OnMoveToFailure(SurvivorBot*, Path const*, MoveToFailureType)
 T SurvivorLegsCoverOrphan::OnStart(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorLegsCoverOrphan::OnStuck(SurvivorBot*)
 T SurvivorLegsCoverOrphan::QueryCurrentPath(INextBot const*) const
 T SurvivorLegsCoverOrphan::SurvivorLegsCoverOrphan(CTerrorPlayer*)
 T SurvivorLegsCoverOrphan::Update(SurvivorBot*, float)
 T SurvivorLegsCoverOrphan::~SurvivorLegsCoverOrphan()
 T SurvivorLegsEnterRescueVehicle::GetName() const
 T SurvivorLegsEnterRescueVehicle::OnResume(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorLegsEnterRescueVehicle::OnStart(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorLegsEnterRescueVehicle::OnStuck(SurvivorBot*)
 T SurvivorLegsEnterRescueVehicle::QueryCurrentPath(INextBot const*) const
 T SurvivorLegsEnterRescueVehicle::Update(SurvivorBot*, float)
 T SurvivorLegsEnterRescueVehicle::~SurvivorLegsEnterRescueVehicle()
 T SurvivorLegsMeetRescueVehicleArrival::GetName() const
 T SurvivorLegsMeetRescueVehicleArrival::OnResume(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorLegsMeetRescueVehicleArrival::OnStart(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorLegsMeetRescueVehicleArrival::OnStuck(SurvivorBot*)
 T SurvivorLegsMeetRescueVehicleArrival::QueryCurrentPath(INextBot const*) const
 T SurvivorLegsMeetRescueVehicleArrival::Update(SurvivorBot*, float)
 T SurvivorLegsMeetRescueVehicleArrival::~SurvivorLegsMeetRescueVehicleArrival()
 T SurvivorLegsMoveOn::GetName() const
 T SurvivorLegsMoveOn::MoveTowardsNextCheckpoint(SurvivorBot*)
 T SurvivorLegsMoveOn::OnResume(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorLegsMoveOn::OnStart(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorLegsMoveOn::OnStuck(SurvivorBot*)
 T SurvivorLegsMoveOn::QueryCurrentPath(INextBot const*) const
 T SurvivorLegsMoveOn::Update(SurvivorBot*, float)
 T SurvivorLegsMoveOn::Wait()
 T SurvivorLegsMoveOn::~SurvivorLegsMoveOn()
 T SurvivorLegsRegroup::GetName() const
 T SurvivorLegsRegroup::OnStart(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorLegsRegroup::OnStuck(SurvivorBot*)
 T SurvivorLegsRegroup::QueryCurrentPath(INextBot const*) const
 T SurvivorLegsRegroup::SurvivorLegsRegroup(CTerrorPlayer*)
 T SurvivorLegsRegroup::Update(SurvivorBot*, float)
 T SurvivorLegsRegroup::~SurvivorLegsRegroup()
 T SurvivorLegsRetreat::ComputePath(SurvivorBot*)
 T SurvivorLegsRetreat::GetName() const
 T SurvivorLegsRetreat::IsHindrance(INextBot const*, CBaseEntity*) const
 T SurvivorLegsRetreat::OnCommandRetreat(SurvivorBot*, CBaseEntity*, float)
 T SurvivorLegsRetreat::OnResume(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorLegsRetreat::OnStart(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorLegsRetreat::QueryCurrentPath(INextBot const*) const
 T SurvivorLegsRetreat::ShouldHurry(INextBot const*) const
 T SurvivorLegsRetreat::SurvivorLegsRetreat(CBaseEntity*)
 T SurvivorLegsRetreat::Update(SurvivorBot*, float)
 T SurvivorLegsRetreat::~SurvivorLegsRetreat()
 T SurvivorLegsStayClose::GetName() const
 T SurvivorLegsStayClose::InitialContainedAction(SurvivorBot*)
 T SurvivorLegsStayClose::OnCommandPause(SurvivorBot*, float)
 T SurvivorLegsStayClose::OnCommandRetreat(SurvivorBot*, CBaseEntity*, float)
 T SurvivorLegsStayClose::OnNavAreaChanged(SurvivorBot*, CNavArea*, CNavArea*)
 T SurvivorLegsStayClose::OnResume(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorLegsStayClose::OnStart(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorLegsStayClose::OnStuck(SurvivorBot*)
 T SurvivorLegsStayClose::SurvivorLegsStayClose()
 T SurvivorLegsStayClose::Update(SurvivorBot*, float)
 T SurvivorLegsStayClose::~SurvivorLegsStayClose()
 T SurvivorLegsWait::GetName() const
 T SurvivorLegsWait::OnCommandPause(SurvivorBot*, float)
 T SurvivorLegsWait::OnCommandResume(SurvivorBot*)
 T SurvivorLegsWait::OnStart(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorLegsWait::OnSuspend(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorLegsWait::SurvivorLegsWait(float)
 T SurvivorLegsWait::Update(SurvivorBot*, float)
 T SurvivorLegsWait::~SurvivorLegsWait()
 T SurvivorLiberateBesiegedFriend::GetName() const
 T SurvivorLiberateBesiegedFriend::InitialContainedAction(SurvivorBot*)
 T SurvivorLiberateBesiegedFriend::IsHindrance(INextBot const*, CBaseEntity*) const
 T SurvivorLiberateBesiegedFriend::OnContact(SurvivorBot*, CBaseEntity*, CGameTrace*)
 T SurvivorLiberateBesiegedFriend::OnEnd(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorLiberateBesiegedFriend::OnInjured(SurvivorBot*, CTakeDamageInfo const&)
 T SurvivorLiberateBesiegedFriend::OnShoved(SurvivorBot*, CBaseEntity*)
 T SurvivorLiberateBesiegedFriend::OnStart(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorLiberateBesiegedFriend::OnThreatChanged(SurvivorBot*, CBaseEntity*)
 T SurvivorLiberateBesiegedFriend::SelectMoreDangerousThreat(INextBot const*, CBaseCombatCharacter const*, CBaseCombatCharacter*, CBaseCombatCharacter*) const
 T SurvivorLiberateBesiegedFriend::ShouldHurry(INextBot const*) const
 T SurvivorLiberateBesiegedFriend::SurvivorLiberateBesiegedFriend(CTerrorPlayer*, Action<SurvivorBot>*)
 T SurvivorLiberateBesiegedFriend::Update(SurvivorBot*, float)
 T SurvivorLiberateBesiegedFriend::~SurvivorLiberateBesiegedFriend()
 T SurvivorLocomotion::Approach(Vector const&, float)
 T SurvivorLocomotion::IsAreaTraversable(CNavArea const*) const
 T SurvivorLocomotion::IsEntityTraversable(CBaseEntity*, ILocomotion::TraverseWhenType) const
 T SurvivorLocomotion::IsScrambling() const
 T SurvivorLocomotion::Reset()
 T SurvivorLocomotion::SurvivorLocomotion(INextBot*)
 T SurvivorLocomotion::Update()
 T SurvivorLocomotion::~SurvivorLocomotion()
 T SurvivorMultiplierCounter::operator()(CBasePlayer*)
 T SurvivorPathCost::operator()(CNavArea*, CNavArea*, CNavLadder const*, CFuncElevator const*, float)
 T SurvivorReplacement::Restore(CTerrorPlayer*, CTerrorPlayer*)
 T SurvivorReplacement::Save(CTerrorPlayer*)
 T SurvivorRescueBarricadedFriend::GetName() const
 T SurvivorRescueBarricadedFriend::InitialContainedAction(SurvivorBot*)
 T SurvivorRescueBarricadedFriend::ShouldGiveUp(SurvivorBot*) const
 T SurvivorRescueBarricadedFriend::SurvivorRescueBarricadedFriend(CBaseEntity*)
 T SurvivorRescueBarricadedFriend::~SurvivorRescueBarricadedFriend()
 T SurvivorResponseCachedInfo::Update()
 T SurvivorReviveFriend::GetName() const
 T SurvivorReviveFriend::GetUsePoint(SurvivorBot*, CBaseEntity*) const
 T SurvivorReviveFriend::GetUseRange(SurvivorBot*, CBaseEntity*) const
 T SurvivorReviveFriend::InitialContainedAction(SurvivorBot*)
 T SurvivorReviveFriend::IsUseFinished(SurvivorBot*) const
 T SurvivorReviveFriend::OnInjured(SurvivorBot*, CTakeDamageInfo const&)
 T SurvivorReviveFriend::OnStart(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorReviveFriend::OnStartUse(SurvivorBot*)
 T SurvivorReviveFriend::OnThreatChanged(SurvivorBot*, CBaseEntity*)
 T SurvivorReviveFriend::ShouldGiveUp(SurvivorBot*) const
 T SurvivorReviveFriend::ShouldHurry(INextBot const*) const
 T SurvivorReviveFriend::SurvivorReviveFriend(CTerrorPlayer*)
 T SurvivorReviveFriend::Update(SurvivorBot*, float)
 T SurvivorReviveFriend::~SurvivorReviveFriend()
 T SurvivorTakePills::GetName() const
 T SurvivorTakePills::OnEnd(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorTakePills::OnStart(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorTakePills::Update(SurvivorBot*, float)
 T SurvivorTakePills::~SurvivorTakePills()
 T SurvivorTeamSituation::FindOrphan()
 T SurvivorTeamSituation::GetClosestReachableFriend() const
 T SurvivorTeamSituation::GetDistanceToFriend(CTerrorPlayer*) const
 T SurvivorTeamSituation::GetFriendClosestTo(CBaseEntity*, SurvivorTeamSituation::CloseFriendType) const
 T SurvivorTeamSituation::GetPathToFriend(CTerrorPlayer*) const
 T SurvivorTeamSituation::GetRandomVisibleFriend() const
 T SurvivorTeamSituation::GetTimeSinceAnyFriendVisible() const
 T SurvivorTeamSituation::IsAnyTeammateNearCheckpoint() const
 T SurvivorTeamSituation::IsSurvivingTeamAllBots() const
 T SurvivorTeamSituation::MarkFriendAsVisible(CTerrorPlayer*)
 T SurvivorTeamSituation::OnBeginIteration()
 T SurvivorTeamSituation::OnEndIteration(bool)
 T SurvivorTeamSituation::Reset()
 T SurvivorTeamSituation::SurvivorTeamSituation(SurvivorBot*)
 T SurvivorTeamSituation::operator()(CTerrorPlayer*)
 T SurvivorUseObject::GetName() const
 T SurvivorUseObject::GetUsePoint(SurvivorBot*, CBaseEntity*) const
 T SurvivorUseObject::GetUseRange(SurvivorBot*, CBaseEntity*) const
 T SurvivorUseObject::IsUseFinished(SurvivorBot*) const
 T SurvivorUseObject::IsUseStarted(SurvivorBot*) const
 T SurvivorUseObject::OnEnd(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorUseObject::OnInjured(SurvivorBot*, CTakeDamageInfo const&)
 T SurvivorUseObject::OnResume(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorUseObject::OnStart(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorUseObject::OnStartUse(SurvivorBot*)
 T SurvivorUseObject::OnStuck(SurvivorBot*)
 T SurvivorUseObject::OnSuspend(SurvivorBot*, Action<SurvivorBot>*)
 T SurvivorUseObject::ShouldGiveUp(SurvivorBot*) const
 T SurvivorUseObject::SurvivorUseObject(CBaseEntity*)
 T SurvivorUseObject::Update(SurvivorBot*, float)
 T SurvivorUseObject::~SurvivorUseObject()
 T SurvivorVision::GetDefaultFieldOfView() const
 T SurvivorVision::GetFieldOfView() const
 T SurvivorVision::GetMaxVisionRange() const
 T SurvivorVision::GetMinRecognizeTime() const
 T SurvivorVision::IsIgnored(CBaseEntity*) const
 T SurvivorVision::IsNoticed(CBaseEntity*) const
 T SurvivorVision::Reset()
 T SurvivorVision::SetFieldOfView(float)
 T SurvivorVision::SurvivorVision(INextBot*)
 T SurvivorVision::~SurvivorVision()
 T SurvivorsInSafeArea::operator()(CBasePlayer*)
 T SurvivorsInSafeExitArea::operator()(CBasePlayer*)
 T SweepBoxToStudio(IPhysicsSurfaceProps*, Ray_t const&, CStudioHdr*, mstudiohitboxset_t*, matrix3x4_t**, int, CGameTrace&)
 T TE_ArmorRicochet(IRecipientFilter&, float, Vector const*, Vector const*)
 T TE_BSPDecal(IRecipientFilter&, float, Vector const*, int, int)
 T TE_BeamEntPoint(IRecipientFilter&, float, int, Vector const*, int, Vector const*, int, int, int, int, float, float, float, int, float, int, int, int, int, int)
 T TE_BeamEnts(IRecipientFilter&, float, int, int, int, int, int, int, float, float, float, int, float, int, int, int, int, int)
 T TE_BeamFollow(IRecipientFilter&, float, int, int, int, float, float, float, float, float, float, float, float)
 T TE_BeamLaser(IRecipientFilter&, float, int, int, int, int, int, int, float, float, float, int, float, int, int, int, int, int)
 T TE_BeamPoints(IRecipientFilter&, float, Vector const*, Vector const*, int, int, int, int, float, float, float, int, float, int, int, int, int, int)
 T TE_BeamRing(IRecipientFilter&, float, int, int, int, int, int, int, float, float, int, float, int, int, int, int, int, int)
 T TE_BeamRingPoint(IRecipientFilter&, float, Vector const&, float, float, int, int, int, int, float, float, int, float, int, int, int, int, int, int)
 T TE_BeamSpline(IRecipientFilter&, float, int, Vector*)
 T TE_BloodSprite(IRecipientFilter&, float, Vector const*, Vector const*, int, int, int, int, int)
 T TE_BloodStream(IRecipientFilter&, float, Vector const*, Vector const*, int, int, int, int, int)
 T TE_BreakModel(IRecipientFilter&, float, Vector const&, QAngle const&, Vector const&, Vector const&, int, int, int, float, int)
 T TE_BubbleTrail(IRecipientFilter&, float, Vector const*, Vector const*, float, int, int, float)
 T TE_Bubbles(IRecipientFilter&, float, Vector const*, Vector const*, float, int, int, float)
 T TE_ClientProjectile(IRecipientFilter&, float, Vector const*, Vector const*, int, int, CBaseEntity*)
 T TE_Decal(IRecipientFilter&, float, Vector const*, Vector const*, int, int, int)
 T TE_Dust(IRecipientFilter&, float, Vector const&, Vector const&, float, float)
 T TE_DynamicLight(IRecipientFilter&, float, Vector const*, int, int, int, int, float, float, float)
 T TE_EnergySplash(IRecipientFilter&, float, Vector const*, Vector const*, bool)
 T TE_Explosion(IRecipientFilter&, float, Vector const*, int, float, int, int, int, int, Vector const*, unsigned char)
 T TE_FireBullets(int, Vector const&, QAngle const&, int, int, int, float)
 T TE_Fizz(IRecipientFilter&, float, CBaseEntity const*, int, int, int)
 T TE_FootprintDecal(IRecipientFilter&, float, Vector const*, Vector const*, int, int, unsigned char)
 T TE_GlowSprite(IRecipientFilter&, float, Vector const*, int, float, float, int)
 T TE_KillPlayerAttachments(IRecipientFilter&, float, int)
 T TE_LargeFunnel(IRecipientFilter&, float, Vector const*, int, int)
 T TE_MetalSparks(IRecipientFilter&, float, Vector const*, Vector const*)
 T TE_MuzzleFlash(IRecipientFilter&, float, Vector const&, QAngle const&, float, int)
 T TE_PhysicsProp(IRecipientFilter&, float, int, int, Vector const&, QAngle const&, Vector const&, int, int)
 T TE_PlayerAnimEvent(CBasePlayer*, PlayerAnimEvent_t, int)
 T TE_PlayerDecal(IRecipientFilter&, float, Vector const*, int, int)
 T TE_ProjectDecal(IRecipientFilter&, float, Vector const*, QAngle const*, float, int)
 T TE_ShatterSurface(IRecipientFilter&, float, Vector const*, QAngle const*, Vector const*, Vector const*, float, float, float, ShatterSurface_t, int, int, int, int, int, int)
 T TE_ShowLine(IRecipientFilter&, float, Vector const*, Vector const*)
 T TE_Smoke(IRecipientFilter&, float, Vector const*, int, float, int)
 T TE_Sparks(IRecipientFilter&, float, Vector const*, int, int, Vector const*)
 T TE_Sprite(IRecipientFilter&, float, Vector const*, int, float, int)
 T TE_SpriteSpray(IRecipientFilter&, float, Vector const*, Vector const*, int, int, float, int)
 T TE_TutorLesson(CBasePlayer*, TutorLessonType, CBaseEntity*)
 T TE_WorldDecal(IRecipientFilter&, float, Vector const*, int)
 T Tank* NextBotCreatePlayerBot<Tank>(char const*)
 T Tank::AllocatePlayerEntity(edict_t*, char const*)
 T Tank::CanBeA(ZombieClassType) const
 T Tank::EnterStasis()
 T Tank::Event_Killed(CTakeDamageInfo const&)
 T Tank::GetBodyInterface() const
 T Tank::GetDataDescMap()
 T Tank::GetEntity() const
 T Tank::GetIntentionInterface() const
 T Tank::GetLocomotionInterface() const
 T Tank::GetServerClass()
 T Tank::GetVisionInterface() const
 T Tank::IsAbleToBreak(CBaseEntity const*) const
 T Tank::LeaveStasis()
 T Tank::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T Tank::Precache()
 T Tank::Spawn()
 T Tank::Tank()
 T Tank::YouForgotToImplementOrDeclareServerClass()
 T Tank::~Tank()
 T TankAttack::GetName() const
 T TankAttack::OnCommandApproach(Tank*, Vector const&, float)
 T TankAttack::OnCommandAttack(Tank*, CBaseEntity*)
 T TankAttack::OnContact(Tank*, CBaseEntity*, CGameTrace*)
 T TankAttack::OnInjured(Tank*, CTakeDamageInfo const&)
 T TankAttack::OnMoveToFailure(Tank*, Path const*, MoveToFailureType)
 T TankAttack::OnMoveToSuccess(Tank*, Path const*)
 T TankAttack::OnShoved(Tank*, CBaseEntity*)
 T TankAttack::OnStart(Tank*, Action<Tank>*)
 T TankAttack::OnStuck(Tank*)
 T TankAttack::OnUnStuck(Tank*)
 T TankAttack::TankAttack()
 T TankAttack::TryToThrowRock(Tank*)
 T TankAttack::Update(Tank*, float)
 T TankAttack::~TankAttack()
 T TankBehavior::GetName() const
 T TankBehavior::InitialContainedAction(Tank*)
 T TankBehavior::OnContact(Tank*, CBaseEntity*, CGameTrace*)
 T TankBehavior::Update(Tank*, float)
 T TankBehavior::~TankBehavior()
 T TankIdle::GetName() const
 T TankIdle::OnCommandApproach(Tank*, Vector const&, float)
 T TankIdle::OnCommandAttack(Tank*, CBaseEntity*)
 T TankIdle::OnContact(Tank*, CBaseEntity*, CGameTrace*)
 T TankIdle::OnInjured(Tank*, CTakeDamageInfo const&)
 T TankIdle::OnShoved(Tank*, CBaseEntity*)
 T TankIdle::OnStart(Tank*, Action<Tank>*)
 T TankIdle::TankIdle()
 T TankIdle::Update(Tank*, float)
 T TankIdle::~TankIdle()
 T TankIntention::FirstContainedResponder() const
 T TankIntention::Reset()
 T TankIntention::TankIntention(INextBot*)
 T TankIntention::Update()
 T TankIntention::~TankIntention()
 T TankLocomotion::ClimbUpToLedge(Vector const&, Vector const&, CBaseEntity const*)
 T TankLocomotion::GetMaxJumpHeight() const
 T TankLocomotion::IsAreaTraversable(CNavArea const*) const
 T TankLocomotion::IsEntityTraversable(CBaseEntity*, ILocomotion::TraverseWhenType) const
 T TankLocomotion::IsOnGround() const
 T TankLocomotion::OnAnimationActivityComplete(int)
 T TankLocomotion::OnAnimationActivityInterrupted(int)
 T TankLocomotion::Reset()
 T TankLocomotion::TankLocomotion(INextBot*)
 T TankLocomotion::Update()
 T TankLocomotion::~TankLocomotion()
 T TargetScan<CBaseCombatCharacter>::IsPotentialTarget(CBaseCombatCharacter*) const
 T TargetScan<CBaseCombatCharacter>::IsTargetVisible(CBaseCombatCharacter*) const
 T TargetScan<CBaseCombatCharacter>::ViewDot(Vector const&) const
 T TargetScan<CBaseCombatCharacter>::operator()(CBaseCombatCharacter*)
 T TargetScan<CTerrorPlayer>::IsPotentialTarget(CTerrorPlayer*) const
 T TargetScan<CTerrorPlayer>::IsTargetVisible(CTerrorPlayer*) const
 T TargetScan<CTerrorPlayer>::ViewDot(Vector const&) const
 T TargetScan<CTerrorPlayer>::operator()(CTerrorPlayer*)
 T TeamScan::operator()(CBasePlayer*)
 T Templates_Add(CBaseEntity*, char const*, int, int)
 T Templates_FindByIndex(int)
 T Templates_GetEntityIOFixedMapData(int)
 T Templates_GetStringSize(int)
 T Templates_IndexRequiresEntityIOFixup(int)
 T Templates_ReconnectIOForGroup(CPointTemplate*)
 T Templates_RemoveByHammerID(int)
 T Templates_StartUniqueInstance()
 T TerrorAward::GetCategoryFromType(AwardType)
 T TerrorAward::GetResponseNameFromType(AwardType)
 T TerrorAward::GetStatFileNameFromType(AwardType)
 T TerrorEditClearAllAttributes()
 T TerrorEditClearAttribute(CCommand const&)
 T TerrorEditMarkAttribute(CCommand const&)
 T TerrorEditRecomputeFlow(CCommand const&)
 T TerrorEditSelectCliff()
 T TerrorEditSelectInvalidFinaleNoSpawn()
 T TerrorEditSelectWithAttribute(CCommand const&)
 T TerrorEditSetFog()
 T TerrorEditUseFog(CCommand const&)
 T TerrorGetPlayerPointerFromCharacterName(char const*)
 T TerrorMeasureTravelDistance()
 T TerrorNavArea::ComputeVisibility(TerrorNavArea const*, bool) const
 T TerrorNavArea::ComputeVisibilityDelta(TerrorNavArea const*) const
 T TerrorNavArea::CustomAnalysis(bool)
 T TerrorNavArea::Draw() const
 T TerrorNavArea::DrawFlowDelta() const
 T TerrorNavArea::DrawFog(Vector const&, bool) const
 T TerrorNavArea::DrawSelectedSet(Vector const&) const
 T TerrorNavArea::DrawSpawn() const
 T TerrorNavArea::FindRandomSpot() const
 T TerrorNavArea::GetDangerDecayRate() const
 T TerrorNavArea::GetDoor() const
 T TerrorNavArea::GetNextEscapeStep(NavTraverseType*) const
 T TerrorNavArea::InheritAttributes(CNavArea*, CNavArea*)
 T TerrorNavArea::IsAbleToMergeWith(CNavArea*) const
 T TerrorNavArea::IsBottleneck() const
 T TerrorNavArea::IsCleared(CTerrorPlayer*) const
 T TerrorNavArea::IsCompletelyVisible(TerrorNavArea const*) const
 T TerrorNavArea::IsCompletelyVisibleToTeam(int) const
 T TerrorNavArea::IsPartiallyVisible(Vector const&) const
 T TerrorNavArea::IsPotentiallyVisible(TerrorNavArea const*) const
 T TerrorNavArea::IsSpawningAllowed() const
 T TerrorNavArea::IsTerrorMarked() const
 T TerrorNavArea::IsValidForWanderingPopulation() const
 T TerrorNavArea::Load(CUtlBuffer&, unsigned int, unsigned int)
 T TerrorNavArea::MaintainWanderingPopulation()
 T TerrorNavArea::MakeNewTerrorMarker()
 T TerrorNavArea::MarkAreaCleared(CTerrorPlayer*)
 T TerrorNavArea::OnDestroyNotify(CNavArea*)
 T TerrorNavArea::OnEditCreateNotify(CNavArea*)
 T TerrorNavArea::OnEnter(CBaseCombatCharacter*, CNavArea*)
 T TerrorNavArea::OnEnterActiveSet(SurvivorCharacterType)
 T TerrorNavArea::OnExit(CBaseCombatCharacter*, CNavArea*)
 T TerrorNavArea::OnLeaveActiveSet(SurvivorCharacterType)
 T TerrorNavArea::OnRoundRestart()
 T TerrorNavArea::OnRoundRestartPreEntity()
 T TerrorNavArea::OnServerActivate()
 T TerrorNavArea::PostLoad()
 T TerrorNavArea::RemoveSpawnAttributes(unsigned int)
 T TerrorNavArea::RestoreFromSelectedSet(KeyValues*)
 T TerrorNavArea::Save(CUtlBuffer&, unsigned int) const
 T TerrorNavArea::SaveToSelectedSet(KeyValues*) const
 T TerrorNavArea::SetSpawnAttributes(unsigned int)
 T TerrorNavArea::SetupPVS() const
 T TerrorNavArea::SpawnAttributeFromString(char const*)
 T TerrorNavArea::TerrorMark()
 T TerrorNavArea::UpdateBlocked(bool, int)
 T TerrorNavArea::~TerrorNavArea()
 T TerrorNavMesh::AddWalkableSeeds()
 T TerrorNavMesh::CheckpointRoundRestart()
 T TerrorNavMesh::CollectBoundaryAreas()
 T TerrorNavMesh::CommandNavFloodSelect(CCommand const&)
 T TerrorNavMesh::ComputeDirectedFlowDistances(TerrorNavArea::FlowType, TerrorNavArea*, TerrorNavArea*)
 T TerrorNavMesh::ComputeFlowDistances()
 T TerrorNavMesh::CreateArea() const
 T TerrorNavMesh::DestroyArea(CNavArea*) const
 T TerrorNavMesh::FindBreakables(Extent&, bool*, bool*)
 T TerrorNavMesh::FindGoalArea() const
 T TerrorNavMesh::FogPlaceNameAutocomplete(char const*, char (*) [64])
 T TerrorNavMesh::FogPlaceToName(unsigned int) const
 T TerrorNavMesh::GetCheckpoint(Vector const&) const
 T TerrorNavMesh::GetCheckpoint(int) const
 T TerrorNavMesh::GetCheckpointCount() const
 T TerrorNavMesh::GetInitialCheckpoint() const
 T TerrorNavMesh::GetLastCheckpoint() const
 T TerrorNavMesh::GetSubVersionNumber() const
 T TerrorNavMesh::InitializeCheckpoints()
 T TerrorNavMesh::InitializeFlowDistances()
 T TerrorNavMesh::Load()
 T TerrorNavMesh::LoadCustomData(CUtlBuffer&, unsigned int)
 T TerrorNavMesh::LoadCustomDataPreArea(CUtlBuffer&, unsigned int)
 T TerrorNavMesh::LoadFogPlaceDatabase()
 T TerrorNavMesh::MaintainWanderingPopulation()
 T TerrorNavMesh::NameToFogPlace(char const*) const
 T TerrorNavMesh::OnAreaBlocked(CNavArea*)
 T TerrorNavMesh::OnAreaCleared(TerrorNavArea*)
 T TerrorNavMesh::OnAreaUnblocked(CNavArea*)
 T TerrorNavMesh::OnBreakableBroken(CBaseEntity*)
 T TerrorNavMesh::OnBreakableCreated(CBaseEntity*)
 T TerrorNavMesh::OnCheckpointLeft()
 T TerrorNavMesh::OnDoorCreated(CBaseEntity*)
 T TerrorNavMesh::OnEditDestroyNotify(CNavArea*)
 T TerrorNavMesh::OnNodeAdded(CNavNode*)
 T TerrorNavMesh::OnPlayerSpawned(CTerrorPlayer*) const
 T TerrorNavMesh::OnRoundRestart()
 T TerrorNavMesh::OnServerActivate()
 T TerrorNavMesh::PostCustomAnalysis()
 T TerrorNavMesh::PostLoad(unsigned int)
 T TerrorNavMesh::PostLoadEntityScan()
 T TerrorNavMesh::PreLoadAreas(int)
 T TerrorNavMesh::ProcessBreakables()
 T TerrorNavMesh::RecheckBreakableBlockedAreas()
 T TerrorNavMesh::RecomputeFlowDistances()
 T TerrorNavMesh::RemoveNavArea(CNavArea*)
 T TerrorNavMesh::RemoveWanderersInActiveAreaSet()
 T TerrorNavMesh::SaveCustomData(CUtlBuffer&) const
 T TerrorNavMesh::SaveCustomDataPreArea(CUtlBuffer&) const
 T TerrorNavMesh::TerrorEditUseFog(CCommand const&)
 T TerrorNavMesh::TerrorNavMesh()
 T TerrorNavMesh::Update()
 T TerrorNavMesh::UpdateBoundarySpread()
 T TerrorNavMesh::UpdateCheckpoints()
 T TerrorNavMesh::~TerrorNavMesh()
 T TerrorPlaceDirectory::AddPlace(unsigned int)
 T TerrorPlaceDirectory::Load(CUtlBuffer&)
 T TerrorPlaceDirectory::Save(CUtlBuffer&)
 T TerrorPlaceDirectory::~TerrorPlaceDirectory()
 T TestEntityPosition(CBaseEntity*, unsigned int)
 T TestForValidCrouchArea(CNavNode*)
 T TestInViewCone::operator()(CBasePlayer*)
 T TestOverlapping::OverlapsExistingArea()
 T Test_CreateEntity(CCommand const&)
 T Test_InitRandomEntitySpawner(CCommand const&)
 T Test_ProxyToggle_EnableProxy(CCommand const&)
 T Test_ProxyToggle_SetValue(CCommand const&)
 T Test_RandomPlayerPosition()
 T Test_RandomizeInPVS(CCommand const&)
 T Test_RemoveAllRandomEntities()
 T Test_SpawnRandomEntities(CCommand const&)
 T TextToSoundLevel(char const*)
 T TheEscapeRoute()
 T TheLog()
 T TheNextBots()
 T TheTonemapSystem()
 T TheTutor()
 T ThinkSync::ThinkSync(ThinkSync const&)
 T ThreatAreaCollector::operator()(CNavArea*)
 T ThreatSelector::operator()(RecognizedActor const&)
 T TimedEventMgr_LessFunc(CEventRegister* const&, CEventRegister* const&)
 T TimescaleChanged(IConVar*, char const*, float)
 T TongueAttackPositionScan::operator()(CNavArea*)
 T TongueTargetScan<CTerrorPlayer>::IsPotentialTarget(CTerrorPlayer*) const
 T TongueTargetScan<CTerrorPlayer>::IsTargetVisible(CTerrorPlayer*) const
 T TongueTargetScan<CTerrorPlayer>::TongueTargetScan(CTerrorPlayer*, int, float, float)
 T TongueTargetScan<CTerrorPlayer>::operator()(CTerrorPlayer*)
 T TongueTargetScan<CTerrorPlayer>::~TongueTargetScan()
 T TraceAdjacentNode(int, Vector const&, Vector const&, CGameTrace*, float)
 T TraceFilterIgnoreInfected::ShouldHitEntity(IHandleEntity*, int)
 T TraceHull_Door(CBasePropDoor const*, Vector const&, Vector const&, Vector const&, Vector const&, unsigned int, CBaseEntity const*, int, CGameTrace*)
 T TraceOtherPlayerBBox(CTerrorPlayer*, Vector const&, Vector const&, unsigned int, int, CGameTrace&, int*)
 T TracePlayerBBoxForGround(ITraceListData*, Vector const&, Vector const&, Vector const&, Vector const&, unsigned int, ITraceFilter*, CGameTrace&, float, bool, int*)
 T TraceToStudio(IPhysicsSurfaceProps*, Ray_t const&, CStudioHdr*, mstudiohitboxset_t*, matrix3x4_t**, int, CGameTrace&)
 T TraceToStudioGrouped(IPhysicsSurfaceProps*, Ray_t const&, CStudioHdr*, mstudiohitboxset_t*, matrix3x4_t**, int, CGameTrace&, CUtlVector<int, CUtlMemory<int, int> > const&)
 T TrainSpeed(int, int)
 T TransferChildren(CBaseEntity*, CBaseEntity*)
 T TransferPhysicsObject(CBaseEntity*, CBaseEntity*, bool)
 T TransformAABB(matrix3x4_t const&, Vector const&, Vector const&, Vector&, Vector&)
 T TransformAnglesToWorldSpace(QAngle const&, matrix3x4_t const&)
 T TransitionedPlayerCount(int*, int*, int)
 T TransmitShakeEvent(CBasePlayer*, float, float, float, ShakeCommand_t)
 T TriggerEscapeCounter::operator()(CBasePlayer*)
 T Tutor::GiveBossInfectedLesson(ZombieClassType, CBaseEntity*)
 T Tutor::OnUseEntity(CBaseEntity*)
 T Tutor::Reset()
 T UTIL_AddDebugLine(Vector const&, Vector const&, bool, bool)
 T UTIL_BloodDecalTrace(CGameTrace*, int)
 T UTIL_BloodDrips(Vector const&, Vector const&, int, int)
 T UTIL_BloodStream(Vector const&, Vector const&, int, int)
 T UTIL_Bubbles(Vector const&, Vector const&, int)
 T UTIL_ClearTrace(CGameTrace&)
 T UTIL_ClientPrintAll(int, char const*, char const*, char const*, char const*, char const*)
 T UTIL_ClientPrintFilter(IRecipientFilter&, int, char const*, char const*, char const*, char const*, char const*)
 T UTIL_ClipTraceToPlayers(Vector const&, Vector const&, unsigned int, ITraceFilter*, CGameTrace*)
 T UTIL_ColorStringToLinearFloatColor(Vector&, char const*)
 T UTIL_DecalTrace(CGameTrace*, char const*)
 T UTIL_DecodeICE(unsigned char*, int, unsigned char const*)
 T UTIL_DisableRemoveImmediate()
 T UTIL_DrawOverlayLines()
 T UTIL_DropToFloor(CBaseEntity*, unsigned int, CBaseEntity*)
 T UTIL_EmitAmbientSound(int, Vector const&, char const*, float, soundlevel_t, int, int, float, float*)
 T UTIL_EmitGroupIDSuit(edict_t*, int)
 T UTIL_EmitGroupnameSuit(edict_t*, char const*)
 T UTIL_EmitSoundSuit(edict_t*, char const*)
 T UTIL_EnableRemoveImmediate()
 T UTIL_EntitiesInBox(Vector const&, Vector const&, CFlaggedEntitiesEnum*)
 T UTIL_EntitiesInPVS(CBaseEntity*, CBaseEntity*)
 T UTIL_EntitiesInSphere(Vector const&, float, CFlaggedEntitiesEnum*)
 T UTIL_EntityByIndex(int)
 T UTIL_EntityHasMatchingRootParent(CBaseEntity*, CBaseEntity*)
 T UTIL_EntityInSolid(CBaseEntity*)
 T UTIL_FindClientInPVS(Vector const&, Vector const&)
 T UTIL_FindClientInPVS(edict_t*)
 T UTIL_FindEntityByClassnameNearest(char const*, Vector const&, float)
 T UTIL_FreeFile(unsigned char*)
 T UTIL_GetAchievementEventMask()
 T UTIL_GetClosestPlayer(Vector const&, int, float*)
 T UTIL_GetCommandClient()
 T UTIL_GetCommandClientIndex()
 T UTIL_GetListenServerHost()
 T UTIL_GetLocalPlayer()
 T UTIL_GetModDir(char*, unsigned int)
 T UTIL_GetPlayerConnectionInfo(int, int&, int&)
 T UTIL_HudHintText(CBaseEntity*, char const*)
 T UTIL_HudMessage(CBasePlayer*, hudtextparms_s const&, char const*)
 T UTIL_HudMessageAll(hudtextparms_s const&, char const*)
 T UTIL_HumansOnTeam(int, bool)
 T UTIL_ImpactTrace(CGameTrace*, int, char*)
 T UTIL_IsCommandIssuedByServerAdmin()
 T UTIL_IsGroundLevel(float, Vector const&, float, int, CBaseEntity const*, bool)
 T UTIL_IsLowViolence()
 T UTIL_IsMasterTriggered(string_t, CBaseEntity*)
 T UTIL_IsSpaceEmpty(CBaseEntity*, Vector const&, Vector const&)
 T UTIL_IsSpaceEmpty(CBaseEntity*, Vector const&, Vector const&, unsigned int, ITraceFilter*)
 T UTIL_ItemCanBeTouchedByPlayer(CBaseEntity*, CBasePlayer*)
 T UTIL_LoadFileForMe(char const*, int*)
 T UTIL_LogPrintf(char*, ...)
 T UTIL_MessageText(CBasePlayer*, char const*, Color)
 T UTIL_ParentToWorldSpace(CBaseEntity*, Vector&, QAngle&)
 T UTIL_ParentToWorldSpace(CBaseEntity*, Vector&, Quaternion&)
 T UTIL_ParticleTracer(char const*, Vector const&, Vector const&, int, int, bool)
 T UTIL_PlayerByIndex(int)
 T UTIL_PlayerByName(char const*)
 T UTIL_PlayerByUserId(int)
 T UTIL_PlayerDecalTrace(CGameTrace*, int)
 T UTIL_PointAtEntity(CBaseEntity*, CBaseEntity*)
 T UTIL_PointAtNamedEntity(CBaseEntity*, string_t)
 T UTIL_PrecacheDecal(char const*, bool)
 T UTIL_PrecacheOther(char const*, char const*)
 T UTIL_RandomBloodVector()
 T UTIL_Remove(CBaseEntity*)
 T UTIL_Remove(IServerNetworkable*)
 T UTIL_RemoveHierarchy(CBaseEntity*)
 T UTIL_RemoveImmediate(CBaseEntity*)
 T UTIL_ResetMessageText(CBasePlayer*)
 T UTIL_RestartAmbientSounds()
 T UTIL_SayText2Filter(IRecipientFilter&, CBasePlayer*, bool, char const*, char const*, char const*, char const*, char const*)
 T UTIL_SayTextAll(char const*, CBasePlayer*, bool)
 T UTIL_SayTextFilter(IRecipientFilter&, char const*, CBasePlayer*, bool)
 T UTIL_ScaleForGravity(float)
 T UTIL_ScreenFade(CBaseEntity*, color32_s const&, float, float, int)
 T UTIL_ScreenFadeAll(color32_s const&, float, float, int)
 T UTIL_ScreenFadeWrite(ScreenFade_t const&, CBaseEntity*)
 T UTIL_ScreenShake(Vector const&, float, float, float, float, ShakeCommand_t, bool, CUtlVector<CBasePlayer*, CUtlMemory<CBasePlayer*, int> >*)
 T UTIL_ScreenShakeObject(CBaseEntity*, Vector const&, float, float, float, float, ShakeCommand_t, bool)
 T UTIL_SetClientVisibilityPVS(edict_t*, unsigned char const*, int)
 T UTIL_SetModel(CBaseEntity*, char const*)
 T UTIL_SetOrigin(CBaseEntity*, Vector const&, bool)
 T UTIL_SetSize(CBaseEntity*, Vector const&, Vector const&)
 T UTIL_ShouldShowBlood(int)
 T UTIL_ShowMessage(char const*, CBasePlayer*)
 T UTIL_ShowMessageAll(char const*)
 T UTIL_Smoke(Vector const&, float, float)
 T UTIL_SnapDirectionToAxis(Vector&, float)
 T UTIL_StringToFloatArray(float*, int, char const*)
 T UTIL_StringToVector(float*, char const*)
 T UTIL_StripToken(char const*, char*, int)
 T UTIL_TraceEntity(CBaseEntity*, Vector const&, Vector const&, unsigned int, CGameTrace*)
 T UTIL_TraceEntity(CBaseEntity*, Vector const&, Vector const&, unsigned int, IHandleEntity const*, int, CGameTrace*)
 T UTIL_TraceEntity(CBaseEntity*, Vector const&, Vector const&, unsigned int, ITraceFilter*, CGameTrace*)
 T UTIL_TraceLine(Vector const&, Vector const&, unsigned int, IHandleEntity const*, int, CGameTrace*)
 T UTIL_TraceLineFilterEntity(CBaseEntity*, Vector const&, Vector const&, unsigned int, int, CGameTrace*)
 T UTIL_TraceModel(Vector const&, Vector const&, Vector const&, Vector const&, CBaseEntity*, int, CGameTrace*)
 T UTIL_Tracer(Vector const&, Vector const&, int, int, float, bool, char const*, int)
 T UTIL_TransferPoseParameters(CBaseEntity*, CBaseEntity*)
 T UTIL_ValidateSoundName(string_t&, char const*)
 T UTIL_VarArgs(char*, ...)
 T UTIL_VecToYaw(Vector const&)
 T UTIL_ViewPunch(Vector const&, QAngle, float, bool)
 T UTIL_WaterLevel(Vector const&, float, float)
 T UTIL_WorldToParentSpace(CBaseEntity*, Vector&, QAngle&)
 T UTIL_WorldToParentSpace(CBaseEntity*, Vector&, Quaternion&)
 T UTIL_YawToVector(float)
 T UniqueIdFromString(UniqueId_t*, char const*, int)
 T UnlinkChild(CBaseEntity*, CBaseEntity*)
 T UnlinkFromParent(CBaseEntity*)
 T Unserialize(CUtlBuffer&, CUtlBinaryBlock&)
 T Unserialize(CUtlBuffer&, CUtlString&)
 T Unserialize(CUtlBuffer&, Color&)
 T Unserialize(CUtlBuffer&, DmeTime_t&)
 T Unserialize(CUtlBuffer&, QAngle&)
 T Unserialize(CUtlBuffer&, Quaternion&)
 T Unserialize(CUtlBuffer&, VMatrix&)
 T Unserialize(CUtlBuffer&, Vector&)
 T Unserialize(CUtlBuffer&, Vector2D&)
 T Unserialize(CUtlBuffer&, Vector4D&)
 T Unserialize(CUtlBuffer&, bool&)
 T Unserialize(CUtlBuffer&, float&)
 T Unserialize(CUtlBuffer&, int&)
 T UnserializeDMX(CUtlBuffer&, CDmxElement**, char const*)
 T UnserializeTextDMX(char const*, CUtlBuffer&, CDmxElement**)
 T UnusedSurvivorModels::UnusedSurvivorModels(CBasePlayer const*)
 T UnusedSurvivorModels::operator()(CBasePlayer*)
 T UpdateAllClientData()
 T UpdateQueryCache()
 T UpgradeToString(SurvivorUpgradeType)
 T UserMessageBegin(IRecipientFilter&, char const*)
 T UtlVectorTemplate<CAnimationLayer, CUtlMemory<CAnimationLayer, int> >::EnsureCapacity(void*, int, int)
 T UtlVectorTemplate<CHandle<CBaseFlex>, CUtlMemory<CHandle<CBaseFlex>, int> >::EnsureCapacity(void*, int, int)
 T UtlVectorTemplate<CInfectedAnimationLayer, CUtlMemory<CInfectedAnimationLayer, int> >::EnsureCapacity(void*, int, int)
 T VMatrix::InverseTR(VMatrix&) const
 T VMatrix::MatrixMul(VMatrix const&, VMatrix&) const
 T VMatrix::SetupMatrixOrgAngles(Vector const&, QAngle const&)
 T VMatrix::Transpose() const
 T VMatrix::operator=(VMatrix const&)
 T V_DefaultExtension(char*, char const*, int)
 T V_ExtractFileExtension(char const*, char*, int)
 T V_FileBase(char const*, char*, int)
 T V_FixSlashes(char*, char)
 T V_GetFileExtension(char const*)
 T V_IsAbsolutePath(char const*)
 T V_SetExtension(char*, char const*, int)
 T V_SplitString(char const*, char const*, CUtlVector<char*, CUtlMemory<char*, int> >&)
 T V_SplitString2(char const*, char const**, int, CUtlVector<char*, CUtlMemory<char*, int> >&)
 T V_StrSlice(char const*, int, int, char*, int)
 T V_StringToColor32(color32_s*, char const*)
 T V_StringToIntArray(int*, int, char const*)
 T V_StripExtension(char const*, char*, int)
 T V_StripFilename(char*)
 T V_StripLastDir(char*, int)
 T V_StripTrailingSlash(char*)
 T V_UnicodeToUTF8(wchar_t const*, char*, int)
 T V_atof(char const*)
 T V_atoi(char const*)
 T V_snprintf(char*, int, char const*, ...)
 T V_strcasecmp(char const*, char const*)
 T V_stristr(char const*, char const*)
 T V_stristr(char*, char const*)
 T V_strncasecmp(char const*, char const*, int)
 T V_strncat(char*, char const*, unsigned long, int)
 T V_strnchr(char const*, char, int)
 T V_strncmp(char const*, char const*, int)
 T V_strncpy(char*, char const*, int)
 T V_strnicmp(char const*, char const*, int)
 T V_strnistr(char const*, char const*, int)
 T V_vsnprintf(char*, int, char const*, char*)
 T V_vsnprintfRet(char*, int, char const*, char*, bool*)
 T VecCheckToss(CBaseEntity*, ITraceFilter*, Vector, Vector, float, float, bool, Vector*, Vector*)
 T VecCheckToss(CBaseEntity*, Vector, Vector, float, float, bool, Vector*, Vector*)
 T Vector48::operator Vector()
 T VectorAngles(Vector const&, QAngle&)
 T VectorAngles(Vector const&, Vector const&, QAngle&)
 T VectorIRotate(float const*, matrix3x4_t const&, float*)
 T VectorITransform(float const*, matrix3x4_t const&, float*)
 T VectorNormalize(Vector&)
 T VectorRotate(Vector const&, QAngle const&, Vector&)
 T VectorRotate(float const*, matrix3x4_t const&, float*)
 T VectorTransform(float const*, matrix3x4_t const&, float*)
 T VectorVectors(Vector const&, Vector&, Vector&)
 T VectorYawRotate(Vector const&, float, Vector&)
 T VerifySequenceIndex(CStudioHdr*)
 T VisibilityMonitor_AddEntity(CBaseEntity*, float, bool (*)(CBaseEntity*, CBasePlayer*), bool (*)(CBaseEntity*, CBasePlayer*))
 T VisibilityMonitor_RemoveEntity(CBaseEntity*)
 T VisibleSurvivorScan::operator()(CTerrorPlayer*)
 T VisionTraceFilterFunction(IHandleEntity*, int)
 T Vocalizer::OnNavAreaChanged(CNavArea*, CNavArea*)
 T Vocalizer::OnSpawn()
 T Vocalizer::OnTouch(CBaseEntity*)
 T Vocalizer::OnUse()
 T Vocalizer::TryToWarnAboutSpecial(CBaseCombatCharacter*)
 T Vocalizer::Update()
 T Vocalizer::UpdateEndOfMap(TerrorNavArea*)
 T Vocalizer::Vocalizer(CTerrorPlayer*)
 T W_Precache()
 T WarpSurvivorsToArea::operator()(CTerrorPlayer*)
 T WarpToBattlefield()
 T WarpToCheckpoint()
 T WarpToFinale()
 T WatchPositionChanges(CBaseEntity*, CBaseEntity*)
 T WaveTrace(char const*, char const*)
 T WeaponIDToAlias(int)
 T WeaponManager_AmmoMod(CBaseCombatWeapon*)
 T WeaponResourcesPrecache::CResourcePrecacher::Cache(bool, ResourceList_t__*, bool)
 T Witch::ChangeRageLevel(float)
 T Witch::CreateComponents()
 T Witch::CreateDeathAction(CTakeDamageInfo const&) const
 T Witch::DoAttack(CBaseEntity*)
 T Witch::DoBloodEffect(float, CTakeDamageInfo const&, Vector const&, CGameTrace*)
 T Witch::GetBodyInterface() const
 T Witch::GetClass() const
 T Witch::GetEntity() const
 T Witch::GetEyeOffsetUpdateInterval() const
 T Witch::GetFootstepRunThreshold() const
 T Witch::GetFootstepSound(char const*, bool, float, bool) const
 T Witch::GetIntentionInterface() const
 T Witch::GetLocomotionInterface() const
 T Witch::GetServerClass()
 T Witch::GetVisionInterface() const
 T Witch::IsAbleToBlockMovementOf(INextBot const*) const
 T Witch::IsHostileToMe(CBaseEntity*) const
 T Witch::IsSacrificeFor(ZombieClassType) const
 T Witch::OnModelChanged()
 T Witch::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T Witch::Precache()
 T Witch::SetHarasser(CBaseEntity*)
 T Witch::ShouldCollide(int, int) const
 T Witch::Spawn()
 T Witch::TryToCull()
 T Witch::Update()
 T Witch::Witch()
 T Witch::YouForgotToImplementOrDeclareServerClass()
 T Witch::~Witch()
 T WitchAngry::GetName() const
 T WitchAngry::Growl(Witch*)
 T WitchAngry::OnBlinded(Infected*, CBaseEntity*)
 T WitchAngry::OnCommandAttack(Infected*, CBaseEntity*)
 T WitchAngry::OnContact(Infected*, CBaseEntity*, CGameTrace*)
 T WitchAngry::OnEnd(Infected*, Action<Infected>*)
 T WitchAngry::OnInjured(Infected*, CTakeDamageInfo const&)
 T WitchAngry::OnResume(Infected*, Action<Infected>*)
 T WitchAngry::OnShoved(Infected*, CBaseEntity*)
 T WitchAngry::OnStart(Infected*, Action<Infected>*)
 T WitchAngry::OnSuspend(Infected*, Action<Infected>*)
 T WitchAngry::Update(Infected*, float)
 T WitchAngry::WitchAngry(float)
 T WitchAngry::~WitchAngry()
 T WitchAttack::GetName() const
 T WitchAttack::OnAnimationEvent(Infected*, animevent_t*)
 T WitchAttack::OnCommandAttack(Infected*, CBaseEntity*)
 T WitchAttack::OnContact(Infected*, CBaseEntity*, CGameTrace*)
 T WitchAttack::OnEnd(Infected*, Action<Infected>*)
 T WitchAttack::OnInjured(Infected*, CTakeDamageInfo const&)
 T WitchAttack::OnMoveToFailure(Infected*, Path const*, MoveToFailureType)
 T WitchAttack::OnMoveToSuccess(Infected*, Path const*)
 T WitchAttack::OnShoved(Infected*, CBaseEntity*)
 T WitchAttack::OnStart(Infected*, Action<Infected>*)
 T WitchAttack::Update(Infected*, float)
 T WitchAttack::WitchAttack(CBaseEntity*)
 T WitchAttack::~WitchAttack()
 T WitchBehavior::GetName() const
 T WitchBehavior::InitialContainedAction(Infected*)
 T WitchBehavior::OnIgnite(Infected*)
 T WitchBehavior::OnInjured(Infected*, CTakeDamageInfo const&)
 T WitchBehavior::OnKilled(Infected*, CTakeDamageInfo const&)
 T WitchBehavior::Update(Infected*, float)
 T WitchBehavior::~WitchBehavior()
 T WitchBody::OnInjured(CTakeDamageInfo const&)
 T WitchBody::~WitchBody()
 T WitchBurn::GetName() const
 T WitchBurn::OnBlinded(Infected*, CBaseEntity*)
 T WitchBurn::OnContact(Infected*, CBaseEntity*, CGameTrace*)
 T WitchBurn::OnInjured(Infected*, CTakeDamageInfo const&)
 T WitchBurn::OnShoved(Infected*, CBaseEntity*)
 T WitchBurn::OnStart(Infected*, Action<Infected>*)
 T WitchBurn::Update(Infected*, float)
 T WitchBurn::WitchBurn(CBaseEntity*)
 T WitchBurn::~WitchBurn()
 T WitchDying::GetName() const
 T WitchDying::OnStart(Infected*, Action<Infected>*)
 T WitchDying::TryToStartDeathThroes(Infected*)
 T WitchDying::WitchDying(CTakeDamageInfo const&)
 T WitchDying::~WitchDying()
 T WitchExecAction::GetName() const
 T WitchExecAction::InitialContainedAction(Infected*)
 T WitchExecAction::OnInjured(Infected*, CTakeDamageInfo const&)
 T WitchExecAction::Update(Infected*, float)
 T WitchExecAction::WitchExecAction()
 T WitchExecAction::~WitchExecAction()
 T WitchIdle::GetName() const
 T WitchIdle::OnBlinded(Infected*, CBaseEntity*)
 T WitchIdle::OnCommandAttack(Infected*, CBaseEntity*)
 T WitchIdle::OnContact(Infected*, CBaseEntity*, CGameTrace*)
 T WitchIdle::OnEnd(Infected*, Action<Infected>*)
 T WitchIdle::OnInjured(Infected*, CTakeDamageInfo const&)
 T WitchIdle::OnResume(Infected*, Action<Infected>*)
 T WitchIdle::OnShoved(Infected*, CBaseEntity*)
 T WitchIdle::OnSound(Infected*, CBaseEntity*, Vector const&, KeyValues*)
 T WitchIdle::OnStart(Infected*, Action<Infected>*)
 T WitchIdle::Update(Infected*, float)
 T WitchIdle::~WitchIdle()
 T WitchIntention::InitialAction() const
 T WitchIntention::IsAbleToBlockMovementOf(INextBot const*) const
 T WitchIntention::~WitchIntention()
 T WitchKillIncapVictim::GetName() const
 T WitchKillIncapVictim::OnAnimationEvent(Infected*, animevent_t*)
 T WitchKillIncapVictim::OnCommandAttack(Infected*, CBaseEntity*)
 T WitchKillIncapVictim::OnEnd(Infected*, Action<Infected>*)
 T WitchKillIncapVictim::OnInjured(Infected*, CTakeDamageInfo const&)
 T WitchKillIncapVictim::OnShoved(Infected*, CBaseEntity*)
 T WitchKillIncapVictim::OnStart(Infected*, Action<Infected>*)
 T WitchKillIncapVictim::Update(Infected*, float)
 T WitchKillIncapVictim::WitchKillIncapVictim(CBaseEntity*)
 T WitchKillIncapVictim::~WitchKillIncapVictim()
 T WitchLocomotion::GetRunSpeed() const
 T WitchLocomotion::GetSpeedLimit() const
 T WitchLocomotion::IsAreaTraversable(CNavArea const*) const
 T WitchLocomotion::SetSpeedLimit(float)
 T WitchLocomotion::SetVelocity(Vector const&)
 T WitchLocomotion::~WitchLocomotion()
 T WitchRetreat::BuildRetreatPath(Infected*)
 T WitchRetreat::GetName() const
 T WitchRetreat::OnAnimationEvent(Infected*, animevent_t*)
 T WitchRetreat::OnContact(Infected*, CBaseEntity*, CGameTrace*)
 T WitchRetreat::OnEnd(Infected*, Action<Infected>*)
 T WitchRetreat::OnInjured(Infected*, CTakeDamageInfo const&)
 T WitchRetreat::OnMoveToFailure(Infected*, Path const*, MoveToFailureType)
 T WitchRetreat::OnMoveToSuccess(Infected*, Path const*)
 T WitchRetreat::OnShoved(Infected*, CBaseEntity*)
 T WitchRetreat::OnStart(Infected*, Action<Infected>*)
 T WitchRetreat::Update(Infected*, float)
 T WitchRetreat::~WitchRetreat()
 T WitchSafeScan::operator()(CNavArea*)
 T WitchSlashEnumerator::EnumElement(IHandleEntity*)
 T WitchVision::GetNearNoticeRange() const
 T WitchVision::IsIgnored(CBaseEntity*) const
 T WitchVision::~WitchVision()
 T WorldSpaceSlerp(CStudioHdr const*, Quaternion*, Vector*, mstudioseqdesc_t&, int, Quaternion const*, Vector const*, float, int)
 T ZombieBotBody::AimHeadTowards(CBaseEntity*, IBody::LookAtPriorityType, float, INextBotReply*, char const*)
 T ZombieBotBody::AimHeadTowards(Vector const&, IBody::LookAtPriorityType, float, INextBotReply*, char const*)
 T ZombieBotBody::GetActivity() const
 T ZombieBotBody::GetActualPosture() const
 T ZombieBotBody::GetArousal() const
 T ZombieBotBody::GetCrouchHullHeight() const
 T ZombieBotBody::GetDesiredPosture() const
 T ZombieBotBody::GetEntity()
 T ZombieBotBody::GetEyePosition() const
 T ZombieBotBody::GetHullHeight() const
 T ZombieBotBody::GetHullMaxs() const
 T ZombieBotBody::GetHullMins() const
 T ZombieBotBody::GetHullWidth() const
 T ZombieBotBody::GetSolidMask() const
 T ZombieBotBody::GetStandHullHeight() const
 T ZombieBotBody::GetViewVector() const
 T ZombieBotBody::HasActivityType(unsigned int) const
 T ZombieBotBody::IsActivity(Activity) const
 T ZombieBotBody::IsActualPosture(IBody::PostureType) const
 T ZombieBotBody::IsArousal(IBody::ArousalType) const
 T ZombieBotBody::IsDesiredPosture(IBody::PostureType) const
 T ZombieBotBody::IsInDesiredPosture() const
 T ZombieBotBody::IsPostureChanging() const
 T ZombieBotBody::IsPostureMobile() const
 T ZombieBotBody::OnAnimationEvent(animevent_t*)
 T ZombieBotBody::OnInjured(CTakeDamageInfo const&)
 T ZombieBotBody::OnLandOnGround(CBaseEntity*)
 T ZombieBotBody::OnLeaveGround(CBaseEntity*)
 T ZombieBotBody::OnModelChanged()
 T ZombieBotBody::Reset()
 T ZombieBotBody::SelectAnimationSequence(Activity) const
 T ZombieBotBody::SetArousal(IBody::ArousalType)
 T ZombieBotBody::SetDesiredPosture(IBody::PostureType)
 T ZombieBotBody::SetPosition(Vector const&)
 T ZombieBotBody::StartActivity(Activity, unsigned int)
 T ZombieBotBody::Update()
 T ZombieBotBody::ZombieBotBody(INextBot*)
 T ZombieBotBody::~ZombieBotBody()
 T ZombieBotCollisionTraceFilter::ShouldHitEntity(IHandleEntity*, int)
 T ZombieBotLocomotion::ApplyAccumulatedApproach()
 T ZombieBotLocomotion::Approach(Vector const&, float)
 T ZombieBotLocomotion::ClimbLadder(CNavLadder const*, CNavArea const*)
 T ZombieBotLocomotion::ClimbUpToLedge(Vector const&, Vector const&, CBaseEntity const*)
 T ZombieBotLocomotion::DescendLadder(CNavLadder const*, CNavArea const*)
 T ZombieBotLocomotion::DetectCollision(CGameTrace*, int&, Vector const&, Vector const&, Vector const&, Vector const&)
 T ZombieBotLocomotion::DriveTo(Vector const&)
 T ZombieBotLocomotion::FaceTowards(Vector const&)
 T ZombieBotLocomotion::GetAcceleration() const
 T ZombieBotLocomotion::GetDeathDropHeight() const
 T ZombieBotLocomotion::GetDesiredLean() const
 T ZombieBotLocomotion::GetDesiredSpeed() const
 T ZombieBotLocomotion::GetFeet() const
 T ZombieBotLocomotion::GetGround() const
 T ZombieBotLocomotion::GetGroundNormal() const
 T ZombieBotLocomotion::GetMaxAcceleration() const
 T ZombieBotLocomotion::GetMaxDeceleration() const
 T ZombieBotLocomotion::GetMaxJumpHeight() const
 T ZombieBotLocomotion::GetRunSpeed() const
 T ZombieBotLocomotion::GetSpeedLimit() const
 T ZombieBotLocomotion::GetStepHeight() const
 T ZombieBotLocomotion::GetVelocity() const
 T ZombieBotLocomotion::GetWalkSpeed() const
 T ZombieBotLocomotion::IsAreaTraversable(CNavArea const*) const
 T ZombieBotLocomotion::IsAscendingOrDescendingLadder() const
 T ZombieBotLocomotion::IsClimbingOrJumping() const
 T ZombieBotLocomotion::IsClimbingUpToLedge() const
 T ZombieBotLocomotion::IsEntityTraversable(CBaseEntity*, ILocomotion::TraverseWhenType) const
 T ZombieBotLocomotion::IsJumpingAcrossGap() const
 T ZombieBotLocomotion::IsOnGround() const
 T ZombieBotLocomotion::IsRunning() const
 T ZombieBotLocomotion::IsUsingLadder() const
 T ZombieBotLocomotion::Jump()
 T ZombieBotLocomotion::JumpAcrossGap(Vector const&, Vector const&)
 T ZombieBotLocomotion::OnAnimationActivityComplete(int)
 T ZombieBotLocomotion::OnContact(CBaseEntity*, CGameTrace*)
 T ZombieBotLocomotion::OnLandOnGround(CBaseEntity*)
 T ZombieBotLocomotion::OnLeaveGround(CBaseEntity*)
 T ZombieBotLocomotion::OnMoveToFailure(Path const*, MoveToFailureType)
 T ZombieBotLocomotion::OnMoveToSuccess(Path const*)
 T ZombieBotLocomotion::OnNavAreaChanged(CNavArea*, CNavArea*)
 T ZombieBotLocomotion::Reset()
 T ZombieBotLocomotion::ResolveCollision(Vector const&, Vector const&, int)
 T ZombieBotLocomotion::ResolveZombieCollisions(Vector const&)
 T ZombieBotLocomotion::Run()
 T ZombieBotLocomotion::SetAcceleration(Vector const&)
 T ZombieBotLocomotion::SetDesiredLean(QAngle const&)
 T ZombieBotLocomotion::SetDesiredSpeed(float)
 T ZombieBotLocomotion::SetVelocity(Vector const&)
 T ZombieBotLocomotion::Stop()
 T ZombieBotLocomotion::TraverseLadder()
 T ZombieBotLocomotion::Update()
 T ZombieBotLocomotion::UpdateGroundConstraint()
 T ZombieBotLocomotion::UpdatePosition(Vector const&)
 T ZombieBotLocomotion::Walk()
 T ZombieBotLocomotion::ZombieBotLocomotion(INextBot*)
 T ZombieBotLocomotion::~ZombieBotLocomotion()
 T ZombieBotVision::GetClosestRecognized(INextBotEntityFilter const&) const
 T ZombieBotVision::GetClosestRecognized(int) const
 T ZombieBotVision::GetDefaultFieldOfView() const
 T ZombieBotVision::GetMaxVisionRange() const
 T ZombieBotVision::GetMinRecognizeTime() const
 T ZombieBotVision::GetNearNoticeRange() const
 T ZombieBotVision::GetPrimaryRecognizedThreat() const
 T ZombieBotVision::GetRecognizedCount(int, float) const
 T ZombieBotVision::GetTimeSinceVisible(int) const
 T ZombieBotVision::IsIgnored(CBaseEntity*) const
 T ZombieBotVision::IsNoticed(CBaseEntity*) const
 T ZombieBotVision::Reset()
 T ZombieBotVision::Update()
 T ZombieBotVision::ZombieBotVision(INextBot*)
 T ZombieBotVision::~ZombieBotVision()
 T ZombieClassName(ZombieClassType)
 T ZombieCounter::operator()(CBaseCombatCharacter*)
 T ZombieDeath::operator()(CBasePlayer*)
 T ZombieManager::AccumulateSpawnAreaCollection(CUtlVector<CNavArea*, CUtlMemory<CNavArea*, int> > const&, ZombieManager::MobLocationType, float, CUtlVector<CNavArea*, CUtlMemory<CNavArea*, int> >*, bool, bool) const
 T ZombieManager::BuildEscapeRoute(TerrorNavArea*) const
 T ZombieManager::CanZombieSpawnHere(Vector const&, TerrorNavArea*, ZombieClassType, bool, CBaseCombatCharacter*) const
 T ZombieManager::ChooseAdjacentMobSpawnArea(TerrorNavArea*)
 T ZombieManager::ChooseMobSpawnAreas()
 T ZombieManager::CollectSpawnAreas(ZombieManager::MobLocationType) const
 T ZombieManager::DebugSpawnAreas()
 T ZombieManager::DebugSpawnVolumes()
 T ZombieManager::GetRandomPZSpawnPosition(ZombieClassType, int, CTerrorPlayer*, Vector*) const
 T ZombieManager::IsMobWaitingToSpawn() const
 T ZombieManager::IsSpaceForZombieHere(Vector const&) const
 T ZombieManager::OnChangelevelStart()
 T ZombieManager::OnFinaleStart()
 T ZombieManager::OnFlowDistancesInitialized(TerrorNavArea*)
 T ZombieManager::OnFlowDistancesRecomputed(TerrorNavArea*)
 T ZombieManager::OnNavAreaRemoved(TerrorNavArea*)
 T ZombieManager::OnPlayerNavAreaChanged(CTerrorPlayer*, CNavArea*, CNavArea*)
 T ZombieManager::RelocateZombie(CTerrorPlayer*)
 T ZombieManager::ReplaceTank(CTerrorPlayer*, CTerrorPlayer*)
 T ZombieManager::RestartRound()
 T ZombieManager::ServerActivate()
 T ZombieManager::SpawnBoomer(TerrorNavArea const*, QAngle const&)
 T ZombieManager::SpawnBoomer(Vector const&, QAngle const&)
 T ZombieManager::SpawnCommonZombie(TerrorNavArea*, Vector const&, bool) const
 T ZombieManager::SpawnHunter(TerrorNavArea const*, QAngle const&)
 T ZombieManager::SpawnHunter(Vector const&, QAngle const&)
 T ZombieManager::SpawnITMob(int)
 T ZombieManager::SpawnMegaMob()
 T ZombieManager::SpawnMob(int)
 T ZombieManager::SpawnSmoker(TerrorNavArea const*, QAngle const&)
 T ZombieManager::SpawnSmoker(Vector const&, QAngle const&)
 T ZombieManager::SpawnTank(TerrorNavArea const*, QAngle const&)
 T ZombieManager::SpawnTank(Vector const&, QAngle const&)
 T ZombieManager::SpawnWitch(TerrorNavArea const*, QAngle const&)
 T ZombieManager::SpawnWitch(Vector const&, QAngle const&)
 T ZombieManager::StartFrame()
 T ZombieManager::~ZombieManager()
 T ZombieReplacement::Restore(CTerrorPlayer*, CTerrorPlayer*)
 T ZombieReplacement::Save(CTerrorPlayer*)
 T _V_memcpy(void*, void const*, int)
 T _V_memmove(void*, void const*, int)
 T _V_memset(void*, int, int)
 T _V_strcmp(char const*, char const*)
 T _V_strcpy(char*, char const*)
 T _V_stricmp(char const*, char const*)
 T _V_strlen(char const*)
 T _V_strlower(char*)
 T _V_strrchr(char const*, char)
 T _V_strstr(char const*, char const*)
 T __CreateGameRules_CCSGameRules()
 T __CreateGameRules_CMultiplayRules()
 T __CreateGameRules_CTeamplayRules()
 T __CreateGameRules_CTerrorGameRules()
 T __clang_call_terminate
 T ability_throwPrecache::CResourcePrecacher::Cache(bool, ResourceList_t__*, bool)
 T ability_vomitPrecache::CResourcePrecacher::Cache(bool, ResourceList_t__*, bool)
 T bf_write::WriteBitCoord(float)
 T bf_write::WriteBitCoordMP(float, bool, bool)
 T bf_write::WriteBitVec3Coord(Vector const&)
 T bf_write::WriteBits(void const*, int)
 T bf_write::WriteByte(unsigned int)
 T bf_write::WriteFloat(float)
 T bf_write::WriteLong(long)
 T bf_write::WriteSBitLong(int, int)
 T bf_write::WriteShort(int)
 T bf_write::WriteString(char const*)
 T bool CNavMesh::ForAllAreasInRadius<NavAreaCollector>(NavAreaCollector&, Vector const&, float)
 T bool CNavMesh::ForAllAreasOverlappingExtent<CFuncNavBlocker>(CFuncNavBlocker&, Extent const&)
 T bool CNavMesh::ForAllAreasOverlappingExtent<CFuncNavObstruction>(CFuncNavObstruction&, Extent const&)
 T bool CNavMesh::ForAllAreasOverlappingExtent<CheckpointSetter>(CheckpointSetter&, Extent const&)
 T bool CNavMesh::ForAllAreasOverlappingExtent<CollectRespawnAreas>(CollectRespawnAreas&, Extent const&)
 T bool CNavMesh::ForAllAreasOverlappingExtent<DoorSetter>(DoorSetter&, Extent const&)
 T bool CNavMesh::ForAllAreasOverlappingExtent<NavAreaCollector>(NavAreaCollector&, Extent const&)
 T bool CNavMesh::ForAllSelectedAreas<SpawnAttributeToggler>(SpawnAttributeToggler&)
 T bool CNavMesh::StitchMesh<AreaSet>(AreaSet&)
 T bool CNavMesh::StitchMesh<IncrementallyGeneratedAreas>(IncrementallyGeneratedAreas&)
 T bool ForEachActor<CEnvWeaponfireTargetScan>(CEnvWeaponfireTargetScan&)
 T bool ForEachActor<ChangelevelFreeze>(ChangelevelFreeze&)
 T bool ForEachActor<ClosestActorScan>(ClosestActorScan&)
 T bool ForEachActor<CollectVisible>(CollectVisible&)
 T bool ForEachActor<DangerousZombieScan>(DangerousZombieScan&)
 T bool ForEachActor<DiscardOrphanScan>(DiscardOrphanScan&)
 T bool ForEachActor<EditDestroyNotification>(EditDestroyNotification&)
 T bool ForEachActor<ForgetArea>(ForgetArea&)
 T bool ForEachActor<FriendThreatenedScan>(FriendThreatenedScan&)
 T bool ForEachActor<InfoChangelevelPlayerCollector>(InfoChangelevelPlayerCollector&)
 T bool ForEachActor<MinigunTargetScan>(MinigunTargetScan&)
 T bool ForEachActor<NarrowEscapeZombieConsideration>(NarrowEscapeZombieConsideration&)
 T bool ForEachActor<ObserverTargetCollector>(ObserverTargetCollector&)
 T bool ForEachActor<TargetScan<CBaseCombatCharacter> >(TargetScan<CBaseCombatCharacter>&)
 T bool ForEachPlayer<CDeactivateMovementConstraints>(CDeactivateMovementConstraints&)
 T bool ForEachPlayer<CShowViewportPanel>(CShowViewportPanel&)
 T bool ForEachPlayer<CauseNearbyCoughing>(CauseNearbyCoughing&)
 T bool ForEachPlayer<ChangelevelPlayerCollector>(ChangelevelPlayerCollector&)
 T bool ForEachPlayer<CheckpointSurvivorCount>(CheckpointSurvivorCount&)
 T bool ForEachPlayer<ClosestPlayerScan>(ClosestPlayerScan&)
 T bool ForEachPlayer<CollectPlayersOnTeam>(CollectPlayersOnTeam&)
 T bool ForEachPlayer<DisableAutokick>(DisableAutokick&)
 T bool ForEachPlayer<ElevatorPlayerCollector>(ElevatorPlayerCollector&)
 T bool ForEachPlayer<EnsureTeamSize>(EnsureTeamSize&)
 T bool ForEachPlayer<EntireTeamCheck>(EntireTeamCheck&)
 T bool ForEachPlayer<FindNearbyTongue>(FindNearbyTongue&)
 T bool ForEachPlayer<LivePlayerCounter>(LivePlayerCounter&)
 T bool ForEachPlayer<LiveSurvivorCounter>(LiveSurvivorCounter&)
 T bool ForEachPlayer<MatchPlayer>(MatchPlayer&)
 T bool ForEachPlayer<NotVIP>(NotVIP&)
 T bool ForEachPlayer<PlayerCollector>(PlayerCollector&)
 T bool ForEachPlayer<PlayerCounter>(PlayerCounter&)
 T bool ForEachPlayer<PlayerShowMOTDAfterIntro>(PlayerShowMOTDAfterIntro&)
 T bool ForEachPlayer<PlayerZombieCandidateCollector>(PlayerZombieCandidateCollector&)
 T bool ForEachPlayer<ProximityCheck>(ProximityCheck&)
 T bool ForEachPlayer<SetHumanTeamFunctor>(SetHumanTeamFunctor&)
 T bool ForEachPlayer<SurvivorsInSafeArea>(SurvivorsInSafeArea&)
 T bool ForEachPlayer<TeamScan>(TeamScan&)
 T bool ForEachPlayer<TestDistance>(TestDistance&)
 T bool ForEachPlayer<TestInViewCone>(TestInViewCone&)
 T bool ForEachPlayer<UnusedSurvivorModels>(UnusedSurvivorModels&)
 T bool ForEachPlayer<ValidObserverTargetCounter>(ValidObserverTargetCounter&)
 T bool ForEachPlayer<VisibleToTeamScan>(VisibleToTeamScan&)
 T bool ForEachPlayer<ZombieDeath>(ZombieDeath&)
 T bool ForEachPlayerZombie<NearestPlayer>(NearestPlayer&)
 T bool ForEachPlayerZombie<PlayerCollector>(PlayerCollector&)
 T bool ForEachPlayerZombie<RespawnPlayer>(RespawnPlayer&)
 T bool ForEachPlayerZombie<TankCheck>(TankCheck&)
 T bool ForEachPlayerZombie<ZombieCounter>(ZombieCounter&)
 T bool ForEachSurvivor<AllHumanSurvivorsAreIncapacitatedScan>(AllHumanSurvivorsAreIncapacitatedScan&)
 T bool ForEachSurvivor<AnyoneTooCloseToBoomerCheck>(AnyoneTooCloseToBoomerCheck&)
 T bool ForEachSurvivor<AreNoSurvivorsInCombat>(AreNoSurvivorsInCombat&)
 T bool ForEachSurvivor<BossKilledMusic>(BossKilledMusic&)
 T bool ForEachSurvivor<CSurvivorGroupInfo::CombatTimeMaxMin>(CSurvivorGroupInfo::CombatTimeMaxMin&)
 T bool ForEachSurvivor<CheckpointSurvivorCount>(CheckpointSurvivorCount&)
 T bool ForEachSurvivor<ClearActiveAreaSet>(ClearActiveAreaSet&)
 T bool ForEachSurvivor<ClearDSP>(ClearDSP&)
 T bool ForEachSurvivor<ClosestSurvivorScan>(ClosestSurvivorScan&)
 T bool ForEachSurvivor<ClosestVisibleSurvivorScan>(ClosestVisibleSurvivorScan&)
 T bool ForEachSurvivor<DLC3FinaleTeamVersusScoreCount>(DLC3FinaleTeamVersusScoreCount&)
 T bool ForEachSurvivor<DeadAreaNotify>(DeadAreaNotify&)
 T bool ForEachSurvivor<DispatchPlayerMissionStarted>(DispatchPlayerMissionStarted&)
 T bool ForEachSurvivor<DispatchResponseToSurvivors>(DispatchResponseToSurvivors&)
 T bool ForEachSurvivor<DispatchSurvivorsLeavingSpawn>(DispatchSurvivorsLeavingSpawn&)
 T bool ForEachSurvivor<DrawActiveAreaSet>(DrawActiveAreaSet&)
 T bool ForEachSurvivor<FarthestSurvivorScan>(FarthestSurvivorScan&)
 T bool ForEachSurvivor<FindAnyItSurvivor>(FindAnyItSurvivor&)
 T bool ForEachSurvivor<FindFriendInDanger>(FindFriendInDanger&)
 T bool ForEachSurvivor<FinishHealing>(FinishHealing&)
 T bool ForEachSurvivor<ForceRecalculateVersusScore>(ForceRecalculateVersusScore&)
 T bool ForEachSurvivor<GhostProximityScan>(GhostProximityScan&)
 T bool ForEachSurvivor<GiveItemScan>(GiveItemScan&)
 T bool ForEachSurvivor<GiveScan>(GiveScan&)
 T bool ForEachSurvivor<GroundPoundReveal>(GroundPoundReveal&)
 T bool ForEachSurvivor<HealthAudit>(HealthAudit&)
 T bool ForEachSurvivor<HeroConsideration>(HeroConsideration&)
 T bool ForEachSurvivor<ITCounter>(ITCounter&)
 T bool ForEachSurvivor<InfoChangelevelPlayerCollector>(InfoChangelevelPlayerCollector&)
 T bool ForEachSurvivor<LowestFlowDistance>(LowestFlowDistance&)
 T bool ForEachSurvivor<MinigunnerScan>(MinigunnerScan&)
 T bool ForEachSurvivor<MostRecentITFlowDistance>(MostRecentITFlowDistance&)
 T bool ForEachSurvivor<NarrowEscapeSurvivorConsideration>(NarrowEscapeSurvivorConsideration&)
 T bool ForEachSurvivor<PZSpawnMusic>(PZSpawnMusic&)
 T bool ForEachSurvivor<PlayTransitionMusic>(PlayTransitionMusic&)
 T bool ForEachSurvivor<PlayerCollector>(PlayerCollector&)
 T bool ForEachSurvivor<PopulateActiveAreaSet>(PopulateActiveAreaSet&)
 T bool ForEachSurvivor<PounceStumbleNearbySurvivors>(PounceStumbleNearbySurvivors&)
 T bool ForEachSurvivor<RemoveAllItems>(RemoveAllItems&)
 T bool ForEachSurvivor<RespawnPlayer>(RespawnPlayer&)
 T bool ForEachSurvivor<SafeAreaCheck>(SafeAreaCheck&)
 T bool ForEachSurvivor<SealCheckpointCheck>(SealCheckpointCheck&)
 T bool ForEachSurvivor<SpeechDelay>(SpeechDelay&)
 T bool ForEachSurvivor<StartAreaCheck>(StartAreaCheck&)
 T bool ForEachSurvivor<StopWitchMusic>(StopWitchMusic&)
 T bool ForEachSurvivor<SurvivorCollector>(SurvivorCollector&)
 T bool ForEachSurvivor<TargetScan<CTerrorPlayer> >(TargetScan<CTerrorPlayer>&)
 T bool ForEachSurvivor<TransitionResponse>(TransitionResponse&)
 T bool ForEachSurvivor<TriggerEscapeCounter>(TriggerEscapeCounter&)
 T bool ForEachSurvivor<VehicleReady>(VehicleReady&)
 T bool ForEachSurvivor<VisibleSurvivorScan>(VisibleSurvivorScan&)
 T bool ForEachSurvivor<WitchAttackMusic>(WitchAttackMusic&)
 T bool ForEachSurvivor<WitchBurningMusic>(WitchBurningMusic&)
 T bool ForEachSurvivor<WitchKilledMusic>(WitchKilledMusic&)
 T bool ForEachSurvivorBot<ClosestSurvivorScan>(ClosestSurvivorScan&)
 T bool ForEachSurvivorBot<ClosestVisibleSurvivorScan>(ClosestVisibleSurvivorScan&)
 T bool ForEachSurvivorBot<HighestFlowDistance>(HighestFlowDistance&)
 T bool ForEachTerrorPlayer<BestRescuableSurvivor>(BestRescuableSurvivor&)
 T bool ForEachTerrorPlayer<BossAttackMusic>(BossAttackMusic&)
 T bool ForEachTerrorPlayer<BossKilledMusic>(BossKilledMusic&)
 T bool ForEachTerrorPlayer<CDumpTeamDesired>(CDumpTeamDesired&, bool)
 T bool ForEachTerrorPlayer<CFindActiveTongues>(CFindActiveTongues&)
 T bool ForEachTerrorPlayer<CShowViewportPanel>(CShowViewportPanel&)
 T bool ForEachTerrorPlayer<CalcAndSetVersusMaxFlowDistance>(CalcAndSetVersusMaxFlowDistance&)
 T bool ForEachTerrorPlayer<CheckpointRespawner>(CheckpointRespawner&)
 T bool ForEachTerrorPlayer<ClipTraceToTongue>(ClipTraceToTongue&)
 T bool ForEachTerrorPlayer<ClosestITSurvivorScan>(ClosestITSurvivorScan&)
 T bool ForEachTerrorPlayer<ClosestSurvivorScan>(ClosestSurvivorScan&)
 T bool ForEachTerrorPlayer<ClosestVisibleSurvivorScan>(ClosestVisibleSurvivorScan&)
 T bool ForEachTerrorPlayer<DLC3FinaleSurvivorMultiplierCounter>(DLC3FinaleSurvivorMultiplierCounter&)
 T bool ForEachTerrorPlayer<DebugIntensity>(DebugIntensity&)
 T bool ForEachTerrorPlayer<DiscardOrphanScan>(DiscardOrphanScan&, bool)
 T bool ForEachTerrorPlayer<DispatchPlayerReportFlush>(DispatchPlayerReportFlush&)
 T bool ForEachTerrorPlayer<DispatchResponseToSurvivors>(DispatchResponseToSurvivors&)
 T bool ForEachTerrorPlayer<DispatchResponseToSurvivorsWithVisibility>(DispatchResponseToSurvivorsWithVisibility&)
 T bool ForEachTerrorPlayer<DumpData>(DumpData&)
 T bool ForEachTerrorPlayer<FinaleEscapeStart>(FinaleEscapeStart&)
 T bool ForEachTerrorPlayer<FinaleLossSetup>(FinaleLossSetup&)
 T bool ForEachTerrorPlayer<FinaleRescuableSurvivor>(FinaleRescuableSurvivor&)
 T bool ForEachTerrorPlayer<FinaleStageMusic>(FinaleStageMusic&)
 T bool ForEachTerrorPlayer<FinaleStart>(FinaleStart&)
 T bool ForEachTerrorPlayer<FindBotSpectator>(FindBotSpectator&)
 T bool ForEachTerrorPlayer<FindCharacter>(FindCharacter&)
 T bool ForEachTerrorPlayer<FindMaxIntensity>(FindMaxIntensity&)
 T bool ForEachTerrorPlayer<FindUnusedSurvivorCharacter>(FindUnusedSurvivorCharacter&)
 T bool ForEachTerrorPlayer<FindUsedTeamDesiredSurvivorSlots>(FindUsedTeamDesiredSurvivorSlots&)
 T bool ForEachTerrorPlayer<ForceTakeover>(ForceTakeover&)
 T bool ForEachTerrorPlayer<GhostIndividualSpawn>(GhostIndividualSpawn&)
 T bool ForEachTerrorPlayer<GhostSpawnCollector>(GhostSpawnCollector&)
 T bool ForEachTerrorPlayer<HighestFlowDistance>(HighestFlowDistance&)
 T bool ForEachTerrorPlayer<HitAnnouncement>(HitAnnouncement&)
 T bool ForEachTerrorPlayer<HoldoutStart>(HoldoutStart&)
 T bool ForEachTerrorPlayer<IgnoreGhosts>(IgnoreGhosts&)
 T bool ForEachTerrorPlayer<IsAllIdleSpectatingPlayer>(IsAllIdleSpectatingPlayer&)
 T bool ForEachTerrorPlayer<KickAllPlayers>(KickAllPlayers&)
 T bool ForEachTerrorPlayer<KillBurningPZs>(KillBurningPZs&)
 T bool ForEachTerrorPlayer<LineOfScrimmageReset>(LineOfScrimmageReset&)
 T bool ForEachTerrorPlayer<LiveSurvivorCounter>(LiveSurvivorCounter&)
 T bool ForEachTerrorPlayer<LowestFlowDistance>(LowestFlowDistance&)
 T bool ForEachTerrorPlayer<MarkAsNotPresentAtHoldoutStart>(MarkAsNotPresentAtHoldoutStart&, bool)
 T bool ForEachTerrorPlayer<MissionAborted>(MissionAborted&)
 T bool ForEachTerrorPlayer<MissionLost>(MissionLost&)
 T bool ForEachTerrorPlayer<MissionWon>(MissionWon&)
 T bool ForEachTerrorPlayer<MissionWonDone>(MissionWonDone&)
 T bool ForEachTerrorPlayer<MobAlert>(MobAlert&)
 T bool ForEachTerrorPlayer<MobSpawnMusic>(MobSpawnMusic&)
 T bool ForEachTerrorPlayer<MostHitsConsideration>(MostHitsConsideration&)
 T bool ForEachTerrorPlayer<NearbyCalmInhibitor>(NearbyCalmInhibitor&)
 T bool ForEachTerrorPlayer<NoSurvivorInBattlefieldOrFinaleScan>(NoSurvivorInBattlefieldOrFinaleScan&)
 T bool ForEachTerrorPlayer<NoteIdlePlayers>(NoteIdlePlayers&, bool)
 T bool ForEachTerrorPlayer<ObserverCollector>(ObserverCollector&)
 T bool ForEachTerrorPlayer<PhysicsDamage>(PhysicsDamage&)
 T bool ForEachTerrorPlayer<PlayerCollector>(PlayerCollector&)
 T bool ForEachTerrorPlayer<PrepareChangelevel>(PrepareChangelevel&)
 T bool ForEachTerrorPlayer<PrepareVersusPreChangelevel>(PrepareVersusPreChangelevel&)
 T bool ForEachTerrorPlayer<RestartCleanup>(RestartCleanup&)
 T bool ForEachTerrorPlayer<ScrimmageUpdate>(ScrimmageUpdate&)
 T bool ForEachTerrorPlayer<ShowCredits>(ShowCredits&)
 T bool ForEachTerrorPlayer<SpawnablePZScan>(SpawnablePZScan&)
 T bool ForEachTerrorPlayer<SpecialSpottedScan>(SpecialSpottedScan&)
 T bool ForEachTerrorPlayer<SurvivorBotPlaceholderCount>(SurvivorBotPlaceholderCount&)
 T bool ForEachTerrorPlayer<SurvivorMultiplierCounter>(SurvivorMultiplierCounter&)
 T bool ForEachTerrorPlayer<SurvivorsInBattlefieldScan>(SurvivorsInBattlefieldScan&)
 T bool ForEachTerrorPlayer<SurvivorsInFinaleScan>(SurvivorsInFinaleScan&)
 T bool ForEachTerrorPlayer<SurvivorsInSafeExitArea>(SurvivorsInSafeExitArea&)
 T bool ForEachTerrorPlayer<TankAttackMusic>(TankAttackMusic&)
 T bool ForEachTerrorPlayer<TargetScan<CTerrorPlayer> >(TargetScan<CTerrorPlayer>&)
 T bool ForEachTerrorPlayer<TeamVersusScoreCount>(TeamVersusScoreCount&)
 T bool ForEachTerrorPlayer<TongueTargetScan<CTerrorPlayer> >(TongueTargetScan<CTerrorPlayer>&)
 T bool ForEachTerrorPlayer<TransitioningPlayerCounter>(TransitioningPlayerCounter&)
 T bool ForEachTerrorPlayer<UpdateBestHoldoutTime>(UpdateBestHoldoutTime&, bool)
 T bool ForEachTerrorPlayer<WarpSurvivorsToArea>(WarpSurvivorsToArea&)
 T bool ForEachTerrorPlayer<WarpSurvivorsToCheckpoint>(WarpSurvivorsToCheckpoint&)
 T bool ForEachTerrorPlayer<ZombieCounter>(ZombieCounter&)
 T bool ForEachTerrorPlayer<ZombieDeathNotification>(ZombieDeathNotification&)
 T bool ForEachTerrorPlayer<ZombieSpawnNotification>(ZombieSpawnNotification&)
 T bool IVision::ForEachRecognized<ThreatCounter>(ThreatCounter&)
 T bool IVision::ForEachRecognized<VisibleThreatCollector>(VisibleThreatCollector&)
 T bool NavAreaBuildPath<IPathCost const>(CNavArea*, CNavArea*, Vector const*, IPathCost const&, CNavArea**, float, int, bool)
 T bool NavAreaBuildPath<InfectedPathCost>(CNavArea*, CNavArea*, Vector const*, InfectedPathCost&, CNavArea**, float, int, bool)
 T bool NavAreaBuildPath<MainPathCost>(CNavArea*, CNavArea*, Vector const*, MainPathCost&, CNavArea**, float, int, bool)
 T bool NavAreaBuildPath<ShortestPathCost>(CNavArea*, CNavArea*, Vector const*, ShortestPathCost&, CNavArea**, float, int, bool)
 T bool NavAreaBuildPath<SmokerPathCost>(CNavArea*, CNavArea*, Vector const*, SmokerPathCost&, CNavArea**, float, int, bool)
 T bool NavAreaBuildPath<SurvivorBotPathCost>(CNavArea*, CNavArea*, Vector const*, SurvivorBotPathCost&, CNavArea**, float, int, bool)
 T bool NavAreaBuildPath<SurvivorPathCost>(CNavArea*, CNavArea*, Vector const*, SurvivorPathCost&, CNavArea**, float, int, bool)
 T bool NextBotManager::ForEachBot<InfectedCollector>(InfectedCollector&)
 T bool NextBotManager::ForEachCombatCharacter<ObserverTargetCollector>(ObserverTargetCollector&)
 T bool Path::Compute<IPathCost const>(INextBot*, CBaseCombatCharacter*, IPathCost const&, float)
 T bool Path::Compute<IPathCost const>(INextBot*, Vector const&, IPathCost const&, float)
 T bool Path::Compute<InfectedPathCost>(INextBot*, Vector const&, InfectedPathCost&, float)
 T bool Path::Compute<SmokerPathCost>(INextBot*, Vector const&, SmokerPathCost&, float)
 T bool Path::Compute<SurvivorBotPathCost>(INextBot*, CBaseCombatCharacter*, SurvivorBotPathCost&, float)
 T bool Path::Compute<SurvivorBotPathCost>(INextBot*, Vector const&, SurvivorBotPathCost&, float)
 T bool TerrorNavArea::ForAllCompletelyVisibleAreas<ExposedAreaCollector>(ExposedAreaCollector&)
 T bool TerrorNavArea::ForAllCompletelyVisibleAreas<NavAreaCollector>(NavAreaCollector&)
 T bool TerrorNavArea::ForAllVisibleAreas<ClearVisibility>(ClearVisibility&)
 T bool TerrorNavArea::ForAllVisibleAreas<NavAreaCollector>(NavAreaCollector&)
 T bool TerrorNavArea::ForAllVisibleAreas<NavMaxVisibilityRange>(NavMaxVisibilityRange&)
 T bool TerrorNavArea::ForAllVisibleAreas<SetVisibility>(SetVisibility&)
 T bool Unserialize<CUtlBinaryBlock>(CUtlBuffer&, CUtlVector<CUtlBinaryBlock, CUtlMemory<CUtlBinaryBlock, int> >&)
 T bool Unserialize<CUtlString>(CUtlBuffer&, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >&)
 T bool Unserialize<Color>(CUtlBuffer&, CUtlVector<Color, CUtlMemory<Color, int> >&)
 T bool Unserialize<DmeTime_t>(CUtlBuffer&, CUtlVector<DmeTime_t, CUtlMemory<DmeTime_t, int> >&)
 T bool Unserialize<QAngle>(CUtlBuffer&, CUtlVector<QAngle, CUtlMemory<QAngle, int> >&)
 T bool Unserialize<Quaternion>(CUtlBuffer&, CUtlVector<Quaternion, CUtlMemory<Quaternion, int> >&)
 T bool Unserialize<VMatrix>(CUtlBuffer&, CUtlVector<VMatrix, CUtlMemory<VMatrix, int> >&)
 T bool Unserialize<Vector2D>(CUtlBuffer&, CUtlVector<Vector2D, CUtlMemory<Vector2D, int> >&)
 T bool Unserialize<Vector4D>(CUtlBuffer&, CUtlVector<Vector4D, CUtlMemory<Vector4D, int> >&)
 T bool Unserialize<Vector>(CUtlBuffer&, CUtlVector<Vector, CUtlMemory<Vector, int> >&)
 T bool Unserialize<bool>(CUtlBuffer&, CUtlVector<bool, CUtlMemory<bool, int> >&)
 T bool Unserialize<float>(CUtlBuffer&, CUtlVector<float, CUtlMemory<float, int> >&)
 T bool Unserialize<int>(CUtlBuffer&, CUtlVector<int, CUtlMemory<int, int> >&)
 T boomerPrecache::CResourcePrecacher::Cache(bool, ResourceList_t__*, bool)
 T cc_CreatePredictionError_f(CCommand const&)
 T cc_ScrambleTeams(CCommand const&)
 T cc_SwitchTeams(CCommand const&)
 T current_flow_distance_f(CCommand const&)
 T datamap_t* DataMapInit<CAmbientGeneric>(CAmbientGeneric*)
 T datamap_t* DataMapInit<CAnimationLayer>(CAnimationLayer*)
 T datamap_t* DataMapInit<CBaseAnimating>(CBaseAnimating*)
 T datamap_t* DataMapInit<CBaseAnimatingOverlay>(CBaseAnimatingOverlay*)
 T datamap_t* DataMapInit<CBaseButton>(CBaseButton*)
 T datamap_t* DataMapInit<CBaseCSGrenadeProjectile>(CBaseCSGrenadeProjectile*)
 T datamap_t* DataMapInit<CBaseCombatCharacter>(CBaseCombatCharacter*)
 T datamap_t* DataMapInit<CBaseCombatWeapon>(CBaseCombatWeapon*)
 T datamap_t* DataMapInit<CBaseDoor>(CBaseDoor*)
 T datamap_t* DataMapInit<CBaseEntity>(CBaseEntity*)
 T datamap_t* DataMapInit<CBaseEntityOutput>(CBaseEntityOutput*)
 T datamap_t* DataMapInit<CBaseFilter>(CBaseFilter*)
 T datamap_t* DataMapInit<CBaseGrenade>(CBaseGrenade*)
 T datamap_t* DataMapInit<CBasePlatTrain>(CBasePlatTrain*)
 T datamap_t* DataMapInit<CBasePlayer>(CBasePlayer*)
 T datamap_t* DataMapInit<CBasePropDoor>(CBasePropDoor*)
 T datamap_t* DataMapInit<CBaseServerVehicle>(CBaseServerVehicle*)
 T datamap_t* DataMapInit<CBaseTeamObjectiveResource>(CBaseTeamObjectiveResource*)
 T datamap_t* DataMapInit<CBaseTrigger>(CBaseTrigger*)
 T datamap_t* DataMapInit<CBaseViewModel>(CBaseViewModel*)
 T datamap_t* DataMapInit<CBeamSpotlight>(CBeamSpotlight*)
 T datamap_t* DataMapInit<CBoneFollowerManager>(CBoneFollowerManager*)
 T datamap_t* DataMapInit<CBreakable>(CBreakable*)
 T datamap_t* DataMapInit<CBreakableProp>(CBreakableProp*)
 T datamap_t* DataMapInit<CBreakableSurface>(CBreakableSurface*)
 T datamap_t* DataMapInit<CBubbling>(CBubbling*)
 T datamap_t* DataMapInit<CButtonTimed>(CButtonTimed*)
 T datamap_t* DataMapInit<CCSPlayer>(CCSPlayer*)
 T datamap_t* DataMapInit<CCSRagdoll>(CCSRagdoll*)
 T datamap_t* DataMapInit<CCarProp>(CCarProp*)
 T datamap_t* DataMapInit<CChangeLevel>(CChangeLevel*)
 T datamap_t* DataMapInit<CClientPath>(CClientPath*)
 T datamap_t* DataMapInit<CColorCorrection>(CColorCorrection*)
 T datamap_t* DataMapInit<CColorCorrectionVolume>(CColorCorrectionVolume*)
 T datamap_t* DataMapInit<CCommentaryAuto>(CCommentaryAuto*)
 T datamap_t* DataMapInit<CCommentarySystem>(CCommentarySystem*)
 T datamap_t* DataMapInit<CCommentaryZombieSpawner>(CCommentaryZombieSpawner*)
 T datamap_t* DataMapInit<CCopyRecipientFilter>(CCopyRecipientFilter*)
 T datamap_t* DataMapInit<CDecal>(CDecal*)
 T datamap_t* DataMapInit<CDynamicLight>(CDynamicLight*)
 T datamap_t* DataMapInit<CDynamicProp>(CDynamicProp*)
 T datamap_t* DataMapInit<CEmbers>(CEmbers*)
 T datamap_t* DataMapInit<CEntityDissolve>(CEntityDissolve*)
 T datamap_t* DataMapInit<CEntityFlame>(CEntityFlame*)
 T datamap_t* DataMapInit<CEnvBeam>(CEnvBeam*)
 T datamap_t* DataMapInit<CEnvCredits>(CEnvCredits*)
 T datamap_t* DataMapInit<CEnvDOFController>(CEnvDOFController*)
 T datamap_t* DataMapInit<CEnvEffectsScript>(CEnvEffectsScript*)
 T datamap_t* DataMapInit<CEnvEntityMaker>(CEnvEntityMaker*)
 T datamap_t* DataMapInit<CEnvExplosion>(CEnvExplosion*)
 T datamap_t* DataMapInit<CEnvFade>(CEnvFade*)
 T datamap_t* DataMapInit<CEnvFireSensor>(CEnvFireSensor*)
 T datamap_t* DataMapInit<CEnvGlobal>(CEnvGlobal*)
 T datamap_t* DataMapInit<CEnvGunfire>(CEnvGunfire*)
 T datamap_t* DataMapInit<CEnvLaser>(CEnvLaser*)
 T datamap_t* DataMapInit<CEnvMicrophone>(CEnvMicrophone*)
 T datamap_t* DataMapInit<CEnvPlayerSurfaceTrigger>(CEnvPlayerSurfaceTrigger*)
 T datamap_t* DataMapInit<CEnvProjectedTexture>(CEnvProjectedTexture*)
 T datamap_t* DataMapInit<CEnvScreenOverlay>(CEnvScreenOverlay*)
 T datamap_t* DataMapInit<CEnvShake>(CEnvShake*)
 T datamap_t* DataMapInit<CEnvSoundscape>(CEnvSoundscape*)
 T datamap_t* DataMapInit<CEnvSpark>(CEnvSpark*)
 T datamap_t* DataMapInit<CEnvTonemapController>(CEnvTonemapController*)
 T datamap_t* DataMapInit<CEnvTracer>(CEnvTracer*)
 T datamap_t* DataMapInit<CEnvWeaponfire>(CEnvWeaponfire*)
 T datamap_t* DataMapInit<CEnvWind>(CEnvWind*)
 T datamap_t* DataMapInit<CFinaleTrigger>(CFinaleTrigger*)
 T datamap_t* DataMapInit<CFire>(CFire*)
 T datamap_t* DataMapInit<CFishPool>(CFishPool*)
 T datamap_t* DataMapInit<CFogController>(CFogController*)
 T datamap_t* DataMapInit<CFuncElevator>(CFuncElevator*)
 T datamap_t* DataMapInit<CFuncFireExtinguisher>(CFuncFireExtinguisher*)
 T datamap_t* DataMapInit<CFuncLadder>(CFuncLadder*)
 T datamap_t* DataMapInit<CFuncMoveLinear>(CFuncMoveLinear*)
 T datamap_t* DataMapInit<CFuncPlat>(CFuncPlat*)
 T datamap_t* DataMapInit<CFuncRotating>(CFuncRotating*)
 T datamap_t* DataMapInit<CFuncSpawnVolume>(CFuncSpawnVolume*)
 T datamap_t* DataMapInit<CFuncTankTrain>(CFuncTankTrain*)
 T datamap_t* DataMapInit<CFuncTrackChange>(CFuncTrackChange*)
 T datamap_t* DataMapInit<CFuncTrackTrain>(CFuncTrackTrain*)
 T datamap_t* DataMapInit<CFuncTrain>(CFuncTrain*)
 T datamap_t* DataMapInit<CFuncTrainControls>(CFuncTrainControls*)
 T datamap_t* DataMapInit<CGamePlayerZone>(CGamePlayerZone*)
 T datamap_t* DataMapInit<CGameUI>(CGameUI*)
 T datamap_t* DataMapInit<CGameWeaponManager>(CGameWeaponManager*)
 T datamap_t* DataMapInit<CGib>(CGib*)
 T datamap_t* DataMapInit<CGibShooter>(CGibShooter*)
 T datamap_t* DataMapInit<CGlobalState>(CGlobalState*)
 T datamap_t* DataMapInit<CGunTarget>(CGunTarget*)
 T datamap_t* DataMapInit<CInferno>(CInferno*)
 T datamap_t* DataMapInit<CInfoDirector>(CInfoDirector*)
 T datamap_t* DataMapInit<CInfoElevatorFloor>(CInfoElevatorFloor*)
 T datamap_t* DataMapInit<CInfoGameMode>(CInfoGameMode*)
 T datamap_t* DataMapInit<CInfoZombieSpawn>(CInfoZombieSpawn*)
 T datamap_t* DataMapInit<CItem>(CItem*)
 T datamap_t* DataMapInit<CItemSoda>(CItemSoda*)
 T datamap_t* DataMapInit<CKeepUpright>(CKeepUpright*)
 T datamap_t* DataMapInit<CLight>(CLight*)
 T datamap_t* DataMapInit<CLogicActiveAutosave>(CLogicActiveAutosave*)
 T datamap_t* DataMapInit<CLogicAuto>(CLogicAuto*)
 T datamap_t* DataMapInit<CLogicBranch>(CLogicBranch*)
 T datamap_t* DataMapInit<CLogicBranchList>(CLogicBranchList*)
 T datamap_t* DataMapInit<CLogicCase>(CLogicCase*)
 T datamap_t* DataMapInit<CLogicCompare>(CLogicCompare*)
 T datamap_t* DataMapInit<CLogicCompareInteger>(CLogicCompareInteger*)
 T datamap_t* DataMapInit<CLogicLineToEntity>(CLogicLineToEntity*)
 T datamap_t* DataMapInit<CLogicMeasureMovement>(CLogicMeasureMovement*)
 T datamap_t* DataMapInit<CLogicRelay>(CLogicRelay*)
 T datamap_t* DataMapInit<CMathColorBlend>(CMathColorBlend*)
 T datamap_t* DataMapInit<CMathCounter>(CMathCounter*)
 T datamap_t* DataMapInit<CMathRemap>(CMathRemap*)
 T datamap_t* DataMapInit<CMessage>(CMessage*)
 T datamap_t* DataMapInit<CMomentaryRotButton>(CMomentaryRotButton*)
 T datamap_t* DataMapInit<CMultiSource>(CMultiSource*)
 T datamap_t* DataMapInit<COuttroStats>(COuttroStats*)
 T datamap_t* DataMapInit<CParticleSystem>(CParticleSystem*)
 T datamap_t* DataMapInit<CPathCorner>(CPathCorner*)
 T datamap_t* DataMapInit<CPathTrack>(CPathTrack*)
 T datamap_t* DataMapInit<CPhysBox>(CPhysBox*)
 T datamap_t* DataMapInit<CPhysConstraint>(CPhysConstraint*)
 T datamap_t* DataMapInit<CPhysConstraintSystem>(CPhysConstraintSystem*)
 T datamap_t* DataMapInit<CPhysConvert>(CPhysConvert*)
 T datamap_t* DataMapInit<CPhysExplosion>(CPhysExplosion*)
 T datamap_t* DataMapInit<CPhysForce>(CPhysForce*)
 T datamap_t* DataMapInit<CPhysImpact>(CPhysImpact*)
 T datamap_t* DataMapInit<CPhysMagnet>(CPhysMagnet*)
 T datamap_t* DataMapInit<CPhysMotor>(CPhysMotor*)
 T datamap_t* DataMapInit<CPhysicsCannister>(CPhysicsCannister*)
 T datamap_t* DataMapInit<CPhysicsNPCSolver>(CPhysicsNPCSolver*)
 T datamap_t* DataMapInit<CPhysicsProp>(CPhysicsProp*)
 T datamap_t* DataMapInit<CPhysicsPropRespawnable>(CPhysicsPropRespawnable*)
 T datamap_t* DataMapInit<CPhysicsSpring>(CPhysicsSpring*)
 T datamap_t* DataMapInit<CPlayerResource>(CPlayerResource*)
 T datamap_t* DataMapInit<CPointAngleSensor>(CPointAngleSensor*)
 T datamap_t* DataMapInit<CPointAngularVelocitySensor>(CPointAngularVelocitySensor*)
 T datamap_t* DataMapInit<CPointCommentaryNode>(CPointCommentaryNode*)
 T datamap_t* DataMapInit<CPointDevShotCamera>(CPointDevShotCamera*)
 T datamap_t* DataMapInit<CPointEntityFinder>(CPointEntityFinder*)
 T datamap_t* DataMapInit<CPointHurt>(CPointHurt*)
 T datamap_t* DataMapInit<CPointPlayerMoveConstraint>(CPointPlayerMoveConstraint*)
 T datamap_t* DataMapInit<CPointProximitySensor>(CPointProximitySensor*)
 T datamap_t* DataMapInit<CPointPush>(CPointPush*)
 T datamap_t* DataMapInit<CPointSpotlight>(CPointSpotlight*)
 T datamap_t* DataMapInit<CPointTemplate>(CPointTemplate*)
 T datamap_t* DataMapInit<CPointVelocitySensor>(CPointVelocitySensor*)
 T datamap_t* DataMapInit<CPoseController>(CPoseController*)
 T datamap_t* DataMapInit<CProjectedDecal>(CProjectedDecal*)
 T datamap_t* DataMapInit<CPropDoorRotatingCheckpoint>(CPropDoorRotatingCheckpoint*)
 T datamap_t* DataMapInit<CPropMinigun>(CPropMinigun*)
 T datamap_t* DataMapInit<CPropMountedGun>(CPropMountedGun*)
 T datamap_t* DataMapInit<CPropVehicle>(CPropVehicle*)
 T datamap_t* DataMapInit<CPropVehicleDriveable>(CPropVehicleDriveable*)
 T datamap_t* DataMapInit<CRagdollBoogie>(CRagdollBoogie*)
 T datamap_t* DataMapInit<CRagdollProp>(CRagdollProp*)
 T datamap_t* DataMapInit<CRagdollPropAttached>(CRagdollPropAttached*)
 T datamap_t* DataMapInit<CRevertSaved>(CRevertSaved*)
 T datamap_t* DataMapInit<CSceneEntity>(CSceneEntity*)
 T datamap_t* DataMapInit<CSceneListManager>(CSceneListManager*)
 T datamap_t* DataMapInit<CSceneManager>(CSceneManager*)
 T datamap_t* DataMapInit<CSprite>(CSprite*)
 T datamap_t* DataMapInit<CSurroundTest>(CSurroundTest*)
 T datamap_t* DataMapInit<CSurvivorCamera>(CSurvivorCamera*)
 T datamap_t* DataMapInit<CSurvivorRescue>(CSurvivorRescue*)
 T datamap_t* DataMapInit<CTankRock>(CTankRock*)
 T datamap_t* DataMapInit<CTankTrainAI>(CTankTrainAI*)
 T datamap_t* DataMapInit<CTeamSpawnPoint>(CTeamSpawnPoint*)
 T datamap_t* DataMapInit<CTeamVehicleSpawnPoint>(CTeamVehicleSpawnPoint*)
 T datamap_t* DataMapInit<CTerrorPlayer>(CTerrorPlayer*)
 T datamap_t* DataMapInit<CTerrorWeapon>(CTerrorWeapon*)
 T datamap_t* DataMapInit<CTestTraceline>(CTestTraceline*)
 T datamap_t* DataMapInit<CTimerEntity>(CTimerEntity*)
 T datamap_t* DataMapInit<CTransitioningPlayer>(CTransitioningPlayer*)
 T datamap_t* DataMapInit<CTriggerBrush>(CTriggerBrush*)
 T datamap_t* DataMapInit<CTriggerCamera>(CTriggerCamera*)
 T datamap_t* DataMapInit<CTriggerEscape>(CTriggerEscape*)
 T datamap_t* DataMapInit<CTriggerGravity>(CTriggerGravity*)
 T datamap_t* DataMapInit<CTriggerHurt>(CTriggerHurt*)
 T datamap_t* DataMapInit<CTriggerImpact>(CTriggerImpact*)
 T datamap_t* DataMapInit<CTriggerLook>(CTriggerLook*)
 T datamap_t* DataMapInit<CTriggerMultiple>(CTriggerMultiple*)
 T datamap_t* DataMapInit<CTriggerProximity>(CTriggerProximity*)
 T datamap_t* DataMapInit<CTriggerRemove>(CTriggerRemove*)
 T datamap_t* DataMapInit<CTriggerSoundscape>(CTriggerSoundscape*)
 T datamap_t* DataMapInit<CTriggerVPhysicsMotion>(CTriggerVPhysicsMotion*)
 T datamap_t* DataMapInit<CTriggerWind>(CTriggerWind*)
 T datamap_t* DataMapInit<CVersusRandom>(CVersusRandom*)
 T datamap_t* DataMapInit<CVoteController>(CVoteController*)
 T datamap_t* DataMapInit<CWaterBullet>(CWaterBullet*)
 T datamap_t* DataMapInit<CWeaponCSBase>(CWeaponCSBase*)
 T datamap_t* DataMapInit<CWeaponSpawn>(CWeaponSpawn*)
 T datamap_t* DataMapInit<CWeightButton>(CWeightButton*)
 T datamap_t* DataMapInit<CWindowPane>(CWindowPane*)
 T datamap_t* DataMapInit<EventQueuePrioritizedEvent_t>(EventQueuePrioritizedEvent_t*)
 T datamap_t* DataMapInit<InfoChangelevel>(InfoChangelevel*)
 T datamap_t* DataMapInit<NextBotCombatCharacter>(NextBotCombatCharacter*)
 T datamap_t* DataMapInit<magnetted_objects_t>(magnetted_objects_t*)
 T datamap_t* DataMapInit<vehiclesounds_t>(vehiclesounds_t*)
 T dyld_stub_binding_helper
 T entityflamePrecache::CResourcePrecacher::Cache(bool, ResourceList_t__*, bool)
 T escape_routePrecache::CResourcePrecacher::Cache(bool, ResourceList_t__*, bool)
 T findFirstAreaInDirection(Vector const*, NavDirType, float, float, CBaseEntity*, Vector*)
 T float NavAreaTravelDistance<ShortestPathCost>(Vector const&, Vector const&, ShortestPathCost&)
 T float16::ConvertFloatTo16bits(float)
 T fogparams_t::NetworkStateChanged()
 T fogparams_t::NetworkStateChanged(void*)
 T fogparams_t::operator!=(fogparams_t const&) const
 T fogparams_t::operator=(fogparams_t const&)
 T hunterPrecache::CResourcePrecacher::Cache(bool, ResourceList_t__*, bool)
 T infectedPrecache::CResourcePrecacher::Cache(bool, ResourceList_t__*, bool)
 T infernoPrecache::CResourcePrecacher::Cache(bool, ResourceList_t__*, bool)
 T info_survivor_rescuePrecache::CResourcePrecacher::Cache(bool, ResourceList_t__*, bool)
 T int CRestore::ReadSimple<Quaternion>(Quaternion*, int, int)
 T int CRestore::ReadSimple<VMatrix>(VMatrix*, int, int)
 T int CRestore::ReadSimple<Vector>(Vector*, int, int)
 T int CRestore::ReadSimple<bool>(bool*, int, int)
 T int CRestore::ReadSimple<char>(char*, int, int)
 T int CRestore::ReadSimple<float>(float*, int, int)
 T int CRestore::ReadSimple<int>(int*, int, int)
 T int CRestore::ReadSimple<interval_t>(interval_t*, int, int)
 T int CRestore::ReadSimple<short>(short*, int, int)
 T int ServerClassInit<DT_AbilityBase::ignored>(DT_AbilityBase::ignored*)
 T int ServerClassInit<DT_AbilityThrow::ignored>(DT_AbilityThrow::ignored*)
 T int ServerClassInit<DT_AbilityTongue::ignored>(DT_AbilityTongue::ignored*)
 T int ServerClassInit<DT_AbilityVomit::ignored>(DT_AbilityVomit::ignored*)
 T int ServerClassInit<DT_AnimTimeMustBeFirst::ignored>(DT_AnimTimeMustBeFirst::ignored*)
 T int ServerClassInit<DT_Animationlayer::ignored>(DT_Animationlayer::ignored*)
 T int ServerClassInit<DT_AssaultRifle::ignored>(DT_AssaultRifle::ignored*)
 T int ServerClassInit<DT_AutoShotgun::ignored>(DT_AutoShotgun::ignored*)
 T int ServerClassInit<DT_BCCLocalPlayerExclusive::ignored>(DT_BCCLocalPlayerExclusive::ignored*)
 T int ServerClassInit<DT_BaseAnimating::ignored>(DT_BaseAnimating::ignored*)
 T int ServerClassInit<DT_BaseAnimatingOverlay::ignored>(DT_BaseAnimatingOverlay::ignored*)
 T int ServerClassInit<DT_BaseBeam::ignored>(DT_BaseBeam::ignored*)
 T int ServerClassInit<DT_BaseButton::ignored>(DT_BaseButton::ignored*)
 T int ServerClassInit<DT_BaseCSGrenade::ignored>(DT_BaseCSGrenade::ignored*)
 T int ServerClassInit<DT_BaseCSGrenadeProjectile::ignored>(DT_BaseCSGrenadeProjectile::ignored*)
 T int ServerClassInit<DT_BaseCombatCharacter::ignored>(DT_BaseCombatCharacter::ignored*)
 T int ServerClassInit<DT_BaseCombatWeapon::ignored>(DT_BaseCombatWeapon::ignored*)
 T int ServerClassInit<DT_BaseDoor::ignored>(DT_BaseDoor::ignored*)
 T int ServerClassInit<DT_BaseEntity::ignored>(DT_BaseEntity::ignored*)
 T int ServerClassInit<DT_BaseFlex::ignored>(DT_BaseFlex::ignored*)
 T int ServerClassInit<DT_BaseGrenade::ignored>(DT_BaseGrenade::ignored*)
 T int ServerClassInit<DT_BaseParticleEntity::ignored>(DT_BaseParticleEntity::ignored*)
 T int ServerClassInit<DT_BasePlayer::ignored>(DT_BasePlayer::ignored*)
 T int ServerClassInit<DT_BasePropDoor::ignored>(DT_BasePropDoor::ignored*)
 T int ServerClassInit<DT_BaseShotgun::ignored>(DT_BaseShotgun::ignored*)
 T int ServerClassInit<DT_BaseTeamObjectiveResource::ignored>(DT_BaseTeamObjectiveResource::ignored*)
 T int ServerClassInit<DT_BaseTempEntity::ignored>(DT_BaseTempEntity::ignored*)
 T int ServerClassInit<DT_BaseToggle::ignored>(DT_BaseToggle::ignored*)
 T int ServerClassInit<DT_BaseTrigger::ignored>(DT_BaseTrigger::ignored*)
 T int ServerClassInit<DT_BaseViewModel::ignored>(DT_BaseViewModel::ignored*)
 T int ServerClassInit<DT_Beam::ignored>(DT_Beam::ignored*)
 T int ServerClassInit<DT_BeamSpotlight::ignored>(DT_BeamSpotlight::ignored*)
 T int ServerClassInit<DT_BoneFollower::ignored>(DT_BoneFollower::ignored*)
 T int ServerClassInit<DT_Boomer::ignored>(DT_Boomer::ignored*)
 T int ServerClassInit<DT_Breakable::ignored>(DT_Breakable::ignored*)
 T int ServerClassInit<DT_BreakableProp::ignored>(DT_BreakableProp::ignored*)
 T int ServerClassInit<DT_BreakableSurface::ignored>(DT_BreakableSurface::ignored*)
 T int ServerClassInit<DT_CFish::ignored>(DT_CFish::ignored*)
 T int ServerClassInit<DT_CSGameRules::ignored>(DT_CSGameRules::ignored*)
 T int ServerClassInit<DT_CSGameRulesProxy::ignored>(DT_CSGameRulesProxy::ignored*)
 T int ServerClassInit<DT_CSLocalPlayerExclusive::ignored>(DT_CSLocalPlayerExclusive::ignored*)
 T int ServerClassInit<DT_CSNonLocalPlayerExclusive::ignored>(DT_CSNonLocalPlayerExclusive::ignored*)
 T int ServerClassInit<DT_CSPlayer::ignored>(DT_CSPlayer::ignored*)
 T int ServerClassInit<DT_CSRagdoll::ignored>(DT_CSRagdoll::ignored*)
 T int ServerClassInit<DT_CSTeam::ignored>(DT_CSTeam::ignored*)
 T int ServerClassInit<DT_ClientPath::ignored>(DT_ClientPath::ignored*)
 T int ServerClassInit<DT_CollisionProperty::ignored>(DT_CollisionProperty::ignored*)
 T int ServerClassInit<DT_ColorCorrection::ignored>(DT_ColorCorrection::ignored*)
 T int ServerClassInit<DT_ColorCorrectionVolume::ignored>(DT_ColorCorrectionVolume::ignored*)
 T int ServerClassInit<DT_CountdownTimer::ignored>(DT_CountdownTimer::ignored*)
 T int ServerClassInit<DT_DetailController::ignored>(DT_DetailController::ignored*)
 T int ServerClassInit<DT_DustTrail::ignored>(DT_DustTrail::ignored*)
 T int ServerClassInit<DT_DynamicLight::ignored>(DT_DynamicLight::ignored*)
 T int ServerClassInit<DT_DynamicProp::ignored>(DT_DynamicProp::ignored*)
 T int ServerClassInit<DT_EffectData::ignored>(DT_EffectData::ignored*)
 T int ServerClassInit<DT_Embers::ignored>(DT_Embers::ignored*)
 T int ServerClassInit<DT_EntityDissolve::ignored>(DT_EntityDissolve::ignored*)
 T int ServerClassInit<DT_EntityFlame::ignored>(DT_EntityFlame::ignored*)
 T int ServerClassInit<DT_EntityParticleTrail::ignored>(DT_EntityParticleTrail::ignored*)
 T int ServerClassInit<DT_EntityParticleTrailInfo::ignored>(DT_EntityParticleTrailInfo::ignored*)
 T int ServerClassInit<DT_EnvDOFController::ignored>(DT_EnvDOFController::ignored*)
 T int ServerClassInit<DT_EnvParticleScript::ignored>(DT_EnvParticleScript::ignored*)
 T int ServerClassInit<DT_EnvProjectedTexture::ignored>(DT_EnvProjectedTexture::ignored*)
 T int ServerClassInit<DT_EnvScreenEffect::ignored>(DT_EnvScreenEffect::ignored*)
 T int ServerClassInit<DT_EnvScreenOverlay::ignored>(DT_EnvScreenOverlay::ignored*)
 T int ServerClassInit<DT_EnvTonemapController::ignored>(DT_EnvTonemapController::ignored*)
 T int ServerClassInit<DT_EnvWeaponfire::ignored>(DT_EnvWeaponfire::ignored*)
 T int ServerClassInit<DT_EnvWind::ignored>(DT_EnvWind::ignored*)
 T int ServerClassInit<DT_EnvWindShared::ignored>(DT_EnvWindShared::ignored*)
 T int ServerClassInit<DT_FinaleTrigger::ignored>(DT_FinaleTrigger::ignored*)
 T int ServerClassInit<DT_FireSmoke::ignored>(DT_FireSmoke::ignored*)
 T int ServerClassInit<DT_FireTrail::ignored>(DT_FireTrail::ignored*)
 T int ServerClassInit<DT_FogController::ignored>(DT_FogController::ignored*)
 T int ServerClassInit<DT_FuncAreaPortalWindow::ignored>(DT_FuncAreaPortalWindow::ignored*)
 T int ServerClassInit<DT_FuncBrush::ignored>(DT_FuncBrush::ignored*)
 T int ServerClassInit<DT_FuncConveyor::ignored>(DT_FuncConveyor::ignored*)
 T int ServerClassInit<DT_FuncElevator::ignored>(DT_FuncElevator::ignored*)
 T int ServerClassInit<DT_FuncLadder::ignored>(DT_FuncLadder::ignored*)
 T int ServerClassInit<DT_FuncMoveLinear::ignored>(DT_FuncMoveLinear::ignored*)
 T int ServerClassInit<DT_FuncOccluder::ignored>(DT_FuncOccluder::ignored*)
 T int ServerClassInit<DT_FuncPlayerInfectedClip::ignored>(DT_FuncPlayerInfectedClip::ignored*)
 T int ServerClassInit<DT_FuncRagdollFader::ignored>(DT_FuncRagdollFader::ignored*)
 T int ServerClassInit<DT_FuncReflectiveGlass::ignored>(DT_FuncReflectiveGlass::ignored*)
 T int ServerClassInit<DT_FuncRotating::ignored>(DT_FuncRotating::ignored*)
 T int ServerClassInit<DT_FuncSimpleLadder::ignored>(DT_FuncSimpleLadder::ignored*)
 T int ServerClassInit<DT_FuncSmokeVolume::ignored>(DT_FuncSmokeVolume::ignored*)
 T int ServerClassInit<DT_FuncTrackTrain::ignored>(DT_FuncTrackTrain::ignored*)
 T int ServerClassInit<DT_Func_Dust::ignored>(DT_Func_Dust::ignored*)
 T int ServerClassInit<DT_Func_LOD::ignored>(DT_Func_LOD::ignored*)
 T int ServerClassInit<DT_GameRulesProxy::ignored>(DT_GameRulesProxy::ignored*)
 T int ServerClassInit<DT_GasCan::ignored>(DT_GasCan::ignored*)
 T int ServerClassInit<DT_HandleTest::ignored>(DT_HandleTest::ignored*)
 T int ServerClassInit<DT_Hunter::ignored>(DT_Hunter::ignored*)
 T int ServerClassInit<DT_Infected::ignored>(DT_Infected::ignored*)
 T int ServerClassInit<DT_InfectedAnimationLayer::ignored>(DT_InfectedAnimationLayer::ignored*)
 T int ServerClassInit<DT_Inferno::ignored>(DT_Inferno::ignored*)
 T int ServerClassInit<DT_InfoLadderDismount::ignored>(DT_InfoLadderDismount::ignored*)
 T int ServerClassInit<DT_InfoOverlayAccessor::ignored>(DT_InfoOverlayAccessor::ignored*)
 T int ServerClassInit<DT_IntervalTimer::ignored>(DT_IntervalTimer::ignored*)
 T int ServerClassInit<DT_LightGlow::ignored>(DT_LightGlow::ignored*)
 T int ServerClassInit<DT_Local::ignored>(DT_Local::ignored*)
 T int ServerClassInit<DT_LocalActiveL4DWeaponData::ignored>(DT_LocalActiveL4DWeaponData::ignored*)
 T int ServerClassInit<DT_LocalActiveShotgunData::ignored>(DT_LocalActiveShotgunData::ignored*)
 T int ServerClassInit<DT_LocalActiveWeaponData::ignored>(DT_LocalActiveWeaponData::ignored*)
 T int ServerClassInit<DT_LocalPlayerExclusive::ignored>(DT_LocalPlayerExclusive::ignored*)
 T int ServerClassInit<DT_LocalWeaponData::ignored>(DT_LocalWeaponData::ignored*)
 T int ServerClassInit<DT_Lunge::ignored>(DT_Lunge::ignored*)
 T int ServerClassInit<DT_MaterialModifyControl::ignored>(DT_MaterialModifyControl::ignored*)
 T int ServerClassInit<DT_Molotov::ignored>(DT_Molotov::ignored*)
 T int ServerClassInit<DT_MolotovProjectile::ignored>(DT_MolotovProjectile::ignored*)
 T int ServerClassInit<DT_MovieExplosion::ignored>(DT_MovieExplosion::ignored*)
 T int ServerClassInit<DT_Music::ignored>(DT_Music::ignored*)
 T int ServerClassInit<DT_NextBot::ignored>(DT_NextBot::ignored*)
 T int ServerClassInit<DT_OverlayVars::ignored>(DT_OverlayVars::ignored*)
 T int ServerClassInit<DT_OxygenTank::ignored>(DT_OxygenTank::ignored*)
 T int ServerClassInit<DT_ParticleFire::ignored>(DT_ParticleFire::ignored*)
 T int ServerClassInit<DT_ParticlePerformanceMonitor::ignored>(DT_ParticlePerformanceMonitor::ignored*)
 T int ServerClassInit<DT_ParticleSmokeGrenade::ignored>(DT_ParticleSmokeGrenade::ignored*)
 T int ServerClassInit<DT_ParticleSystem::ignored>(DT_ParticleSystem::ignored*)
 T int ServerClassInit<DT_PhysBox::ignored>(DT_PhysBox::ignored*)
 T int ServerClassInit<DT_PhysBoxMultiplayer::ignored>(DT_PhysBoxMultiplayer::ignored*)
 T int ServerClassInit<DT_PhysMagnet::ignored>(DT_PhysMagnet::ignored*)
 T int ServerClassInit<DT_PhysicsProp::ignored>(DT_PhysicsProp::ignored*)
 T int ServerClassInit<DT_PipeBomb::ignored>(DT_PipeBomb::ignored*)
 T int ServerClassInit<DT_PipeBombProjectile::ignored>(DT_PipeBombProjectile::ignored*)
 T int ServerClassInit<DT_Pistol::ignored>(DT_Pistol::ignored*)
 T int ServerClassInit<DT_Plasma::ignored>(DT_Plasma::ignored*)
 T int ServerClassInit<DT_PlayerResource::ignored>(DT_PlayerResource::ignored*)
 T int ServerClassInit<DT_PlayerState::ignored>(DT_PlayerState::ignored*)
 T int ServerClassInit<DT_PointCommentaryNode::ignored>(DT_PointCommentaryNode::ignored*)
 T int ServerClassInit<DT_PoseController::ignored>(DT_PoseController::ignored*)
 T int ServerClassInit<DT_PostProcessController::ignored>(DT_PostProcessController::ignored*)
 T int ServerClassInit<DT_Precipitation::ignored>(DT_Precipitation::ignored*)
 T int ServerClassInit<DT_PrecipitationBlocker::ignored>(DT_PrecipitationBlocker::ignored*)
 T int ServerClassInit<DT_PredictedViewModel::ignored>(DT_PredictedViewModel::ignored*)
 T int ServerClassInit<DT_PropDoorRotatingCheckpoint::ignored>(DT_PropDoorRotatingCheckpoint::ignored*)
 T int ServerClassInit<DT_PropGlowingObject::ignored>(DT_PropGlowingObject::ignored*)
 T int ServerClassInit<DT_PropHealthCabinet::ignored>(DT_PropHealthCabinet::ignored*)
 T int ServerClassInit<DT_PropMinigun::ignored>(DT_PropMinigun::ignored*)
 T int ServerClassInit<DT_PropMountedGun::ignored>(DT_PropMountedGun::ignored*)
 T int ServerClassInit<DT_PropVehicleDriveable::ignored>(DT_PropVehicleDriveable::ignored*)
 T int ServerClassInit<DT_PropaneTank::ignored>(DT_PropaneTank::ignored*)
 T int ServerClassInit<DT_ProxyToggle::ignored>(DT_ProxyToggle::ignored*)
 T int ServerClassInit<DT_ProxyToggle_ProxiedData::ignored>(DT_ProxyToggle_ProxiedData::ignored*)
 T int ServerClassInit<DT_PumpShotgun::ignored>(DT_PumpShotgun::ignored*)
 T int ServerClassInit<DT_QuadraticBeam::ignored>(DT_QuadraticBeam::ignored*)
 T int ServerClassInit<DT_Ragdoll::ignored>(DT_Ragdoll::ignored*)
 T int ServerClassInit<DT_RagdollManager::ignored>(DT_RagdollManager::ignored*)
 T int ServerClassInit<DT_Ragdoll_Attached::ignored>(DT_Ragdoll_Attached::ignored*)
 T int ServerClassInit<DT_RocketTrail::ignored>(DT_RocketTrail::ignored*)
 T int ServerClassInit<DT_RopeKeyframe::ignored>(DT_RopeKeyframe::ignored*)
 T int ServerClassInit<DT_SceneEntity::ignored>(DT_SceneEntity::ignored*)
 T int ServerClassInit<DT_ServerAnimationData::ignored>(DT_ServerAnimationData::ignored*)
 T int ServerClassInit<DT_ShadowControl::ignored>(DT_ShadowControl::ignored*)
 T int ServerClassInit<DT_SlideshowDisplay::ignored>(DT_SlideshowDisplay::ignored*)
 T int ServerClassInit<DT_SmokeStack::ignored>(DT_SmokeStack::ignored*)
 T int ServerClassInit<DT_SmokeTrail::ignored>(DT_SmokeTrail::ignored*)
 T int ServerClassInit<DT_Smoker::ignored>(DT_Smoker::ignored*)
 T int ServerClassInit<DT_SniperRifle::ignored>(DT_SniperRifle::ignored*)
 T int ServerClassInit<DT_SporeExplosion::ignored>(DT_SporeExplosion::ignored*)
 T int ServerClassInit<DT_SporeTrail::ignored>(DT_SporeTrail::ignored*)
 T int ServerClassInit<DT_SpotlightEnd::ignored>(DT_SpotlightEnd::ignored*)
 T int ServerClassInit<DT_Sprite::ignored>(DT_Sprite::ignored*)
 T int ServerClassInit<DT_SpriteOriented::ignored>(DT_SpriteOriented::ignored*)
 T int ServerClassInit<DT_SpriteTrail::ignored>(DT_SpriteTrail::ignored*)
 T int ServerClassInit<DT_SteamJet::ignored>(DT_SteamJet::ignored*)
 T int ServerClassInit<DT_SubMachinegun::ignored>(DT_SubMachinegun::ignored*)
 T int ServerClassInit<DT_Sun::ignored>(DT_Sun::ignored*)
 T int ServerClassInit<DT_SurvivorBot::ignored>(DT_SurvivorBot::ignored*)
 T int ServerClassInit<DT_SurvivorPosition::ignored>(DT_SurvivorPosition::ignored*)
 T int ServerClassInit<DT_SurvivorRescue::ignored>(DT_SurvivorRescue::ignored*)
 T int ServerClassInit<DT_TEArmorRicochet::ignored>(DT_TEArmorRicochet::ignored*)
 T int ServerClassInit<DT_TEBSPDecal::ignored>(DT_TEBSPDecal::ignored*)
 T int ServerClassInit<DT_TEBeamEntPoint::ignored>(DT_TEBeamEntPoint::ignored*)
 T int ServerClassInit<DT_TEBeamEnts::ignored>(DT_TEBeamEnts::ignored*)
 T int ServerClassInit<DT_TEBeamFollow::ignored>(DT_TEBeamFollow::ignored*)
 T int ServerClassInit<DT_TEBeamLaser::ignored>(DT_TEBeamLaser::ignored*)
 T int ServerClassInit<DT_TEBeamPoints::ignored>(DT_TEBeamPoints::ignored*)
 T int ServerClassInit<DT_TEBeamRing::ignored>(DT_TEBeamRing::ignored*)
 T int ServerClassInit<DT_TEBeamRingPoint::ignored>(DT_TEBeamRingPoint::ignored*)
 T int ServerClassInit<DT_TEBeamSpline::ignored>(DT_TEBeamSpline::ignored*)
 T int ServerClassInit<DT_TEBloodSprite::ignored>(DT_TEBloodSprite::ignored*)
 T int ServerClassInit<DT_TEBloodStream::ignored>(DT_TEBloodStream::ignored*)
 T int ServerClassInit<DT_TEBreakModel::ignored>(DT_TEBreakModel::ignored*)
 T int ServerClassInit<DT_TEBubbleTrail::ignored>(DT_TEBubbleTrail::ignored*)
 T int ServerClassInit<DT_TEBubbles::ignored>(DT_TEBubbles::ignored*)
 T int ServerClassInit<DT_TEBullets::ignored>(DT_TEBullets::ignored*)
 T int ServerClassInit<DT_TEClientProjectile::ignored>(DT_TEClientProjectile::ignored*)
 T int ServerClassInit<DT_TEDecal::ignored>(DT_TEDecal::ignored*)
 T int ServerClassInit<DT_TEDust::ignored>(DT_TEDust::ignored*)
 T int ServerClassInit<DT_TEDynamicLight::ignored>(DT_TEDynamicLight::ignored*)
 T int ServerClassInit<DT_TEEffectDispatch::ignored>(DT_TEEffectDispatch::ignored*)
 T int ServerClassInit<DT_TEEnergySplash::ignored>(DT_TEEnergySplash::ignored*)
 T int ServerClassInit<DT_TEExplosion::ignored>(DT_TEExplosion::ignored*)
 T int ServerClassInit<DT_TEFizz::ignored>(DT_TEFizz::ignored*)
 T int ServerClassInit<DT_TEFootprintDecal::ignored>(DT_TEFootprintDecal::ignored*)
 T int ServerClassInit<DT_TEFoundryHelpers::ignored>(DT_TEFoundryHelpers::ignored*)
 T int ServerClassInit<DT_TEGaussExplosion::ignored>(DT_TEGaussExplosion::ignored*)
 T int ServerClassInit<DT_TEGlowSprite::ignored>(DT_TEGlowSprite::ignored*)
 T int ServerClassInit<DT_TEImpact::ignored>(DT_TEImpact::ignored*)
 T int ServerClassInit<DT_TEKillPlayerAttachments::ignored>(DT_TEKillPlayerAttachments::ignored*)
 T int ServerClassInit<DT_TELargeFunnel::ignored>(DT_TELargeFunnel::ignored*)
 T int ServerClassInit<DT_TEMetalSparks::ignored>(DT_TEMetalSparks::ignored*)
 T int ServerClassInit<DT_TEMuzzleFlash::ignored>(DT_TEMuzzleFlash::ignored*)
 T int ServerClassInit<DT_TEParticleSystem::ignored>(DT_TEParticleSystem::ignored*)
 T int ServerClassInit<DT_TEPhysicsProp::ignored>(DT_TEPhysicsProp::ignored*)
 T int ServerClassInit<DT_TEPlayerAnimEvent::ignored>(DT_TEPlayerAnimEvent::ignored*)
 T int ServerClassInit<DT_TEPlayerDecal::ignored>(DT_TEPlayerDecal::ignored*)
 T int ServerClassInit<DT_TEProjectedDecal::ignored>(DT_TEProjectedDecal::ignored*)
 T int ServerClassInit<DT_TEShatterSurface::ignored>(DT_TEShatterSurface::ignored*)
 T int ServerClassInit<DT_TEShowLine::ignored>(DT_TEShowLine::ignored*)
 T int ServerClassInit<DT_TESmoke::ignored>(DT_TESmoke::ignored*)
 T int ServerClassInit<DT_TESparks::ignored>(DT_TESparks::ignored*)
 T int ServerClassInit<DT_TESprite::ignored>(DT_TESprite::ignored*)
 T int ServerClassInit<DT_TESpriteSpray::ignored>(DT_TESpriteSpray::ignored*)
 T int ServerClassInit<DT_TETutorLesson::ignored>(DT_TETutorLesson::ignored*)
 T int ServerClassInit<DT_TEWorldDecal::ignored>(DT_TEWorldDecal::ignored*)
 T int ServerClassInit<DT_Tank::ignored>(DT_Tank::ignored*)
 T int ServerClassInit<DT_Team::ignored>(DT_Team::ignored*)
 T int ServerClassInit<DT_TeamplayRoundBasedRules::ignored>(DT_TeamplayRoundBasedRules::ignored*)
 T int ServerClassInit<DT_TeamplayRoundBasedRulesProxy::ignored>(DT_TeamplayRoundBasedRulesProxy::ignored*)
 T int ServerClassInit<DT_TerrorGameRules::ignored>(DT_TerrorGameRules::ignored*)
 T int ServerClassInit<DT_TerrorGameRulesProxy::ignored>(DT_TerrorGameRulesProxy::ignored*)
 T int ServerClassInit<DT_TerrorGun::ignored>(DT_TerrorGun::ignored*)
 T int ServerClassInit<DT_TerrorLocalPlayerExclusive::ignored>(DT_TerrorLocalPlayerExclusive::ignored*)
 T int ServerClassInit<DT_TerrorPlayer::ignored>(DT_TerrorPlayer::ignored*)
 T int ServerClassInit<DT_TerrorPlayerResource::ignored>(DT_TerrorPlayerResource::ignored*)
 T int ServerClassInit<DT_TerrorViewModel::ignored>(DT_TerrorViewModel::ignored*)
 T int ServerClassInit<DT_TerrorWeapon::ignored>(DT_TerrorWeapon::ignored*)
 T int ServerClassInit<DT_TestTraceline::ignored>(DT_TestTraceline::ignored*)
 T int ServerClassInit<DT_TransitioningPlayer::ignored>(DT_TransitioningPlayer::ignored*)
 T int ServerClassInit<DT_TriggerPlayerMovement::ignored>(DT_TriggerPlayerMovement::ignored*)
 T int ServerClassInit<DT_VGuiScreen::ignored>(DT_VGuiScreen::ignored*)
 T int ServerClassInit<DT_VoteController::ignored>(DT_VoteController::ignored*)
 T int ServerClassInit<DT_WORLD::ignored>(DT_WORLD::ignored*)
 T int ServerClassInit<DT_WaterBullet::ignored>(DT_WaterBullet::ignored*)
 T int ServerClassInit<DT_WaterLODControl::ignored>(DT_WaterLODControl::ignored*)
 T int ServerClassInit<DT_WeaponAmmoSpawn::ignored>(DT_WeaponAmmoSpawn::ignored*)
 T int ServerClassInit<DT_WeaponBoomerClaw::ignored>(DT_WeaponBoomerClaw::ignored*)
 T int ServerClassInit<DT_WeaponCSBase::ignored>(DT_WeaponCSBase::ignored*)
 T int ServerClassInit<DT_WeaponCSBaseGun::ignored>(DT_WeaponCSBaseGun::ignored*)
 T int ServerClassInit<DT_WeaponClaw::ignored>(DT_WeaponClaw::ignored*)
 T int ServerClassInit<DT_WeaponFirstAidKit::ignored>(DT_WeaponFirstAidKit::ignored*)
 T int ServerClassInit<DT_WeaponHunterClaw::ignored>(DT_WeaponHunterClaw::ignored*)
 T int ServerClassInit<DT_WeaponPainPills::ignored>(DT_WeaponPainPills::ignored*)
 T int ServerClassInit<DT_WeaponSmokerClaw::ignored>(DT_WeaponSmokerClaw::ignored*)
 T int ServerClassInit<DT_WeaponSpawn::ignored>(DT_WeaponSpawn::ignored*)
 T int ServerClassInit<DT_WeaponTankClaw::ignored>(DT_WeaponTankClaw::ignored*)
 T int ServerClassInit<DT_Witch::ignored>(DT_Witch::ignored*)
 T kill_helper(CCommand const&, bool, bool)
 T locksound_t::GetDataDescMap()
 T molotov_projectilePrecache::CResourcePrecacher::Cache(bool, ResourceList_t__*, bool)
 T mstudioanimdesc_t::pAnim(int*) const
 T mstudioanimdesc_t::pAnim(int*, float&) const
 T mstudioanimdesc_t::pHierarchy(int) const
 T mstudioanimdesc_t::pIKRule(int) const
 T nexttoken(char*, unsigned long, char const*, char)
 T non-virtual thunk to Action<Boomer>::~Action()
 T non-virtual thunk to Action<Hunter>::~Action()
 T non-virtual thunk to Action<Infected>::~Action()
 T non-virtual thunk to Action<Smoker>::~Action()
 T non-virtual thunk to Action<SurvivorBot>::~Action()
 T non-virtual thunk to Action<Tank>::~Action()
 T non-virtual thunk to Behavior<Boomer>::IsHindrance(INextBot const*, CBaseEntity*) const
 T non-virtual thunk to Behavior<Boomer>::IsPositionAllowed(INextBot const*, Vector const&) const
 T non-virtual thunk to Behavior<Boomer>::QueryCurrentPath(INextBot const*) const
 T non-virtual thunk to Behavior<Boomer>::SelectMoreDangerousThreat(INextBot const*, CBaseCombatCharacter const*, CBaseCombatCharacter*, CBaseCombatCharacter*) const
 T non-virtual thunk to Behavior<Boomer>::SelectTargetPoint(INextBot const*, CBaseCombatCharacter const*) const
 T non-virtual thunk to Behavior<Boomer>::ShouldHurry(INextBot const*) const
 T non-virtual thunk to Behavior<Boomer>::ShouldPickUp(INextBot const*, CBaseEntity*) const
 T non-virtual thunk to Behavior<Boomer>::~Behavior()
 T non-virtual thunk to Behavior<Hunter>::IsHindrance(INextBot const*, CBaseEntity*) const
 T non-virtual thunk to Behavior<Hunter>::IsPositionAllowed(INextBot const*, Vector const&) const
 T non-virtual thunk to Behavior<Hunter>::QueryCurrentPath(INextBot const*) const
 T non-virtual thunk to Behavior<Hunter>::SelectMoreDangerousThreat(INextBot const*, CBaseCombatCharacter const*, CBaseCombatCharacter*, CBaseCombatCharacter*) const
 T non-virtual thunk to Behavior<Hunter>::SelectTargetPoint(INextBot const*, CBaseCombatCharacter const*) const
 T non-virtual thunk to Behavior<Hunter>::ShouldHurry(INextBot const*) const
 T non-virtual thunk to Behavior<Hunter>::ShouldPickUp(INextBot const*, CBaseEntity*) const
 T non-virtual thunk to Behavior<Hunter>::~Behavior()
 T non-virtual thunk to Behavior<Infected>::IsHindrance(INextBot const*, CBaseEntity*) const
 T non-virtual thunk to Behavior<Infected>::IsPositionAllowed(INextBot const*, Vector const&) const
 T non-virtual thunk to Behavior<Infected>::QueryCurrentPath(INextBot const*) const
 T non-virtual thunk to Behavior<Infected>::SelectMoreDangerousThreat(INextBot const*, CBaseCombatCharacter const*, CBaseCombatCharacter*, CBaseCombatCharacter*) const
 T non-virtual thunk to Behavior<Infected>::SelectTargetPoint(INextBot const*, CBaseCombatCharacter const*) const
 T non-virtual thunk to Behavior<Infected>::ShouldHurry(INextBot const*) const
 T non-virtual thunk to Behavior<Infected>::ShouldPickUp(INextBot const*, CBaseEntity*) const
 T non-virtual thunk to Behavior<Infected>::~Behavior()
 T non-virtual thunk to Behavior<Smoker>::IsHindrance(INextBot const*, CBaseEntity*) const
 T non-virtual thunk to Behavior<Smoker>::IsPositionAllowed(INextBot const*, Vector const&) const
 T non-virtual thunk to Behavior<Smoker>::QueryCurrentPath(INextBot const*) const
 T non-virtual thunk to Behavior<Smoker>::SelectMoreDangerousThreat(INextBot const*, CBaseCombatCharacter const*, CBaseCombatCharacter*, CBaseCombatCharacter*) const
 T non-virtual thunk to Behavior<Smoker>::SelectTargetPoint(INextBot const*, CBaseCombatCharacter const*) const
 T non-virtual thunk to Behavior<Smoker>::ShouldHurry(INextBot const*) const
 T non-virtual thunk to Behavior<Smoker>::ShouldPickUp(INextBot const*, CBaseEntity*) const
 T non-virtual thunk to Behavior<Smoker>::~Behavior()
 T non-virtual thunk to Behavior<SurvivorBot>::IsHindrance(INextBot const*, CBaseEntity*) const
 T non-virtual thunk to Behavior<SurvivorBot>::IsPositionAllowed(INextBot const*, Vector const&) const
 T non-virtual thunk to Behavior<SurvivorBot>::QueryCurrentPath(INextBot const*) const
 T non-virtual thunk to Behavior<SurvivorBot>::SelectMoreDangerousThreat(INextBot const*, CBaseCombatCharacter const*, CBaseCombatCharacter*, CBaseCombatCharacter*) const
 T non-virtual thunk to Behavior<SurvivorBot>::SelectTargetPoint(INextBot const*, CBaseCombatCharacter const*) const
 T non-virtual thunk to Behavior<SurvivorBot>::ShouldHurry(INextBot const*) const
 T non-virtual thunk to Behavior<SurvivorBot>::ShouldPickUp(INextBot const*, CBaseEntity*) const
 T non-virtual thunk to Behavior<SurvivorBot>::~Behavior()
 T non-virtual thunk to Behavior<Tank>::IsHindrance(INextBot const*, CBaseEntity*) const
 T non-virtual thunk to Behavior<Tank>::IsPositionAllowed(INextBot const*, Vector const&) const
 T non-virtual thunk to Behavior<Tank>::QueryCurrentPath(INextBot const*) const
 T non-virtual thunk to Behavior<Tank>::SelectMoreDangerousThreat(INextBot const*, CBaseCombatCharacter const*, CBaseCombatCharacter*, CBaseCombatCharacter*) const
 T non-virtual thunk to Behavior<Tank>::SelectTargetPoint(INextBot const*, CBaseCombatCharacter const*) const
 T non-virtual thunk to Behavior<Tank>::ShouldHurry(INextBot const*) const
 T non-virtual thunk to Behavior<Tank>::ShouldPickUp(INextBot const*, CBaseEntity*) const
 T non-virtual thunk to Behavior<Tank>::~Behavior()
 T non-virtual thunk to BehaviorBackUp<SurvivorBot>::~BehaviorBackUp()
 T non-virtual thunk to BehaviorMoveTo<Boomer, InfectedPathCost>::~BehaviorMoveTo()
 T non-virtual thunk to BehaviorMoveTo<Hunter, InfectedPathCost>::~BehaviorMoveTo()
 T non-virtual thunk to BehaviorMoveTo<Smoker, InfectedPathCost>::~BehaviorMoveTo()
 T non-virtual thunk to BehaviorMoveTo<Tank, InfectedPathCost>::~BehaviorMoveTo()
 T non-virtual thunk to Boomer::GetBodyInterface() const
 T non-virtual thunk to Boomer::GetEntity() const
 T non-virtual thunk to Boomer::GetIntentionInterface() const
 T non-virtual thunk to Boomer::GetLocomotionInterface() const
 T non-virtual thunk to Boomer::GetVisionInterface() const
 T non-virtual thunk to Boomer::IsAbleToBreak(CBaseEntity const*) const
 T non-virtual thunk to Boomer::~Boomer()
 T non-virtual thunk to BoomerAttack::~BoomerAttack()
 T non-virtual thunk to BoomerBehavior::~BoomerBehavior()
 T non-virtual thunk to BoomerHide::~BoomerHide()
 T non-virtual thunk to BoomerIntention::~BoomerIntention()
 T non-virtual thunk to BoomerRetreatToCover::~BoomerRetreatToCover()
 T non-virtual thunk to BoomerVomitOnVictim::~BoomerVomitOnVictim()
 T non-virtual thunk to BossZombiePlayerBot::GetDebugIdentifier() const
 T non-virtual thunk to BossZombiePlayerBot::GetEntity() const
 T non-virtual thunk to BossZombiePlayerBot::IsDebugFilterMatch(char const*) const
 T non-virtual thunk to BossZombiePlayerBot::ShouldTouch(CBaseEntity const*) const
 T non-virtual thunk to BossZombiePlayerBot::Update()
 T non-virtual thunk to BossZombiePlayerBot::~BossZombiePlayerBot()
 T non-virtual thunk to CAchievementMsgHandler::PostInit()
 T non-virtual thunk to CAchievementMsgHandler::~CAchievementMsgHandler()
 T non-virtual thunk to CBaseAchievement::GetAchievementID()
 T non-virtual thunk to CBaseAchievement::GetComponentBits()
 T non-virtual thunk to CBaseAchievement::GetComponentDisplayString(int)
 T non-virtual thunk to CBaseAchievement::GetCount()
 T non-virtual thunk to CBaseAchievement::GetDisplayOrder()
 T non-virtual thunk to CBaseAchievement::GetFlags()
 T non-virtual thunk to CBaseAchievement::GetGoal()
 T non-virtual thunk to CBaseAchievement::GetIconPath()
 T non-virtual thunk to CBaseAchievement::GetName()
 T non-virtual thunk to CBaseAchievement::GetNumComponents()
 T non-virtual thunk to CBaseAchievement::GetPointValue()
 T non-virtual thunk to CBaseAchievement::IsAchieved()
 T non-virtual thunk to CBaseAchievement::SetShowOnHUD(bool)
 T non-virtual thunk to CBaseAchievement::ShouldHideUntilAchieved()
 T non-virtual thunk to CBaseAchievement::ShouldSaveWithGame()
 T non-virtual thunk to CBaseAchievement::ShouldShowOnHUD()
 T non-virtual thunk to CBaseDoor::FireGameEvent(IGameEvent*)
 T non-virtual thunk to CBaseDoor::~CBaseDoor()
 T non-virtual thunk to CBasePropDoor::FireGameEvent(IGameEvent*)
 T non-virtual thunk to CBasePropDoor::~CBasePropDoor()
 T non-virtual thunk to CBreakable::GetBasePropData()
 T non-virtual thunk to CBreakable::GetBreakableCount()
 T non-virtual thunk to CBreakable::GetBreakableModel()
 T non-virtual thunk to CBreakable::GetBreakableSkin()
 T non-virtual thunk to CBreakable::GetDmgModBullet()
 T non-virtual thunk to CBreakable::GetDmgModClub()
 T non-virtual thunk to CBreakable::GetDmgModExplosive()
 T non-virtual thunk to CBreakable::GetDmgModFire()
 T non-virtual thunk to CBreakable::GetExplosionBuildupSound()
 T non-virtual thunk to CBreakable::GetExplosionDelay()
 T non-virtual thunk to CBreakable::GetExplosionType()
 T non-virtual thunk to CBreakable::GetExplosiveDamage()
 T non-virtual thunk to CBreakable::GetExplosiveRadius()
 T non-virtual thunk to CBreakable::GetMaxBreakableSize()
 T non-virtual thunk to CBreakable::GetMultiplayerBreakMode() const
 T non-virtual thunk to CBreakable::GetPhysicsDamageTable()
 T non-virtual thunk to CBreakable::GetPhysicsMode()
 T non-virtual thunk to CBreakable::HasInteraction(propdata_interactions_t)
 T non-virtual thunk to CBreakable::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T non-virtual thunk to CBreakable::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T non-virtual thunk to CBreakable::SetBasePropData(string_t)
 T non-virtual thunk to CBreakable::SetBreakableCount(int)
 T non-virtual thunk to CBreakable::SetBreakableModel(string_t)
 T non-virtual thunk to CBreakable::SetBreakableSkin(int)
 T non-virtual thunk to CBreakable::SetDmgModBullet(float)
 T non-virtual thunk to CBreakable::SetDmgModClub(float)
 T non-virtual thunk to CBreakable::SetDmgModExplosive(float)
 T non-virtual thunk to CBreakable::SetDmgModFire(float)
 T non-virtual thunk to CBreakable::SetExplosionBuildupSound(string_t)
 T non-virtual thunk to CBreakable::SetExplosionDelay(float)
 T non-virtual thunk to CBreakable::SetExplosionType(explosion_t)
 T non-virtual thunk to CBreakable::SetExplosiveDamage(float)
 T non-virtual thunk to CBreakable::SetExplosiveRadius(float)
 T non-virtual thunk to CBreakable::SetInteraction(propdata_interactions_t)
 T non-virtual thunk to CBreakable::SetMaxBreakableSize(int)
 T non-virtual thunk to CBreakable::SetMultiplayerBreakMode(mp_break_t)
 T non-virtual thunk to CBreakable::SetPhysicsDamageTable(string_t)
 T non-virtual thunk to CBreakable::SetPhysicsMode(int)
 T non-virtual thunk to CBreakable::SetPropDataBlocksLOS(bool)
 T non-virtual thunk to CBreakable::SetPropDataIsAIWalkable(bool)
 T non-virtual thunk to CBreakableProp::GetBasePropData()
 T non-virtual thunk to CBreakableProp::GetBreakableCount()
 T non-virtual thunk to CBreakableProp::GetBreakableModel()
 T non-virtual thunk to CBreakableProp::GetBreakableSkin()
 T non-virtual thunk to CBreakableProp::GetDmgModBullet()
 T non-virtual thunk to CBreakableProp::GetDmgModClub()
 T non-virtual thunk to CBreakableProp::GetDmgModExplosive()
 T non-virtual thunk to CBreakableProp::GetDmgModFire()
 T non-virtual thunk to CBreakableProp::GetExplosionBuildupSound()
 T non-virtual thunk to CBreakableProp::GetExplosionDelay()
 T non-virtual thunk to CBreakableProp::GetExplosionType()
 T non-virtual thunk to CBreakableProp::GetExplosiveDamage()
 T non-virtual thunk to CBreakableProp::GetExplosiveRadius()
 T non-virtual thunk to CBreakableProp::GetMaxBreakableSize()
 T non-virtual thunk to CBreakableProp::GetMultiplayerBreakMode() const
 T non-virtual thunk to CBreakableProp::GetPhysicsDamageTable()
 T non-virtual thunk to CBreakableProp::GetPhysicsMode()
 T non-virtual thunk to CBreakableProp::HasInteraction(propdata_interactions_t)
 T non-virtual thunk to CBreakableProp::HasPreferredCarryAnglesForPlayer(CBasePlayer*)
 T non-virtual thunk to CBreakableProp::OnAttemptPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T non-virtual thunk to CBreakableProp::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T non-virtual thunk to CBreakableProp::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T non-virtual thunk to CBreakableProp::PhysGunLaunchAngularImpulse()
 T non-virtual thunk to CBreakableProp::PreferredCarryAngles()
 T non-virtual thunk to CBreakableProp::SetBasePropData(string_t)
 T non-virtual thunk to CBreakableProp::SetBreakableCount(int)
 T non-virtual thunk to CBreakableProp::SetBreakableModel(string_t)
 T non-virtual thunk to CBreakableProp::SetBreakableSkin(int)
 T non-virtual thunk to CBreakableProp::SetDmgModBullet(float)
 T non-virtual thunk to CBreakableProp::SetDmgModClub(float)
 T non-virtual thunk to CBreakableProp::SetDmgModExplosive(float)
 T non-virtual thunk to CBreakableProp::SetDmgModFire(float)
 T non-virtual thunk to CBreakableProp::SetExplosionBuildupSound(string_t)
 T non-virtual thunk to CBreakableProp::SetExplosionDelay(float)
 T non-virtual thunk to CBreakableProp::SetExplosionType(explosion_t)
 T non-virtual thunk to CBreakableProp::SetExplosiveDamage(float)
 T non-virtual thunk to CBreakableProp::SetExplosiveRadius(float)
 T non-virtual thunk to CBreakableProp::SetInteraction(propdata_interactions_t)
 T non-virtual thunk to CBreakableProp::SetMaxBreakableSize(int)
 T non-virtual thunk to CBreakableProp::SetMultiplayerBreakMode(mp_break_t)
 T non-virtual thunk to CBreakableProp::SetPhysicsDamageTable(string_t)
 T non-virtual thunk to CBreakableProp::SetPhysicsMode(int)
 T non-virtual thunk to CBreakableProp::SetPropDataBlocksLOS(bool)
 T non-virtual thunk to CBreakableProp::SetPropDataIsAIWalkable(bool)
 T non-virtual thunk to CCSHLTVDirector::GetModEvents()
 T non-virtual thunk to CCSHLTVDirector::SetHLTVServer(IHLTVServer*)
 T non-virtual thunk to CCSHLTVDirector::~CCSHLTVDirector()
 T non-virtual thunk to CCSPlayer::CSAnim_CanMove()
 T non-virtual thunk to CCSPlayer::CSAnim_GetActiveWeapon()
 T non-virtual thunk to CCSPlayerAnimState::ClearAccumulatedMotion()
 T non-virtual thunk to CCSPlayerAnimState::DoAnimationEvent(PlayerAnimEvent_t, int, int*, int*)
 T non-virtual thunk to CCSPlayerAnimState::FireEvent(Vector const&, QAngle const&, int, char const*)
 T non-virtual thunk to CCSPlayerAnimState::GetAccumulatedMotion(Vector*) const
 T non-virtual thunk to CCSPlayerAnimState::IsClimbingLedge() const
 T non-virtual thunk to CCSPlayerAnimState::IsHealing() const
 T non-virtual thunk to CCSPlayerAnimState::IsIncapAnimFinished() const
 T non-virtual thunk to CCSPlayerAnimState::IsJumping() const
 T non-virtual thunk to CCSPlayerAnimState::IsPlayingGrenadeThrowAnim() const
 T non-virtual thunk to CCSPlayerAnimState::IsThrowingGrenade()
 T non-virtual thunk to CCSPlayerAnimState::OnMainSequenceChanged(int)
 T non-virtual thunk to CCSPlayerAnimState::OnStaggerStart()
 T non-virtual thunk to CCSPlayerAnimState::ShouldHideWeapon() const
 T non-virtual thunk to CCarGlassProp::~CCarGlassProp()
 T non-virtual thunk to CCarProp::CanObstructNavAreas() const
 T non-virtual thunk to CCarProp::FireGameEvent(IGameEvent*)
 T non-virtual thunk to CCarProp::GetNavObstructionHeight() const
 T non-virtual thunk to CCarProp::IsPotentiallyAbleToObstructNavAreas() const
 T non-virtual thunk to CCarProp::~CCarProp()
 T non-virtual thunk to CCollisionEvent::AdditionalCollisionChecksThisTick(int)
 T non-virtual thunk to CCollisionEvent::ObjectSleep(IPhysicsObject*)
 T non-virtual thunk to CCollisionEvent::ObjectWake(IPhysicsObject*)
 T non-virtual thunk to CCollisionEvent::ShouldCollide(IPhysicsObject*, IPhysicsObject*, void*, void*)
 T non-virtual thunk to CCollisionEvent::ShouldFreezeContacts(IPhysicsObject**, int)
 T non-virtual thunk to CCollisionEvent::ShouldFreezeObject(IPhysicsObject*)
 T non-virtual thunk to CCollisionEvent::ShouldSolvePenetration(IPhysicsObject*, IPhysicsObject*, void*, void*, float)
 T non-virtual thunk to CColorCorrectionSystem::FireGameEvent(IGameEvent*)
 T non-virtual thunk to CColorCorrectionSystem::~CColorCorrectionSystem()
 T non-virtual thunk to CDecalEmitterSystem::Init()
 T non-virtual thunk to CDecalEmitterSystem::LevelInitPreEntity()
 T non-virtual thunk to CDecalEmitterSystem::Shutdown()
 T non-virtual thunk to CDecalEmitterSystem::~CDecalEmitterSystem()
 T non-virtual thunk to CDefaultResponseSystem::Init()
 T non-virtual thunk to CDefaultResponseSystem::LevelInitPostEntity()
 T non-virtual thunk to CDefaultResponseSystem::LevelInitPreEntity()
 T non-virtual thunk to CDefaultResponseSystem::Shutdown()
 T non-virtual thunk to CDefaultResponseSystem::~CDefaultResponseSystem()
 T non-virtual thunk to CDirtySpatialPartitionEntityList::OnPostQuery(int)
 T non-virtual thunk to CDirtySpatialPartitionEntityList::OnPreQuery(int)
 T non-virtual thunk to CDynamicProp::NotifyPositionChanged(CBaseEntity*)
 T non-virtual thunk to CDynamicProp::~CDynamicProp()
 T non-virtual thunk to CEmptyConVar::GetName() const
 T non-virtual thunk to CEmptyConVar::IsFlagSet(int) const
 T non-virtual thunk to CEmptyConVar::SetValue(char const*)
 T non-virtual thunk to CEmptyConVar::SetValue(float)
 T non-virtual thunk to CEmptyConVar::SetValue(int)
 T non-virtual thunk to CEntFireAutoCompletionFunctor::CommandCompletionCallback(char const*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >&)
 T non-virtual thunk to CEventLog::Init()
 T non-virtual thunk to CEventLog::~CEventLog()
 T non-virtual thunk to CFishPool::FireGameEvent(IGameEvent*)
 T non-virtual thunk to CFishPool::~CFishPool()
 T non-virtual thunk to CFogSystem::FireGameEvent(IGameEvent*)
 T non-virtual thunk to CFogSystem::~CFogSystem()
 T non-virtual thunk to CFuncNavObstruction::CanObstructNavAreas() const
 T non-virtual thunk to CFuncNavObstruction::GetNavObstructionHeight() const
 T non-virtual thunk to CFuncNavObstruction::GetObstructingEntity()
 T non-virtual thunk to CFuncNavObstruction::IsPotentiallyAbleToObstructNavAreas() const
 T non-virtual thunk to CFuncNavObstruction::OnNavMeshLoaded()
 T non-virtual thunk to CFunctor1<void (*)(bool), bool, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >::~CFunctor1()
 T non-virtual thunk to CFunctor3<void (*)(IPhysicsObject*, Vector const&, Vector const&), IPhysicsObject*, Vector, Vector, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >::~CFunctor3()
 T non-virtual thunk to CFunctor4<CBaseEntity* (*)(CBaseEntity*, CBaseEntity*, bool, float), CBaseEntity*, CBaseEntity*, bool, float, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >::~CFunctor4()
 T non-virtual thunk to CFunctorJob::~CFunctorJob()
 T non-virtual thunk to CGib::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T non-virtual thunk to CGib::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T non-virtual thunk to CHLTVDirector::FrameUpdatePostEntityThink()
 T non-virtual thunk to CHLTVDirector::GetDelay()
 T non-virtual thunk to CHLTVDirector::GetDirectorTick()
 T non-virtual thunk to CHLTVDirector::GetHLTVServer()
 T non-virtual thunk to CHLTVDirector::GetModEvents()
 T non-virtual thunk to CHLTVDirector::GetPVSEntity()
 T non-virtual thunk to CHLTVDirector::GetPVSOrigin()
 T non-virtual thunk to CHLTVDirector::Init()
 T non-virtual thunk to CHLTVDirector::IsActive()
 T non-virtual thunk to CHLTVDirector::LevelInitPostEntity()
 T non-virtual thunk to CHLTVDirector::Name()
 T non-virtual thunk to CHLTVDirector::SetHLTVServer(IHLTVServer*)
 T non-virtual thunk to CHLTVDirector::Shutdown()
 T non-virtual thunk to CHLTVDirector::~CHLTVDirector()
 T non-virtual thunk to CInfectedZooPuppet::OnNavAreaChanged(CNavArea*, CNavArea*)
 T non-virtual thunk to CInfectedZooPuppet::Update()
 T non-virtual thunk to CInfectedZooPuppet::~CInfectedZooPuppet()
 T non-virtual thunk to CItem::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T non-virtual thunk to CItem::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T non-virtual thunk to CJob::~CJob()
 T non-virtual thunk to CKeepUpright::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)
 T non-virtual thunk to CL4DGameStats::FireGameEvent(IGameEvent*)
 T non-virtual thunk to CL4DGameStats::Init()
 T non-virtual thunk to CL4DGameStats::~CL4DGameStats()
 T non-virtual thunk to CLagCompensationManager::FinishLagCompensation(CBasePlayer*)
 T non-virtual thunk to CLagCompensationManager::StartLagCompensation(CBasePlayer*, LagCompensationType, Vector const&, QAngle const&, float)
 T non-virtual thunk to CLogicNavigation::OnEntitySpawned(CBaseEntity*)
 T non-virtual thunk to CMemberFunctor0<CParallelProcessor<QueryCacheUpdateRecord_t, CFuncJobItemProcessor<QueryCacheUpdateRecord_t>, 1>*, void (CParallelProcessor<QueryCacheUpdateRecord_t, CFuncJobItemProcessor<QueryCacheUpdateRecord_t>, 1>::*)(), CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>::~CMemberFunctor0()
 T non-virtual thunk to CMemberFunctor3<CBreakableProp*, void (CBreakableProp::*)(Vector const&, Vector const&, QAngle const&), Vector, Vector, QAngle, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>::~CMemberFunctor3()
 T non-virtual thunk to CNotifyList::OnEntityCreated(CBaseEntity*)
 T non-virtual thunk to CNotifyList::OnEntityDeleted(CBaseEntity*)
 T non-virtual thunk to COrnamentProp::~COrnamentProp()
 T non-virtual thunk to CPhysBox::HasPreferredCarryAnglesForPlayer(CBasePlayer*)
 T non-virtual thunk to CPhysBox::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T non-virtual thunk to CPhysBox::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T non-virtual thunk to CPhysBox::PreferredCarryAngles()
 T non-virtual thunk to CPhysBoxMultiplayer::GetMass()
 T non-virtual thunk to CPhysBoxMultiplayer::GetMultiplayerPhysicsMode()
 T non-virtual thunk to CPhysBoxMultiplayer::IsAsleep()
 T non-virtual thunk to CPhysHinge::NotifyVPhysicsStateChanged(IPhysicsObject*, CBaseEntity*, bool)
 T non-virtual thunk to CPhysHinge::~CPhysHinge()
 T non-virtual thunk to CPhysMagnet::ConstraintBroken(IPhysicsConstraint*)
 T non-virtual thunk to CPhysSaveRestoreBlockHandler::AssociateModel(IPhysicsObject*, CPhysCollide const*)
 T non-virtual thunk to CPhysSaveRestoreBlockHandler::AssociateModel(IPhysicsObject*, int)
 T non-virtual thunk to CPhysSaveRestoreBlockHandler::ForgetAllModels()
 T non-virtual thunk to CPhysSaveRestoreBlockHandler::ForgetModel(IPhysicsObject*)
 T non-virtual thunk to CPhysSaveRestoreBlockHandler::NoteBBox(Vector const&, Vector const&, CPhysCollide*)
 T non-virtual thunk to CPhysSaveRestoreBlockHandler::OnEntityCreated(CBaseEntity*)
 T non-virtual thunk to CPhysSaveRestoreBlockHandler::OnEntityDeleted(CBaseEntity*)
 T non-virtual thunk to CPhysSlideConstraint::NotifyVPhysicsStateChanged(IPhysicsObject*, CBaseEntity*, bool)
 T non-virtual thunk to CPhysSlideConstraint::~CPhysSlideConstraint()
 T non-virtual thunk to CPhysicsCannister::HasPreferredCarryAnglesForPlayer(CBasePlayer*)
 T non-virtual thunk to CPhysicsCannister::OnAttemptPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T non-virtual thunk to CPhysicsCannister::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T non-virtual thunk to CPhysicsCannister::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T non-virtual thunk to CPhysicsCannister::PhysGunLaunchAngularImpulse()
 T non-virtual thunk to CPhysicsCannister::PhysGunLaunchVelocity(Vector const&, float)
 T non-virtual thunk to CPhysicsCannister::PreferredCarryAngles()
 T non-virtual thunk to CPhysicsCannister::ShouldPuntUseLaunchForces(PhysGunForce_t)
 T non-virtual thunk to CPhysicsNPCSolver::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)
 T non-virtual thunk to CPhysicsProp::CanObstructNavAreas() const
 T non-virtual thunk to CPhysicsProp::GetNavObstructionHeight() const
 T non-virtual thunk to CPhysicsProp::GetObstructingEntity()
 T non-virtual thunk to CPhysicsProp::IsPotentiallyAbleToObstructNavAreas() const
 T non-virtual thunk to CPhysicsProp::OnNavMeshLoaded()
 T non-virtual thunk to CPhysicsProp::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T non-virtual thunk to CPhysicsProp::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T non-virtual thunk to CPlayerInfo::ChangeTeam(int)
 T non-virtual thunk to CPlayerInfo::GetAbsAngles()
 T non-virtual thunk to CPlayerInfo::GetAbsOrigin()
 T non-virtual thunk to CPlayerInfo::GetArmorValue()
 T non-virtual thunk to CPlayerInfo::GetDeathCount()
 T non-virtual thunk to CPlayerInfo::GetFragCount()
 T non-virtual thunk to CPlayerInfo::GetHealth()
 T non-virtual thunk to CPlayerInfo::GetLastUserCommand()
 T non-virtual thunk to CPlayerInfo::GetMaxHealth()
 T non-virtual thunk to CPlayerInfo::GetModelName()
 T non-virtual thunk to CPlayerInfo::GetName()
 T non-virtual thunk to CPlayerInfo::GetNetworkIDString()
 T non-virtual thunk to CPlayerInfo::GetPlayerMaxs()
 T non-virtual thunk to CPlayerInfo::GetPlayerMins()
 T non-virtual thunk to CPlayerInfo::GetTeamIndex()
 T non-virtual thunk to CPlayerInfo::GetUserID()
 T non-virtual thunk to CPlayerInfo::GetWeaponName()
 T non-virtual thunk to CPlayerInfo::IsConnected()
 T non-virtual thunk to CPlayerInfo::IsDead()
 T non-virtual thunk to CPlayerInfo::IsFakeClient()
 T non-virtual thunk to CPlayerInfo::IsHLTV()
 T non-virtual thunk to CPlayerInfo::IsInAVehicle()
 T non-virtual thunk to CPlayerInfo::IsObserver()
 T non-virtual thunk to CPlayerInfo::IsPlayer()
 T non-virtual thunk to CPostProcessSystem::FireGameEvent(IGameEvent*)
 T non-virtual thunk to CPostProcessSystem::~CPostProcessSystem()
 T non-virtual thunk to CPropDoorRotating::~CPropDoorRotating()
 T non-virtual thunk to CPropDoorRotatingBreakable::~CPropDoorRotatingBreakable()
 T non-virtual thunk to CPropDoorRotatingCheckpoint::~CPropDoorRotatingCheckpoint()
 T non-virtual thunk to CPropGlowingObject::~CPropGlowingObject()
 T non-virtual thunk to CPropHealthCabinet::FireGameEvent(IGameEvent*)
 T non-virtual thunk to CPropHealthCabinet::~CPropHealthCabinet()
 T non-virtual thunk to CPropMinigun::~CPropMinigun()
 T non-virtual thunk to CPropMountedGun::~CPropMountedGun()
 T non-virtual thunk to CPropVehicle::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T non-virtual thunk to CPropVehicleDriveable::AllowBlockedExit(CBaseCombatCharacter*, int)
 T non-virtual thunk to CPropVehicleDriveable::AllowMidairExit(CBaseCombatCharacter*, int)
 T non-virtual thunk to CPropVehicleDriveable::CanEnterVehicle(CBaseEntity*)
 T non-virtual thunk to CPropVehicleDriveable::CanExitVehicle(CBaseEntity*)
 T non-virtual thunk to CPropVehicleDriveable::EnterVehicle(CBaseCombatCharacter*)
 T non-virtual thunk to CPropVehicleDriveable::ExitVehicle(int)
 T non-virtual thunk to CPropVehicleDriveable::FinishMove(CBasePlayer*, CUserCmd*, CMoveData*)
 T non-virtual thunk to CPropVehicleDriveable::GetDriver()
 T non-virtual thunk to CPropVehicleDriveable::GetVehicleScriptName()
 T non-virtual thunk to CPropVehicleDriveable::ItemPostFrame(CBasePlayer*)
 T non-virtual thunk to CPropVehicleDriveable::NPC_AddPassenger(CAI_BaseNPC*, string_t, int)
 T non-virtual thunk to CPropVehicleDriveable::NPC_CanEnterVehicle(CAI_BaseNPC*, bool)
 T non-virtual thunk to CPropVehicleDriveable::NPC_CanExitVehicle(CAI_BaseNPC*, bool)
 T non-virtual thunk to CPropVehicleDriveable::NPC_FinishedEnterVehicle(CAI_BaseNPC*, bool)
 T non-virtual thunk to CPropVehicleDriveable::NPC_FinishedExitVehicle(CAI_BaseNPC*, bool)
 T non-virtual thunk to CPropVehicleDriveable::NPC_RemovePassenger(CAI_BaseNPC*)
 T non-virtual thunk to CPropVehicleDriveable::PassengerShouldReceiveDamage(CTakeDamageInfo&)
 T non-virtual thunk to CPropVehicleDriveable::PreExitVehicle(CBaseCombatCharacter*, int)
 T non-virtual thunk to CPropVehicleDriveable::ProcessMovement(CBasePlayer*, CMoveData*)
 T non-virtual thunk to CPropVehicleDriveable::SetVehicleEntryAnim(bool)
 T non-virtual thunk to CPropVehicleDriveable::SetVehicleExitAnim(bool, Vector)
 T non-virtual thunk to CPropVehicleDriveable::SetupMove(CBasePlayer*, CUserCmd*, IMoveHelper*, CMoveData*)
 T non-virtual thunk to CRagdollProp::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T non-virtual thunk to CRagdollProp::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T non-virtual thunk to CRagdollProp::PhysGunLaunchAngularImpulse()
 T non-virtual thunk to CRopeKeyframe::NotifyPositionChanged(CBaseEntity*)
 T non-virtual thunk to CRopeKeyframe::~CRopeKeyframe()
 T non-virtual thunk to CRotDoor::~CRotDoor()
 T non-virtual thunk to CRotorWashShooter::DoWashPush(float, Vector const&)
 T non-virtual thunk to CSceneEntity::CheckEvent(float, CChoreoScene*, CChoreoEvent*)
 T non-virtual thunk to CSceneEntity::EndEvent(float, CChoreoScene*, CChoreoEvent*)
 T non-virtual thunk to CSceneEntity::ProcessEvent(float, CChoreoScene*, CChoreoEvent*)
 T non-virtual thunk to CSceneEntity::StartEvent(float, CChoreoScene*, CChoreoEvent*)
 T non-virtual thunk to CServerNetworkProperty::FireEvent()
 T non-virtual thunk to CSmokeCloudSystem::FireGameEvent(IGameEvent*)
 T non-virtual thunk to CSmokeCloudSystem::~CSmokeCloudSystem()
 T non-virtual thunk to CSoundControllerImp::LevelShutdownPreEntity()
 T non-virtual thunk to CSoundControllerImp::OnRestore()
 T non-virtual thunk to CSoundControllerImp::PreClientUpdate()
 T non-virtual thunk to CSoundControllerImp::~CSoundControllerImp()
 T non-virtual thunk to CSurvivorRescue::FireGameEvent(IGameEvent*)
 T non-virtual thunk to CSurvivorRescue::~CSurvivorRescue()
 T non-virtual thunk to CTerrorEventLog::Init()
 T non-virtual thunk to CTerrorEventLog::~CTerrorEventLog()
 T non-virtual thunk to CTerrorPlayer::OnSpokeConcept(CAI_Concept, AI_Response*)
 T non-virtual thunk to CToolFrameworkServer::PreSetupVisibility()
 T non-virtual thunk to CTransitioningPlayer::FireGameEvent(IGameEvent*)
 T non-virtual thunk to CTransitioningPlayer::~CTransitioningPlayer()
 T non-virtual thunk to CTriggerVPhysicsMotion::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)
 T non-virtual thunk to ChaseVictim::~ChaseVictim()
 T non-virtual thunk to ConVar::GetBaseName() const
 T non-virtual thunk to ConVar::GetName() const
 T non-virtual thunk to ConVar::GetSplitScreenPlayerSlot() const
 T non-virtual thunk to ConVar::IsFlagSet(int) const
 T non-virtual thunk to ConVar::SetValue(char const*)
 T non-virtual thunk to ConVar::SetValue(float)
 T non-virtual thunk to ConVar::SetValue(int)
 T non-virtual thunk to DebugMoveTo::~DebugMoveTo()
 T non-virtual thunk to Hunter::GetBodyInterface() const
 T non-virtual thunk to Hunter::GetEntity() const
 T non-virtual thunk to Hunter::GetIntentionInterface() const
 T non-virtual thunk to Hunter::GetLocomotionInterface() const
 T non-virtual thunk to Hunter::GetVisionInterface() const
 T non-virtual thunk to Hunter::IsAbleToBreak(CBaseEntity const*) const
 T non-virtual thunk to Hunter::~Hunter()
 T non-virtual thunk to HunterAttack::~HunterAttack()
 T non-virtual thunk to HunterBehavior::~HunterBehavior()
 T non-virtual thunk to HunterIntention::~HunterIntention()
 T non-virtual thunk to HunterLeapToCover::~HunterLeapToCover()
 T non-virtual thunk to HunterLungeAtVictim::~HunterLungeAtVictim()
 T non-virtual thunk to IIntention::IsHindrance(INextBot const*, CBaseEntity*) const
 T non-virtual thunk to IIntention::IsPositionAllowed(INextBot const*, Vector const&) const
 T non-virtual thunk to IIntention::QueryCurrentPath(INextBot const*) const
 T non-virtual thunk to IIntention::SelectMoreDangerousThreat(INextBot const*, CBaseCombatCharacter const*, CBaseCombatCharacter*, CBaseCombatCharacter*) const
 T non-virtual thunk to IIntention::SelectTargetPoint(INextBot const*, CBaseCombatCharacter const*) const
 T non-virtual thunk to IIntention::ShouldHurry(INextBot const*) const
 T non-virtual thunk to IIntention::ShouldPickUp(INextBot const*, CBaseEntity*) const
 T non-virtual thunk to IIntention::~IIntention()
 T non-virtual thunk to Infected::GetBodyInterface() const
 T non-virtual thunk to Infected::GetEntity() const
 T non-virtual thunk to Infected::GetIntentionInterface() const
 T non-virtual thunk to Infected::GetLocomotionInterface() const
 T non-virtual thunk to Infected::GetVisionInterface() const
 T non-virtual thunk to Infected::IsAbleToBlockMovementOf(INextBot const*) const
 T non-virtual thunk to Infected::IsAbleToBreak(CBaseEntity const*) const
 T non-virtual thunk to Infected::IsAbleToClimbOnto(CBaseEntity const*) const
 T non-virtual thunk to Infected::OnIgnite()
 T non-virtual thunk to Infected::ShouldTouch(CBaseEntity const*) const
 T non-virtual thunk to Infected::Update()
 T non-virtual thunk to Infected::~Infected()
 T non-virtual thunk to InfectedAlert::~InfectedAlert()
 T non-virtual thunk to InfectedAttack::~InfectedAttack()
 T non-virtual thunk to InfectedBehavior::~InfectedBehavior()
 T non-virtual thunk to InfectedBlinded::~InfectedBlinded()
 T non-virtual thunk to InfectedBurn::~InfectedBurn()
 T non-virtual thunk to InfectedChangePosture::~InfectedChangePosture()
 T non-virtual thunk to InfectedDying::~InfectedDying()
 T non-virtual thunk to InfectedExecAction::~InfectedExecAction()
 T non-virtual thunk to InfectedIntention::~InfectedIntention()
 T non-virtual thunk to InfectedLeanOnWall::~InfectedLeanOnWall()
 T non-virtual thunk to InfectedLieDown::~InfectedLieDown()
 T non-virtual thunk to InfectedShoved::~InfectedShoved()
 T non-virtual thunk to InfectedSitDown::~InfectedSitDown()
 T non-virtual thunk to InfectedStaggerAround::~InfectedStaggerAround()
 T non-virtual thunk to InfectedStandDazed::~InfectedStandDazed()
 T non-virtual thunk to InfectedStandingActivity::~InfectedStandingActivity()
 T non-virtual thunk to InfectedWander::~InfectedWander()
 T non-virtual thunk to LostVictim::~LostVictim()
 T non-virtual thunk to NextBotCombatCharacter::GetEntity() const
 T non-virtual thunk to NextBotCombatCharacter::GetNextBotCombatCharacter() const
 T non-virtual thunk to NextBotCombatCharacter::OnNavAreaChanged(CNavArea*, CNavArea*)
 T non-virtual thunk to NextBotCombatCharacter::~NextBotCombatCharacter()
 T non-virtual thunk to NextBotPlayer<CTerrorPlayer>::IsRemovedOnReset() const
 T non-virtual thunk to NextBotPlayer<CTerrorPlayer>::OnNavAreaChanged(CNavArea*, CNavArea*)
 T non-virtual thunk to NextBotPlayer<CTerrorPlayer>::PressBackwardButton(float)
 T non-virtual thunk to NextBotPlayer<CTerrorPlayer>::PressCrouchButton(float)
 T non-virtual thunk to NextBotPlayer<CTerrorPlayer>::PressFireButton(float)
 T non-virtual thunk to NextBotPlayer<CTerrorPlayer>::PressForwardButton(float)
 T non-virtual thunk to NextBotPlayer<CTerrorPlayer>::PressJumpButton(float)
 T non-virtual thunk to NextBotPlayer<CTerrorPlayer>::PressLeftButton(float)
 T non-virtual thunk to NextBotPlayer<CTerrorPlayer>::PressMeleeButton(float)
 T non-virtual thunk to NextBotPlayer<CTerrorPlayer>::PressReloadButton(float)
 T non-virtual thunk to NextBotPlayer<CTerrorPlayer>::PressRightButton(float)
 T non-virtual thunk to NextBotPlayer<CTerrorPlayer>::PressUseButton(float)
 T non-virtual thunk to NextBotPlayer<CTerrorPlayer>::PressWalkButton(float)
 T non-virtual thunk to NextBotPlayer<CTerrorPlayer>::ReleaseBackwardButton()
 T non-virtual thunk to NextBotPlayer<CTerrorPlayer>::ReleaseCrouchButton()
 T non-virtual thunk to NextBotPlayer<CTerrorPlayer>::ReleaseFireButton()
 T non-virtual thunk to NextBotPlayer<CTerrorPlayer>::ReleaseForwardButton()
 T non-virtual thunk to NextBotPlayer<CTerrorPlayer>::ReleaseJumpButton()
 T non-virtual thunk to NextBotPlayer<CTerrorPlayer>::ReleaseLeftButton()
 T non-virtual thunk to NextBotPlayer<CTerrorPlayer>::ReleaseMeleeButton()
 T non-virtual thunk to NextBotPlayer<CTerrorPlayer>::ReleaseReloadButton()
 T non-virtual thunk to NextBotPlayer<CTerrorPlayer>::ReleaseRightButton()
 T non-virtual thunk to NextBotPlayer<CTerrorPlayer>::ReleaseUseButton()
 T non-virtual thunk to NextBotPlayer<CTerrorPlayer>::ReleaseWalkButton()
 T non-virtual thunk to NextBotPlayer<CTerrorPlayer>::SetButtonScale(float, float)
 T non-virtual thunk to NextBotPlayer<CTerrorPlayer>::Update()
 T non-virtual thunk to NextBotPlayer<CTerrorPlayer>::~NextBotPlayer()
 T non-virtual thunk to PunchVictim::~PunchVictim()
 T non-virtual thunk to Smoker::GetBodyInterface() const
 T non-virtual thunk to Smoker::GetEntity() const
 T non-virtual thunk to Smoker::GetIntentionInterface() const
 T non-virtual thunk to Smoker::GetLocomotionInterface() const
 T non-virtual thunk to Smoker::GetVisionInterface() const
 T non-virtual thunk to Smoker::IsAbleToBreak(CBaseEntity const*) const
 T non-virtual thunk to Smoker::~Smoker()
 T non-virtual thunk to SmokerAttack::~SmokerAttack()
 T non-virtual thunk to SmokerBehavior::~SmokerBehavior()
 T non-virtual thunk to SmokerIntention::~SmokerIntention()
 T non-virtual thunk to SmokerMoveToAttackPosition::~SmokerMoveToAttackPosition()
 T non-virtual thunk to SmokerRetreatToCover::~SmokerRetreatToCover()
 T non-virtual thunk to SmokerTongueVictim::~SmokerTongueVictim()
 T non-virtual thunk to SurvivorAmbushBoomer::IsHindrance(INextBot const*, CBaseEntity*) const
 T non-virtual thunk to SurvivorAmbushBoomer::ShouldHurry(INextBot const*) const
 T non-virtual thunk to SurvivorAmbushBoomer::~SurvivorAmbushBoomer()
 T non-virtual thunk to SurvivorAttack::IsHindrance(INextBot const*, CBaseEntity*) const
 T non-virtual thunk to SurvivorAttack::ShouldHurry(INextBot const*) const
 T non-virtual thunk to SurvivorAttack::~SurvivorAttack()
 T non-virtual thunk to SurvivorBehavior::IsHindrance(INextBot const*, CBaseEntity*) const
 T non-virtual thunk to SurvivorBehavior::SelectMoreDangerousThreat(INextBot const*, CBaseCombatCharacter const*, CBaseCombatCharacter*, CBaseCombatCharacter*) const
 T non-virtual thunk to SurvivorBehavior::SelectTargetPoint(INextBot const*, CBaseCombatCharacter const*) const
 T non-virtual thunk to SurvivorBehavior::ShouldHurry(INextBot const*) const
 T non-virtual thunk to SurvivorBehavior::~SurvivorBehavior()
 T non-virtual thunk to SurvivorBot::GetBodyInterface() const
 T non-virtual thunk to SurvivorBot::GetDebugIdentifier() const
 T non-virtual thunk to SurvivorBot::GetEntity() const
 T non-virtual thunk to SurvivorBot::GetIntentionInterface() const
 T non-virtual thunk to SurvivorBot::GetLocomotionInterface() const
 T non-virtual thunk to SurvivorBot::GetVisionInterface() const
 T non-virtual thunk to SurvivorBot::IsAbleToBreak(CBaseEntity const*) const
 T non-virtual thunk to SurvivorBot::MySurvivorBotPointer() const
 T non-virtual thunk to SurvivorBot::OnNavAreaChanged(CNavArea*, CNavArea*)
 T non-virtual thunk to SurvivorBot::Update()
 T non-virtual thunk to SurvivorBot::~SurvivorBot()
 T non-virtual thunk to SurvivorCheckpointLeaving::ShouldPickUp(INextBot const*, CBaseEntity*) const
 T non-virtual thunk to SurvivorCheckpointLeaving::~SurvivorCheckpointLeaving()
 T non-virtual thunk to SurvivorCheckpointReached::ShouldPickUp(INextBot const*, CBaseEntity*) const
 T non-virtual thunk to SurvivorCheckpointReached::~SurvivorCheckpointReached()
 T non-virtual thunk to SurvivorCloseDoor::~SurvivorCloseDoor()
 T non-virtual thunk to SurvivorCollectObject::~SurvivorCollectObject()
 T non-virtual thunk to SurvivorDebugApproach::IsHindrance(INextBot const*, CBaseEntity*) const
 T non-virtual thunk to SurvivorDebugApproach::ShouldHurry(INextBot const*) const
 T non-virtual thunk to SurvivorDebugApproach::~SurvivorDebugApproach()
 T non-virtual thunk to SurvivorDislodgeVictim::IsHindrance(INextBot const*, CBaseEntity*) const
 T non-virtual thunk to SurvivorDislodgeVictim::ShouldHurry(INextBot const*) const
 T non-virtual thunk to SurvivorDislodgeVictim::~SurvivorDislodgeVictim()
 T non-virtual thunk to SurvivorElevatorEnter::~SurvivorElevatorEnter()
 T non-virtual thunk to SurvivorElevatorRide::~SurvivorElevatorRide()
 T non-virtual thunk to SurvivorEscapeFlames::IsHindrance(INextBot const*, CBaseEntity*) const
 T non-virtual thunk to SurvivorEscapeFlames::ShouldHurry(INextBot const*) const
 T non-virtual thunk to SurvivorEscapeFlames::~SurvivorEscapeFlames()
 T non-virtual thunk to SurvivorEscapeLadderAmbush::~SurvivorEscapeLadderAmbush()
 T non-virtual thunk to SurvivorGivePillsToFriend::~SurvivorGivePillsToFriend()
 T non-virtual thunk to SurvivorHealFriend::ShouldHurry(INextBot const*) const
 T non-virtual thunk to SurvivorHealFriend::~SurvivorHealFriend()
 T non-virtual thunk to SurvivorHealSelf::~SurvivorHealSelf()
 T non-virtual thunk to SurvivorIntention::IsPositionAllowed(INextBot const*, Vector const&) const
 T non-virtual thunk to SurvivorIntention::ShouldHurry(INextBot const*) const
 T non-virtual thunk to SurvivorIntention::~SurvivorIntention()
 T non-virtual thunk to SurvivorLegsApproach::QueryCurrentPath(INextBot const*) const
 T non-virtual thunk to SurvivorLegsApproach::~SurvivorLegsApproach()
 T non-virtual thunk to SurvivorLegsApproachElevator::QueryCurrentPath(INextBot const*) const
 T non-virtual thunk to SurvivorLegsApproachElevator::~SurvivorLegsApproachElevator()
 T non-virtual thunk to SurvivorLegsBattleStations::QueryCurrentPath(INextBot const*) const
 T non-virtual thunk to SurvivorLegsBattleStations::~SurvivorLegsBattleStations()
 T non-virtual thunk to SurvivorLegsCoverFriendInCombat::QueryCurrentPath(INextBot const*) const
 T non-virtual thunk to SurvivorLegsCoverFriendInCombat::~SurvivorLegsCoverFriendInCombat()
 T non-virtual thunk to SurvivorLegsCoverOrphan::QueryCurrentPath(INextBot const*) const
 T non-virtual thunk to SurvivorLegsCoverOrphan::~SurvivorLegsCoverOrphan()
 T non-virtual thunk to SurvivorLegsEnterRescueVehicle::QueryCurrentPath(INextBot const*) const
 T non-virtual thunk to SurvivorLegsEnterRescueVehicle::~SurvivorLegsEnterRescueVehicle()
 T non-virtual thunk to SurvivorLegsMeetRescueVehicleArrival::QueryCurrentPath(INextBot const*) const
 T non-virtual thunk to SurvivorLegsMeetRescueVehicleArrival::~SurvivorLegsMeetRescueVehicleArrival()
 T non-virtual thunk to SurvivorLegsMoveOn::QueryCurrentPath(INextBot const*) const
 T non-virtual thunk to SurvivorLegsMoveOn::~SurvivorLegsMoveOn()
 T non-virtual thunk to SurvivorLegsRegroup::QueryCurrentPath(INextBot const*) const
 T non-virtual thunk to SurvivorLegsRegroup::~SurvivorLegsRegroup()
 T non-virtual thunk to SurvivorLegsRetreat::IsHindrance(INextBot const*, CBaseEntity*) const
 T non-virtual thunk to SurvivorLegsRetreat::QueryCurrentPath(INextBot const*) const
 T non-virtual thunk to SurvivorLegsRetreat::ShouldHurry(INextBot const*) const
 T non-virtual thunk to SurvivorLegsRetreat::~SurvivorLegsRetreat()
 T non-virtual thunk to SurvivorLegsStayClose::~SurvivorLegsStayClose()
 T non-virtual thunk to SurvivorLegsWait::~SurvivorLegsWait()
 T non-virtual thunk to SurvivorLiberateBesiegedFriend::IsHindrance(INextBot const*, CBaseEntity*) const
 T non-virtual thunk to SurvivorLiberateBesiegedFriend::SelectMoreDangerousThreat(INextBot const*, CBaseCombatCharacter const*, CBaseCombatCharacter*, CBaseCombatCharacter*) const
 T non-virtual thunk to SurvivorLiberateBesiegedFriend::ShouldHurry(INextBot const*) const
 T non-virtual thunk to SurvivorLiberateBesiegedFriend::~SurvivorLiberateBesiegedFriend()
 T non-virtual thunk to SurvivorRescueBarricadedFriend::~SurvivorRescueBarricadedFriend()
 T non-virtual thunk to SurvivorReviveFriend::ShouldHurry(INextBot const*) const
 T non-virtual thunk to SurvivorReviveFriend::~SurvivorReviveFriend()
 T non-virtual thunk to SurvivorTakePills::~SurvivorTakePills()
 T non-virtual thunk to SurvivorUseObject::~SurvivorUseObject()
 T non-virtual thunk to Tank::GetBodyInterface() const
 T non-virtual thunk to Tank::GetEntity() const
 T non-virtual thunk to Tank::GetIntentionInterface() const
 T non-virtual thunk to Tank::GetLocomotionInterface() const
 T non-virtual thunk to Tank::GetVisionInterface() const
 T non-virtual thunk to Tank::IsAbleToBreak(CBaseEntity const*) const
 T non-virtual thunk to Tank::~Tank()
 T non-virtual thunk to TankAttack::~TankAttack()
 T non-virtual thunk to TankBehavior::~TankBehavior()
 T non-virtual thunk to TankIdle::~TankIdle()
 T non-virtual thunk to TankIntention::~TankIntention()
 T non-virtual thunk to Witch::GetBodyInterface() const
 T non-virtual thunk to Witch::GetEntity() const
 T non-virtual thunk to Witch::GetIntentionInterface() const
 T non-virtual thunk to Witch::GetLocomotionInterface() const
 T non-virtual thunk to Witch::GetVisionInterface() const
 T non-virtual thunk to Witch::IsAbleToBlockMovementOf(INextBot const*) const
 T non-virtual thunk to Witch::OnModelChanged()
 T non-virtual thunk to Witch::Update()
 T non-virtual thunk to Witch::~Witch()
 T non-virtual thunk to WitchAngry::~WitchAngry()
 T non-virtual thunk to WitchAttack::~WitchAttack()
 T non-virtual thunk to WitchBehavior::~WitchBehavior()
 T non-virtual thunk to WitchBurn::~WitchBurn()
 T non-virtual thunk to WitchDying::~WitchDying()
 T non-virtual thunk to WitchExecAction::~WitchExecAction()
 T non-virtual thunk to WitchIdle::~WitchIdle()
 T non-virtual thunk to WitchIntention::~WitchIntention()
 T non-virtual thunk to WitchKillIncapVictim::~WitchKillIncapVictim()
 T non-virtual thunk to WitchRetreat::~WitchRetreat()
 T physicssound::AddBreakSound(CUtlVector<physicssound::breaksound_t, CUtlMemory<physicssound::breaksound_t, int> >&, Vector const&, unsigned short)
 T physicssound::AddImpactSound(physicssound::soundlist_t&, void*, int, int, IPhysicsObject*, int, int, float, float)
 T physicssound::PlayBreakSounds(CUtlVector<physicssound::breaksound_t, CUtlMemory<physicssound::breaksound_t, int> >&)
 T physicssound::PlayImpactSounds(physicssound::soundlist_t&)
 T pipe_bomb_projectilePrecache::CResourcePrecacher::Cache(bool, ResourceList_t__*, bool)
 T playerPrecache::CResourcePrecacher::Cache(bool, ResourceList_t__*, bool)
 T predicted_viewmodelPrecache::CResourcePrecacher::Cache(bool, ResourceList_t__*, bool)
 T pz_damages_f(CCommand const&)
 T rand
 T response_interval_t<float16_with_assign>::ToInterval(interval_t&) const
 T sky3dparams_t::NetworkStateChanged()
 T sky3dparams_t::NetworkStateChanged(void*)
 T sky3dparams_t::NetworkVar_fog::NetworkStateChanged()
 T sky3dparams_t::NetworkVar_fog::NetworkStateChanged(void*)
 T smokerPrecache::CResourcePrecacher::Cache(bool, ResourceList_t__*, bool)
 T spraycanPrecache::CResourcePrecacher::Cache(bool, ResourceList_t__*, bool)
 T studiohdr_t::GetAnimBlock(int) const
 T studiohdr_t::GetAutoplayList(unsigned short**) const
 T studiohdr_t::GetVirtualModel() const
 T studiohdr_t::SetActivityListVersion(int) const
 T tankPrecache::CResourcePrecacher::Cache(bool, ResourceList_t__*, bool)
 T tank_rockPrecache::CResourcePrecacher::Cache(bool, ResourceList_t__*, bool)
 T testJumpDown(Vector const*, Vector const*)
 T variant_t::Convert(_fieldtypes)
 T variant_t::Set(_fieldtypes, void*)
 T variant_t::SetEntity(CBaseEntity*)
 T variant_t::SetOther(void*)
 T variant_t::ToString() const
 T vehicle_crashsound_t::GetDataDescMap()
 T vehicle_gear_t::GetDataDescMap()
 T vehiclesounds_t::GetDataDescMap()
 T vgui_screenPrecache::CResourcePrecacher::Cache(bool, ResourceList_t__*, bool)
 T virtualgroup_t::GetStudioHdr() const
 T void CNavMesh::StitchAreaIntoMesh<AreaSet>(CNavArea*, NavDirType, AreaSet&)
 T void CNavMesh::StitchAreaIntoMesh<IncrementallyGeneratedAreas>(CNavArea*, NavDirType, IncrementallyGeneratedAreas&)
 T void SearchSurroundingAreas<BoundaryDistanceScan>(CNavArea*, Vector const&, BoundaryDistanceScan&, float, unsigned int, int)
 T void SearchSurroundingAreas<BoundarySpreadScan>(CNavArea*, Vector const&, BoundarySpreadScan&, float, unsigned int, int)
 T void SearchSurroundingAreas<CheckpointCollector>(CNavArea*, Vector const&, CheckpointCollector&, float, unsigned int, int)
 T void SearchSurroundingAreas<CollectActiveAreas>(CNavArea*, Vector const&, CollectActiveAreas&, float, unsigned int, int)
 T void SearchSurroundingAreas<DrawSelectedSet>(CNavArea*, Vector const&, DrawSelectedSet&, float, unsigned int, int)
 T void SearchSurroundingAreas<EscapeFlamesScan>(CNavArea*, Vector const&, EscapeFlamesScan&, float, unsigned int, int)
 T void SearchSurroundingAreas<EscapeScan>(CNavArea*, Vector const&, EscapeScan&, float, unsigned int, int)
 T void SearchSurroundingAreas<FindBattlestationScan>(CNavArea*, Vector const&, FindBattlestationScan&, float, unsigned int, int)
 T void SearchSurroundingAreas<FindRescueVehicleLoadingArea>(CNavArea*, Vector const&, FindRescueVehicleLoadingArea&, float, unsigned int, int)
 T void SearchSurroundingAreas<FloodSelectCollector>(CNavArea*, Vector const&, FloodSelectCollector&, float, unsigned int, int)
 T void SearchSurroundingAreas<MarkAsDamagingScan>(CNavArea*, Vector const&, MarkAsDamagingScan&, float, unsigned int, int)
 T void SearchSurroundingAreas<PlaceFloodFillFunctor>(CNavArea*, Vector const&, PlaceFloodFillFunctor&, float, unsigned int, int)
 T void SearchSurroundingAreas<RemoveWanderersScan>(CNavArea*, Vector const&, RemoveWanderersScan&, float, unsigned int, int)
 T void SearchSurroundingAreas<RescueAreaCollector>(CNavArea*, Vector const&, RescueAreaCollector&, float, unsigned int, int)
 T void SearchSurroundingAreas<RescueVehicleAreaDepth>(CNavArea*, Vector const&, RescueVehicleAreaDepth&, float, unsigned int, int)
 T void SearchSurroundingAreas<SelectCollector>(CNavArea*, Vector const&, SelectCollector&, float, unsigned int, int)
 T void SearchSurroundingAreas<SpawnableCheckpointAreaCollector>(CNavArea*, Vector const&, SpawnableCheckpointAreaCollector&, float, unsigned int, int)
 T void SearchSurroundingAreas<ThreatAreaCollector>(CNavArea*, Vector const&, ThreatAreaCollector&, float, unsigned int, int)
 T void SearchSurroundingAreas<TongueAttackPositionScan>(CNavArea*, Vector const&, TongueAttackPositionScan&, float, unsigned int, int)
 T void SearchSurroundingAreas<WitchSafeScan>(CNavArea*, Vector const&, WitchSafeScan&, float, unsigned int, int)
 T weapon_autoshotgunPrecache::CResourcePrecacher::Cache(bool, ResourceList_t__*, bool)
 T weapon_boomer_clawPrecache::CResourcePrecacher::Cache(bool, ResourceList_t__*, bool)
 T weapon_first_aid_kitPrecache::CResourcePrecacher::Cache(bool, ResourceList_t__*, bool)
 T weapon_gascanPrecache::CResourcePrecacher::Cache(bool, ResourceList_t__*, bool)
 T weapon_hunter_clawPrecache::CResourcePrecacher::Cache(bool, ResourceList_t__*, bool)
 T weapon_hunting_riflePrecache::CResourcePrecacher::Cache(bool, ResourceList_t__*, bool)
 T weapon_molotovPrecache::CResourcePrecacher::Cache(bool, ResourceList_t__*, bool)
 T weapon_oxygentankPrecache::CResourcePrecacher::Cache(bool, ResourceList_t__*, bool)
 T weapon_pain_pillsPrecache::CResourcePrecacher::Cache(bool, ResourceList_t__*, bool)
 T weapon_pipe_bombPrecache::CResourcePrecacher::Cache(bool, ResourceList_t__*, bool)
 T weapon_pistolPrecache::CResourcePrecacher::Cache(bool, ResourceList_t__*, bool)
 T weapon_propanetankPrecache::CResourcePrecacher::Cache(bool, ResourceList_t__*, bool)
 T weapon_pumpshotgunPrecache::CResourcePrecacher::Cache(bool, ResourceList_t__*, bool)
 T weapon_riflePrecache::CResourcePrecacher::Cache(bool, ResourceList_t__*, bool)
 T weapon_smgPrecache::CResourcePrecacher::Cache(bool, ResourceList_t__*, bool)
 T weapon_smoker_clawPrecache::CResourcePrecacher::Cache(bool, ResourceList_t__*, bool)
 T weapon_tank_clawPrecache::CResourcePrecacher::Cache(bool, ResourceList_t__*, bool)
 T witchPrecache::CResourcePrecacher::Cache(bool, ResourceList_t__*, bool)
 ThreadGetCurrentId
 ThreadInterlockedAssignIf64
 ThreadSleep
 Warning
 _AssertValidReadPtr
 _AssertValidWritePtr
 _DefaultRuneLocale
 _ExitOnFatalAssert
 _SpewInfo
 _SpewMessage
 _Unwind_Resume
 __cxa_atexit
 __cxa_begin_catch
 __cxa_guard_abort
 __cxa_guard_acquire
 __cxa_guard_release
 __cxa_pure_virtual
 __dynamic_cast
 __gxx_personality_v0
 __maskrune
 __stack_chk_fail
 __stack_chk_guard
 __tolower
 __toupper
 acos
 acosf
 asctime
 asin
 atan
 atan2
 atan2f
 atof
 atoi
 b (anonymous namespace)::__g_CreateCPlayerInfoManager_V1IPlayerInfoManager_V1_reg
 b (anonymous namespace)::s_infinity
 b AddMultiDamage(CTakeDamageInfo const&, CBaseEntity*)::warningCount
 b Bias(float, float)::lastExponent
 b BlackBox_Record(char const*, char const*, ...)::blackbox
 b BossZombiePlayerBot::GetDebugIdentifier() const::name
 b CBGSDriver
 b CBaseCombatCharacter::FindEntityRelationship(CBaseEntity*)::dummy
 b CBaseCombatWeapon::GetBulletSpread()::cone
 b CBaseEntity::FireBullets(FireBulletsInfo_t const&)::tracerCount
 b CBaseEntity::KeyValue(char const*, char const*)::szBuf
 b CBaseEntity::TakeDamage(CTakeDamageInfo const&)::warningCount
 b CBasePlayer::EyeAngles()::angEyeWorld
 b CBasePlayer::UpdateStepSound(surfacedata_t*, Vector const&, Vector const&)::iSkipStep
 b CBasePlayerAnimState::AnimStateLog(char const*, ...)::hFile
 b CBasePlayerAnimState::CalcSequenceIndex(char const*, ...)::dict
 b CBeam::GetAbsEndPos() const::vecAbsPos
 b CC_CollisionTest(CCommand const&)::first
 b CC_CollisionTest(CCommand const&)::targets
 b CC_KDTreeTest(CCommand const&)::bFirst
 b CC_KDTreeTest(CCommand const&)::vecTargets
 b CC_Player_SetModel(CCommand const&)::szName
 b CChangeDifficultyIssue::ExecuteCommand()::ZombieDifficulty
 b CChangeDifficultyIssue::ExecuteCommand()::ZombieDifficultyLocked
 b CChoreoEvent::GetDescription()::description
 b CCollisionProperty::CollisionToWorldTransform() const::s_matTemp
 b CCollisionProperty::CollisionToWorldTransform() const::s_nIndex
 b CCurveData::GetBoundedSample(ICurveDataAccessor*, int, bool&)::nullend
 b CCurveData::GetBoundedSample(ICurveDataAccessor*, int, bool&)::nullstart
 b CDataManagerBase::GetForFreeByIndex(unsigned short)::__executeCount
 b CEventLog::FormatPlayer(CBaseEntity*) const::s_buffer
 b CEventLog::FormatPlayer(CBaseEntity*) const::s_index
 b CFlexAnimationTrack::GetBoundedSample(int, bool&, int)::nullend
 b CFlexAnimationTrack::GetBoundedSample(int, bool&, int)::nullstart
 b CFuncFireExtinguisher::ExtinguishThink()::infernoString
 b CGameMovement::GetPlayerViewOffset(bool) const::crouchedView
 b CGameMovement::GetPlayerViewOffset(bool) const::standingView
 b CGameMovement::ProcessMovement(CBasePlayer*, CMoveData*)::_counter
 b CInfectedZooMaker::Spawn()::refDirectorNoCull
 b CInfectedZooMaker::Spawn()::refDirectorNoSB
 b CInfectedZooMaker::Spawn()::refDirectorNoSZ
 b CNavArea::Draw() const::blink
 b CNavArea::Draw() const::blinkOn
 b CNavArea::GetCorner(NavCornerType) const::pos
 b CNavMesh::DrawEditMode()::host_thread_mode
 b CNavMesh::DrawEditMode()::sb_perf_collect
 b CNavMesh::GetFilename() const::filename
 b CNavMesh::GetNearestNavArea(Vector const&, bool, float, bool, bool) const::searchMarker
 b CNavMesh::UpdateGeneration(float)::host_thread_mode
 b CNavMesh::UpdateGeneration(float)::s_playerSettleTimer
 b CNavMesh::UpdateGeneration(float)::s_unlitAreas
 b CNavMesh::UpdateGeneration(float)::s_unlitSeedAreas
 b CParticleSystemDefinition_UnpackInit::s_pUnpack
 b CResponseSystem::ParseRule()::instancedCriteria
 b CResponseSystem::ResponseWarning(char const*, ...)::string
 b CServerGameClients::ClientSettingsChanged(edict_t*)::pMax
 b CServerGameClients::ClientSettingsChanged(edict_t*)::pMaxUpdateRate
 b CServerGameClients::ClientSettingsChanged(edict_t*)::pMin
 b CServerGameClients::ClientSettingsChanged(edict_t*)::pMinUpdateRate
 b CServerGameDLL::GetMatchmakingGameData(char*, unsigned long)::sv_gametypes
 b CStudioHdr::CActivityToSequenceMapping::SelectWeightedSequence(CStudioHdr*, int, int)::__executeCount
 b CStudioHdr::GroupStudioHdr(int)::__executeCount
 b CTerrorGameMovement::GetPlayerViewOffset(bool) const::vecView
 b CTerrorGameRules::AllowSurvivorRescue()::rescue_vs_ref
 b CTerrorGameRules::Think()::sv_cheats
 b CTerrorPlayer::AddUpgrade(SurvivorUpgradeType)::msg
 b CTerrorPlayer::AvoidPlayers(CUserCmd*)::vecUp
 b CTerrorPlayer::CheckEnemySightings()::iRecentFrame
 b CTerrorPlayer::ClientCommand(CCommand const&)::sv_cheats
 b CTerrorPlayer::GetFootstepSound(char const*, bool, float, bool) const::s_footstepSound
 b CTerrorPlayer::SetClass(ZombieClassType)::s_zombieID
 b CTerrorPlayer::ShouldPostThink()::iFrameLastScheduledPostThink
 b CTestTraceline::Spin()::traceline_spin
 b CTextStat::GetTextStatsList()::theList
 b CTongue::OnUpdateExtendingState()::doorStr
 b CUtlSymbol::Initialize()::symbolsInitialized
 b CWeaponCSBase::GetBulletSpread()::cone
 b CalcLeanViewOffset(Vector const&, QAngle const&, float, bool)::WALL_MAX
 b CalcLeanViewOffset(Vector const&, QAngle const&, float, bool)::WALL_MIN
 b CalcLocalHierarchyAnimation(CStudioHdr const*, matrix3x4_t*, CBoneBitList&, Vector*, Quaternion*, mstudiobone_t const*, mstudiolocalhierarchy_t*, int, int, float, int, float, int)::rootXform
 b ChasePath::PredictSubjectPosition(INextBot*, CBaseEntity*) const::cache
 b ChasePath::PredictSubjectPosition(INextBot*, CBaseEntity*) const::iNext
 b ChasePath::PredictSubjectPosition(INextBot*, CBaseEntity*) const::iServer
 b ClearAllAttributes
 b ClearAllNavAttributes
 b ClearAttribute
 b ClearSpecTargetCommand
 b CmdWarpToBattlefield
 b CmdWarpToCheckpoint
 b CmdWarpToFinale
 b CommonInfectedModels
 b ConVarRef::Init(char const*, bool)::bFirst
 b CreateExplosion(CTakeDamageInfo const&, float, float, ExplosionFxType)::doorStr
 b DescribeAxis(int)::sz
 b Director::UpdateTestLoop()::bInLoop
 b Director::UpdateTestLoop()::iNumRestarts
 b Director::UpdateTestLoop()::szLastMap
 b Director::UpdateTestLoop()::timeLastForcedSpectator
 b EntityFactoryDictionary()::s_EntityFactory
 b FinishClientPutInServer(CTerrorPlayer*)::pointViewcontrolStr
 b ForceLookAt
 b GetBspFilename(char const*)::bspFilename
 b GetGameDescription()::szDescription
 b GetPhysObjSaveRestoreOps(PhysInterfaceId_t)::inited
 b GetPlayerSpawnPosition(SurvivorCharacterType, Vector*, QAngle*, TerrorNavArea**)::survivorPositionStr
 b GetPlayerViewOffset(CTerrorPlayer*, bool)::crouchedView
 b GetPlayerViewOffset(CTerrorPlayer*, bool)::standingView
 b GetSceneManager()::s_SceneManager
 b GetSequenceLinearMotion(CStudioHdr*, int, float const*, Vector*)::msgCount
 b INextBot::GetDebugIdentifier() const::name
 b IVision::IsLineOfSightClear(Vector const&) const::_counter
 b IVision::IsLineOfSightClearToEntity(CBaseEntity*, Vector*) const::_counter
 b Infected::GetFootstepSound(char const*, bool, float, bool) const::s_footstepSound
 b KeyValues::RecursiveSaveToFile(IBaseFileSystem*, void*, CUtlBuffer*, int)::buf
 b ListRecentNPCSpeechCmd
 b LowViolenceInfectedModels
 b MarkAttribute
 b MeasureTravelDistance
 b MissingSceneWarning(char const*)::missing
 b MoveHelperServer()::s_MoveHelperServer
 b MusicMsg(char*, ...)::string
 b NavClearAttribute
 b NavMarkAttribute
 b Old_EvaluateLanguageConditional(char const*)::cl_language
 b ParticleChildrenInfo_t_UnpackInit::s_pUnpack
 b PhysFrame(float)::lastObjectCount
 b PlayerReport::PrintCheckpoint(char const*) const::buffer
 b PlayerReport::PrintClear(char const*) const::buffer
 b PlayerReport::PrintDeath(char const*) const::buffer
 b PlayerReport::PrintFriendlyFire(char const*) const::buffer
 b PlayerReport::PrintInjuries(char const*) const::buffer
 b PlayerReport::PrintKillers(char const*) const::buffer
 b PlayerReport::PrintMedic(char const*) const::buffer
 b PlayerReport::PrintSkill(char const*) const::buffer
 b PlayerReport::PrintVictims(char const*) const::buffer
 b PlayerReport::PrintWins(char const*) const::buffer
 b SelectBot
 b SelectCliff
 b SelectInvalidFinaleNoSpawn
 b SelectWeightedSequence(CStudioHdr*, int, int)::_counter
 b SelectWithAttribute
 b SetActivityForSequence(CStudioHdr*, int)::__executeCount
 b SetDebug
 b SetDebugFilter
 b SetSpecTargetCommand
 b SurvivorBot::InteractWithUsables(Action<SurvivorBot>*)::buttonStr
 b SurvivorBot::RescueImmobilizedFriends(Action<SurvivorBot>*)::infoSurvivorRescueStr
 b SurvivorBotAdd
 b SurvivorBotForceMaxIntensity
 b SurvivorBotMoveToCursor
 b SurvivorElevatorEnter::Update(SurvivorBot*, float)::buttonStr
 b SurvivorUseObject::GetUsePoint(SurvivorBot*, CBaseEntity*) const::usePos
 b TerrorMeasureTravelDistance()::str
 b TerrorNavArea::ComputeVisibilityDelta(TerrorNavArea const*) const::delta
 b TerrorNavArea::OnEnter(CBaseCombatCharacter*, CNavArea*)::doorStr
 b TheNextBots()::manager
 b TheTutor()::tutor
 b UTIL_EntitiesInPVS(CBaseEntity*, CBaseEntity*)::lastOrg
 b UTIL_EntitiesInPVS(CBaseEntity*, CBaseEntity*)::pvs
 b UTIL_VarArgs(char*, ...)::string
 b ValidateMpGameMode(IConVar*, char const*, float)::bSelfChanging
 b WarpFarSurvivorHere
 b WarpSelectedHere
 b WaveTrace(char const*, char const*)::s_WaveTrace
 b Witch::GetFootstepSound(char const*, bool, float, bool) const::s_footstepSound
 b ZombieManager::BuildEscapeRoute(TerrorNavArea*) const::escapeRouteStr
 b ZombieManager::StartFrame()::host_thread_mode
 b _ZL8ice_sbox.0
 b _ZL8ice_sbox.1
 b _ZL8ice_sbox.2
 b _ZL8ice_sbox.3
 b __g_CServerDLLSharedAppSystems_singleton
 b __g_CServerGameEnts_singleton
 b __g_CreateCEffectsServerIEffects_reg
 b __g_CreateCGameMovementIGameMovement_reg
 b __g_CreateCHLTVDirectorIHLTVDirector_reg
 b __g_CreateCPlayerInfoManagerIPlayerInfoManager_reg
 b __g_CreateCPluginBotManagerIBotManager_reg
 b __g_CreateCPluginHelpersCheckIPluginHelpersCheck_reg
 b __g_CreateCServerDLLSharedAppSystemsIServerDLLSharedAppSystems_reg
 b __g_CreateCServerGameClientsIServerGameClients_reg
 b __g_CreateCServerGameDLLIServerGameDLL_reg
 b __g_CreateCServerGameEntsIServerGameEnts_reg
 b __g_CreateCServerGameTagsIServerGameTags_reg
 b __g_CreateCServerToolsIServerTools_reg
 b __g_GameRulesRegister_CCSGameRules
 b __g_GameRulesRegister_CMultiplayRules
 b __g_GameRulesRegister_CTeamplayRules
 b __g_GameRulesRegister_CTerrorGameRules
 b __proxy_SendProxy_ClientSideAnimation
 b __proxy_SendProxy_FlexWeights
 b __proxy_SendProxy_OnlyToTeam
 b __proxy_SendProxy_SendActiveLocalWeaponDataTable
 b __proxy_SendProxy_SendBaseCombatCharacterLocalDataTable
 b __proxy_SendProxy_SendLocalDataTable
 b __proxy_SendProxy_SendLocalWeaponDataTable
 b __proxy_SendProxy_SendNonLocalDataTable
 b __proxy_SendProxy_TestProxyToggle
 b _firesmoke
 b _plasma
 b ability_lunge
 b ability_throw
 b ability_tongue
 b ability_vomit
 b ai_changehintgroup
 b ai_changetarget
 b ai_sound
 b air_density
 b ambient_generic
 b ammoDef
 b anim_3wayblend
 b beam
 b beam_spotlight
 b boomer
 b bugswap
 b callvote_command
 b cameraFinaleLossStr
 b cameraFinaleStr
 b cameraFinaleWinStr
 b cast_hull_command
 b cast_ray_command
 b cc_norepeat
 b ch_createairboat
 b ch_createjeep
 b cl_simdbones
 b clear_debug_overlays_command
 b client_path
 b collision_test
 b color_correction
 b color_correction_volume
 b commentary_auto
 b commentary_cvarsnotchanging
 b commentary_dummy
 b commentary_finishnode
 b commentary_zombie_spawner
 b create_flashlight
 b cs_gamerules
 b cs_make_vip_command
 b cs_ragdoll
 b cs_team_manager
 b current_flow_distance
 b cycler_flex
 b dbghist_addline
 b dbghist_dump
 b debug_overlay_fullposition
 b defaultresponsesytem
 b director_log_boss_threats_command
 b director_log_scavenge_items_command
 b director_print_player_counts_command
 b director_report_command
 b director_start_command
 b director_stop_command
 b dispcoll_drawplane
 b drawcross
 b drawline
 b dump_avatar_info_command
 b dump_entity_sizes_command
 b dump_globals_command
 b dump_player_reports_command
 b dump_pz_data_command
 b dumpentityfactories
 b dumpeventqueue
 b dumpgamestringtable
 b dynamic_prop
 b emptyMapping
 b ent_absbox
 b ent_attachments
 b ent_autoaim
 b ent_bbox
 b ent_cancelpendingentfires
 b ent_create
 b ent_dump
 b ent_fire
 b ent_info
 b ent_keyvalue
 b ent_messages
 b ent_name
 b ent_orient
 b ent_pause
 b ent_pivot
 b ent_rbox
 b ent_remove
 b ent_remove_all
 b ent_rotate
 b ent_setang_command
 b ent_setname
 b ent_setpos_command
 b ent_show_response_criteria
 b ent_step
 b ent_teleport
 b ent_text
 b ent_viewoffset
 b entity_blocker
 b entityflame
 b env_beam
 b env_beverage
 b env_blood
 b env_bubbles
 b env_credits
 b env_debughistory
 b env_detail_controller
 b env_dof_controller
 b env_dustpuff
 b env_dusttrail
 b env_effectscript
 b env_embers
 b env_entity_dissolver
 b env_entity_igniter
 b env_entity_maker
 b env_explosion
 b env_fade
 b env_fire
 b env_fire_trail
 b env_firesensor
 b env_firesource
 b env_fog_controller
 b env_funnel
 b env_global
 b env_glow
 b env_gunfire
 b env_hudhint
 b env_laser
 b env_lightglow
 b env_message
 b env_microphone
 b env_movieexplosion
 b env_muzzleflash
 b env_outtro_stats
 b env_particle_performance_monitor
 b env_particle_trail
 b env_particlefire
 b env_particlelight
 b env_particlescript
 b env_particlesmokegrenade
 b env_physexplosion
 b env_physimpact
 b env_physwire
 b env_player_blocker
 b env_player_surface_trigger
 b env_projectedtexture
 b env_quadraticbeam
 b env_ragdoll_boogie
 b env_rock_launcher
 b env_rockettrail
 b env_rotorshooter
 b env_screeneffect
 b env_screenoverlay
 b env_shake
 b env_shooter
 b env_smokestack
 b env_smoketrail
 b env_soundscape
 b env_soundscape_proxy
 b env_soundscape_triggerable
 b env_spark
 b env_splash
 b env_sporeexplosion
 b env_sporetrail
 b env_sprite
 b env_sprite_oriented
 b env_spritetrail
 b env_steam
 b env_steamjet
 b env_sun
 b env_texturetoggle
 b env_tonemap_controller
 b env_tonemap_controller_ghost
 b env_tonemap_controller_infected
 b env_tracer
 b env_viewpunch
 b env_weaponfire
 b env_wind
 b env_zoom
 b escape_route
 b event_queue_saveload_proxy
 b explode_command
 b explodevector_command
 b fade_crosshair
 b fade_immediately
 b fadein
 b fadeout
 b fidget_max_interval
 b fidget_min_interval
 b filter_activator_class
 b filter_activator_context
 b filter_activator_infected_class
 b filter_activator_mass_greater
 b filter_activator_model
 b filter_activator_name
 b filter_activator_team
 b filter_base
 b filter_damage_type
 b filter_enemy
 b filter_multi
 b finale_trigger
 b find_ent
 b find_ent_index
 b firetarget
 b fish
 b fogPlaceDirectory
 b fog_volume
 b foundry_engine_get_mouse_control_command
 b foundry_engine_release_mouse_control_command
 b foundry_select_entity_command
 b foundry_sync_hammer_view_command
 b foundry_update_entity_command
 b funCBaseFlex
 b func_areaportal
 b func_areaportalwindow
 b func_breakable
 b func_breakable_surf
 b func_brush
 b func_button
 b func_button_timed
 b func_clip_vphysics
 b func_conveyor
 b func_detail_blocker
 b func_door
 b func_door_rotating
 b func_dustcloud
 b func_dustmotes
 b func_elevator
 b func_fire_extinguisher
 b func_fish_pool
 b func_guntarget
 b func_illusionary
 b func_ladderendpoint
 b func_lod
 b func_movelinear
 b func_nav_attribute_region
 b func_nav_avoidance_obstacle
 b func_nav_blocker
 b func_nav_stairs_toggle
 b func_occluder
 b func_orator
 b func_physbox
 b func_physbox_multiplayer
 b func_plat
 b func_platrot
 b func_playerinfected_clip
 b func_precipitation
 b func_precipitation_blocker
 b func_proprrespawnzone
 b func_pushable
 b func_ragdoll_fader
 b func_reflective_glass
 b func_rot_button
 b func_rotating
 b func_simpleladder
 b func_smokevolume
 b func_spawn_volume
 b func_tanktrain
 b func_trackautochange
 b func_trackchange
 b func_tracktrain
 b func_train
 b func_traincontrols
 b func_useableladder
 b func_vehicleclip
 b func_wall
 b func_wall_toggle
 b func_water
 b func_water_analog
 b func_weight_button
 b gGlobalState
 b gNullWeaponInfo
 b g_AimManager
 b g_AnchorList
 b g_Boomer_ClassReg
 b g_BreakModelsPrecached
 b g_BreakPropEvent
 b g_BurningFleshString
 b g_BurningObjectString
 b g_CAssaultRifle_ClassReg
 b g_CAutoShotgun_ClassReg
 b g_CBaseAbility_ClassReg
 b g_CBaseAnimatingOverlay_ClassReg
 b g_CBaseAnimating_ClassReg
 b g_CBaseButton_ClassReg
 b g_CBaseCSGrenadeProjectile_ClassReg
 b g_CBaseCSGrenade_ClassReg
 b g_CBaseCombatCharacter_ClassReg
 b g_CBaseCombatWeapon_ClassReg
 b g_CBaseDoor_ClassReg
 b g_CBaseEntity_ClassReg
 b g_CBaseFlex_ClassReg
 b g_CBaseGrenade_ClassReg
 b g_CBaseParticleEntity_ClassReg
 b g_CBasePlayer_ClassReg
 b g_CBasePropDoor_ClassReg
 b g_CBaseShotgun_ClassReg
 b g_CBaseTeamObjectiveResource_ClassReg
 b g_CBaseTempEntity_ClassReg
 b g_CBaseToggle_ClassReg
 b g_CBaseTrigger_ClassReg
 b g_CBaseViewModel_ClassReg
 b g_CBeamSpotlight_ClassReg
 b g_CBeam_ClassReg
 b g_CBoneFollower_ClassReg
 b g_CBoomerClaw_ClassReg
 b g_CBreakableProp_ClassReg
 b g_CBreakableSurface_ClassReg
 b g_CBreakable_ClassReg
 b g_CCSGameRulesProxy_ClassReg
 b g_CCSPlayer_ClassReg
 b g_CCSRagdoll_ClassReg
 b g_CCSTeam_ClassReg
 b g_CClaw_ClassReg
 b g_CClientPath_ClassReg
 b g_CColorCorrectionVolume_ClassReg
 b g_CColorCorrection_ClassReg
 b g_CDynamicLight_ClassReg
 b g_CDynamicProp_ClassReg
 b g_CEmbers_ClassReg
 b g_CEntityDissolve_ClassReg
 b g_CEntityFlame_ClassReg
 b g_CEntityParticleTrail_ClassReg
 b g_CEnvDOFController_ClassReg
 b g_CEnvDetailController_ClassReg
 b g_CEnvParticleScript_ClassReg
 b g_CEnvProjectedTexture_ClassReg
 b g_CEnvQuadraticBeam_ClassReg
 b g_CEnvScreenEffect_ClassReg
 b g_CEnvScreenOverlay_ClassReg
 b g_CEnvTonemapController_ClassReg
 b g_CEnvWeaponfire_ClassReg
 b g_CEnvWind_ClassReg
 b g_CFinaleTrigger_ClassReg
 b g_CFireSmoke_ClassReg
 b g_CFireTrail_ClassReg
 b g_CFirstAidKit_ClassReg
 b g_CFish_ClassReg
 b g_CFogController_ClassReg
 b g_CFuncAreaPortalWindow_ClassReg
 b g_CFuncBrush_ClassReg
 b g_CFuncConveyor_ClassReg
 b g_CFuncElevator_ClassReg
 b g_CFuncLadder_ClassReg
 b g_CFuncMoveLinear_ClassReg
 b g_CFuncOccluder_ClassReg
 b g_CFuncPlayerInfectedClip_ClassReg
 b g_CFuncRagdollFader_ClassReg
 b g_CFuncReflectiveGlass_ClassReg
 b g_CFuncRotating_ClassReg
 b g_CFuncSimpleLadder_ClassReg
 b g_CFuncSmokeVolume_ClassReg
 b g_CFuncTrackTrain_ClassReg
 b g_CFunc_Dust_ClassReg
 b g_CFunc_LOD_ClassReg
 b g_CGameRulesProxy_ClassReg
 b g_CGasCan_ClassReg
 b g_CHandleTest_ClassReg
 b g_CHunterClaw_ClassReg
 b g_CInferno_ClassReg
 b g_CInfoLadderDismount_ClassReg
 b g_CInfoOverlayAccessor_ClassReg
 b g_CLightGlow_ClassReg
 b g_CLunge_ClassReg
 b g_CMaterialModifyControl_ClassReg
 b g_CMolotovProjectile_ClassReg
 b g_CMolotov_ClassReg
 b g_COxygenTank_ClassReg
 b g_CPainPills_ClassReg
 b g_CParticleFire_ClassReg
 b g_CParticlePerformanceMonitor_ClassReg
 b g_CParticleSystem_ClassReg
 b g_CPhysBoxMultiplayer_ClassReg
 b g_CPhysBox_ClassReg
 b g_CPhysMagnet_ClassReg
 b g_CPhysicsProp_ClassReg
 b g_CPipeBombProjectile_ClassReg
 b g_CPipeBomb_ClassReg
 b g_CPistol_ClassReg
 b g_CPlasma_ClassReg
 b g_CPlayerResource_ClassReg
 b g_CPointCommentaryNode_ClassReg
 b g_CPoseController_ClassReg
 b g_CPostProcessController_ClassReg
 b g_CPrecipitationBlocker_ClassReg
 b g_CPrecipitation_ClassReg
 b g_CPredictedViewModel_ClassReg
 b g_CPropDoorRotatingCheckpoint_ClassReg
 b g_CPropGlowingObject_ClassReg
 b g_CPropHealthCabinet_ClassReg
 b g_CPropMinigun_ClassReg
 b g_CPropMountedGun_ClassReg
 b g_CPropVehicleDriveable_ClassReg
 b g_CPropaneTank_ClassReg
 b g_CPumpShotgun_ClassReg
 b g_CRagdollManager_ClassReg
 b g_CRagdollPropAttached_ClassReg
 b g_CRagdollProp_ClassReg
 b g_CRopeKeyframe_ClassReg
 b g_CSViewVectors
 b g_CSceneEntity_ClassReg
 b g_CShadowControl_ClassReg
 b g_CSlideshowDisplay_ClassReg
 b g_CSmokeStack_ClassReg
 b g_CSmokerClaw_ClassReg
 b g_CSniperRifle_ClassReg
 b g_CSpotlightEnd_ClassReg
 b g_CSpriteOriented_ClassReg
 b g_CSpriteTrail_ClassReg
 b g_CSprite_ClassReg
 b g_CSteamJet_ClassReg
 b g_CSubMachinegun_ClassReg
 b g_CSun_ClassReg
 b g_CSurvivorPosition_ClassReg
 b g_CSurvivorRescue_ClassReg
 b g_CTEArmorRicochet_ClassReg
 b g_CTEBSPDecal_ClassReg
 b g_CTEBaseBeam_ClassReg
 b g_CTEBeamEntPoint_ClassReg
 b g_CTEBeamEnts_ClassReg
 b g_CTEBeamFollow_ClassReg
 b g_CTEBeamLaser_ClassReg
 b g_CTEBeamPoints_ClassReg
 b g_CTEBeamRingPoint_ClassReg
 b g_CTEBeamRing_ClassReg
 b g_CTEBeamSpline_ClassReg
 b g_CTEBloodSprite_ClassReg
 b g_CTEBloodStream_ClassReg
 b g_CTEBreakModel_ClassReg
 b g_CTEBubbleTrail_ClassReg
 b g_CTEBubbles_ClassReg
 b g_CTEBullets_ClassReg
 b g_CTEClientProjectile_ClassReg
 b g_CTEDecal_ClassReg
 b g_CTEDust_ClassReg
 b g_CTEDynamicLight_ClassReg
 b g_CTEEffectDispatch_ClassReg
 b g_CTEEnergySplash_ClassReg
 b g_CTEExplosion_ClassReg
 b g_CTEFizz_ClassReg
 b g_CTEFootprintDecal_ClassReg
 b g_CTEFoundryHelpers_ClassReg
 b g_CTEGaussExplosion_ClassReg
 b g_CTEGlowSprite_ClassReg
 b g_CTEImpact_ClassReg
 b g_CTEKillPlayerAttachments_ClassReg
 b g_CTELargeFunnel_ClassReg
 b g_CTEMetalSparks_ClassReg
 b g_CTEMuzzleFlash_ClassReg
 b g_CTEParticleSystem_ClassReg
 b g_CTEPhysicsProp_ClassReg
 b g_CTEPlayerAnimEvent_ClassReg
 b g_CTEPlayerDecal_ClassReg
 b g_CTEProjectedDecal_ClassReg
 b g_CTEShatterSurface_ClassReg
 b g_CTEShowLine_ClassReg
 b g_CTESmoke_ClassReg
 b g_CTESparks_ClassReg
 b g_CTESpriteSpray_ClassReg
 b g_CTESprite_ClassReg
 b g_CTEWorldDecal_ClassReg
 b g_CTankClaw_ClassReg
 b g_CTeam_ClassReg
 b g_CTeamplayRoundBasedRulesProxy_ClassReg
 b g_CTerrorGameRulesProxy_ClassReg
 b g_CTerrorGun_ClassReg
 b g_CTerrorPlayerResource_ClassReg
 b g_CTerrorPlayer_ClassReg
 b g_CTerrorViewModel_ClassReg
 b g_CTerrorWeapon_ClassReg
 b g_CTestTraceline_ClassReg
 b g_CTest_ProxyToggle_Networkable_ClassReg
 b g_CThrow_ClassReg
 b g_CTongue_ClassReg
 b g_CTransitioningPlayer_ClassReg
 b g_CTriggerPlayerMovement_ClassReg
 b g_CTutorLesson_ClassReg
 b g_CVGuiScreen_ClassReg
 b g_CVomit_ClassReg
 b g_CVoteController_ClassReg
 b g_CWaterBullet_ClassReg
 b g_CWaterLODControl_ClassReg
 b g_CWeaponAmmoSpawn_ClassReg
 b g_CWeaponCSBaseGun_ClassReg
 b g_CWeaponCSBase_ClassReg
 b g_CWeaponSpawn_ClassReg
 b g_CWorld_ClassReg
 b g_CaptionRepeats
 b g_CleanupDefaultRelationships
 b g_CleanupSymbolTable
 b g_Controller
 b g_DataObjectAccessSystem
 b g_DeathNoticeEvent
 b g_DecalSystem
 b g_DefaultViewVectors
 b g_DeleteList
 b g_DustTrail_ClassReg
 b g_EdictTouchLinks
 b g_EntityGroundLinks
 b g_EntityListSystem
 b g_FoundryEntitySpawnRecords
 b g_GameMovement
 b g_GameStringPool
 b g_GlobalSymbolDataOps
 b g_HighestActivity
 b g_HighestEvent
 b g_Hunter_ClassReg
 b g_InRestore
 b g_InfectedHurtEvent
 b g_Infected_ClassReg
 b g_KVMutex
 b g_KeyValues2ErrorStack
 b g_LagCompensationManager
 b g_LogFileHandle
 b g_Managers
 b g_Mathlib_GammaToLinear
 b g_Mathlib_LinearToGamma
 b g_MessageEntities
 b g_ModelSoundsCache
 b g_ModelSoundsCacheSaver
 b g_ModelSoundsSymbolHelper
 b g_MoveData
 b g_MovieExplosion_ClassReg
 b g_NavBlockedEvent
 b g_NextBotCombatCharacter_ClassReg
 b g_NotifyList
 b g_OneWayTransition
 b g_ParticleSmokeGrenade_ClassReg
 b g_PhysAverageSimTime
 b g_PlayerHurtEvent
 b g_PlayerMove
 b g_PostClientManager
 b g_RS
 b g_RecipientFilterPredictionSystem
 b g_RestoredEntities
 b g_RocketTrail_ClassReg
 b g_SavedLevelRestartSurvivorBots
 b g_SavedPlayers
 b g_SavedSurvivorBots
 b g_SavedWeaponSpawns
 b g_SavedWeapons
 b g_ServerTools
 b g_SmokeTrail_ClassReg
 b g_Smoker_ClassReg
 b g_SoundEmitterSystem
 b g_SporeExplosion_ClassReg
 b g_SporeTrail_ClassReg
 b g_StudioBoneCache
 b g_SurvivorBot_ClassReg
 b g_TEArmorRicochet
 b g_TEBSPDecal
 b g_TEBeamEntPoint
 b g_TEBeamEnts
 b g_TEBeamFollow
 b g_TEBeamLaser
 b g_TEBeamPoints
 b g_TEBeamRing
 b g_TEBeamRingPoint
 b g_TEBeamSpline
 b g_TEBloodSprite
 b g_TEBloodStream
 b g_TEBreakModel
 b g_TEBubbleTrail
 b g_TEBubbles
 b g_TEBullets
 b g_TEClientProjectile
 b g_TEDecal
 b g_TEDust
 b g_TEDynamicLight
 b g_TEEffectDispatch
 b g_TEEnergySplash
 b g_TEExplosion
 b g_TEFizz
 b g_TEFootprintDecal
 b g_TEFoundryHelpers
 b g_TEGaussExplosion
 b g_TEGlowSprite
 b g_TEImpact
 b g_TEKillPlayerAttachments
 b g_TELargeFunnel
 b g_TEMetalSparks
 b g_TEMuzzleFlash
 b g_TEPlayerAnimEvent
 b g_TEPlayerDecal
 b g_TEProjectedDecal
 b g_TEShatterSurface
 b g_TEShowLine
 b g_TESmoke
 b g_TESparks
 b g_TESprite
 b g_TESpriteSpray
 b g_TESystem
 b g_TETutorLesson
 b g_TEWorldDecal
 b g_Tank_ClassReg
 b g_TeleportStack
 b g_Templates
 b g_TerrorAmmoDefSystem
 b g_TerrorViewVectors
 b g_ThinkChecker
 b g_ThrottleMgr
 b g_ToolFrameworkServer
 b g_TouchManager
 b g_TouchTrace
 b g_UserMessages
 b g_VisibilityCache
 b g_WatcherList
 b g_WeaponHandles
 b g_Witch_ClassReg
 b g_WorldEntity
 b g_bPermitDirectSoundPrecache
 b g_bTracingVsCommentaryNodes
 b g_iDebuggingTransition
 b g_nBlockedSlides
 b g_nCommandClientIndex
 b g_nRun
 b g_nSlid
 b g_pClassnameSpawnPriority
 b g_pClientPutInServerOverride
 b g_pClosecaption
 b g_pMsgBuffer
 b g_pNextLink
 b g_pSoundEnt
 b g_pTestObj
 b g_pcv_ThreadMode
 b g_pcv_commentary
 b game_end
 b game_gib_manager
 b game_player_equip
 b game_player_team
 b game_ragdoll_manager
 b game_score
 b game_text
 b game_ui
 b game_weapon_manager
 b game_zone_player
 b gib
 b gibshooter
 b give
 b giveItem
 b givecurrentammo
 b global_set
 b go_away_from_keyboard_command
 b grenade
 b groundlist
 b guard variable for BlackBox_Record(char const*, char const*, ...)::blackbox
 b guard variable for CBaseCombatCharacter::FindEntityRelationship(CBaseEntity*)::dummy
 b guard variable for CBaseCombatWeapon::GetBulletSpread()::cone
 b guard variable for CBasePlayer::EyeAngles()::angEyeWorld
 b guard variable for CBasePlayerAnimState::AnimStateLog(char const*, ...)::hFile
 b guard variable for CBasePlayerAnimState::CalcSequenceIndex(char const*, ...)::dict
 b guard variable for CBeam::GetAbsEndPos() const::vecAbsPos
 b guard variable for CChangeDifficultyIssue::ExecuteCommand()::ZombieDifficulty
 b guard variable for CChangeDifficultyIssue::ExecuteCommand()::ZombieDifficultyLocked
 b guard variable for CCollisionProperty::CollisionToWorldTransform() const::s_matTemp
 b guard variable for CCurveData::GetBoundedSample(ICurveDataAccessor*, int, bool&)::nullend
 b guard variable for CCurveData::GetBoundedSample(ICurveDataAccessor*, int, bool&)::nullstart
 b guard variable for CFlexAnimationTrack::GetBoundedSample(int, bool&, int)::nullend
 b guard variable for CFlexAnimationTrack::GetBoundedSample(int, bool&, int)::nullstart
 b guard variable for CFuncFireExtinguisher::ExtinguishThink()::infernoString
 b guard variable for CGameMovement::GetPlayerViewOffset(bool) const::crouchedView
 b guard variable for CGameMovement::GetPlayerViewOffset(bool) const::standingView
 b guard variable for CGameMovement::ProcessMovement(CBasePlayer*, CMoveData*)::_counter
 b guard variable for CInfectedZooMaker::Spawn()::refDirectorNoCull
 b guard variable for CInfectedZooMaker::Spawn()::refDirectorNoSB
 b guard variable for CInfectedZooMaker::Spawn()::refDirectorNoSZ
 b guard variable for CNavArea::Draw() const::blink
 b guard variable for CNavArea::GetCorner(NavCornerType) const::pos
 b guard variable for CNavMesh::DrawEditMode()::host_thread_mode
 b guard variable for CNavMesh::DrawEditMode()::sb_perf_collect
 b guard variable for CNavMesh::UpdateGeneration(float)::host_thread_mode
 b guard variable for CNavMesh::UpdateGeneration(float)::s_playerSettleTimer
 b guard variable for CNavMesh::UpdateGeneration(float)::s_unlitAreas
 b guard variable for CNavMesh::UpdateGeneration(float)::s_unlitSeedAreas
 b guard variable for CServerGameClients::ClientSettingsChanged(edict_t*)::pMax
 b guard variable for CServerGameClients::ClientSettingsChanged(edict_t*)::pMaxUpdateRate
 b guard variable for CServerGameClients::ClientSettingsChanged(edict_t*)::pMin
 b guard variable for CServerGameClients::ClientSettingsChanged(edict_t*)::pMinUpdateRate
 b guard variable for CServerGameDLL::GetMatchmakingGameData(char*, unsigned long)::sv_gametypes
 b guard variable for CTerrorGameMovement::GetPlayerViewOffset(bool) const::vecView
 b guard variable for CTerrorGameRules::AllowSurvivorRescue()::rescue_vs_ref
 b guard variable for CTerrorGameRules::Think()::sv_cheats
 b guard variable for CTerrorPlayer::AvoidPlayers(CUserCmd*)::vecUp
 b guard variable for CTerrorPlayer::ClientCommand(CCommand const&)::sv_cheats
 b guard variable for CTestTraceline::Spin()::traceline_spin
 b guard variable for CTextStat::GetTextStatsList()::theList
 b guard variable for CTongue::OnUpdateExtendingState()::doorStr
 b guard variable for CWeaponCSBase::GetBulletSpread()::cone
 b guard variable for CalcLeanViewOffset(Vector const&, QAngle const&, float, bool)::WALL_MAX
 b guard variable for CalcLeanViewOffset(Vector const&, QAngle const&, float, bool)::WALL_MIN
 b guard variable for CalcLocalHierarchyAnimation(CStudioHdr const*, matrix3x4_t*, CBoneBitList&, Vector*, Quaternion*, mstudiobone_t const*, mstudiolocalhierarchy_t*, int, int, float, int, float, int)::rootXform
 b guard variable for ChasePath::PredictSubjectPosition(INextBot*, CBaseEntity*) const::cache
 b guard variable for CreateExplosion(CTakeDamageInfo const&, float, float, ExplosionFxType)::doorStr
 b guard variable for EntityFactoryDictionary()::s_EntityFactory
 b guard variable for FinishClientPutInServer(CTerrorPlayer*)::pointViewcontrolStr
 b guard variable for GetPlayerSpawnPosition(SurvivorCharacterType, Vector*, QAngle*, TerrorNavArea**)::survivorPositionStr
 b guard variable for GetPlayerViewOffset(CTerrorPlayer*, bool)::crouchedView
 b guard variable for GetPlayerViewOffset(CTerrorPlayer*, bool)::standingView
 b guard variable for GetSceneManager()::s_SceneManager
 b guard variable for IVision::IsLineOfSightClear(Vector const&) const::_counter
 b guard variable for IVision::IsLineOfSightClearToEntity(CBaseEntity*, Vector*) const::_counter
 b guard variable for MissingSceneWarning(char const*)::missing
 b guard variable for MoveHelperServer()::s_MoveHelperServer
 b guard variable for Old_EvaluateLanguageConditional(char const*)::cl_language
 b guard variable for SelectWeightedSequence(CStudioHdr*, int, int)::_counter
 b guard variable for SurvivorBot::InteractWithUsables(Action<SurvivorBot>*)::buttonStr
 b guard variable for SurvivorBot::RescueImmobilizedFriends(Action<SurvivorBot>*)::infoSurvivorRescueStr
 b guard variable for SurvivorElevatorEnter::Update(SurvivorBot*, float)::buttonStr
 b guard variable for SurvivorUseObject::GetUsePoint(SurvivorBot*, CBaseEntity*) const::usePos
 b guard variable for TerrorNavArea::ComputeVisibilityDelta(TerrorNavArea const*) const::delta
 b guard variable for TerrorNavArea::OnEnter(CBaseCombatCharacter*, CNavArea*)::doorStr
 b guard variable for TheNextBots()::manager
 b guard variable for TheTutor()::tutor
 b guard variable for UTIL_EntitiesInPVS(CBaseEntity*, CBaseEntity*)::lastOrg
 b guard variable for WaveTrace(char const*, char const*)::s_WaveTrace
 b guard variable for ZombieManager::BuildEscapeRoute(TerrorNavArea*) const::escapeRouteStr
 b guard variable for ZombieManager::StartFrame()::host_thread_mode
 b hammer_update_entity_command
 b hammer_update_safe_entities_command
 b hammer_updateignorelist
 b handle_dummy
 b handle_test
 b holdout_start_command
 b hostfile
 b hullcolor
 b hunter
 b hurtme
 b ice_sboxes_initialised
 b infected
 b inferno
 b infoSurvivorRescueStr
 b info_changelevel
 b info_constraint_anchor
 b info_director
 b info_elevator_floor
 b info_game_event_proxy
 b info_gamemode
 b info_goal_infected_chase
 b info_hang_lighting
 b info_infected_zoo_maker
 b info_infected_zoo_puppet
 b info_intermission
 b info_ladder
 b info_ladder_dismount
 b info_landmark
 b info_map_parameters
 b info_map_parameters_versus
 b info_mass_center
 b info_null
 b info_overlay_accessor
 b info_particle_system
 b info_player_counterterrorist
 b info_player_deathmatch
 b info_player_logo
 b info_player_start
 b info_player_teamspawn
 b info_player_terrorist
 b info_projecteddecal
 b info_remarkable
 b info_solo_changelevel
 b info_survivor_position
 b info_survivor_rescue
 b info_target
 b info_teleport_destination
 b info_transitioning_player
 b info_vehicle_groundspawn
 b info_view_parameters
 b info_zombie_spawn
 b infodecal
 b instanced_scripted_scene
 b item_sodacan
 b k_steamIDLanModeGS
 b k_steamIDNil
 b k_steamIDNonSteamGS
 b k_steamIDNotInitYetGS
 b k_steamIDOutofDateGS
 b kdtree_test
 b keyframe_rope
 b keyframe_track
 b kick_transitioning_command
 b kill_command
 b killvector_command
 b l4d_stats_track
 b lastMsgTime
 b light
 b light_directional
 b light_dynamic
 b light_environment
 b light_glspot
 b light_spot
 b lineartoscreen
 b lineartotexture
 b logic_active_autosave
 b logic_auto
 b logic_autosave
 b logic_branch
 b logic_branch_listener
 b logic_case
 b logic_choreographed_scene
 b logic_collision_pair
 b logic_compare
 b logic_lineto
 b logic_measure_movement
 b logic_multicompare
 b logic_navigation
 b logic_proximity
 b logic_relay
 b logic_scene_list_manager
 b logic_timer
 b logic_versus_random
 b m_ActivityRemapDatabase
 b m_PVS
 b m_WeaponInfoDatabase
 b m_nPVSSize
 b map_showspawnpoints_command
 b material_modify_control
 b math_colorblend
 b math_counter
 b math_remap
 b minigunBulletType
 b mod_load_showstall
 b molotov_projectile
 b momentary_door
 b momentary_rot_button
 b motdfile
 b move_keyframed
 b move_rope
 b mp_disable_autokick_command
 b mp_forcerespawnplayers
 b mp_forcewin_command
 b mp_scrambleteams
 b mp_switchteams
 b multiplayerendgame_command
 b multisource
 b nFrameNumber
 b nPropBreakablesPerFrameCount
 b nav_add_to_selected_set
 b nav_add_to_selected_set_by_id_command
 b nav_analyze
 b nav_analyze_scripted
 b nav_avoid
 b nav_begin_area
 b nav_begin_selecting
 b nav_begin_shift_xy
 b nav_build_ladder
 b nav_check_file_consistency
 b nav_check_floor
 b nav_check_stairs
 b nav_chop_selected_command
 b nav_clear_selected_set
 b nav_clear_walkable_marks
 b nav_compress_id
 b nav_connect
 b nav_corner_lower_command
 b nav_corner_place_on_ground_command
 b nav_corner_raise_command
 b nav_corner_select
 b nav_crouch
 b nav_delete
 b nav_delete_marked
 b nav_disconnect
 b nav_dont_hide
 b nav_end_area
 b nav_end_selecting
 b nav_end_shift_xy
 b nav_flood_select_command
 b nav_fog_mark
 b nav_fog_pick
 b nav_fog_set
 b nav_gen_cliffs_approx_command
 b nav_generate
 b nav_generate_incremental
 b nav_jump
 b nav_ladder_flip
 b nav_load
 b nav_make_sniper_spots
 b nav_mark
 b nav_mark_unnamed
 b nav_mark_walkable
 b nav_merge
 b nav_merge_mesh_command
 b nav_no_hostages
 b nav_no_jump
 b nav_place_floodfill
 b nav_place_list
 b nav_place_pick
 b nav_place_replace
 b nav_place_set
 b nav_precise
 b nav_print_visibility_info_command
 b nav_recall_selected_set
 b nav_recompute_flow
 b nav_remove_from_selected_set
 b nav_remove_jump_areas
 b nav_run
 b nav_save
 b nav_save_selected_command
 b nav_select_blocked_areas_command
 b nav_select_completely_visible
 b nav_select_damaging_areas_command
 b nav_select_half_space_command
 b nav_select_invalid_areas
 b nav_select_obstructed_areas_command
 b nav_select_overlapping
 b nav_select_partially_visible
 b nav_select_radius_command
 b nav_select_stairs_command
 b nav_select_threat
 b nav_select_view_distance_command
 b nav_select_visible_set_size_command
 b nav_set_place_mode
 b nav_shift_command
 b nav_show_ladder_bounds
 b nav_simplify_selected_command
 b nav_splice
 b nav_split
 b nav_stand
 b nav_stop
 b nav_store_selected_set
 b nav_strip
 b nav_subdivide_command
 b nav_test_stairs_command
 b nav_test_visibility
 b nav_toggle_in_selected_set
 b nav_toggle_place_mode
 b nav_toggle_place_painting
 b nav_toggle_selected_set
 b nav_toggle_selecting
 b nav_transient
 b nav_trouble_report_command
 b nav_trouble_report_corner_to_corner_command
 b nav_trouble_report_invalid_command
 b nav_trouble_report_suggestions_command
 b nav_unmark
 b nav_update_blocked
 b nav_update_lighting_command
 b nav_use_place
 b nav_walk
 b nav_warp_to_mark
 b nb_delete_all_command
 b nb_dump_debug_history_command
 b nb_move_to_cursor_command
 b nb_rush_command
 b noclip_command
 b num_teams
 b old_armor
 b outtro_stats_done_command
 b particle_test_start
 b particle_test_stop
 b path_corner
 b path_corner_crash
 b path_track
 b perf_fire_bullet_firstpredictedonly
 b phys_ballsocket
 b phys_bone_follower
 b phys_constraint
 b phys_constraintsystem
 b phys_convert
 b phys_hinge
 b phys_keepupright
 b phys_lengthconstraint
 b phys_magnet
 b phys_motor
 b phys_penetration_error_time
 b phys_pulleyconstraint
 b phys_ragdollconstraint
 b phys_ragdollmagnet
 b phys_slideconstraint
 b phys_spring
 b phys_thruster
 b phys_torque
 b physics_budget_command
 b physics_cannister
 b physics_constraints_command
 b physics_debug_entity_command
 b physics_entity_solver
 b physics_highlight_active_command
 b physics_npc_solver
 b physics_prop
 b physics_prop_ragdoll
 b physics_report_active_command
 b physics_select_command
 b physicsshadowupdate_render
 b picker
 b pipe_bomb_projectile
 b placeDirectory
 b player
 b player_loadsaved
 b player_manager
 b player_pickup
 b player_speedmod
 b player_weaponstrip
 b pointDeathfallCameraStr
 b point_anglesensor
 b point_angularvelocitysensor
 b point_bonusmaps_accessor
 b point_broadcastclientcommand
 b point_clientcommand
 b point_commentary_node
 b point_commentary_viewpoint
 b point_deathfall_camera
 b point_devshot_camera
 b point_enable_motion_fixup
 b point_entity_finder
 b point_gamestats_counter
 b point_hurt
 b point_message
 b point_playermoveconstraint
 b point_posecontroller
 b point_proximity_sensor
 b point_push
 b point_servercommand
 b point_spotlight
 b point_surroundtest
 b point_teleport
 b point_template
 b point_velocitysensor
 b point_viewcontrol
 b point_viewcontrol_multiplayer
 b point_viewcontrol_survivor
 b postprocess_controller
 b predicted_viewmodel
 b prop_car_alarm
 b prop_car_glass
 b prop_debug
 b prop_door_rotating
 b prop_door_rotating_checkpoint
 b prop_dynamic
 b prop_dynamic_create
 b prop_dynamic_ornament
 b prop_dynamic_override
 b prop_fuel_barrel
 b prop_fuel_barrel_piece
 b prop_glowing_object
 b prop_health_cabinet
 b prop_minigun
 b prop_mounted_machine_gun
 b prop_physics
 b prop_physics_create
 b prop_physics_multiplayer
 b prop_physics_override
 b prop_physics_respawnable
 b prop_ragdoll
 b prop_ragdoll_attached
 b prop_sphere
 b prop_vehicle
 b prop_vehicle_driveable
 b pz_damages
 b raggib
 b report_entities_command
 b report_simthinklist_command
 b report_soundpatch_command
 b report_touchlinks_command
 b rescue_show_command
 b rescue_update_nav_command
 b resetGameStats
 b restart_entities
 b rr_reloadresponsesystems_command
 b s_BoneMutex
 b s_BraceCharacters
 b s_BuildReverseMap
 b s_BulletGroupCounter
 b s_ChildOperatorDefinition
 b s_CombatCharVisCache
 b s_DebugHistory
 b s_DirtyKDTree
 b s_EffectServer
 b s_EmptyConVar
 b s_GameStats_Singleton
 b s_GameSystems
 b s_GameSystemsPerFrame
 b s_HLTVDirector
 b s_HashChains
 b s_LightMutex
 b s_ManualSpawn
 b s_Microphones
 b s_ParticleSystemMgr
 b s_PerfCrawl_eState
 b s_PerfCrawl_flLastTime
 b s_PerfCrawl_nLastAng
 b s_PerfCrawl_posLastPos
 b s_PrecacheSystem
 b s_PushedEntities
 b s_QCache
 b s_RemoveImmediateSemaphore
 b s_RndOrder
 b s_SIMDRandContexts
 b s_Steam3Server
 b s_SteamAPIContext
 b s_SteamGameServerAPIContext
 b s_SuccessfulSpeculatives
 b s_TEPhysicsProp
 b s_TraceFilter
 b s_TraceFilterNoNPCsOrPlayer
 b s_TraceFilterPlayerMovement
 b s_TraceFilterSkipTwoEntities
 b s_VictimList
 b s_WastedSpeculativeUpdates
 b s_bAllocatorInitialized
 b s_bConnected
 b s_bInDMXContext
 b s_bRegistered
 b s_bSystemsInitted
 b s_debugPlayer
 b s_detailController
 b s_factories
 b s_landmarkName
 b s_landmarkPosition
 b s_nBaseTextureVarCache
 b s_nCVarFlag
 b s_nNumCacheMisses
 b s_nNumCacheQueries
 b s_nTraceFilterCount
 b s_pClassLists
 b s_pCreatePuppet
 b s_pIgnoreEntity
 b s_pMapName
 b s_pNextPreallocatedArea
 b s_pNextPreallocatedLimit
 b s_pNonModifiedPointerProxyHead
 b s_pPerFrameSystemList
 b s_pPreallocatedAreaBase
 b s_pSystemList
 b s_pTokenBuf
 b s_pVariations
 b s_sharedUniformRandomStream
 b s_szPseudoUniqueID
 b s_szSaveFileName
 b s_szStatUploadRegistryKeyName
 b s_windControllers
 b say_command
 b say_team_command
 b sb_reachable_cache_paranoia
 b sb_takecontrol_command
 b scene_async_prefetch_spew
 b scene_flush_command
 b scene_forcecombined
 b scene_manager
 b scene_maxcaptionradius
 b scene_print
 b scene_showlook
 b scene_showmoveto
 b scene_showunlock
 b scripted_scene
 b server_game_time_command
 b setang
 b setang_exact_command
 b setmodel
 b setpos_command
 b setpos_exact_command
 b setpos_player_command
 b shadow_control
 b shake
 b showtriggers_toggle
 b simple_physics_brush
 b simple_physics_prop
 b sky_camera
 b smoker
 b smoothstairs
 b snd_play_in_out
 b soundent
 b soundpatch_captionlength
 b soundscape_flush_command
 b spark_shower
 b speechListIndex
 b speechListSounds
 b spotlight_end
 b spraycan
 b st_szNextMap
 b st_szNextSpot
 b surfaceprop_command
 b survivor_bot
 b sv_clockcorrection_msecs
 b sv_crash_command
 b sv_findsoundname_command
 b sv_nojumpingonelevators
 b sv_optimizedmovement
 b sv_playerperfhistorycount
 b sv_querycache_stats_command
 b sv_showhitboxes
 b sv_soundemitter_filecheck_command
 b sv_soundemitter_flush_command
 b sv_soundscape_printdebuginfo_command
 b sv_spectatoridletime
 b sv_tankpropfade
 b sv_thinktimecheck
 b sv_threaded_init
 b tank
 b tank_rock
 b tanktrain_ai
 b tanktrain_aitarget
 b target_cdaudio
 b target_changegravity
 b te_tester
 b team_manager
 b team_names
 b team_scores
 b terror_gamerules
 b terror_player_manager
 b test_dispatcheffect
 b test_effect
 b test_entity_blocker
 b test_outtro_stats
 b test_point_command
 b test_proxytoggle
 b test_traceline
 b texturetolinear
 b trigger
 b trigger_auto_crouch
 b trigger_autosave
 b trigger_brush
 b trigger_cdaudio
 b trigger_changelevel
 b trigger_escape
 b trigger_finale
 b trigger_finale_dlc3
 b trigger_fog
 b trigger_gravity
 b trigger_hurt
 b trigger_hurt_ghost
 b trigger_impact
 b trigger_look
 b trigger_multiple
 b trigger_once
 b trigger_playermovement
 b trigger_proximity
 b trigger_push
 b trigger_remove
 b trigger_serverragdoll
 b trigger_soundscape
 b trigger_teleport
 b trigger_togglesave
 b trigger_tonemap
 b trigger_transition
 b trigger_vphysics_motion
 b trigger_wind
 b tv_allow_camera_man
 b tv_allow_static_shots
 b tv_delay
 b use
 b variant_t::ToString() const::szBuf
 b vec2_invalid
 b vec2_origin
 b vec4_invalid
 b vec4_origin
 b vehicle_flushscript_command
 b vgui_screen
 b vgui_screen_team
 b vgui_slideshow_display
 b viewmodel
 b violence_ablood
 b violence_agibs
 b violence_hblood
 b violence_hgibs
 b vomit_particle
 b vote_controller
 b voxeltree_box
 b voxeltree_playerview
 b voxeltree_sphere
 b voxeltree_view
 b warp_all_survivors_here_command
 b warp_to_start_area_command
 b water_lod_control
 b waterbullet
 b weapon_ammo_spawn
 b weapon_autoshotgun
 b weapon_autoshotgun_spawn
 b weapon_basecsgrenade
 b weapon_boomer_claw
 b weapon_cs_base
 b weapon_csbase_gun
 b weapon_first_aid_kit
 b weapon_first_aid_kit_spawn
 b weapon_gascan
 b weapon_hegrenade_spawn
 b weapon_hunter_claw
 b weapon_hunting_rifle
 b weapon_hunting_rifle_spawn
 b weapon_molotov
 b weapon_molotov_spawn
 b weapon_oxygentank
 b weapon_pain_pills
 b weapon_pain_pills_spawn
 b weapon_pipe_bomb
 b weapon_pipe_bomb_spawn
 b weapon_pistol
 b weapon_pistol_spawn
 b weapon_propanetank
 b weapon_pumpshotgun
 b weapon_pumpshotgun_spawn
 b weapon_reparse_server_command
 b weapon_rifle
 b weapon_rifle_spawn
 b weapon_smg
 b weapon_smg_spawn
 b weapon_smoker_claw
 b weapon_tank_claw
 b window_pane
 b witch
 b world_items
 b worldspawn
 b z_add_command
 b z_debug_infected_anim_report_command
 b z_debug_path_stress_test_command
 b z_decals_command
 b z_increment_head_command
 b z_increment_lower_command
 b z_increment_skin_command
 b z_increment_upper_command
 b z_removeitems
 b z_spawn_command
 ceilf
 cos
 cosf
 d (anonymous namespace)::SurvivorAliveCritFunctor::m_sCharacterCriteria
 d (anonymous namespace)::s_PlayerInfoManager_V1
 d .memset_pattern
 d ACHIEVEMENT_SAVE_RESTORE_VERSION
 d ACT_EXP_ANGRY
 d ACT_EXP_IDLE
 d BoomerBehavior::OnContact(Boomer*, CBaseEntity*, CGameTrace*)::pressAltFireButton
 d CBaseButton::DrawDebugTextOverlays()::pszStates
 d CBaseCombatWeapon::GetProficiencyValues()::defaultWeaponProficiencyTable
 d CCSHLTVDirector::GetModEvents()::s_modevents
 d CCSPlayer::State_LookupInfo(CSPlayerState)::playerStateInfos
 d CGlobalState::DumpGlobals()::estates
 d CHLTVDirector::GetModEvents()::s_modevents
 d COMMENTARY_SAVE_RESTORE_VERSION
 d CRestore::ReadFields(char const*, void*, datamap_t*, typedescription_t*, int)::lastName
 d CTerrorPlayer::GetHurrahConcept()::returnString
 d CTongue::State_LookupInfo(TongueState)::tongueStateInfo
 d Director::DrawDebug()::stageName
 d Director::UpdateTestLoop()::timeLastTransition
 d EVENTQUEUE_SAVE_RESTORE_VERSION
 d GetAttachTypeFromString(char const*)::pAttachmentNames
 d GetMassEquivalent(float)::masstext
 d GetPlayerSpawnPosition(SurvivorCharacterType, Vector*, QAngle*, TerrorNavArea**)::idx
 d GetScavengeItemTypeName(ScavengeItemType)::s_szItemTypeNames
 d HunterBehavior::OnContact(Hunter*, CBaseEntity*, CGameTrace*)::pressAltFireButton
 d HunterLeapToCover::Update(Hunter*, float)::pressFireButton
 d InfectedRandomColorArray(int*)::s_clrRandom
 d L4D_STATS::MapDataTitle
 d L4D_STATS::SteamWeaponTitle
 d L4D_STATS::SurvivorDataTitle
 d L4D_STATS::ZombieDataTitle
 d NextBotManager::Update()::iCurFrame
 d PHYS_SAVE_RESTORE_VERSION
 d PrecacheInstancedScene(char const*)::nMakingReslists
 d RESPONSESYSTEM_SAVE_RESTORE_VERSION
 d ReloadAnimStateString
 d ReloadStateString
 d SmokerBehavior::OnContact(Smoker*, CBaseEntity*, CGameTrace*)::pressAltFireButton
 d SurvivorLiberateBesiegedFriend::Update(SurvivorBot*, float)::shoveReply
 d TEMPLATE_SAVE_RESTORE_VERSION
 d TankBehavior::OnContact(Tank*, CBaseEntity*, CGameTrace*)::pressFireButton
 d TankProjectile
 d TerrorAward::GetStatFileNameFromType(AwardType)::display
 d Vocalizer::TryToWarnAboutSpecial(CBaseCombatCharacter*)::AlsoSpottedConcepts
 d Vocalizer::TryToWarnAboutSpecial(CBaseCombatCharacter*)::SpottedConcepts
 d WeaponNames
 d __g_CServerGameTags_singleton
 d constraintevents
 d debugTypeName
 d dyld__mach_header
 d gDamageTableRegistry
 d gTitleComments
 d g_ActivityDataOps
 d g_BurningFleshHandle
 d g_BurningObjectHandle
 d g_ConVarAccessor
 d g_DefaultLightstyles
 d g_EntFireAutoComplete
 d g_InfectedBulletImpact
 d g_InfectedIgniteScream
 d g_NameMap
 d g_NullSurface
 d g_ProficiencyNames
 d g_ServerSideFlexControllers
 d g_ZombieShot
 d g_bCleanupDatObject
 d g_bEnableProxy
 d g_pSoundLevels
 d glassAngularTable
 d glassLinearTable
 d npcAngularTable
 d npcLinearTable
 d pVersusConvars
 d playerAngularTable
 d playerCallback
 d playerLinearTable
 d playerVehicleAngularTable
 d playerVehicleLinearTable
 d randomWeaponNames
 d sDifficultyStrings
 d sGameModeStrings
 d s_BotManager
 d s_DamageTypeToStrTable
 d s_DefaultAccessor
 d s_DefaultParticleSystemQuery
 d s_IKSaveRestoreOp
 d s_LastFileLoadingFrom
 d s_NameMap
 d s_ParticleSystemQuery
 d s_PlayerInfoManager
 d s_PreserveEnts
 d s_RtEnvNameMap
 d s_SoundPatchSaveRestoreOps
 d s_TerrorPreserveEnts
 d s_TerrorVersusGaragePreserveEnts
 d s_TerrorVersusPreserveEnts
 d s_WeaponAliasInfo
 d s_difficulty
 d s_giveArguments
 d s_nDLLIdentifier
 d s_nReplaceCtr
 d s_pConversionArrays_NoEscConversion
 d s_pConversionArrays_StringCharConversion
 d s_pResourceTypeName
 d s_placeholderBotIndex
 d s_stepPrefix
 d skillName
 d spawnAttributeTable
 d troubleReportTable
 d typeinfo for (anonymous namespace)::CPlayerInfoManager_V1
 d typeinfo for (anonymous namespace)::IPlayerInfoManager_V1
 d typeinfo for CCSGameRules::CleanUpMap()::CCSMapEntityFilter
 d typeinfo for CTerrorGameRules::CleanUpMap()::CTerrorMapEntityFilter
 d typeinfo for CThrow::UpdateAbility()::CThrowTraceFilter
 d upgradeName
 d vtable for (anonymous namespace)::CPlayerInfoManager_V1
 d vtable for CCSGameRules::CleanUpMap()::CCSMapEntityFilter
 d vtable for CTerrorGameRules::CleanUpMap()::CTerrorMapEntityFilter
 d vtable for CThrow::UpdateAbility()::CThrowTraceFilter
 expf
 floor
 floorf
 fmod
 fmodf
 free
 g_VProfCurrentProfile
 g_VProfSignalSpike
 g_nThreadID
 g_pSteamClientGameServer
 g_pThreadPool
 g_pVCR
 localtime
 log
 log10
 logf
 malloc
 malloc_size
 memchr
 memcmp
 memcpy
 memmove
 memset
 memset_pattern16
 operator delete(void*)
 operator delete[](void*)
 operator new(unsigned long)
 operator new[](unsigned long)
 pow
 printf
 pthread_mutex_destroy
 pthread_mutex_init
 pthread_mutex_lock
 pthread_mutex_unlock
 pthread_mutexattr_init
 pthread_mutexattr_settype
 qsort
 r .memset_pattern
 r .memset_pattern94
 r CBaseGameStats_Driver::SendData()::szFileName
 r Director::CalcFinaleProgress() const::flPointsPerStage
 r Director::CreateHoldoutSpecials()::specialRoster
 r Director::EndScenario(ScenarioRestartReason)::clr
 r Director::IsClassAllowed(ZombieClassType) const::easyLimit
 r Director::IsClassAllowed(ZombieClassType) const::hardLimit
 r Director::IsClassAllowed(ZombieClassType) const::normalLimit
 r TankLocomotion::ClimbUpToLedge(Vector const&, Vector const&, CBaseEntity const*)::climbActivities
 r gSizes
 r g_nRandomValues
 r g_nTanksPerEvent
 r ice_keyrot
 r ice_pbox
 r ice_smod
 r ice_sxor
 r powerWeapons
 r pulCRCTable
 r sGameModePlayers
 r s_ExtIndices
 r s_MatIndices
 r s_pAttributeSize
 r scavengeItems
 r starterWeapons
 r typeinfo name for (anonymous namespace)::CPlayerInfoManager_V1
 r typeinfo name for (anonymous namespace)::IPlayerInfoManager_V1
 r typeinfo name for CCSGameRules::CleanUpMap()::CCSMapEntityFilter
 r typeinfo name for CTerrorGameRules::CleanUpMap()::CTerrorMapEntityFilter
 r typeinfo name for CThrow::UpdateAbility()::CThrowTraceFilter
 raise
 realloc
 sin
 sinf
 snprintf
 sscanf
 std::terminate()
 strcasecmp
 strcat
 strchr
 strcmp
 strcpy
 strdup
 strlen
 strncat
 strncmp
 strncpy
 strstr
 strtod$UNIX2003
 strtok
 strtol
 strtoul
 swscanf
 t (anonymous namespace)::CPlayerInfoManager_V1::GetPlayerInfo(edict_t*)
 t (anonymous namespace)::__CreateCPlayerInfoManager_V1IPlayerInfoManager_V1_interface()
 t AlignBoxes(matrix3x4_t*, Vector const&, Vector const&)
 t AnalysisProgress(char const*, int, int, bool)
 t AttributeAutocomplete(char const*, char (*) [64])
 t BoostMaxHealthTo150(CBasePlayer*)
 t BuildTeleportList_r(CBaseEntity*, CUtlVector<TeleportListEntry_t, CUtlMemory<TeleportListEntry_t, int> >&)
 t CCSGameRules::CleanUpMap()::CCSMapEntityFilter::CreateNextEntity(char const*)
 t CCSGameRules::CleanUpMap()::CCSMapEntityFilter::ShouldCreateEntity(char const*)
 t CC_FadeIn(CCommand const&)
 t CC_FadeOut(CCommand const&)
 t CC_ForceLookAt(CCommand const&)
 t CC_ResetGameStats(CCommand const&)
 t CC_SelectBot(CCommand const&)
 t CC_SetDebug(CCommand const&)
 t CC_SetDebugFilter(CCommand const&)
 t CTerrorGameRules::CleanUpMap()::CTerrorMapEntityFilter::CreateNextEntity(char const*)
 t CTerrorGameRules::CleanUpMap()::CTerrorMapEntityFilter::ShouldCreateEntity(char const*)
 t CThrow::UpdateAbility()::CThrowTraceFilter::ShouldHitEntity(IHandleEntity*, int)
 t CalcAnimation(CStudioHdr const*, Vector*, Quaternion*, mstudioseqdesc_t&, int, int, float, int)
 t CalcDecompressedAnimation(mstudiocompressedikerror_t const*, int, float, Vector&, Quaternion&)
 t CalcLocalHierarchyAnimation(CStudioHdr const*, matrix3x4_t*, CBoneBitList&, Vector*, Quaternion*, mstudiobone_t const*, mstudiolocalhierarchy_t*, int, int, float, int, float, int)
 t CalcZeroframeData(CStudioHdr const*, studiohdr_t const*, virtualgroup_t const*, mstudiobone_t const*, mstudioanimdesc_t&, float, Vector*, Quaternion*, int, float)
 t CallbackHighlight(CBaseEntity*)
 t CallbackReport(CBaseEntity*)
 t CaseInsensitiveStringSort(char const* const*, char const* const*)
 t ChoreEventStartTimeLessFunc(CChoreoEvent* const&, CChoreoEvent* const&)
 t ClipRayToHitbox(Ray_t const&, mstudiobbox_t*, matrix3x4_t&, CGameTrace&)
 t CollectMusicBanks(char const*, KeyValues*, CUtlVector<char*, CUtlMemory<char*, int> >*)
 t CommandNavCheckFloor()
 t CommandNavCheckStairs()
 t CommandNavSelectOverlapping()
 t CommandNavUpdateBlocked()
 t CompareSpawnOrder(HierarchicalSpawn_t*, HierarchicalSpawn_t*)
 t ComputePushStartMatrix(matrix3x4_t&, CBaseEntity*, pushblock_t const&)
 t ComputeSeparatingPlane(matrix3x4_t const&, matrix3x4_t const&, Vector const&, Vector const&, float, cplane_t*)
 t ComputeSpawnHierarchyDepth_r(CBaseEntity*)
 t CreateAirboat(CBasePlayer*)
 t CreateJeep(CBasePlayer*)
 t DebugConstraints(CBaseEntity*)
 t DescribeGroundList(CBaseEntity*)
 t DifficultyChanged(IConVar*, char const*, float)
 t EntityEntindexCompare(CBaseEntity* const*, CBaseEntity* const*)
 t FatalFallSpeedChanged(IConVar*, char const*, float)
 t FindLaunchOptionByValue(KeyValues*, char const*)
 t FindPassableSpace(CBaseEntity*, unsigned int, Vector const&, float, Vector&)
 t FindPositionInArea(CNavArea*, NavCornerType)
 t FixVersusConvarsChanged(IConVar*, char const*, float)
 t FloorHeightSort(FloorInfo const*, FloorInfo const*)
 t FogNameAutocompleteCallback(char const*, char (*) [64])
 t GameEventLessFunc(CGameEvent const&, CGameEvent const&)
 t GetAllChildren_r(CBaseEntity*, CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >&)
 t GetFadeParms(CCommand const&, float&, color32_s&)
 t GetSafeSpawnPos(CTerrorPlayer*, Vector, bool, int, QAngle*)
 t GiveBlindingFlash(CBasePlayer*)
 t IHandleEntityEntindexCompare(IHandleEntity* const*, IHandleEntity* const*)
 t InitGameSystems(void* (*)(char const*, int*))
 t InvokeMethod(void (IGameSystem::*)(), char const*)
 t InvokeMethodReverseOrder(void (IGameSystem::*)())
 t InvokePerFrameMethod(void (IGameSystemPerFrame::*)(), char const*)
 t IsNodeOverlapped(Vector const&, Vector const&)
 t IsRunningAway(CBaseCombatCharacter*, CTerrorPlayer*)
 t ListRecentNPCSpeech()
 t MD5Transform(unsigned int*, unsigned int const*)
 t MarkVPhysicsDebug(CBaseEntity*)
 t NavAttributeAutocomplete(char const*, char (*) [64])
 t NavTroubleReportAutoComplete(char const*, char (*) [64])
 t OutputVPhysicsDebugInfo(CBaseEntity*)
 t PerfCrawlReset(IConVar*, char const*, float)
 t PhysFrame(float)
 t PhysicsCheckSweep(CBaseEntity*, Vector const&, Vector const&, CGameTrace*)
 t PlaceNameAutocompleteCallback(char const*, char (*) [64])
 t PostSimulation_ImpulseEvent(IPhysicsObject*, Vector const&, Vector const&)
 t PostUpdateQueryCache()
 t PreUpdateQueryCache()
 t ReduceToComponentAreas(CNavArea*, bool)
 t ReportStats(CCommand const&)
 t ResolveFollowupTargetToEntity(CAI_Concept&, AI_CriteriaSet&, AI_Response*, AI_ResponseFollowup*)
 t SafeFallSpeedChanged(IConVar*, char const*, float)
 t SelectClimbUpFromStairs(NavAreaCollector*)
 t SelectCornerToCornerAreas(NavAreaCollector*)
 t SelectOrphanAreas(NavAreaCollector*)
 t SelectOrphanBattlefieldAreas(NavAreaCollector*)
 t SelectOrphanCheckpointAreas(NavAreaCollector*)
 t SelectOrphanFinaleAreas(NavAreaCollector*)
 t SelectedSetColorChaged(IConVar*, char const*, float)
 t SendProxy_Empty(SendProp const*, void const*, void const*, DVariant*, int, int)
 t SendProxy_Solid(SendProp const*, void const*, void const*, DVariant*, int, int)
 t SendProxy_SolidFlags(SendProp const*, void const*, void const*, DVariant*, int, int)
 t SetMinMaxSize(CBaseEntity*, Vector const&, Vector const&)
 t SpecFilterChanged(IConVar*, char const*, float)
 t StringSort(char const* const*, char const* const*)
 t TraceFilterNoCombatCharacters(IHandleEntity*, int)
 t UTIL_FindClientInPVSGuts(edict_t*, unsigned char*, unsigned int)
 t UTIL_GetCurrentCheckClient()
 t UTIL_IsSpaceEmptyForTeam(Vector*, Vector const&, Vector const&, int)
 t UtlStringLessFunc(CUtlString const&, CUtlString const&)
 t ValidateMOTDFilename(IConVar*, char const*, float)
 t ValidateMpGameMode(IConVar*, char const*, float)
 t VoiceServerDebug(char const*, ...)
 t __CreateCEffectsServerIEffects_interface()
 t __CreateCGameMovementIGameMovement_interface()
 t __CreateCHLTVDirectorIHLTVDirector_interface()
 t __CreateCPlayerInfoManagerIPlayerInfoManager_interface()
 t __CreateCPluginBotManagerIBotManager_interface()
 t __CreateCPluginHelpersCheckIPluginHelpersCheck_interface()
 t __CreateCServerDLLSharedAppSystemsIServerDLLSharedAppSystems_interface()
 t __CreateCServerGameClientsIServerGameClients_interface()
 t __CreateCServerGameDLLIServerGameDLL_interface()
 t __CreateCServerGameEntsIServerGameEnts_interface()
 t __CreateCServerGameTagsIServerGameTags_interface()
 t __CreateCServerToolsIServerTools_interface()
 t __cxx_global_array_dtor
 t __cxx_global_array_dtor100
 t __cxx_global_array_dtor105
 t __cxx_global_array_dtor116
 t __cxx_global_array_dtor120
 t __cxx_global_array_dtor154
 t __cxx_global_array_dtor162
 t __cxx_global_array_dtor178
 t __cxx_global_array_dtor189
 t __cxx_global_array_dtor211
 t __cxx_global_array_dtor217
 t __cxx_global_array_dtor222
 t __cxx_global_array_dtor23
 t __cxx_global_array_dtor233
 t __cxx_global_array_dtor24
 t __cxx_global_array_dtor302
 t __cxx_global_array_dtor317
 t __cxx_global_array_dtor33
 t __cxx_global_array_dtor34
 t __cxx_global_array_dtor351
 t __cxx_global_array_dtor39
 t __cxx_global_array_dtor401
 t __cxx_global_array_dtor402
 t __cxx_global_array_dtor41
 t __cxx_global_array_dtor420
 t __cxx_global_array_dtor422
 t __cxx_global_array_dtor46
 t __cxx_global_array_dtor50
 t __cxx_global_array_dtor516
 t __cxx_global_array_dtor52
 t __cxx_global_array_dtor53
 t __cxx_global_array_dtor538
 t __cxx_global_array_dtor58
 t __cxx_global_array_dtor59
 t __cxx_global_array_dtor60
 t __cxx_global_array_dtor64
 t __cxx_global_array_dtor68
 t __cxx_global_array_dtor72
 t __cxx_global_array_dtor725
 t __cxx_global_array_dtor73
 t __cxx_global_array_dtor77
 t __cxx_global_array_dtor78
 t __cxx_global_array_dtor85
 t __cxx_global_array_dtor92
 t __cxx_global_array_dtor95
 t __cxx_global_array_dtor96
 t __cxx_global_array_dtor99
 t callvote(CCommand const&)
 t cast_hull(CCommand const&)
 t cast_ray(CCommand const&)
 t clear_debug_overlays(CCommand const&)
 t cs_make_vip(CCommand const&)
 t director_log_boss_threats(CCommand const&)
 t director_log_scavenge_items(CCommand const&)
 t director_print_player_counts(CCommand const&)
 t director_report(CCommand const&)
 t director_start(CCommand const&)
 t director_stop(CCommand const&)
 t dump_avatar_info(CCommand const&)
 t dump_entity_sizes(CCommand const&)
 t dump_globals(CCommand const&)
 t dump_player_reports(CCommand const&)
 t dump_pz_data(CCommand const&)
 t ent_setang(CCommand const&)
 t ent_setpos(CCommand const&)
 t explode(CCommand const&)
 t explodevector(CCommand const&)
 t foundry_engine_get_mouse_control(CCommand const&)
 t foundry_engine_release_mouse_control(CCommand const&)
 t foundry_select_entity(CCommand const&)
 t foundry_sync_hammer_view(CCommand const&)
 t foundry_update_entity(CCommand const&)
 t giveRandomWeapon(CCommand const&)
 t giveSpecificItem(CCommand const&)
 t global constructors keyed to a
 t go_away_from_keyboard(CCommand const&)
 t hammer_update_entity(CCommand const&)
 t hammer_update_safe_entities(CCommand const&)
 t holdout_start(CCommand const&)
 t kick_transitioning(CCommand const&)
 t kill(CCommand const&)
 t killvector(CCommand const&)
 t map_showspawnpoints(CCommand const&)
 t mp_disable_autokick(CCommand const&)
 t mp_forcewin(CCommand const&)
 t multiplayerendgame(CCommand const&)
 t nav_add_to_selected_set_by_id(CCommand const&)
 t nav_chop_selected(CCommand const&)
 t nav_corner_lower(CCommand const&)
 t nav_corner_place_on_ground(CCommand const&)
 t nav_corner_raise(CCommand const&)
 t nav_flood_select(CCommand const&)
 t nav_gen_cliffs_approx(CCommand const&)
 t nav_merge_mesh(CCommand const&)
 t nav_print_visibility_info(CCommand const&)
 t nav_save_selected(CCommand const&)
 t nav_select_blocked_areas(CCommand const&)
 t nav_select_damaging_areas(CCommand const&)
 t nav_select_half_space(CCommand const&)
 t nav_select_obstructed_areas(CCommand const&)
 t nav_select_radius(CCommand const&)
 t nav_select_stairs(CCommand const&)
 t nav_select_view_distance(CCommand const&)
 t nav_select_visible_set_size(CCommand const&)
 t nav_shift(CCommand const&)
 t nav_simplify_selected(CCommand const&)
 t nav_subdivide(CCommand const&)
 t nav_test_stairs(CCommand const&)
 t nav_trouble_report(CCommand const&)
 t nav_trouble_report_corner_to_corner(CCommand const&)
 t nav_trouble_report_invalid(CCommand const&)
 t nav_trouble_report_suggestions(CCommand const&)
 t nav_update_lighting(CCommand const&)
 t nb_delete_all(CCommand const&)
 t nb_dump_debug_history(CCommand const&)
 t nb_move_to_cursor(CCommand const&)
 t nb_rush(CCommand const&)
 t noclip(CCommand const&)
 t outtro_stats_done(CCommand const&)
 t physics_budget(CCommand const&)
 t physics_constraints(CCommand const&)
 t physics_debug_entity(CCommand const&)
 t physics_highlight_active(CCommand const&)
 t physics_report_active(CCommand const&)
 t physics_select(CCommand const&)
 t report_entities(CCommand const&)
 t report_simthinklist(CCommand const&)
 t report_soundpatch(CCommand const&)
 t report_touchlinks(CCommand const&)
 t rescue_show(CCommand const&)
 t rescue_update_nav(CCommand const&)
 t rr_reloadresponsesystems(CCommand const&)
 t say(CCommand const&)
 t say_team(CCommand const&)
 t sb_takecontrol(CCommand const&)
 t scene_flush(CCommand const&)
 t server_game_time(CCommand const&)
 t setang_exact(CCommand const&)
 t setpos(CCommand const&)
 t setpos_exact(CCommand const&)
 t setpos_player(CCommand const&)
 t soundscape_flush(CCommand const&)
 t splitX(CNavArea*)
 t splitY(CNavArea*)
 t surfaceprop(CCommand const&)
 t sv_crash(CCommand const&)
 t sv_findsoundname(CCommand const&)
 t sv_querycache_stats(CCommand const&)
 t sv_soundemitter_filecheck(CCommand const&)
 t sv_soundemitter_flush(CCommand const&)
 t sv_soundscape_printdebuginfo(CCommand const&)
 t testStitchConnection(CNavArea*, CNavArea*, Vector const&, Vector const&)
 t test_point(CCommand const&)
 t vehicle_flushscript(CCommand const&)
 t warp_all_survivors_here(CCommand const&)
 t warp_to_start_area(CCommand const&)
 t weapon_reparse_server(CCommand const&)
 t z_add(CCommand const&)
 t z_debug_infected_anim_report(CCommand const&)
 t z_debug_path_stress_test(CCommand const&)
 t z_decals(CCommand const&)
 t z_increment_head(CCommand const&)
 t z_increment_lower(CCommand const&)
 t z_increment_skin(CCommand const&)
 t z_increment_upper(CCommand const&)
 t z_spawn(CCommand const&)
 tan
 time
 vsnprintf
 vtable for __cxxabiv1::__class_type_info
 vtable for __cxxabiv1::__si_class_type_info
 vtable for __cxxabiv1::__vmi_class_type_info
 vtune
 wcslen
 wcstof
 wcstol
 wcstombs

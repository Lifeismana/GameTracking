 B ACT_ACTIVATE_BATON
 B ACT_ANTLIONGUARD_BARK
 B ACT_ANTLIONGUARD_CHARGE_ANTICIPATION
 B ACT_ANTLIONGUARD_CHARGE_CANCEL
 B ACT_ANTLIONGUARD_CHARGE_CRASH
 B ACT_ANTLIONGUARD_CHARGE_HIT
 B ACT_ANTLIONGUARD_CHARGE_RUN
 B ACT_ANTLIONGUARD_CHARGE_START
 B ACT_ANTLIONGUARD_CHARGE_STOP
 B ACT_ANTLIONGUARD_FLINCH_LIGHT
 B ACT_ANTLIONGUARD_PEEK1
 B ACT_ANTLIONGUARD_PEEK_ENTER
 B ACT_ANTLIONGUARD_PEEK_EXIT
 B ACT_ANTLIONGUARD_PEEK_FLINCH
 B ACT_ANTLIONGUARD_PEEK_SIGHTED
 B ACT_ANTLIONGUARD_PHYSHIT_FL
 B ACT_ANTLIONGUARD_PHYSHIT_FR
 B ACT_ANTLIONGUARD_PHYSHIT_RL
 B ACT_ANTLIONGUARD_PHYSHIT_RR
 B ACT_ANTLIONGUARD_ROAR
 B ACT_ANTLIONGUARD_RUN_HURT
 B ACT_ANTLIONGUARD_SEARCH
 B ACT_ANTLIONGUARD_SHOVE_PHYSOBJECT
 B ACT_ANTLIONGUARD_UNBURROW
 B ACT_ANTLION_BURROW_IDLE
 B ACT_ANTLION_BURROW_IN
 B ACT_ANTLION_BURROW_OUT
 B ACT_ANTLION_DISTRACT
 B ACT_ANTLION_DISTRACT_ARRIVED
 B ACT_ANTLION_DROWN
 B ACT_ANTLION_FLIP
 B ACT_ANTLION_JUMP_START
 B ACT_ANTLION_LAND
 B ACT_ANTLION_POUNCE
 B ACT_ANTLION_POUNCE_MOVING
 B ACT_ANTLION_RUN_AGITATED
 B ACT_ANTLION_WORKER_EXPLODE
 B ACT_ANTLION_ZAP_FLIP
 B ACT_BARNACLE_BARF_HUMAN
 B ACT_BARNACLE_BITE_HUMAN
 B ACT_BARNACLE_BITE_PLAYER
 B ACT_BARNACLE_BITE_SMALL_THINGS
 B ACT_BARNACLE_CHEW_HUMAN
 B ACT_BARNACLE_CHEW_SMALL_THINGS
 B ACT_BARNACLE_SLURP
 B ACT_BARNACLE_TASTE_SPIT
 B ACT_BARNACLE_TONGUE_WRAP
 B ACT_BLACKHEADCRAB_RUN_PANIC
 B ACT_CEILING_TURRET_CLOSE
 B ACT_CEILING_TURRET_CLOSED_IDLE
 B ACT_CEILING_TURRET_DRYFIRE
 B ACT_CEILING_TURRET_FIRE
 B ACT_CEILING_TURRET_OPEN
 B ACT_CEILING_TURRET_OPEN_IDLE
 B ACT_CIT_BLINDED
 B ACT_CIT_HANDSUP
 B ACT_CIT_HEAL
 B ACT_CIT_SHOWARMBAND
 B ACT_CIT_STARTLED
 B ACT_COMBINE_AR2_ALTFIRE
 B ACT_COMBINE_BUGBAIT
 B ACT_COMBINE_CAMERA_CLOSE
 B ACT_COMBINE_CAMERA_CLOSED_IDLE
 B ACT_COMBINE_CAMERA_FIRE
 B ACT_COMBINE_CAMERA_OPEN
 B ACT_COMBINE_CAMERA_OPEN_IDLE
 B ACT_COMBINE_LAUNCH_GRENADE
 B ACT_COMBINE_THROW_GRENADE
 B ACT_DEACTIVATE_BATON
 B ACT_DOG_CATCH
 B ACT_DOG_PICKUP
 B ACT_DOG_THROW
 B ACT_DOG_WAITING
 B ACT_DROPSHIP_DEPLOY_IDLE
 B ACT_DROPSHIP_DESCEND_IDLE
 B ACT_DROPSHIP_FLY_IDLE
 B ACT_DROPSHIP_FLY_IDLE_CARGO
 B ACT_DROPSHIP_FLY_IDLE_EXAGG
 B ACT_DROPSHIP_LIFTOFF
 B ACT_FISHERMAN_HAT_DOWN
 B ACT_FISHERMAN_HAT_UP
 B ACT_FLOOR_TURRET_CLOSE
 B ACT_FLOOR_TURRET_CLOSED_IDLE
 B ACT_FLOOR_TURRET_FIRE
 B ACT_FLOOR_TURRET_OPEN
 B ACT_FLOOR_TURRET_OPEN_IDLE
 B ACT_GUNSHIP_CRASH
 B ACT_GUNSHIP_HOVER
 B ACT_GUNSHIP_PATROL
 B ACT_HEADCRAB_BURROW_IDLE
 B ACT_HEADCRAB_BURROW_IN
 B ACT_HEADCRAB_BURROW_OUT
 B ACT_HEADCRAB_CEILING_DETACH
 B ACT_HEADCRAB_CEILING_FALL
 B ACT_HEADCRAB_CEILING_IDLE
 B ACT_HEADCRAB_CEILING_LAND
 B ACT_HEADCRAB_CRAWL_FROM_CANISTER_CENTER
 B ACT_HEADCRAB_CRAWL_FROM_CANISTER_LEFT
 B ACT_HEADCRAB_CRAWL_FROM_CANISTER_RIGHT
 B ACT_HEADCRAB_DROWN
 B ACT_HEADCRAB_HOP_LEFT
 B ACT_HEADCRAB_HOP_RIGHT
 B ACT_HEADCRAB_THREAT_DISPLAY
 B ACT_HELICOPTER_CRASHING
 B ACT_HELICOPTER_DROP_BOMB
 B ACT_ICH_BITE_HIT
 B ACT_ICH_BITE_MISS
 B ACT_ICH_THRASH
 B ACT_IDLE_ANGRY_BATON
 B ACT_MANHACK_UNPACK
 B ACT_MELEE_ATTACK_THRUST
 B ACT_METROPOLICE_DEPLOY_MANHACK
 B ACT_METROPOLICE_DRAW_PISTOL
 B ACT_METROPOLICE_FLINCH_BEHIND
 B ACT_MONK_GUN_IDLE
 B ACT_PUSH_PLAYER
 B ACT_STRIDER_AIMRA1
 B ACT_STRIDER_CARRIED
 B ACT_STRIDER_DEPLOY
 B ACT_STRIDER_DEPLOYRA1
 B ACT_STRIDER_DODGEL
 B ACT_STRIDER_DODGER
 B ACT_STRIDER_FINISHRA1
 B ACT_STRIDER_FLICKL
 B ACT_STRIDER_FLICKR
 B ACT_STRIDER_GESTURE_DEATH
 B ACT_STRIDER_LOOKL
 B ACT_STRIDER_LOOKR
 B ACT_STRIDER_SLEEP
 B ACT_STRIDER_STOMPL
 B ACT_STRIDER_STOMPR
 B ACT_VORTIGAUNT_AIM
 B ACT_VORTIGAUNT_ANTLION_THROW
 B ACT_VORTIGAUNT_DISPEL
 B ACT_VORTIGAUNT_END_HEAL
 B ACT_VORTIGAUNT_HEAL
 B ACT_VORTIGAUNT_HEAL_LOOP
 B ACT_VORTIGAUNT_START_HEAL
 B ACT_VORTIGAUNT_TO_ACTION
 B ACT_VORTIGAUNT_TO_IDLE
 B ACT_WALK_BATON
 B ACT_WALK_EASY
 B ACT_WALK_MARCH
 B ACT_ZOMBIE_POISON_THREAT
 B ACT_ZOMBIE_TANTRUM
 B ACT_ZOMBIE_WALLPOUND
 B AE_ALYX_EMPTOOL_ATTACHMENT
 B AE_ALYX_EMPTOOL_SEQUENCE
 B AE_ANTLIONGUARD_BURROW_OUT
 B AE_ANTLIONGUARD_CHARGE_EARLYOUT
 B AE_ANTLIONGUARD_CHARGE_HIT
 B AE_ANTLIONGUARD_FOOTSTEP_HEAVY
 B AE_ANTLIONGUARD_FOOTSTEP_LIGHT
 B AE_ANTLIONGUARD_SHOVE
 B AE_ANTLIONGUARD_SHOVE_PHYSOBJECT
 B AE_ANTLIONGUARD_VOICE_BARK
 B AE_ANTLIONGUARD_VOICE_GROWL
 B AE_ANTLIONGUARD_VOICE_GRUNT
 B AE_ANTLIONGUARD_VOICE_PAIN
 B AE_ANTLIONGUARD_VOICE_ROAR
 B AE_ANTLIONGUARD_VOICE_SCRATCH
 B AE_ANTLIONGUARD_VOICE_SQUEEZE
 B AE_ANTLION_BURROW_IN
 B AE_ANTLION_BURROW_OUT
 B AE_ANTLION_CLOSE_WINGS
 B AE_ANTLION_FOOTSTEP_HEAVY
 B AE_ANTLION_FOOTSTEP_SOFT
 B AE_ANTLION_MELEE1_SOUND
 B AE_ANTLION_MELEE2_SOUND
 B AE_ANTLION_MELEE_HIT1
 B AE_ANTLION_MELEE_HIT2
 B AE_ANTLION_MELEE_POUNCE
 B AE_ANTLION_OPEN_WINGS
 B AE_ANTLION_START_JUMP
 B AE_ANTLION_VANISH
 B AE_ANTLION_WALK_FOOTSTEP
 B AE_ANTLION_WORKER_DONT_EXPLODE
 B AE_ANTLION_WORKER_EXPLODE
 B AE_ANTLION_WORKER_EXPLODE_SCREAM
 B AE_ANTLION_WORKER_EXPLODE_WARN
 B AE_ANTLION_WORKER_SPIT
 B AE_BARNACLE_BITE
 B AE_BARNACLE_PUKEGIB
 B AE_BARNACLE_SPIT
 B AE_CITIZEN_GET_PACKAGE
 B AE_CITIZEN_HEAL
 B AE_COMPANION_LIGHT_FLARE
 B AE_COMPANION_PRODUCE_FLARE
 B AE_COMPANION_RELEASE_FLARE
 B AE_DOG_CATCH
 B AE_DOG_PICKUP
 B AE_DOG_PICKUP_NOEFFECT
 B AE_DOG_THROW
 B AE_FISHERMAN_HAT_DOWN
 B AE_FISHERMAN_HAT_OFF
 B AE_FISHERMAN_HAT_ON
 B AE_FISHERMAN_HAT_UP
 B AE_HEADCRAB_BURROW_IN
 B AE_HEADCRAB_BURROW_IN_FINISH
 B AE_HEADCRAB_BURROW_OUT
 B AE_HEADCRAB_CEILING_DETACH
 B AE_HEADCRAB_JUMPATTACK
 B AE_HEADCRAB_JUMP_TELEGRAPH
 B AE_METROPOLICE_BATON_OFF
 B AE_METROPOLICE_BATON_ON
 B AE_METROPOLICE_DEPLOY_MANHACK
 B AE_METROPOLICE_DRAW_PISTOL
 B AE_METROPOLICE_SHOVE
 B AE_METROPOLICE_START_DEPLOY
 B AE_POISONHEADCRAB_FLINCH_HOP
 B AE_POISONHEADCRAB_FOOTSTEP
 B AE_POISONHEADCRAB_THREAT_SOUND
 B AE_SCANNER_CLOSED
 B AE_VORTIGAUNT_ACCEL_DISPEL
 B AE_VORTIGAUNT_CLAW_LEFT
 B AE_VORTIGAUNT_CLAW_RIGHT
 B AE_VORTIGAUNT_DISPEL
 B AE_VORTIGAUNT_HEAL_PAUSE
 B AE_VORTIGAUNT_HEAL_STARTBEAMS
 B AE_VORTIGAUNT_HEAL_STARTGLOW
 B AE_VORTIGAUNT_HEAL_STARTSOUND
 B AE_VORTIGAUNT_SHOOT_SOUNDSTART
 B AE_VORTIGAUNT_START_DISPEL
 B AE_VORTIGAUNT_START_HEAL_GLOW
 B AE_VORTIGAUNT_START_HURT_GLOW
 B AE_VORTIGAUNT_STOP_HEAL_GLOW
 B AE_VORTIGAUNT_STOP_HURT_GLOW
 B AE_VORTIGAUNT_SWING_SOUND
 B AE_VORTIGAUNT_ZAP_DONE
 B AE_VORTIGAUNT_ZAP_POWERUP
 B AE_VORTIGAUNT_ZAP_SHOOT
 B AE_ZOMBIE_ALERTSOUND
 B AE_ZOMBIE_ATTACK_BOTH
 B AE_ZOMBIE_ATTACK_LEFT
 B AE_ZOMBIE_ATTACK_RIGHT
 B AE_ZOMBIE_ATTACK_SCREAM
 B AE_ZOMBIE_GET_UP
 B AE_ZOMBIE_POISON_PICKUP_CRAB
 B AE_ZOMBIE_POISON_SPIT
 B AE_ZOMBIE_POISON_THROW_CRAB
 B AE_ZOMBIE_POISON_THROW_SOUND
 B AE_ZOMBIE_POISON_THROW_WARN_SOUND
 B AE_ZOMBIE_POPHEADCRAB
 B AE_ZOMBIE_POUND
 B AE_ZOMBIE_SCUFF_LEFT
 B AE_ZOMBIE_SCUFF_RIGHT
 B AE_ZOMBIE_STARTSWAT
 B AE_ZOMBIE_STEP_LEFT
 B AE_ZOMBIE_STEP_RIGHT
 B AE_ZOMBIE_SWATITEM
 B AIExtendedSaveHeader_t_DataDescInit::g_DataMapHolder
 B AIN_NO_DEST
 B AIScheduleState_t_DataDescInit::g_DataMapHolder
 B AISquadEnemyInfo_t_DataDescInit::g_DataMapHolder
 B AI_EnemyInfo_t_DataDescInit::g_DataMapHolder
 B AI_FollowNavInfo_t_DataDescInit::g_DataMapHolder
 B AI_FollowParams_t_DataDescInit::g_DataMapHolder
 B AI_FreePassParams_t_DataDescInit::g_DataMapHolder
 B AI_LeadArgs_t_DataDescInit::g_DataMapHolder
 B AI_ResponseParams_DataDescInit::g_DataMapHolder
 B AI_Response_DataDescInit::g_DataMapHolder
 B AI_StandoffParams_t_DataDescInit::g_DataMapHolder
 B AI_Waypoint_t::s_Allocator
 B AI_Waypoint_t_DataDescInit::g_DataMapHolder
 B AR2Explosion_DataDescInit::g_DataMapHolder
 B AngryZombieCounter
 B CAISound_DataDescInit::g_DataMapHolder
 B CAI_AccelDecay_DataDescInit::g_DataMapHolder
 B CAI_ActBusyBehavior::gm_ClassScheduleIdSpace
 B CAI_ActBusyBehavior_DataDescInit::g_DataMapHolder
 B CAI_ActBusyGoal_DataDescInit::g_DataMapHolder
 B CAI_ActBusyQueueGoal_DataDescInit::g_DataMapHolder
 B CAI_AllyManager_DataDescInit::g_DataMapHolder
 B CAI_AllySpeechManager::gm_pSpeechManager
 B CAI_AllySpeechManager_DataDescInit::g_DataMapHolder
 B CAI_AssaultBehavior::gm_ClassScheduleIdSpace
 B CAI_AssaultBehavior_DataDescInit::g_DataMapHolder
 B CAI_AssaultGoal_DataDescInit::g_DataMapHolder
 B CAI_BaseActor_DataDescInit::g_DataMapHolder
 B CAI_BaseFlyingBot_DataDescInit::g_DataMapHolder
 B CAI_BaseNPC::gm_ClassScheduleIdSpace
 B CAI_BaseNPC::gm_SchedulingSymbols
 B CAI_BaseNPC::gm_SquadSlotIdSpace
 B CAI_BaseNPC::gm_SquadSlotNamespace
 B CAI_BaseNPC::gm_flTimeLastSpawn
 B CAI_BaseNPC::gm_iNextThinkRebalanceTick
 B CAI_BaseNPC::gm_iszPlayerSquad
 B CAI_BaseNPC::gm_nSpawnedThisFrame
 B CAI_BaseNPC::m_AnyUpdateEnemyPosTimer
 B CAI_BaseNPC::m_iNumActivities
 B CAI_BaseNPC::m_iNumEvents
 B CAI_BaseNPC::m_nDebugBits
 B CAI_BaseNPC::m_pActivitySR
 B CAI_BaseNPC::m_pDebugNPC
 B CAI_BaseNPC::m_pEventSR
 B CAI_BaseNPC_DataDescInit::g_DataMapHolder
 B CAI_BasePhysicsFlyingBot_DataDescInit::g_DataMapHolder
 B CAI_BattleLine_DataDescInit::g_DataMapHolder
 B CAI_BehaviorBase_DataDescInit::g_DataMapHolder
 B CAI_BlendedMotor_DataDescInit::g_DataMapHolder
 B CAI_ChangeHintGroup_DataDescInit::g_DataMapHolder
 B CAI_ChangeTarget_DataDescInit::g_DataMapHolder
 B CAI_DynamicLink::gm_bInitialized
 B CAI_DynamicLink::m_pAllDynamicLinks
 B CAI_DynamicLinkController_DataDescInit::g_DataMapHolder
 B CAI_DynamicLink_DataDescInit::g_DataMapHolder
 B CAI_Enemies_DataDescInit::g_DataMapHolder
 B CAI_Expresser_DataDescInit::g_DataMapHolder
 B CAI_FearBehavior::gm_ClassScheduleIdSpace
 B CAI_FearBehavior_DataDescInit::g_DataMapHolder
 B CAI_FollowBehavior::gm_ClassScheduleIdSpace
 B CAI_FollowBehavior_DataDescInit::g_DataMapHolder
 B CAI_FollowGoal_DataDescInit::g_DataMapHolder
 B CAI_FreePass_DataDescInit::g_DataMapHolder
 B CAI_FuncTankBehavior::gm_ClassScheduleIdSpace
 B CAI_FuncTankBehavior_DataDescInit::g_DataMapHolder
 B CAI_GoalEntity_DataDescInit::g_DataMapHolder
 B CAI_HintManager::gm_AllHints
 B CAI_HintManager::gm_TypedHints
 B CAI_HintManager::gm_nFoundHintIndex
 B CAI_HintManager::gm_pLastFoundHints
 B CAI_Hint_DataDescInit::g_DataMapHolder
 B CAI_HolsterBehavior::gm_ClassScheduleIdSpace
 B CAI_HolsterBehavior_DataDescInit::g_DataMapHolder
 B CAI_InterestTarget_t_DataDescInit::g_DataMapHolder
 B CAI_LeadBehavior::gm_ClassScheduleIdSpace
 B CAI_LeadBehavior_DataDescInit::g_DataMapHolder
 B CAI_LeadGoal_DataDescInit::g_DataMapHolder
 B CAI_LeadGoal_Weapon_DataDescInit::g_DataMapHolder
 B CAI_LocalNavigator_DataDescInit::g_DataMapHolder
 B CAI_LookTarget_DataDescInit::g_DataMapHolder
 B CAI_Motor_DataDescInit::g_DataMapHolder
 B CAI_MoveAndShootOverlay_DataDescInit::g_DataMapHolder
 B CAI_MoveMonitor_DataDescInit::g_DataMapHolder
 B CAI_MoveProbe_DataDescInit::g_DataMapHolder
 B CAI_Navigator_DataDescInit::g_DataMapHolder
 B CAI_NetworkEditTools::m_bAirEditMode
 B CAI_NetworkEditTools::m_bLinkEditMode
 B CAI_NetworkEditTools::m_iHullDrawNum
 B CAI_NetworkEditTools::m_pLastDeletedNode
 B CAI_NetworkManager::gm_fNetworksLoaded
 B CAI_NetworkManager_DataDescInit::g_DataMapHolder
 B CAI_Path::gm_InvalidWaypoint
 B CAI_Path_DataDescInit::g_DataMapHolder
 B CAI_Pathfinder_DataDescInit::g_DataMapHolder
 B CAI_PlayerAlly::gm_ClassScheduleIdSpace
 B CAI_PlayerAlly::gm_SquadSlotIdSpace
 B CAI_PlayerAlly_DataDescInit::g_DataMapHolder
 B CAI_PoliceGoal_DataDescInit::g_DataMapHolder
 B CAI_PolicingBehavior::gm_ClassScheduleIdSpace
 B CAI_PolicingBehavior_DataDescInit::g_DataMapHolder
 B CAI_ProxTester_DataDescInit::g_DataMapHolder
 B CAI_RadialLinkController_DataDescInit::g_DataMapHolder
 B CAI_RappelBehavior::gm_ClassScheduleIdSpace
 B CAI_RappelBehavior_DataDescInit::g_DataMapHolder
 B CAI_Relationship_DataDescInit::g_DataMapHolder
 B CAI_ScriptConditionsElement_DataDescInit::g_DataMapHolder
 B CAI_ScriptConditions_DataDescInit::g_DataMapHolder
 B CAI_ScriptedSchedule_DataDescInit::g_DataMapHolder
 B CAI_ScriptedSentence_DataDescInit::g_DataMapHolder
 B CAI_ScriptedSequence_DataDescInit::g_DataMapHolder
 B CAI_Senses_DataDescInit::g_DataMapHolder
 B CAI_SentenceBase_DataDescInit::g_DataMapHolder
 B CAI_ShotRegulator_DataDescInit::g_DataMapHolder
 B CAI_SpeechFilter_DataDescInit::g_DataMapHolder
 B CAI_Spotlight_DataDescInit::g_DataMapHolder
 B CAI_Squad_DataDescInit::g_DataMapHolder
 B CAI_StandoffBehavior::gm_ClassScheduleIdSpace
 B CAI_StandoffBehavior_DataDescInit::g_DataMapHolder
 B CAI_StandoffGoal_DataDescInit::g_DataMapHolder
 B CAI_TacticalServices_DataDescInit::g_DataMapHolder
 B CAI_TestHull::pTestHull
 B CAI_TrackPather_DataDescInit::g_DataMapHolder
 B CAPCController_DataDescInit::g_DataMapHolder
 B CAPCMissile_DataDescInit::g_DataMapHolder
 B CAlyxEmpEffect_DataDescInit::g_DataMapHolder
 B CAmbientGeneric_DataDescInit::g_DataMapHolder
 B CAnimationLayer_DataDescInit::g_DataMapHolder
 B CAntlionRepellant_DataDescInit::g_DataMapHolder
 B CAntlionTemplateMaker_DataDescInit::g_DataMapHolder
 B CAreaPortal_DataDescInit::g_DataMapHolder
 B CAssaultPoint_DataDescInit::g_DataMapHolder
 B CAvoidBox::s_AvoidBoxes
 B CAvoidBox_DataDescInit::g_DataMapHolder
 B CAvoidSphere::s_AvoidSpheres
 B CAvoidSphere_DataDescInit::g_DataMapHolder
 B CBGSDriver
 B CBarnacleTongueTip_DataDescInit::g_DataMapHolder
 B CBaseAchievementHelper::s_pFirst
 B CBaseAchievement_DataDescInit::g_DataMapHolder
 B CBaseAnimatingOverlay_DataDescInit::g_DataMapHolder
 B CBaseAnimating_DataDescInit::g_DataMapHolder
 B CBaseButton_DataDescInit::g_DataMapHolder
 B CBaseCombatCharacter::m_DefaultRelationship
 B CBaseCombatCharacter::m_lastInteraction
 B CBaseCombatCharacter_DataDescInit::g_DataMapHolder
 B CBaseCombatWeapon_DataDescInit::g_DataMapHolder
 B CBaseDMStart_DataDescInit::g_DataMapHolder
 B CBaseDoor_DataDescInit::g_DataMapHolder
 B CBaseEntity::m_bAllowPrecache
 B CBaseEntity::m_bDebugPause
 B CBaseEntity::m_bInDebugSelect
 B CBaseEntity::m_pPredictionPlayer
 B CBaseEntity::sm_bDisableTouchFuncs
 B CBaseEntityOutput_DataDescInit::g_DataMapHolder
 B CBaseEntity_DataDescInit::g_DataMapHolder
 B CBaseFilter_DataDescInit::g_DataMapHolder
 B CBaseFire_DataDescInit::g_DataMapHolder
 B CBaseFlex_DataDescInit::g_DataMapHolder
 B CBaseGrenadeConcussion::m_nTrailSprite
 B CBaseGrenadeConcussion_DataDescInit::g_DataMapHolder
 B CBaseGrenade_DataDescInit::g_DataMapHolder
 B CBaseHL2MPCombatWeapon_DataDescInit::g_DataMapHolder
 B CBaseHLCombatWeapon_DataDescInit::g_DataMapHolder
 B CBaseHeadcrab::gm_ClassScheduleIdSpace
 B CBaseHeadcrab::gm_SquadSlotIdSpace
 B CBaseHeadcrab_DataDescInit::g_DataMapHolder
 B CBaseHelicopter_DataDescInit::g_DataMapHolder
 B CBaseMoveBehavior_DataDescInit::g_DataMapHolder
 B CBaseNPCMaker_DataDescInit::g_DataMapHolder
 B CBasePlatTrain_DataDescInit::g_DataMapHolder
 B CBasePlayer::s_PlayerEdict
 B CBasePlayer_DataDescInit::g_DataMapHolder
 B CBasePropDoor_DataDescInit::g_DataMapHolder
 B CBaseServerVehicle_DataDescInit::g_DataMapHolder
 B CBaseSpriteProjectile_DataDescInit::g_DataMapHolder
 B CBaseTeamObjectiveResource_DataDescInit::g_DataMapHolder
 B CBaseTempEntity::s_pTempEntities
 B CBaseToggle_DataDescInit::g_DataMapHolder
 B CBaseTrigger_DataDescInit::g_DataMapHolder
 B CBaseVPhysicsTrigger_DataDescInit::g_DataMapHolder
 B CBaseViewModel_DataDescInit::g_DataMapHolder
 B CBeam_DataDescInit::g_DataMapHolder
 B CBlackHeadcrab::gm_ClassScheduleIdSpace
 B CBlackHeadcrab::gm_SquadSlotIdSpace
 B CBlackHeadcrab_DataDescInit::g_DataMapHolder
 B CBlendingCycler_DataDescInit::g_DataMapHolder
 B CBlood_DataDescInit::g_DataMapHolder
 B CBombDropSensor_DataDescInit::g_DataMapHolder
 B CBombSuppressor::s_BombSuppressors
 B CBombSuppressor_DataDescInit::g_DataMapHolder
 B CBoneFollowerManager_DataDescInit::g_DataMapHolder
 B CBoneFollower_DataDescInit::g_DataMapHolder
 B CBounceBomb::gm_iszFloorTurretClassname
 B CBounceBomb::gm_iszGroundTurretClassname
 B CBounceBomb_DataDescInit::g_DataMapHolder
 B CBreakableProp_DataDescInit::g_DataMapHolder
 B CBreakableSurface_DataDescInit::g_DataMapHolder
 B CBreakable_DataDescInit::g_DataMapHolder
 B CBubbling_DataDescInit::g_DataMapHolder
 B CBugBaitSensor_DataDescInit::g_DataMapHolder
 B CChangeLevel_DataDescInit::g_DataMapHolder
 B CChoreoScene::s_bEditingDisabled
 B CCitadelEnergyCore_DataDescInit::g_DataMapHolder
 B CCitizenResponseSystem_DataDescInit::g_DataMapHolder
 B CCollisionProperty_DataDescInit::g_DataMapHolder
 B CColorCorrectionVolume_DataDescInit::g_DataMapHolder
 B CColorCorrection_DataDescInit::g_DataMapHolder
 B CCombineDropshipContainer_DataDescInit::g_DataMapHolder
 B CCommandPoint::gm_nCommandPoints
 B CCommandPoint_DataDescInit::g_DataMapHolder
 B CCommentaryAuto_DataDescInit::g_DataMapHolder
 B CCommentarySystem_DataDescInit::g_DataMapHolder
 B CConcussiveBlast_DataDescInit::g_DataMapHolder
 B CConstantForceController_DataDescInit::g_DataMapHolder
 B CConstraintAnchor_DataDescInit::g_DataMapHolder
 B CCopyRecipientFilter_DataDescInit::g_DataMapHolder
 B CCraneTip_DataDescInit::g_DataMapHolder
 B CCredits_DataDescInit::g_DataMapHolder
 B CCrossbowBolt_DataDescInit::g_DataMapHolder
 B CCycler_DataDescInit::g_DataMapHolder
 B CDebugHistory_DataDescInit::g_DataMapHolder
 B CDecal_DataDescInit::g_DataMapHolder
 B CDmxAttribute::s_AttributeNameSymbols
 B CDmxElement::s_TypeSymbols
 B CDmxKeyValues2ErrorStack::m_ErrorSymbolTable
 B CDynamicLight_DataDescInit::g_DataMapHolder
 B CDynamicProp_DataDescInit::g_DataMapHolder
 B CEmbers_DataDescInit::g_DataMapHolder
 B CEntityClassList<CAPCMissile>::m_pClassList
 B CEntityClassList<CBugBaitSensor>::m_pClassList
 B CEntityClassList<CLaserDot>::m_pClassList
 B CEntityClassList<CPhysicsNPCSolver>::m_pClassList
 B CEntityClassList<CPointCamera>::m_pClassList
 B CEntityClassList<CSkyCamera>::m_pClassList
 B CEntityDissolve_DataDescInit::g_DataMapHolder
 B CEntityFlame_DataDescInit::g_DataMapHolder
 B CEntityParticleTrail_DataDescInit::g_DataMapHolder
 B CEnvAR2Explosion_DataDescInit::g_DataMapHolder
 B CEnvBeam_DataDescInit::g_DataMapHolder
 B CEnvBeverage_DataDescInit::g_DataMapHolder
 B CEnvDustPuff_DataDescInit::g_DataMapHolder
 B CEnvEffectsScript_DataDescInit::g_DataMapHolder
 B CEnvEntityMaker_DataDescInit::g_DataMapHolder
 B CEnvExplosion_DataDescInit::g_DataMapHolder
 B CEnvFade_DataDescInit::g_DataMapHolder
 B CEnvFireSensor_DataDescInit::g_DataMapHolder
 B CEnvFireSource_DataDescInit::g_DataMapHolder
 B CEnvFunnel_DataDescInit::g_DataMapHolder
 B CEnvGlobal_DataDescInit::g_DataMapHolder
 B CEnvGunfire_DataDescInit::g_DataMapHolder
 B CEnvHeadcrabCanisterShared_DataDescInit::g_DataMapHolder
 B CEnvHeadcrabCanister_DataDescInit::g_DataMapHolder
 B CEnvHudHint_DataDescInit::g_DataMapHolder
 B CEnvLaser_DataDescInit::g_DataMapHolder
 B CEnvMicrophone_DataDescInit::g_DataMapHolder
 B CEnvMuzzleFlash_DataDescInit::g_DataMapHolder
 B CEnvParticleScript_DataDescInit::g_DataMapHolder
 B CEnvPlayerSurfaceTrigger_DataDescInit::g_DataMapHolder
 B CEnvProjectedTexture_DataDescInit::g_DataMapHolder
 B CEnvQuadraticBeam_DataDescInit::g_DataMapHolder
 B CEnvScreenEffect_DataDescInit::g_DataMapHolder
 B CEnvScreenOverlay_DataDescInit::g_DataMapHolder
 B CEnvShake_DataDescInit::g_DataMapHolder
 B CEnvShooter_DataDescInit::g_DataMapHolder
 B CEnvSoundscapeProxy_DataDescInit::g_DataMapHolder
 B CEnvSoundscapeTriggerable_DataDescInit::g_DataMapHolder
 B CEnvSoundscape_DataDescInit::g_DataMapHolder
 B CEnvSpark_DataDescInit::g_DataMapHolder
 B CEnvSplash_DataDescInit::g_DataMapHolder
 B CEnvStarfield_DataDescInit::g_DataMapHolder
 B CEnvTonemapController_DataDescInit::g_DataMapHolder
 B CEnvTracer_DataDescInit::g_DataMapHolder
 B CEnvViewPunch_DataDescInit::g_DataMapHolder
 B CEnvWind_DataDescInit::g_DataMapHolder
 B CEnvZoom_DataDescInit::g_DataMapHolder
 B CEventAction::s_iNextIDStamp
 B CEventAction_DataDescInit::g_DataMapHolder
 B CEventQueue_DataDescInit::g_DataMapHolder
 B CFailableAchievement_DataDescInit::g_DataMapHolder
 B CFastHeadcrab::gm_ClassScheduleIdSpace
 B CFastHeadcrab::gm_SquadSlotIdSpace
 B CFastHeadcrab_DataDescInit::g_DataMapHolder
 B CFilterClass_DataDescInit::g_DataMapHolder
 B CFilterCombineBall_DataDescInit::g_DataMapHolder
 B CFilterEnemy_DataDescInit::g_DataMapHolder
 B CFilterMassGreater_DataDescInit::g_DataMapHolder
 B CFilterMultiple_DataDescInit::g_DataMapHolder
 B CFilterName_DataDescInit::g_DataMapHolder
 B CFireSmoke_DataDescInit::g_DataMapHolder
 B CFireTrail_DataDescInit::g_DataMapHolder
 B CFire_DataDescInit::g_DataMapHolder
 B CFishPool_DataDescInit::g_DataMapHolder
 B CFish_DataDescInit::g_DataMapHolder
 B CFlare::activeFlares
 B CFlare_DataDescInit::g_DataMapHolder
 B CFlexCycler_DataDescInit::g_DataMapHolder
 B CFlextalkActor_DataDescInit::g_DataMapHolder
 B CFogController_DataDescInit::g_DataMapHolder
 B CFourWheelServerVehicle_DataDescInit::g_DataMapHolder
 B CFourWheelVehiclePhysics_DataDescInit::g_DataMapHolder
 B CFuncAreaPortalBase_DataDescInit::g_DataMapHolder
 B CFuncAreaPortalWindow_DataDescInit::g_DataMapHolder
 B CFuncBrush_DataDescInit::g_DataMapHolder
 B CFuncCombineBallSpawner_DataDescInit::g_DataMapHolder
 B CFuncConveyor_DataDescInit::g_DataMapHolder
 B CFuncLadder::s_Ladders
 B CFuncLadder_DataDescInit::g_DataMapHolder
 B CFuncMonitor_DataDescInit::g_DataMapHolder
 B CFuncMoveLinear_DataDescInit::g_DataMapHolder
 B CFuncOccluder_DataDescInit::g_DataMapHolder
 B CFuncPlatRot_DataDescInit::g_DataMapHolder
 B CFuncPlat_DataDescInit::g_DataMapHolder
 B CFuncReflectiveGlass_DataDescInit::g_DataMapHolder
 B CFuncRotating_DataDescInit::g_DataMapHolder
 B CFuncSmokeVolume_DataDescInit::g_DataMapHolder
 B CFuncTankAPCRocket_DataDescInit::g_DataMapHolder
 B CFuncTankAirboatGun_DataDescInit::g_DataMapHolder
 B CFuncTankCombineCannon_DataDescInit::g_DataMapHolder
 B CFuncTankLaser_DataDescInit::g_DataMapHolder
 B CFuncTankMortar_DataDescInit::g_DataMapHolder
 B CFuncTankPhysCannister_DataDescInit::g_DataMapHolder
 B CFuncTankPulseLaser_DataDescInit::g_DataMapHolder
 B CFuncTankRocket_DataDescInit::g_DataMapHolder
 B CFuncTankTrain_DataDescInit::g_DataMapHolder
 B CFuncTank_DataDescInit::g_DataMapHolder
 B CFuncTrackAuto_DataDescInit::g_DataMapHolder
 B CFuncTrackChange_DataDescInit::g_DataMapHolder
 B CFuncTrackTrain_DataDescInit::g_DataMapHolder
 B CFuncTrainControls_DataDescInit::g_DataMapHolder
 B CFuncTrain_DataDescInit::g_DataMapHolder
 B CFuncVPhysicsClip_DataDescInit::g_DataMapHolder
 B CFuncVehicleClip_DataDescInit::g_DataMapHolder
 B CFuncWallToggle_DataDescInit::g_DataMapHolder
 B CFuncWall_DataDescInit::g_DataMapHolder
 B CFunc_Dust_DataDescInit::g_DataMapHolder
 B CFunc_LOD_DataDescInit::g_DataMapHolder
 B CGameEnd_DataDescInit::g_DataMapHolder
 B CGameGibManager_DataDescInit::g_DataMapHolder
 B CGamePlayerEquip_DataDescInit::g_DataMapHolder
 B CGamePlayerZone_DataDescInit::g_DataMapHolder
 B CGameRulesProxy::s_pGameRulesProxy
 B CGameRulesRegister::s_pHead
 B CGameScore_DataDescInit::g_DataMapHolder
 B CGameText_DataDescInit::g_DataMapHolder
 B CGameUI_DataDescInit::g_DataMapHolder
 B CGameWeaponManager_DataDescInit::g_DataMapHolder
 B CGenericActor_DataDescInit::g_DataMapHolder
 B CGibShooter_DataDescInit::g_DataMapHolder
 B CGib_DataDescInit::g_DataMapHolder
 B CGlobalState_DataDescInit::g_DataMapHolder
 B CGrenadeAR2_DataDescInit::g_DataMapHolder
 B CGrenadeBeamChaser_DataDescInit::g_DataMapHolder
 B CGrenadeBeam_DataDescInit::g_DataMapHolder
 B CGrenadeBugBait_DataDescInit::g_DataMapHolder
 B CGrenadeFrag_DataDescInit::g_DataMapHolder
 B CGrenadeHelicopter_DataDescInit::g_DataMapHolder
 B CGrenadeHomer_DataDescInit::g_DataMapHolder
 B CGrenadePathfollower_DataDescInit::g_DataMapHolder
 B CGunTarget_DataDescInit::g_DataMapHolder
 B CGunshipRagdollMotion_DataDescInit::g_DataMapHolder
 B CHL2MPMachineGun_DataDescInit::g_DataMapHolder
 B CHL2MP_Player_DataDescInit::g_DataMapHolder
 B CHL2PlayerLocalData_DataDescInit::g_DataMapHolder
 B CHL2_Player_DataDescInit::g_DataMapHolder
 B CHLMachineGun_DataDescInit::g_DataMapHolder
 B CHLSelectFireMachineGun_DataDescInit::g_DataMapHolder
 B CHelicopterChunk_DataDescInit::g_DataMapHolder
 B CInfoAPCMissileHint::s_APCMissileHints
 B CInfoAPCMissileHint_DataDescInit::g_DataMapHolder
 B CInfoCameraLink_DataDescInit::g_DataMapHolder
 B CInfoLightingRelative_DataDescInit::g_DataMapHolder
 B CInfoOverlayAccessor_DataDescInit::g_DataMapHolder
 B CInfoTeleporterCountdown_DataDescInit::g_DataMapHolder
 B CInstancedSceneEntity_DataDescInit::g_DataMapHolder
 B CItemSoda_DataDescInit::g_DataMapHolder
 B CItem_AmmoCrate_DataDescInit::g_DataMapHolder
 B CItem_DataDescInit::g_DataMapHolder
 B CItem_DynamicResupply_DataDescInit::g_DataMapHolder
 B CItem_ItemCrate_DataDescInit::g_DataMapHolder
 B CKeepUpright_DataDescInit::g_DataMapHolder
 B CLaserDot_DataDescInit::g_DataMapHolder
 B CLightGlow_DataDescInit::g_DataMapHolder
 B CLight_DataDescInit::g_DataMapHolder
 B CLogicActiveAutosave_DataDescInit::g_DataMapHolder
 B CLogicAuto_DataDescInit::g_DataMapHolder
 B CLogicAutosave_DataDescInit::g_DataMapHolder
 B CLogicBranchList_DataDescInit::g_DataMapHolder
 B CLogicBranch_DataDescInit::g_DataMapHolder
 B CLogicCase_DataDescInit::g_DataMapHolder
 B CLogicCollisionPair_DataDescInit::g_DataMapHolder
 B CLogicCompareInteger_DataDescInit::g_DataMapHolder
 B CLogicCompare_DataDescInit::g_DataMapHolder
 B CLogicLineToEntity_DataDescInit::g_DataMapHolder
 B CLogicMeasureMovement_DataDescInit::g_DataMapHolder
 B CLogicNavigation_DataDescInit::g_DataMapHolder
 B CLogicPlayerProxy_DataDescInit::g_DataMapHolder
 B CLogicRelay_DataDescInit::g_DataMapHolder
 B CLookDoorThinker_DataDescInit::g_DataMapHolder
 B CLookDoor_DataDescInit::g_DataMapHolder
 B CMaterialModifyControl_DataDescInit::g_DataMapHolder
 B CMathColorBlend_DataDescInit::g_DataMapHolder
 B CMathCounter_DataDescInit::g_DataMapHolder
 B CMathRemap_DataDescInit::g_DataMapHolder
 B CMessageEntity_DataDescInit::g_DataMapHolder
 B CMessage_DataDescInit::g_DataMapHolder
 B CMissile_DataDescInit::g_DataMapHolder
 B CMomentaryRotButton_DataDescInit::g_DataMapHolder
 B CMortarShell_DataDescInit::g_DataMapHolder
 B CMotorController_DataDescInit::g_DataMapHolder
 B CMovementSpeedMod_DataDescInit::g_DataMapHolder
 B CMultiDamage_DataDescInit::g_DataMapHolder
 B CMultiSource_DataDescInit::g_DataMapHolder
 B CMultiplayRules::m_MapList
 B CMultiplayRules::m_nMapCycleTimeStamp
 B CMultiplayRules::m_nMapCycleindex
 B CNPCMaker_DataDescInit::g_DataMapHolder
 B CNPCSimpleTalker::gm_ClassScheduleIdSpace
 B CNPCSimpleTalker::gm_SquadSlotIdSpace
 B CNPCSimpleTalkerExpresser_DataDescInit::g_DataMapHolder
 B CNPCSimpleTalker_DataDescInit::g_DataMapHolder
 B CNPCSpawnDestination_DataDescInit::g_DataMapHolder
 B CNPC_APCDriver::gm_ClassScheduleIdSpace
 B CNPC_APCDriver::gm_SquadSlotIdSpace
 B CNPC_APCDriver_DataDescInit::g_DataMapHolder
 B CNPC_Alyx::gm_ClassScheduleIdSpace
 B CNPC_Alyx::gm_SquadSlotIdSpace
 B CNPC_Alyx_DataDescInit::g_DataMapHolder
 B CNPC_Antlion::gm_ClassScheduleIdSpace
 B CNPC_Antlion::gm_SquadSlotIdSpace
 B CNPC_AntlionGuard::gm_ClassScheduleIdSpace
 B CNPC_AntlionGuard::gm_SquadSlotIdSpace
 B CNPC_AntlionGuard_DataDescInit::g_DataMapHolder
 B CNPC_Antlion_DataDescInit::g_DataMapHolder
 B CNPC_AttackHelicopter::gm_ClassScheduleIdSpace
 B CNPC_AttackHelicopter::gm_SquadSlotIdSpace
 B CNPC_AttackHelicopter_DataDescInit::g_DataMapHolder
 B CNPC_Barnacle::gm_ClassScheduleIdSpace
 B CNPC_Barnacle::gm_SquadSlotIdSpace
 B CNPC_Barnacle::m_svPlayerHeldTipOffset
 B CNPC_Barnacle_DataDescInit::g_DataMapHolder
 B CNPC_Barney::gm_ClassScheduleIdSpace
 B CNPC_Barney::gm_SquadSlotIdSpace
 B CNPC_Barney_DataDescInit::g_DataMapHolder
 B CNPC_BaseScanner::gm_ClassScheduleIdSpace
 B CNPC_BaseScanner::gm_SquadSlotIdSpace
 B CNPC_BaseScanner_DataDescInit::g_DataMapHolder
 B CNPC_BaseZombie::ACT_ZOM_FALL
 B CNPC_BaseZombie::ACT_ZOM_RELEASECRAB
 B CNPC_BaseZombie::ACT_ZOM_SWATLEFTLOW
 B CNPC_BaseZombie::ACT_ZOM_SWATLEFTMID
 B CNPC_BaseZombie::ACT_ZOM_SWATRIGHTLOW
 B CNPC_BaseZombie::ACT_ZOM_SWATRIGHTMID
 B CNPC_BaseZombie::g_numZombies
 B CNPC_BaseZombie::gm_ClassScheduleIdSpace
 B CNPC_BaseZombie::gm_SquadSlotIdSpace
 B CNPC_BaseZombie_DataDescInit::g_DataMapHolder
 B CNPC_Bullseye_DataDescInit::g_DataMapHolder
 B CNPC_CScanner::gm_ClassScheduleIdSpace
 B CNPC_CScanner::gm_SquadSlotIdSpace
 B CNPC_CScanner_DataDescInit::g_DataMapHolder
 B CNPC_CeilingTurret_DataDescInit::g_DataMapHolder
 B CNPC_Citizen::gm_ClassScheduleIdSpace
 B CNPC_Citizen::gm_PlayerSquadEvaluateTimer
 B CNPC_Citizen::gm_SquadSlotIdSpace
 B CNPC_Citizen_DataDescInit::g_DataMapHolder
 B CNPC_ClawScanner_DataDescInit::g_DataMapHolder
 B CNPC_Combine::gm_ClassScheduleIdSpace
 B CNPC_Combine::gm_SquadSlotIdSpace
 B CNPC_CombineCamera_DataDescInit::g_DataMapHolder
 B CNPC_CombineDropship::gm_ClassScheduleIdSpace
 B CNPC_CombineDropship::gm_SquadSlotIdSpace
 B CNPC_CombineDropship::m_poseBody_Accel
 B CNPC_CombineDropship::m_poseBody_Sway
 B CNPC_CombineDropship::m_poseCargo_Body_Accel
 B CNPC_CombineDropship::m_poseCargo_Body_Sway
 B CNPC_CombineDropship::m_poseWeapon_Pitch
 B CNPC_CombineDropship::m_poseWeapon_Yaw
 B CNPC_CombineDropship::m_sbStaticPoseParamsLoaded
 B CNPC_CombineDropship_DataDescInit::g_DataMapHolder
 B CNPC_CombineGunship::gm_ClassScheduleIdSpace
 B CNPC_CombineGunship::gm_SquadSlotIdSpace
 B CNPC_CombineGunship::m_poseFin_Accel
 B CNPC_CombineGunship::m_poseFin_Sway
 B CNPC_CombineGunship::m_poseFlex_Horz
 B CNPC_CombineGunship::m_poseFlex_Vert
 B CNPC_CombineGunship::m_posePitch
 B CNPC_CombineGunship::m_poseWeapon_Pitch
 B CNPC_CombineGunship::m_poseWeapon_Yaw
 B CNPC_CombineGunship::m_poseYaw
 B CNPC_CombineGunship::m_sbStaticPoseParamsLoaded
 B CNPC_CombineGunship_DataDescInit::g_DataMapHolder
 B CNPC_Combine_DataDescInit::g_DataMapHolder
 B CNPC_CraneDriver::gm_ClassScheduleIdSpace
 B CNPC_CraneDriver::gm_SquadSlotIdSpace
 B CNPC_CraneDriver_DataDescInit::g_DataMapHolder
 B CNPC_Crow::gm_ClassScheduleIdSpace
 B CNPC_Crow::gm_SquadSlotIdSpace
 B CNPC_Crow_DataDescInit::g_DataMapHolder
 B CNPC_Dog::gm_ClassScheduleIdSpace
 B CNPC_Dog::gm_SquadSlotIdSpace
 B CNPC_Dog_DataDescInit::g_DataMapHolder
 B CNPC_EnemyFinder::gm_ClassScheduleIdSpace
 B CNPC_EnemyFinder::gm_SquadSlotIdSpace
 B CNPC_EnemyFinderCombineCannon_DataDescInit::g_DataMapHolder
 B CNPC_EnemyFinder_DataDescInit::g_DataMapHolder
 B CNPC_Fisherman::gm_ClassScheduleIdSpace
 B CNPC_Fisherman::gm_SquadSlotIdSpace
 B CNPC_Fisherman_DataDescInit::g_DataMapHolder
 B CNPC_FloorTurret::gm_ClassScheduleIdSpace
 B CNPC_FloorTurret::gm_SquadSlotIdSpace
 B CNPC_FloorTurret_DataDescInit::g_DataMapHolder
 B CNPC_Furniture_DataDescInit::g_DataMapHolder
 B CNPC_GMan_DataDescInit::g_DataMapHolder
 B CNPC_GroundTurret::gm_ClassScheduleIdSpace
 B CNPC_GroundTurret::gm_SquadSlotIdSpace
 B CNPC_GroundTurret_DataDescInit::g_DataMapHolder
 B CNPC_Ichthyosaur::gm_ClassScheduleIdSpace
 B CNPC_Ichthyosaur::gm_SquadSlotIdSpace
 B CNPC_Ichthyosaur::m_vecAccelerationMax
 B CNPC_Ichthyosaur::m_vecAccelerationMin
 B CNPC_Ichthyosaur_DataDescInit::g_DataMapHolder
 B CNPC_Launcher_DataDescInit::g_DataMapHolder
 B CNPC_Manhack::gm_ClassScheduleIdSpace
 B CNPC_Manhack::gm_SquadSlotIdSpace
 B CNPC_Manhack_DataDescInit::g_DataMapHolder
 B CNPC_MetroPolice::gm_ClassScheduleIdSpace
 B CNPC_MetroPolice::gm_SquadSlotIdSpace
 B CNPC_MetroPolice::gm_flTimeLastSpokePeek
 B CNPC_MetroPolice_DataDescInit::g_DataMapHolder
 B CNPC_MissileDefense_DataDescInit::g_DataMapHolder
 B CNPC_Monk::gm_ClassScheduleIdSpace
 B CNPC_Monk::gm_SquadSlotIdSpace
 B CNPC_Monk_DataDescInit::g_DataMapHolder
 B CNPC_Mossman_DataDescInit::g_DataMapHolder
 B CNPC_PlayerCompanion::gm_ClassScheduleIdSpace
 B CNPC_PlayerCompanion::gm_SquadSlotIdSpace
 B CNPC_PlayerCompanion::gm_bFindingCoverFromAllEnemies
 B CNPC_PlayerCompanion::gm_fCoverSearchType
 B CNPC_PlayerCompanion::gm_iszFloorTurretClassname
 B CNPC_PlayerCompanion::gm_iszGroundTurretClassname
 B CNPC_PlayerCompanion::gm_iszMortarClassname
 B CNPC_PlayerCompanion::gm_iszRollerMineClassname
 B CNPC_PlayerCompanion::gm_iszShotgunClassname
 B CNPC_PlayerCompanion_DataDescInit::g_DataMapHolder
 B CNPC_PoisonZombie::gm_ClassScheduleIdSpace
 B CNPC_PoisonZombie::gm_SquadSlotIdSpace
 B CNPC_PoisonZombie_DataDescInit::g_DataMapHolder
 B CNPC_RollerMine::gm_ClassScheduleIdSpace
 B CNPC_RollerMine::gm_SquadSlotIdSpace
 B CNPC_RollerMine::gm_iszDropshipClassname
 B CNPC_RollerMine_DataDescInit::g_DataMapHolder
 B CNPC_Stalker::gm_ClassScheduleIdSpace
 B CNPC_Stalker::gm_SquadSlotIdSpace
 B CNPC_Stalker_DataDescInit::g_DataMapHolder
 B CNPC_Strider::gm_BodyHeightPoseParam
 B CNPC_Strider::gm_CannonAttachment
 B CNPC_Strider::gm_ClassScheduleIdSpace
 B CNPC_Strider::gm_PitchControl
 B CNPC_Strider::gm_SquadSlotIdSpace
 B CNPC_Strider::gm_YawControl
 B CNPC_Strider::gm_strideLength
 B CNPC_Strider::gm_vLocalRelativePositionCannon
 B CNPC_Strider::gm_vLocalRelativePositionMinigun
 B CNPC_Strider::gm_zCannonDist
 B CNPC_Strider::gm_zMinigunDist
 B CNPC_Strider::m_poseMiniGunPitch
 B CNPC_Strider::m_poseMiniGunYaw
 B CNPC_Strider::m_sbStaticPoseParamsLoaded
 B CNPC_Strider_DataDescInit::g_DataMapHolder
 B CNPC_VehicleDriver::gm_ClassScheduleIdSpace
 B CNPC_VehicleDriver::gm_SquadSlotIdSpace
 B CNPC_VehicleDriver_DataDescInit::g_DataMapHolder
 B CNPC_Vortigaunt::gm_ClassScheduleIdSpace
 B CNPC_Vortigaunt::gm_SquadSlotIdSpace
 B CNPC_Vortigaunt_DataDescInit::g_DataMapHolder
 B CNewNPC::gm_ClassScheduleIdSpace
 B CNewNPC::gm_SquadSlotIdSpace
 B CNewNPC_DataDescInit::g_DataMapHolder
 B CNewRecharge_DataDescInit::g_DataMapHolder
 B CNewWallHealth_DataDescInit::g_DataMapHolder
 B CNodeEnt::m_nNodeCount
 B CNodeEnt_DataDescInit::g_DataMapHolder
 B COMBINE_AE_ALTFIRE
 B COMBINE_AE_BEGIN_ALTFIRE
 B COrnamentProp_DataDescInit::g_DataMapHolder
 B CParticleFire_DataDescInit::g_DataMapHolder
 B CParticleLight_DataDescInit::g_DataMapHolder
 B CParticlePerformanceMonitor_DataDescInit::g_DataMapHolder
 B CParticleSystem_DataDescInit::g_DataMapHolder
 B CPassengerInfo_DataDescInit::g_DataMapHolder
 B CPathCorner_DataDescInit::g_DataMapHolder
 B CPathKeyFrame_DataDescInit::g_DataMapHolder
 B CPathTrack::s_bIsIterating
 B CPathTrack::s_nCurrIterVal
 B CPathTrack_DataDescInit::g_DataMapHolder
 B CPhysBoxMultiplayer_DataDescInit::g_DataMapHolder
 B CPhysBox_DataDescInit::g_DataMapHolder
 B CPhysConstraintSystem_DataDescInit::g_DataMapHolder
 B CPhysConstraint_DataDescInit::g_DataMapHolder
 B CPhysConvert_DataDescInit::g_DataMapHolder
 B CPhysExplosion_DataDescInit::g_DataMapHolder
 B CPhysForce_DataDescInit::g_DataMapHolder
 B CPhysHinge_DataDescInit::g_DataMapHolder
 B CPhysImpact_DataDescInit::g_DataMapHolder
 B CPhysLength_DataDescInit::g_DataMapHolder
 B CPhysMagnet_DataDescInit::g_DataMapHolder
 B CPhysMotor_DataDescInit::g_DataMapHolder
 B CPhysPulley_DataDescInit::g_DataMapHolder
 B CPhysSlideConstraint_DataDescInit::g_DataMapHolder
 B CPhysThruster_DataDescInit::g_DataMapHolder
 B CPhysTorque_DataDescInit::g_DataMapHolder
 B CPhysicsCannister_DataDescInit::g_DataMapHolder
 B CPhysicsEntitySolver_DataDescInit::g_DataMapHolder
 B CPhysicsNPCSolver_DataDescInit::g_DataMapHolder
 B CPhysicsPropMultiplayer_DataDescInit::g_DataMapHolder
 B CPhysicsPropRespawnable_DataDescInit::g_DataMapHolder
 B CPhysicsProp_DataDescInit::g_DataMapHolder
 B CPhysicsShake_DataDescInit::g_DataMapHolder
 B CPhysicsSpring_DataDescInit::g_DataMapHolder
 B CPhysicsWind_DataDescInit::g_DataMapHolder
 B CPhysicsWire_DataDescInit::g_DataMapHolder
 B CPlasma_DataDescInit::g_DataMapHolder
 B CPlayerLocalData_DataDescInit::g_DataMapHolder
 B CPlayerResource_DataDescInit::g_DataMapHolder
 B CPlayerState_DataDescInit::g_DataMapHolder
 B CPointAngleSensor_DataDescInit::g_DataMapHolder
 B CPointAngularVelocitySensor_DataDescInit::g_DataMapHolder
 B CPointBonusMapsAccessor_DataDescInit::g_DataMapHolder
 B CPointCamera_DataDescInit::g_DataMapHolder
 B CPointClientCommand_DataDescInit::g_DataMapHolder
 B CPointCombineBallLauncher_DataDescInit::g_DataMapHolder
 B CPointCommentaryNode_DataDescInit::g_DataMapHolder
 B CPointDevShotCamera_DataDescInit::g_DataMapHolder
 B CPointGamestatsCounter_DataDescInit::g_DataMapHolder
 B CPointHurt_DataDescInit::g_DataMapHolder
 B CPointPlayerMoveConstraint_DataDescInit::g_DataMapHolder
 B CPointProximitySensor_DataDescInit::g_DataMapHolder
 B CPointPush_DataDescInit::g_DataMapHolder
 B CPointServerCommand_DataDescInit::g_DataMapHolder
 B CPointSpotlight_DataDescInit::g_DataMapHolder
 B CPointTeleport_DataDescInit::g_DataMapHolder
 B CPointTemplate_DataDescInit::g_DataMapHolder
 B CPointVelocitySensor_DataDescInit::g_DataMapHolder
 B CPortalTouchScope::m_CallQueue
 B CPoseController_DataDescInit::g_DataMapHolder
 B CPrecipitation_DataDescInit::g_DataMapHolder
 B CProjectedDecal_DataDescInit::g_DataMapHolder
 B CPropAPC_DataDescInit::g_DataMapHolder
 B CPropAirboat_DataDescInit::g_DataMapHolder
 B CPropCombineBall_DataDescInit::g_DataMapHolder
 B CPropCrane_DataDescInit::g_DataMapHolder
 B CPropDoorRotating_DataDescInit::g_DataMapHolder
 B CPropThumper_DataDescInit::g_DataMapHolder
 B CPropVehicleDriveable_DataDescInit::g_DataMapHolder
 B CPropVehiclePrisonerPod_DataDescInit::g_DataMapHolder
 B CPropVehicleViewController_DataDescInit::g_DataMapHolder
 B CPropVehicle_DataDescInit::g_DataMapHolder
 B CProtoSniper::gm_ClassScheduleIdSpace
 B CProtoSniper::gm_SquadSlotIdSpace
 B CProtoSniper_DataDescInit::g_DataMapHolder
 B CPushBlockerEnum::s_nEnumCount
 B CRagdollBoogie_DataDescInit::g_DataMapHolder
 B CRagdollConstraint_DataDescInit::g_DataMapHolder
 B CRagdollMagnet_DataDescInit::g_DataMapHolder
 B CRagdollManager_DataDescInit::g_DataMapHolder
 B CRagdollPropAttached_DataDescInit::g_DataMapHolder
 B CRagdollProp_DataDescInit::g_DataMapHolder
 B CRallyPoint_DataDescInit::g_DataMapHolder
 B CRandSimTimer_DataDescInit::g_DataMapHolder
 B CRandStopwatch_DataDescInit::g_DataMapHolder
 B CRecharge_DataDescInit::g_DataMapHolder
 B CRevertSaved_DataDescInit::g_DataMapHolder
 B CRollerController_DataDescInit::g_DataMapHolder
 B CRopeAnchor_DataDescInit::g_DataMapHolder
 B CRopeKeyframe_DataDescInit::g_DataMapHolder
 B CRotDoor_DataDescInit::g_DataMapHolder
 B CRotorWashEmitter_DataDescInit::g_DataMapHolder
 B CRotorWashShooter_DataDescInit::g_DataMapHolder
 B CRuleEntity_DataDescInit::g_DataMapHolder
 B CRulePointEntity_DataDescInit::g_DataMapHolder
 B CSatchelCharge_DataDescInit::g_DataMapHolder
 B CSceneEntity::m_pcvSndMixahead
 B CSceneEntity_DataDescInit::g_DataMapHolder
 B CSceneListManager_DataDescInit::g_DataMapHolder
 B CSceneManager_DataDescInit::g_DataMapHolder
 B CScriptIntro_DataDescInit::g_DataMapHolder
 B CScriptedTarget_DataDescInit::g_DataMapHolder
 B CServerBenchmarkHook::s_pBenchmarkHook
 B CServerNetworkProperty_DataDescInit::g_DataMapHolder
 B CShadowControl_DataDescInit::g_DataMapHolder
 B CSimTimer_DataDescInit::g_DataMapHolder
 B CSimpleSimTimer_DataDescInit::g_DataMapHolder
 B CSkyCamera_DataDescInit::g_DataMapHolder
 B CSlideshowDisplay_DataDescInit::g_DataMapHolder
 B CSmokeStackLightInfo_DataDescInit::g_DataMapHolder
 B CSmokeStack_DataDescInit::g_DataMapHolder
 B CSniperBullet_DataDescInit::g_DataMapHolder
 B CSniperTarget_DataDescInit::g_DataMapHolder
 B CSoundEnt_DataDescInit::g_DataMapHolder
 B CSoundEnvelope_DataDescInit::g_DataMapHolder
 B CSoundPatch::g_SoundPatchCount
 B CSoundPatch::s_Allocator
 B CSoundPatch_DataDescInit::g_DataMapHolder
 B CSound_DataDescInit::g_DataMapHolder
 B CSparkTrail_DataDescInit::g_DataMapHolder
 B CSpeaker_DataDescInit::g_DataMapHolder
 B CSpotlightEnd_DataDescInit::g_DataMapHolder
 B CSpriteTrail_DataDescInit::g_DataMapHolder
 B CSprite_DataDescInit::g_DataMapHolder
 B CSteamJet_DataDescInit::g_DataMapHolder
 B CStopwatchBase_DataDescInit::g_DataMapHolder
 B CStopwatch_DataDescInit::g_DataMapHolder
 B CStressEntityReg::s_pHead
 B CStriderMinigun_DataDescInit::g_DataMapHolder
 B CStripWeapons_DataDescInit::g_DataMapHolder
 B CSun_DataDescInit::g_DataMapHolder
 B CTakeDamageInfo_DataDescInit::g_DataMapHolder
 B CTankTargetChange_DataDescInit::g_DataMapHolder
 B CTankTrainAI_DataDescInit::g_DataMapHolder
 B CTargetCDAudioRep_DataDescInit::g_DataMapHolder
 B CTargetChangeGravity_DataDescInit::g_DataMapHolder
 B CTargetGunshipCrash_DataDescInit::g_DataMapHolder
 B CTeamControlPointMaster_DataDescInit::g_DataMapHolder
 B CTeamControlPointRound_DataDescInit::g_DataMapHolder
 B CTeamControlPoint_DataDescInit::g_DataMapHolder
 B CTeamRoundTimer_DataDescInit::g_DataMapHolder
 B CTeamSpawnPoint_DataDescInit::g_DataMapHolder
 B CTeamTrainWatcher_DataDescInit::g_DataMapHolder
 B CTeamVehicleSpawnPoint_DataDescInit::g_DataMapHolder
 B CTeamplayRoundBasedRulesProxy_DataDescInit::g_DataMapHolder
 B CTemplateNPCMaker_DataDescInit::g_DataMapHolder
 B CTesla_DataDescInit::g_DataMapHolder
 B CTestTraceline_DataDescInit::g_DataMapHolder
 B CTextStatFile::s_pHead
 B CTextureToggle_DataDescInit::g_DataMapHolder
 B CThrustController_DataDescInit::g_DataMapHolder
 B CTimerEntity_DataDescInit::g_DataMapHolder
 B CTriggerApplyImpulse_DataDescInit::g_DataMapHolder
 B CTriggerAreaCapture_DataDescInit::g_DataMapHolder
 B CTriggerBrush_DataDescInit::g_DataMapHolder
 B CTriggerCamera_DataDescInit::g_DataMapHolder
 B CTriggerGravity_DataDescInit::g_DataMapHolder
 B CTriggerHurt_DataDescInit::g_DataMapHolder
 B CTriggerImpact_DataDescInit::g_DataMapHolder
 B CTriggerLook_DataDescInit::g_DataMapHolder
 B CTriggerMultiple_DataDescInit::g_DataMapHolder
 B CTriggerPhysicsTrap_DataDescInit::g_DataMapHolder
 B CTriggerPlayerMovement_DataDescInit::g_DataMapHolder
 B CTriggerProximity_DataDescInit::g_DataMapHolder
 B CTriggerPush_DataDescInit::g_DataMapHolder
 B CTriggerRemove_DataDescInit::g_DataMapHolder
 B CTriggerSave_DataDescInit::g_DataMapHolder
 B CTriggerSoundscape_DataDescInit::g_DataMapHolder
 B CTriggerTeleportRelative_DataDescInit::g_DataMapHolder
 B CTriggerTeleport_DataDescInit::g_DataMapHolder
 B CTriggerToggleSave_DataDescInit::g_DataMapHolder
 B CTriggerVPhysicsMotion_DataDescInit::g_DataMapHolder
 B CTriggerWateryDeath_DataDescInit::g_DataMapHolder
 B CTriggerWeaponDissolve_DataDescInit::g_DataMapHolder
 B CTriggerWeaponStrip_DataDescInit::g_DataMapHolder
 B CTriggerWind_DataDescInit::g_DataMapHolder
 B CTripmineGrenade_DataDescInit::g_DataMapHolder
 B CTurretTipController_DataDescInit::g_DataMapHolder
 B CUtlMemoryPool::g_ReportFunc
 B CUtlSymbol::s_pSymbolTable
 B CVGuiScreen_DataDescInit::g_DataMapHolder
 B CVortigauntChargeToken_DataDescInit::g_DataMapHolder
 B CVortigauntEffectDispel_DataDescInit::g_DataMapHolder
 B CVoteController_DataDescInit::g_DataMapHolder
 B CWC_UpdateIgnoreList_DataDescInit::g_DataMapHolder
 B CWallHealth_DataDescInit::g_DataMapHolder
 B CWaterBullet_DataDescInit::g_DataMapHolder
 B CWaterLODControl_DataDescInit::g_DataMapHolder
 B CWateryDeathLeech_DataDescInit::g_DataMapHolder
 B CWeaponAnnabelle_DataDescInit::g_DataMapHolder
 B CWeaponBugBait_DataDescInit::g_DataMapHolder
 B CWeaponCycler_DataDescInit::g_DataMapHolder
 B CWeaponHL2MPBase_DataDescInit::g_DataMapHolder
 B CWeapon_SLAM_DataDescInit::g_DataMapHolder
 B CWeightButton_DataDescInit::g_DataMapHolder
 B CWindowPane_DataDescInit::g_DataMapHolder
 B CWorldItem_DataDescInit::g_DataMapHolder
 B CWorld_DataDescInit::g_DataMapHolder
 B CWreckage_DataDescInit::g_DataMapHolder
 B CZombie::gm_ClassScheduleIdSpace
 B CZombie::gm_SquadSlotIdSpace
 B CZombie_DataDescInit::g_DataMapHolder
 B ConCommandBase::s_pAccessor
 B ConCommandBase::s_pConCommandBases
 B ConceptHistory_t_DataDescInit::g_DataMapHolder
 B DT_AI_BaseNPC::g_SendTable
 B DT_AI_BaseNPC::g_SendTableInit
 B DT_AR2Explosion::g_SendTable
 B DT_AR2Explosion::g_SendTableInit
 B DT_AlyxEmpEffect::g_SendTable
 B DT_AlyxEmpEffect::g_SendTableInit
 B DT_AnimTimeMustBeFirst::g_SendTable
 B DT_AnimTimeMustBeFirst::g_SendTableInit
 B DT_Animationlayer::g_SendTable
 B DT_Animationlayer::g_SendTableInit
 B DT_BCCLocalPlayerExclusive::g_SendTable
 B DT_BCCLocalPlayerExclusive::g_SendTableInit
 B DT_Barnacle::g_SendTable
 B DT_Barnacle::g_SendTableInit
 B DT_BaseAnimating::g_SendTable
 B DT_BaseAnimating::g_SendTableInit
 B DT_BaseAnimatingOverlay::g_SendTable
 B DT_BaseAnimatingOverlay::g_SendTableInit
 B DT_BaseBeam::g_SendTable
 B DT_BaseBeam::g_SendTableInit
 B DT_BaseCombatCharacter::g_SendTable
 B DT_BaseCombatCharacter::g_SendTableInit
 B DT_BaseCombatWeapon::g_SendTable
 B DT_BaseCombatWeapon::g_SendTableInit
 B DT_BaseDoor::g_SendTable
 B DT_BaseDoor::g_SendTableInit
 B DT_BaseEntity::g_SendTable
 B DT_BaseEntity::g_SendTableInit
 B DT_BaseFlex::g_SendTable
 B DT_BaseFlex::g_SendTableInit
 B DT_BaseGrenade::g_SendTable
 B DT_BaseGrenade::g_SendTableInit
 B DT_BaseHL2MPBludgeonWeapon::g_SendTable
 B DT_BaseHL2MPBludgeonWeapon::g_SendTableInit
 B DT_BaseHL2MPCombatWeapon::g_SendTable
 B DT_BaseHL2MPCombatWeapon::g_SendTableInit
 B DT_BaseHLBludgeonWeapon::g_SendTable
 B DT_BaseHLBludgeonWeapon::g_SendTableInit
 B DT_BaseHLCombatWeapon::g_SendTable
 B DT_BaseHLCombatWeapon::g_SendTableInit
 B DT_BaseHelicopter::g_SendTable
 B DT_BaseHelicopter::g_SendTableInit
 B DT_BaseParticleEntity::g_SendTable
 B DT_BaseParticleEntity::g_SendTableInit
 B DT_BasePlayer::g_SendTable
 B DT_BasePlayer::g_SendTableInit
 B DT_BaseProjectile::g_SendTable
 B DT_BaseProjectile::g_SendTableInit
 B DT_BasePropDoor::g_SendTable
 B DT_BasePropDoor::g_SendTableInit
 B DT_BaseTeamObjectiveResource::g_SendTable
 B DT_BaseTeamObjectiveResource::g_SendTableInit
 B DT_BaseTempEntity::g_SendTable
 B DT_BaseTempEntity::g_SendTableInit
 B DT_BaseViewModel::g_SendTable
 B DT_BaseViewModel::g_SendTableInit
 B DT_Beam::g_SendTable
 B DT_Beam::g_SendTableInit
 B DT_BeamPredictableId::g_SendTable
 B DT_BeamPredictableId::g_SendTableInit
 B DT_BoneFollower::g_SendTable
 B DT_BoneFollower::g_SendTableInit
 B DT_BreakableProp::g_SendTable
 B DT_BreakableProp::g_SendTableInit
 B DT_BreakableSurface::g_SendTable
 B DT_BreakableSurface::g_SendTableInit
 B DT_CFish::g_SendTable
 B DT_CFish::g_SendTableInit
 B DT_CitadelEnergyCore::g_SendTable
 B DT_CitadelEnergyCore::g_SendTableInit
 B DT_CollisionProperty::g_SendTable
 B DT_CollisionProperty::g_SendTableInit
 B DT_ColorCorrection::g_SendTable
 B DT_ColorCorrection::g_SendTableInit
 B DT_ColorCorrectionVolume::g_SendTable
 B DT_ColorCorrectionVolume::g_SendTableInit
 B DT_CombineGunship::g_SendTable
 B DT_CombineGunship::g_SendTableInit
 B DT_Corpse::g_SendTable
 B DT_Corpse::g_SendTableInit
 B DT_CrossbowBolt::g_SendTable
 B DT_CrossbowBolt::g_SendTableInit
 B DT_DetailController::g_SendTable
 B DT_DetailController::g_SendTableInit
 B DT_DustTrail::g_SendTable
 B DT_DustTrail::g_SendTableInit
 B DT_DynamicLight::g_SendTable
 B DT_DynamicLight::g_SendTableInit
 B DT_DynamicProp::g_SendTable
 B DT_DynamicProp::g_SendTableInit
 B DT_EffectData::g_SendTable
 B DT_EffectData::g_SendTableInit
 B DT_Embers::g_SendTable
 B DT_Embers::g_SendTableInit
 B DT_EntityDissolve::g_SendTable
 B DT_EntityDissolve::g_SendTableInit
 B DT_EntityFlame::g_SendTable
 B DT_EntityFlame::g_SendTableInit
 B DT_EntityParticleTrail::g_SendTable
 B DT_EntityParticleTrail::g_SendTableInit
 B DT_EntityParticleTrailInfo::g_SendTable
 B DT_EntityParticleTrailInfo::g_SendTableInit
 B DT_EnvHeadcrabCanister::g_SendTable
 B DT_EnvHeadcrabCanister::g_SendTableInit
 B DT_EnvHeadcrabCanisterShared::g_SendTable
 B DT_EnvHeadcrabCanisterShared::g_SendTableInit
 B DT_EnvParticleScript::g_SendTable
 B DT_EnvParticleScript::g_SendTableInit
 B DT_EnvProjectedTexture::g_SendTable
 B DT_EnvProjectedTexture::g_SendTableInit
 B DT_EnvScreenEffect::g_SendTable
 B DT_EnvScreenEffect::g_SendTableInit
 B DT_EnvScreenOverlay::g_SendTable
 B DT_EnvScreenOverlay::g_SendTableInit
 B DT_EnvStarfield::g_SendTable
 B DT_EnvStarfield::g_SendTableInit
 B DT_EnvTonemapController::g_SendTable
 B DT_EnvTonemapController::g_SendTableInit
 B DT_EnvWind::g_SendTable
 B DT_EnvWind::g_SendTableInit
 B DT_EnvWindShared::g_SendTable
 B DT_EnvWindShared::g_SendTableInit
 B DT_FireSmoke::g_SendTable
 B DT_FireSmoke::g_SendTableInit
 B DT_FireTrail::g_SendTable
 B DT_FireTrail::g_SendTableInit
 B DT_Flare::g_SendTable
 B DT_Flare::g_SendTableInit
 B DT_FogController::g_SendTable
 B DT_FogController::g_SendTableInit
 B DT_FuncAreaPortalWindow::g_SendTable
 B DT_FuncAreaPortalWindow::g_SendTableInit
 B DT_FuncConveyor::g_SendTable
 B DT_FuncConveyor::g_SendTableInit
 B DT_FuncLadder::g_SendTable
 B DT_FuncLadder::g_SendTableInit
 B DT_FuncMonitor::g_SendTable
 B DT_FuncMonitor::g_SendTableInit
 B DT_FuncOccluder::g_SendTable
 B DT_FuncOccluder::g_SendTableInit
 B DT_FuncReflectiveGlass::g_SendTable
 B DT_FuncReflectiveGlass::g_SendTableInit
 B DT_FuncRotating::g_SendTable
 B DT_FuncRotating::g_SendTableInit
 B DT_FuncSmokeVolume::g_SendTable
 B DT_FuncSmokeVolume::g_SendTableInit
 B DT_FuncTrackTrain::g_SendTable
 B DT_FuncTrackTrain::g_SendTableInit
 B DT_Func_Dust::g_SendTable
 B DT_Func_Dust::g_SendTableInit
 B DT_Func_LOD::g_SendTable
 B DT_Func_LOD::g_SendTableInit
 B DT_GameRulesProxy::g_SendTable
 B DT_GameRulesProxy::g_SendTableInit
 B DT_HL2GameRules::g_SendTable
 B DT_HL2GameRules::g_SendTableInit
 B DT_HL2Local::g_SendTable
 B DT_HL2Local::g_SendTableInit
 B DT_HL2MPGameRulesProxy::g_SendTable
 B DT_HL2MPGameRulesProxy::g_SendTableInit
 B DT_HL2MPMachineGun::g_SendTable
 B DT_HL2MPMachineGun::g_SendTableInit
 B DT_HL2MPRagdoll::g_SendTable
 B DT_HL2MPRagdoll::g_SendTableInit
 B DT_HL2MPRules::g_SendTable
 B DT_HL2MPRules::g_SendTableInit
 B DT_HL2MP_Player::g_SendTable
 B DT_HL2MP_Player::g_SendTableInit
 B DT_HL2_Player::g_SendTable
 B DT_HL2_Player::g_SendTableInit
 B DT_HLMachineGun::g_SendTable
 B DT_HLMachineGun::g_SendTableInit
 B DT_HLSelectFireMachineGun::g_SendTable
 B DT_HLSelectFireMachineGun::g_SendTableInit
 B DT_HalfLife2Proxy::g_SendTable
 B DT_HalfLife2Proxy::g_SendTableInit
 B DT_HandleTest::g_SendTable
 B DT_HandleTest::g_SendTableInit
 B DT_InfoLadderDismount::g_SendTable
 B DT_InfoLadderDismount::g_SendTableInit
 B DT_InfoLightingRelative::g_SendTable
 B DT_InfoLightingRelative::g_SendTableInit
 B DT_InfoOverlayAccessor::g_SendTable
 B DT_InfoOverlayAccessor::g_SendTableInit
 B DT_InfoTeleporterCountdown::g_SendTable
 B DT_InfoTeleporterCountdown::g_SendTableInit
 B DT_LaserDot::g_SendTable
 B DT_LaserDot::g_SendTableInit
 B DT_LightGlow::g_SendTable
 B DT_LightGlow::g_SendTableInit
 B DT_Local::g_SendTable
 B DT_Local::g_SendTableInit
 B DT_LocalActiveWeaponData::g_SendTable
 B DT_LocalActiveWeaponData::g_SendTableInit
 B DT_LocalPlayerExclusive::g_SendTable
 B DT_LocalPlayerExclusive::g_SendTableInit
 B DT_LocalWeaponData::g_SendTable
 B DT_LocalWeaponData::g_SendTableInit
 B DT_MaterialModifyControl::g_SendTable
 B DT_MaterialModifyControl::g_SendTableInit
 B DT_MortarShell::g_SendTable
 B DT_MortarShell::g_SendTableInit
 B DT_MovieExplosion::g_SendTable
 B DT_MovieExplosion::g_SendTableInit
 B DT_NPC_AntlionGuard::g_SendTable
 B DT_NPC_AntlionGuard::g_SendTableInit
 B DT_NPC_Barney::g_SendTable
 B DT_NPC_Barney::g_SendTableInit
 B DT_NPC_Manhack::g_SendTable
 B DT_NPC_Manhack::g_SendTableInit
 B DT_NPC_Strider::g_SendTable
 B DT_NPC_Strider::g_SendTableInit
 B DT_NPC_Vortigaunt::g_SendTable
 B DT_NPC_Vortigaunt::g_SendTableInit
 B DT_OverlayVars::g_SendTable
 B DT_OverlayVars::g_SendTableInit
 B DT_ParticleFire::g_SendTable
 B DT_ParticleFire::g_SendTableInit
 B DT_ParticlePerformanceMonitor::g_SendTable
 B DT_ParticlePerformanceMonitor::g_SendTableInit
 B DT_ParticleSmokeGrenade::g_SendTable
 B DT_ParticleSmokeGrenade::g_SendTableInit
 B DT_ParticleSystem::g_SendTable
 B DT_ParticleSystem::g_SendTableInit
 B DT_PhysBox::g_SendTable
 B DT_PhysBox::g_SendTableInit
 B DT_PhysBoxMultiplayer::g_SendTable
 B DT_PhysBoxMultiplayer::g_SendTableInit
 B DT_PhysMagnet::g_SendTable
 B DT_PhysMagnet::g_SendTableInit
 B DT_PhysicsProp::g_SendTable
 B DT_PhysicsProp::g_SendTableInit
 B DT_PhysicsPropMultiplayer::g_SendTable
 B DT_PhysicsPropMultiplayer::g_SendTableInit
 B DT_Plasma::g_SendTable
 B DT_Plasma::g_SendTableInit
 B DT_PlayerResource::g_SendTable
 B DT_PlayerResource::g_SendTableInit
 B DT_PlayerState::g_SendTable
 B DT_PlayerState::g_SendTableInit
 B DT_PointCamera::g_SendTable
 B DT_PointCamera::g_SendTableInit
 B DT_PointCommentaryNode::g_SendTable
 B DT_PointCommentaryNode::g_SendTableInit
 B DT_PoseController::g_SendTable
 B DT_PoseController::g_SendTableInit
 B DT_Precipitation::g_SendTable
 B DT_Precipitation::g_SendTableInit
 B DT_PredictableId::g_SendTable
 B DT_PredictableId::g_SendTableInit
 B DT_PredictedViewModel::g_SendTable
 B DT_PredictedViewModel::g_SendTableInit
 B DT_PropAirboat::g_SendTable
 B DT_PropAirboat::g_SendTableInit
 B DT_PropCombineBall::g_SendTable
 B DT_PropCombineBall::g_SendTableInit
 B DT_PropCrane::g_SendTable
 B DT_PropCrane::g_SendTableInit
 B DT_PropVehicleDriveable::g_SendTable
 B DT_PropVehicleDriveable::g_SendTableInit
 B DT_PropVehiclePrisonerPod::g_SendTable
 B DT_PropVehiclePrisonerPod::g_SendTableInit
 B DT_ProxyToggle::g_SendTable
 B DT_ProxyToggle::g_SendTableInit
 B DT_ProxyToggle_ProxiedData::g_SendTable
 B DT_ProxyToggle_ProxiedData::g_SendTableInit
 B DT_QuadraticBeam::g_SendTable
 B DT_QuadraticBeam::g_SendTableInit
 B DT_Ragdoll::g_SendTable
 B DT_Ragdoll::g_SendTableInit
 B DT_RagdollManager::g_SendTable
 B DT_RagdollManager::g_SendTableInit
 B DT_Ragdoll_Attached::g_SendTable
 B DT_Ragdoll_Attached::g_SendTableInit
 B DT_RocketTrail::g_SendTable
 B DT_RocketTrail::g_SendTableInit
 B DT_RollerMine::g_SendTable
 B DT_RollerMine::g_SendTableInit
 B DT_RopeKeyframe::g_SendTable
 B DT_RopeKeyframe::g_SendTableInit
 B DT_RotorWashEmitter::g_SendTable
 B DT_RotorWashEmitter::g_SendTableInit
 B DT_SceneEntity::g_SendTable
 B DT_SceneEntity::g_SendTableInit
 B DT_ScriptIntro::g_SendTable
 B DT_ScriptIntro::g_SendTableInit
 B DT_ServerAnimationData::g_SendTable
 B DT_ServerAnimationData::g_SendTableInit
 B DT_ShadowControl::g_SendTable
 B DT_ShadowControl::g_SendTableInit
 B DT_SlideshowDisplay::g_SendTable
 B DT_SlideshowDisplay::g_SendTableInit
 B DT_SmokeStack::g_SendTable
 B DT_SmokeStack::g_SendTableInit
 B DT_SmokeTrail::g_SendTable
 B DT_SmokeTrail::g_SendTableInit
 B DT_SporeExplosion::g_SendTable
 B DT_SporeExplosion::g_SendTableInit
 B DT_SporeTrail::g_SendTable
 B DT_SporeTrail::g_SendTableInit
 B DT_SpotlightEnd::g_SendTable
 B DT_SpotlightEnd::g_SendTableInit
 B DT_Sprite::g_SendTable
 B DT_Sprite::g_SendTableInit
 B DT_SpriteOriented::g_SendTable
 B DT_SpriteOriented::g_SendTableInit
 B DT_SpriteTrail::g_SendTable
 B DT_SpriteTrail::g_SendTableInit
 B DT_SteamJet::g_SendTable
 B DT_SteamJet::g_SendTableInit
 B DT_Sun::g_SendTable
 B DT_Sun::g_SendTableInit
 B DT_TEAntlionDust::g_SendTable
 B DT_TEAntlionDust::g_SendTableInit
 B DT_TEArmorRicochet::g_SendTable
 B DT_TEArmorRicochet::g_SendTableInit
 B DT_TEBSPDecal::g_SendTable
 B DT_TEBSPDecal::g_SendTableInit
 B DT_TEBeamEntPoint::g_SendTable
 B DT_TEBeamEntPoint::g_SendTableInit
 B DT_TEBeamEnts::g_SendTable
 B DT_TEBeamEnts::g_SendTableInit
 B DT_TEBeamFollow::g_SendTable
 B DT_TEBeamFollow::g_SendTableInit
 B DT_TEBeamLaser::g_SendTable
 B DT_TEBeamLaser::g_SendTableInit
 B DT_TEBeamPoints::g_SendTable
 B DT_TEBeamPoints::g_SendTableInit
 B DT_TEBeamRing::g_SendTable
 B DT_TEBeamRing::g_SendTableInit
 B DT_TEBeamRingPoint::g_SendTable
 B DT_TEBeamRingPoint::g_SendTableInit
 B DT_TEBeamSpline::g_SendTable
 B DT_TEBeamSpline::g_SendTableInit
 B DT_TEBloodSprite::g_SendTable
 B DT_TEBloodSprite::g_SendTableInit
 B DT_TEBloodStream::g_SendTable
 B DT_TEBloodStream::g_SendTableInit
 B DT_TEBreakModel::g_SendTable
 B DT_TEBreakModel::g_SendTableInit
 B DT_TEBubbleTrail::g_SendTable
 B DT_TEBubbleTrail::g_SendTableInit
 B DT_TEBubbles::g_SendTable
 B DT_TEBubbles::g_SendTableInit
 B DT_TEClientProjectile::g_SendTable
 B DT_TEClientProjectile::g_SendTableInit
 B DT_TEConcussiveExplosion::g_SendTable
 B DT_TEConcussiveExplosion::g_SendTableInit
 B DT_TEDecal::g_SendTable
 B DT_TEDecal::g_SendTableInit
 B DT_TEDust::g_SendTable
 B DT_TEDust::g_SendTableInit
 B DT_TEDynamicLight::g_SendTable
 B DT_TEDynamicLight::g_SendTableInit
 B DT_TEEffectDispatch::g_SendTable
 B DT_TEEffectDispatch::g_SendTableInit
 B DT_TEEnergySplash::g_SendTable
 B DT_TEEnergySplash::g_SendTableInit
 B DT_TEExplosion::g_SendTable
 B DT_TEExplosion::g_SendTableInit
 B DT_TEFizz::g_SendTable
 B DT_TEFizz::g_SendTableInit
 B DT_TEFootprintDecal::g_SendTable
 B DT_TEFootprintDecal::g_SendTableInit
 B DT_TEGaussExplosion::g_SendTable
 B DT_TEGaussExplosion::g_SendTableInit
 B DT_TEGlowSprite::g_SendTable
 B DT_TEGlowSprite::g_SendTableInit
 B DT_TEHL2MPFireBullets::g_SendTable
 B DT_TEHL2MPFireBullets::g_SendTableInit
 B DT_TEImpact::g_SendTable
 B DT_TEImpact::g_SendTableInit
 B DT_TEKillPlayerAttachments::g_SendTable
 B DT_TEKillPlayerAttachments::g_SendTableInit
 B DT_TELargeFunnel::g_SendTable
 B DT_TELargeFunnel::g_SendTableInit
 B DT_TEMetalSparks::g_SendTable
 B DT_TEMetalSparks::g_SendTableInit
 B DT_TEMuzzleFlash::g_SendTable
 B DT_TEMuzzleFlash::g_SendTableInit
 B DT_TEParticleSystem::g_SendTable
 B DT_TEParticleSystem::g_SendTableInit
 B DT_TEPhysicsProp::g_SendTable
 B DT_TEPhysicsProp::g_SendTableInit
 B DT_TEPlayerDecal::g_SendTable
 B DT_TEPlayerDecal::g_SendTableInit
 B DT_TEProjectedDecal::g_SendTable
 B DT_TEProjectedDecal::g_SendTableInit
 B DT_TEShatterSurface::g_SendTable
 B DT_TEShatterSurface::g_SendTableInit
 B DT_TEShowLine::g_SendTable
 B DT_TEShowLine::g_SendTableInit
 B DT_TESmoke::g_SendTable
 B DT_TESmoke::g_SendTableInit
 B DT_TESparks::g_SendTable
 B DT_TESparks::g_SendTableInit
 B DT_TESprite::g_SendTable
 B DT_TESprite::g_SendTableInit
 B DT_TESpriteSpray::g_SendTable
 B DT_TESpriteSpray::g_SendTableInit
 B DT_TEWorldDecal::g_SendTable
 B DT_TEWorldDecal::g_SendTableInit
 B DT_Team::g_SendTable
 B DT_Team::g_SendTableInit
 B DT_TeamRoundTimer::g_SendTable
 B DT_TeamRoundTimer::g_SendTableInit
 B DT_TeamTrainWatcher::g_SendTable
 B DT_TeamTrainWatcher::g_SendTableInit
 B DT_TeamplayRoundBasedRules::g_SendTable
 B DT_TeamplayRoundBasedRules::g_SendTableInit
 B DT_TeamplayRoundBasedRulesProxy::g_SendTable
 B DT_TeamplayRoundBasedRulesProxy::g_SendTableInit
 B DT_Tesla::g_SendTable
 B DT_Tesla::g_SendTableInit
 B DT_TestTraceline::g_SendTable
 B DT_TestTraceline::g_SendTableInit
 B DT_VGuiScreen::g_SendTable
 B DT_VGuiScreen::g_SendTableInit
 B DT_VortigauntChargeToken::g_SendTable
 B DT_VortigauntChargeToken::g_SendTableInit
 B DT_VortigauntEffectDispel::g_SendTable
 B DT_VortigauntEffectDispel::g_SendTableInit
 B DT_VoteController::g_SendTable
 B DT_VoteController::g_SendTableInit
 B DT_WORLD::g_SendTable
 B DT_WORLD::g_SendTableInit
 B DT_WaterBullet::g_SendTable
 B DT_WaterBullet::g_SendTableInit
 B DT_WaterLODControl::g_SendTable
 B DT_WaterLODControl::g_SendTableInit
 B DT_Weapon357::g_SendTable
 B DT_Weapon357::g_SendTableInit
 B DT_WeaponAR2::g_SendTable
 B DT_WeaponAR2::g_SendTableInit
 B DT_WeaponAnnabelle::g_SendTable
 B DT_WeaponAnnabelle::g_SendTableInit
 B DT_WeaponBugBait::g_SendTable
 B DT_WeaponBugBait::g_SendTableInit
 B DT_WeaponCrossbow::g_SendTable
 B DT_WeaponCrossbow::g_SendTableInit
 B DT_WeaponCrowbar::g_SendTable
 B DT_WeaponCrowbar::g_SendTableInit
 B DT_WeaponCubemap::g_SendTable
 B DT_WeaponCubemap::g_SendTableInit
 B DT_WeaponCycler::g_SendTable
 B DT_WeaponCycler::g_SendTableInit
 B DT_WeaponFrag::g_SendTable
 B DT_WeaponFrag::g_SendTableInit
 B DT_WeaponHL2MPBase::g_SendTable
 B DT_WeaponHL2MPBase::g_SendTableInit
 B DT_WeaponPhysCannon::g_SendTable
 B DT_WeaponPhysCannon::g_SendTableInit
 B DT_WeaponPistol::g_SendTable
 B DT_WeaponPistol::g_SendTableInit
 B DT_WeaponRPG::g_SendTable
 B DT_WeaponRPG::g_SendTableInit
 B DT_WeaponSMG1::g_SendTable
 B DT_WeaponSMG1::g_SendTableInit
 B DT_WeaponShotgun::g_SendTable
 B DT_WeaponShotgun::g_SendTableInit
 B DT_WeaponStunStick::g_SendTable
 B DT_WeaponStunStick::g_SendTableInit
 B DT_Weapon_SLAM::g_SendTable
 B DT_Weapon_SLAM::g_SendTableInit
 B DevShotSystem
 B DmxElementUnpackStructure_t* DmxElementUnpackInit<CParticleSystemDefinition>(CParticleSystemDefinition*)::unpack
 B DmxElementUnpackStructure_t* DmxElementUnpackInit<ParticleChildrenInfo_t>(ParticleChildrenInfo_t*)::unpack
 B DrawBattleLines
 B DustTrail_DataDescInit::g_DataMapHolder
 B EntityParticleTrailInfo_t_DataDescInit::g_DataMapHolder
 B EventQueuePrioritizedEvent_t::s_Allocator
 B EventQueuePrioritizedEvent_t_DataDescInit::g_DataMapHolder
 B FilterDamageType_DataDescInit::g_DataMapHolder
 B FilterTeam_DataDescInit::g_DataMapHolder
 B HintNodeData_DataDescInit::g_DataMapHolder
 B Human_Hull
 B IBaseProjectileAutoList::m_IBaseProjectileAutoListAutoList
 B IMoveHelper::sm_pSingleton
 B IPhysicsPropAutoList::m_IPhysicsPropAutoListAutoList
 B IPredictionSystem::g_pPredictionSystems
 B ITFTeamTrainWatcher::m_ITFTeamTrainWatcherAutoList
 B ITriggerAreaCaptureAutoList::m_ITriggerAreaCaptureAutoListAutoList
 B ITriggerHurtAutoList::m_ITriggerHurtAutoListAutoList
 B InterfaceReg::s_pInterfaceRegs
 B LadderMove_t_DataDescInit::g_DataMapHolder
 B Large_Centered_Hull
 B Large_Hull
 B ListIssues
 B Medium_Hull
 B Medium_Tall_Hull
 B ParticleSmokeGrenade_DataDescInit::g_DataMapHolder
 B PhysBlockHeader_t_DataDescInit::g_DataMapHolder
 B PhysObjectHeader_t_DataDescInit::g_DataMapHolder
 B Relationship_t_DataDescInit::g_DataMapHolder
 B ResponseContext_t_DataDescInit::g_DataMapHolder
 B ResponseGroup_DataDescInit::g_DataMapHolder
 B Response_DataDescInit::g_DataMapHolder
 B RocketTrail_DataDescInit::g_DataMapHolder
 B SaveRestoreBlockHeader_t_DataDescInit::g_DataMapHolder
 B ScriptedNPCInteraction_Phases_t_DataDescInit::g_DataMapHolder
 B ScriptedNPCInteraction_t_DataDescInit::g_DataMapHolder
 B SinCosTable
 B Small_Centered_Hull
 B SmokeTrail_DataDescInit::g_DataMapHolder
 B SoundCommand_t::s_Allocator
 B SoundCommand_t_DataDescInit::g_DataMapHolder
 B SporeExplosion_DataDescInit::g_DataMapHolder
 B SporeTrail_DataDescInit::g_DataMapHolder
 B SuitDeviceBreather
 B SuitDeviceFlashlight
 B SuitDeviceSprint
 B TemplateEntityData_t_DataDescInit::g_DataMapHolder
 B Test_EHandle
 B Tiny_Centered_Hull
 B Tiny_Hull
 B UnreachableEnt_t_DataDescInit::g_DataMapHolder
 B ViewSmoothingData_t_DataDescInit::g_DataMapHolder
 B VoteControllerSystem
 B Wide_Human_Hull
 B Wide_Short_Hull
 B ai_LOS_mode
 B ai_actbusy_search_time
 B ai_ally_manager_debug
 B ai_auto_contact_solver
 B ai_block_damage
 B ai_citizen_debug_commander
 B ai_debug_actbusy
 B ai_debug_assault
 B ai_debug_avoidancebounds
 B ai_debug_directnavprobe
 B ai_debug_doors
 B ai_debug_dyninteractions
 B ai_debug_efficiency
 B ai_debug_enemies
 B ai_debug_enemyfinders
 B ai_debug_expressions
 B ai_debug_follow
 B ai_debug_loners
 B ai_debug_looktargets
 B ai_debug_los
 B ai_debug_nav
 B ai_debug_ragdoll_magnets
 B ai_debug_readiness
 B ai_debug_shoot_positions
 B ai_debug_speech
 B ai_debug_squads
 B ai_debug_think_ticks
 B ai_default_efficient
 B ai_drop_hint
 B ai_ef_hate_npc_duration
 B ai_ef_hate_npc_frequency
 B ai_efficiency_override
 B ai_enable_fear_behavior
 B ai_expression_frametime
 B ai_expression_optimization
 B ai_fear_player_dist
 B ai_find_lateral_cover
 B ai_find_lateral_los
 B ai_follow_move_commands
 B ai_follow_use_points
 B ai_follow_use_points_when_moving
 B ai_force_serverside_ragdoll
 B ai_frametime_limit
 B ai_inhibit_spawners
 B ai_lead_time
 B ai_moveprobe_debug
 B ai_moveprobe_jump_debug
 B ai_moveprobe_usetracelist
 B ai_navigator_generate_spikes
 B ai_navigator_generate_spikes_strength
 B ai_new_aiming
 B ai_newgroundturret
 B ai_no_local_paths
 B ai_no_node_cache
 B ai_no_select_box
 B ai_no_steer
 B ai_no_talk_delay
 B ai_path_adjust_speed_on_immediate_turns
 B ai_path_insert_pause_at_est_end
 B ai_path_insert_pause_at_obstruction
 B ai_post_frame_navigation
 B ai_radial_max_link_dist
 B ai_reaction_delay_alert
 B ai_reaction_delay_idle
 B ai_readiness_decay
 B ai_rebalance_thinks
 B ai_report_task_timings_on_limit
 B ai_sequence_debug
 B ai_setupbones_debug
 B ai_shot_bias
 B ai_shot_bias_max
 B ai_shot_bias_min
 B ai_shot_stats
 B ai_shot_stats_term
 B ai_show_hull_attacks
 B ai_show_think_tolerance
 B ai_simulate_task_overtime
 B ai_spread_cone_focus_time
 B ai_spread_defocused_cone_multiplier
 B ai_spread_pattern_focus_time
 B ai_strong_optimizations
 B ai_strong_optimizations_no_checkstand
 B ai_task_pre_script
 B ai_test_moveprobe_ignoresmall
 B ai_think_limit_label
 B ai_use_clipped_paths
 B ai_use_efficiency
 B ai_use_frame_think_limits
 B ai_use_readiness
 B ai_use_think_optimizations
 B ai_use_visibility_cache
 B ai_vehicle_avoidance
 B aimcrosshair
 B allowNPCs
 B antlion_easycrush
 B audioparams_t_DataDescInit::g_DataMapHolder
 B autoaim_max_deflect
 B autoaim_max_dist
 B autoaim_unlock_target
 B breakable_disable_gib_limit
 B breakable_multiplayer
 B bugbait_distract_time
 B bugbait_grenade_radius
 B bugbait_hear_radius
 B bugbait_radius
 B bulletSpeed
 B cc_Test_CreateEntity
 B cc_Test_InitRandomEntitySpawner
 B cc_Test_ProxyToggle_EnableProxy
 B cc_Test_ProxyToggle_SetValue
 B cc_Test_RandomPlayerPosition
 B cc_Test_RandomizeInPVS
 B cc_Test_RemoveAllRandomEntities
 B cc_Test_SpawnRandomEntities
 B cc_achievement_debug
 B changelevel_next
 B cl_backspeed
 B cl_forwardspeed
 B cl_sidespeed
 B cl_upspeed
 B collision_shake_amp
 B collision_shake_freq
 B collision_shake_time
 B colorcorrection
 B combine_guard_spawn_health
 B combine_spawn_health
 B commentary
 B commentary_available
 B currenttoken
 B curve_bias
 B cvar
 B datacache
 B datamap_t* DataMapInit<AIExtendedSaveHeader_t>(AIExtendedSaveHeader_t*)::nameHolder
 B datamap_t* DataMapInit<AIScheduleState_t>(AIScheduleState_t*)::nameHolder
 B datamap_t* DataMapInit<AISquadEnemyInfo_t>(AISquadEnemyInfo_t*)::dataDesc
 B datamap_t* DataMapInit<AISquadEnemyInfo_t>(AISquadEnemyInfo_t*)::nameHolder
 B datamap_t* DataMapInit<AI_EnemyInfo_t>(AI_EnemyInfo_t*)::nameHolder
 B datamap_t* DataMapInit<AI_FollowNavInfo_t>(AI_FollowNavInfo_t*)::nameHolder
 B datamap_t* DataMapInit<AI_FollowParams_t>(AI_FollowParams_t*)::nameHolder
 B datamap_t* DataMapInit<AI_FreePassParams_t>(AI_FreePassParams_t*)::nameHolder
 B datamap_t* DataMapInit<AI_LeadArgs_t>(AI_LeadArgs_t*)::nameHolder
 B datamap_t* DataMapInit<AI_Response>(AI_Response*)::nameHolder
 B datamap_t* DataMapInit<AI_ResponseParams>(AI_ResponseParams*)::nameHolder
 B datamap_t* DataMapInit<AI_StandoffParams_t>(AI_StandoffParams_t*)::nameHolder
 B datamap_t* DataMapInit<AI_Waypoint_t>(AI_Waypoint_t*)::nameHolder
 B datamap_t* DataMapInit<AR2Explosion>(AR2Explosion*)::nameHolder
 B datamap_t* DataMapInit<CAISound>(CAISound*)::nameHolder
 B datamap_t* DataMapInit<CAI_AccelDecay>(CAI_AccelDecay*)::nameHolder
 B datamap_t* DataMapInit<CAI_ActBusyBehavior>(CAI_ActBusyBehavior*)::dataDesc
 B datamap_t* DataMapInit<CAI_ActBusyBehavior>(CAI_ActBusyBehavior*)::nameHolder
 B datamap_t* DataMapInit<CAI_ActBusyGoal>(CAI_ActBusyGoal*)::dataDesc
 B datamap_t* DataMapInit<CAI_ActBusyGoal>(CAI_ActBusyGoal*)::nameHolder
 B datamap_t* DataMapInit<CAI_ActBusyQueueGoal>(CAI_ActBusyQueueGoal*)::dataDesc
 B datamap_t* DataMapInit<CAI_ActBusyQueueGoal>(CAI_ActBusyQueueGoal*)::nameHolder
 B datamap_t* DataMapInit<CAI_AllyManager>(CAI_AllyManager*)::dataDesc
 B datamap_t* DataMapInit<CAI_AllyManager>(CAI_AllyManager*)::nameHolder
 B datamap_t* DataMapInit<CAI_AllySpeechManager>(CAI_AllySpeechManager*)::dataDesc
 B datamap_t* DataMapInit<CAI_AllySpeechManager>(CAI_AllySpeechManager*)::nameHolder
 B datamap_t* DataMapInit<CAI_AssaultBehavior>(CAI_AssaultBehavior*)::nameHolder
 B datamap_t* DataMapInit<CAI_AssaultGoal>(CAI_AssaultGoal*)::nameHolder
 B datamap_t* DataMapInit<CAI_BaseActor>(CAI_BaseActor*)::dataDesc
 B datamap_t* DataMapInit<CAI_BaseActor>(CAI_BaseActor*)::nameHolder
 B datamap_t* DataMapInit<CAI_BaseFlyingBot>(CAI_BaseFlyingBot*)::nameHolder
 B datamap_t* DataMapInit<CAI_BaseNPC>(CAI_BaseNPC*)::dataDesc
 B datamap_t* DataMapInit<CAI_BaseNPC>(CAI_BaseNPC*)::nameHolder
 B datamap_t* DataMapInit<CAI_BasePhysicsFlyingBot>(CAI_BasePhysicsFlyingBot*)::dataDesc
 B datamap_t* DataMapInit<CAI_BasePhysicsFlyingBot>(CAI_BasePhysicsFlyingBot*)::nameHolder
 B datamap_t* DataMapInit<CAI_BattleLine>(CAI_BattleLine*)::dataDesc
 B datamap_t* DataMapInit<CAI_BattleLine>(CAI_BattleLine*)::nameHolder
 B datamap_t* DataMapInit<CAI_BehaviorBase>(CAI_BehaviorBase*)::dataDesc
 B datamap_t* DataMapInit<CAI_BehaviorBase>(CAI_BehaviorBase*)::nameHolder
 B datamap_t* DataMapInit<CAI_BlendedMotor>(CAI_BlendedMotor*)::dataDesc
 B datamap_t* DataMapInit<CAI_BlendedMotor>(CAI_BlendedMotor*)::nameHolder
 B datamap_t* DataMapInit<CAI_ChangeHintGroup>(CAI_ChangeHintGroup*)::nameHolder
 B datamap_t* DataMapInit<CAI_ChangeTarget>(CAI_ChangeTarget*)::nameHolder
 B datamap_t* DataMapInit<CAI_DynamicLink>(CAI_DynamicLink*)::nameHolder
 B datamap_t* DataMapInit<CAI_DynamicLinkController>(CAI_DynamicLinkController*)::nameHolder
 B datamap_t* DataMapInit<CAI_Enemies>(CAI_Enemies*)::nameHolder
 B datamap_t* DataMapInit<CAI_Expresser>(CAI_Expresser*)::nameHolder
 B datamap_t* DataMapInit<CAI_FearBehavior>(CAI_FearBehavior*)::nameHolder
 B datamap_t* DataMapInit<CAI_FollowBehavior>(CAI_FollowBehavior*)::dataDesc
 B datamap_t* DataMapInit<CAI_FollowBehavior>(CAI_FollowBehavior*)::nameHolder
 B datamap_t* DataMapInit<CAI_FollowGoal>(CAI_FollowGoal*)::nameHolder
 B datamap_t* DataMapInit<CAI_FreePass>(CAI_FreePass*)::nameHolder
 B datamap_t* DataMapInit<CAI_FuncTankBehavior>(CAI_FuncTankBehavior*)::nameHolder
 B datamap_t* DataMapInit<CAI_GoalEntity>(CAI_GoalEntity*)::dataDesc
 B datamap_t* DataMapInit<CAI_GoalEntity>(CAI_GoalEntity*)::nameHolder
 B datamap_t* DataMapInit<CAI_Hint>(CAI_Hint*)::dataDesc
 B datamap_t* DataMapInit<CAI_Hint>(CAI_Hint*)::nameHolder
 B datamap_t* DataMapInit<CAI_HolsterBehavior>(CAI_HolsterBehavior*)::nameHolder
 B datamap_t* DataMapInit<CAI_InterestTarget_t>(CAI_InterestTarget_t*)::nameHolder
 B datamap_t* DataMapInit<CAI_LeadBehavior>(CAI_LeadBehavior*)::nameHolder
 B datamap_t* DataMapInit<CAI_LeadGoal>(CAI_LeadGoal*)::dataDesc
 B datamap_t* DataMapInit<CAI_LeadGoal>(CAI_LeadGoal*)::nameHolder
 B datamap_t* DataMapInit<CAI_LeadGoal_Weapon>(CAI_LeadGoal_Weapon*)::nameHolder
 B datamap_t* DataMapInit<CAI_LocalNavigator>(CAI_LocalNavigator*)::dataDesc
 B datamap_t* DataMapInit<CAI_LocalNavigator>(CAI_LocalNavigator*)::nameHolder
 B datamap_t* DataMapInit<CAI_LookTarget>(CAI_LookTarget*)::nameHolder
 B datamap_t* DataMapInit<CAI_Motor>(CAI_Motor*)::dataDesc
 B datamap_t* DataMapInit<CAI_Motor>(CAI_Motor*)::nameHolder
 B datamap_t* DataMapInit<CAI_MoveAndShootOverlay>(CAI_MoveAndShootOverlay*)::nameHolder
 B datamap_t* DataMapInit<CAI_MoveMonitor>(CAI_MoveMonitor*)::nameHolder
 B datamap_t* DataMapInit<CAI_MoveProbe>(CAI_MoveProbe*)::nameHolder
 B datamap_t* DataMapInit<CAI_Navigator>(CAI_Navigator*)::dataDesc
 B datamap_t* DataMapInit<CAI_Navigator>(CAI_Navigator*)::nameHolder
 B datamap_t* DataMapInit<CAI_NetworkManager>(CAI_NetworkManager*)::dataDesc
 B datamap_t* DataMapInit<CAI_NetworkManager>(CAI_NetworkManager*)::nameHolder
 B datamap_t* DataMapInit<CAI_Path>(CAI_Path*)::dataDesc
 B datamap_t* DataMapInit<CAI_Path>(CAI_Path*)::nameHolder
 B datamap_t* DataMapInit<CAI_Pathfinder>(CAI_Pathfinder*)::nameHolder
 B datamap_t* DataMapInit<CAI_PlayerAlly>(CAI_PlayerAlly*)::dataDesc
 B datamap_t* DataMapInit<CAI_PlayerAlly>(CAI_PlayerAlly*)::nameHolder
 B datamap_t* DataMapInit<CAI_PoliceGoal>(CAI_PoliceGoal*)::dataDesc
 B datamap_t* DataMapInit<CAI_PoliceGoal>(CAI_PoliceGoal*)::nameHolder
 B datamap_t* DataMapInit<CAI_PolicingBehavior>(CAI_PolicingBehavior*)::nameHolder
 B datamap_t* DataMapInit<CAI_ProxTester>(CAI_ProxTester*)::nameHolder
 B datamap_t* DataMapInit<CAI_RadialLinkController>(CAI_RadialLinkController*)::dataDesc
 B datamap_t* DataMapInit<CAI_RadialLinkController>(CAI_RadialLinkController*)::nameHolder
 B datamap_t* DataMapInit<CAI_RappelBehavior>(CAI_RappelBehavior*)::nameHolder
 B datamap_t* DataMapInit<CAI_Relationship>(CAI_Relationship*)::dataDesc
 B datamap_t* DataMapInit<CAI_Relationship>(CAI_Relationship*)::nameHolder
 B datamap_t* DataMapInit<CAI_ScriptConditions>(CAI_ScriptConditions*)::dataDesc
 B datamap_t* DataMapInit<CAI_ScriptConditions>(CAI_ScriptConditions*)::nameHolder
 B datamap_t* DataMapInit<CAI_ScriptConditionsElement>(CAI_ScriptConditionsElement*)::nameHolder
 B datamap_t* DataMapInit<CAI_ScriptedSchedule>(CAI_ScriptedSchedule*)::dataDesc
 B datamap_t* DataMapInit<CAI_ScriptedSchedule>(CAI_ScriptedSchedule*)::nameHolder
 B datamap_t* DataMapInit<CAI_ScriptedSentence>(CAI_ScriptedSentence*)::dataDesc
 B datamap_t* DataMapInit<CAI_ScriptedSentence>(CAI_ScriptedSentence*)::nameHolder
 B datamap_t* DataMapInit<CAI_ScriptedSequence>(CAI_ScriptedSequence*)::dataDesc
 B datamap_t* DataMapInit<CAI_ScriptedSequence>(CAI_ScriptedSequence*)::nameHolder
 B datamap_t* DataMapInit<CAI_Senses>(CAI_Senses*)::dataDesc
 B datamap_t* DataMapInit<CAI_Senses>(CAI_Senses*)::nameHolder
 B datamap_t* DataMapInit<CAI_SentenceBase>(CAI_SentenceBase*)::nameHolder
 B datamap_t* DataMapInit<CAI_ShotRegulator>(CAI_ShotRegulator*)::nameHolder
 B datamap_t* DataMapInit<CAI_SpeechFilter>(CAI_SpeechFilter*)::nameHolder
 B datamap_t* DataMapInit<CAI_Spotlight>(CAI_Spotlight*)::nameHolder
 B datamap_t* DataMapInit<CAI_Squad>(CAI_Squad*)::dataDesc
 B datamap_t* DataMapInit<CAI_Squad>(CAI_Squad*)::nameHolder
 B datamap_t* DataMapInit<CAI_StandoffBehavior>(CAI_StandoffBehavior*)::nameHolder
 B datamap_t* DataMapInit<CAI_StandoffGoal>(CAI_StandoffGoal*)::nameHolder
 B datamap_t* DataMapInit<CAI_TacticalServices>(CAI_TacticalServices*)::nameHolder
 B datamap_t* DataMapInit<CAI_TrackPather>(CAI_TrackPather*)::nameHolder
 B datamap_t* DataMapInit<CAPCController>(CAPCController*)::dataDesc
 B datamap_t* DataMapInit<CAPCController>(CAPCController*)::nameHolder
 B datamap_t* DataMapInit<CAPCMissile>(CAPCMissile*)::dataDesc
 B datamap_t* DataMapInit<CAPCMissile>(CAPCMissile*)::nameHolder
 B datamap_t* DataMapInit<CAlyxEmpEffect>(CAlyxEmpEffect*)::dataDesc
 B datamap_t* DataMapInit<CAlyxEmpEffect>(CAlyxEmpEffect*)::nameHolder
 B datamap_t* DataMapInit<CAmbientGeneric>(CAmbientGeneric*)::dataDesc
 B datamap_t* DataMapInit<CAmbientGeneric>(CAmbientGeneric*)::nameHolder
 B datamap_t* DataMapInit<CAnimationLayer>(CAnimationLayer*)::dataDesc
 B datamap_t* DataMapInit<CAnimationLayer>(CAnimationLayer*)::nameHolder
 B datamap_t* DataMapInit<CAntlionRepellant>(CAntlionRepellant*)::nameHolder
 B datamap_t* DataMapInit<CAntlionTemplateMaker>(CAntlionTemplateMaker*)::dataDesc
 B datamap_t* DataMapInit<CAntlionTemplateMaker>(CAntlionTemplateMaker*)::nameHolder
 B datamap_t* DataMapInit<CAreaPortal>(CAreaPortal*)::nameHolder
 B datamap_t* DataMapInit<CAssaultPoint>(CAssaultPoint*)::dataDesc
 B datamap_t* DataMapInit<CAssaultPoint>(CAssaultPoint*)::nameHolder
 B datamap_t* DataMapInit<CAvoidBox>(CAvoidBox*)::dataDesc
 B datamap_t* DataMapInit<CAvoidBox>(CAvoidBox*)::nameHolder
 B datamap_t* DataMapInit<CAvoidSphere>(CAvoidSphere*)::nameHolder
 B datamap_t* DataMapInit<CBarnacleTongueTip>(CBarnacleTongueTip*)::dataDesc
 B datamap_t* DataMapInit<CBarnacleTongueTip>(CBarnacleTongueTip*)::nameHolder
 B datamap_t* DataMapInit<CBaseAchievement>(CBaseAchievement*)::nameHolder
 B datamap_t* DataMapInit<CBaseAnimating>(CBaseAnimating*)::dataDesc
 B datamap_t* DataMapInit<CBaseAnimating>(CBaseAnimating*)::nameHolder
 B datamap_t* DataMapInit<CBaseAnimatingOverlay>(CBaseAnimatingOverlay*)::dataDesc
 B datamap_t* DataMapInit<CBaseAnimatingOverlay>(CBaseAnimatingOverlay*)::nameHolder
 B datamap_t* DataMapInit<CBaseButton>(CBaseButton*)::dataDesc
 B datamap_t* DataMapInit<CBaseButton>(CBaseButton*)::nameHolder
 B datamap_t* DataMapInit<CBaseCombatCharacter>(CBaseCombatCharacter*)::dataDesc
 B datamap_t* DataMapInit<CBaseCombatCharacter>(CBaseCombatCharacter*)::nameHolder
 B datamap_t* DataMapInit<CBaseCombatWeapon>(CBaseCombatWeapon*)::dataDesc
 B datamap_t* DataMapInit<CBaseCombatWeapon>(CBaseCombatWeapon*)::nameHolder
 B datamap_t* DataMapInit<CBaseDMStart>(CBaseDMStart*)::nameHolder
 B datamap_t* DataMapInit<CBaseDoor>(CBaseDoor*)::dataDesc
 B datamap_t* DataMapInit<CBaseDoor>(CBaseDoor*)::nameHolder
 B datamap_t* DataMapInit<CBaseEntity>(CBaseEntity*)::dataDesc
 B datamap_t* DataMapInit<CBaseEntity>(CBaseEntity*)::nameHolder
 B datamap_t* DataMapInit<CBaseEntityOutput>(CBaseEntityOutput*)::dataDesc
 B datamap_t* DataMapInit<CBaseEntityOutput>(CBaseEntityOutput*)::nameHolder
 B datamap_t* DataMapInit<CBaseFilter>(CBaseFilter*)::dataDesc
 B datamap_t* DataMapInit<CBaseFilter>(CBaseFilter*)::nameHolder
 B datamap_t* DataMapInit<CBaseFire>(CBaseFire*)::nameHolder
 B datamap_t* DataMapInit<CBaseFlex>(CBaseFlex*)::nameHolder
 B datamap_t* DataMapInit<CBaseGrenade>(CBaseGrenade*)::dataDesc
 B datamap_t* DataMapInit<CBaseGrenade>(CBaseGrenade*)::nameHolder
 B datamap_t* DataMapInit<CBaseGrenadeConcussion>(CBaseGrenadeConcussion*)::dataDesc
 B datamap_t* DataMapInit<CBaseGrenadeConcussion>(CBaseGrenadeConcussion*)::nameHolder
 B datamap_t* DataMapInit<CBaseHL2MPCombatWeapon>(CBaseHL2MPCombatWeapon*)::nameHolder
 B datamap_t* DataMapInit<CBaseHLCombatWeapon>(CBaseHLCombatWeapon*)::nameHolder
 B datamap_t* DataMapInit<CBaseHeadcrab>(CBaseHeadcrab*)::dataDesc
 B datamap_t* DataMapInit<CBaseHeadcrab>(CBaseHeadcrab*)::nameHolder
 B datamap_t* DataMapInit<CBaseHelicopter>(CBaseHelicopter*)::dataDesc
 B datamap_t* DataMapInit<CBaseHelicopter>(CBaseHelicopter*)::nameHolder
 B datamap_t* DataMapInit<CBaseMoveBehavior>(CBaseMoveBehavior*)::nameHolder
 B datamap_t* DataMapInit<CBaseNPCMaker>(CBaseNPCMaker*)::dataDesc
 B datamap_t* DataMapInit<CBaseNPCMaker>(CBaseNPCMaker*)::nameHolder
 B datamap_t* DataMapInit<CBasePlatTrain>(CBasePlatTrain*)::dataDesc
 B datamap_t* DataMapInit<CBasePlatTrain>(CBasePlatTrain*)::nameHolder
 B datamap_t* DataMapInit<CBasePlayer>(CBasePlayer*)::dataDesc
 B datamap_t* DataMapInit<CBasePlayer>(CBasePlayer*)::nameHolder
 B datamap_t* DataMapInit<CBasePropDoor>(CBasePropDoor*)::dataDesc
 B datamap_t* DataMapInit<CBasePropDoor>(CBasePropDoor*)::nameHolder
 B datamap_t* DataMapInit<CBaseServerVehicle>(CBaseServerVehicle*)::dataDesc
 B datamap_t* DataMapInit<CBaseServerVehicle>(CBaseServerVehicle*)::nameHolder
 B datamap_t* DataMapInit<CBaseSpriteProjectile>(CBaseSpriteProjectile*)::nameHolder
 B datamap_t* DataMapInit<CBaseTeamObjectiveResource>(CBaseTeamObjectiveResource*)::dataDesc
 B datamap_t* DataMapInit<CBaseTeamObjectiveResource>(CBaseTeamObjectiveResource*)::nameHolder
 B datamap_t* DataMapInit<CBaseToggle>(CBaseToggle*)::nameHolder
 B datamap_t* DataMapInit<CBaseTrigger>(CBaseTrigger*)::dataDesc
 B datamap_t* DataMapInit<CBaseTrigger>(CBaseTrigger*)::nameHolder
 B datamap_t* DataMapInit<CBaseVPhysicsTrigger>(CBaseVPhysicsTrigger*)::nameHolder
 B datamap_t* DataMapInit<CBaseViewModel>(CBaseViewModel*)::dataDesc
 B datamap_t* DataMapInit<CBaseViewModel>(CBaseViewModel*)::nameHolder
 B datamap_t* DataMapInit<CBeam>(CBeam*)::nameHolder
 B datamap_t* DataMapInit<CBlackHeadcrab>(CBlackHeadcrab*)::dataDesc
 B datamap_t* DataMapInit<CBlackHeadcrab>(CBlackHeadcrab*)::nameHolder
 B datamap_t* DataMapInit<CBlendingCycler>(CBlendingCycler*)::nameHolder
 B datamap_t* DataMapInit<CBlood>(CBlood*)::nameHolder
 B datamap_t* DataMapInit<CBombDropSensor>(CBombDropSensor*)::nameHolder
 B datamap_t* DataMapInit<CBombSuppressor>(CBombSuppressor*)::dataDesc
 B datamap_t* DataMapInit<CBombSuppressor>(CBombSuppressor*)::nameHolder
 B datamap_t* DataMapInit<CBoneFollower>(CBoneFollower*)::nameHolder
 B datamap_t* DataMapInit<CBoneFollowerManager>(CBoneFollowerManager*)::dataDesc
 B datamap_t* DataMapInit<CBoneFollowerManager>(CBoneFollowerManager*)::nameHolder
 B datamap_t* DataMapInit<CBounceBomb>(CBounceBomb*)::dataDesc
 B datamap_t* DataMapInit<CBounceBomb>(CBounceBomb*)::nameHolder
 B datamap_t* DataMapInit<CBreakable>(CBreakable*)::dataDesc
 B datamap_t* DataMapInit<CBreakable>(CBreakable*)::nameHolder
 B datamap_t* DataMapInit<CBreakableProp>(CBreakableProp*)::dataDesc
 B datamap_t* DataMapInit<CBreakableProp>(CBreakableProp*)::nameHolder
 B datamap_t* DataMapInit<CBreakableSurface>(CBreakableSurface*)::dataDesc
 B datamap_t* DataMapInit<CBreakableSurface>(CBreakableSurface*)::nameHolder
 B datamap_t* DataMapInit<CBubbling>(CBubbling*)::dataDesc
 B datamap_t* DataMapInit<CBubbling>(CBubbling*)::nameHolder
 B datamap_t* DataMapInit<CBugBaitSensor>(CBugBaitSensor*)::dataDesc
 B datamap_t* DataMapInit<CBugBaitSensor>(CBugBaitSensor*)::nameHolder
 B datamap_t* DataMapInit<CChangeLevel>(CChangeLevel*)::dataDesc
 B datamap_t* DataMapInit<CChangeLevel>(CChangeLevel*)::nameHolder
 B datamap_t* DataMapInit<CCitadelEnergyCore>(CCitadelEnergyCore*)::nameHolder
 B datamap_t* DataMapInit<CCitizenResponseSystem>(CCitizenResponseSystem*)::dataDesc
 B datamap_t* DataMapInit<CCitizenResponseSystem>(CCitizenResponseSystem*)::nameHolder
 B datamap_t* DataMapInit<CCollisionProperty>(CCollisionProperty*)::nameHolder
 B datamap_t* DataMapInit<CColorCorrection>(CColorCorrection*)::dataDesc
 B datamap_t* DataMapInit<CColorCorrection>(CColorCorrection*)::nameHolder
 B datamap_t* DataMapInit<CColorCorrectionVolume>(CColorCorrectionVolume*)::dataDesc
 B datamap_t* DataMapInit<CColorCorrectionVolume>(CColorCorrectionVolume*)::nameHolder
 B datamap_t* DataMapInit<CCombineDropshipContainer>(CCombineDropshipContainer*)::nameHolder
 B datamap_t* DataMapInit<CCommandPoint>(CCommandPoint*)::nameHolder
 B datamap_t* DataMapInit<CCommentaryAuto>(CCommentaryAuto*)::dataDesc
 B datamap_t* DataMapInit<CCommentaryAuto>(CCommentaryAuto*)::nameHolder
 B datamap_t* DataMapInit<CCommentarySystem>(CCommentarySystem*)::dataDesc
 B datamap_t* DataMapInit<CCommentarySystem>(CCommentarySystem*)::nameHolder
 B datamap_t* DataMapInit<CConcussiveBlast>(CConcussiveBlast*)::dataDesc
 B datamap_t* DataMapInit<CConcussiveBlast>(CConcussiveBlast*)::nameHolder
 B datamap_t* DataMapInit<CConstantForceController>(CConstantForceController*)::nameHolder
 B datamap_t* DataMapInit<CConstraintAnchor>(CConstraintAnchor*)::nameHolder
 B datamap_t* DataMapInit<CCopyRecipientFilter>(CCopyRecipientFilter*)::dataDesc
 B datamap_t* DataMapInit<CCopyRecipientFilter>(CCopyRecipientFilter*)::nameHolder
 B datamap_t* DataMapInit<CCraneTip>(CCraneTip*)::dataDesc
 B datamap_t* DataMapInit<CCraneTip>(CCraneTip*)::nameHolder
 B datamap_t* DataMapInit<CCredits>(CCredits*)::dataDesc
 B datamap_t* DataMapInit<CCredits>(CCredits*)::nameHolder
 B datamap_t* DataMapInit<CCrossbowBolt>(CCrossbowBolt*)::dataDesc
 B datamap_t* DataMapInit<CCrossbowBolt>(CCrossbowBolt*)::nameHolder
 B datamap_t* DataMapInit<CCycler>(CCycler*)::nameHolder
 B datamap_t* DataMapInit<CDebugHistory>(CDebugHistory*)::dataDesc
 B datamap_t* DataMapInit<CDebugHistory>(CDebugHistory*)::nameHolder
 B datamap_t* DataMapInit<CDecal>(CDecal*)::dataDesc
 B datamap_t* DataMapInit<CDecal>(CDecal*)::nameHolder
 B datamap_t* DataMapInit<CDynamicLight>(CDynamicLight*)::dataDesc
 B datamap_t* DataMapInit<CDynamicLight>(CDynamicLight*)::nameHolder
 B datamap_t* DataMapInit<CDynamicProp>(CDynamicProp*)::dataDesc
 B datamap_t* DataMapInit<CDynamicProp>(CDynamicProp*)::nameHolder
 B datamap_t* DataMapInit<CEmbers>(CEmbers*)::dataDesc
 B datamap_t* DataMapInit<CEmbers>(CEmbers*)::nameHolder
 B datamap_t* DataMapInit<CEntityDissolve>(CEntityDissolve*)::dataDesc
 B datamap_t* DataMapInit<CEntityDissolve>(CEntityDissolve*)::nameHolder
 B datamap_t* DataMapInit<CEntityFlame>(CEntityFlame*)::dataDesc
 B datamap_t* DataMapInit<CEntityFlame>(CEntityFlame*)::nameHolder
 B datamap_t* DataMapInit<CEntityParticleTrail>(CEntityParticleTrail*)::nameHolder
 B datamap_t* DataMapInit<CEnvAR2Explosion>(CEnvAR2Explosion*)::nameHolder
 B datamap_t* DataMapInit<CEnvBeam>(CEnvBeam*)::dataDesc
 B datamap_t* DataMapInit<CEnvBeam>(CEnvBeam*)::nameHolder
 B datamap_t* DataMapInit<CEnvBeverage>(CEnvBeverage*)::nameHolder
 B datamap_t* DataMapInit<CEnvDustPuff>(CEnvDustPuff*)::nameHolder
 B datamap_t* DataMapInit<CEnvEffectsScript>(CEnvEffectsScript*)::dataDesc
 B datamap_t* DataMapInit<CEnvEffectsScript>(CEnvEffectsScript*)::nameHolder
 B datamap_t* DataMapInit<CEnvEntityMaker>(CEnvEntityMaker*)::dataDesc
 B datamap_t* DataMapInit<CEnvEntityMaker>(CEnvEntityMaker*)::nameHolder
 B datamap_t* DataMapInit<CEnvExplosion>(CEnvExplosion*)::dataDesc
 B datamap_t* DataMapInit<CEnvExplosion>(CEnvExplosion*)::nameHolder
 B datamap_t* DataMapInit<CEnvFade>(CEnvFade*)::dataDesc
 B datamap_t* DataMapInit<CEnvFade>(CEnvFade*)::nameHolder
 B datamap_t* DataMapInit<CEnvFireSensor>(CEnvFireSensor*)::dataDesc
 B datamap_t* DataMapInit<CEnvFireSensor>(CEnvFireSensor*)::nameHolder
 B datamap_t* DataMapInit<CEnvFireSource>(CEnvFireSource*)::nameHolder
 B datamap_t* DataMapInit<CEnvFunnel>(CEnvFunnel*)::dataDesc
 B datamap_t* DataMapInit<CEnvFunnel>(CEnvFunnel*)::nameHolder
 B datamap_t* DataMapInit<CEnvGlobal>(CEnvGlobal*)::dataDesc
 B datamap_t* DataMapInit<CEnvGlobal>(CEnvGlobal*)::nameHolder
 B datamap_t* DataMapInit<CEnvGunfire>(CEnvGunfire*)::dataDesc
 B datamap_t* DataMapInit<CEnvGunfire>(CEnvGunfire*)::nameHolder
 B datamap_t* DataMapInit<CEnvHeadcrabCanister>(CEnvHeadcrabCanister*)::dataDesc
 B datamap_t* DataMapInit<CEnvHeadcrabCanister>(CEnvHeadcrabCanister*)::nameHolder
 B datamap_t* DataMapInit<CEnvHeadcrabCanisterShared>(CEnvHeadcrabCanisterShared*)::nameHolder
 B datamap_t* DataMapInit<CEnvHudHint>(CEnvHudHint*)::nameHolder
 B datamap_t* DataMapInit<CEnvLaser>(CEnvLaser*)::dataDesc
 B datamap_t* DataMapInit<CEnvLaser>(CEnvLaser*)::nameHolder
 B datamap_t* DataMapInit<CEnvMicrophone>(CEnvMicrophone*)::dataDesc
 B datamap_t* DataMapInit<CEnvMicrophone>(CEnvMicrophone*)::nameHolder
 B datamap_t* DataMapInit<CEnvMuzzleFlash>(CEnvMuzzleFlash*)::nameHolder
 B datamap_t* DataMapInit<CEnvParticleScript>(CEnvParticleScript*)::nameHolder
 B datamap_t* DataMapInit<CEnvPlayerSurfaceTrigger>(CEnvPlayerSurfaceTrigger*)::dataDesc
 B datamap_t* DataMapInit<CEnvPlayerSurfaceTrigger>(CEnvPlayerSurfaceTrigger*)::nameHolder
 B datamap_t* DataMapInit<CEnvProjectedTexture>(CEnvProjectedTexture*)::dataDesc
 B datamap_t* DataMapInit<CEnvProjectedTexture>(CEnvProjectedTexture*)::nameHolder
 B datamap_t* DataMapInit<CEnvQuadraticBeam>(CEnvQuadraticBeam*)::nameHolder
 B datamap_t* DataMapInit<CEnvScreenEffect>(CEnvScreenEffect*)::nameHolder
 B datamap_t* DataMapInit<CEnvScreenOverlay>(CEnvScreenOverlay*)::dataDesc
 B datamap_t* DataMapInit<CEnvScreenOverlay>(CEnvScreenOverlay*)::nameHolder
 B datamap_t* DataMapInit<CEnvShake>(CEnvShake*)::dataDesc
 B datamap_t* DataMapInit<CEnvShake>(CEnvShake*)::nameHolder
 B datamap_t* DataMapInit<CEnvShooter>(CEnvShooter*)::nameHolder
 B datamap_t* DataMapInit<CEnvSoundscape>(CEnvSoundscape*)::dataDesc
 B datamap_t* DataMapInit<CEnvSoundscape>(CEnvSoundscape*)::nameHolder
 B datamap_t* DataMapInit<CEnvSoundscapeProxy>(CEnvSoundscapeProxy*)::nameHolder
 B datamap_t* DataMapInit<CEnvSoundscapeTriggerable>(CEnvSoundscapeTriggerable*)::dataDesc
 B datamap_t* DataMapInit<CEnvSoundscapeTriggerable>(CEnvSoundscapeTriggerable*)::nameHolder
 B datamap_t* DataMapInit<CEnvSpark>(CEnvSpark*)::dataDesc
 B datamap_t* DataMapInit<CEnvSpark>(CEnvSpark*)::nameHolder
 B datamap_t* DataMapInit<CEnvSplash>(CEnvSplash*)::nameHolder
 B datamap_t* DataMapInit<CEnvStarfield>(CEnvStarfield*)::nameHolder
 B datamap_t* DataMapInit<CEnvTonemapController>(CEnvTonemapController*)::dataDesc
 B datamap_t* DataMapInit<CEnvTonemapController>(CEnvTonemapController*)::nameHolder
 B datamap_t* DataMapInit<CEnvTracer>(CEnvTracer*)::dataDesc
 B datamap_t* DataMapInit<CEnvTracer>(CEnvTracer*)::nameHolder
 B datamap_t* DataMapInit<CEnvViewPunch>(CEnvViewPunch*)::nameHolder
 B datamap_t* DataMapInit<CEnvWind>(CEnvWind*)::dataDesc
 B datamap_t* DataMapInit<CEnvWind>(CEnvWind*)::nameHolder
 B datamap_t* DataMapInit<CEnvZoom>(CEnvZoom*)::nameHolder
 B datamap_t* DataMapInit<CEventAction>(CEventAction*)::nameHolder
 B datamap_t* DataMapInit<CEventQueue>(CEventQueue*)::nameHolder
 B datamap_t* DataMapInit<CFailableAchievement>(CFailableAchievement*)::nameHolder
 B datamap_t* DataMapInit<CFastHeadcrab>(CFastHeadcrab*)::nameHolder
 B datamap_t* DataMapInit<CFilterClass>(CFilterClass*)::nameHolder
 B datamap_t* DataMapInit<CFilterCombineBall>(CFilterCombineBall*)::nameHolder
 B datamap_t* DataMapInit<CFilterEnemy>(CFilterEnemy*)::nameHolder
 B datamap_t* DataMapInit<CFilterMassGreater>(CFilterMassGreater*)::nameHolder
 B datamap_t* DataMapInit<CFilterMultiple>(CFilterMultiple*)::nameHolder
 B datamap_t* DataMapInit<CFilterName>(CFilterName*)::nameHolder
 B datamap_t* DataMapInit<CFire>(CFire*)::dataDesc
 B datamap_t* DataMapInit<CFire>(CFire*)::nameHolder
 B datamap_t* DataMapInit<CFireSmoke>(CFireSmoke*)::nameHolder
 B datamap_t* DataMapInit<CFireTrail>(CFireTrail*)::nameHolder
 B datamap_t* DataMapInit<CFish>(CFish*)::nameHolder
 B datamap_t* DataMapInit<CFishPool>(CFishPool*)::dataDesc
 B datamap_t* DataMapInit<CFishPool>(CFishPool*)::nameHolder
 B datamap_t* DataMapInit<CFlare>(CFlare*)::dataDesc
 B datamap_t* DataMapInit<CFlare>(CFlare*)::nameHolder
 B datamap_t* DataMapInit<CFlexCycler>(CFlexCycler*)::nameHolder
 B datamap_t* DataMapInit<CFlextalkActor>(CFlextalkActor*)::nameHolder
 B datamap_t* DataMapInit<CFogController>(CFogController*)::dataDesc
 B datamap_t* DataMapInit<CFogController>(CFogController*)::nameHolder
 B datamap_t* DataMapInit<CFourWheelServerVehicle>(CFourWheelServerVehicle*)::nameHolder
 B datamap_t* DataMapInit<CFourWheelVehiclePhysics>(CFourWheelVehiclePhysics*)::nameHolder
 B datamap_t* DataMapInit<CFuncAreaPortalBase>(CFuncAreaPortalBase*)::nameHolder
 B datamap_t* DataMapInit<CFuncAreaPortalWindow>(CFuncAreaPortalWindow*)::nameHolder
 B datamap_t* DataMapInit<CFuncBrush>(CFuncBrush*)::nameHolder
 B datamap_t* DataMapInit<CFuncCombineBallSpawner>(CFuncCombineBallSpawner*)::dataDesc
 B datamap_t* DataMapInit<CFuncCombineBallSpawner>(CFuncCombineBallSpawner*)::nameHolder
 B datamap_t* DataMapInit<CFuncConveyor>(CFuncConveyor*)::nameHolder
 B datamap_t* DataMapInit<CFuncLadder>(CFuncLadder*)::dataDesc
 B datamap_t* DataMapInit<CFuncLadder>(CFuncLadder*)::nameHolder
 B datamap_t* DataMapInit<CFuncMonitor>(CFuncMonitor*)::nameHolder
 B datamap_t* DataMapInit<CFuncMoveLinear>(CFuncMoveLinear*)::dataDesc
 B datamap_t* DataMapInit<CFuncMoveLinear>(CFuncMoveLinear*)::nameHolder
 B datamap_t* DataMapInit<CFuncOccluder>(CFuncOccluder*)::nameHolder
 B datamap_t* DataMapInit<CFuncPlat>(CFuncPlat*)::dataDesc
 B datamap_t* DataMapInit<CFuncPlat>(CFuncPlat*)::nameHolder
 B datamap_t* DataMapInit<CFuncPlatRot>(CFuncPlatRot*)::nameHolder
 B datamap_t* DataMapInit<CFuncReflectiveGlass>(CFuncReflectiveGlass*)::dataDesc
 B datamap_t* DataMapInit<CFuncReflectiveGlass>(CFuncReflectiveGlass*)::nameHolder
 B datamap_t* DataMapInit<CFuncRotating>(CFuncRotating*)::dataDesc
 B datamap_t* DataMapInit<CFuncRotating>(CFuncRotating*)::nameHolder
 B datamap_t* DataMapInit<CFuncSmokeVolume>(CFuncSmokeVolume*)::nameHolder
 B datamap_t* DataMapInit<CFuncTank>(CFuncTank*)::dataDesc
 B datamap_t* DataMapInit<CFuncTank>(CFuncTank*)::nameHolder
 B datamap_t* DataMapInit<CFuncTankAPCRocket>(CFuncTankAPCRocket*)::nameHolder
 B datamap_t* DataMapInit<CFuncTankAirboatGun>(CFuncTankAirboatGun*)::dataDesc
 B datamap_t* DataMapInit<CFuncTankAirboatGun>(CFuncTankAirboatGun*)::nameHolder
 B datamap_t* DataMapInit<CFuncTankCombineCannon>(CFuncTankCombineCannon*)::dataDesc
 B datamap_t* DataMapInit<CFuncTankCombineCannon>(CFuncTankCombineCannon*)::nameHolder
 B datamap_t* DataMapInit<CFuncTankLaser>(CFuncTankLaser*)::nameHolder
 B datamap_t* DataMapInit<CFuncTankMortar>(CFuncTankMortar*)::nameHolder
 B datamap_t* DataMapInit<CFuncTankPhysCannister>(CFuncTankPhysCannister*)::nameHolder
 B datamap_t* DataMapInit<CFuncTankPulseLaser>(CFuncTankPulseLaser*)::nameHolder
 B datamap_t* DataMapInit<CFuncTankRocket>(CFuncTankRocket*)::nameHolder
 B datamap_t* DataMapInit<CFuncTankTrain>(CFuncTankTrain*)::dataDesc
 B datamap_t* DataMapInit<CFuncTankTrain>(CFuncTankTrain*)::nameHolder
 B datamap_t* DataMapInit<CFuncTrackAuto>(CFuncTrackAuto*)::nameHolder
 B datamap_t* DataMapInit<CFuncTrackChange>(CFuncTrackChange*)::dataDesc
 B datamap_t* DataMapInit<CFuncTrackChange>(CFuncTrackChange*)::nameHolder
 B datamap_t* DataMapInit<CFuncTrackTrain>(CFuncTrackTrain*)::dataDesc
 B datamap_t* DataMapInit<CFuncTrackTrain>(CFuncTrackTrain*)::nameHolder
 B datamap_t* DataMapInit<CFuncTrain>(CFuncTrain*)::dataDesc
 B datamap_t* DataMapInit<CFuncTrain>(CFuncTrain*)::nameHolder
 B datamap_t* DataMapInit<CFuncTrainControls>(CFuncTrainControls*)::dataDesc
 B datamap_t* DataMapInit<CFuncTrainControls>(CFuncTrainControls*)::nameHolder
 B datamap_t* DataMapInit<CFuncVPhysicsClip>(CFuncVPhysicsClip*)::nameHolder
 B datamap_t* DataMapInit<CFuncVehicleClip>(CFuncVehicleClip*)::nameHolder
 B datamap_t* DataMapInit<CFuncWall>(CFuncWall*)::nameHolder
 B datamap_t* DataMapInit<CFuncWallToggle>(CFuncWallToggle*)::nameHolder
 B datamap_t* DataMapInit<CFunc_Dust>(CFunc_Dust*)::nameHolder
 B datamap_t* DataMapInit<CFunc_LOD>(CFunc_LOD*)::nameHolder
 B datamap_t* DataMapInit<CGameEnd>(CGameEnd*)::nameHolder
 B datamap_t* DataMapInit<CGameGibManager>(CGameGibManager*)::nameHolder
 B datamap_t* DataMapInit<CGamePlayerEquip>(CGamePlayerEquip*)::nameHolder
 B datamap_t* DataMapInit<CGamePlayerZone>(CGamePlayerZone*)::dataDesc
 B datamap_t* DataMapInit<CGamePlayerZone>(CGamePlayerZone*)::nameHolder
 B datamap_t* DataMapInit<CGameScore>(CGameScore*)::nameHolder
 B datamap_t* DataMapInit<CGameText>(CGameText*)::nameHolder
 B datamap_t* DataMapInit<CGameUI>(CGameUI*)::dataDesc
 B datamap_t* DataMapInit<CGameUI>(CGameUI*)::nameHolder
 B datamap_t* DataMapInit<CGameWeaponManager>(CGameWeaponManager*)::dataDesc
 B datamap_t* DataMapInit<CGameWeaponManager>(CGameWeaponManager*)::nameHolder
 B datamap_t* DataMapInit<CGenericActor>(CGenericActor*)::nameHolder
 B datamap_t* DataMapInit<CGib>(CGib*)::dataDesc
 B datamap_t* DataMapInit<CGib>(CGib*)::nameHolder
 B datamap_t* DataMapInit<CGibShooter>(CGibShooter*)::dataDesc
 B datamap_t* DataMapInit<CGibShooter>(CGibShooter*)::nameHolder
 B datamap_t* DataMapInit<CGlobalState>(CGlobalState*)::dataDesc
 B datamap_t* DataMapInit<CGlobalState>(CGlobalState*)::nameHolder
 B datamap_t* DataMapInit<CGrenadeAR2>(CGrenadeAR2*)::dataDesc
 B datamap_t* DataMapInit<CGrenadeAR2>(CGrenadeAR2*)::nameHolder
 B datamap_t* DataMapInit<CGrenadeBeam>(CGrenadeBeam*)::dataDesc
 B datamap_t* DataMapInit<CGrenadeBeam>(CGrenadeBeam*)::nameHolder
 B datamap_t* DataMapInit<CGrenadeBeamChaser>(CGrenadeBeamChaser*)::dataDesc
 B datamap_t* DataMapInit<CGrenadeBeamChaser>(CGrenadeBeamChaser*)::nameHolder
 B datamap_t* DataMapInit<CGrenadeBugBait>(CGrenadeBugBait*)::dataDesc
 B datamap_t* DataMapInit<CGrenadeBugBait>(CGrenadeBugBait*)::nameHolder
 B datamap_t* DataMapInit<CGrenadeFrag>(CGrenadeFrag*)::dataDesc
 B datamap_t* DataMapInit<CGrenadeFrag>(CGrenadeFrag*)::nameHolder
 B datamap_t* DataMapInit<CGrenadeHelicopter>(CGrenadeHelicopter*)::dataDesc
 B datamap_t* DataMapInit<CGrenadeHelicopter>(CGrenadeHelicopter*)::nameHolder
 B datamap_t* DataMapInit<CGrenadeHomer>(CGrenadeHomer*)::dataDesc
 B datamap_t* DataMapInit<CGrenadeHomer>(CGrenadeHomer*)::nameHolder
 B datamap_t* DataMapInit<CGrenadePathfollower>(CGrenadePathfollower*)::dataDesc
 B datamap_t* DataMapInit<CGrenadePathfollower>(CGrenadePathfollower*)::nameHolder
 B datamap_t* DataMapInit<CGunTarget>(CGunTarget*)::dataDesc
 B datamap_t* DataMapInit<CGunTarget>(CGunTarget*)::nameHolder
 B datamap_t* DataMapInit<CGunshipRagdollMotion>(CGunshipRagdollMotion*)::dataDesc
 B datamap_t* DataMapInit<CGunshipRagdollMotion>(CGunshipRagdollMotion*)::nameHolder
 B datamap_t* DataMapInit<CHL2MPMachineGun>(CHL2MPMachineGun*)::nameHolder
 B datamap_t* DataMapInit<CHL2MP_Player>(CHL2MP_Player*)::dataDesc
 B datamap_t* DataMapInit<CHL2MP_Player>(CHL2MP_Player*)::nameHolder
 B datamap_t* DataMapInit<CHL2PlayerLocalData>(CHL2PlayerLocalData*)::nameHolder
 B datamap_t* DataMapInit<CHL2_Player>(CHL2_Player*)::dataDesc
 B datamap_t* DataMapInit<CHL2_Player>(CHL2_Player*)::nameHolder
 B datamap_t* DataMapInit<CHLMachineGun>(CHLMachineGun*)::nameHolder
 B datamap_t* DataMapInit<CHLSelectFireMachineGun>(CHLSelectFireMachineGun*)::dataDesc
 B datamap_t* DataMapInit<CHLSelectFireMachineGun>(CHLSelectFireMachineGun*)::nameHolder
 B datamap_t* DataMapInit<CHelicopterChunk>(CHelicopterChunk*)::dataDesc
 B datamap_t* DataMapInit<CHelicopterChunk>(CHelicopterChunk*)::nameHolder
 B datamap_t* DataMapInit<CInfoAPCMissileHint>(CInfoAPCMissileHint*)::nameHolder
 B datamap_t* DataMapInit<CInfoCameraLink>(CInfoCameraLink*)::nameHolder
 B datamap_t* DataMapInit<CInfoLightingRelative>(CInfoLightingRelative*)::nameHolder
 B datamap_t* DataMapInit<CInfoOverlayAccessor>(CInfoOverlayAccessor*)::nameHolder
 B datamap_t* DataMapInit<CInfoTeleporterCountdown>(CInfoTeleporterCountdown*)::nameHolder
 B datamap_t* DataMapInit<CInstancedSceneEntity>(CInstancedSceneEntity*)::nameHolder
 B datamap_t* DataMapInit<CItem>(CItem*)::dataDesc
 B datamap_t* DataMapInit<CItem>(CItem*)::nameHolder
 B datamap_t* DataMapInit<CItemSoda>(CItemSoda*)::dataDesc
 B datamap_t* DataMapInit<CItemSoda>(CItemSoda*)::nameHolder
 B datamap_t* DataMapInit<CItem_AmmoCrate>(CItem_AmmoCrate*)::dataDesc
 B datamap_t* DataMapInit<CItem_AmmoCrate>(CItem_AmmoCrate*)::nameHolder
 B datamap_t* DataMapInit<CItem_DynamicResupply>(CItem_DynamicResupply*)::dataDesc
 B datamap_t* DataMapInit<CItem_DynamicResupply>(CItem_DynamicResupply*)::nameHolder
 B datamap_t* DataMapInit<CItem_ItemCrate>(CItem_ItemCrate*)::dataDesc
 B datamap_t* DataMapInit<CItem_ItemCrate>(CItem_ItemCrate*)::nameHolder
 B datamap_t* DataMapInit<CKeepUpright>(CKeepUpright*)::dataDesc
 B datamap_t* DataMapInit<CKeepUpright>(CKeepUpright*)::nameHolder
 B datamap_t* DataMapInit<CLaserDot>(CLaserDot*)::nameHolder
 B datamap_t* DataMapInit<CLight>(CLight*)::dataDesc
 B datamap_t* DataMapInit<CLight>(CLight*)::nameHolder
 B datamap_t* DataMapInit<CLightGlow>(CLightGlow*)::nameHolder
 B datamap_t* DataMapInit<CLogicActiveAutosave>(CLogicActiveAutosave*)::dataDesc
 B datamap_t* DataMapInit<CLogicActiveAutosave>(CLogicActiveAutosave*)::nameHolder
 B datamap_t* DataMapInit<CLogicAuto>(CLogicAuto*)::dataDesc
 B datamap_t* DataMapInit<CLogicAuto>(CLogicAuto*)::nameHolder
 B datamap_t* DataMapInit<CLogicAutosave>(CLogicAutosave*)::nameHolder
 B datamap_t* DataMapInit<CLogicBranch>(CLogicBranch*)::dataDesc
 B datamap_t* DataMapInit<CLogicBranch>(CLogicBranch*)::nameHolder
 B datamap_t* DataMapInit<CLogicBranchList>(CLogicBranchList*)::dataDesc
 B datamap_t* DataMapInit<CLogicBranchList>(CLogicBranchList*)::nameHolder
 B datamap_t* DataMapInit<CLogicCase>(CLogicCase*)::dataDesc
 B datamap_t* DataMapInit<CLogicCase>(CLogicCase*)::nameHolder
 B datamap_t* DataMapInit<CLogicCollisionPair>(CLogicCollisionPair*)::nameHolder
 B datamap_t* DataMapInit<CLogicCompare>(CLogicCompare*)::dataDesc
 B datamap_t* DataMapInit<CLogicCompare>(CLogicCompare*)::nameHolder
 B datamap_t* DataMapInit<CLogicCompareInteger>(CLogicCompareInteger*)::dataDesc
 B datamap_t* DataMapInit<CLogicCompareInteger>(CLogicCompareInteger*)::nameHolder
 B datamap_t* DataMapInit<CLogicLineToEntity>(CLogicLineToEntity*)::dataDesc
 B datamap_t* DataMapInit<CLogicLineToEntity>(CLogicLineToEntity*)::nameHolder
 B datamap_t* DataMapInit<CLogicMeasureMovement>(CLogicMeasureMovement*)::dataDesc
 B datamap_t* DataMapInit<CLogicMeasureMovement>(CLogicMeasureMovement*)::nameHolder
 B datamap_t* DataMapInit<CLogicNavigation>(CLogicNavigation*)::nameHolder
 B datamap_t* DataMapInit<CLogicPlayerProxy>(CLogicPlayerProxy*)::dataDesc
 B datamap_t* DataMapInit<CLogicPlayerProxy>(CLogicPlayerProxy*)::nameHolder
 B datamap_t* DataMapInit<CLogicRelay>(CLogicRelay*)::dataDesc
 B datamap_t* DataMapInit<CLogicRelay>(CLogicRelay*)::nameHolder
 B datamap_t* DataMapInit<CLookDoor>(CLookDoor*)::dataDesc
 B datamap_t* DataMapInit<CLookDoor>(CLookDoor*)::nameHolder
 B datamap_t* DataMapInit<CLookDoorThinker>(CLookDoorThinker*)::dataDesc
 B datamap_t* DataMapInit<CLookDoorThinker>(CLookDoorThinker*)::nameHolder
 B datamap_t* DataMapInit<CMaterialModifyControl>(CMaterialModifyControl*)::nameHolder
 B datamap_t* DataMapInit<CMathColorBlend>(CMathColorBlend*)::dataDesc
 B datamap_t* DataMapInit<CMathColorBlend>(CMathColorBlend*)::nameHolder
 B datamap_t* DataMapInit<CMathCounter>(CMathCounter*)::dataDesc
 B datamap_t* DataMapInit<CMathCounter>(CMathCounter*)::nameHolder
 B datamap_t* DataMapInit<CMathRemap>(CMathRemap*)::dataDesc
 B datamap_t* DataMapInit<CMathRemap>(CMathRemap*)::nameHolder
 B datamap_t* DataMapInit<CMessage>(CMessage*)::dataDesc
 B datamap_t* DataMapInit<CMessage>(CMessage*)::nameHolder
 B datamap_t* DataMapInit<CMessageEntity>(CMessageEntity*)::nameHolder
 B datamap_t* DataMapInit<CMissile>(CMissile*)::dataDesc
 B datamap_t* DataMapInit<CMissile>(CMissile*)::nameHolder
 B datamap_t* DataMapInit<CMomentaryRotButton>(CMomentaryRotButton*)::dataDesc
 B datamap_t* DataMapInit<CMomentaryRotButton>(CMomentaryRotButton*)::nameHolder
 B datamap_t* DataMapInit<CMortarShell>(CMortarShell*)::dataDesc
 B datamap_t* DataMapInit<CMortarShell>(CMortarShell*)::nameHolder
 B datamap_t* DataMapInit<CMotorController>(CMotorController*)::nameHolder
 B datamap_t* DataMapInit<CMovementSpeedMod>(CMovementSpeedMod*)::nameHolder
 B datamap_t* DataMapInit<CMultiDamage>(CMultiDamage*)::nameHolder
 B datamap_t* DataMapInit<CMultiSource>(CMultiSource*)::dataDesc
 B datamap_t* DataMapInit<CMultiSource>(CMultiSource*)::nameHolder
 B datamap_t* DataMapInit<CNPCMaker>(CNPCMaker*)::nameHolder
 B datamap_t* DataMapInit<CNPCSimpleTalker>(CNPCSimpleTalker*)::dataDesc
 B datamap_t* DataMapInit<CNPCSimpleTalker>(CNPCSimpleTalker*)::nameHolder
 B datamap_t* DataMapInit<CNPCSimpleTalkerExpresser>(CNPCSimpleTalkerExpresser*)::nameHolder
 B datamap_t* DataMapInit<CNPCSpawnDestination>(CNPCSpawnDestination*)::dataDesc
 B datamap_t* DataMapInit<CNPCSpawnDestination>(CNPCSpawnDestination*)::nameHolder
 B datamap_t* DataMapInit<CNPC_APCDriver>(CNPC_APCDriver*)::nameHolder
 B datamap_t* DataMapInit<CNPC_Alyx>(CNPC_Alyx*)::nameHolder
 B datamap_t* DataMapInit<CNPC_Antlion>(CNPC_Antlion*)::dataDesc
 B datamap_t* DataMapInit<CNPC_Antlion>(CNPC_Antlion*)::nameHolder
 B datamap_t* DataMapInit<CNPC_AntlionGuard>(CNPC_AntlionGuard*)::dataDesc
 B datamap_t* DataMapInit<CNPC_AntlionGuard>(CNPC_AntlionGuard*)::nameHolder
 B datamap_t* DataMapInit<CNPC_AttackHelicopter>(CNPC_AttackHelicopter*)::dataDesc
 B datamap_t* DataMapInit<CNPC_AttackHelicopter>(CNPC_AttackHelicopter*)::nameHolder
 B datamap_t* DataMapInit<CNPC_Barnacle>(CNPC_Barnacle*)::dataDesc
 B datamap_t* DataMapInit<CNPC_Barnacle>(CNPC_Barnacle*)::nameHolder
 B datamap_t* DataMapInit<CNPC_Barney>(CNPC_Barney*)::dataDesc
 B datamap_t* DataMapInit<CNPC_Barney>(CNPC_Barney*)::nameHolder
 B datamap_t* DataMapInit<CNPC_BaseScanner>(CNPC_BaseScanner*)::dataDesc
 B datamap_t* DataMapInit<CNPC_BaseScanner>(CNPC_BaseScanner*)::nameHolder
 B datamap_t* DataMapInit<CNPC_BaseZombie>(CNPC_BaseZombie*)::dataDesc
 B datamap_t* DataMapInit<CNPC_BaseZombie>(CNPC_BaseZombie*)::nameHolder
 B datamap_t* DataMapInit<CNPC_Bullseye>(CNPC_Bullseye*)::dataDesc
 B datamap_t* DataMapInit<CNPC_Bullseye>(CNPC_Bullseye*)::nameHolder
 B datamap_t* DataMapInit<CNPC_CScanner>(CNPC_CScanner*)::dataDesc
 B datamap_t* DataMapInit<CNPC_CScanner>(CNPC_CScanner*)::nameHolder
 B datamap_t* DataMapInit<CNPC_CeilingTurret>(CNPC_CeilingTurret*)::dataDesc
 B datamap_t* DataMapInit<CNPC_CeilingTurret>(CNPC_CeilingTurret*)::nameHolder
 B datamap_t* DataMapInit<CNPC_Citizen>(CNPC_Citizen*)::dataDesc
 B datamap_t* DataMapInit<CNPC_Citizen>(CNPC_Citizen*)::nameHolder
 B datamap_t* DataMapInit<CNPC_ClawScanner>(CNPC_ClawScanner*)::dataDesc
 B datamap_t* DataMapInit<CNPC_ClawScanner>(CNPC_ClawScanner*)::nameHolder
 B datamap_t* DataMapInit<CNPC_Combine>(CNPC_Combine*)::nameHolder
 B datamap_t* DataMapInit<CNPC_CombineCamera>(CNPC_CombineCamera*)::dataDesc
 B datamap_t* DataMapInit<CNPC_CombineCamera>(CNPC_CombineCamera*)::nameHolder
 B datamap_t* DataMapInit<CNPC_CombineDropship>(CNPC_CombineDropship*)::dataDesc
 B datamap_t* DataMapInit<CNPC_CombineDropship>(CNPC_CombineDropship*)::nameHolder
 B datamap_t* DataMapInit<CNPC_CombineGunship>(CNPC_CombineGunship*)::dataDesc
 B datamap_t* DataMapInit<CNPC_CombineGunship>(CNPC_CombineGunship*)::nameHolder
 B datamap_t* DataMapInit<CNPC_CraneDriver>(CNPC_CraneDriver*)::dataDesc
 B datamap_t* DataMapInit<CNPC_CraneDriver>(CNPC_CraneDriver*)::nameHolder
 B datamap_t* DataMapInit<CNPC_Crow>(CNPC_Crow*)::nameHolder
 B datamap_t* DataMapInit<CNPC_Dog>(CNPC_Dog*)::dataDesc
 B datamap_t* DataMapInit<CNPC_Dog>(CNPC_Dog*)::nameHolder
 B datamap_t* DataMapInit<CNPC_EnemyFinder>(CNPC_EnemyFinder*)::dataDesc
 B datamap_t* DataMapInit<CNPC_EnemyFinder>(CNPC_EnemyFinder*)::nameHolder
 B datamap_t* DataMapInit<CNPC_EnemyFinderCombineCannon>(CNPC_EnemyFinderCombineCannon*)::nameHolder
 B datamap_t* DataMapInit<CNPC_Fisherman>(CNPC_Fisherman*)::nameHolder
 B datamap_t* DataMapInit<CNPC_FloorTurret>(CNPC_FloorTurret*)::dataDesc
 B datamap_t* DataMapInit<CNPC_FloorTurret>(CNPC_FloorTurret*)::nameHolder
 B datamap_t* DataMapInit<CNPC_Furniture>(CNPC_Furniture*)::nameHolder
 B datamap_t* DataMapInit<CNPC_GMan>(CNPC_GMan*)::dataDesc
 B datamap_t* DataMapInit<CNPC_GMan>(CNPC_GMan*)::nameHolder
 B datamap_t* DataMapInit<CNPC_GroundTurret>(CNPC_GroundTurret*)::dataDesc
 B datamap_t* DataMapInit<CNPC_GroundTurret>(CNPC_GroundTurret*)::nameHolder
 B datamap_t* DataMapInit<CNPC_Ichthyosaur>(CNPC_Ichthyosaur*)::nameHolder
 B datamap_t* DataMapInit<CNPC_Launcher>(CNPC_Launcher*)::dataDesc
 B datamap_t* DataMapInit<CNPC_Launcher>(CNPC_Launcher*)::nameHolder
 B datamap_t* DataMapInit<CNPC_Manhack>(CNPC_Manhack*)::dataDesc
 B datamap_t* DataMapInit<CNPC_Manhack>(CNPC_Manhack*)::nameHolder
 B datamap_t* DataMapInit<CNPC_MetroPolice>(CNPC_MetroPolice*)::dataDesc
 B datamap_t* DataMapInit<CNPC_MetroPolice>(CNPC_MetroPolice*)::nameHolder
 B datamap_t* DataMapInit<CNPC_MissileDefense>(CNPC_MissileDefense*)::nameHolder
 B datamap_t* DataMapInit<CNPC_Monk>(CNPC_Monk*)::nameHolder
 B datamap_t* DataMapInit<CNPC_Mossman>(CNPC_Mossman*)::dataDesc
 B datamap_t* DataMapInit<CNPC_Mossman>(CNPC_Mossman*)::nameHolder
 B datamap_t* DataMapInit<CNPC_PlayerCompanion>(CNPC_PlayerCompanion*)::dataDesc
 B datamap_t* DataMapInit<CNPC_PlayerCompanion>(CNPC_PlayerCompanion*)::nameHolder
 B datamap_t* DataMapInit<CNPC_PoisonZombie>(CNPC_PoisonZombie*)::dataDesc
 B datamap_t* DataMapInit<CNPC_PoisonZombie>(CNPC_PoisonZombie*)::nameHolder
 B datamap_t* DataMapInit<CNPC_RollerMine>(CNPC_RollerMine*)::dataDesc
 B datamap_t* DataMapInit<CNPC_RollerMine>(CNPC_RollerMine*)::nameHolder
 B datamap_t* DataMapInit<CNPC_Stalker>(CNPC_Stalker*)::dataDesc
 B datamap_t* DataMapInit<CNPC_Stalker>(CNPC_Stalker*)::nameHolder
 B datamap_t* DataMapInit<CNPC_Strider>(CNPC_Strider*)::dataDesc
 B datamap_t* DataMapInit<CNPC_Strider>(CNPC_Strider*)::nameHolder
 B datamap_t* DataMapInit<CNPC_VehicleDriver>(CNPC_VehicleDriver*)::nameHolder
 B datamap_t* DataMapInit<CNPC_Vortigaunt>(CNPC_Vortigaunt*)::dataDesc
 B datamap_t* DataMapInit<CNPC_Vortigaunt>(CNPC_Vortigaunt*)::nameHolder
 B datamap_t* DataMapInit<CNewNPC>(CNewNPC*)::nameHolder
 B datamap_t* DataMapInit<CNewRecharge>(CNewRecharge*)::dataDesc
 B datamap_t* DataMapInit<CNewRecharge>(CNewRecharge*)::nameHolder
 B datamap_t* DataMapInit<CNewWallHealth>(CNewWallHealth*)::dataDesc
 B datamap_t* DataMapInit<CNewWallHealth>(CNewWallHealth*)::nameHolder
 B datamap_t* DataMapInit<CNodeEnt>(CNodeEnt*)::nameHolder
 B datamap_t* DataMapInit<COrnamentProp>(COrnamentProp*)::nameHolder
 B datamap_t* DataMapInit<CParticleFire>(CParticleFire*)::nameHolder
 B datamap_t* DataMapInit<CParticleLight>(CParticleLight*)::nameHolder
 B datamap_t* DataMapInit<CParticlePerformanceMonitor>(CParticlePerformanceMonitor*)::nameHolder
 B datamap_t* DataMapInit<CParticleSystem>(CParticleSystem*)::dataDesc
 B datamap_t* DataMapInit<CParticleSystem>(CParticleSystem*)::nameHolder
 B datamap_t* DataMapInit<CPassengerInfo>(CPassengerInfo*)::nameHolder
 B datamap_t* DataMapInit<CPathCorner>(CPathCorner*)::dataDesc
 B datamap_t* DataMapInit<CPathCorner>(CPathCorner*)::nameHolder
 B datamap_t* DataMapInit<CPathKeyFrame>(CPathKeyFrame*)::nameHolder
 B datamap_t* DataMapInit<CPathTrack>(CPathTrack*)::dataDesc
 B datamap_t* DataMapInit<CPathTrack>(CPathTrack*)::nameHolder
 B datamap_t* DataMapInit<CPhysBox>(CPhysBox*)::dataDesc
 B datamap_t* DataMapInit<CPhysBox>(CPhysBox*)::nameHolder
 B datamap_t* DataMapInit<CPhysBoxMultiplayer>(CPhysBoxMultiplayer*)::dataDesc
 B datamap_t* DataMapInit<CPhysBoxMultiplayer>(CPhysBoxMultiplayer*)::nameHolder
 B datamap_t* DataMapInit<CPhysConstraint>(CPhysConstraint*)::dataDesc
 B datamap_t* DataMapInit<CPhysConstraint>(CPhysConstraint*)::nameHolder
 B datamap_t* DataMapInit<CPhysConstraintSystem>(CPhysConstraintSystem*)::dataDesc
 B datamap_t* DataMapInit<CPhysConstraintSystem>(CPhysConstraintSystem*)::nameHolder
 B datamap_t* DataMapInit<CPhysConvert>(CPhysConvert*)::dataDesc
 B datamap_t* DataMapInit<CPhysConvert>(CPhysConvert*)::nameHolder
 B datamap_t* DataMapInit<CPhysExplosion>(CPhysExplosion*)::dataDesc
 B datamap_t* DataMapInit<CPhysExplosion>(CPhysExplosion*)::nameHolder
 B datamap_t* DataMapInit<CPhysForce>(CPhysForce*)::dataDesc
 B datamap_t* DataMapInit<CPhysForce>(CPhysForce*)::nameHolder
 B datamap_t* DataMapInit<CPhysHinge>(CPhysHinge*)::nameHolder
 B datamap_t* DataMapInit<CPhysImpact>(CPhysImpact*)::dataDesc
 B datamap_t* DataMapInit<CPhysImpact>(CPhysImpact*)::nameHolder
 B datamap_t* DataMapInit<CPhysLength>(CPhysLength*)::nameHolder
 B datamap_t* DataMapInit<CPhysMagnet>(CPhysMagnet*)::dataDesc
 B datamap_t* DataMapInit<CPhysMagnet>(CPhysMagnet*)::nameHolder
 B datamap_t* DataMapInit<CPhysMotor>(CPhysMotor*)::dataDesc
 B datamap_t* DataMapInit<CPhysMotor>(CPhysMotor*)::nameHolder
 B datamap_t* DataMapInit<CPhysPulley>(CPhysPulley*)::nameHolder
 B datamap_t* DataMapInit<CPhysSlideConstraint>(CPhysSlideConstraint*)::nameHolder
 B datamap_t* DataMapInit<CPhysThruster>(CPhysThruster*)::nameHolder
 B datamap_t* DataMapInit<CPhysTorque>(CPhysTorque*)::nameHolder
 B datamap_t* DataMapInit<CPhysicsCannister>(CPhysicsCannister*)::dataDesc
 B datamap_t* DataMapInit<CPhysicsCannister>(CPhysicsCannister*)::nameHolder
 B datamap_t* DataMapInit<CPhysicsEntitySolver>(CPhysicsEntitySolver*)::nameHolder
 B datamap_t* DataMapInit<CPhysicsNPCSolver>(CPhysicsNPCSolver*)::dataDesc
 B datamap_t* DataMapInit<CPhysicsNPCSolver>(CPhysicsNPCSolver*)::nameHolder
 B datamap_t* DataMapInit<CPhysicsProp>(CPhysicsProp*)::dataDesc
 B datamap_t* DataMapInit<CPhysicsProp>(CPhysicsProp*)::nameHolder
 B datamap_t* DataMapInit<CPhysicsPropMultiplayer>(CPhysicsPropMultiplayer*)::nameHolder
 B datamap_t* DataMapInit<CPhysicsPropRespawnable>(CPhysicsPropRespawnable*)::dataDesc
 B datamap_t* DataMapInit<CPhysicsPropRespawnable>(CPhysicsPropRespawnable*)::nameHolder
 B datamap_t* DataMapInit<CPhysicsShake>(CPhysicsShake*)::nameHolder
 B datamap_t* DataMapInit<CPhysicsSpring>(CPhysicsSpring*)::dataDesc
 B datamap_t* DataMapInit<CPhysicsSpring>(CPhysicsSpring*)::nameHolder
 B datamap_t* DataMapInit<CPhysicsWind>(CPhysicsWind*)::nameHolder
 B datamap_t* DataMapInit<CPhysicsWire>(CPhysicsWire*)::nameHolder
 B datamap_t* DataMapInit<CPlasma>(CPlasma*)::nameHolder
 B datamap_t* DataMapInit<CPlayerLocalData>(CPlayerLocalData*)::nameHolder
 B datamap_t* DataMapInit<CPlayerResource>(CPlayerResource*)::dataDesc
 B datamap_t* DataMapInit<CPlayerResource>(CPlayerResource*)::nameHolder
 B datamap_t* DataMapInit<CPlayerState>(CPlayerState*)::nameHolder
 B datamap_t* DataMapInit<CPointAngleSensor>(CPointAngleSensor*)::dataDesc
 B datamap_t* DataMapInit<CPointAngleSensor>(CPointAngleSensor*)::nameHolder
 B datamap_t* DataMapInit<CPointAngularVelocitySensor>(CPointAngularVelocitySensor*)::dataDesc
 B datamap_t* DataMapInit<CPointAngularVelocitySensor>(CPointAngularVelocitySensor*)::nameHolder
 B datamap_t* DataMapInit<CPointBonusMapsAccessor>(CPointBonusMapsAccessor*)::nameHolder
 B datamap_t* DataMapInit<CPointCamera>(CPointCamera*)::dataDesc
 B datamap_t* DataMapInit<CPointCamera>(CPointCamera*)::nameHolder
 B datamap_t* DataMapInit<CPointClientCommand>(CPointClientCommand*)::nameHolder
 B datamap_t* DataMapInit<CPointCombineBallLauncher>(CPointCombineBallLauncher*)::nameHolder
 B datamap_t* DataMapInit<CPointCommentaryNode>(CPointCommentaryNode*)::dataDesc
 B datamap_t* DataMapInit<CPointCommentaryNode>(CPointCommentaryNode*)::nameHolder
 B datamap_t* DataMapInit<CPointDevShotCamera>(CPointDevShotCamera*)::dataDesc
 B datamap_t* DataMapInit<CPointDevShotCamera>(CPointDevShotCamera*)::nameHolder
 B datamap_t* DataMapInit<CPointGamestatsCounter>(CPointGamestatsCounter*)::nameHolder
 B datamap_t* DataMapInit<CPointHurt>(CPointHurt*)::dataDesc
 B datamap_t* DataMapInit<CPointHurt>(CPointHurt*)::nameHolder
 B datamap_t* DataMapInit<CPointPlayerMoveConstraint>(CPointPlayerMoveConstraint*)::dataDesc
 B datamap_t* DataMapInit<CPointPlayerMoveConstraint>(CPointPlayerMoveConstraint*)::nameHolder
 B datamap_t* DataMapInit<CPointProximitySensor>(CPointProximitySensor*)::dataDesc
 B datamap_t* DataMapInit<CPointProximitySensor>(CPointProximitySensor*)::nameHolder
 B datamap_t* DataMapInit<CPointPush>(CPointPush*)::dataDesc
 B datamap_t* DataMapInit<CPointPush>(CPointPush*)::nameHolder
 B datamap_t* DataMapInit<CPointServerCommand>(CPointServerCommand*)::nameHolder
 B datamap_t* DataMapInit<CPointSpotlight>(CPointSpotlight*)::dataDesc
 B datamap_t* DataMapInit<CPointSpotlight>(CPointSpotlight*)::nameHolder
 B datamap_t* DataMapInit<CPointTeleport>(CPointTeleport*)::nameHolder
 B datamap_t* DataMapInit<CPointTemplate>(CPointTemplate*)::dataDesc
 B datamap_t* DataMapInit<CPointTemplate>(CPointTemplate*)::nameHolder
 B datamap_t* DataMapInit<CPointVelocitySensor>(CPointVelocitySensor*)::dataDesc
 B datamap_t* DataMapInit<CPointVelocitySensor>(CPointVelocitySensor*)::nameHolder
 B datamap_t* DataMapInit<CPoseController>(CPoseController*)::dataDesc
 B datamap_t* DataMapInit<CPoseController>(CPoseController*)::nameHolder
 B datamap_t* DataMapInit<CPrecipitation>(CPrecipitation*)::nameHolder
 B datamap_t* DataMapInit<CProjectedDecal>(CProjectedDecal*)::dataDesc
 B datamap_t* DataMapInit<CProjectedDecal>(CProjectedDecal*)::nameHolder
 B datamap_t* DataMapInit<CPropAPC>(CPropAPC*)::dataDesc
 B datamap_t* DataMapInit<CPropAPC>(CPropAPC*)::nameHolder
 B datamap_t* DataMapInit<CPropAirboat>(CPropAirboat*)::dataDesc
 B datamap_t* DataMapInit<CPropAirboat>(CPropAirboat*)::nameHolder
 B datamap_t* DataMapInit<CPropCombineBall>(CPropCombineBall*)::dataDesc
 B datamap_t* DataMapInit<CPropCombineBall>(CPropCombineBall*)::nameHolder
 B datamap_t* DataMapInit<CPropCrane>(CPropCrane*)::dataDesc
 B datamap_t* DataMapInit<CPropCrane>(CPropCrane*)::nameHolder
 B datamap_t* DataMapInit<CPropDoorRotating>(CPropDoorRotating*)::nameHolder
 B datamap_t* DataMapInit<CPropThumper>(CPropThumper*)::dataDesc
 B datamap_t* DataMapInit<CPropThumper>(CPropThumper*)::nameHolder
 B datamap_t* DataMapInit<CPropVehicle>(CPropVehicle*)::dataDesc
 B datamap_t* DataMapInit<CPropVehicle>(CPropVehicle*)::nameHolder
 B datamap_t* DataMapInit<CPropVehicleDriveable>(CPropVehicleDriveable*)::dataDesc
 B datamap_t* DataMapInit<CPropVehicleDriveable>(CPropVehicleDriveable*)::nameHolder
 B datamap_t* DataMapInit<CPropVehiclePrisonerPod>(CPropVehiclePrisonerPod*)::dataDesc
 B datamap_t* DataMapInit<CPropVehiclePrisonerPod>(CPropVehiclePrisonerPod*)::nameHolder
 B datamap_t* DataMapInit<CPropVehicleViewController>(CPropVehicleViewController*)::nameHolder
 B datamap_t* DataMapInit<CProtoSniper>(CProtoSniper*)::dataDesc
 B datamap_t* DataMapInit<CProtoSniper>(CProtoSniper*)::nameHolder
 B datamap_t* DataMapInit<CRagdollBoogie>(CRagdollBoogie*)::dataDesc
 B datamap_t* DataMapInit<CRagdollBoogie>(CRagdollBoogie*)::nameHolder
 B datamap_t* DataMapInit<CRagdollConstraint>(CRagdollConstraint*)::nameHolder
 B datamap_t* DataMapInit<CRagdollMagnet>(CRagdollMagnet*)::nameHolder
 B datamap_t* DataMapInit<CRagdollManager>(CRagdollManager*)::nameHolder
 B datamap_t* DataMapInit<CRagdollProp>(CRagdollProp*)::dataDesc
 B datamap_t* DataMapInit<CRagdollProp>(CRagdollProp*)::nameHolder
 B datamap_t* DataMapInit<CRagdollPropAttached>(CRagdollPropAttached*)::dataDesc
 B datamap_t* DataMapInit<CRagdollPropAttached>(CRagdollPropAttached*)::nameHolder
 B datamap_t* DataMapInit<CRallyPoint>(CRallyPoint*)::dataDesc
 B datamap_t* DataMapInit<CRallyPoint>(CRallyPoint*)::nameHolder
 B datamap_t* DataMapInit<CRandSimTimer>(CRandSimTimer*)::nameHolder
 B datamap_t* DataMapInit<CRandStopwatch>(CRandStopwatch*)::nameHolder
 B datamap_t* DataMapInit<CRecharge>(CRecharge*)::dataDesc
 B datamap_t* DataMapInit<CRecharge>(CRecharge*)::nameHolder
 B datamap_t* DataMapInit<CRevertSaved>(CRevertSaved*)::dataDesc
 B datamap_t* DataMapInit<CRevertSaved>(CRevertSaved*)::nameHolder
 B datamap_t* DataMapInit<CRollerController>(CRollerController*)::nameHolder
 B datamap_t* DataMapInit<CRopeAnchor>(CRopeAnchor*)::dataDesc
 B datamap_t* DataMapInit<CRopeAnchor>(CRopeAnchor*)::nameHolder
 B datamap_t* DataMapInit<CRopeKeyframe>(CRopeKeyframe*)::nameHolder
 B datamap_t* DataMapInit<CRotDoor>(CRotDoor*)::nameHolder
 B datamap_t* DataMapInit<CRotorWashEmitter>(CRotorWashEmitter*)::nameHolder
 B datamap_t* DataMapInit<CRotorWashShooter>(CRotorWashShooter*)::nameHolder
 B datamap_t* DataMapInit<CRuleEntity>(CRuleEntity*)::nameHolder
 B datamap_t* DataMapInit<CRulePointEntity>(CRulePointEntity*)::nameHolder
 B datamap_t* DataMapInit<CSatchelCharge>(CSatchelCharge*)::dataDesc
 B datamap_t* DataMapInit<CSatchelCharge>(CSatchelCharge*)::nameHolder
 B datamap_t* DataMapInit<CSceneEntity>(CSceneEntity*)::dataDesc
 B datamap_t* DataMapInit<CSceneEntity>(CSceneEntity*)::nameHolder
 B datamap_t* DataMapInit<CSceneListManager>(CSceneListManager*)::dataDesc
 B datamap_t* DataMapInit<CSceneListManager>(CSceneListManager*)::nameHolder
 B datamap_t* DataMapInit<CSceneManager>(CSceneManager*)::dataDesc
 B datamap_t* DataMapInit<CSceneManager>(CSceneManager*)::nameHolder
 B datamap_t* DataMapInit<CScriptIntro>(CScriptIntro*)::dataDesc
 B datamap_t* DataMapInit<CScriptIntro>(CScriptIntro*)::nameHolder
 B datamap_t* DataMapInit<CScriptedTarget>(CScriptedTarget*)::dataDesc
 B datamap_t* DataMapInit<CScriptedTarget>(CScriptedTarget*)::nameHolder
 B datamap_t* DataMapInit<CServerNetworkProperty>(CServerNetworkProperty*)::nameHolder
 B datamap_t* DataMapInit<CShadowControl>(CShadowControl*)::nameHolder
 B datamap_t* DataMapInit<CSimTimer>(CSimTimer*)::nameHolder
 B datamap_t* DataMapInit<CSimpleSimTimer>(CSimpleSimTimer*)::nameHolder
 B datamap_t* DataMapInit<CSkyCamera>(CSkyCamera*)::nameHolder
 B datamap_t* DataMapInit<CSlideshowDisplay>(CSlideshowDisplay*)::nameHolder
 B datamap_t* DataMapInit<CSmokeStack>(CSmokeStack*)::nameHolder
 B datamap_t* DataMapInit<CSmokeStackLightInfo>(CSmokeStackLightInfo*)::nameHolder
 B datamap_t* DataMapInit<CSniperBullet>(CSniperBullet*)::dataDesc
 B datamap_t* DataMapInit<CSniperBullet>(CSniperBullet*)::nameHolder
 B datamap_t* DataMapInit<CSniperTarget>(CSniperTarget*)::nameHolder
 B datamap_t* DataMapInit<CSound>(CSound*)::nameHolder
 B datamap_t* DataMapInit<CSoundEnt>(CSoundEnt*)::nameHolder
 B datamap_t* DataMapInit<CSoundEnvelope>(CSoundEnvelope*)::nameHolder
 B datamap_t* DataMapInit<CSoundPatch>(CSoundPatch*)::nameHolder
 B datamap_t* DataMapInit<CSparkTrail>(CSparkTrail*)::dataDesc
 B datamap_t* DataMapInit<CSparkTrail>(CSparkTrail*)::nameHolder
 B datamap_t* DataMapInit<CSpeaker>(CSpeaker*)::dataDesc
 B datamap_t* DataMapInit<CSpeaker>(CSpeaker*)::nameHolder
 B datamap_t* DataMapInit<CSpotlightEnd>(CSpotlightEnd*)::nameHolder
 B datamap_t* DataMapInit<CSprite>(CSprite*)::dataDesc
 B datamap_t* DataMapInit<CSprite>(CSprite*)::nameHolder
 B datamap_t* DataMapInit<CSpriteTrail>(CSpriteTrail*)::nameHolder
 B datamap_t* DataMapInit<CSteamJet>(CSteamJet*)::nameHolder
 B datamap_t* DataMapInit<CStopwatch>(CStopwatch*)::nameHolder
 B datamap_t* DataMapInit<CStopwatchBase>(CStopwatchBase*)::nameHolder
 B datamap_t* DataMapInit<CStriderMinigun>(CStriderMinigun*)::nameHolder
 B datamap_t* DataMapInit<CStripWeapons>(CStripWeapons*)::nameHolder
 B datamap_t* DataMapInit<CSun>(CSun*)::nameHolder
 B datamap_t* DataMapInit<CTakeDamageInfo>(CTakeDamageInfo*)::nameHolder
 B datamap_t* DataMapInit<CTankTargetChange>(CTankTargetChange*)::nameHolder
 B datamap_t* DataMapInit<CTankTrainAI>(CTankTrainAI*)::dataDesc
 B datamap_t* DataMapInit<CTankTrainAI>(CTankTrainAI*)::nameHolder
 B datamap_t* DataMapInit<CTargetCDAudioRep>(CTargetCDAudioRep*)::nameHolder
 B datamap_t* DataMapInit<CTargetChangeGravity>(CTargetChangeGravity*)::nameHolder
 B datamap_t* DataMapInit<CTargetGunshipCrash>(CTargetGunshipCrash*)::dataDesc
 B datamap_t* DataMapInit<CTargetGunshipCrash>(CTargetGunshipCrash*)::nameHolder
 B datamap_t* DataMapInit<CTeamControlPoint>(CTeamControlPoint*)::dataDesc
 B datamap_t* DataMapInit<CTeamControlPoint>(CTeamControlPoint*)::nameHolder
 B datamap_t* DataMapInit<CTeamControlPointMaster>(CTeamControlPointMaster*)::dataDesc
 B datamap_t* DataMapInit<CTeamControlPointMaster>(CTeamControlPointMaster*)::nameHolder
 B datamap_t* DataMapInit<CTeamControlPointRound>(CTeamControlPointRound*)::dataDesc
 B datamap_t* DataMapInit<CTeamControlPointRound>(CTeamControlPointRound*)::nameHolder
 B datamap_t* DataMapInit<CTeamRoundTimer>(CTeamRoundTimer*)::dataDesc
 B datamap_t* DataMapInit<CTeamRoundTimer>(CTeamRoundTimer*)::nameHolder
 B datamap_t* DataMapInit<CTeamSpawnPoint>(CTeamSpawnPoint*)::dataDesc
 B datamap_t* DataMapInit<CTeamSpawnPoint>(CTeamSpawnPoint*)::nameHolder
 B datamap_t* DataMapInit<CTeamTrainWatcher>(CTeamTrainWatcher*)::dataDesc
 B datamap_t* DataMapInit<CTeamTrainWatcher>(CTeamTrainWatcher*)::nameHolder
 B datamap_t* DataMapInit<CTeamVehicleSpawnPoint>(CTeamVehicleSpawnPoint*)::dataDesc
 B datamap_t* DataMapInit<CTeamVehicleSpawnPoint>(CTeamVehicleSpawnPoint*)::nameHolder
 B datamap_t* DataMapInit<CTeamplayRoundBasedRulesProxy>(CTeamplayRoundBasedRulesProxy*)::nameHolder
 B datamap_t* DataMapInit<CTemplateNPCMaker>(CTemplateNPCMaker*)::nameHolder
 B datamap_t* DataMapInit<CTesla>(CTesla*)::dataDesc
 B datamap_t* DataMapInit<CTesla>(CTesla*)::nameHolder
 B datamap_t* DataMapInit<CTestTraceline>(CTestTraceline*)::dataDesc
 B datamap_t* DataMapInit<CTestTraceline>(CTestTraceline*)::nameHolder
 B datamap_t* DataMapInit<CTextureToggle>(CTextureToggle*)::nameHolder
 B datamap_t* DataMapInit<CThrustController>(CThrustController*)::nameHolder
 B datamap_t* DataMapInit<CTimerEntity>(CTimerEntity*)::dataDesc
 B datamap_t* DataMapInit<CTimerEntity>(CTimerEntity*)::nameHolder
 B datamap_t* DataMapInit<CTriggerApplyImpulse>(CTriggerApplyImpulse*)::nameHolder
 B datamap_t* DataMapInit<CTriggerAreaCapture>(CTriggerAreaCapture*)::dataDesc
 B datamap_t* DataMapInit<CTriggerAreaCapture>(CTriggerAreaCapture*)::nameHolder
 B datamap_t* DataMapInit<CTriggerBrush>(CTriggerBrush*)::dataDesc
 B datamap_t* DataMapInit<CTriggerBrush>(CTriggerBrush*)::nameHolder
 B datamap_t* DataMapInit<CTriggerCamera>(CTriggerCamera*)::dataDesc
 B datamap_t* DataMapInit<CTriggerCamera>(CTriggerCamera*)::nameHolder
 B datamap_t* DataMapInit<CTriggerGravity>(CTriggerGravity*)::dataDesc
 B datamap_t* DataMapInit<CTriggerGravity>(CTriggerGravity*)::nameHolder
 B datamap_t* DataMapInit<CTriggerHurt>(CTriggerHurt*)::dataDesc
 B datamap_t* DataMapInit<CTriggerHurt>(CTriggerHurt*)::nameHolder
 B datamap_t* DataMapInit<CTriggerImpact>(CTriggerImpact*)::dataDesc
 B datamap_t* DataMapInit<CTriggerImpact>(CTriggerImpact*)::nameHolder
 B datamap_t* DataMapInit<CTriggerLook>(CTriggerLook*)::dataDesc
 B datamap_t* DataMapInit<CTriggerLook>(CTriggerLook*)::nameHolder
 B datamap_t* DataMapInit<CTriggerMultiple>(CTriggerMultiple*)::dataDesc
 B datamap_t* DataMapInit<CTriggerMultiple>(CTriggerMultiple*)::nameHolder
 B datamap_t* DataMapInit<CTriggerPhysicsTrap>(CTriggerPhysicsTrap*)::nameHolder
 B datamap_t* DataMapInit<CTriggerPlayerMovement>(CTriggerPlayerMovement*)::dataDesc
 B datamap_t* DataMapInit<CTriggerPlayerMovement>(CTriggerPlayerMovement*)::nameHolder
 B datamap_t* DataMapInit<CTriggerProximity>(CTriggerProximity*)::dataDesc
 B datamap_t* DataMapInit<CTriggerProximity>(CTriggerProximity*)::nameHolder
 B datamap_t* DataMapInit<CTriggerPush>(CTriggerPush*)::nameHolder
 B datamap_t* DataMapInit<CTriggerRemove>(CTriggerRemove*)::dataDesc
 B datamap_t* DataMapInit<CTriggerRemove>(CTriggerRemove*)::nameHolder
 B datamap_t* DataMapInit<CTriggerSave>(CTriggerSave*)::nameHolder
 B datamap_t* DataMapInit<CTriggerSoundscape>(CTriggerSoundscape*)::dataDesc
 B datamap_t* DataMapInit<CTriggerSoundscape>(CTriggerSoundscape*)::nameHolder
 B datamap_t* DataMapInit<CTriggerTeleport>(CTriggerTeleport*)::nameHolder
 B datamap_t* DataMapInit<CTriggerTeleportRelative>(CTriggerTeleportRelative*)::nameHolder
 B datamap_t* DataMapInit<CTriggerToggleSave>(CTriggerToggleSave*)::nameHolder
 B datamap_t* DataMapInit<CTriggerVPhysicsMotion>(CTriggerVPhysicsMotion*)::dataDesc
 B datamap_t* DataMapInit<CTriggerVPhysicsMotion>(CTriggerVPhysicsMotion*)::nameHolder
 B datamap_t* DataMapInit<CTriggerWateryDeath>(CTriggerWateryDeath*)::dataDesc
 B datamap_t* DataMapInit<CTriggerWateryDeath>(CTriggerWateryDeath*)::nameHolder
 B datamap_t* DataMapInit<CTriggerWeaponDissolve>(CTriggerWeaponDissolve*)::dataDesc
 B datamap_t* DataMapInit<CTriggerWeaponDissolve>(CTriggerWeaponDissolve*)::nameHolder
 B datamap_t* DataMapInit<CTriggerWeaponStrip>(CTriggerWeaponStrip*)::nameHolder
 B datamap_t* DataMapInit<CTriggerWind>(CTriggerWind*)::dataDesc
 B datamap_t* DataMapInit<CTriggerWind>(CTriggerWind*)::nameHolder
 B datamap_t* DataMapInit<CTripmineGrenade>(CTripmineGrenade*)::dataDesc
 B datamap_t* DataMapInit<CTripmineGrenade>(CTripmineGrenade*)::nameHolder
 B datamap_t* DataMapInit<CTurretTipController>(CTurretTipController*)::dataDesc
 B datamap_t* DataMapInit<CTurretTipController>(CTurretTipController*)::nameHolder
 B datamap_t* DataMapInit<CVGuiScreen>(CVGuiScreen*)::nameHolder
 B datamap_t* DataMapInit<CVortigauntChargeToken>(CVortigauntChargeToken*)::dataDesc
 B datamap_t* DataMapInit<CVortigauntChargeToken>(CVortigauntChargeToken*)::nameHolder
 B datamap_t* DataMapInit<CVortigauntEffectDispel>(CVortigauntEffectDispel*)::nameHolder
 B datamap_t* DataMapInit<CVoteController>(CVoteController*)::dataDesc
 B datamap_t* DataMapInit<CVoteController>(CVoteController*)::nameHolder
 B datamap_t* DataMapInit<CWC_UpdateIgnoreList>(CWC_UpdateIgnoreList*)::nameHolder
 B datamap_t* DataMapInit<CWallHealth>(CWallHealth*)::dataDesc
 B datamap_t* DataMapInit<CWallHealth>(CWallHealth*)::nameHolder
 B datamap_t* DataMapInit<CWaterBullet>(CWaterBullet*)::dataDesc
 B datamap_t* DataMapInit<CWaterBullet>(CWaterBullet*)::nameHolder
 B datamap_t* DataMapInit<CWaterLODControl>(CWaterLODControl*)::nameHolder
 B datamap_t* DataMapInit<CWateryDeathLeech>(CWateryDeathLeech*)::dataDesc
 B datamap_t* DataMapInit<CWateryDeathLeech>(CWateryDeathLeech*)::nameHolder
 B datamap_t* DataMapInit<CWeaponAnnabelle>(CWeaponAnnabelle*)::nameHolder
 B datamap_t* DataMapInit<CWeaponBugBait>(CWeaponBugBait*)::dataDesc
 B datamap_t* DataMapInit<CWeaponBugBait>(CWeaponBugBait*)::nameHolder
 B datamap_t* DataMapInit<CWeaponCycler>(CWeaponCycler*)::nameHolder
 B datamap_t* DataMapInit<CWeaponHL2MPBase>(CWeaponHL2MPBase*)::dataDesc
 B datamap_t* DataMapInit<CWeaponHL2MPBase>(CWeaponHL2MPBase*)::nameHolder
 B datamap_t* DataMapInit<CWeapon_SLAM>(CWeapon_SLAM*)::dataDesc
 B datamap_t* DataMapInit<CWeapon_SLAM>(CWeapon_SLAM*)::nameHolder
 B datamap_t* DataMapInit<CWeightButton>(CWeightButton*)::dataDesc
 B datamap_t* DataMapInit<CWeightButton>(CWeightButton*)::nameHolder
 B datamap_t* DataMapInit<CWindowPane>(CWindowPane*)::dataDesc
 B datamap_t* DataMapInit<CWindowPane>(CWindowPane*)::nameHolder
 B datamap_t* DataMapInit<CWorld>(CWorld*)::nameHolder
 B datamap_t* DataMapInit<CWorldItem>(CWorldItem*)::nameHolder
 B datamap_t* DataMapInit<CWreckage>(CWreckage*)::nameHolder
 B datamap_t* DataMapInit<CZombie>(CZombie*)::nameHolder
 B datamap_t* DataMapInit<ConceptHistory_t>(ConceptHistory_t*)::nameHolder
 B datamap_t* DataMapInit<DustTrail>(DustTrail*)::nameHolder
 B datamap_t* DataMapInit<EntityParticleTrailInfo_t>(EntityParticleTrailInfo_t*)::nameHolder
 B datamap_t* DataMapInit<EventQueuePrioritizedEvent_t>(EventQueuePrioritizedEvent_t*)::dataDesc
 B datamap_t* DataMapInit<EventQueuePrioritizedEvent_t>(EventQueuePrioritizedEvent_t*)::nameHolder
 B datamap_t* DataMapInit<FilterDamageType>(FilterDamageType*)::nameHolder
 B datamap_t* DataMapInit<FilterTeam>(FilterTeam*)::nameHolder
 B datamap_t* DataMapInit<HintNodeData>(HintNodeData*)::nameHolder
 B datamap_t* DataMapInit<LadderMove_t>(LadderMove_t*)::nameHolder
 B datamap_t* DataMapInit<ParticleSmokeGrenade>(ParticleSmokeGrenade*)::nameHolder
 B datamap_t* DataMapInit<PhysBlockHeader_t>(PhysBlockHeader_t*)::nameHolder
 B datamap_t* DataMapInit<PhysObjectHeader_t>(PhysObjectHeader_t*)::nameHolder
 B datamap_t* DataMapInit<Relationship_t>(Relationship_t*)::nameHolder
 B datamap_t* DataMapInit<Response>(Response*)::nameHolder
 B datamap_t* DataMapInit<ResponseContext_t>(ResponseContext_t*)::nameHolder
 B datamap_t* DataMapInit<ResponseGroup>(ResponseGroup*)::nameHolder
 B datamap_t* DataMapInit<RocketTrail>(RocketTrail*)::nameHolder
 B datamap_t* DataMapInit<SaveRestoreBlockHeader_t>(SaveRestoreBlockHeader_t*)::nameHolder
 B datamap_t* DataMapInit<ScriptedNPCInteraction_Phases_t>(ScriptedNPCInteraction_Phases_t*)::nameHolder
 B datamap_t* DataMapInit<ScriptedNPCInteraction_t>(ScriptedNPCInteraction_t*)::nameHolder
 B datamap_t* DataMapInit<SmokeTrail>(SmokeTrail*)::nameHolder
 B datamap_t* DataMapInit<SoundCommand_t>(SoundCommand_t*)::nameHolder
 B datamap_t* DataMapInit<SporeExplosion>(SporeExplosion*)::nameHolder
 B datamap_t* DataMapInit<SporeTrail>(SporeTrail*)::nameHolder
 B datamap_t* DataMapInit<TemplateEntityData_t>(TemplateEntityData_t*)::nameHolder
 B datamap_t* DataMapInit<UnreachableEnt_t>(UnreachableEnt_t*)::nameHolder
 B datamap_t* DataMapInit<ViewSmoothingData_t>(ViewSmoothingData_t*)::nameHolder
 B datamap_t* DataMapInit<audioparams_t>(audioparams_t*)::nameHolder
 B datamap_t* DataMapInit<entitytable_t>(entitytable_t*)::nameHolder
 B datamap_t* DataMapInit<flexsetting_t>(flexsetting_t*)::nameHolder
 B datamap_t* DataMapInit<flexsettinghdr_t>(flexsettinghdr_t*)::nameHolder
 B datamap_t* DataMapInit<flexweight_t>(flexweight_t*)::nameHolder
 B datamap_t* DataMapInit<fogparams_t>(fogparams_t*)::nameHolder
 B datamap_t* DataMapInit<fogplayerparams_t>(fogplayerparams_t*)::nameHolder
 B datamap_t* DataMapInit<game_shadowcontrol_params_t>(game_shadowcontrol_params_t*)::nameHolder
 B datamap_t* DataMapInit<globalentity_t>(globalentity_t*)::nameHolder
 B datamap_t* DataMapInit<locksound_t>(locksound_t*)::nameHolder
 B datamap_t* DataMapInit<magnetted_objects_t>(magnetted_objects_t*)::dataDesc
 B datamap_t* DataMapInit<magnetted_objects_t>(magnetted_objects_t*)::nameHolder
 B datamap_t* DataMapInit<modifiedconvars_t>(modifiedconvars_t*)::nameHolder
 B datamap_t* DataMapInit<physfollower_t>(physfollower_t*)::nameHolder
 B datamap_t* DataMapInit<sky3dparams_t>(sky3dparams_t*)::nameHolder
 B datamap_t* DataMapInit<template_t>(template_t*)::nameHolder
 B datamap_t* DataMapInit<thinkfunc_t>(thinkfunc_t*)::nameHolder
 B datamap_t* DataMapInit<vehicle_crashsound_t>(vehicle_crashsound_t*)::nameHolder
 B datamap_t* DataMapInit<vehicle_gear_t>(vehicle_gear_t*)::nameHolder
 B datamap_t* DataMapInit<vehiclesounds_t>(vehiclesounds_t*)::dataDesc
 B datamap_t* DataMapInit<vehiclesounds_t>(vehiclesounds_t*)::nameHolder
 B datamap_t* DataMapInit<washentity_t>(washentity_t*)::nameHolder
 B debug_materialmodifycontrol
 B debug_physimpact
 B debug_touchlinks
 B debugoverlay
 B debugscriptconditions
 B decalfrequency
 B defaultteam
 B developer
 B displaysoundlist
 B dog_debug
 B dog_max_wait_time
 B engine
 B enginesound
 B enginetrace
 B ent_debugkeys
 B ent_messages_draw
 B entitytable_t_DataDescInit::g_DataMapHolder
 B fSentencesInit
 B falldamage
 B filesystem
 B fire_absorbrate
 B fire_dmgbase
 B fire_dmginterval
 B fire_dmgscale
 B fire_extabsorb
 B fire_extscale
 B fire_growthrate
 B fire_heatscale
 B fire_incomingheatscale
 B fire_maxabsorb
 B fish_dormant
 B flashlight
 B flex_expression
 B flex_looktime
 B flex_maxawaytime
 B flex_maxplayertime
 B flex_minawaytime
 B flex_minplayertime
 B flex_talk
 B flexsetting_t_DataDescInit::g_DataMapHolder
 B flexsettinghdr_t_DataDescInit::g_DataMapHolder
 B flexweight_t_DataDescInit::g_DataMapHolder
 B fogparams_t_DataDescInit::g_DataMapHolder
 B fogplayerparams_t_DataDescInit::g_DataMapHolder
 B footsteps
 B forcerespawn
 B fraglimit
 B free_pass_peek_debug
 B friendlyfire
 B func_break_max_pieces
 B func_break_reduction_factor
 B func_breakdmg_bullet
 B func_breakdmg_club
 B func_breakdmg_explosive
 B gEntList
 B gEvilImpulse101
 B g_AIConditionsTimer
 B g_AIFoesTalkSemaphore
 B g_AIFollowManager
 B g_AIFriendliesTalkSemaphore
 B g_AIMaintainScheduleTimer
 B g_AIMoveTimer
 B g_AINetworkBuilder
 B g_AINextDisabledMessageTime
 B g_AIPostRunTimer
 B g_AIPrescheduleThinkTimer
 B g_AIRunTimer
 B g_AITaskTimings
 B g_AI_Manager
 B g_AI_MemoryListSaveRestoreOps
 B g_AI_SchedulesManager
 B g_AI_SensedObjectsManager
 B g_AI_SquadManager
 B g_APCMissileList
 B g_ActBusyAnimDataSystem
 B g_ActiveGibCount
 B g_ActivityList
 B g_ActivityModifiersTable
 B g_ActivityStrings
 B g_AntlionMakerManager
 B g_AreaPortals
 B g_BanMasks
 B g_BitWriteMasks
 B g_BugBaitSensorList
 B g_BullseyeList
 B g_CV_SmokeTrail
 B g_CheckClient
 B g_Collisions
 B g_CommentarySystem
 B g_Commentary_SaveRestoreBlockHandler
 B g_DefaultResponseSystemSaveRestoreBlockHandler
 B g_EntListMemPool
 B g_EntityClassnames
 B g_EntityCollisionHash
 B g_EntityListPool
 B g_EntityOrientations
 B g_EntityPositions
 B g_EntitySaveRestoreBlockHandler
 B g_EventList
 B g_EventQueue
 B g_EventQueue_SaveRestoreBlockHandler
 B g_EventStrings
 B g_ExtraMasks
 B g_FlexSceneFileManager
 B g_HandleTest
 B g_InfoCameraLinkList
 B g_Language
 B g_LaserDotList
 B g_LittleBits
 B g_MapEntityRefs
 B g_MatrixPool
 B g_MultiCoverSearchEnemies
 B g_MultiDamage
 B g_NetworkPropertyEventMgr
 B g_OverrideMoveCache
 B g_PhysObjSaveRestoreOps
 B g_PhysSaveRestoreBlockHandler
 B g_PhysWorldObject
 B g_PhysicsHook
 B g_PlayerModEnable
 B g_PlayerSurfaceTriggers
 B g_PointCameraList
 B g_PointTemplatePrecacher
 B g_PostFrameNavigationHook
 B g_PostSimulationQueue
 B g_PrecacheOtherList
 B g_PropDataSystem
 B g_QaternionPool
 B g_RagdollLVManager
 B g_SaveRestoreBlockSet
 B g_SentBanMasks
 B g_SentGameRulesMasks
 B g_ServerGameDLL
 B g_SimThinkManager
 B g_SkyList
 B g_SolverList
 B g_SoundscapeSystem
 B g_StalkerBeamThinkTime
 B g_StressEntities
 B g_StressEntityRegs
 B g_StringTableGameRules
 B g_Teams
 B g_TemplateEntityHook
 B g_Template_SaveRestoreBlockHandler
 B g_TextStatsMgr
 B g_TokenProcessor
 B g_VBAllocTracker
 B g_VectorPool
 B g_VguiScreenStringOps
 B g_VoiceGameMgr
 B g_VoiceGameMgrHelper
 B g_WeaponList
 B g_ai_citizen_show_enemy
 B g_ai_norebuildgraph
 B g_antlion_cascade_push
 B g_bAIDebugStep
 B g_bAIDisabledByUser
 B g_bBehaviorHost_PreventBaseClassGatherConditions
 B g_bDisableEhandleAccess
 B g_bInCommentaryMode
 B g_bReceivedChainedUpdateOnRemove
 B g_bUnget
 B g_bUseLegacyFlashlight
 B g_bWantModEnable
 B g_debug_angularsensor
 B g_debug_antlion
 B g_debug_antlion_worker
 B g_debug_antlionguard
 B g_debug_antlionmaker
 B g_debug_basehelicopter
 B g_debug_basescanner
 B g_debug_combine_camera
 B g_debug_constraint_sounds
 B g_debug_cscanner
 B g_debug_doors
 B g_debug_dropship
 B g_debug_dynamicresupplies
 B g_debug_gunship
 B g_debug_headcrab
 B g_debug_npc_vehicle_roles
 B g_debug_physcannon
 B g_debug_ragdoll_removal
 B g_debug_trackpather
 B g_debug_transitions
 B g_debug_turret
 B g_debug_turret_ceiling
 B g_debug_vehiclebase
 B g_debug_vehicledriver
 B g_debug_vehicleexit
 B g_debug_vehiclesound
 B g_debug_vortigaunt_aim
 B g_fCombineQuestion
 B g_fGameOver
 B g_hControlPointMasters
 B g_hGameGibManager
 B g_hIntroScript
 B g_hWeaponFireTriggers
 B g_helicopter_bomb_danger_radius
 B g_helicopter_bullrush_bomb_enemy_distance
 B g_helicopter_bullrush_bomb_speed
 B g_helicopter_bullrush_bomb_time
 B g_helicopter_bullrush_distance
 B g_helicopter_bullrush_mega_bomb_health
 B g_helicopter_bullrush_shoot_height
 B g_helicopter_chargetime
 B g_helicopter_idletime
 B g_helicopter_maxfiringdist
 B g_iCurrentTemplateInstance
 B g_iDevShotCameraCount
 B g_iFrameLastSimplified
 B g_iLastCitizenModel
 B g_iLastCombineModel
 B g_iSkillLevel
 B g_interactionAntlionFiredAtTarget
 B g_interactionAntlionFoundTarget
 B g_interactionAntlionGuardFoundPhysicsObject
 B g_interactionAntlionGuardShovedPhysicsObject
 B g_interactionBarnacleVictimBite
 B g_interactionBarnacleVictimDangle
 B g_interactionBarnacleVictimGrab
 B g_interactionBarnacleVictimReleased
 B g_interactionCombineBash
 B g_interactionHitByPlayerThrownPhysObj
 B g_interactionMetrocopClearSentenceQueues
 B g_interactionMetrocopIdleChatter
 B g_interactionMetrocopStartedStitch
 B g_interactionPlayerLaunchedRPG
 B g_interactionPlayerPuntedHeavyObject
 B g_interactionScannerInspect
 B g_interactionScannerInspectBegin
 B g_interactionScannerInspectDone
 B g_interactionScannerInspectHandsUp
 B g_interactionScannerInspectShowArmband
 B g_interactionScannerSupportEntity
 B g_interactionScannerSupportPosition
 B g_interactionScriptedTarget
 B g_interactionTurretStillStanding
 B g_interactionVortigauntClaw
 B g_interactionVortigauntKick
 B g_interactionVortigauntStomp
 B g_interactionVortigauntStompFail
 B g_interactionVortigauntStompHit
 B g_interactionZombieMeleeWarning
 B g_iszFuncBrushClassname
 B g_iszPhysicsPropClassname
 B g_nAITasksRun
 B g_nInsideDispatchUpdateTransmitState
 B g_pAINetworkManager
 B g_pAttributeTypeName
 B g_pBigAINet
 B g_pBodyQueueHead
 B g_pCVar
 B g_pCitizenResponseSystem
 B g_pDataCache
 B g_pDebugEdictBase
 B g_pDeveloper
 B g_pDmeMakefileUtils
 B g_pForceAttachEdict
 B g_pFullFileSystem
 B g_pGameRules
 B g_pInputSystem
 B g_pLastCombineSpawn
 B g_pLastRebelSpawn
 B g_pLastSpawn
 B g_pMDLCache
 B g_pMatSystemSurface
 B g_pMaterialSystem
 B g_pMaterialSystemDebugTextureInfo
 B g_pMaterialSystemHardwareConfig
 B g_pMultiCoverSearcher
 B g_pNetworkSystem
 B g_pObjectiveResource
 B g_pPhysicsCollision
 B g_pPlayerResource
 B g_pProcessUtils
 B g_pQueuedLoader
 B g_pQueuedNavigationQueryJob
 B g_pServerClassHead
 B g_pShadowEntities
 B g_pSharedChangeInfo
 B g_pSoundEmitterSystem
 B g_pStringTableClientSideChoreoScenes
 B g_pStringTableEffectDispatch
 B g_pStringTableInfoPanel
 B g_pStringTableMaterials
 B g_pStringTableParticleEffectNames
 B g_pStringTableServerMapCycle
 B g_pStringTableVguiScreen
 B g_pStudioRender
 B g_pUtlSortVectorQSortContext
 B g_pVGui
 B g_pVGuiInput
 B g_pVGuiLocalize
 B g_pVGuiPanel
 B g_pVGuiSchemeManager
 B g_pVGuiSurface
 B g_pVGuiSystem
 B g_pVTex
 B g_pVideo
 B g_pVoiceServer
 B g_ragdoll_important_maxcount
 B g_ragdoll_maxcount
 B g_sModelIndexBloodDrop
 B g_sModelIndexBloodSpray
 B g_sModelIndexBubbles
 B g_sModelIndexFireball
 B g_sModelIndexLaser
 B g_sModelIndexSmoke
 B g_sModelIndexWExplosion
 B g_test_new_antlion_jump
 B g_vecAttackDir
 B g_voteController
 B game_shadowcontrol_params_t_DataDescInit::g_DataMapHolder
 B gameeventmanager
 B gamestatsuploader
 B giPrecacheGrunt
 B globalentity_t_DataDescInit::g_DataMapHolder
 B gpGlobals
 B groundlinksallocated
 B guard variable for DmxElementUnpackStructure_t* DmxElementUnpackInit<CParticleSystemDefinition>(CParticleSystemDefinition*)::unpack
 B guard variable for DmxElementUnpackStructure_t* DmxElementUnpackInit<ParticleChildrenInfo_t>(ParticleChildrenInfo_t*)::unpack
 B guard variable for datamap_t* DataMapInit<AIExtendedSaveHeader_t>(AIExtendedSaveHeader_t*)::nameHolder
 B guard variable for datamap_t* DataMapInit<AIScheduleState_t>(AIScheduleState_t*)::nameHolder
 B guard variable for datamap_t* DataMapInit<AISquadEnemyInfo_t>(AISquadEnemyInfo_t*)::dataDesc
 B guard variable for datamap_t* DataMapInit<AISquadEnemyInfo_t>(AISquadEnemyInfo_t*)::nameHolder
 B guard variable for datamap_t* DataMapInit<AI_EnemyInfo_t>(AI_EnemyInfo_t*)::nameHolder
 B guard variable for datamap_t* DataMapInit<AI_FollowNavInfo_t>(AI_FollowNavInfo_t*)::nameHolder
 B guard variable for datamap_t* DataMapInit<AI_FollowParams_t>(AI_FollowParams_t*)::nameHolder
 B guard variable for datamap_t* DataMapInit<AI_FreePassParams_t>(AI_FreePassParams_t*)::nameHolder
 B guard variable for datamap_t* DataMapInit<AI_LeadArgs_t>(AI_LeadArgs_t*)::nameHolder
 B guard variable for datamap_t* DataMapInit<AI_Response>(AI_Response*)::nameHolder
 B guard variable for datamap_t* DataMapInit<AI_ResponseParams>(AI_ResponseParams*)::nameHolder
 B guard variable for datamap_t* DataMapInit<AI_StandoffParams_t>(AI_StandoffParams_t*)::nameHolder
 B guard variable for datamap_t* DataMapInit<AI_Waypoint_t>(AI_Waypoint_t*)::nameHolder
 B guard variable for datamap_t* DataMapInit<AR2Explosion>(AR2Explosion*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAISound>(CAISound*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_AccelDecay>(CAI_AccelDecay*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_ActBusyBehavior>(CAI_ActBusyBehavior*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CAI_ActBusyBehavior>(CAI_ActBusyBehavior*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_ActBusyGoal>(CAI_ActBusyGoal*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CAI_ActBusyGoal>(CAI_ActBusyGoal*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_ActBusyQueueGoal>(CAI_ActBusyQueueGoal*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CAI_ActBusyQueueGoal>(CAI_ActBusyQueueGoal*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_AllyManager>(CAI_AllyManager*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CAI_AllyManager>(CAI_AllyManager*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_AllySpeechManager>(CAI_AllySpeechManager*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CAI_AllySpeechManager>(CAI_AllySpeechManager*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_AssaultBehavior>(CAI_AssaultBehavior*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_AssaultGoal>(CAI_AssaultGoal*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_BaseActor>(CAI_BaseActor*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CAI_BaseActor>(CAI_BaseActor*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_BaseFlyingBot>(CAI_BaseFlyingBot*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_BaseNPC>(CAI_BaseNPC*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CAI_BaseNPC>(CAI_BaseNPC*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_BasePhysicsFlyingBot>(CAI_BasePhysicsFlyingBot*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CAI_BasePhysicsFlyingBot>(CAI_BasePhysicsFlyingBot*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_BattleLine>(CAI_BattleLine*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CAI_BattleLine>(CAI_BattleLine*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_BehaviorBase>(CAI_BehaviorBase*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_BlendedMotor>(CAI_BlendedMotor*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_ChangeHintGroup>(CAI_ChangeHintGroup*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_ChangeTarget>(CAI_ChangeTarget*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_DynamicLink>(CAI_DynamicLink*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_DynamicLinkController>(CAI_DynamicLinkController*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_Enemies>(CAI_Enemies*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_Expresser>(CAI_Expresser*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_FearBehavior>(CAI_FearBehavior*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_FollowBehavior>(CAI_FollowBehavior*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CAI_FollowBehavior>(CAI_FollowBehavior*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_FollowGoal>(CAI_FollowGoal*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_FreePass>(CAI_FreePass*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_FuncTankBehavior>(CAI_FuncTankBehavior*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_GoalEntity>(CAI_GoalEntity*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CAI_GoalEntity>(CAI_GoalEntity*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_Hint>(CAI_Hint*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CAI_Hint>(CAI_Hint*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_HolsterBehavior>(CAI_HolsterBehavior*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_InterestTarget_t>(CAI_InterestTarget_t*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_LeadBehavior>(CAI_LeadBehavior*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_LeadGoal>(CAI_LeadGoal*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CAI_LeadGoal>(CAI_LeadGoal*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_LeadGoal_Weapon>(CAI_LeadGoal_Weapon*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_LocalNavigator>(CAI_LocalNavigator*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_LookTarget>(CAI_LookTarget*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_Motor>(CAI_Motor*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CAI_Motor>(CAI_Motor*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_MoveAndShootOverlay>(CAI_MoveAndShootOverlay*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_MoveMonitor>(CAI_MoveMonitor*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_MoveProbe>(CAI_MoveProbe*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_Navigator>(CAI_Navigator*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CAI_Navigator>(CAI_Navigator*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_NetworkManager>(CAI_NetworkManager*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CAI_NetworkManager>(CAI_NetworkManager*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_Path>(CAI_Path*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CAI_Path>(CAI_Path*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_Pathfinder>(CAI_Pathfinder*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_PlayerAlly>(CAI_PlayerAlly*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CAI_PlayerAlly>(CAI_PlayerAlly*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_PoliceGoal>(CAI_PoliceGoal*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CAI_PoliceGoal>(CAI_PoliceGoal*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_PolicingBehavior>(CAI_PolicingBehavior*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_ProxTester>(CAI_ProxTester*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_RadialLinkController>(CAI_RadialLinkController*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CAI_RadialLinkController>(CAI_RadialLinkController*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_RappelBehavior>(CAI_RappelBehavior*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_Relationship>(CAI_Relationship*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CAI_Relationship>(CAI_Relationship*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_ScriptConditions>(CAI_ScriptConditions*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CAI_ScriptConditions>(CAI_ScriptConditions*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_ScriptConditionsElement>(CAI_ScriptConditionsElement*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_ScriptedSchedule>(CAI_ScriptedSchedule*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CAI_ScriptedSchedule>(CAI_ScriptedSchedule*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_ScriptedSentence>(CAI_ScriptedSentence*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CAI_ScriptedSentence>(CAI_ScriptedSentence*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_ScriptedSequence>(CAI_ScriptedSequence*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CAI_ScriptedSequence>(CAI_ScriptedSequence*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_Senses>(CAI_Senses*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CAI_Senses>(CAI_Senses*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_SentenceBase>(CAI_SentenceBase*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_ShotRegulator>(CAI_ShotRegulator*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_SpeechFilter>(CAI_SpeechFilter*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_Spotlight>(CAI_Spotlight*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_Squad>(CAI_Squad*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CAI_Squad>(CAI_Squad*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_StandoffBehavior>(CAI_StandoffBehavior*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_StandoffGoal>(CAI_StandoffGoal*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_TacticalServices>(CAI_TacticalServices*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAI_TrackPather>(CAI_TrackPather*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAPCController>(CAPCController*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CAPCController>(CAPCController*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAPCMissile>(CAPCMissile*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CAPCMissile>(CAPCMissile*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAlyxEmpEffect>(CAlyxEmpEffect*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CAlyxEmpEffect>(CAlyxEmpEffect*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAmbientGeneric>(CAmbientGeneric*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CAmbientGeneric>(CAmbientGeneric*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAnimationLayer>(CAnimationLayer*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CAnimationLayer>(CAnimationLayer*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAntlionRepellant>(CAntlionRepellant*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAntlionTemplateMaker>(CAntlionTemplateMaker*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CAntlionTemplateMaker>(CAntlionTemplateMaker*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAreaPortal>(CAreaPortal*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAssaultPoint>(CAssaultPoint*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CAssaultPoint>(CAssaultPoint*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAvoidBox>(CAvoidBox*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CAvoidSphere>(CAvoidSphere*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CBarnacleTongueTip>(CBarnacleTongueTip*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CBarnacleTongueTip>(CBarnacleTongueTip*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CBaseAchievement>(CBaseAchievement*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CBaseAnimating>(CBaseAnimating*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CBaseAnimating>(CBaseAnimating*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CBaseAnimatingOverlay>(CBaseAnimatingOverlay*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CBaseAnimatingOverlay>(CBaseAnimatingOverlay*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CBaseButton>(CBaseButton*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CBaseButton>(CBaseButton*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CBaseCombatCharacter>(CBaseCombatCharacter*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CBaseCombatCharacter>(CBaseCombatCharacter*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CBaseCombatWeapon>(CBaseCombatWeapon*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CBaseCombatWeapon>(CBaseCombatWeapon*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CBaseDMStart>(CBaseDMStart*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CBaseDoor>(CBaseDoor*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CBaseDoor>(CBaseDoor*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CBaseEntity>(CBaseEntity*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CBaseEntity>(CBaseEntity*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CBaseEntityOutput>(CBaseEntityOutput*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CBaseEntityOutput>(CBaseEntityOutput*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CBaseFilter>(CBaseFilter*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CBaseFilter>(CBaseFilter*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CBaseFire>(CBaseFire*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CBaseFlex>(CBaseFlex*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CBaseGrenade>(CBaseGrenade*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CBaseGrenade>(CBaseGrenade*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CBaseGrenadeConcussion>(CBaseGrenadeConcussion*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CBaseGrenadeConcussion>(CBaseGrenadeConcussion*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CBaseHL2MPCombatWeapon>(CBaseHL2MPCombatWeapon*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CBaseHLCombatWeapon>(CBaseHLCombatWeapon*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CBaseHeadcrab>(CBaseHeadcrab*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CBaseHeadcrab>(CBaseHeadcrab*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CBaseHelicopter>(CBaseHelicopter*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CBaseHelicopter>(CBaseHelicopter*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CBaseMoveBehavior>(CBaseMoveBehavior*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CBaseNPCMaker>(CBaseNPCMaker*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CBaseNPCMaker>(CBaseNPCMaker*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CBasePlatTrain>(CBasePlatTrain*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CBasePlatTrain>(CBasePlatTrain*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CBasePlayer>(CBasePlayer*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CBasePlayer>(CBasePlayer*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CBasePropDoor>(CBasePropDoor*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CBasePropDoor>(CBasePropDoor*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CBaseServerVehicle>(CBaseServerVehicle*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CBaseServerVehicle>(CBaseServerVehicle*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CBaseSpriteProjectile>(CBaseSpriteProjectile*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CBaseTeamObjectiveResource>(CBaseTeamObjectiveResource*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CBaseTeamObjectiveResource>(CBaseTeamObjectiveResource*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CBaseToggle>(CBaseToggle*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CBaseTrigger>(CBaseTrigger*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CBaseTrigger>(CBaseTrigger*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CBaseVPhysicsTrigger>(CBaseVPhysicsTrigger*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CBaseViewModel>(CBaseViewModel*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CBaseViewModel>(CBaseViewModel*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CBeam>(CBeam*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CBlackHeadcrab>(CBlackHeadcrab*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CBlackHeadcrab>(CBlackHeadcrab*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CBlendingCycler>(CBlendingCycler*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CBlood>(CBlood*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CBombDropSensor>(CBombDropSensor*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CBombSuppressor>(CBombSuppressor*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CBoneFollower>(CBoneFollower*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CBoneFollowerManager>(CBoneFollowerManager*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CBoneFollowerManager>(CBoneFollowerManager*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CBounceBomb>(CBounceBomb*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CBounceBomb>(CBounceBomb*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CBreakable>(CBreakable*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CBreakable>(CBreakable*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CBreakableProp>(CBreakableProp*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CBreakableProp>(CBreakableProp*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CBreakableSurface>(CBreakableSurface*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CBreakableSurface>(CBreakableSurface*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CBubbling>(CBubbling*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CBubbling>(CBubbling*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CBugBaitSensor>(CBugBaitSensor*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CBugBaitSensor>(CBugBaitSensor*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CChangeLevel>(CChangeLevel*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CChangeLevel>(CChangeLevel*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CCitadelEnergyCore>(CCitadelEnergyCore*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CCitizenResponseSystem>(CCitizenResponseSystem*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CCitizenResponseSystem>(CCitizenResponseSystem*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CCollisionProperty>(CCollisionProperty*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CColorCorrection>(CColorCorrection*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CColorCorrection>(CColorCorrection*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CColorCorrectionVolume>(CColorCorrectionVolume*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CColorCorrectionVolume>(CColorCorrectionVolume*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CCombineDropshipContainer>(CCombineDropshipContainer*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CCommandPoint>(CCommandPoint*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CCommentaryAuto>(CCommentaryAuto*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CCommentaryAuto>(CCommentaryAuto*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CCommentarySystem>(CCommentarySystem*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CCommentarySystem>(CCommentarySystem*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CConcussiveBlast>(CConcussiveBlast*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CConstantForceController>(CConstantForceController*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CConstraintAnchor>(CConstraintAnchor*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CCopyRecipientFilter>(CCopyRecipientFilter*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CCopyRecipientFilter>(CCopyRecipientFilter*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CCraneTip>(CCraneTip*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CCraneTip>(CCraneTip*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CCredits>(CCredits*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CCredits>(CCredits*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CCrossbowBolt>(CCrossbowBolt*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CCrossbowBolt>(CCrossbowBolt*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CCycler>(CCycler*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CDebugHistory>(CDebugHistory*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CDecal>(CDecal*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CDecal>(CDecal*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CDynamicLight>(CDynamicLight*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CDynamicLight>(CDynamicLight*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CDynamicProp>(CDynamicProp*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CDynamicProp>(CDynamicProp*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CEmbers>(CEmbers*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CEmbers>(CEmbers*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CEntityDissolve>(CEntityDissolve*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CEntityDissolve>(CEntityDissolve*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CEntityFlame>(CEntityFlame*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CEntityFlame>(CEntityFlame*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CEntityParticleTrail>(CEntityParticleTrail*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CEnvAR2Explosion>(CEnvAR2Explosion*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CEnvBeam>(CEnvBeam*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CEnvBeam>(CEnvBeam*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CEnvBeverage>(CEnvBeverage*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CEnvDustPuff>(CEnvDustPuff*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CEnvEffectsScript>(CEnvEffectsScript*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CEnvEffectsScript>(CEnvEffectsScript*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CEnvEntityMaker>(CEnvEntityMaker*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CEnvEntityMaker>(CEnvEntityMaker*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CEnvExplosion>(CEnvExplosion*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CEnvExplosion>(CEnvExplosion*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CEnvFade>(CEnvFade*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CEnvFade>(CEnvFade*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CEnvFireSensor>(CEnvFireSensor*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CEnvFireSensor>(CEnvFireSensor*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CEnvFireSource>(CEnvFireSource*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CEnvFunnel>(CEnvFunnel*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CEnvGlobal>(CEnvGlobal*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CEnvGlobal>(CEnvGlobal*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CEnvGunfire>(CEnvGunfire*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CEnvGunfire>(CEnvGunfire*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CEnvHeadcrabCanister>(CEnvHeadcrabCanister*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CEnvHeadcrabCanister>(CEnvHeadcrabCanister*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CEnvHeadcrabCanisterShared>(CEnvHeadcrabCanisterShared*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CEnvHudHint>(CEnvHudHint*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CEnvLaser>(CEnvLaser*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CEnvLaser>(CEnvLaser*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CEnvMicrophone>(CEnvMicrophone*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CEnvMicrophone>(CEnvMicrophone*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CEnvMuzzleFlash>(CEnvMuzzleFlash*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CEnvParticleScript>(CEnvParticleScript*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CEnvPlayerSurfaceTrigger>(CEnvPlayerSurfaceTrigger*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CEnvPlayerSurfaceTrigger>(CEnvPlayerSurfaceTrigger*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CEnvProjectedTexture>(CEnvProjectedTexture*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CEnvProjectedTexture>(CEnvProjectedTexture*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CEnvQuadraticBeam>(CEnvQuadraticBeam*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CEnvScreenEffect>(CEnvScreenEffect*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CEnvScreenOverlay>(CEnvScreenOverlay*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CEnvScreenOverlay>(CEnvScreenOverlay*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CEnvShake>(CEnvShake*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CEnvShake>(CEnvShake*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CEnvShooter>(CEnvShooter*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CEnvSoundscape>(CEnvSoundscape*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CEnvSoundscape>(CEnvSoundscape*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CEnvSoundscapeProxy>(CEnvSoundscapeProxy*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CEnvSoundscapeTriggerable>(CEnvSoundscapeTriggerable*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CEnvSpark>(CEnvSpark*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CEnvSpark>(CEnvSpark*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CEnvSplash>(CEnvSplash*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CEnvStarfield>(CEnvStarfield*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CEnvTonemapController>(CEnvTonemapController*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CEnvTonemapController>(CEnvTonemapController*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CEnvTracer>(CEnvTracer*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CEnvTracer>(CEnvTracer*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CEnvViewPunch>(CEnvViewPunch*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CEnvWind>(CEnvWind*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CEnvWind>(CEnvWind*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CEnvZoom>(CEnvZoom*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CEventAction>(CEventAction*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CEventQueue>(CEventQueue*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CFailableAchievement>(CFailableAchievement*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CFastHeadcrab>(CFastHeadcrab*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CFilterClass>(CFilterClass*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CFilterCombineBall>(CFilterCombineBall*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CFilterEnemy>(CFilterEnemy*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CFilterMassGreater>(CFilterMassGreater*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CFilterMultiple>(CFilterMultiple*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CFilterName>(CFilterName*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CFire>(CFire*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CFire>(CFire*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CFireSmoke>(CFireSmoke*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CFireTrail>(CFireTrail*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CFish>(CFish*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CFishPool>(CFishPool*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CFishPool>(CFishPool*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CFlare>(CFlare*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CFlare>(CFlare*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CFlexCycler>(CFlexCycler*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CFlextalkActor>(CFlextalkActor*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CFogController>(CFogController*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CFogController>(CFogController*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CFourWheelServerVehicle>(CFourWheelServerVehicle*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CFourWheelVehiclePhysics>(CFourWheelVehiclePhysics*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CFuncAreaPortalBase>(CFuncAreaPortalBase*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CFuncAreaPortalWindow>(CFuncAreaPortalWindow*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CFuncBrush>(CFuncBrush*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CFuncCombineBallSpawner>(CFuncCombineBallSpawner*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CFuncCombineBallSpawner>(CFuncCombineBallSpawner*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CFuncConveyor>(CFuncConveyor*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CFuncLadder>(CFuncLadder*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CFuncLadder>(CFuncLadder*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CFuncMonitor>(CFuncMonitor*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CFuncMoveLinear>(CFuncMoveLinear*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CFuncMoveLinear>(CFuncMoveLinear*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CFuncOccluder>(CFuncOccluder*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CFuncPlat>(CFuncPlat*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CFuncPlat>(CFuncPlat*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CFuncPlatRot>(CFuncPlatRot*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CFuncReflectiveGlass>(CFuncReflectiveGlass*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CFuncRotating>(CFuncRotating*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CFuncRotating>(CFuncRotating*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CFuncSmokeVolume>(CFuncSmokeVolume*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CFuncTank>(CFuncTank*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CFuncTank>(CFuncTank*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CFuncTankAPCRocket>(CFuncTankAPCRocket*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CFuncTankAirboatGun>(CFuncTankAirboatGun*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CFuncTankAirboatGun>(CFuncTankAirboatGun*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CFuncTankCombineCannon>(CFuncTankCombineCannon*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CFuncTankCombineCannon>(CFuncTankCombineCannon*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CFuncTankLaser>(CFuncTankLaser*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CFuncTankMortar>(CFuncTankMortar*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CFuncTankPhysCannister>(CFuncTankPhysCannister*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CFuncTankPulseLaser>(CFuncTankPulseLaser*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CFuncTankRocket>(CFuncTankRocket*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CFuncTankTrain>(CFuncTankTrain*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CFuncTankTrain>(CFuncTankTrain*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CFuncTrackAuto>(CFuncTrackAuto*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CFuncTrackChange>(CFuncTrackChange*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CFuncTrackChange>(CFuncTrackChange*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CFuncTrackTrain>(CFuncTrackTrain*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CFuncTrackTrain>(CFuncTrackTrain*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CFuncTrain>(CFuncTrain*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CFuncTrain>(CFuncTrain*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CFuncTrainControls>(CFuncTrainControls*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CFuncTrainControls>(CFuncTrainControls*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CFuncVPhysicsClip>(CFuncVPhysicsClip*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CFuncVehicleClip>(CFuncVehicleClip*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CFuncWall>(CFuncWall*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CFuncWallToggle>(CFuncWallToggle*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CFunc_Dust>(CFunc_Dust*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CFunc_LOD>(CFunc_LOD*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CGameEnd>(CGameEnd*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CGameGibManager>(CGameGibManager*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CGamePlayerEquip>(CGamePlayerEquip*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CGamePlayerZone>(CGamePlayerZone*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CGamePlayerZone>(CGamePlayerZone*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CGameScore>(CGameScore*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CGameText>(CGameText*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CGameUI>(CGameUI*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CGameUI>(CGameUI*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CGameWeaponManager>(CGameWeaponManager*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CGameWeaponManager>(CGameWeaponManager*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CGenericActor>(CGenericActor*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CGib>(CGib*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CGib>(CGib*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CGibShooter>(CGibShooter*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CGibShooter>(CGibShooter*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CGlobalState>(CGlobalState*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CGlobalState>(CGlobalState*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CGrenadeAR2>(CGrenadeAR2*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CGrenadeAR2>(CGrenadeAR2*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CGrenadeBeam>(CGrenadeBeam*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CGrenadeBeam>(CGrenadeBeam*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CGrenadeBeamChaser>(CGrenadeBeamChaser*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CGrenadeBeamChaser>(CGrenadeBeamChaser*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CGrenadeBugBait>(CGrenadeBugBait*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CGrenadeBugBait>(CGrenadeBugBait*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CGrenadeFrag>(CGrenadeFrag*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CGrenadeFrag>(CGrenadeFrag*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CGrenadeHelicopter>(CGrenadeHelicopter*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CGrenadeHelicopter>(CGrenadeHelicopter*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CGrenadeHomer>(CGrenadeHomer*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CGrenadeHomer>(CGrenadeHomer*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CGrenadePathfollower>(CGrenadePathfollower*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CGrenadePathfollower>(CGrenadePathfollower*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CGunTarget>(CGunTarget*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CGunTarget>(CGunTarget*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CGunshipRagdollMotion>(CGunshipRagdollMotion*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CHL2MPMachineGun>(CHL2MPMachineGun*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CHL2MP_Player>(CHL2MP_Player*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CHL2PlayerLocalData>(CHL2PlayerLocalData*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CHL2_Player>(CHL2_Player*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CHL2_Player>(CHL2_Player*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CHLMachineGun>(CHLMachineGun*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CHLSelectFireMachineGun>(CHLSelectFireMachineGun*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CHLSelectFireMachineGun>(CHLSelectFireMachineGun*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CHelicopterChunk>(CHelicopterChunk*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CHelicopterChunk>(CHelicopterChunk*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CInfoAPCMissileHint>(CInfoAPCMissileHint*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CInfoCameraLink>(CInfoCameraLink*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CInfoLightingRelative>(CInfoLightingRelative*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CInfoOverlayAccessor>(CInfoOverlayAccessor*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CInfoTeleporterCountdown>(CInfoTeleporterCountdown*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CInstancedSceneEntity>(CInstancedSceneEntity*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CItem>(CItem*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CItem>(CItem*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CItemSoda>(CItemSoda*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CItemSoda>(CItemSoda*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CItem_AmmoCrate>(CItem_AmmoCrate*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CItem_AmmoCrate>(CItem_AmmoCrate*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CItem_DynamicResupply>(CItem_DynamicResupply*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CItem_DynamicResupply>(CItem_DynamicResupply*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CItem_ItemCrate>(CItem_ItemCrate*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CItem_ItemCrate>(CItem_ItemCrate*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CKeepUpright>(CKeepUpright*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CKeepUpright>(CKeepUpright*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CLaserDot>(CLaserDot*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CLight>(CLight*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CLight>(CLight*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CLightGlow>(CLightGlow*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CLogicActiveAutosave>(CLogicActiveAutosave*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CLogicActiveAutosave>(CLogicActiveAutosave*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CLogicAuto>(CLogicAuto*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CLogicAuto>(CLogicAuto*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CLogicAutosave>(CLogicAutosave*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CLogicBranch>(CLogicBranch*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CLogicBranch>(CLogicBranch*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CLogicBranchList>(CLogicBranchList*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CLogicBranchList>(CLogicBranchList*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CLogicCase>(CLogicCase*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CLogicCase>(CLogicCase*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CLogicCollisionPair>(CLogicCollisionPair*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CLogicCompare>(CLogicCompare*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CLogicCompare>(CLogicCompare*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CLogicCompareInteger>(CLogicCompareInteger*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CLogicCompareInteger>(CLogicCompareInteger*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CLogicLineToEntity>(CLogicLineToEntity*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CLogicLineToEntity>(CLogicLineToEntity*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CLogicMeasureMovement>(CLogicMeasureMovement*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CLogicMeasureMovement>(CLogicMeasureMovement*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CLogicNavigation>(CLogicNavigation*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CLogicPlayerProxy>(CLogicPlayerProxy*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CLogicPlayerProxy>(CLogicPlayerProxy*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CLogicRelay>(CLogicRelay*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CLogicRelay>(CLogicRelay*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CLookDoor>(CLookDoor*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CLookDoor>(CLookDoor*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CLookDoorThinker>(CLookDoorThinker*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CLookDoorThinker>(CLookDoorThinker*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CMaterialModifyControl>(CMaterialModifyControl*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CMathColorBlend>(CMathColorBlend*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CMathColorBlend>(CMathColorBlend*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CMathCounter>(CMathCounter*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CMathCounter>(CMathCounter*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CMathRemap>(CMathRemap*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CMathRemap>(CMathRemap*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CMessage>(CMessage*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CMessage>(CMessage*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CMessageEntity>(CMessageEntity*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CMissile>(CMissile*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CMissile>(CMissile*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CMomentaryRotButton>(CMomentaryRotButton*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CMomentaryRotButton>(CMomentaryRotButton*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CMortarShell>(CMortarShell*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CMortarShell>(CMortarShell*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CMotorController>(CMotorController*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CMovementSpeedMod>(CMovementSpeedMod*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CMultiDamage>(CMultiDamage*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CMultiSource>(CMultiSource*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CMultiSource>(CMultiSource*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CNPCMaker>(CNPCMaker*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CNPCSimpleTalker>(CNPCSimpleTalker*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CNPCSimpleTalker>(CNPCSimpleTalker*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CNPCSimpleTalkerExpresser>(CNPCSimpleTalkerExpresser*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CNPCSpawnDestination>(CNPCSpawnDestination*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CNPCSpawnDestination>(CNPCSpawnDestination*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CNPC_APCDriver>(CNPC_APCDriver*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CNPC_Alyx>(CNPC_Alyx*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CNPC_Antlion>(CNPC_Antlion*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CNPC_Antlion>(CNPC_Antlion*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CNPC_AntlionGuard>(CNPC_AntlionGuard*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CNPC_AntlionGuard>(CNPC_AntlionGuard*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CNPC_AttackHelicopter>(CNPC_AttackHelicopter*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CNPC_AttackHelicopter>(CNPC_AttackHelicopter*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CNPC_Barnacle>(CNPC_Barnacle*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CNPC_Barnacle>(CNPC_Barnacle*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CNPC_Barney>(CNPC_Barney*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CNPC_Barney>(CNPC_Barney*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CNPC_BaseScanner>(CNPC_BaseScanner*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CNPC_BaseScanner>(CNPC_BaseScanner*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CNPC_BaseZombie>(CNPC_BaseZombie*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CNPC_BaseZombie>(CNPC_BaseZombie*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CNPC_Bullseye>(CNPC_Bullseye*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CNPC_Bullseye>(CNPC_Bullseye*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CNPC_CScanner>(CNPC_CScanner*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CNPC_CScanner>(CNPC_CScanner*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CNPC_CeilingTurret>(CNPC_CeilingTurret*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CNPC_CeilingTurret>(CNPC_CeilingTurret*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CNPC_Citizen>(CNPC_Citizen*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CNPC_Citizen>(CNPC_Citizen*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CNPC_ClawScanner>(CNPC_ClawScanner*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CNPC_Combine>(CNPC_Combine*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CNPC_CombineCamera>(CNPC_CombineCamera*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CNPC_CombineCamera>(CNPC_CombineCamera*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CNPC_CombineDropship>(CNPC_CombineDropship*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CNPC_CombineDropship>(CNPC_CombineDropship*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CNPC_CombineGunship>(CNPC_CombineGunship*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CNPC_CombineGunship>(CNPC_CombineGunship*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CNPC_CraneDriver>(CNPC_CraneDriver*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CNPC_CraneDriver>(CNPC_CraneDriver*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CNPC_Crow>(CNPC_Crow*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CNPC_Dog>(CNPC_Dog*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CNPC_Dog>(CNPC_Dog*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CNPC_EnemyFinder>(CNPC_EnemyFinder*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CNPC_EnemyFinder>(CNPC_EnemyFinder*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CNPC_EnemyFinderCombineCannon>(CNPC_EnemyFinderCombineCannon*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CNPC_Fisherman>(CNPC_Fisherman*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CNPC_FloorTurret>(CNPC_FloorTurret*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CNPC_FloorTurret>(CNPC_FloorTurret*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CNPC_Furniture>(CNPC_Furniture*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CNPC_GMan>(CNPC_GMan*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CNPC_GroundTurret>(CNPC_GroundTurret*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CNPC_GroundTurret>(CNPC_GroundTurret*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CNPC_Ichthyosaur>(CNPC_Ichthyosaur*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CNPC_Launcher>(CNPC_Launcher*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CNPC_Launcher>(CNPC_Launcher*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CNPC_Manhack>(CNPC_Manhack*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CNPC_Manhack>(CNPC_Manhack*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CNPC_MetroPolice>(CNPC_MetroPolice*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CNPC_MetroPolice>(CNPC_MetroPolice*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CNPC_MissileDefense>(CNPC_MissileDefense*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CNPC_Monk>(CNPC_Monk*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CNPC_Mossman>(CNPC_Mossman*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CNPC_PlayerCompanion>(CNPC_PlayerCompanion*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CNPC_PlayerCompanion>(CNPC_PlayerCompanion*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CNPC_PoisonZombie>(CNPC_PoisonZombie*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CNPC_PoisonZombie>(CNPC_PoisonZombie*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CNPC_RollerMine>(CNPC_RollerMine*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CNPC_RollerMine>(CNPC_RollerMine*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CNPC_Stalker>(CNPC_Stalker*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CNPC_Stalker>(CNPC_Stalker*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CNPC_Strider>(CNPC_Strider*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CNPC_Strider>(CNPC_Strider*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CNPC_VehicleDriver>(CNPC_VehicleDriver*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CNPC_Vortigaunt>(CNPC_Vortigaunt*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CNPC_Vortigaunt>(CNPC_Vortigaunt*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CNewNPC>(CNewNPC*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CNewRecharge>(CNewRecharge*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CNewRecharge>(CNewRecharge*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CNewWallHealth>(CNewWallHealth*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CNewWallHealth>(CNewWallHealth*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CNodeEnt>(CNodeEnt*)::nameHolder
 B guard variable for datamap_t* DataMapInit<COrnamentProp>(COrnamentProp*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CParticleFire>(CParticleFire*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CParticleLight>(CParticleLight*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CParticlePerformanceMonitor>(CParticlePerformanceMonitor*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CParticleSystem>(CParticleSystem*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CParticleSystem>(CParticleSystem*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPassengerInfo>(CPassengerInfo*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPathCorner>(CPathCorner*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CPathCorner>(CPathCorner*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPathKeyFrame>(CPathKeyFrame*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPathTrack>(CPathTrack*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CPathTrack>(CPathTrack*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPhysBox>(CPhysBox*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CPhysBox>(CPhysBox*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPhysBoxMultiplayer>(CPhysBoxMultiplayer*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPhysConstraint>(CPhysConstraint*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CPhysConstraint>(CPhysConstraint*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPhysConstraintSystem>(CPhysConstraintSystem*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CPhysConstraintSystem>(CPhysConstraintSystem*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPhysConvert>(CPhysConvert*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CPhysConvert>(CPhysConvert*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPhysExplosion>(CPhysExplosion*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CPhysExplosion>(CPhysExplosion*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPhysForce>(CPhysForce*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CPhysForce>(CPhysForce*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPhysHinge>(CPhysHinge*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPhysImpact>(CPhysImpact*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CPhysImpact>(CPhysImpact*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPhysLength>(CPhysLength*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPhysMagnet>(CPhysMagnet*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CPhysMagnet>(CPhysMagnet*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPhysMotor>(CPhysMotor*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CPhysMotor>(CPhysMotor*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPhysPulley>(CPhysPulley*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPhysSlideConstraint>(CPhysSlideConstraint*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPhysThruster>(CPhysThruster*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPhysTorque>(CPhysTorque*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPhysicsCannister>(CPhysicsCannister*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CPhysicsCannister>(CPhysicsCannister*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPhysicsEntitySolver>(CPhysicsEntitySolver*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPhysicsNPCSolver>(CPhysicsNPCSolver*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CPhysicsNPCSolver>(CPhysicsNPCSolver*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPhysicsProp>(CPhysicsProp*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CPhysicsProp>(CPhysicsProp*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPhysicsPropMultiplayer>(CPhysicsPropMultiplayer*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPhysicsPropRespawnable>(CPhysicsPropRespawnable*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CPhysicsPropRespawnable>(CPhysicsPropRespawnable*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPhysicsShake>(CPhysicsShake*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPhysicsSpring>(CPhysicsSpring*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CPhysicsSpring>(CPhysicsSpring*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPhysicsWind>(CPhysicsWind*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPhysicsWire>(CPhysicsWire*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPlasma>(CPlasma*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPlayerLocalData>(CPlayerLocalData*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPlayerResource>(CPlayerResource*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CPlayerResource>(CPlayerResource*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPlayerState>(CPlayerState*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPointAngleSensor>(CPointAngleSensor*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CPointAngleSensor>(CPointAngleSensor*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPointAngularVelocitySensor>(CPointAngularVelocitySensor*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CPointAngularVelocitySensor>(CPointAngularVelocitySensor*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPointBonusMapsAccessor>(CPointBonusMapsAccessor*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPointCamera>(CPointCamera*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CPointCamera>(CPointCamera*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPointClientCommand>(CPointClientCommand*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPointCombineBallLauncher>(CPointCombineBallLauncher*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPointCommentaryNode>(CPointCommentaryNode*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CPointCommentaryNode>(CPointCommentaryNode*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPointDevShotCamera>(CPointDevShotCamera*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CPointDevShotCamera>(CPointDevShotCamera*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPointGamestatsCounter>(CPointGamestatsCounter*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPointHurt>(CPointHurt*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CPointHurt>(CPointHurt*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPointPlayerMoveConstraint>(CPointPlayerMoveConstraint*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CPointPlayerMoveConstraint>(CPointPlayerMoveConstraint*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPointProximitySensor>(CPointProximitySensor*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CPointProximitySensor>(CPointProximitySensor*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPointPush>(CPointPush*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CPointPush>(CPointPush*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPointServerCommand>(CPointServerCommand*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPointSpotlight>(CPointSpotlight*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CPointSpotlight>(CPointSpotlight*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPointTeleport>(CPointTeleport*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPointTemplate>(CPointTemplate*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CPointTemplate>(CPointTemplate*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPointVelocitySensor>(CPointVelocitySensor*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CPointVelocitySensor>(CPointVelocitySensor*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPoseController>(CPoseController*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CPoseController>(CPoseController*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPrecipitation>(CPrecipitation*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CProjectedDecal>(CProjectedDecal*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CProjectedDecal>(CProjectedDecal*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPropAPC>(CPropAPC*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CPropAPC>(CPropAPC*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPropAirboat>(CPropAirboat*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CPropAirboat>(CPropAirboat*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPropCombineBall>(CPropCombineBall*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CPropCombineBall>(CPropCombineBall*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPropCrane>(CPropCrane*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CPropCrane>(CPropCrane*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPropDoorRotating>(CPropDoorRotating*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPropThumper>(CPropThumper*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CPropThumper>(CPropThumper*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPropVehicle>(CPropVehicle*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CPropVehicle>(CPropVehicle*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPropVehicleDriveable>(CPropVehicleDriveable*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CPropVehicleDriveable>(CPropVehicleDriveable*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPropVehiclePrisonerPod>(CPropVehiclePrisonerPod*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CPropVehiclePrisonerPod>(CPropVehiclePrisonerPod*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CPropVehicleViewController>(CPropVehicleViewController*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CProtoSniper>(CProtoSniper*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CProtoSniper>(CProtoSniper*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CRagdollBoogie>(CRagdollBoogie*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CRagdollBoogie>(CRagdollBoogie*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CRagdollConstraint>(CRagdollConstraint*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CRagdollMagnet>(CRagdollMagnet*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CRagdollManager>(CRagdollManager*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CRagdollProp>(CRagdollProp*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CRagdollProp>(CRagdollProp*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CRagdollPropAttached>(CRagdollPropAttached*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CRagdollPropAttached>(CRagdollPropAttached*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CRallyPoint>(CRallyPoint*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CRallyPoint>(CRallyPoint*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CRandSimTimer>(CRandSimTimer*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CRandStopwatch>(CRandStopwatch*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CRecharge>(CRecharge*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CRecharge>(CRecharge*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CRevertSaved>(CRevertSaved*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CRevertSaved>(CRevertSaved*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CRollerController>(CRollerController*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CRopeAnchor>(CRopeAnchor*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CRopeAnchor>(CRopeAnchor*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CRopeKeyframe>(CRopeKeyframe*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CRotDoor>(CRotDoor*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CRotorWashEmitter>(CRotorWashEmitter*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CRotorWashShooter>(CRotorWashShooter*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CRuleEntity>(CRuleEntity*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CRulePointEntity>(CRulePointEntity*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CSatchelCharge>(CSatchelCharge*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CSatchelCharge>(CSatchelCharge*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CSceneEntity>(CSceneEntity*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CSceneEntity>(CSceneEntity*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CSceneListManager>(CSceneListManager*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CSceneListManager>(CSceneListManager*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CSceneManager>(CSceneManager*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CSceneManager>(CSceneManager*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CScriptIntro>(CScriptIntro*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CScriptIntro>(CScriptIntro*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CScriptedTarget>(CScriptedTarget*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CScriptedTarget>(CScriptedTarget*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CServerNetworkProperty>(CServerNetworkProperty*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CShadowControl>(CShadowControl*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CSimTimer>(CSimTimer*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CSimpleSimTimer>(CSimpleSimTimer*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CSkyCamera>(CSkyCamera*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CSlideshowDisplay>(CSlideshowDisplay*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CSmokeStack>(CSmokeStack*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CSmokeStackLightInfo>(CSmokeStackLightInfo*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CSniperBullet>(CSniperBullet*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CSniperBullet>(CSniperBullet*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CSniperTarget>(CSniperTarget*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CSound>(CSound*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CSoundEnt>(CSoundEnt*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CSoundEnvelope>(CSoundEnvelope*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CSoundPatch>(CSoundPatch*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CSparkTrail>(CSparkTrail*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CSparkTrail>(CSparkTrail*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CSpeaker>(CSpeaker*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CSpeaker>(CSpeaker*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CSpotlightEnd>(CSpotlightEnd*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CSprite>(CSprite*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CSprite>(CSprite*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CSpriteTrail>(CSpriteTrail*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CSteamJet>(CSteamJet*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CStopwatch>(CStopwatch*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CStopwatchBase>(CStopwatchBase*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CStriderMinigun>(CStriderMinigun*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CStripWeapons>(CStripWeapons*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CSun>(CSun*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CTakeDamageInfo>(CTakeDamageInfo*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CTankTargetChange>(CTankTargetChange*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CTankTrainAI>(CTankTrainAI*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CTankTrainAI>(CTankTrainAI*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CTargetCDAudioRep>(CTargetCDAudioRep*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CTargetChangeGravity>(CTargetChangeGravity*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CTargetGunshipCrash>(CTargetGunshipCrash*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CTargetGunshipCrash>(CTargetGunshipCrash*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CTeamControlPoint>(CTeamControlPoint*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CTeamControlPoint>(CTeamControlPoint*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CTeamControlPointMaster>(CTeamControlPointMaster*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CTeamControlPointMaster>(CTeamControlPointMaster*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CTeamControlPointRound>(CTeamControlPointRound*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CTeamControlPointRound>(CTeamControlPointRound*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CTeamRoundTimer>(CTeamRoundTimer*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CTeamRoundTimer>(CTeamRoundTimer*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CTeamSpawnPoint>(CTeamSpawnPoint*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CTeamSpawnPoint>(CTeamSpawnPoint*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CTeamTrainWatcher>(CTeamTrainWatcher*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CTeamTrainWatcher>(CTeamTrainWatcher*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CTeamVehicleSpawnPoint>(CTeamVehicleSpawnPoint*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CTeamVehicleSpawnPoint>(CTeamVehicleSpawnPoint*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CTeamplayRoundBasedRulesProxy>(CTeamplayRoundBasedRulesProxy*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CTemplateNPCMaker>(CTemplateNPCMaker*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CTesla>(CTesla*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CTesla>(CTesla*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CTestTraceline>(CTestTraceline*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CTestTraceline>(CTestTraceline*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CTextureToggle>(CTextureToggle*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CThrustController>(CThrustController*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CTimerEntity>(CTimerEntity*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CTimerEntity>(CTimerEntity*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CTriggerApplyImpulse>(CTriggerApplyImpulse*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CTriggerAreaCapture>(CTriggerAreaCapture*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CTriggerAreaCapture>(CTriggerAreaCapture*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CTriggerBrush>(CTriggerBrush*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CTriggerBrush>(CTriggerBrush*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CTriggerCamera>(CTriggerCamera*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CTriggerCamera>(CTriggerCamera*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CTriggerGravity>(CTriggerGravity*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CTriggerGravity>(CTriggerGravity*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CTriggerHurt>(CTriggerHurt*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CTriggerHurt>(CTriggerHurt*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CTriggerImpact>(CTriggerImpact*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CTriggerImpact>(CTriggerImpact*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CTriggerLook>(CTriggerLook*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CTriggerLook>(CTriggerLook*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CTriggerMultiple>(CTriggerMultiple*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CTriggerMultiple>(CTriggerMultiple*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CTriggerPhysicsTrap>(CTriggerPhysicsTrap*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CTriggerPlayerMovement>(CTriggerPlayerMovement*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CTriggerProximity>(CTriggerProximity*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CTriggerProximity>(CTriggerProximity*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CTriggerPush>(CTriggerPush*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CTriggerRemove>(CTriggerRemove*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CTriggerRemove>(CTriggerRemove*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CTriggerSave>(CTriggerSave*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CTriggerSoundscape>(CTriggerSoundscape*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CTriggerSoundscape>(CTriggerSoundscape*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CTriggerTeleport>(CTriggerTeleport*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CTriggerTeleportRelative>(CTriggerTeleportRelative*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CTriggerToggleSave>(CTriggerToggleSave*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CTriggerVPhysicsMotion>(CTriggerVPhysicsMotion*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CTriggerVPhysicsMotion>(CTriggerVPhysicsMotion*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CTriggerWateryDeath>(CTriggerWateryDeath*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CTriggerWateryDeath>(CTriggerWateryDeath*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CTriggerWeaponDissolve>(CTriggerWeaponDissolve*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CTriggerWeaponDissolve>(CTriggerWeaponDissolve*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CTriggerWeaponStrip>(CTriggerWeaponStrip*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CTriggerWind>(CTriggerWind*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CTriggerWind>(CTriggerWind*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CTripmineGrenade>(CTripmineGrenade*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CTripmineGrenade>(CTripmineGrenade*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CTurretTipController>(CTurretTipController*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CTurretTipController>(CTurretTipController*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CVGuiScreen>(CVGuiScreen*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CVortigauntChargeToken>(CVortigauntChargeToken*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CVortigauntChargeToken>(CVortigauntChargeToken*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CVortigauntEffectDispel>(CVortigauntEffectDispel*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CVoteController>(CVoteController*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CVoteController>(CVoteController*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CWC_UpdateIgnoreList>(CWC_UpdateIgnoreList*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CWallHealth>(CWallHealth*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CWallHealth>(CWallHealth*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CWaterBullet>(CWaterBullet*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CWaterBullet>(CWaterBullet*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CWaterLODControl>(CWaterLODControl*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CWateryDeathLeech>(CWateryDeathLeech*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CWateryDeathLeech>(CWateryDeathLeech*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CWeaponAnnabelle>(CWeaponAnnabelle*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CWeaponBugBait>(CWeaponBugBait*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CWeaponBugBait>(CWeaponBugBait*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CWeaponCycler>(CWeaponCycler*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CWeaponHL2MPBase>(CWeaponHL2MPBase*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CWeapon_SLAM>(CWeapon_SLAM*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CWeapon_SLAM>(CWeapon_SLAM*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CWeightButton>(CWeightButton*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CWeightButton>(CWeightButton*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CWindowPane>(CWindowPane*)::dataDesc
 B guard variable for datamap_t* DataMapInit<CWindowPane>(CWindowPane*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CWorld>(CWorld*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CWorldItem>(CWorldItem*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CWreckage>(CWreckage*)::nameHolder
 B guard variable for datamap_t* DataMapInit<CZombie>(CZombie*)::nameHolder
 B guard variable for datamap_t* DataMapInit<ConceptHistory_t>(ConceptHistory_t*)::nameHolder
 B guard variable for datamap_t* DataMapInit<DustTrail>(DustTrail*)::nameHolder
 B guard variable for datamap_t* DataMapInit<EntityParticleTrailInfo_t>(EntityParticleTrailInfo_t*)::nameHolder
 B guard variable for datamap_t* DataMapInit<EventQueuePrioritizedEvent_t>(EventQueuePrioritizedEvent_t*)::dataDesc
 B guard variable for datamap_t* DataMapInit<EventQueuePrioritizedEvent_t>(EventQueuePrioritizedEvent_t*)::nameHolder
 B guard variable for datamap_t* DataMapInit<FilterDamageType>(FilterDamageType*)::nameHolder
 B guard variable for datamap_t* DataMapInit<FilterTeam>(FilterTeam*)::nameHolder
 B guard variable for datamap_t* DataMapInit<HintNodeData>(HintNodeData*)::nameHolder
 B guard variable for datamap_t* DataMapInit<LadderMove_t>(LadderMove_t*)::nameHolder
 B guard variable for datamap_t* DataMapInit<ParticleSmokeGrenade>(ParticleSmokeGrenade*)::nameHolder
 B guard variable for datamap_t* DataMapInit<PhysBlockHeader_t>(PhysBlockHeader_t*)::nameHolder
 B guard variable for datamap_t* DataMapInit<PhysObjectHeader_t>(PhysObjectHeader_t*)::nameHolder
 B guard variable for datamap_t* DataMapInit<Relationship_t>(Relationship_t*)::nameHolder
 B guard variable for datamap_t* DataMapInit<Response>(Response*)::nameHolder
 B guard variable for datamap_t* DataMapInit<ResponseContext_t>(ResponseContext_t*)::nameHolder
 B guard variable for datamap_t* DataMapInit<ResponseGroup>(ResponseGroup*)::nameHolder
 B guard variable for datamap_t* DataMapInit<RocketTrail>(RocketTrail*)::nameHolder
 B guard variable for datamap_t* DataMapInit<SaveRestoreBlockHeader_t>(SaveRestoreBlockHeader_t*)::nameHolder
 B guard variable for datamap_t* DataMapInit<ScriptedNPCInteraction_Phases_t>(ScriptedNPCInteraction_Phases_t*)::nameHolder
 B guard variable for datamap_t* DataMapInit<ScriptedNPCInteraction_t>(ScriptedNPCInteraction_t*)::nameHolder
 B guard variable for datamap_t* DataMapInit<SmokeTrail>(SmokeTrail*)::nameHolder
 B guard variable for datamap_t* DataMapInit<SoundCommand_t>(SoundCommand_t*)::nameHolder
 B guard variable for datamap_t* DataMapInit<SporeExplosion>(SporeExplosion*)::nameHolder
 B guard variable for datamap_t* DataMapInit<SporeTrail>(SporeTrail*)::nameHolder
 B guard variable for datamap_t* DataMapInit<TemplateEntityData_t>(TemplateEntityData_t*)::nameHolder
 B guard variable for datamap_t* DataMapInit<UnreachableEnt_t>(UnreachableEnt_t*)::nameHolder
 B guard variable for datamap_t* DataMapInit<ViewSmoothingData_t>(ViewSmoothingData_t*)::nameHolder
 B guard variable for datamap_t* DataMapInit<audioparams_t>(audioparams_t*)::nameHolder
 B guard variable for datamap_t* DataMapInit<entitytable_t>(entitytable_t*)::nameHolder
 B guard variable for datamap_t* DataMapInit<flexsetting_t>(flexsetting_t*)::nameHolder
 B guard variable for datamap_t* DataMapInit<flexsettinghdr_t>(flexsettinghdr_t*)::nameHolder
 B guard variable for datamap_t* DataMapInit<flexweight_t>(flexweight_t*)::nameHolder
 B guard variable for datamap_t* DataMapInit<fogparams_t>(fogparams_t*)::nameHolder
 B guard variable for datamap_t* DataMapInit<fogplayerparams_t>(fogplayerparams_t*)::nameHolder
 B guard variable for datamap_t* DataMapInit<game_shadowcontrol_params_t>(game_shadowcontrol_params_t*)::nameHolder
 B guard variable for datamap_t* DataMapInit<globalentity_t>(globalentity_t*)::nameHolder
 B guard variable for datamap_t* DataMapInit<locksound_t>(locksound_t*)::nameHolder
 B guard variable for datamap_t* DataMapInit<magnetted_objects_t>(magnetted_objects_t*)::dataDesc
 B guard variable for datamap_t* DataMapInit<magnetted_objects_t>(magnetted_objects_t*)::nameHolder
 B guard variable for datamap_t* DataMapInit<modifiedconvars_t>(modifiedconvars_t*)::nameHolder
 B guard variable for datamap_t* DataMapInit<physfollower_t>(physfollower_t*)::nameHolder
 B guard variable for datamap_t* DataMapInit<sky3dparams_t>(sky3dparams_t*)::nameHolder
 B guard variable for datamap_t* DataMapInit<template_t>(template_t*)::nameHolder
 B guard variable for datamap_t* DataMapInit<thinkfunc_t>(thinkfunc_t*)::nameHolder
 B guard variable for datamap_t* DataMapInit<vehicle_crashsound_t>(vehicle_crashsound_t*)::nameHolder
 B guard variable for datamap_t* DataMapInit<vehicle_gear_t>(vehicle_gear_t*)::nameHolder
 B guard variable for datamap_t* DataMapInit<vehiclesounds_t>(vehiclesounds_t*)::dataDesc
 B guard variable for datamap_t* DataMapInit<vehiclesounds_t>(vehiclesounds_t*)::nameHolder
 B guard variable for datamap_t* DataMapInit<washentity_t>(washentity_t*)::nameHolder
 B guard variable for int ServerClassInit<DT_AI_BaseNPC::ignored>(DT_AI_BaseNPC::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_AR2Explosion::ignored>(DT_AR2Explosion::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_AlyxEmpEffect::ignored>(DT_AlyxEmpEffect::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_AnimTimeMustBeFirst::ignored>(DT_AnimTimeMustBeFirst::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_Animationlayer::ignored>(DT_Animationlayer::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_BCCLocalPlayerExclusive::ignored>(DT_BCCLocalPlayerExclusive::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_Barnacle::ignored>(DT_Barnacle::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_BaseAnimating::ignored>(DT_BaseAnimating::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_BaseAnimatingOverlay::ignored>(DT_BaseAnimatingOverlay::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_BaseBeam::ignored>(DT_BaseBeam::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_BaseCombatCharacter::ignored>(DT_BaseCombatCharacter::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_BaseCombatWeapon::ignored>(DT_BaseCombatWeapon::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_BaseDoor::ignored>(DT_BaseDoor::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_BaseEntity::ignored>(DT_BaseEntity::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_BaseFlex::ignored>(DT_BaseFlex::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_BaseGrenade::ignored>(DT_BaseGrenade::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_BaseHL2MPBludgeonWeapon::ignored>(DT_BaseHL2MPBludgeonWeapon::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_BaseHL2MPCombatWeapon::ignored>(DT_BaseHL2MPCombatWeapon::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_BaseHLBludgeonWeapon::ignored>(DT_BaseHLBludgeonWeapon::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_BaseHLCombatWeapon::ignored>(DT_BaseHLCombatWeapon::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_BaseHelicopter::ignored>(DT_BaseHelicopter::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_BaseParticleEntity::ignored>(DT_BaseParticleEntity::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_BasePlayer::ignored>(DT_BasePlayer::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_BaseProjectile::ignored>(DT_BaseProjectile::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_BasePropDoor::ignored>(DT_BasePropDoor::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_BaseTeamObjectiveResource::ignored>(DT_BaseTeamObjectiveResource::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_BaseTempEntity::ignored>(DT_BaseTempEntity::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_BaseViewModel::ignored>(DT_BaseViewModel::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_Beam::ignored>(DT_Beam::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_BeamPredictableId::ignored>(DT_BeamPredictableId::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_BoneFollower::ignored>(DT_BoneFollower::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_BreakableProp::ignored>(DT_BreakableProp::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_BreakableSurface::ignored>(DT_BreakableSurface::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_CFish::ignored>(DT_CFish::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_CitadelEnergyCore::ignored>(DT_CitadelEnergyCore::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_CollisionProperty::ignored>(DT_CollisionProperty::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_ColorCorrection::ignored>(DT_ColorCorrection::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_ColorCorrectionVolume::ignored>(DT_ColorCorrectionVolume::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_CombineGunship::ignored>(DT_CombineGunship::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_Corpse::ignored>(DT_Corpse::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_CrossbowBolt::ignored>(DT_CrossbowBolt::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_DetailController::ignored>(DT_DetailController::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_DustTrail::ignored>(DT_DustTrail::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_DynamicLight::ignored>(DT_DynamicLight::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_DynamicProp::ignored>(DT_DynamicProp::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_EffectData::ignored>(DT_EffectData::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_Embers::ignored>(DT_Embers::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_EntityDissolve::ignored>(DT_EntityDissolve::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_EntityFlame::ignored>(DT_EntityFlame::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_EntityParticleTrail::ignored>(DT_EntityParticleTrail::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_EntityParticleTrailInfo::ignored>(DT_EntityParticleTrailInfo::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_EnvHeadcrabCanister::ignored>(DT_EnvHeadcrabCanister::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_EnvHeadcrabCanisterShared::ignored>(DT_EnvHeadcrabCanisterShared::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_EnvParticleScript::ignored>(DT_EnvParticleScript::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_EnvProjectedTexture::ignored>(DT_EnvProjectedTexture::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_EnvScreenEffect::ignored>(DT_EnvScreenEffect::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_EnvScreenOverlay::ignored>(DT_EnvScreenOverlay::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_EnvStarfield::ignored>(DT_EnvStarfield::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_EnvTonemapController::ignored>(DT_EnvTonemapController::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_EnvWind::ignored>(DT_EnvWind::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_EnvWindShared::ignored>(DT_EnvWindShared::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_FireSmoke::ignored>(DT_FireSmoke::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_FireTrail::ignored>(DT_FireTrail::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_Flare::ignored>(DT_Flare::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_FogController::ignored>(DT_FogController::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_FuncAreaPortalWindow::ignored>(DT_FuncAreaPortalWindow::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_FuncConveyor::ignored>(DT_FuncConveyor::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_FuncLadder::ignored>(DT_FuncLadder::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_FuncMonitor::ignored>(DT_FuncMonitor::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_FuncOccluder::ignored>(DT_FuncOccluder::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_FuncReflectiveGlass::ignored>(DT_FuncReflectiveGlass::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_FuncRotating::ignored>(DT_FuncRotating::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_FuncSmokeVolume::ignored>(DT_FuncSmokeVolume::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_FuncTrackTrain::ignored>(DT_FuncTrackTrain::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_Func_Dust::ignored>(DT_Func_Dust::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_Func_LOD::ignored>(DT_Func_LOD::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_GameRulesProxy::ignored>(DT_GameRulesProxy::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_HL2GameRules::ignored>(DT_HL2GameRules::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_HL2Local::ignored>(DT_HL2Local::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_HL2MPGameRulesProxy::ignored>(DT_HL2MPGameRulesProxy::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_HL2MPMachineGun::ignored>(DT_HL2MPMachineGun::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_HL2MPRagdoll::ignored>(DT_HL2MPRagdoll::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_HL2MPRules::ignored>(DT_HL2MPRules::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_HL2MP_Player::ignored>(DT_HL2MP_Player::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_HL2_Player::ignored>(DT_HL2_Player::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_HLMachineGun::ignored>(DT_HLMachineGun::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_HLSelectFireMachineGun::ignored>(DT_HLSelectFireMachineGun::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_HalfLife2Proxy::ignored>(DT_HalfLife2Proxy::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_HandleTest::ignored>(DT_HandleTest::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_InfoLadderDismount::ignored>(DT_InfoLadderDismount::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_InfoLightingRelative::ignored>(DT_InfoLightingRelative::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_InfoOverlayAccessor::ignored>(DT_InfoOverlayAccessor::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_InfoTeleporterCountdown::ignored>(DT_InfoTeleporterCountdown::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_LaserDot::ignored>(DT_LaserDot::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_LightGlow::ignored>(DT_LightGlow::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_Local::ignored>(DT_Local::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_LocalActiveWeaponData::ignored>(DT_LocalActiveWeaponData::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_LocalPlayerExclusive::ignored>(DT_LocalPlayerExclusive::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_LocalWeaponData::ignored>(DT_LocalWeaponData::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_MaterialModifyControl::ignored>(DT_MaterialModifyControl::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_MortarShell::ignored>(DT_MortarShell::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_MovieExplosion::ignored>(DT_MovieExplosion::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_NPC_AntlionGuard::ignored>(DT_NPC_AntlionGuard::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_NPC_Barney::ignored>(DT_NPC_Barney::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_NPC_Manhack::ignored>(DT_NPC_Manhack::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_NPC_Strider::ignored>(DT_NPC_Strider::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_NPC_Vortigaunt::ignored>(DT_NPC_Vortigaunt::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_OverlayVars::ignored>(DT_OverlayVars::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_ParticleFire::ignored>(DT_ParticleFire::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_ParticlePerformanceMonitor::ignored>(DT_ParticlePerformanceMonitor::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_ParticleSmokeGrenade::ignored>(DT_ParticleSmokeGrenade::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_ParticleSystem::ignored>(DT_ParticleSystem::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_PhysBox::ignored>(DT_PhysBox::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_PhysBoxMultiplayer::ignored>(DT_PhysBoxMultiplayer::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_PhysMagnet::ignored>(DT_PhysMagnet::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_PhysicsProp::ignored>(DT_PhysicsProp::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_PhysicsPropMultiplayer::ignored>(DT_PhysicsPropMultiplayer::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_Plasma::ignored>(DT_Plasma::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_PlayerResource::ignored>(DT_PlayerResource::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_PlayerState::ignored>(DT_PlayerState::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_PointCamera::ignored>(DT_PointCamera::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_PointCommentaryNode::ignored>(DT_PointCommentaryNode::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_PoseController::ignored>(DT_PoseController::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_Precipitation::ignored>(DT_Precipitation::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_PredictableId::ignored>(DT_PredictableId::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_PredictedViewModel::ignored>(DT_PredictedViewModel::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_PropAirboat::ignored>(DT_PropAirboat::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_PropCombineBall::ignored>(DT_PropCombineBall::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_PropCrane::ignored>(DT_PropCrane::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_PropVehicleDriveable::ignored>(DT_PropVehicleDriveable::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_PropVehiclePrisonerPod::ignored>(DT_PropVehiclePrisonerPod::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_ProxyToggle::ignored>(DT_ProxyToggle::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_ProxyToggle_ProxiedData::ignored>(DT_ProxyToggle_ProxiedData::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_QuadraticBeam::ignored>(DT_QuadraticBeam::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_Ragdoll::ignored>(DT_Ragdoll::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_RagdollManager::ignored>(DT_RagdollManager::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_Ragdoll_Attached::ignored>(DT_Ragdoll_Attached::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_RocketTrail::ignored>(DT_RocketTrail::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_RollerMine::ignored>(DT_RollerMine::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_RopeKeyframe::ignored>(DT_RopeKeyframe::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_RotorWashEmitter::ignored>(DT_RotorWashEmitter::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_SceneEntity::ignored>(DT_SceneEntity::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_ScriptIntro::ignored>(DT_ScriptIntro::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_ServerAnimationData::ignored>(DT_ServerAnimationData::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_ShadowControl::ignored>(DT_ShadowControl::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_SlideshowDisplay::ignored>(DT_SlideshowDisplay::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_SmokeStack::ignored>(DT_SmokeStack::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_SmokeTrail::ignored>(DT_SmokeTrail::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_SporeExplosion::ignored>(DT_SporeExplosion::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_SporeTrail::ignored>(DT_SporeTrail::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_SpotlightEnd::ignored>(DT_SpotlightEnd::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_Sprite::ignored>(DT_Sprite::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_SpriteOriented::ignored>(DT_SpriteOriented::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_SpriteTrail::ignored>(DT_SpriteTrail::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_SteamJet::ignored>(DT_SteamJet::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_Sun::ignored>(DT_Sun::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_TEAntlionDust::ignored>(DT_TEAntlionDust::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_TEArmorRicochet::ignored>(DT_TEArmorRicochet::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_TEBSPDecal::ignored>(DT_TEBSPDecal::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_TEBeamEntPoint::ignored>(DT_TEBeamEntPoint::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_TEBeamEnts::ignored>(DT_TEBeamEnts::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_TEBeamFollow::ignored>(DT_TEBeamFollow::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_TEBeamLaser::ignored>(DT_TEBeamLaser::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_TEBeamPoints::ignored>(DT_TEBeamPoints::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_TEBeamRing::ignored>(DT_TEBeamRing::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_TEBeamRingPoint::ignored>(DT_TEBeamRingPoint::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_TEBeamSpline::ignored>(DT_TEBeamSpline::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_TEBloodSprite::ignored>(DT_TEBloodSprite::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_TEBloodStream::ignored>(DT_TEBloodStream::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_TEBreakModel::ignored>(DT_TEBreakModel::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_TEBubbleTrail::ignored>(DT_TEBubbleTrail::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_TEBubbles::ignored>(DT_TEBubbles::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_TEClientProjectile::ignored>(DT_TEClientProjectile::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_TEConcussiveExplosion::ignored>(DT_TEConcussiveExplosion::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_TEDecal::ignored>(DT_TEDecal::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_TEDust::ignored>(DT_TEDust::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_TEDynamicLight::ignored>(DT_TEDynamicLight::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_TEEffectDispatch::ignored>(DT_TEEffectDispatch::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_TEEnergySplash::ignored>(DT_TEEnergySplash::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_TEExplosion::ignored>(DT_TEExplosion::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_TEFizz::ignored>(DT_TEFizz::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_TEFootprintDecal::ignored>(DT_TEFootprintDecal::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_TEGaussExplosion::ignored>(DT_TEGaussExplosion::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_TEGlowSprite::ignored>(DT_TEGlowSprite::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_TEHL2MPFireBullets::ignored>(DT_TEHL2MPFireBullets::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_TEImpact::ignored>(DT_TEImpact::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_TEKillPlayerAttachments::ignored>(DT_TEKillPlayerAttachments::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_TELargeFunnel::ignored>(DT_TELargeFunnel::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_TEMetalSparks::ignored>(DT_TEMetalSparks::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_TEMuzzleFlash::ignored>(DT_TEMuzzleFlash::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_TEParticleSystem::ignored>(DT_TEParticleSystem::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_TEPhysicsProp::ignored>(DT_TEPhysicsProp::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_TEPlayerDecal::ignored>(DT_TEPlayerDecal::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_TEProjectedDecal::ignored>(DT_TEProjectedDecal::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_TEShatterSurface::ignored>(DT_TEShatterSurface::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_TEShowLine::ignored>(DT_TEShowLine::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_TESmoke::ignored>(DT_TESmoke::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_TESparks::ignored>(DT_TESparks::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_TESprite::ignored>(DT_TESprite::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_TESpriteSpray::ignored>(DT_TESpriteSpray::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_TEWorldDecal::ignored>(DT_TEWorldDecal::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_Team::ignored>(DT_Team::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_TeamRoundTimer::ignored>(DT_TeamRoundTimer::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_TeamTrainWatcher::ignored>(DT_TeamTrainWatcher::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_TeamplayRoundBasedRules::ignored>(DT_TeamplayRoundBasedRules::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_TeamplayRoundBasedRulesProxy::ignored>(DT_TeamplayRoundBasedRulesProxy::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_Tesla::ignored>(DT_Tesla::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_TestTraceline::ignored>(DT_TestTraceline::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_VGuiScreen::ignored>(DT_VGuiScreen::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_VortigauntChargeToken::ignored>(DT_VortigauntChargeToken::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_VortigauntEffectDispel::ignored>(DT_VortigauntEffectDispel::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_VoteController::ignored>(DT_VoteController::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_WORLD::ignored>(DT_WORLD::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_WaterBullet::ignored>(DT_WaterBullet::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_WaterLODControl::ignored>(DT_WaterLODControl::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_Weapon357::ignored>(DT_Weapon357::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_WeaponAR2::ignored>(DT_WeaponAR2::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_WeaponAnnabelle::ignored>(DT_WeaponAnnabelle::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_WeaponBugBait::ignored>(DT_WeaponBugBait::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_WeaponCrossbow::ignored>(DT_WeaponCrossbow::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_WeaponCrowbar::ignored>(DT_WeaponCrowbar::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_WeaponCubemap::ignored>(DT_WeaponCubemap::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_WeaponCycler::ignored>(DT_WeaponCycler::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_WeaponFrag::ignored>(DT_WeaponFrag::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_WeaponHL2MPBase::ignored>(DT_WeaponHL2MPBase::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_WeaponPhysCannon::ignored>(DT_WeaponPhysCannon::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_WeaponPistol::ignored>(DT_WeaponPistol::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_WeaponRPG::ignored>(DT_WeaponRPG::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_WeaponSMG1::ignored>(DT_WeaponSMG1::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_WeaponShotgun::ignored>(DT_WeaponShotgun::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_WeaponStunStick::ignored>(DT_WeaponStunStick::ignored*)::g_SendProps
 B guard variable for int ServerClassInit<DT_Weapon_SLAM::ignored>(DT_Weapon_SLAM::ignored*)::g_SendProps
 B hap_airboat_gun_mag
 B hap_turret_mag
 B hl2_darkness_flashlight_factor
 B hl2_episodic
 B hl2_normspeed
 B hl2_sprintspeed
 B hl2_walkspeed
 B int ServerClassInit<DT_AI_BaseNPC::ignored>(DT_AI_BaseNPC::ignored*)::g_SendProps
 B int ServerClassInit<DT_AR2Explosion::ignored>(DT_AR2Explosion::ignored*)::g_SendProps
 B int ServerClassInit<DT_AlyxEmpEffect::ignored>(DT_AlyxEmpEffect::ignored*)::g_SendProps
 B int ServerClassInit<DT_AnimTimeMustBeFirst::ignored>(DT_AnimTimeMustBeFirst::ignored*)::g_SendProps
 B int ServerClassInit<DT_Animationlayer::ignored>(DT_Animationlayer::ignored*)::g_SendProps
 B int ServerClassInit<DT_BCCLocalPlayerExclusive::ignored>(DT_BCCLocalPlayerExclusive::ignored*)::g_SendProps
 B int ServerClassInit<DT_Barnacle::ignored>(DT_Barnacle::ignored*)::g_SendProps
 B int ServerClassInit<DT_BaseAnimating::ignored>(DT_BaseAnimating::ignored*)::g_SendProps
 B int ServerClassInit<DT_BaseAnimatingOverlay::ignored>(DT_BaseAnimatingOverlay::ignored*)::g_SendProps
 B int ServerClassInit<DT_BaseBeam::ignored>(DT_BaseBeam::ignored*)::g_SendProps
 B int ServerClassInit<DT_BaseCombatCharacter::ignored>(DT_BaseCombatCharacter::ignored*)::g_SendProps
 B int ServerClassInit<DT_BaseCombatWeapon::ignored>(DT_BaseCombatWeapon::ignored*)::g_SendProps
 B int ServerClassInit<DT_BaseDoor::ignored>(DT_BaseDoor::ignored*)::g_SendProps
 B int ServerClassInit<DT_BaseEntity::ignored>(DT_BaseEntity::ignored*)::g_SendProps
 B int ServerClassInit<DT_BaseFlex::ignored>(DT_BaseFlex::ignored*)::g_SendProps
 B int ServerClassInit<DT_BaseGrenade::ignored>(DT_BaseGrenade::ignored*)::g_SendProps
 B int ServerClassInit<DT_BaseHL2MPBludgeonWeapon::ignored>(DT_BaseHL2MPBludgeonWeapon::ignored*)::g_SendProps
 B int ServerClassInit<DT_BaseHL2MPCombatWeapon::ignored>(DT_BaseHL2MPCombatWeapon::ignored*)::g_SendProps
 B int ServerClassInit<DT_BaseHLBludgeonWeapon::ignored>(DT_BaseHLBludgeonWeapon::ignored*)::g_SendProps
 B int ServerClassInit<DT_BaseHLCombatWeapon::ignored>(DT_BaseHLCombatWeapon::ignored*)::g_SendProps
 B int ServerClassInit<DT_BaseHelicopter::ignored>(DT_BaseHelicopter::ignored*)::g_SendProps
 B int ServerClassInit<DT_BaseParticleEntity::ignored>(DT_BaseParticleEntity::ignored*)::g_SendProps
 B int ServerClassInit<DT_BasePlayer::ignored>(DT_BasePlayer::ignored*)::g_SendProps
 B int ServerClassInit<DT_BaseProjectile::ignored>(DT_BaseProjectile::ignored*)::g_SendProps
 B int ServerClassInit<DT_BasePropDoor::ignored>(DT_BasePropDoor::ignored*)::g_SendProps
 B int ServerClassInit<DT_BaseTeamObjectiveResource::ignored>(DT_BaseTeamObjectiveResource::ignored*)::g_SendProps
 B int ServerClassInit<DT_BaseTempEntity::ignored>(DT_BaseTempEntity::ignored*)::g_SendProps
 B int ServerClassInit<DT_BaseViewModel::ignored>(DT_BaseViewModel::ignored*)::g_SendProps
 B int ServerClassInit<DT_Beam::ignored>(DT_Beam::ignored*)::g_SendProps
 B int ServerClassInit<DT_BeamPredictableId::ignored>(DT_BeamPredictableId::ignored*)::g_SendProps
 B int ServerClassInit<DT_BoneFollower::ignored>(DT_BoneFollower::ignored*)::g_SendProps
 B int ServerClassInit<DT_BreakableProp::ignored>(DT_BreakableProp::ignored*)::g_SendProps
 B int ServerClassInit<DT_BreakableSurface::ignored>(DT_BreakableSurface::ignored*)::g_SendProps
 B int ServerClassInit<DT_CFish::ignored>(DT_CFish::ignored*)::g_SendProps
 B int ServerClassInit<DT_CitadelEnergyCore::ignored>(DT_CitadelEnergyCore::ignored*)::g_SendProps
 B int ServerClassInit<DT_CollisionProperty::ignored>(DT_CollisionProperty::ignored*)::g_SendProps
 B int ServerClassInit<DT_ColorCorrection::ignored>(DT_ColorCorrection::ignored*)::g_SendProps
 B int ServerClassInit<DT_ColorCorrectionVolume::ignored>(DT_ColorCorrectionVolume::ignored*)::g_SendProps
 B int ServerClassInit<DT_CombineGunship::ignored>(DT_CombineGunship::ignored*)::g_SendProps
 B int ServerClassInit<DT_Corpse::ignored>(DT_Corpse::ignored*)::g_SendProps
 B int ServerClassInit<DT_CrossbowBolt::ignored>(DT_CrossbowBolt::ignored*)::g_SendProps
 B int ServerClassInit<DT_DetailController::ignored>(DT_DetailController::ignored*)::g_SendProps
 B int ServerClassInit<DT_DustTrail::ignored>(DT_DustTrail::ignored*)::g_SendProps
 B int ServerClassInit<DT_DynamicLight::ignored>(DT_DynamicLight::ignored*)::g_SendProps
 B int ServerClassInit<DT_DynamicProp::ignored>(DT_DynamicProp::ignored*)::g_SendProps
 B int ServerClassInit<DT_EffectData::ignored>(DT_EffectData::ignored*)::g_SendProps
 B int ServerClassInit<DT_Embers::ignored>(DT_Embers::ignored*)::g_SendProps
 B int ServerClassInit<DT_EntityDissolve::ignored>(DT_EntityDissolve::ignored*)::g_SendProps
 B int ServerClassInit<DT_EntityFlame::ignored>(DT_EntityFlame::ignored*)::g_SendProps
 B int ServerClassInit<DT_EntityParticleTrail::ignored>(DT_EntityParticleTrail::ignored*)::g_SendProps
 B int ServerClassInit<DT_EntityParticleTrailInfo::ignored>(DT_EntityParticleTrailInfo::ignored*)::g_SendProps
 B int ServerClassInit<DT_EnvHeadcrabCanister::ignored>(DT_EnvHeadcrabCanister::ignored*)::g_SendProps
 B int ServerClassInit<DT_EnvHeadcrabCanisterShared::ignored>(DT_EnvHeadcrabCanisterShared::ignored*)::g_SendProps
 B int ServerClassInit<DT_EnvParticleScript::ignored>(DT_EnvParticleScript::ignored*)::g_SendProps
 B int ServerClassInit<DT_EnvProjectedTexture::ignored>(DT_EnvProjectedTexture::ignored*)::g_SendProps
 B int ServerClassInit<DT_EnvScreenEffect::ignored>(DT_EnvScreenEffect::ignored*)::g_SendProps
 B int ServerClassInit<DT_EnvScreenOverlay::ignored>(DT_EnvScreenOverlay::ignored*)::g_SendProps
 B int ServerClassInit<DT_EnvStarfield::ignored>(DT_EnvStarfield::ignored*)::g_SendProps
 B int ServerClassInit<DT_EnvTonemapController::ignored>(DT_EnvTonemapController::ignored*)::g_SendProps
 B int ServerClassInit<DT_EnvWind::ignored>(DT_EnvWind::ignored*)::g_SendProps
 B int ServerClassInit<DT_EnvWindShared::ignored>(DT_EnvWindShared::ignored*)::g_SendProps
 B int ServerClassInit<DT_FireSmoke::ignored>(DT_FireSmoke::ignored*)::g_SendProps
 B int ServerClassInit<DT_FireTrail::ignored>(DT_FireTrail::ignored*)::g_SendProps
 B int ServerClassInit<DT_Flare::ignored>(DT_Flare::ignored*)::g_SendProps
 B int ServerClassInit<DT_FogController::ignored>(DT_FogController::ignored*)::g_SendProps
 B int ServerClassInit<DT_FuncAreaPortalWindow::ignored>(DT_FuncAreaPortalWindow::ignored*)::g_SendProps
 B int ServerClassInit<DT_FuncConveyor::ignored>(DT_FuncConveyor::ignored*)::g_SendProps
 B int ServerClassInit<DT_FuncLadder::ignored>(DT_FuncLadder::ignored*)::g_SendProps
 B int ServerClassInit<DT_FuncMonitor::ignored>(DT_FuncMonitor::ignored*)::g_SendProps
 B int ServerClassInit<DT_FuncOccluder::ignored>(DT_FuncOccluder::ignored*)::g_SendProps
 B int ServerClassInit<DT_FuncReflectiveGlass::ignored>(DT_FuncReflectiveGlass::ignored*)::g_SendProps
 B int ServerClassInit<DT_FuncRotating::ignored>(DT_FuncRotating::ignored*)::g_SendProps
 B int ServerClassInit<DT_FuncSmokeVolume::ignored>(DT_FuncSmokeVolume::ignored*)::g_SendProps
 B int ServerClassInit<DT_FuncTrackTrain::ignored>(DT_FuncTrackTrain::ignored*)::g_SendProps
 B int ServerClassInit<DT_Func_Dust::ignored>(DT_Func_Dust::ignored*)::g_SendProps
 B int ServerClassInit<DT_Func_LOD::ignored>(DT_Func_LOD::ignored*)::g_SendProps
 B int ServerClassInit<DT_GameRulesProxy::ignored>(DT_GameRulesProxy::ignored*)::g_SendProps
 B int ServerClassInit<DT_HL2GameRules::ignored>(DT_HL2GameRules::ignored*)::g_SendProps
 B int ServerClassInit<DT_HL2Local::ignored>(DT_HL2Local::ignored*)::g_SendProps
 B int ServerClassInit<DT_HL2MPGameRulesProxy::ignored>(DT_HL2MPGameRulesProxy::ignored*)::g_SendProps
 B int ServerClassInit<DT_HL2MPMachineGun::ignored>(DT_HL2MPMachineGun::ignored*)::g_SendProps
 B int ServerClassInit<DT_HL2MPRagdoll::ignored>(DT_HL2MPRagdoll::ignored*)::g_SendProps
 B int ServerClassInit<DT_HL2MPRules::ignored>(DT_HL2MPRules::ignored*)::g_SendProps
 B int ServerClassInit<DT_HL2MP_Player::ignored>(DT_HL2MP_Player::ignored*)::g_SendProps
 B int ServerClassInit<DT_HL2_Player::ignored>(DT_HL2_Player::ignored*)::g_SendProps
 B int ServerClassInit<DT_HLMachineGun::ignored>(DT_HLMachineGun::ignored*)::g_SendProps
 B int ServerClassInit<DT_HLSelectFireMachineGun::ignored>(DT_HLSelectFireMachineGun::ignored*)::g_SendProps
 B int ServerClassInit<DT_HalfLife2Proxy::ignored>(DT_HalfLife2Proxy::ignored*)::g_SendProps
 B int ServerClassInit<DT_HandleTest::ignored>(DT_HandleTest::ignored*)::g_SendProps
 B int ServerClassInit<DT_InfoLadderDismount::ignored>(DT_InfoLadderDismount::ignored*)::g_SendProps
 B int ServerClassInit<DT_InfoLightingRelative::ignored>(DT_InfoLightingRelative::ignored*)::g_SendProps
 B int ServerClassInit<DT_InfoOverlayAccessor::ignored>(DT_InfoOverlayAccessor::ignored*)::g_SendProps
 B int ServerClassInit<DT_InfoTeleporterCountdown::ignored>(DT_InfoTeleporterCountdown::ignored*)::g_SendProps
 B int ServerClassInit<DT_LaserDot::ignored>(DT_LaserDot::ignored*)::g_SendProps
 B int ServerClassInit<DT_LightGlow::ignored>(DT_LightGlow::ignored*)::g_SendProps
 B int ServerClassInit<DT_Local::ignored>(DT_Local::ignored*)::g_SendProps
 B int ServerClassInit<DT_LocalActiveWeaponData::ignored>(DT_LocalActiveWeaponData::ignored*)::g_SendProps
 B int ServerClassInit<DT_LocalPlayerExclusive::ignored>(DT_LocalPlayerExclusive::ignored*)::g_SendProps
 B int ServerClassInit<DT_LocalWeaponData::ignored>(DT_LocalWeaponData::ignored*)::g_SendProps
 B int ServerClassInit<DT_MaterialModifyControl::ignored>(DT_MaterialModifyControl::ignored*)::g_SendProps
 B int ServerClassInit<DT_MortarShell::ignored>(DT_MortarShell::ignored*)::g_SendProps
 B int ServerClassInit<DT_MovieExplosion::ignored>(DT_MovieExplosion::ignored*)::g_SendProps
 B int ServerClassInit<DT_NPC_AntlionGuard::ignored>(DT_NPC_AntlionGuard::ignored*)::g_SendProps
 B int ServerClassInit<DT_NPC_Barney::ignored>(DT_NPC_Barney::ignored*)::g_SendProps
 B int ServerClassInit<DT_NPC_Manhack::ignored>(DT_NPC_Manhack::ignored*)::g_SendProps
 B int ServerClassInit<DT_NPC_Strider::ignored>(DT_NPC_Strider::ignored*)::g_SendProps
 B int ServerClassInit<DT_NPC_Vortigaunt::ignored>(DT_NPC_Vortigaunt::ignored*)::g_SendProps
 B int ServerClassInit<DT_OverlayVars::ignored>(DT_OverlayVars::ignored*)::g_SendProps
 B int ServerClassInit<DT_ParticleFire::ignored>(DT_ParticleFire::ignored*)::g_SendProps
 B int ServerClassInit<DT_ParticlePerformanceMonitor::ignored>(DT_ParticlePerformanceMonitor::ignored*)::g_SendProps
 B int ServerClassInit<DT_ParticleSmokeGrenade::ignored>(DT_ParticleSmokeGrenade::ignored*)::g_SendProps
 B int ServerClassInit<DT_ParticleSystem::ignored>(DT_ParticleSystem::ignored*)::g_SendProps
 B int ServerClassInit<DT_PhysBox::ignored>(DT_PhysBox::ignored*)::g_SendProps
 B int ServerClassInit<DT_PhysBoxMultiplayer::ignored>(DT_PhysBoxMultiplayer::ignored*)::g_SendProps
 B int ServerClassInit<DT_PhysMagnet::ignored>(DT_PhysMagnet::ignored*)::g_SendProps
 B int ServerClassInit<DT_PhysicsProp::ignored>(DT_PhysicsProp::ignored*)::g_SendProps
 B int ServerClassInit<DT_PhysicsPropMultiplayer::ignored>(DT_PhysicsPropMultiplayer::ignored*)::g_SendProps
 B int ServerClassInit<DT_Plasma::ignored>(DT_Plasma::ignored*)::g_SendProps
 B int ServerClassInit<DT_PlayerResource::ignored>(DT_PlayerResource::ignored*)::g_SendProps
 B int ServerClassInit<DT_PlayerState::ignored>(DT_PlayerState::ignored*)::g_SendProps
 B int ServerClassInit<DT_PointCamera::ignored>(DT_PointCamera::ignored*)::g_SendProps
 B int ServerClassInit<DT_PointCommentaryNode::ignored>(DT_PointCommentaryNode::ignored*)::g_SendProps
 B int ServerClassInit<DT_PoseController::ignored>(DT_PoseController::ignored*)::g_SendProps
 B int ServerClassInit<DT_Precipitation::ignored>(DT_Precipitation::ignored*)::g_SendProps
 B int ServerClassInit<DT_PredictableId::ignored>(DT_PredictableId::ignored*)::g_SendProps
 B int ServerClassInit<DT_PredictedViewModel::ignored>(DT_PredictedViewModel::ignored*)::g_SendProps
 B int ServerClassInit<DT_PropAirboat::ignored>(DT_PropAirboat::ignored*)::g_SendProps
 B int ServerClassInit<DT_PropCombineBall::ignored>(DT_PropCombineBall::ignored*)::g_SendProps
 B int ServerClassInit<DT_PropCrane::ignored>(DT_PropCrane::ignored*)::g_SendProps
 B int ServerClassInit<DT_PropVehicleDriveable::ignored>(DT_PropVehicleDriveable::ignored*)::g_SendProps
 B int ServerClassInit<DT_PropVehiclePrisonerPod::ignored>(DT_PropVehiclePrisonerPod::ignored*)::g_SendProps
 B int ServerClassInit<DT_ProxyToggle::ignored>(DT_ProxyToggle::ignored*)::g_SendProps
 B int ServerClassInit<DT_ProxyToggle_ProxiedData::ignored>(DT_ProxyToggle_ProxiedData::ignored*)::g_SendProps
 B int ServerClassInit<DT_QuadraticBeam::ignored>(DT_QuadraticBeam::ignored*)::g_SendProps
 B int ServerClassInit<DT_Ragdoll::ignored>(DT_Ragdoll::ignored*)::g_SendProps
 B int ServerClassInit<DT_RagdollManager::ignored>(DT_RagdollManager::ignored*)::g_SendProps
 B int ServerClassInit<DT_Ragdoll_Attached::ignored>(DT_Ragdoll_Attached::ignored*)::g_SendProps
 B int ServerClassInit<DT_RocketTrail::ignored>(DT_RocketTrail::ignored*)::g_SendProps
 B int ServerClassInit<DT_RollerMine::ignored>(DT_RollerMine::ignored*)::g_SendProps
 B int ServerClassInit<DT_RopeKeyframe::ignored>(DT_RopeKeyframe::ignored*)::g_SendProps
 B int ServerClassInit<DT_RotorWashEmitter::ignored>(DT_RotorWashEmitter::ignored*)::g_SendProps
 B int ServerClassInit<DT_SceneEntity::ignored>(DT_SceneEntity::ignored*)::g_SendProps
 B int ServerClassInit<DT_ScriptIntro::ignored>(DT_ScriptIntro::ignored*)::g_SendProps
 B int ServerClassInit<DT_ServerAnimationData::ignored>(DT_ServerAnimationData::ignored*)::g_SendProps
 B int ServerClassInit<DT_ShadowControl::ignored>(DT_ShadowControl::ignored*)::g_SendProps
 B int ServerClassInit<DT_SlideshowDisplay::ignored>(DT_SlideshowDisplay::ignored*)::g_SendProps
 B int ServerClassInit<DT_SmokeStack::ignored>(DT_SmokeStack::ignored*)::g_SendProps
 B int ServerClassInit<DT_SmokeTrail::ignored>(DT_SmokeTrail::ignored*)::g_SendProps
 B int ServerClassInit<DT_SporeExplosion::ignored>(DT_SporeExplosion::ignored*)::g_SendProps
 B int ServerClassInit<DT_SporeTrail::ignored>(DT_SporeTrail::ignored*)::g_SendProps
 B int ServerClassInit<DT_SpotlightEnd::ignored>(DT_SpotlightEnd::ignored*)::g_SendProps
 B int ServerClassInit<DT_Sprite::ignored>(DT_Sprite::ignored*)::g_SendProps
 B int ServerClassInit<DT_SpriteOriented::ignored>(DT_SpriteOriented::ignored*)::g_SendProps
 B int ServerClassInit<DT_SpriteTrail::ignored>(DT_SpriteTrail::ignored*)::g_SendProps
 B int ServerClassInit<DT_SteamJet::ignored>(DT_SteamJet::ignored*)::g_SendProps
 B int ServerClassInit<DT_Sun::ignored>(DT_Sun::ignored*)::g_SendProps
 B int ServerClassInit<DT_TEAntlionDust::ignored>(DT_TEAntlionDust::ignored*)::g_SendProps
 B int ServerClassInit<DT_TEArmorRicochet::ignored>(DT_TEArmorRicochet::ignored*)::g_SendProps
 B int ServerClassInit<DT_TEBSPDecal::ignored>(DT_TEBSPDecal::ignored*)::g_SendProps
 B int ServerClassInit<DT_TEBeamEntPoint::ignored>(DT_TEBeamEntPoint::ignored*)::g_SendProps
 B int ServerClassInit<DT_TEBeamEnts::ignored>(DT_TEBeamEnts::ignored*)::g_SendProps
 B int ServerClassInit<DT_TEBeamFollow::ignored>(DT_TEBeamFollow::ignored*)::g_SendProps
 B int ServerClassInit<DT_TEBeamLaser::ignored>(DT_TEBeamLaser::ignored*)::g_SendProps
 B int ServerClassInit<DT_TEBeamPoints::ignored>(DT_TEBeamPoints::ignored*)::g_SendProps
 B int ServerClassInit<DT_TEBeamRing::ignored>(DT_TEBeamRing::ignored*)::g_SendProps
 B int ServerClassInit<DT_TEBeamRingPoint::ignored>(DT_TEBeamRingPoint::ignored*)::g_SendProps
 B int ServerClassInit<DT_TEBeamSpline::ignored>(DT_TEBeamSpline::ignored*)::g_SendProps
 B int ServerClassInit<DT_TEBloodSprite::ignored>(DT_TEBloodSprite::ignored*)::g_SendProps
 B int ServerClassInit<DT_TEBloodStream::ignored>(DT_TEBloodStream::ignored*)::g_SendProps
 B int ServerClassInit<DT_TEBreakModel::ignored>(DT_TEBreakModel::ignored*)::g_SendProps
 B int ServerClassInit<DT_TEBubbleTrail::ignored>(DT_TEBubbleTrail::ignored*)::g_SendProps
 B int ServerClassInit<DT_TEBubbles::ignored>(DT_TEBubbles::ignored*)::g_SendProps
 B int ServerClassInit<DT_TEClientProjectile::ignored>(DT_TEClientProjectile::ignored*)::g_SendProps
 B int ServerClassInit<DT_TEConcussiveExplosion::ignored>(DT_TEConcussiveExplosion::ignored*)::g_SendProps
 B int ServerClassInit<DT_TEDecal::ignored>(DT_TEDecal::ignored*)::g_SendProps
 B int ServerClassInit<DT_TEDust::ignored>(DT_TEDust::ignored*)::g_SendProps
 B int ServerClassInit<DT_TEDynamicLight::ignored>(DT_TEDynamicLight::ignored*)::g_SendProps
 B int ServerClassInit<DT_TEEffectDispatch::ignored>(DT_TEEffectDispatch::ignored*)::g_SendProps
 B int ServerClassInit<DT_TEEnergySplash::ignored>(DT_TEEnergySplash::ignored*)::g_SendProps
 B int ServerClassInit<DT_TEExplosion::ignored>(DT_TEExplosion::ignored*)::g_SendProps
 B int ServerClassInit<DT_TEFizz::ignored>(DT_TEFizz::ignored*)::g_SendProps
 B int ServerClassInit<DT_TEFootprintDecal::ignored>(DT_TEFootprintDecal::ignored*)::g_SendProps
 B int ServerClassInit<DT_TEGaussExplosion::ignored>(DT_TEGaussExplosion::ignored*)::g_SendProps
 B int ServerClassInit<DT_TEGlowSprite::ignored>(DT_TEGlowSprite::ignored*)::g_SendProps
 B int ServerClassInit<DT_TEHL2MPFireBullets::ignored>(DT_TEHL2MPFireBullets::ignored*)::g_SendProps
 B int ServerClassInit<DT_TEImpact::ignored>(DT_TEImpact::ignored*)::g_SendProps
 B int ServerClassInit<DT_TEKillPlayerAttachments::ignored>(DT_TEKillPlayerAttachments::ignored*)::g_SendProps
 B int ServerClassInit<DT_TELargeFunnel::ignored>(DT_TELargeFunnel::ignored*)::g_SendProps
 B int ServerClassInit<DT_TEMetalSparks::ignored>(DT_TEMetalSparks::ignored*)::g_SendProps
 B int ServerClassInit<DT_TEMuzzleFlash::ignored>(DT_TEMuzzleFlash::ignored*)::g_SendProps
 B int ServerClassInit<DT_TEParticleSystem::ignored>(DT_TEParticleSystem::ignored*)::g_SendProps
 B int ServerClassInit<DT_TEPhysicsProp::ignored>(DT_TEPhysicsProp::ignored*)::g_SendProps
 B int ServerClassInit<DT_TEPlayerDecal::ignored>(DT_TEPlayerDecal::ignored*)::g_SendProps
 B int ServerClassInit<DT_TEProjectedDecal::ignored>(DT_TEProjectedDecal::ignored*)::g_SendProps
 B int ServerClassInit<DT_TEShatterSurface::ignored>(DT_TEShatterSurface::ignored*)::g_SendProps
 B int ServerClassInit<DT_TEShowLine::ignored>(DT_TEShowLine::ignored*)::g_SendProps
 B int ServerClassInit<DT_TESmoke::ignored>(DT_TESmoke::ignored*)::g_SendProps
 B int ServerClassInit<DT_TESparks::ignored>(DT_TESparks::ignored*)::g_SendProps
 B int ServerClassInit<DT_TESprite::ignored>(DT_TESprite::ignored*)::g_SendProps
 B int ServerClassInit<DT_TESpriteSpray::ignored>(DT_TESpriteSpray::ignored*)::g_SendProps
 B int ServerClassInit<DT_TEWorldDecal::ignored>(DT_TEWorldDecal::ignored*)::g_SendProps
 B int ServerClassInit<DT_Team::ignored>(DT_Team::ignored*)::g_SendProps
 B int ServerClassInit<DT_TeamRoundTimer::ignored>(DT_TeamRoundTimer::ignored*)::g_SendProps
 B int ServerClassInit<DT_TeamTrainWatcher::ignored>(DT_TeamTrainWatcher::ignored*)::g_SendProps
 B int ServerClassInit<DT_TeamplayRoundBasedRules::ignored>(DT_TeamplayRoundBasedRules::ignored*)::g_SendProps
 B int ServerClassInit<DT_TeamplayRoundBasedRulesProxy::ignored>(DT_TeamplayRoundBasedRulesProxy::ignored*)::g_SendProps
 B int ServerClassInit<DT_Tesla::ignored>(DT_Tesla::ignored*)::g_SendProps
 B int ServerClassInit<DT_TestTraceline::ignored>(DT_TestTraceline::ignored*)::g_SendProps
 B int ServerClassInit<DT_VGuiScreen::ignored>(DT_VGuiScreen::ignored*)::g_SendProps
 B int ServerClassInit<DT_VortigauntChargeToken::ignored>(DT_VortigauntChargeToken::ignored*)::g_SendProps
 B int ServerClassInit<DT_VortigauntEffectDispel::ignored>(DT_VortigauntEffectDispel::ignored*)::g_SendProps
 B int ServerClassInit<DT_VoteController::ignored>(DT_VoteController::ignored*)::g_SendProps
 B int ServerClassInit<DT_WORLD::ignored>(DT_WORLD::ignored*)::g_SendProps
 B int ServerClassInit<DT_WaterBullet::ignored>(DT_WaterBullet::ignored*)::g_SendProps
 B int ServerClassInit<DT_WaterLODControl::ignored>(DT_WaterLODControl::ignored*)::g_SendProps
 B int ServerClassInit<DT_Weapon357::ignored>(DT_Weapon357::ignored*)::g_SendProps
 B int ServerClassInit<DT_WeaponAR2::ignored>(DT_WeaponAR2::ignored*)::g_SendProps
 B int ServerClassInit<DT_WeaponAnnabelle::ignored>(DT_WeaponAnnabelle::ignored*)::g_SendProps
 B int ServerClassInit<DT_WeaponBugBait::ignored>(DT_WeaponBugBait::ignored*)::g_SendProps
 B int ServerClassInit<DT_WeaponCrossbow::ignored>(DT_WeaponCrossbow::ignored*)::g_SendProps
 B int ServerClassInit<DT_WeaponCrowbar::ignored>(DT_WeaponCrowbar::ignored*)::g_SendProps
 B int ServerClassInit<DT_WeaponCubemap::ignored>(DT_WeaponCubemap::ignored*)::g_SendProps
 B int ServerClassInit<DT_WeaponCycler::ignored>(DT_WeaponCycler::ignored*)::g_SendProps
 B int ServerClassInit<DT_WeaponFrag::ignored>(DT_WeaponFrag::ignored*)::g_SendProps
 B int ServerClassInit<DT_WeaponHL2MPBase::ignored>(DT_WeaponHL2MPBase::ignored*)::g_SendProps
 B int ServerClassInit<DT_WeaponPhysCannon::ignored>(DT_WeaponPhysCannon::ignored*)::g_SendProps
 B int ServerClassInit<DT_WeaponPistol::ignored>(DT_WeaponPistol::ignored*)::g_SendProps
 B int ServerClassInit<DT_WeaponRPG::ignored>(DT_WeaponRPG::ignored*)::g_SendProps
 B int ServerClassInit<DT_WeaponSMG1::ignored>(DT_WeaponSMG1::ignored*)::g_SendProps
 B int ServerClassInit<DT_WeaponShotgun::ignored>(DT_WeaponShotgun::ignored*)::g_SendProps
 B int ServerClassInit<DT_WeaponStunStick::ignored>(DT_WeaponStunStick::ignored*)::g_SendProps
 B int ServerClassInit<DT_Weapon_SLAM::ignored>(DT_Weapon_SLAM::ignored*)::g_SendProps
 B lineartolightmap
 B lineartovertex
 B linksallocated
 B locksound_t_DataDescInit::g_DataMapHolder
 B log_verbose_enable
 B log_verbose_interval
 B lservercfgfile
 B m_debugOverlayLine
 B magnetted_objects_t_DataDescInit::g_DataMapHolder
 B mapcyclefile
 B mat_dxlevel
 B mat_hdr_tonemapscale
 B materials
 B mdlcache
 B mdllib
 B metropolice_charge
 B metropolice_chase_use_follow
 B metropolice_move_and_melee
 B modelinfo
 B modifiedconvars_t_DataDescInit::g_DataMapHolder
 B monk_headshot_freq
 B mortar_visualize
 B mp_allowspectators
 B mp_autoteambalance
 B mp_blockstyle
 B mp_bonusroundtime
 B mp_bonusroundtime_final
 B mp_capdeteriorate_time
 B mp_capstyle
 B mp_chattime
 B mp_clan_ready_signal
 B mp_clan_readyrestart
 B mp_disable_respawn_times
 B mp_enableroundwaittime
 B mp_facefronttime
 B mp_fadetoblack
 B mp_feetyawrate
 B mp_forceautoteam
 B mp_forcecamera
 B mp_holiday_nogifts
 B mp_ik
 B mp_mapcycle_empty_timeout_seconds
 B mp_match_end_at_timelimit
 B mp_maxrounds
 B mp_ready_signal
 B mp_readyrestart
 B mp_respawnwavetime
 B mp_restartgame
 B mp_restartgame_immediate
 B mp_restartround
 B mp_scrambleteams_auto
 B mp_scrambleteams_auto_windifference
 B mp_show_voice_icons
 B mp_showcleanedupents
 B mp_showroundtransitions
 B mp_simulatemultiplecappers
 B mp_stalemate_enable
 B mp_stalemate_meleeonly
 B mp_stalemate_timelimit
 B mp_teams_unbalance_limit
 B mp_time_between_capscoring
 B mp_timelimit
 B mp_tournament
 B mp_waitingforplayers_cancel
 B mp_waitingforplayers_restart
 B mp_waitingforplayers_time
 B mp_winlimit
 B name
 B nb_last_area_update_tolerance
 B networkstringtable
 B nextlevel
 B notarget
 B npc_ally_deathmessage
 B npc_citizen_auto_player_squad
 B npc_citizen_auto_player_squad_allow_use
 B npc_citizen_dont_precache_all
 B npc_citizen_explosive_resist
 B npc_citizen_insignia
 B npc_citizen_medic_emit_sound
 B npc_citizen_squad_marker
 B npc_create_equipment
 B npc_height_adjust
 B npc_sentences
 B npc_strider_height_adj
 B npc_strider_shake_ropes_magnitude
 B npc_strider_shake_ropes_radius
 B npc_vphysics
 B old_radius_damage
 B option_duck_method
 B p4
 B particle_test_attach_attachment
 B particle_test_attach_mode
 B particle_test_file
 B partition
 B phys_impactforcescale
 B phys_pushscale
 B phys_speeds
 B phys_stressbodyweights
 B phys_timescale
 B phys_upimpactforcescale
 B physcannon_ball_cone
 B physcannon_chargetime
 B physcannon_cone
 B physcannon_maxforce
 B physcannon_maxmass
 B physcannon_mega_enabled
 B physcannon_minforce
 B physcannon_pullforce
 B physcannon_tracelength
 B physcollision
 B physenv
 B physfollower_t_DataDescInit::g_DataMapHolder
 B physics
 B physprops
 B player_debug_print_damage
 B player_limit_jump_speed
 B player_showpredictedposition
 B player_showpredictedposition_timestep
 B player_squad_autosummon_debug
 B player_squad_autosummon_move_tolerance
 B player_squad_autosummon_player_tolerance
 B player_squad_autosummon_time
 B player_squad_autosummon_time_after_combat
 B player_squad_double_tap_time
 B player_squad_transient_commands
 B player_throwforce
 B prop_active_gib_limit
 B prop_active_gib_max_fade_time
 B props_break_max_pieces
 B props_break_max_pieces_perframe
 B r_AirboatViewDampenDamp
 B r_AirboatViewDampenFreq
 B r_AirboatViewZHeight
 B r_JeepFOV
 B r_JeepViewDampenDamp
 B r_JeepViewDampenFreq
 B r_JeepViewZHeight
 B r_VehicleViewDampen
 B r_vehicleBrakeRate
 B r_visualizetraces
 B random_valve
 B rgv3tStuckTable
 B rr_debug_qa
 B rr_debugresponses
 B rr_debugrule
 B rr_dumpresponses
 B sFlashSprite
 B sHaloSprite
 B s_ChildrenInfoUnpack
 B s_DMXAllocator
 B s_FogSystem
 B s_NoEscConversion
 B s_PushedEntities
 B s_RagdollLRU
 B s_StringCharConversion
 B s_bMathlibInitialized
 B s_iszShotgunClassname
 B s_pConv
 B s_pParticleSystemDefinitionUnpack
 B scene_clientflex
 B scene_flatturn
 B scenefilecache
 B servercfgfile
 B serverenginetools
 B serverpluginhelpers
 B showanimstate_log
 B showhitlocation
 B showsniperdist
 B showtriggers
 B sk_allow_autoaim
 B sk_ally_regen_time
 B sk_ammo_qty_scale1
 B sk_ammo_qty_scale2
 B sk_ammo_qty_scale3
 B sk_antlion_air_attack_dmg
 B sk_antlion_health
 B sk_antlion_jump_damage
 B sk_antlion_swipe_damage
 B sk_antlionguard_dmg_charge
 B sk_antlionguard_dmg_shove
 B sk_antlionguard_health
 B sk_apc_health
 B sk_auto_reload_time
 B sk_autoaim_mode
 B sk_autoaim_scale1
 B sk_autoaim_scale2
 B sk_barnacle_health
 B sk_barney_health
 B sk_battery
 B sk_bullseye_health
 B sk_citizen_giveammo_player_delay
 B sk_citizen_heal_ally
 B sk_citizen_heal_ally_delay
 B sk_citizen_heal_ally_min_pct
 B sk_citizen_heal_player
 B sk_citizen_heal_player_delay
 B sk_citizen_heal_player_min_forced
 B sk_citizen_heal_player_min_pct
 B sk_citizen_health
 B sk_citizen_player_stare_dist
 B sk_citizen_player_stare_time
 B sk_citizen_stare_heal_time
 B sk_combine_ball_search_radius
 B sk_combine_guard_health
 B sk_combine_guard_kick
 B sk_combine_s_health
 B sk_combine_s_kick
 B sk_combineball_guidefactor
 B sk_combineball_seek_angle
 B sk_combineball_seek_kill
 B sk_crow_health
 B sk_crow_melee_dmg
 B sk_crowbar_lead_time
 B sk_dmg_homer_grenade
 B sk_dmg_inflict_scale1
 B sk_dmg_inflict_scale2
 B sk_dmg_inflict_scale3
 B sk_dmg_pathfollower_grenade
 B sk_dmg_sniper_penetrate_npc
 B sk_dmg_sniper_penetrate_plr
 B sk_dmg_take_scale1
 B sk_dmg_take_scale2
 B sk_dmg_take_scale3
 B sk_dropship_container_health
 B sk_dynamic_resupply_modifier
 B sk_env_headcrabcanister_shake_amplitude
 B sk_env_headcrabcanister_shake_radius
 B sk_env_headcrabcanister_shake_radius_vehicle
 B sk_fraggrenade_radius
 B sk_gunship_burst_dist
 B sk_gunship_burst_min
 B sk_gunship_burst_size
 B sk_gunship_health_increments
 B sk_headcrab_fast_health
 B sk_headcrab_health
 B sk_headcrab_melee_dmg
 B sk_headcrab_poison_health
 B sk_headcrab_poison_npc_damage
 B sk_healthcharger
 B sk_healthkit
 B sk_healthvial
 B sk_helicopter_burstcount
 B sk_helicopter_drone_speed
 B sk_helicopter_firingcone
 B sk_helicopter_grenade_puntscale
 B sk_helicopter_grenadedamage
 B sk_helicopter_grenadeforce
 B sk_helicopter_grenaderadius
 B sk_helicopter_health
 B sk_helicopter_num_bombs1
 B sk_helicopter_num_bombs2
 B sk_helicopter_num_bombs3
 B sk_helicopter_roundsperburst
 B sk_homer_grenade_radius
 B sk_ichthyosaur_health
 B sk_ichthyosaur_melee_dmg
 B sk_manhack_health
 B sk_manhack_melee_dmg
 B sk_manhack_v2
 B sk_max_357
 B sk_max_alyxgun
 B sk_max_ar2
 B sk_max_ar2_altfire
 B sk_max_buckshot
 B sk_max_crossbow
 B sk_max_gauss_round
 B sk_max_grenade
 B sk_max_pistol
 B sk_max_rpg_round
 B sk_max_smg1
 B sk_max_smg1_grenade
 B sk_max_sniper_round
 B sk_metropolice_health
 B sk_metropolice_simple_health
 B sk_metropolice_stitch_along_hitcount
 B sk_metropolice_stitch_at_hitcount
 B sk_metropolice_stitch_behind_hitcount
 B sk_metropolice_stitch_distance
 B sk_metropolice_stitch_reaction
 B sk_metropolice_stitch_tight_hitcount
 B sk_npc_arm
 B sk_npc_chest
 B sk_npc_dmg_357
 B sk_npc_dmg_airboat
 B sk_npc_dmg_alyxgun
 B sk_npc_dmg_ar2
 B sk_npc_dmg_buckshot
 B sk_npc_dmg_combineball
 B sk_npc_dmg_crossbow
 B sk_npc_dmg_dropship
 B sk_npc_dmg_fraggrenade
 B sk_npc_dmg_grenade
 B sk_npc_dmg_gunship
 B sk_npc_dmg_gunship_to_plr
 B sk_npc_dmg_helicopter
 B sk_npc_dmg_helicopter_to_plr
 B sk_npc_dmg_pistol
 B sk_npc_dmg_rpg_round
 B sk_npc_dmg_satchel
 B sk_npc_dmg_smg1
 B sk_npc_dmg_smg1_grenade
 B sk_npc_dmg_sniper_round
 B sk_npc_dmg_tripmine
 B sk_npc_head
 B sk_npc_leg
 B sk_npc_stomach
 B sk_pathfollower_grenade_radius
 B sk_player_arm
 B sk_player_chest
 B sk_player_head
 B sk_player_leg
 B sk_player_stomach
 B sk_plr_dmg_357
 B sk_plr_dmg_airboat
 B sk_plr_dmg_alyxgun
 B sk_plr_dmg_ar2
 B sk_plr_dmg_buckshot
 B sk_plr_dmg_crossbow
 B sk_plr_dmg_fraggrenade
 B sk_plr_dmg_grenade
 B sk_plr_dmg_pistol
 B sk_plr_dmg_rpg_round
 B sk_plr_dmg_satchel
 B sk_plr_dmg_smg1
 B sk_plr_dmg_smg1_grenade
 B sk_plr_dmg_sniper_round
 B sk_plr_dmg_tripmine
 B sk_plr_grenade_drop_time
 B sk_plr_health_drop_time
 B sk_plr_num_shotgun_pellets
 B sk_rollermine_shock
 B sk_rollermine_stun_delay
 B sk_rollermine_vehicle_intercept
 B sk_satchel_radius
 B sk_scanner_dmg_dive
 B sk_scanner_health
 B sk_smg1_grenade_radius
 B sk_stalker_health
 B sk_stalker_melee_dmg
 B sk_strider_health
 B sk_strider_num_missiles1
 B sk_strider_num_missiles2
 B sk_strider_num_missiles3
 B sk_tripmine_radius
 B sk_vortigaunt_armor_charge
 B sk_vortigaunt_armor_charge_per_token
 B sk_vortigaunt_dmg_claw
 B sk_vortigaunt_dmg_rake
 B sk_vortigaunt_dmg_zap
 B sk_vortigaunt_health
 B sk_vortigaunt_vital_antlion_worker_dmg
 B sk_vortigaunt_zap_range
 B sk_weapon_ar2_alt_fire_duration
 B sk_weapon_ar2_alt_fire_mass
 B sk_weapon_ar2_alt_fire_radius
 B sk_zombie_dmg_both_slash
 B sk_zombie_dmg_one_slash
 B sk_zombie_health
 B sk_zombie_poison_dmg_spit
 B sk_zombie_poison_health
 B skill
 B skip_next_map
 B sky3dparams_t_DataDescInit::g_DataMapHolder
 B sniperLines
 B sniper_xbox_delay
 B sniperspeak
 B sniperviewdist
 B soundemitterbase
 B soundscape_debug
 B spec_freeze_time
 B spec_freeze_traveltime
 B staticpropmgr
 B step_spline
 B strider_always_use_procedural_height
 B strider_ar2_altfire_dmg
 B strider_distributed_fire
 B strider_eyepositions
 B strider_free_knowledge
 B strider_free_pass_after_escorts_dead
 B strider_free_pass_cover_dist
 B strider_free_pass_duration
 B strider_free_pass_move_tolerance
 B strider_free_pass_refill_rate
 B strider_free_pass_start_time
 B strider_free_pass_tolerance_after_escorts_dead
 B strider_idle_test
 B strider_immolate
 B strider_missile_suppress_dist
 B strider_missile_suppress_time
 B strider_pct_height_no_crouch_move
 B strider_peek_eye_dist
 B strider_peek_eye_dist_z
 B strider_peek_time
 B strider_peek_time_after_damage
 B strider_show_cannonlos
 B strider_show_focus
 B strider_show_weapon_los_condition
 B strider_show_weapon_los_z
 B strider_test_height
 B studiorender
 B suitvolume
 B sv_accelerate
 B sv_airaccelerate
 B sv_allow_point_servercommand
 B sv_allow_votes
 B sv_alltalk
 B sv_alternateticks
 B sv_autojump
 B sv_autosave
 B sv_backspeed
 B sv_bonus_challenge
 B sv_bounce
 B sv_cheats
 B sv_clearhinthistory
 B sv_debug_player_use
 B sv_disable_querycache
 B sv_footsteps
 B sv_force_transmit_ents
 B sv_friction
 B sv_gravity
 B sv_hl2mp_item_respawn_time
 B sv_hl2mp_weapon_respawn_time
 B sv_hudhint_sound
 B sv_infinite_aux_power
 B sv_lagflushbonecache
 B sv_massreport
 B sv_maxreplay
 B sv_maxspeed
 B sv_maxunlag
 B sv_maxusrcmdprocessticks_warning
 B sv_maxvelocity
 B sv_motd_unload_on_dismissal
 B sv_netvisdist
 B sv_noclipaccelerate
 B sv_noclipduringpause
 B sv_noclipspeed
 B sv_npc_talker_maxdist
 B sv_player_display_usercommand_errors
 B sv_pushaway_clientside
 B sv_pushaway_clientside_size
 B sv_pushaway_force
 B sv_pushaway_max_force
 B sv_pushaway_max_player_force
 B sv_pushaway_min_player_speed
 B sv_pushaway_player_force
 B sv_pvsskipanimation
 B sv_report_client_settings
 B sv_robust_explosions
 B sv_rollangle
 B sv_rollspeed
 B sv_show_crosshair_target
 B sv_showanimstate
 B sv_showladders
 B sv_showlagcompensation
 B sv_skyname
 B sv_specaccelerate
 B sv_specnoclip
 B sv_specspeed
 B sv_stepsize
 B sv_stickysprint
 B sv_stopspeed
 B sv_strict_notarget
 B sv_suppress_viewpunch
 B sv_test_scripted_sequences
 B sv_teststepsimulation
 B sv_turbophysics
 B sv_unlag
 B sv_unlag_debug
 B sv_unlag_fixstuck
 B sv_unlockedchapters
 B sv_usercmd_custom_random_seed
 B sv_vehicle_autoaim_scale
 B sv_vote_allow_spectators
 B sv_vote_command_delay
 B sv_vote_creation_timer
 B sv_vote_failure_timer
 B sv_vote_quorum_ratio
 B sv_vote_timer_duration
 B sv_vote_ui_hide_disabled_issues
 B sv_wateraccelerate
 B sv_waterdist
 B sv_waterfriction
 B teamlist
 B teamoverride
 B teamplay
 B template_debug
 B template_t_DataDescInit::g_DataMapHolder
 B test_it
 B test_massive_dmg
 B test_massive_dmg_clip
 B tf_arena_max_streak
 B tf_arena_preround_time
 B tf_arena_round_time
 B tf_arena_use_queue
 B tf_escort_recede_time
 B tf_escort_recede_time_overtime
 B tf_escort_score_rate
 B tf_show_train_path
 B think_limit
 B thinkfunc_t_DataDescInit::g_DataMapHolder
 B thumper_show_radius
 B token
 B tokencount
 B trace_report
 B tv_delaymapchange
 B tv_delaymapchange_protect
 B vehicle_crashsound_t_DataDescInit::g_DataMapHolder
 B vehicle_gear_t_DataDescInit::g_DataMapHolder
 B vehiclesounds_t_DataDescInit::g_DataMapHolder
 B voice_serverdebug
 B vprof_scope_entity_gamephys
 B vprof_scope_entity_thinks
 B washentity_t_DataDescInit::g_DataMapHolder
 B weapon_showproficiency
 B weaponstay
 B xbox_autothrottle
 B xbox_steering_deadzone
 B xbox_throttlebias
 B xbox_throttlespoof
 B xc_crouch_debounce
 B xc_crouch_range
 B xc_uncrouch_on_jump
 B xc_use_crouch_limiter
 B zombie_ambushdist
 B zombie_basemax
 B zombie_basemin
 B zombie_changemax
 B zombie_changemin
 B zombie_decaymax
 B zombie_decaymin
 B zombie_moanfreq
 B zombie_stepfreq
 COM_TimestampedLog
 CThread::GetThreadProc()
 CThread::Init()
 CThread::IsThreadRunning()
 CThread::OnExit()
 CThread::SetName(char const*)
 CThread::Start(unsigned int)
 CThread::~CThread()
 CThreadEvent::CThreadEvent(bool)
 CThreadEvent::Set()
 CThreadFastMutex::Lock(unsigned int, unsigned int) volatile
 CThreadLocalBase::CThreadLocalBase()
 CThreadLocalBase::Get() const
 CThreadLocalBase::Set(void*)
 CThreadLocalBase::~CThreadLocalBase()
 CThreadRWLock::LockForWrite()
 CThreadRWLock::UnlockWrite()
 CThreadRWLock::WaitForRead()
 CThreadSpinRWLock::LockForRead()
 CThreadSpinRWLock::SpinLockForWrite(unsigned int)
 CThreadSpinRWLock::UnlockRead()
 CThreadSpinRWLock::UnlockWrite()
 CThreadSyncObject::~CThreadSyncObject()
 CUniformRandomStream::CUniformRandomStream()
 CUniformRandomStream::RandomFloat(float, float)
 CUniformRandomStream::RandomInt(int, int)
 CUniformRandomStream::SetSeed(int)
 CVProfNode::EnterScope()
 CVProfNode::ExitScope()
 CVProfNode::GetSubNode(char const*, int, char const*, int)
 CVProfNode::MarkFrame()
 CVProfNode::Pause()
 CVProfNode::Reset()
 CVProfNode::Resume()
 CVProfile::BudgetGroupNameToBudgetGroupID(char const*)
 CVProfile::OutputReport(int, char const*, int)
 CWorkerThread::CWorkerThread()
 CWorkerThread::Reply(unsigned int)
 CWorkerThread::WaitForCall(unsigned int*)
 CallAssertFailedNotifyFunc
 CommandLine_Tier0
 D ACT_MYCUSTOMACTIVITY
 D AIExtendedSaveHeader_t::m_DataMap
 D AIScheduleState_t::m_DataMap
 D AISquadEnemyInfo_t::m_DataMap
 D AI_EnemyInfo_t::m_DataMap
 D AI_FollowNavInfo_t::m_DataMap
 D AI_FollowParams_t::m_DataMap
 D AI_FreePassParams_t::m_DataMap
 D AI_LeadArgs_t::m_DataMap
 D AI_Response::m_DataMap
 D AI_ResponseParams::m_DataMap
 D AI_StandoffParams_t::m_DataMap
 D AI_Waypoint_t::m_DataMap
 D AR2Explosion::m_DataMap
 D AllocTempVector()::s_nIndex
 D AllocTempVector()::s_vecTemp
 D AngryExpressions
 D CAISound::m_DataMap
 D CAI_AccelDecay::m_DataMap
 D CAI_ActBusyBehavior::gm_SchedLoadStatus
 D CAI_ActBusyBehavior::gm_pszErrorClassName
 D CAI_ActBusyBehavior::m_DataMap
 D CAI_ActBusyGoal::m_DataMap
 D CAI_ActBusyQueueGoal::m_DataMap
 D CAI_AllyManager::m_DataMap
 D CAI_AllySpeechManager::m_DataMap
 D CAI_AssaultBehavior::gm_SchedLoadStatus
 D CAI_AssaultBehavior::gm_pszErrorClassName
 D CAI_AssaultBehavior::m_DataMap
 D CAI_AssaultGoal::m_DataMap
 D CAI_BaseActor::m_DataMap
 D CAI_BaseFlyingBot::m_DataMap
 D CAI_BaseNPC::m_DataMap
 D CAI_BaseNPC::m_nDebugPauseIndex
 D CAI_BaseNPC::m_pClassSendTable
 D CAI_BasePhysicsFlyingBot::m_DataMap
 D CAI_BattleLine::m_DataMap
 D CAI_BehaviorBase::m_DataMap
 D CAI_BlendedMotor::m_DataMap
 D CAI_ChangeHintGroup::m_DataMap
 D CAI_ChangeTarget::m_DataMap
 D CAI_DynamicLink::m_DataMap
 D CAI_DynamicLinkController::m_DataMap
 D CAI_Enemies::m_DataMap
 D CAI_Expresser::m_DataMap
 D CAI_FearBehavior::m_DataMap
 D CAI_FollowBehavior::gm_SchedLoadStatus
 D CAI_FollowBehavior::gm_pszErrorClassName
 D CAI_FollowBehavior::m_DataMap
 D CAI_FollowGoal::m_DataMap
 D CAI_FreePass::m_DataMap
 D CAI_FuncTankBehavior::gm_SchedLoadStatus
 D CAI_FuncTankBehavior::gm_pszErrorClassName
 D CAI_FuncTankBehavior::m_DataMap
 D CAI_GoalEntity::m_DataMap
 D CAI_Hint::m_DataMap
 D CAI_HolsterBehavior::m_DataMap
 D CAI_InterestTarget_t::m_DataMap
 D CAI_LeadBehavior::gm_SchedLoadStatus
 D CAI_LeadBehavior::gm_pszErrorClassName
 D CAI_LeadBehavior::m_DataMap
 D CAI_LeadGoal::m_DataMap
 D CAI_LeadGoal_Weapon::m_DataMap
 D CAI_LocalNavigator::m_DataMap
 D CAI_LookTarget::m_DataMap
 D CAI_Motor::m_DataMap
 D CAI_MoveAndShootOverlay::m_DataMap
 D CAI_MoveMonitor::m_DataMap
 D CAI_MoveProbe::m_DataMap
 D CAI_Navigator::m_DataMap
 D CAI_Network::GetNode(int, bool)::warningCount
 D CAI_NetworkEditTools::m_flAirEditDistance
 D CAI_NetworkEditTools::m_iGConnectivityNode
 D CAI_NetworkEditTools::m_iVisibilityNode
 D CAI_NetworkManager::m_DataMap
 D CAI_Path::m_DataMap
 D CAI_Pathfinder::m_DataMap
 D CAI_PlayerAlly::gm_SchedLoadStatus
 D CAI_PlayerAlly::gm_pszErrorClassName
 D CAI_PlayerAlly::m_DataMap
 D CAI_PoliceGoal::m_DataMap
 D CAI_PolicingBehavior::gm_SchedLoadStatus
 D CAI_PolicingBehavior::gm_pszErrorClassName
 D CAI_PolicingBehavior::m_DataMap
 D CAI_ProxTester::m_DataMap
 D CAI_RadialLinkController::m_DataMap
 D CAI_RappelBehavior::gm_SchedLoadStatus
 D CAI_RappelBehavior::gm_pszErrorClassName
 D CAI_RappelBehavior::m_DataMap
 D CAI_Relationship::m_DataMap
 D CAI_ScriptConditions::gm_Evaluators
 D CAI_ScriptConditions::m_DataMap
 D CAI_ScriptConditionsElement::m_DataMap
 D CAI_ScriptedSchedule::m_DataMap
 D CAI_ScriptedSentence::m_DataMap
 D CAI_ScriptedSequence::m_DataMap
 D CAI_Senses::m_DataMap
 D CAI_Sentence<CNPC_Combine>::m_sentenceSoundlevel
 D CAI_Sentence<CNPC_Combine>::m_sentenceVolume
 D CAI_Sentence<CNPC_Combine>::m_voicePitchMax
 D CAI_Sentence<CNPC_Combine>::m_voicePitchMin
 D CAI_Sentence<CNPC_MetroPolice>::m_sentenceSoundlevel
 D CAI_Sentence<CNPC_MetroPolice>::m_sentenceVolume
 D CAI_Sentence<CNPC_MetroPolice>::m_voicePitchMax
 D CAI_Sentence<CNPC_MetroPolice>::m_voicePitchMin
 D CAI_SentenceBase::m_DataMap
 D CAI_ShotRegulator::m_DataMap
 D CAI_SpeechFilter::m_DataMap
 D CAI_Spotlight::m_DataMap
 D CAI_Squad::m_DataMap
 D CAI_StandoffBehavior::gm_SchedLoadStatus
 D CAI_StandoffBehavior::gm_pszErrorClassName
 D CAI_StandoffBehavior::m_DataMap
 D CAI_StandoffGoal::m_DataMap
 D CAI_TacticalServices::m_DataMap
 D CAI_TrackPather::m_DataMap
 D CAPCController::m_DataMap
 D CAPCMissile::m_DataMap
 D CAlyxEmpEffect::m_DataMap
 D CAmbientGeneric::m_DataMap
 D CAnimationLayer::m_DataMap
 D CAntlionRepellant::m_DataMap
 D CAntlionTemplateMaker::m_DataMap
 D CAreaPortal::m_DataMap
 D CAssaultPoint::m_DataMap
 D CAvoidBox::m_DataMap
 D CAvoidSphere::m_DataMap
 D CBarnacleTongueTip::m_DataMap
 D CBaseAchievement::m_DataMap
 D CBaseAnimating::m_DataMap
 D CBaseAnimating::m_pClassSendTable
 D CBaseAnimatingOverlay::m_DataMap
 D CBaseAnimatingOverlay::m_pClassSendTable
 D CBaseButton::m_DataMap
 D CBaseCombatCharacter::m_DataMap
 D CBaseCombatCharacter::m_pClassSendTable
 D CBaseCombatWeapon::m_DataMap
 D CBaseCombatWeapon::m_pClassSendTable
 D CBaseDMStart::m_DataMap
 D CBaseDoor::m_DataMap
 D CBaseEntity::m_DataMap
 D CBaseEntity::m_nDebugPlayer
 D CBaseEntity::m_nDebugSteps
 D CBaseEntity::m_nPredictionRandomSeed
 D CBaseEntity::m_nPredictionRandomSeedServer
 D CBaseEntity::m_pClassSendTable
 D CBaseEntity::sm_bAccurateTriggerBboxChecks
 D CBaseEntityOutput::m_DataMap
 D CBaseFilter::m_DataMap
 D CBaseFire::m_DataMap
 D CBaseFlex::m_DataMap
 D CBaseFlex::m_pClassSendTable
 D CBaseGrenade::m_DataMap
 D CBaseGrenadeConcussion::m_DataMap
 D CBaseHL2MPBludgeonWeapon::m_pClassSendTable
 D CBaseHL2MPCombatWeapon::m_DataMap
 D CBaseHL2MPCombatWeapon::m_pClassSendTable
 D CBaseHLCombatWeapon::m_DataMap
 D CBaseHLCombatWeapon::m_pClassSendTable
 D CBaseHeadcrab::gm_SchedLoadStatus
 D CBaseHeadcrab::gm_pszErrorClassName
 D CBaseHeadcrab::m_DataMap
 D CBaseHelicopter::m_DataMap
 D CBaseHelicopter::m_pClassSendTable
 D CBaseMoveBehavior::m_DataMap
 D CBaseNPCMaker::m_DataMap
 D CBaseParticleEntity::m_pClassSendTable
 D CBasePlatTrain::m_DataMap
 D CBasePlayer::m_DataMap
 D CBasePlayer::m_pClassSendTable
 D CBaseProjectile::m_pClassSendTable
 D CBasePropDoor::m_DataMap
 D CBaseServerVehicle::m_DataMap
 D CBaseSpriteProjectile::m_DataMap
 D CBaseTeamObjectiveResource::m_DataMap
 D CBaseTempEntity::m_pClassSendTable
 D CBaseToggle::m_DataMap
 D CBaseTrigger::m_DataMap
 D CBaseVPhysicsTrigger::m_DataMap
 D CBaseViewModel::m_DataMap
 D CBaseViewModel::m_pClassSendTable
 D CBeam::m_DataMap
 D CBlackHeadcrab::gm_SchedLoadStatus
 D CBlackHeadcrab::gm_pszErrorClassName
 D CBlackHeadcrab::m_DataMap
 D CBlendingCycler::m_DataMap
 D CBlood::m_DataMap
 D CBombDropSensor::m_DataMap
 D CBombSuppressor::m_DataMap
 D CBoneFollower::m_DataMap
 D CBoneFollowerManager::m_DataMap
 D CBounceBomb::m_DataMap
 D CBreakable::m_DataMap
 D CBreakable::pSpawnObjects
 D CBreakableProp::m_DataMap
 D CBreakableProp::m_pClassSendTable
 D CBreakableSurface::m_DataMap
 D CBubbling::m_DataMap
 D CBugBaitSensor::m_DataMap
 D CChangeLevel::m_DataMap
 D CChoreoEvent::s_nGlobalID
 D CCitadelEnergyCore::m_DataMap
 D CCitizenResponseSystem::m_DataMap
 D CCollisionProperty::m_DataMap
 D CColorCorrection::m_DataMap
 D CColorCorrectionVolume::m_DataMap
 D CCombineDropshipContainer::m_DataMap
 D CCommandPoint::m_DataMap
 D CCommentaryAuto::m_DataMap
 D CCommentarySystem::m_DataMap
 D CConcussiveBlast::m_DataMap
 D CConstantForceController::m_DataMap
 D CConstraintAnchor::m_DataMap
 D CCopyRecipientFilter::m_DataMap
 D CCraneTip::m_DataMap
 D CCredits::m_DataMap
 D CCrossbowBolt::m_DataMap
 D CCycler::m_DataMap
 D CDebugHistory::m_DataMap
 D CDecal::m_DataMap
 D CDmxElement* const& CDmxAttribute::GetValue<CDmxElement*>() const::defaultValue
 D CDmxElement* const& CDmxElement::GetValue<CDmxElement*>(char const*) const::defaultValue
 D CDynamicLight::m_DataMap
 D CDynamicProp::m_DataMap
 D CDynamicProp::m_pClassSendTable
 D CEmbers::m_DataMap
 D CEntityDissolve::m_DataMap
 D CEntityFlame::m_DataMap
 D CEntityParticleTrail::m_DataMap
 D CEnvAR2Explosion::m_DataMap
 D CEnvBeam::m_DataMap
 D CEnvBeverage::m_DataMap
 D CEnvDustPuff::m_DataMap
 D CEnvEffectsScript::m_DataMap
 D CEnvEntityMaker::m_DataMap
 D CEnvExplosion::m_DataMap
 D CEnvFade::m_DataMap
 D CEnvFireSensor::m_DataMap
 D CEnvFireSource::m_DataMap
 D CEnvFunnel::m_DataMap
 D CEnvGlobal::m_DataMap
 D CEnvGunfire::m_DataMap
 D CEnvHeadcrabCanister::m_DataMap
 D CEnvHeadcrabCanisterShared::m_DataMap
 D CEnvHudHint::m_DataMap
 D CEnvLaser::m_DataMap
 D CEnvMicrophone::m_DataMap
 D CEnvMuzzleFlash::m_DataMap
 D CEnvParticleScript::m_DataMap
 D CEnvPlayerSurfaceTrigger::m_DataMap
 D CEnvProjectedTexture::m_DataMap
 D CEnvQuadraticBeam::m_DataMap
 D CEnvScreenEffect::m_DataMap
 D CEnvScreenOverlay::m_DataMap
 D CEnvShake::m_DataMap
 D CEnvShooter::m_DataMap
 D CEnvSoundscape::m_DataMap
 D CEnvSoundscapeProxy::m_DataMap
 D CEnvSoundscapeTriggerable::m_DataMap
 D CEnvSpark::m_DataMap
 D CEnvSplash::m_DataMap
 D CEnvStarfield::m_DataMap
 D CEnvTonemapController::m_DataMap
 D CEnvTracer::m_DataMap
 D CEnvViewPunch::m_DataMap
 D CEnvWind::m_DataMap
 D CEnvZoom::m_DataMap
 D CEventAction::m_DataMap
 D CEventQueue::m_DataMap
 D CFailableAchievement::m_DataMap
 D CFastHeadcrab::gm_SchedLoadStatus
 D CFastHeadcrab::gm_pszErrorClassName
 D CFastHeadcrab::m_DataMap
 D CFilterClass::m_DataMap
 D CFilterCombineBall::m_DataMap
 D CFilterEnemy::m_DataMap
 D CFilterMassGreater::m_DataMap
 D CFilterMultiple::m_DataMap
 D CFilterName::m_DataMap
 D CFire::m_DataMap
 D CFireSmoke::m_DataMap
 D CFireTrail::m_DataMap
 D CFish::m_DataMap
 D CFishPool::m_DataMap
 D CFlare::m_DataMap
 D CFlexCycler::m_DataMap
 D CFlextalkActor::m_DataMap
 D CFmtStrN<1024, false>::CFmtStrN(char const*, ...)::scAsserted
 D CFmtStrN<128, false>::CFmtStrN(char const*, ...)::scAsserted
 D CFmtStrN<256, false>::CFmtStrN(char const*, ...)::scAsserted
 D CFmtStrN<256, false>::sprintf(char const*, ...)::scAsserted
 D CFmtStrN<512, false>::CFmtStrN(char const*, ...)::scAsserted
 D CFogController::m_DataMap
 D CFourWheelServerVehicle::m_DataMap
 D CFourWheelVehiclePhysics::m_DataMap
 D CFuncAreaPortalBase::m_DataMap
 D CFuncAreaPortalWindow::m_DataMap
 D CFuncBrush::m_DataMap
 D CFuncCombineBallSpawner::m_DataMap
 D CFuncConveyor::m_DataMap
 D CFuncLadder::m_DataMap
 D CFuncMonitor::m_DataMap
 D CFuncMoveLinear::m_DataMap
 D CFuncOccluder::m_DataMap
 D CFuncPlat::m_DataMap
 D CFuncPlatRot::m_DataMap
 D CFuncReflectiveGlass::m_DataMap
 D CFuncRotating::m_DataMap
 D CFuncSmokeVolume::m_DataMap
 D CFuncTank::m_DataMap
 D CFuncTankAPCRocket::m_DataMap
 D CFuncTankAirboatGun::m_DataMap
 D CFuncTankCombineCannon::m_DataMap
 D CFuncTankLaser::m_DataMap
 D CFuncTankMortar::m_DataMap
 D CFuncTankPhysCannister::m_DataMap
 D CFuncTankPulseLaser::m_DataMap
 D CFuncTankRocket::m_DataMap
 D CFuncTankTrain::m_DataMap
 D CFuncTrackAuto::m_DataMap
 D CFuncTrackChange::m_DataMap
 D CFuncTrackTrain::m_DataMap
 D CFuncTrain::m_DataMap
 D CFuncTrainControls::m_DataMap
 D CFuncVPhysicsClip::m_DataMap
 D CFuncVehicleClip::m_DataMap
 D CFuncWall::m_DataMap
 D CFuncWallToggle::m_DataMap
 D CFunc_Dust::m_DataMap
 D CFunc_LOD::m_DataMap
 D CGameEnd::m_DataMap
 D CGameGibManager::m_DataMap
 D CGamePlayerEquip::m_DataMap
 D CGamePlayerZone::m_DataMap
 D CGameRulesProxy::m_pClassSendTable
 D CGameScore::m_DataMap
 D CGameText::m_DataMap
 D CGameUI::m_DataMap
 D CGameWeaponManager::m_DataMap
 D CGenericActor::m_DataMap
 D CGib::m_DataMap
 D CGibShooter::m_DataMap
 D CGlobalState::m_DataMap
 D CGrenadeAR2::m_DataMap
 D CGrenadeBeam::m_DataMap
 D CGrenadeBeamChaser::m_DataMap
 D CGrenadeBugBait::m_DataMap
 D CGrenadeFrag::m_DataMap
 D CGrenadeHelicopter::m_DataMap
 D CGrenadeHomer::m_DataMap
 D CGrenadePathfollower::m_DataMap
 D CGunTarget::m_DataMap
 D CGunshipRagdollMotion::m_DataMap
 D CHL2MPMachineGun::m_DataMap
 D CHL2MPMachineGun::m_pClassSendTable
 D CHL2MP_Player::m_DataMap
 D CHL2PlayerLocalData::m_DataMap
 D CHL2_Player::m_DataMap
 D CHL2_Player::m_pClassSendTable
 D CHLMachineGun::m_DataMap
 D CHLMachineGun::m_pClassSendTable
 D CHLSelectFireMachineGun::m_DataMap
 D CHelicopterChunk::m_DataMap
 D CInfoAPCMissileHint::m_DataMap
 D CInfoCameraLink::m_DataMap
 D CInfoLightingRelative::m_DataMap
 D CInfoOverlayAccessor::m_DataMap
 D CInfoTeleporterCountdown::m_DataMap
 D CInstancedSceneEntity::m_DataMap
 D CItem::m_DataMap
 D CItemSoda::m_DataMap
 D CItem_AmmoCrate::m_DataMap
 D CItem_AmmoCrate::m_lpzAmmoNames
 D CItem_AmmoCrate::m_lpzModelNames
 D CItem_AmmoCrate::m_nAmmoAmounts
 D CItem_AmmoCrate::m_pGiveWeapon
 D CItem_DynamicResupply::m_DataMap
 D CItem_ItemCrate::m_DataMap
 D CKeepUpright::m_DataMap
 D CLaserDot::m_DataMap
 D CLight::m_DataMap
 D CLightGlow::m_DataMap
 D CLogicActiveAutosave::m_DataMap
 D CLogicAuto::m_DataMap
 D CLogicAutosave::m_DataMap
 D CLogicBranch::m_DataMap
 D CLogicBranchList::m_DataMap
 D CLogicCase::m_DataMap
 D CLogicCollisionPair::m_DataMap
 D CLogicCompare::m_DataMap
 D CLogicCompareInteger::m_DataMap
 D CLogicLineToEntity::m_DataMap
 D CLogicMeasureMovement::m_DataMap
 D CLogicNavigation::m_DataMap
 D CLogicPlayerProxy::m_DataMap
 D CLogicRelay::m_DataMap
 D CLookDoor::m_DataMap
 D CLookDoorThinker::m_DataMap
 D CMaterialModifyControl::m_DataMap
 D CMathColorBlend::m_DataMap
 D CMathCounter::m_DataMap
 D CMathRemap::m_DataMap
 D CMessage::m_DataMap
 D CMessageEntity::m_DataMap
 D CMissile::m_DataMap
 D CMomentaryRotButton::m_DataMap
 D CMortarShell::m_DataMap
 D CMotorController::m_DataMap
 D CMovementSpeedMod::m_DataMap
 D CMultiDamage::m_DataMap
 D CMultiSource::m_DataMap
 D CNPCMaker::m_DataMap
 D CNPCSimpleTalker::m_DataMap
 D CNPCSimpleTalkerExpresser::m_DataMap
 D CNPCSpawnDestination::m_DataMap
 D CNPC_APCDriver::gm_SchedLoadStatus
 D CNPC_APCDriver::gm_pszErrorClassName
 D CNPC_APCDriver::m_DataMap
 D CNPC_Alyx::gm_SchedLoadStatus
 D CNPC_Alyx::gm_pszErrorClassName
 D CNPC_Alyx::m_DataMap
 D CNPC_Antlion::gm_SchedLoadStatus
 D CNPC_Antlion::gm_pszErrorClassName
 D CNPC_Antlion::m_DataMap
 D CNPC_AntlionGuard::gm_SchedLoadStatus
 D CNPC_AntlionGuard::gm_pszErrorClassName
 D CNPC_AntlionGuard::m_DataMap
 D CNPC_AttackHelicopter::gm_SchedLoadStatus
 D CNPC_AttackHelicopter::gm_pszErrorClassName
 D CNPC_AttackHelicopter::m_DataMap
 D CNPC_Barnacle::gm_SchedLoadStatus
 D CNPC_Barnacle::gm_pszErrorClassName
 D CNPC_Barnacle::m_DataMap
 D CNPC_Barnacle::m_szGibNames
 D CNPC_Barney::gm_SchedLoadStatus
 D CNPC_Barney::gm_pszErrorClassName
 D CNPC_Barney::m_DataMap
 D CNPC_BaseScanner::gm_SchedLoadStatus
 D CNPC_BaseScanner::gm_pszErrorClassName
 D CNPC_BaseScanner::m_DataMap
 D CNPC_BaseZombie::gm_SchedLoadStatus
 D CNPC_BaseZombie::gm_pszErrorClassName
 D CNPC_BaseZombie::m_DataMap
 D CNPC_Bullseye::m_DataMap
 D CNPC_CScanner::gm_SchedLoadStatus
 D CNPC_CScanner::gm_pszErrorClassName
 D CNPC_CScanner::m_DataMap
 D CNPC_CeilingTurret::m_DataMap
 D CNPC_Citizen::gm_SchedLoadStatus
 D CNPC_Citizen::gm_pszErrorClassName
 D CNPC_Citizen::m_DataMap
 D CNPC_ClawScanner::m_DataMap
 D CNPC_Combine::gm_SchedLoadStatus
 D CNPC_Combine::gm_pszErrorClassName
 D CNPC_Combine::m_DataMap
 D CNPC_CombineCamera::m_DataMap
 D CNPC_CombineDropship::gm_SchedLoadStatus
 D CNPC_CombineDropship::gm_pszErrorClassName
 D CNPC_CombineDropship::m_DataMap
 D CNPC_CombineGunship::gm_SchedLoadStatus
 D CNPC_CombineGunship::gm_pszErrorClassName
 D CNPC_CombineGunship::m_DataMap
 D CNPC_CraneDriver::gm_SchedLoadStatus
 D CNPC_CraneDriver::gm_pszErrorClassName
 D CNPC_CraneDriver::m_DataMap
 D CNPC_Crow::gm_SchedLoadStatus
 D CNPC_Crow::gm_pszErrorClassName
 D CNPC_Crow::m_DataMap
 D CNPC_Dog::gm_SchedLoadStatus
 D CNPC_Dog::gm_pszErrorClassName
 D CNPC_Dog::m_DataMap
 D CNPC_EnemyFinder::gm_SchedLoadStatus
 D CNPC_EnemyFinder::gm_pszErrorClassName
 D CNPC_EnemyFinder::m_DataMap
 D CNPC_EnemyFinderCombineCannon::m_DataMap
 D CNPC_Fisherman::gm_SchedLoadStatus
 D CNPC_Fisherman::gm_pszErrorClassName
 D CNPC_Fisherman::m_DataMap
 D CNPC_FloorTurret::fMaxTipControllerAngularVelocity
 D CNPC_FloorTurret::fMaxTipControllerVelocity
 D CNPC_FloorTurret::gm_SchedLoadStatus
 D CNPC_FloorTurret::gm_pszErrorClassName
 D CNPC_FloorTurret::m_DataMap
 D CNPC_Furniture::m_DataMap
 D CNPC_GMan::m_DataMap
 D CNPC_GroundTurret::gm_SchedLoadStatus
 D CNPC_GroundTurret::gm_pszErrorClassName
 D CNPC_GroundTurret::m_DataMap
 D CNPC_Ichthyosaur::gm_SchedLoadStatus
 D CNPC_Ichthyosaur::gm_pszErrorClassName
 D CNPC_Ichthyosaur::m_DataMap
 D CNPC_Launcher::m_DataMap
 D CNPC_Manhack::gm_SchedLoadStatus
 D CNPC_Manhack::gm_pszErrorClassName
 D CNPC_Manhack::m_DataMap
 D CNPC_MetroPolice::gm_SchedLoadStatus
 D CNPC_MetroPolice::gm_pszErrorClassName
 D CNPC_MetroPolice::m_DataMap
 D CNPC_MissileDefense::m_DataMap
 D CNPC_Monk::gm_SchedLoadStatus
 D CNPC_Monk::gm_pszErrorClassName
 D CNPC_Monk::m_DataMap
 D CNPC_Mossman::m_DataMap
 D CNPC_PlayerCompanion::gm_SchedLoadStatus
 D CNPC_PlayerCompanion::gm_pszErrorClassName
 D CNPC_PlayerCompanion::m_DataMap
 D CNPC_PoisonZombie::gm_SchedLoadStatus
 D CNPC_PoisonZombie::gm_pszErrorClassName
 D CNPC_PoisonZombie::m_DataMap
 D CNPC_RollerMine::gm_SchedLoadStatus
 D CNPC_RollerMine::gm_pszErrorClassName
 D CNPC_RollerMine::m_DataMap
 D CNPC_Stalker::gm_SchedLoadStatus
 D CNPC_Stalker::gm_pszErrorClassName
 D CNPC_Stalker::m_DataMap
 D CNPC_Strider::gm_SchedLoadStatus
 D CNPC_Strider::gm_pszErrorClassName
 D CNPC_Strider::m_DataMap
 D CNPC_VehicleDriver::gm_SchedLoadStatus
 D CNPC_VehicleDriver::gm_pszErrorClassName
 D CNPC_VehicleDriver::m_DataMap
 D CNPC_Vortigaunt::gm_SchedLoadStatus
 D CNPC_Vortigaunt::gm_pszErrorClassName
 D CNPC_Vortigaunt::m_DataMap
 D CNewNPC::gm_SchedLoadStatus
 D CNewNPC::gm_pszErrorClassName
 D CNewNPC::m_DataMap
 D CNewRecharge::m_DataMap
 D CNewWallHealth::m_DataMap
 D CNodeEnt::m_DataMap
 D COrnamentProp::m_DataMap
 D CParticleFire::m_DataMap
 D CParticleLight::m_DataMap
 D CParticlePerformanceMonitor::m_DataMap
 D CParticleSystem::m_DataMap
 D CPassengerInfo::m_DataMap
 D CPathCorner::m_DataMap
 D CPathKeyFrame::m_DataMap
 D CPathTrack::m_DataMap
 D CPhysBox::m_DataMap
 D CPhysBox::m_pClassSendTable
 D CPhysBoxMultiplayer::m_DataMap
 D CPhysConstraint::m_DataMap
 D CPhysConstraintSystem::m_DataMap
 D CPhysConvert::m_DataMap
 D CPhysExplosion::m_DataMap
 D CPhysForce::m_DataMap
 D CPhysHinge::m_DataMap
 D CPhysImpact::m_DataMap
 D CPhysLength::m_DataMap
 D CPhysMagnet::m_DataMap
 D CPhysMotor::m_DataMap
 D CPhysPulley::m_DataMap
 D CPhysSlideConstraint::m_DataMap
 D CPhysThruster::m_DataMap
 D CPhysTorque::m_DataMap
 D CPhysicsCannister::m_DataMap
 D CPhysicsEntitySolver::m_DataMap
 D CPhysicsNPCSolver::m_DataMap
 D CPhysicsProp::m_DataMap
 D CPhysicsProp::m_pClassSendTable
 D CPhysicsPropMultiplayer::m_DataMap
 D CPhysicsPropRespawnable::m_DataMap
 D CPhysicsShake::m_DataMap
 D CPhysicsSpring::m_DataMap
 D CPhysicsWind::m_DataMap
 D CPhysicsWire::m_DataMap
 D CPlasma::m_DataMap
 D CPlayerLocalData::m_DataMap
 D CPlayerResource::m_DataMap
 D CPlayerState::m_DataMap
 D CPointAngleSensor::m_DataMap
 D CPointAngularVelocitySensor::m_DataMap
 D CPointBonusMapsAccessor::m_DataMap
 D CPointCamera::m_DataMap
 D CPointClientCommand::m_DataMap
 D CPointCombineBallLauncher::m_DataMap
 D CPointCommentaryNode::m_DataMap
 D CPointDevShotCamera::m_DataMap
 D CPointGamestatsCounter::m_DataMap
 D CPointHurt::m_DataMap
 D CPointPlayerMoveConstraint::m_DataMap
 D CPointProximitySensor::m_DataMap
 D CPointPush::m_DataMap
 D CPointServerCommand::m_DataMap
 D CPointSpotlight::m_DataMap
 D CPointTeleport::m_DataMap
 D CPointTemplate::m_DataMap
 D CPointVelocitySensor::m_DataMap
 D CPoseController::m_DataMap
 D CPrecipitation::m_DataMap
 D CProjectedDecal::m_DataMap
 D CPropAPC::m_DataMap
 D CPropAirboat::m_DataMap
 D CPropCombineBall::m_DataMap
 D CPropCrane::m_DataMap
 D CPropDoorRotating::m_DataMap
 D CPropThumper::m_DataMap
 D CPropVehicle::m_DataMap
 D CPropVehicleDriveable::m_DataMap
 D CPropVehicleDriveable::m_pClassSendTable
 D CPropVehiclePrisonerPod::m_DataMap
 D CPropVehicleViewController::m_DataMap
 D CProtoSniper::gm_SchedLoadStatus
 D CProtoSniper::gm_pszErrorClassName
 D CProtoSniper::m_DataMap
 D CRagdollBoogie::m_DataMap
 D CRagdollConstraint::m_DataMap
 D CRagdollMagnet::m_DataMap
 D CRagdollManager::m_DataMap
 D CRagdollProp::m_DataMap
 D CRagdollProp::m_pClassSendTable
 D CRagdollPropAttached::m_DataMap
 D CRallyPoint::m_DataMap
 D CRandSimTimer::m_DataMap
 D CRandStopwatch::m_DataMap
 D CRecharge::m_DataMap
 D CRevertSaved::m_DataMap
 D CRollerController::m_DataMap
 D CRopeAnchor::m_DataMap
 D CRopeKeyframe::m_DataMap
 D CRotDoor::m_DataMap
 D CRotorWashEmitter::m_DataMap
 D CRotorWashShooter::m_DataMap
 D CRuleEntity::m_DataMap
 D CRulePointEntity::m_DataMap
 D CSatchelCharge::m_DataMap
 D CSceneEntity::m_DataMap
 D CSceneListManager::m_DataMap
 D CSceneManager::m_DataMap
 D CScriptIntro::m_DataMap
 D CScriptedTarget::m_DataMap
 D CServerNetworkProperty::m_DataMap
 D CShadowControl::m_DataMap
 D CSimTimer::m_DataMap
 D CSimpleSimTimer::m_DataMap
 D CSkyCamera::m_DataMap
 D CSlideshowDisplay::m_DataMap
 D CSmokeStack::m_DataMap
 D CSmokeStackLightInfo::m_DataMap
 D CSniperBullet::m_DataMap
 D CSniperTarget::m_DataMap
 D CSound::m_DataMap
 D CSoundEmitterSystem::PrecacheScriptSound(char const*)::s_PrecacheScriptSoundFailures
 D CSoundEnt::m_DataMap
 D CSoundEnvelope::m_DataMap
 D CSoundPatch::m_DataMap
 D CSparkTrail::m_DataMap
 D CSpeaker::m_DataMap
 D CSpotlightEnd::m_DataMap
 D CSprite::m_DataMap
 D CSprite::m_pClassSendTable
 D CSpriteTrail::m_DataMap
 D CSteamJet::m_DataMap
 D CStopwatch::m_DataMap
 D CStopwatchBase::m_DataMap
 D CStriderMinigun::m_DataMap
 D CStripWeapons::m_DataMap
 D CSun::m_DataMap
 D CTEBaseBeam::m_pClassSendTable
 D CTEMetalSparks::m_pClassSendTable
 D CTEParticleSystem::m_pClassSendTable
 D CTakeDamageInfo::m_DataMap
 D CTankTargetChange::m_DataMap
 D CTankTrainAI::m_DataMap
 D CTargetCDAudioRep::m_DataMap
 D CTargetChangeGravity::m_DataMap
 D CTargetGunshipCrash::m_DataMap
 D CTeamControlPoint::m_DataMap
 D CTeamControlPointMaster::m_DataMap
 D CTeamControlPointRound::m_DataMap
 D CTeamRoundTimer::m_DataMap
 D CTeamSpawnPoint::m_DataMap
 D CTeamTrainWatcher::m_DataMap
 D CTeamVehicleSpawnPoint::m_DataMap
 D CTeamplayRoundBasedRulesProxy::m_DataMap
 D CTemplateNPCMaker::m_DataMap
 D CTesla::m_DataMap
 D CTestTraceline::m_DataMap
 D CTextureToggle::m_DataMap
 D CThrustController::m_DataMap
 D CTimerEntity::m_DataMap
 D CTriggerApplyImpulse::m_DataMap
 D CTriggerAreaCapture::m_DataMap
 D CTriggerBrush::m_DataMap
 D CTriggerCamera::m_DataMap
 D CTriggerGravity::m_DataMap
 D CTriggerHurt::m_DataMap
 D CTriggerImpact::m_DataMap
 D CTriggerLook::m_DataMap
 D CTriggerMultiple::m_DataMap
 D CTriggerPhysicsTrap::m_DataMap
 D CTriggerPlayerMovement::m_DataMap
 D CTriggerProximity::m_DataMap
 D CTriggerPush::m_DataMap
 D CTriggerRemove::m_DataMap
 D CTriggerSave::m_DataMap
 D CTriggerSoundscape::m_DataMap
 D CTriggerTeleport::m_DataMap
 D CTriggerTeleportRelative::m_DataMap
 D CTriggerToggleSave::m_DataMap
 D CTriggerVPhysicsMotion::m_DataMap
 D CTriggerWateryDeath::m_DataMap
 D CTriggerWeaponDissolve::m_DataMap
 D CTriggerWeaponStrip::m_DataMap
 D CTriggerWind::m_DataMap
 D CTripmineGrenade::m_DataMap
 D CTurretTipController::m_DataMap
 D CUtlCachedFileData<CModelSoundsCache>::Save()::__executeCount
 D CUtlRBTree<AI_CriteriaSet::CritEntry_t, short, bool (*)(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&), CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short> >::Links(short) const::s_Sentinel
 D CUtlRBTree<CAI_BaseNPC*, unsigned short, bool (*)(CAI_BaseNPC* const&, CAI_BaseNPC* const&), CUtlMemory<UtlRBTreeNode_t<CAI_BaseNPC*, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CBaseEntity*, unsigned short, bool (*)(CBaseEntity* const&, CBaseEntity* const&), CUtlMemory<UtlRBTreeNode_t<CBaseEntity*, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CBaseFlex::FS_LocalToGlobal_t, unsigned short, bool (*)(CBaseFlex::FS_LocalToGlobal_t const&, CBaseFlex::FS_LocalToGlobal_t const&), CUtlMemory<UtlRBTreeNode_t<CBaseFlex::FS_LocalToGlobal_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, bool (*)(CBreakModelsPrecached::breakable_precache_t const&, CBreakModelsPrecached::breakable_precache_t const&), CUtlMemory<UtlRBTreeNode_t<CBreakModelsPrecached::breakable_precache_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CChoreoEvent*, unsigned short, bool (*)(CChoreoEvent* const&, CChoreoEvent* const&), CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CChoreoScene::ActiveList, int, bool (*)(CChoreoScene::ActiveList const&, CChoreoScene::ActiveList const&), CUtlMemory<UtlRBTreeNode_t<CChoreoScene::ActiveList, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CCombatCharVisCache::VisCacheEntry_t, unsigned short, CCombatCharVisCache::CVisCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<CCombatCharVisCache::VisCacheEntry_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CHLTVGameEvent, unsigned short, bool (*)(CHLTVGameEvent const&, CHLTVGameEvent const&), CUtlMemory<UtlRBTreeNode_t<CHLTVGameEvent, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, bool (*)(CSceneEntity::SpeakEventSound_t const&, CSceneEntity::SpeakEventSound_t const&), CUtlMemory<UtlRBTreeNode_t<CSceneEntity::SpeakEventSound_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short, bool (*)(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&, CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&), CUtlMemory<UtlRBTreeNode_t<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char>, unsigned char> >::Links(unsigned char) const::s_Sentinel
 D CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short, CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short, CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short, CUtlMap<CSteamID, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int, CUtlMap<char const*, CActivityRemapCache, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int, CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int, CUtlMap<char const*, CInstancedResponseSystem*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short, CUtlMap<char const*, CResponseSystem::Enumeration, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short>, short> >::Links(short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, CUserMessage*, int>::Node_t, int, CUtlMap<char const*, CUserMessage*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUserMessage*, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int, CUtlMap<char const*, ConceptHistory_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, ConceptInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, Criteria, short>::Node_t, short, CUtlMap<char const*, Criteria, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Criteria, short>::Node_t, short>, short> >::Links(short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, EventGroup, int>::Node_t, int, CUtlMap<char const*, EventGroup, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EventGroup, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, IEntityFactory*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, ResponseGroup, short>::Node_t, short, CUtlMap<char const*, ResponseGroup, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ResponseGroup, short>::Node_t, short>, short> >::Links(short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, Rule, short>::Node_t, short, CUtlMap<char const*, Rule, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Rule, short>::Node_t, short>, short> >::Links(short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, float, int>::Node_t, int, CUtlMap<char const*, float, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, float, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, int, int>::Node_t, int, CUtlMap<char const*, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<int, CAIHintVector, unsigned short>::Node_t, unsigned short, CUtlMap<int, CAIHintVector, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CAIHintVector, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<int, CBaseAchievement*, unsigned short>::Node_t, unsigned short, CUtlMap<int, CBaseAchievement*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CBaseAchievement*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t, unsigned short, CUtlMap<int, CTeamControlPoint*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<int, int, unsigned short>::Node_t, unsigned short, CUtlMap<int, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char, CUtlMap<string_t, CSimpleSimTimer, char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char>, char> >::Links(char) const::s_Sentinel
 D CUtlRBTree<CUtlMap<unsigned int, Activity, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, Activity, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, Activity, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlString, unsigned short, bool (*)(CUtlString const&, CUtlString const&), CUtlMemory<UtlRBTreeNode_t<CUtlString, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<NearbyDismount_t, int, bool (*)(NearbyDismount_t const&, NearbyDismount_t const&), CUtlMemory<UtlRBTreeNode_t<NearbyDismount_t, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<ThinkSync, unsigned short, bool (*)(ThinkSync const&, ThinkSync const&), CUtlMemory<UtlRBTreeNode_t<ThinkSync, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<VisibilityCacheEntry_t, unsigned short, CVisibilityCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<VisibilityCacheEntry_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<int, unsigned short, bool (*)(int const&, int const&), CUtlMemory<UtlRBTreeNode_t<int, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlString const& CDmxAttribute::GetValue<CUtlString>() const::defaultValue
 D CUtlString const& CDmxElement::GetValue<CUtlString>(char const*) const::defaultValue
 D CUtlVector<CDmxElement*, CUtlMemory<CDmxElement*, int> > const& CDmxAttribute::GetArray<CDmxElement*>() const::defaultArray
 D CUtlVector<CDmxElement*, CUtlMemory<CDmxElement*, int> > const& CDmxElement::GetArray<CDmxElement*>(char const*) const::defaultValue
 D CVGuiScreen::m_DataMap
 D CVortigauntChargeToken::m_DataMap
 D CVortigauntEffectDispel::m_DataMap
 D CVoteController::m_DataMap
 D CWC_UpdateIgnoreList::m_DataMap
 D CWallHealth::m_DataMap
 D CWaterBullet::m_DataMap
 D CWaterLODControl::m_DataMap
 D CWateryDeathLeech::m_DataMap
 D CWeapon357::m_acttable
 D CWeaponAR2::GetBulletSpread()::cone
 D CWeaponAR2::m_acttable
 D CWeaponAnnabelle::GetBulletSpread()::cone
 D CWeaponAnnabelle::m_DataMap
 D CWeaponAnnabelle::m_acttable
 D CWeaponBugBait::m_DataMap
 D CWeaponCrossbow::m_acttable
 D CWeaponCrowbar::m_acttable
 D CWeaponCycler::m_DataMap
 D CWeaponFrag::m_acttable
 D CWeaponHL2MPBase::m_DataMap
 D CWeaponHL2MPBase::m_pClassSendTable
 D CWeaponPhysCannon::m_acttable
 D CWeaponPistol::GetBulletSpread()::cone
 D CWeaponPistol::m_acttable
 D CWeaponRPG::m_acttable
 D CWeaponSMG1::GetBulletSpread()::cone
 D CWeaponSMG1::m_acttable
 D CWeaponShotgun::GetBulletSpread()::cone
 D CWeaponShotgun::m_acttable
 D CWeaponStunStick::m_acttable
 D CWeapon_SLAM::m_DataMap
 D CWeapon_SLAM::m_acttable
 D CWeightButton::m_DataMap
 D CWindowPane::m_DataMap
 D CWorld::m_DataMap
 D CWorldItem::m_DataMap
 D CWreckage::m_DataMap
 D CZombie::gm_SchedLoadStatus
 D CZombie::gm_pszErrorClassName
 D CZombie::m_DataMap
 D CZombie::pMoanSounds
 D CitizenResponseConcepts
 D ConceptHistory_t::m_DataMap
 D DustTrail::m_DataMap
 D ENTITYIO_FIXUP_STRING
 D EntityParticleTrailInfo_t::m_DataMap
 D EventQueuePrioritizedEvent_t::m_DataMap
 D FilterDamageType::m_DataMap
 D FilterTeam::m_DataMap
 D FirstBitInWord(unsigned int, int)::firstBitLUT
 D GetBitForBitnum(int)::bitsForBitnum
 D GetEndMask(int)::bitStringEndMasks
 D GetStartBitMask(int)::g_StartMask
 D GetStdStringDataOps()::ops
 D HintNodeData::m_DataMap
 D ISaveRestoreOps* CUtlMapDataopsInstantiator<2, 10>::GetDataOps<CUtlMap<string_t, CSimpleSimTimer, char> >(CUtlMap<string_t, CSimpleSimTimer, char>*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CAI_InterestTarget>(CAI_InterestTarget*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<AISquadEnemyInfo_t, CUtlMemory<AISquadEnemyInfo_t, int> > >(CUtlVector<AISquadEnemyInfo_t, CUtlMemory<AISquadEnemyInfo_t, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<AI_Waypoint_t, CUtlMemory<AI_Waypoint_t, int> > >(CUtlVector<AI_Waypoint_t, CUtlMemory<AI_Waypoint_t, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<CAI_ScriptConditionsElement, CUtlMemory<CAI_ScriptConditionsElement, int> > >(CUtlVector<CAI_ScriptConditionsElement, CUtlMemory<CAI_ScriptConditionsElement, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer, int> > >(CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<CPassengerInfo, CUtlMemory<CPassengerInfo, int> > >(CUtlVector<CPassengerInfo, CUtlMemory<CPassengerInfo, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<Relationship_t, CUtlMemory<Relationship_t, int> > >(CUtlVector<Relationship_t, CUtlMemory<Relationship_t, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<ResponseContext_t, CUtlMemory<ResponseContext_t, int> > >(CUtlVector<ResponseContext_t, CUtlMemory<ResponseContext_t, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<SaveRestoreBlockHeader_t, CUtlMemory<SaveRestoreBlockHeader_t, int> > >(CUtlVector<SaveRestoreBlockHeader_t, CUtlMemory<SaveRestoreBlockHeader_t, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<ScriptedNPCInteraction_t, CUtlMemory<ScriptedNPCInteraction_t, int> > >(CUtlVector<ScriptedNPCInteraction_t, CUtlMemory<ScriptedNPCInteraction_t, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<UnreachableEnt_t, CUtlMemory<UnreachableEnt_t, int> > >(CUtlVector<UnreachableEnt_t, CUtlMemory<UnreachableEnt_t, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<globalentity_t, CUtlMemory<globalentity_t, int> > >(CUtlVector<globalentity_t, CUtlMemory<globalentity_t, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<magnetted_objects_t, CUtlMemory<magnetted_objects_t, int> > >(CUtlVector<magnetted_objects_t, CUtlMemory<magnetted_objects_t, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<modifiedconvars_t, CUtlMemory<modifiedconvars_t, int> > >(CUtlVector<modifiedconvars_t, CUtlMemory<modifiedconvars_t, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<physfollower_t, CUtlMemory<physfollower_t, int> > >(CUtlVector<physfollower_t, CUtlMemory<physfollower_t, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<template_t, CUtlMemory<template_t, int> > >(CUtlVector<template_t, CUtlMemory<template_t, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<thinkfunc_t, CUtlMemory<thinkfunc_t, int> > >(CUtlVector<thinkfunc_t, CUtlMemory<thinkfunc_t, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<vehicle_crashsound_t, CUtlMemory<vehicle_crashsound_t, int> > >(CUtlVector<vehicle_crashsound_t, CUtlMemory<vehicle_crashsound_t, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<vehicle_gear_t, CUtlMemory<vehicle_gear_t, int> > >(CUtlVector<vehicle_gear_t, CUtlMemory<vehicle_gear_t, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<washentity_t, CUtlMemory<washentity_t, int> > >(CUtlVector<washentity_t, CUtlMemory<washentity_t, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<12>::GetDataOps<CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> > >(CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CAI_BaseNPC>, CUtlMemory<CHandle<CAI_BaseNPC>, int> > >(CUtlVector<CHandle<CAI_BaseNPC>, CUtlMemory<CHandle<CAI_BaseNPC>, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CBaseCombatWeapon>, CUtlMemory<CHandle<CBaseCombatWeapon>, int> > >(CUtlVector<CHandle<CBaseCombatWeapon>, CUtlMemory<CHandle<CBaseCombatWeapon>, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity>, int> > >(CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity>, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CBaseFlex>, CUtlMemory<CHandle<CBaseFlex>, int> > >(CUtlVector<CHandle<CBaseFlex>, CUtlMemory<CHandle<CBaseFlex>, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer>, int> > >(CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer>, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CFish>, CUtlMemory<CHandle<CFish>, int> > >(CUtlVector<CHandle<CFish>, CUtlMemory<CHandle<CFish>, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CNPC_Antlion>, CUtlMemory<CHandle<CNPC_Antlion>, int> > >(CUtlVector<CHandle<CNPC_Antlion>, CUtlMemory<CHandle<CNPC_Antlion>, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity>, int> > >(CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity>, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CSceneListManager>, CUtlMemory<CHandle<CSceneListManager>, int> > >(CUtlVector<CHandle<CSceneListManager>, CUtlMemory<CHandle<CSceneListManager>, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CVGuiScreen>, CUtlMemory<CHandle<CVGuiScreen>, int> > >(CUtlVector<CHandle<CVGuiScreen>, CUtlMemory<CHandle<CVGuiScreen>, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<16>::GetDataOps<CUtlVector<float, CUtlMemory<float, int> > >(CUtlVector<float, CUtlMemory<float, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<5>::GetDataOps<CUtlVector<int, CUtlMemory<int, int> > >(CUtlVector<int, CUtlMemory<int, int> >*)::ops
 D ISaveRestoreOps* GetBitstringDataOps<CBitVec<32> >(CBitVec<32>*)::ops
 D KeyValues::s_pfGetStringForSymbol
 D KeyValues::s_pfGetSymbolForString
 D LadderMove_t::m_DataMap
 D MOVE_HEIGHT_EPSILON
 D NormalExpressions
 D ParticleSmokeGrenade::m_DataMap
 D PhysBlockHeader_t::m_DataMap
 D PhysObjectHeader_t::m_DataMap
 D Relationship_t::m_DataMap
 D Response::m_DataMap
 D ResponseContext_t::m_DataMap
 D ResponseGroup::m_DataMap
 D RocketTrail::m_DataMap
 D SURFACEPROP_MANIFEST_FILE
 D SaveRestoreBlockHeader_t::m_DataMap
 D ScaredExpressions
 D ScriptedNPCInteraction_Phases_t::m_DataMap
 D ScriptedNPCInteraction_t::m_DataMap
 D SmokeTrail::m_DataMap
 D SoundCommand_t::m_DataMap
 D SporeExplosion::m_DataMap
 D SporeTrail::m_DataMap
 D SteamAppList()::s_CallbackCounterAndContext
 D SteamApps()::s_CallbackCounterAndContext
 D SteamClient()::s_CallbackCounterAndContext
 D SteamController()::s_CallbackCounterAndContext
 D SteamFriends()::s_CallbackCounterAndContext
 D SteamGameSearch()::s_CallbackCounterAndContext
 D SteamGameServer()::s_CallbackCounterAndContext
 D SteamGameServerApps()::s_CallbackCounterAndContext
 D SteamGameServerHTTP()::s_CallbackCounterAndContext
 D SteamGameServerInventory()::s_CallbackCounterAndContext
 D SteamGameServerNetworking()::s_CallbackCounterAndContext
 D SteamGameServerStats()::s_CallbackCounterAndContext
 D SteamGameServerUGC()::s_CallbackCounterAndContext
 D SteamGameServerUtils()::s_CallbackCounterAndContext
 D SteamHTMLSurface()::s_CallbackCounterAndContext
 D SteamHTTP()::s_CallbackCounterAndContext
 D SteamInput()::s_CallbackCounterAndContext
 D SteamInventory()::s_CallbackCounterAndContext
 D SteamMatchmaking()::s_CallbackCounterAndContext
 D SteamMatchmakingServers()::s_CallbackCounterAndContext
 D SteamMusic()::s_CallbackCounterAndContext
 D SteamMusicRemote()::s_CallbackCounterAndContext
 D SteamNetworking()::s_CallbackCounterAndContext
 D SteamParentalSettings()::s_CallbackCounterAndContext
 D SteamRemoteStorage()::s_CallbackCounterAndContext
 D SteamScreenshots()::s_CallbackCounterAndContext
 D SteamUGC()::s_CallbackCounterAndContext
 D SteamUser()::s_CallbackCounterAndContext
 D SteamUserStats()::s_CallbackCounterAndContext
 D SteamUtils()::s_CallbackCounterAndContext
 D SteamVideo()::s_CallbackCounterAndContext
 D TemplateEntityData_t::m_DataMap
 D UnreachableEnt_t::m_DataMap
 D ViewSmoothingData_t::m_DataMap
 D audioparams_t::m_DataMap
 D bool const& CDmxAttribute::GetValue<bool>() const::defaultValue
 D bool const& CDmxElement::GetValue<bool>(char const*) const::defaultValue
 D datamap_t* DataMapInit<AIExtendedSaveHeader_t>(AIExtendedSaveHeader_t*)::dataDesc
 D datamap_t* DataMapInit<AIScheduleState_t>(AIScheduleState_t*)::dataDesc
 D datamap_t* DataMapInit<AI_EnemyInfo_t>(AI_EnemyInfo_t*)::dataDesc
 D datamap_t* DataMapInit<AI_FollowNavInfo_t>(AI_FollowNavInfo_t*)::dataDesc
 D datamap_t* DataMapInit<AI_FollowParams_t>(AI_FollowParams_t*)::dataDesc
 D datamap_t* DataMapInit<AI_FreePassParams_t>(AI_FreePassParams_t*)::dataDesc
 D datamap_t* DataMapInit<AI_LeadArgs_t>(AI_LeadArgs_t*)::dataDesc
 D datamap_t* DataMapInit<AI_Response>(AI_Response*)::dataDesc
 D datamap_t* DataMapInit<AI_ResponseParams>(AI_ResponseParams*)::dataDesc
 D datamap_t* DataMapInit<AI_StandoffParams_t>(AI_StandoffParams_t*)::dataDesc
 D datamap_t* DataMapInit<AI_Waypoint_t>(AI_Waypoint_t*)::dataDesc
 D datamap_t* DataMapInit<AR2Explosion>(AR2Explosion*)::dataDesc
 D datamap_t* DataMapInit<CAISound>(CAISound*)::dataDesc
 D datamap_t* DataMapInit<CAI_AccelDecay>(CAI_AccelDecay*)::dataDesc
 D datamap_t* DataMapInit<CAI_AssaultBehavior>(CAI_AssaultBehavior*)::dataDesc
 D datamap_t* DataMapInit<CAI_AssaultGoal>(CAI_AssaultGoal*)::dataDesc
 D datamap_t* DataMapInit<CAI_BaseFlyingBot>(CAI_BaseFlyingBot*)::dataDesc
 D datamap_t* DataMapInit<CAI_ChangeHintGroup>(CAI_ChangeHintGroup*)::dataDesc
 D datamap_t* DataMapInit<CAI_ChangeTarget>(CAI_ChangeTarget*)::dataDesc
 D datamap_t* DataMapInit<CAI_DynamicLink>(CAI_DynamicLink*)::dataDesc
 D datamap_t* DataMapInit<CAI_DynamicLinkController>(CAI_DynamicLinkController*)::dataDesc
 D datamap_t* DataMapInit<CAI_Enemies>(CAI_Enemies*)::dataDesc
 D datamap_t* DataMapInit<CAI_Expresser>(CAI_Expresser*)::dataDesc
 D datamap_t* DataMapInit<CAI_FearBehavior>(CAI_FearBehavior*)::dataDesc
 D datamap_t* DataMapInit<CAI_FollowGoal>(CAI_FollowGoal*)::dataDesc
 D datamap_t* DataMapInit<CAI_FreePass>(CAI_FreePass*)::dataDesc
 D datamap_t* DataMapInit<CAI_FuncTankBehavior>(CAI_FuncTankBehavior*)::dataDesc
 D datamap_t* DataMapInit<CAI_HolsterBehavior>(CAI_HolsterBehavior*)::dataDesc
 D datamap_t* DataMapInit<CAI_InterestTarget_t>(CAI_InterestTarget_t*)::dataDesc
 D datamap_t* DataMapInit<CAI_LeadBehavior>(CAI_LeadBehavior*)::dataDesc
 D datamap_t* DataMapInit<CAI_LeadGoal_Weapon>(CAI_LeadGoal_Weapon*)::dataDesc
 D datamap_t* DataMapInit<CAI_LookTarget>(CAI_LookTarget*)::dataDesc
 D datamap_t* DataMapInit<CAI_MoveAndShootOverlay>(CAI_MoveAndShootOverlay*)::dataDesc
 D datamap_t* DataMapInit<CAI_MoveMonitor>(CAI_MoveMonitor*)::dataDesc
 D datamap_t* DataMapInit<CAI_MoveProbe>(CAI_MoveProbe*)::dataDesc
 D datamap_t* DataMapInit<CAI_Pathfinder>(CAI_Pathfinder*)::dataDesc
 D datamap_t* DataMapInit<CAI_PolicingBehavior>(CAI_PolicingBehavior*)::dataDesc
 D datamap_t* DataMapInit<CAI_ProxTester>(CAI_ProxTester*)::dataDesc
 D datamap_t* DataMapInit<CAI_RappelBehavior>(CAI_RappelBehavior*)::dataDesc
 D datamap_t* DataMapInit<CAI_ScriptConditionsElement>(CAI_ScriptConditionsElement*)::dataDesc
 D datamap_t* DataMapInit<CAI_SentenceBase>(CAI_SentenceBase*)::dataDesc
 D datamap_t* DataMapInit<CAI_ShotRegulator>(CAI_ShotRegulator*)::dataDesc
 D datamap_t* DataMapInit<CAI_SpeechFilter>(CAI_SpeechFilter*)::dataDesc
 D datamap_t* DataMapInit<CAI_Spotlight>(CAI_Spotlight*)::dataDesc
 D datamap_t* DataMapInit<CAI_StandoffBehavior>(CAI_StandoffBehavior*)::dataDesc
 D datamap_t* DataMapInit<CAI_StandoffGoal>(CAI_StandoffGoal*)::dataDesc
 D datamap_t* DataMapInit<CAI_TacticalServices>(CAI_TacticalServices*)::dataDesc
 D datamap_t* DataMapInit<CAI_TrackPather>(CAI_TrackPather*)::dataDesc
 D datamap_t* DataMapInit<CAntlionRepellant>(CAntlionRepellant*)::dataDesc
 D datamap_t* DataMapInit<CAreaPortal>(CAreaPortal*)::dataDesc
 D datamap_t* DataMapInit<CAvoidSphere>(CAvoidSphere*)::dataDesc
 D datamap_t* DataMapInit<CBaseAchievement>(CBaseAchievement*)::dataDesc
 D datamap_t* DataMapInit<CBaseDMStart>(CBaseDMStart*)::dataDesc
 D datamap_t* DataMapInit<CBaseFire>(CBaseFire*)::dataDesc
 D datamap_t* DataMapInit<CBaseFlex>(CBaseFlex*)::dataDesc
 D datamap_t* DataMapInit<CBaseHL2MPCombatWeapon>(CBaseHL2MPCombatWeapon*)::dataDesc
 D datamap_t* DataMapInit<CBaseHLCombatWeapon>(CBaseHLCombatWeapon*)::dataDesc
 D datamap_t* DataMapInit<CBaseMoveBehavior>(CBaseMoveBehavior*)::dataDesc
 D datamap_t* DataMapInit<CBaseSpriteProjectile>(CBaseSpriteProjectile*)::dataDesc
 D datamap_t* DataMapInit<CBaseToggle>(CBaseToggle*)::dataDesc
 D datamap_t* DataMapInit<CBaseVPhysicsTrigger>(CBaseVPhysicsTrigger*)::dataDesc
 D datamap_t* DataMapInit<CBeam>(CBeam*)::dataDesc
 D datamap_t* DataMapInit<CBlendingCycler>(CBlendingCycler*)::dataDesc
 D datamap_t* DataMapInit<CBlood>(CBlood*)::dataDesc
 D datamap_t* DataMapInit<CBombDropSensor>(CBombDropSensor*)::dataDesc
 D datamap_t* DataMapInit<CBoneFollower>(CBoneFollower*)::dataDesc
 D datamap_t* DataMapInit<CCitadelEnergyCore>(CCitadelEnergyCore*)::dataDesc
 D datamap_t* DataMapInit<CCollisionProperty>(CCollisionProperty*)::dataDesc
 D datamap_t* DataMapInit<CCombineDropshipContainer>(CCombineDropshipContainer*)::dataDesc
 D datamap_t* DataMapInit<CCommandPoint>(CCommandPoint*)::dataDesc
 D datamap_t* DataMapInit<CConstantForceController>(CConstantForceController*)::dataDesc
 D datamap_t* DataMapInit<CConstraintAnchor>(CConstraintAnchor*)::dataDesc
 D datamap_t* DataMapInit<CCycler>(CCycler*)::dataDesc
 D datamap_t* DataMapInit<CEntityParticleTrail>(CEntityParticleTrail*)::dataDesc
 D datamap_t* DataMapInit<CEnvAR2Explosion>(CEnvAR2Explosion*)::dataDesc
 D datamap_t* DataMapInit<CEnvBeverage>(CEnvBeverage*)::dataDesc
 D datamap_t* DataMapInit<CEnvDustPuff>(CEnvDustPuff*)::dataDesc
 D datamap_t* DataMapInit<CEnvFireSource>(CEnvFireSource*)::dataDesc
 D datamap_t* DataMapInit<CEnvHeadcrabCanisterShared>(CEnvHeadcrabCanisterShared*)::dataDesc
 D datamap_t* DataMapInit<CEnvHudHint>(CEnvHudHint*)::dataDesc
 D datamap_t* DataMapInit<CEnvMuzzleFlash>(CEnvMuzzleFlash*)::dataDesc
 D datamap_t* DataMapInit<CEnvParticleScript>(CEnvParticleScript*)::dataDesc
 D datamap_t* DataMapInit<CEnvQuadraticBeam>(CEnvQuadraticBeam*)::dataDesc
 D datamap_t* DataMapInit<CEnvScreenEffect>(CEnvScreenEffect*)::dataDesc
 D datamap_t* DataMapInit<CEnvShooter>(CEnvShooter*)::dataDesc
 D datamap_t* DataMapInit<CEnvSoundscapeProxy>(CEnvSoundscapeProxy*)::dataDesc
 D datamap_t* DataMapInit<CEnvSplash>(CEnvSplash*)::dataDesc
 D datamap_t* DataMapInit<CEnvStarfield>(CEnvStarfield*)::dataDesc
 D datamap_t* DataMapInit<CEnvViewPunch>(CEnvViewPunch*)::dataDesc
 D datamap_t* DataMapInit<CEnvZoom>(CEnvZoom*)::dataDesc
 D datamap_t* DataMapInit<CEventAction>(CEventAction*)::dataDesc
 D datamap_t* DataMapInit<CEventQueue>(CEventQueue*)::dataDesc
 D datamap_t* DataMapInit<CFailableAchievement>(CFailableAchievement*)::dataDesc
 D datamap_t* DataMapInit<CFastHeadcrab>(CFastHeadcrab*)::dataDesc
 D datamap_t* DataMapInit<CFilterClass>(CFilterClass*)::dataDesc
 D datamap_t* DataMapInit<CFilterCombineBall>(CFilterCombineBall*)::dataDesc
 D datamap_t* DataMapInit<CFilterEnemy>(CFilterEnemy*)::dataDesc
 D datamap_t* DataMapInit<CFilterMassGreater>(CFilterMassGreater*)::dataDesc
 D datamap_t* DataMapInit<CFilterMultiple>(CFilterMultiple*)::dataDesc
 D datamap_t* DataMapInit<CFilterName>(CFilterName*)::dataDesc
 D datamap_t* DataMapInit<CFireSmoke>(CFireSmoke*)::dataDesc
 D datamap_t* DataMapInit<CFireTrail>(CFireTrail*)::dataDesc
 D datamap_t* DataMapInit<CFish>(CFish*)::dataDesc
 D datamap_t* DataMapInit<CFlexCycler>(CFlexCycler*)::dataDesc
 D datamap_t* DataMapInit<CFlextalkActor>(CFlextalkActor*)::dataDesc
 D datamap_t* DataMapInit<CFourWheelServerVehicle>(CFourWheelServerVehicle*)::dataDesc
 D datamap_t* DataMapInit<CFourWheelVehiclePhysics>(CFourWheelVehiclePhysics*)::dataDesc
 D datamap_t* DataMapInit<CFuncAreaPortalBase>(CFuncAreaPortalBase*)::dataDesc
 D datamap_t* DataMapInit<CFuncAreaPortalWindow>(CFuncAreaPortalWindow*)::dataDesc
 D datamap_t* DataMapInit<CFuncBrush>(CFuncBrush*)::dataDesc
 D datamap_t* DataMapInit<CFuncConveyor>(CFuncConveyor*)::dataDesc
 D datamap_t* DataMapInit<CFuncMonitor>(CFuncMonitor*)::dataDesc
 D datamap_t* DataMapInit<CFuncOccluder>(CFuncOccluder*)::dataDesc
 D datamap_t* DataMapInit<CFuncPlatRot>(CFuncPlatRot*)::dataDesc
 D datamap_t* DataMapInit<CFuncSmokeVolume>(CFuncSmokeVolume*)::dataDesc
 D datamap_t* DataMapInit<CFuncTankAPCRocket>(CFuncTankAPCRocket*)::dataDesc
 D datamap_t* DataMapInit<CFuncTankLaser>(CFuncTankLaser*)::dataDesc
 D datamap_t* DataMapInit<CFuncTankMortar>(CFuncTankMortar*)::dataDesc
 D datamap_t* DataMapInit<CFuncTankPhysCannister>(CFuncTankPhysCannister*)::dataDesc
 D datamap_t* DataMapInit<CFuncTankPulseLaser>(CFuncTankPulseLaser*)::dataDesc
 D datamap_t* DataMapInit<CFuncTankRocket>(CFuncTankRocket*)::dataDesc
 D datamap_t* DataMapInit<CFuncTrackAuto>(CFuncTrackAuto*)::dataDesc
 D datamap_t* DataMapInit<CFuncVPhysicsClip>(CFuncVPhysicsClip*)::dataDesc
 D datamap_t* DataMapInit<CFuncVehicleClip>(CFuncVehicleClip*)::dataDesc
 D datamap_t* DataMapInit<CFuncWall>(CFuncWall*)::dataDesc
 D datamap_t* DataMapInit<CFuncWallToggle>(CFuncWallToggle*)::dataDesc
 D datamap_t* DataMapInit<CFunc_Dust>(CFunc_Dust*)::dataDesc
 D datamap_t* DataMapInit<CFunc_LOD>(CFunc_LOD*)::dataDesc
 D datamap_t* DataMapInit<CGameEnd>(CGameEnd*)::dataDesc
 D datamap_t* DataMapInit<CGameGibManager>(CGameGibManager*)::dataDesc
 D datamap_t* DataMapInit<CGamePlayerEquip>(CGamePlayerEquip*)::dataDesc
 D datamap_t* DataMapInit<CGameScore>(CGameScore*)::dataDesc
 D datamap_t* DataMapInit<CGameText>(CGameText*)::dataDesc
 D datamap_t* DataMapInit<CGenericActor>(CGenericActor*)::dataDesc
 D datamap_t* DataMapInit<CHL2MPMachineGun>(CHL2MPMachineGun*)::dataDesc
 D datamap_t* DataMapInit<CHL2PlayerLocalData>(CHL2PlayerLocalData*)::dataDesc
 D datamap_t* DataMapInit<CHLMachineGun>(CHLMachineGun*)::dataDesc
 D datamap_t* DataMapInit<CInfoAPCMissileHint>(CInfoAPCMissileHint*)::dataDesc
 D datamap_t* DataMapInit<CInfoCameraLink>(CInfoCameraLink*)::dataDesc
 D datamap_t* DataMapInit<CInfoLightingRelative>(CInfoLightingRelative*)::dataDesc
 D datamap_t* DataMapInit<CInfoOverlayAccessor>(CInfoOverlayAccessor*)::dataDesc
 D datamap_t* DataMapInit<CInfoTeleporterCountdown>(CInfoTeleporterCountdown*)::dataDesc
 D datamap_t* DataMapInit<CInstancedSceneEntity>(CInstancedSceneEntity*)::dataDesc
 D datamap_t* DataMapInit<CLaserDot>(CLaserDot*)::dataDesc
 D datamap_t* DataMapInit<CLightGlow>(CLightGlow*)::dataDesc
 D datamap_t* DataMapInit<CLogicAutosave>(CLogicAutosave*)::dataDesc
 D datamap_t* DataMapInit<CLogicCollisionPair>(CLogicCollisionPair*)::dataDesc
 D datamap_t* DataMapInit<CLogicNavigation>(CLogicNavigation*)::dataDesc
 D datamap_t* DataMapInit<CMaterialModifyControl>(CMaterialModifyControl*)::dataDesc
 D datamap_t* DataMapInit<CMessageEntity>(CMessageEntity*)::dataDesc
 D datamap_t* DataMapInit<CMotorController>(CMotorController*)::dataDesc
 D datamap_t* DataMapInit<CMovementSpeedMod>(CMovementSpeedMod*)::dataDesc
 D datamap_t* DataMapInit<CMultiDamage>(CMultiDamage*)::dataDesc
 D datamap_t* DataMapInit<CNPCMaker>(CNPCMaker*)::dataDesc
 D datamap_t* DataMapInit<CNPCSimpleTalkerExpresser>(CNPCSimpleTalkerExpresser*)::dataDesc
 D datamap_t* DataMapInit<CNPC_APCDriver>(CNPC_APCDriver*)::dataDesc
 D datamap_t* DataMapInit<CNPC_Alyx>(CNPC_Alyx*)::dataDesc
 D datamap_t* DataMapInit<CNPC_Combine>(CNPC_Combine*)::dataDesc
 D datamap_t* DataMapInit<CNPC_Crow>(CNPC_Crow*)::dataDesc
 D datamap_t* DataMapInit<CNPC_EnemyFinderCombineCannon>(CNPC_EnemyFinderCombineCannon*)::dataDesc
 D datamap_t* DataMapInit<CNPC_Fisherman>(CNPC_Fisherman*)::dataDesc
 D datamap_t* DataMapInit<CNPC_Furniture>(CNPC_Furniture*)::dataDesc
 D datamap_t* DataMapInit<CNPC_Ichthyosaur>(CNPC_Ichthyosaur*)::dataDesc
 D datamap_t* DataMapInit<CNPC_MissileDefense>(CNPC_MissileDefense*)::dataDesc
 D datamap_t* DataMapInit<CNPC_Monk>(CNPC_Monk*)::dataDesc
 D datamap_t* DataMapInit<CNPC_VehicleDriver>(CNPC_VehicleDriver*)::dataDesc
 D datamap_t* DataMapInit<CNewNPC>(CNewNPC*)::dataDesc
 D datamap_t* DataMapInit<CNodeEnt>(CNodeEnt*)::dataDesc
 D datamap_t* DataMapInit<COrnamentProp>(COrnamentProp*)::dataDesc
 D datamap_t* DataMapInit<CParticleFire>(CParticleFire*)::dataDesc
 D datamap_t* DataMapInit<CParticleLight>(CParticleLight*)::dataDesc
 D datamap_t* DataMapInit<CParticlePerformanceMonitor>(CParticlePerformanceMonitor*)::dataDesc
 D datamap_t* DataMapInit<CPassengerInfo>(CPassengerInfo*)::dataDesc
 D datamap_t* DataMapInit<CPathKeyFrame>(CPathKeyFrame*)::dataDesc
 D datamap_t* DataMapInit<CPhysHinge>(CPhysHinge*)::dataDesc
 D datamap_t* DataMapInit<CPhysLength>(CPhysLength*)::dataDesc
 D datamap_t* DataMapInit<CPhysPulley>(CPhysPulley*)::dataDesc
 D datamap_t* DataMapInit<CPhysSlideConstraint>(CPhysSlideConstraint*)::dataDesc
 D datamap_t* DataMapInit<CPhysThruster>(CPhysThruster*)::dataDesc
 D datamap_t* DataMapInit<CPhysTorque>(CPhysTorque*)::dataDesc
 D datamap_t* DataMapInit<CPhysicsEntitySolver>(CPhysicsEntitySolver*)::dataDesc
 D datamap_t* DataMapInit<CPhysicsPropMultiplayer>(CPhysicsPropMultiplayer*)::dataDesc
 D datamap_t* DataMapInit<CPhysicsShake>(CPhysicsShake*)::dataDesc
 D datamap_t* DataMapInit<CPhysicsWind>(CPhysicsWind*)::dataDesc
 D datamap_t* DataMapInit<CPhysicsWire>(CPhysicsWire*)::dataDesc
 D datamap_t* DataMapInit<CPlasma>(CPlasma*)::dataDesc
 D datamap_t* DataMapInit<CPlayerLocalData>(CPlayerLocalData*)::dataDesc
 D datamap_t* DataMapInit<CPlayerState>(CPlayerState*)::dataDesc
 D datamap_t* DataMapInit<CPointBonusMapsAccessor>(CPointBonusMapsAccessor*)::dataDesc
 D datamap_t* DataMapInit<CPointClientCommand>(CPointClientCommand*)::dataDesc
 D datamap_t* DataMapInit<CPointCombineBallLauncher>(CPointCombineBallLauncher*)::dataDesc
 D datamap_t* DataMapInit<CPointGamestatsCounter>(CPointGamestatsCounter*)::dataDesc
 D datamap_t* DataMapInit<CPointServerCommand>(CPointServerCommand*)::dataDesc
 D datamap_t* DataMapInit<CPointTeleport>(CPointTeleport*)::dataDesc
 D datamap_t* DataMapInit<CPrecipitation>(CPrecipitation*)::dataDesc
 D datamap_t* DataMapInit<CPropDoorRotating>(CPropDoorRotating*)::dataDesc
 D datamap_t* DataMapInit<CPropVehicleViewController>(CPropVehicleViewController*)::dataDesc
 D datamap_t* DataMapInit<CRagdollConstraint>(CRagdollConstraint*)::dataDesc
 D datamap_t* DataMapInit<CRagdollMagnet>(CRagdollMagnet*)::dataDesc
 D datamap_t* DataMapInit<CRagdollManager>(CRagdollManager*)::dataDesc
 D datamap_t* DataMapInit<CRandSimTimer>(CRandSimTimer*)::dataDesc
 D datamap_t* DataMapInit<CRandStopwatch>(CRandStopwatch*)::dataDesc
 D datamap_t* DataMapInit<CRollerController>(CRollerController*)::dataDesc
 D datamap_t* DataMapInit<CRopeKeyframe>(CRopeKeyframe*)::dataDesc
 D datamap_t* DataMapInit<CRotDoor>(CRotDoor*)::dataDesc
 D datamap_t* DataMapInit<CRotorWashEmitter>(CRotorWashEmitter*)::dataDesc
 D datamap_t* DataMapInit<CRotorWashShooter>(CRotorWashShooter*)::dataDesc
 D datamap_t* DataMapInit<CRuleEntity>(CRuleEntity*)::dataDesc
 D datamap_t* DataMapInit<CRulePointEntity>(CRulePointEntity*)::dataDesc
 D datamap_t* DataMapInit<CServerNetworkProperty>(CServerNetworkProperty*)::dataDesc
 D datamap_t* DataMapInit<CShadowControl>(CShadowControl*)::dataDesc
 D datamap_t* DataMapInit<CSimTimer>(CSimTimer*)::dataDesc
 D datamap_t* DataMapInit<CSimpleSimTimer>(CSimpleSimTimer*)::dataDesc
 D datamap_t* DataMapInit<CSkyCamera>(CSkyCamera*)::dataDesc
 D datamap_t* DataMapInit<CSlideshowDisplay>(CSlideshowDisplay*)::dataDesc
 D datamap_t* DataMapInit<CSmokeStack>(CSmokeStack*)::dataDesc
 D datamap_t* DataMapInit<CSmokeStackLightInfo>(CSmokeStackLightInfo*)::dataDesc
 D datamap_t* DataMapInit<CSniperTarget>(CSniperTarget*)::dataDesc
 D datamap_t* DataMapInit<CSound>(CSound*)::dataDesc
 D datamap_t* DataMapInit<CSoundEnt>(CSoundEnt*)::dataDesc
 D datamap_t* DataMapInit<CSoundEnvelope>(CSoundEnvelope*)::dataDesc
 D datamap_t* DataMapInit<CSoundPatch>(CSoundPatch*)::dataDesc
 D datamap_t* DataMapInit<CSpotlightEnd>(CSpotlightEnd*)::dataDesc
 D datamap_t* DataMapInit<CSpriteTrail>(CSpriteTrail*)::dataDesc
 D datamap_t* DataMapInit<CSteamJet>(CSteamJet*)::dataDesc
 D datamap_t* DataMapInit<CStopwatch>(CStopwatch*)::dataDesc
 D datamap_t* DataMapInit<CStopwatchBase>(CStopwatchBase*)::dataDesc
 D datamap_t* DataMapInit<CStriderMinigun>(CStriderMinigun*)::dataDesc
 D datamap_t* DataMapInit<CStripWeapons>(CStripWeapons*)::dataDesc
 D datamap_t* DataMapInit<CSun>(CSun*)::dataDesc
 D datamap_t* DataMapInit<CTakeDamageInfo>(CTakeDamageInfo*)::dataDesc
 D datamap_t* DataMapInit<CTankTargetChange>(CTankTargetChange*)::dataDesc
 D datamap_t* DataMapInit<CTargetCDAudioRep>(CTargetCDAudioRep*)::dataDesc
 D datamap_t* DataMapInit<CTargetChangeGravity>(CTargetChangeGravity*)::dataDesc
 D datamap_t* DataMapInit<CTeamplayRoundBasedRulesProxy>(CTeamplayRoundBasedRulesProxy*)::dataDesc
 D datamap_t* DataMapInit<CTemplateNPCMaker>(CTemplateNPCMaker*)::dataDesc
 D datamap_t* DataMapInit<CTextureToggle>(CTextureToggle*)::dataDesc
 D datamap_t* DataMapInit<CThrustController>(CThrustController*)::dataDesc
 D datamap_t* DataMapInit<CTriggerApplyImpulse>(CTriggerApplyImpulse*)::dataDesc
 D datamap_t* DataMapInit<CTriggerPhysicsTrap>(CTriggerPhysicsTrap*)::dataDesc
 D datamap_t* DataMapInit<CTriggerPush>(CTriggerPush*)::dataDesc
 D datamap_t* DataMapInit<CTriggerSave>(CTriggerSave*)::dataDesc
 D datamap_t* DataMapInit<CTriggerTeleport>(CTriggerTeleport*)::dataDesc
 D datamap_t* DataMapInit<CTriggerTeleportRelative>(CTriggerTeleportRelative*)::dataDesc
 D datamap_t* DataMapInit<CTriggerToggleSave>(CTriggerToggleSave*)::dataDesc
 D datamap_t* DataMapInit<CTriggerWeaponStrip>(CTriggerWeaponStrip*)::dataDesc
 D datamap_t* DataMapInit<CVGuiScreen>(CVGuiScreen*)::dataDesc
 D datamap_t* DataMapInit<CVortigauntEffectDispel>(CVortigauntEffectDispel*)::dataDesc
 D datamap_t* DataMapInit<CWC_UpdateIgnoreList>(CWC_UpdateIgnoreList*)::dataDesc
 D datamap_t* DataMapInit<CWaterLODControl>(CWaterLODControl*)::dataDesc
 D datamap_t* DataMapInit<CWeaponAnnabelle>(CWeaponAnnabelle*)::dataDesc
 D datamap_t* DataMapInit<CWeaponCycler>(CWeaponCycler*)::dataDesc
 D datamap_t* DataMapInit<CWorld>(CWorld*)::dataDesc
 D datamap_t* DataMapInit<CWorldItem>(CWorldItem*)::dataDesc
 D datamap_t* DataMapInit<CWreckage>(CWreckage*)::dataDesc
 D datamap_t* DataMapInit<CZombie>(CZombie*)::dataDesc
 D datamap_t* DataMapInit<ConceptHistory_t>(ConceptHistory_t*)::dataDesc
 D datamap_t* DataMapInit<DustTrail>(DustTrail*)::dataDesc
 D datamap_t* DataMapInit<EntityParticleTrailInfo_t>(EntityParticleTrailInfo_t*)::dataDesc
 D datamap_t* DataMapInit<FilterDamageType>(FilterDamageType*)::dataDesc
 D datamap_t* DataMapInit<FilterTeam>(FilterTeam*)::dataDesc
 D datamap_t* DataMapInit<HintNodeData>(HintNodeData*)::dataDesc
 D datamap_t* DataMapInit<LadderMove_t>(LadderMove_t*)::dataDesc
 D datamap_t* DataMapInit<ParticleSmokeGrenade>(ParticleSmokeGrenade*)::dataDesc
 D datamap_t* DataMapInit<PhysBlockHeader_t>(PhysBlockHeader_t*)::dataDesc
 D datamap_t* DataMapInit<PhysObjectHeader_t>(PhysObjectHeader_t*)::dataDesc
 D datamap_t* DataMapInit<Relationship_t>(Relationship_t*)::dataDesc
 D datamap_t* DataMapInit<Response>(Response*)::dataDesc
 D datamap_t* DataMapInit<ResponseContext_t>(ResponseContext_t*)::dataDesc
 D datamap_t* DataMapInit<ResponseGroup>(ResponseGroup*)::dataDesc
 D datamap_t* DataMapInit<RocketTrail>(RocketTrail*)::dataDesc
 D datamap_t* DataMapInit<SaveRestoreBlockHeader_t>(SaveRestoreBlockHeader_t*)::dataDesc
 D datamap_t* DataMapInit<ScriptedNPCInteraction_Phases_t>(ScriptedNPCInteraction_Phases_t*)::dataDesc
 D datamap_t* DataMapInit<ScriptedNPCInteraction_t>(ScriptedNPCInteraction_t*)::dataDesc
 D datamap_t* DataMapInit<SmokeTrail>(SmokeTrail*)::dataDesc
 D datamap_t* DataMapInit<SoundCommand_t>(SoundCommand_t*)::dataDesc
 D datamap_t* DataMapInit<SporeExplosion>(SporeExplosion*)::dataDesc
 D datamap_t* DataMapInit<SporeTrail>(SporeTrail*)::dataDesc
 D datamap_t* DataMapInit<TemplateEntityData_t>(TemplateEntityData_t*)::dataDesc
 D datamap_t* DataMapInit<UnreachableEnt_t>(UnreachableEnt_t*)::dataDesc
 D datamap_t* DataMapInit<ViewSmoothingData_t>(ViewSmoothingData_t*)::dataDesc
 D datamap_t* DataMapInit<audioparams_t>(audioparams_t*)::dataDesc
 D datamap_t* DataMapInit<entitytable_t>(entitytable_t*)::dataDesc
 D datamap_t* DataMapInit<flexsetting_t>(flexsetting_t*)::dataDesc
 D datamap_t* DataMapInit<flexsettinghdr_t>(flexsettinghdr_t*)::dataDesc
 D datamap_t* DataMapInit<flexweight_t>(flexweight_t*)::dataDesc
 D datamap_t* DataMapInit<fogparams_t>(fogparams_t*)::dataDesc
 D datamap_t* DataMapInit<fogplayerparams_t>(fogplayerparams_t*)::dataDesc
 D datamap_t* DataMapInit<game_shadowcontrol_params_t>(game_shadowcontrol_params_t*)::dataDesc
 D datamap_t* DataMapInit<globalentity_t>(globalentity_t*)::dataDesc
 D datamap_t* DataMapInit<locksound_t>(locksound_t*)::dataDesc
 D datamap_t* DataMapInit<modifiedconvars_t>(modifiedconvars_t*)::dataDesc
 D datamap_t* DataMapInit<physfollower_t>(physfollower_t*)::dataDesc
 D datamap_t* DataMapInit<sky3dparams_t>(sky3dparams_t*)::dataDesc
 D datamap_t* DataMapInit<template_t>(template_t*)::dataDesc
 D datamap_t* DataMapInit<thinkfunc_t>(thinkfunc_t*)::dataDesc
 D datamap_t* DataMapInit<vehicle_crashsound_t>(vehicle_crashsound_t*)::dataDesc
 D datamap_t* DataMapInit<vehicle_gear_t>(vehicle_gear_t*)::dataDesc
 D datamap_t* DataMapInit<washentity_t>(washentity_t*)::dataDesc
 D decalsystem
 D entitytable_t::m_DataMap
 D envAntlionGuardBark1
 D envAntlionGuardBark2
 D envAntlionGuardFastGrowl
 D envAntlionGuardGrunt
 D envAntlionGuardGrunt2
 D envAntlionGuardPain1
 D envAntlionGuardSqueeze
 D envDefaultZombieMoanVolumeFast
 D envPoisonZombieBreatheVolumeOffShort
 D envPoisonZombieMoanVolumeFast
 D envZombieMoanIgnited
 D eventFuncs
 D flexsetting_t::m_DataMap
 D flexsettinghdr_t::m_DataMap
 D flexweight_t::m_DataMap
 D fogparams_t::m_DataMap
 D fogplayerparams_t::m_DataMap
 D gAntlionGuardImpactDamageTable
 D gDefaultNPCImpactDamageTable
 D gDefaultPlayerImpactDamageTable
 D gDefaultPlayerVehicleImpactDamageTable
 D gGlassImpactDamageTable
 D gInitHUD
 D g_AI_Formations
 D g_AI_SaveRestoreBlockHandler
 D g_AchievementSaveRestoreBlockHandler
 D g_ChoreoStringPool
 D g_ConceptCategoryInfos
 D g_ConceptHistoriesSaveDataOps
 D g_ConceptInfos
 D g_DebugConnectNode1
 D g_DebugConnectNode2
 D g_EventsSaveDataOps
 D g_ItemFlags
 D g_KeyValuesErrorStack
 D g_PhysDefaultObjectParams
 D g_PhysGameTrace
 D g_ResponseSystemSaveRestoreOps
 D g_ServerGameClients
 D g_SolidSetup
 D g_StandardSendProxies
 D g_StandoffParamsByAgression
 D g_ThinkContextsSaveDataOps
 D g_VariantSaveDataOps
 D g_bCacheLegacyFlashlightStatus
 D g_bClientFlex
 D g_bMovementOptimizations
 D g_bTestMoveTypeStepSimulation
 D g_fMaxViewModelLag
 D g_flFractionScale
 D g_iGunshipEffectIndex
 D g_iSoundsToStopOnExit
 D g_nActivityListVersion
 D g_nEventListVersion
 D g_nParticle_Multiplier
 D g_pConstraintEvents
 D g_pEffects
 D g_pEntityList
 D g_pGameMovement
 D g_pGameSaveRestoreBlockSet
 D g_pModelNameLaser
 D g_pMoveData
 D g_pNotify
 D g_pParticleSystemMgr
 D g_pParticleSystemQuery
 D g_pPhysSaveRestoreManager
 D g_pPushedEntities
 D g_pResponseSystem
 D g_pServerBenchmark
 D g_pToolFrameworkServer
 D g_pVoiceGameMgrHelper
 D g_ppszGoalTypes
 D g_ppszPlayerSoundPrefixNames
 D g_ppszRandomCitizenModels
 D g_ppszRandomCombineModels
 D g_ppszTaskFailureText
 D g_pszHintDescriptions
 D g_pszMPConcepts
 D g_pszSCHED_ALERT_FACE
 D g_pszSCHED_ALERT_FACE_BESTSOUND
 D g_pszSCHED_ALERT_REACT_TO_COMBAT_SOUND
 D g_pszSCHED_ALERT_SCAN
 D g_pszSCHED_ALERT_STAND
 D g_pszSCHED_ALERT_WALK
 D g_pszSCHED_AMBUSH
 D g_pszSCHED_ARM_WEAPON
 D g_pszSCHED_BACK_AWAY_FROM_ENEMY
 D g_pszSCHED_BACK_AWAY_FROM_SAVE_POSITION
 D g_pszSCHED_BIG_FLINCH
 D g_pszSCHED_CHASE_ENEMY
 D g_pszSCHED_CHASE_ENEMY_FAILED
 D g_pszSCHED_COMBAT_FACE
 D g_pszSCHED_COMBAT_PATROL
 D g_pszSCHED_COMBAT_STAND
 D g_pszSCHED_COMBAT_SWEEP
 D g_pszSCHED_COMBAT_WALK
 D g_pszSCHED_COWER
 D g_pszSCHED_DIE
 D g_pszSCHED_DIE_RAGDOLL
 D g_pszSCHED_DISARM_WEAPON
 D g_pszSCHED_DROPSHIP_DUSTOFF
 D g_pszSCHED_DUCK_DODGE
 D g_pszSCHED_EFINDER_SEARCH
 D g_pszSCHED_ESTABLISH_LINE_OF_FIRE
 D g_pszSCHED_ESTABLISH_LINE_OF_FIRE_FALLBACK
 D g_pszSCHED_FAIL
 D g_pszSCHED_FAIL_ESTABLISH_LINE_OF_FIRE
 D g_pszSCHED_FAIL_NOSTOP
 D g_pszSCHED_FAIL_TAKE_COVER
 D g_pszSCHED_FALL_TO_GROUND
 D g_pszSCHED_FEAR_FACE
 D g_pszSCHED_FLEE_FROM_BEST_SOUND
 D g_pszSCHED_FLINCH_PHYSICS
 D g_pszSCHED_FORCED_GO
 D g_pszSCHED_FORCED_GO_RUN
 D g_pszSCHED_GET_HEALTHKIT
 D g_pszSCHED_HIDE_AND_RELOAD
 D g_pszSCHED_ICH_CHASE_ENEMY
 D g_pszSCHED_ICH_DROWN_VICTIM
 D g_pszSCHED_ICH_MELEE_ATTACK1
 D g_pszSCHED_ICH_PATROL_RUN
 D g_pszSCHED_ICH_PATROL_WALK
 D g_pszSCHED_ICH_THRASH
 D g_pszSCHED_IDLE_STAND
 D g_pszSCHED_IDLE_WALK
 D g_pszSCHED_IDLE_WANDER
 D g_pszSCHED_INTERACTION_MOVE_TO_PARTNER
 D g_pszSCHED_INTERACTION_WAIT_FOR_PARTNER
 D g_pszSCHED_INVESTIGATE_SOUND
 D g_pszSCHED_MELEE_ATTACK1
 D g_pszSCHED_MELEE_ATTACK2
 D g_pszSCHED_MOVE_AWAY
 D g_pszSCHED_MOVE_AWAY_END
 D g_pszSCHED_MOVE_AWAY_FAIL
 D g_pszSCHED_MOVE_AWAY_FROM_ENEMY
 D g_pszSCHED_MOVE_TO_WEAPON_RANGE
 D g_pszSCHED_NEW_WEAPON
 D g_pszSCHED_NEW_WEAPON_CHEAT
 D g_pszSCHED_NPC_FREEZE
 D g_pszSCHED_PATROL_RUN
 D g_pszSCHED_PATROL_WALK
 D g_pszSCHED_PRE_FAIL_ESTABLISH_LINE_OF_FIRE
 D g_pszSCHED_RANGE_ATTACK1
 D g_pszSCHED_RANGE_ATTACK2
 D g_pszSCHED_RELOAD
 D g_pszSCHED_RUN_FROM_ENEMY
 D g_pszSCHED_RUN_FROM_ENEMY_FALLBACK
 D g_pszSCHED_RUN_FROM_ENEMY_MOB
 D g_pszSCHED_RUN_RANDOM
 D g_pszSCHED_SCENE_GENERIC
 D g_pszSCHED_SCRIPTED_CUSTOM_MOVE
 D g_pszSCHED_SCRIPTED_FACE
 D g_pszSCHED_SCRIPTED_RUN
 D g_pszSCHED_SCRIPTED_WAIT
 D g_pszSCHED_SCRIPTED_WALK
 D g_pszSCHED_SHOOT_ENEMY_COVER
 D g_pszSCHED_SLEEP
 D g_pszSCHED_SMALL_FLINCH
 D g_pszSCHED_SPECIAL_ATTACK1
 D g_pszSCHED_SPECIAL_ATTACK2
 D g_pszSCHED_STANDOFF
 D g_pszSCHED_SWITCH_TO_PENDING_WEAPON
 D g_pszSCHED_TAKE_COVER_FROM_BEST_SOUND
 D g_pszSCHED_TAKE_COVER_FROM_ENEMY
 D g_pszSCHED_TAKE_COVER_FROM_ORIGIN
 D g_pszSCHED_TARGET_CHASE
 D g_pszSCHED_TARGET_FACE
 D g_pszSCHED_VICTORY_DANCE
 D g_pszSCHED_WAIT_FOR_SCRIPT
 D g_pszSCHED_WAIT_FOR_SPEAK_FINISH
 D g_pszSCHED_WAKE_ANGRY
 D game_shadowcontrol_params_t::m_DataMap
 D gamestats
 D globalentity_t::m_DataMap
 D guard variable for AllocTempVector()::s_nIndex
 D guard variable for AllocTempVector()::s_vecTemp
 D guard variable for CSoundEmitterSystem::PrecacheScriptSound(char const*)::s_PrecacheScriptSoundFailures
 D guard variable for CUtlRBTree<AI_CriteriaSet::CritEntry_t, short, bool (*)(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&), CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short> >::Links(short) const::s_Sentinel
 D guard variable for CUtlRBTree<CAI_BaseNPC*, unsigned short, bool (*)(CAI_BaseNPC* const&, CAI_BaseNPC* const&), CUtlMemory<UtlRBTreeNode_t<CAI_BaseNPC*, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CBaseEntity*, unsigned short, bool (*)(CBaseEntity* const&, CBaseEntity* const&), CUtlMemory<UtlRBTreeNode_t<CBaseEntity*, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CBaseFlex::FS_LocalToGlobal_t, unsigned short, bool (*)(CBaseFlex::FS_LocalToGlobal_t const&, CBaseFlex::FS_LocalToGlobal_t const&), CUtlMemory<UtlRBTreeNode_t<CBaseFlex::FS_LocalToGlobal_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, bool (*)(CBreakModelsPrecached::breakable_precache_t const&, CBreakModelsPrecached::breakable_precache_t const&), CUtlMemory<UtlRBTreeNode_t<CBreakModelsPrecached::breakable_precache_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CChoreoEvent*, unsigned short, bool (*)(CChoreoEvent* const&, CChoreoEvent* const&), CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CChoreoScene::ActiveList, int, bool (*)(CChoreoScene::ActiveList const&, CChoreoScene::ActiveList const&), CUtlMemory<UtlRBTreeNode_t<CChoreoScene::ActiveList, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CCombatCharVisCache::VisCacheEntry_t, unsigned short, CCombatCharVisCache::CVisCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<CCombatCharVisCache::VisCacheEntry_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CHLTVGameEvent, unsigned short, bool (*)(CHLTVGameEvent const&, CHLTVGameEvent const&), CUtlMemory<UtlRBTreeNode_t<CHLTVGameEvent, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, bool (*)(CSceneEntity::SpeakEventSound_t const&, CSceneEntity::SpeakEventSound_t const&), CUtlMemory<UtlRBTreeNode_t<CSceneEntity::SpeakEventSound_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short, bool (*)(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&, CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&), CUtlMemory<UtlRBTreeNode_t<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char>, unsigned char> >::Links(unsigned char) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short, CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short, CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short, CUtlMap<CSteamID, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int, CUtlMap<char const*, CActivityRemapCache, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int, CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int, CUtlMap<char const*, CInstancedResponseSystem*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short, CUtlMap<char const*, CResponseSystem::Enumeration, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short>, short> >::Links(short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, CUserMessage*, int>::Node_t, int, CUtlMap<char const*, CUserMessage*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUserMessage*, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int, CUtlMap<char const*, ConceptHistory_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, ConceptInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, Criteria, short>::Node_t, short, CUtlMap<char const*, Criteria, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Criteria, short>::Node_t, short>, short> >::Links(short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, EventGroup, int>::Node_t, int, CUtlMap<char const*, EventGroup, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EventGroup, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, IEntityFactory*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, ResponseGroup, short>::Node_t, short, CUtlMap<char const*, ResponseGroup, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ResponseGroup, short>::Node_t, short>, short> >::Links(short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, Rule, short>::Node_t, short, CUtlMap<char const*, Rule, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Rule, short>::Node_t, short>, short> >::Links(short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, float, int>::Node_t, int, CUtlMap<char const*, float, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, float, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, int, int>::Node_t, int, CUtlMap<char const*, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<int, CAIHintVector, unsigned short>::Node_t, unsigned short, CUtlMap<int, CAIHintVector, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CAIHintVector, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<int, CBaseAchievement*, unsigned short>::Node_t, unsigned short, CUtlMap<int, CBaseAchievement*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CBaseAchievement*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t, unsigned short, CUtlMap<int, CTeamControlPoint*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<int, int, unsigned short>::Node_t, unsigned short, CUtlMap<int, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char, CUtlMap<string_t, CSimpleSimTimer, char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char>, char> >::Links(char) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<unsigned int, Activity, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, Activity, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, Activity, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlString, unsigned short, bool (*)(CUtlString const&, CUtlString const&), CUtlMemory<UtlRBTreeNode_t<CUtlString, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<NearbyDismount_t, int, bool (*)(NearbyDismount_t const&, NearbyDismount_t const&), CUtlMemory<UtlRBTreeNode_t<NearbyDismount_t, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<ThinkSync, unsigned short, bool (*)(ThinkSync const&, ThinkSync const&), CUtlMemory<UtlRBTreeNode_t<ThinkSync, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<VisibilityCacheEntry_t, unsigned short, CVisibilityCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<VisibilityCacheEntry_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<int, unsigned short, bool (*)(int const&, int const&), CUtlMemory<UtlRBTreeNode_t<int, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlString const& CDmxAttribute::GetValue<CUtlString>() const::defaultValue
 D guard variable for CUtlString const& CDmxElement::GetValue<CUtlString>(char const*) const::defaultValue
 D guard variable for CUtlVector<CDmxElement*, CUtlMemory<CDmxElement*, int> > const& CDmxAttribute::GetArray<CDmxElement*>() const::defaultArray
 D guard variable for CUtlVector<CDmxElement*, CUtlMemory<CDmxElement*, int> > const& CDmxElement::GetArray<CDmxElement*>(char const*) const::defaultValue
 D guard variable for CWeaponAR2::GetBulletSpread()::cone
 D guard variable for CWeaponAnnabelle::GetBulletSpread()::cone
 D guard variable for CWeaponPistol::GetBulletSpread()::cone
 D guard variable for CWeaponSMG1::GetBulletSpread()::cone
 D guard variable for CWeaponShotgun::GetBulletSpread()::cone
 D guard variable for ISaveRestoreOps* CUtlMapDataopsInstantiator<2, 10>::GetDataOps<CUtlMap<string_t, CSimpleSimTimer, char> >(CUtlMap<string_t, CSimpleSimTimer, char>*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CAI_InterestTarget>(CAI_InterestTarget*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<AISquadEnemyInfo_t, CUtlMemory<AISquadEnemyInfo_t, int> > >(CUtlVector<AISquadEnemyInfo_t, CUtlMemory<AISquadEnemyInfo_t, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<AI_Waypoint_t, CUtlMemory<AI_Waypoint_t, int> > >(CUtlVector<AI_Waypoint_t, CUtlMemory<AI_Waypoint_t, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<CAI_ScriptConditionsElement, CUtlMemory<CAI_ScriptConditionsElement, int> > >(CUtlVector<CAI_ScriptConditionsElement, CUtlMemory<CAI_ScriptConditionsElement, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer, int> > >(CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<CPassengerInfo, CUtlMemory<CPassengerInfo, int> > >(CUtlVector<CPassengerInfo, CUtlMemory<CPassengerInfo, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<Relationship_t, CUtlMemory<Relationship_t, int> > >(CUtlVector<Relationship_t, CUtlMemory<Relationship_t, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<ResponseContext_t, CUtlMemory<ResponseContext_t, int> > >(CUtlVector<ResponseContext_t, CUtlMemory<ResponseContext_t, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<SaveRestoreBlockHeader_t, CUtlMemory<SaveRestoreBlockHeader_t, int> > >(CUtlVector<SaveRestoreBlockHeader_t, CUtlMemory<SaveRestoreBlockHeader_t, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<ScriptedNPCInteraction_t, CUtlMemory<ScriptedNPCInteraction_t, int> > >(CUtlVector<ScriptedNPCInteraction_t, CUtlMemory<ScriptedNPCInteraction_t, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<UnreachableEnt_t, CUtlMemory<UnreachableEnt_t, int> > >(CUtlVector<UnreachableEnt_t, CUtlMemory<UnreachableEnt_t, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<globalentity_t, CUtlMemory<globalentity_t, int> > >(CUtlVector<globalentity_t, CUtlMemory<globalentity_t, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<magnetted_objects_t, CUtlMemory<magnetted_objects_t, int> > >(CUtlVector<magnetted_objects_t, CUtlMemory<magnetted_objects_t, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<modifiedconvars_t, CUtlMemory<modifiedconvars_t, int> > >(CUtlVector<modifiedconvars_t, CUtlMemory<modifiedconvars_t, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<physfollower_t, CUtlMemory<physfollower_t, int> > >(CUtlVector<physfollower_t, CUtlMemory<physfollower_t, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<template_t, CUtlMemory<template_t, int> > >(CUtlVector<template_t, CUtlMemory<template_t, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<thinkfunc_t, CUtlMemory<thinkfunc_t, int> > >(CUtlVector<thinkfunc_t, CUtlMemory<thinkfunc_t, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<vehicle_crashsound_t, CUtlMemory<vehicle_crashsound_t, int> > >(CUtlVector<vehicle_crashsound_t, CUtlMemory<vehicle_crashsound_t, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<vehicle_gear_t, CUtlMemory<vehicle_gear_t, int> > >(CUtlVector<vehicle_gear_t, CUtlMemory<vehicle_gear_t, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<washentity_t, CUtlMemory<washentity_t, int> > >(CUtlVector<washentity_t, CUtlMemory<washentity_t, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<12>::GetDataOps<CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> > >(CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CAI_BaseNPC>, CUtlMemory<CHandle<CAI_BaseNPC>, int> > >(CUtlVector<CHandle<CAI_BaseNPC>, CUtlMemory<CHandle<CAI_BaseNPC>, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CBaseCombatWeapon>, CUtlMemory<CHandle<CBaseCombatWeapon>, int> > >(CUtlVector<CHandle<CBaseCombatWeapon>, CUtlMemory<CHandle<CBaseCombatWeapon>, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity>, int> > >(CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity>, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CBaseFlex>, CUtlMemory<CHandle<CBaseFlex>, int> > >(CUtlVector<CHandle<CBaseFlex>, CUtlMemory<CHandle<CBaseFlex>, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer>, int> > >(CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer>, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CFish>, CUtlMemory<CHandle<CFish>, int> > >(CUtlVector<CHandle<CFish>, CUtlMemory<CHandle<CFish>, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CNPC_Antlion>, CUtlMemory<CHandle<CNPC_Antlion>, int> > >(CUtlVector<CHandle<CNPC_Antlion>, CUtlMemory<CHandle<CNPC_Antlion>, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity>, int> > >(CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity>, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CSceneListManager>, CUtlMemory<CHandle<CSceneListManager>, int> > >(CUtlVector<CHandle<CSceneListManager>, CUtlMemory<CHandle<CSceneListManager>, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CVGuiScreen>, CUtlMemory<CHandle<CVGuiScreen>, int> > >(CUtlVector<CHandle<CVGuiScreen>, CUtlMemory<CHandle<CVGuiScreen>, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<16>::GetDataOps<CUtlVector<float, CUtlMemory<float, int> > >(CUtlVector<float, CUtlMemory<float, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<5>::GetDataOps<CUtlVector<int, CUtlMemory<int, int> > >(CUtlVector<int, CUtlMemory<int, int> >*)::ops
 D guard variable for ISaveRestoreOps* GetBitstringDataOps<CBitVec<32> >(CBitVec<32>*)::ops
 D guard variable for variant_t::Entity() const::hNull
 D hull
 D int ServerClassInit<DT_AI_BaseNPC::ignored>(DT_AI_BaseNPC::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_AR2Explosion::ignored>(DT_AR2Explosion::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_AlyxEmpEffect::ignored>(DT_AlyxEmpEffect::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_AnimTimeMustBeFirst::ignored>(DT_AnimTimeMustBeFirst::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Animationlayer::ignored>(DT_Animationlayer::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BCCLocalPlayerExclusive::ignored>(DT_BCCLocalPlayerExclusive::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Barnacle::ignored>(DT_Barnacle::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseAnimating::ignored>(DT_BaseAnimating::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseAnimatingOverlay::ignored>(DT_BaseAnimatingOverlay::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseBeam::ignored>(DT_BaseBeam::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseCombatCharacter::ignored>(DT_BaseCombatCharacter::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseCombatWeapon::ignored>(DT_BaseCombatWeapon::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseDoor::ignored>(DT_BaseDoor::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseEntity::ignored>(DT_BaseEntity::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseFlex::ignored>(DT_BaseFlex::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseGrenade::ignored>(DT_BaseGrenade::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseHL2MPBludgeonWeapon::ignored>(DT_BaseHL2MPBludgeonWeapon::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseHL2MPCombatWeapon::ignored>(DT_BaseHL2MPCombatWeapon::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseHLBludgeonWeapon::ignored>(DT_BaseHLBludgeonWeapon::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseHLCombatWeapon::ignored>(DT_BaseHLCombatWeapon::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseHelicopter::ignored>(DT_BaseHelicopter::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseParticleEntity::ignored>(DT_BaseParticleEntity::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BasePlayer::ignored>(DT_BasePlayer::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseProjectile::ignored>(DT_BaseProjectile::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BasePropDoor::ignored>(DT_BasePropDoor::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseTeamObjectiveResource::ignored>(DT_BaseTeamObjectiveResource::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseTempEntity::ignored>(DT_BaseTempEntity::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseViewModel::ignored>(DT_BaseViewModel::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Beam::ignored>(DT_Beam::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BeamPredictableId::ignored>(DT_BeamPredictableId::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BoneFollower::ignored>(DT_BoneFollower::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BreakableProp::ignored>(DT_BreakableProp::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BreakableSurface::ignored>(DT_BreakableSurface::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_CFish::ignored>(DT_CFish::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_CitadelEnergyCore::ignored>(DT_CitadelEnergyCore::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_CollisionProperty::ignored>(DT_CollisionProperty::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_ColorCorrection::ignored>(DT_ColorCorrection::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_ColorCorrectionVolume::ignored>(DT_ColorCorrectionVolume::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_CombineGunship::ignored>(DT_CombineGunship::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Corpse::ignored>(DT_Corpse::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_CrossbowBolt::ignored>(DT_CrossbowBolt::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_DetailController::ignored>(DT_DetailController::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_DustTrail::ignored>(DT_DustTrail::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_DynamicLight::ignored>(DT_DynamicLight::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_DynamicProp::ignored>(DT_DynamicProp::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_EffectData::ignored>(DT_EffectData::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Embers::ignored>(DT_Embers::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_EntityDissolve::ignored>(DT_EntityDissolve::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_EntityFlame::ignored>(DT_EntityFlame::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_EntityParticleTrail::ignored>(DT_EntityParticleTrail::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_EntityParticleTrailInfo::ignored>(DT_EntityParticleTrailInfo::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_EnvHeadcrabCanister::ignored>(DT_EnvHeadcrabCanister::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_EnvHeadcrabCanisterShared::ignored>(DT_EnvHeadcrabCanisterShared::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_EnvParticleScript::ignored>(DT_EnvParticleScript::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_EnvProjectedTexture::ignored>(DT_EnvProjectedTexture::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_EnvScreenEffect::ignored>(DT_EnvScreenEffect::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_EnvScreenOverlay::ignored>(DT_EnvScreenOverlay::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_EnvStarfield::ignored>(DT_EnvStarfield::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_EnvTonemapController::ignored>(DT_EnvTonemapController::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_EnvWind::ignored>(DT_EnvWind::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_EnvWindShared::ignored>(DT_EnvWindShared::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_FireSmoke::ignored>(DT_FireSmoke::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_FireTrail::ignored>(DT_FireTrail::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Flare::ignored>(DT_Flare::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_FogController::ignored>(DT_FogController::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_FuncAreaPortalWindow::ignored>(DT_FuncAreaPortalWindow::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_FuncConveyor::ignored>(DT_FuncConveyor::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_FuncLadder::ignored>(DT_FuncLadder::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_FuncMonitor::ignored>(DT_FuncMonitor::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_FuncOccluder::ignored>(DT_FuncOccluder::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_FuncReflectiveGlass::ignored>(DT_FuncReflectiveGlass::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_FuncRotating::ignored>(DT_FuncRotating::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_FuncSmokeVolume::ignored>(DT_FuncSmokeVolume::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_FuncTrackTrain::ignored>(DT_FuncTrackTrain::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Func_Dust::ignored>(DT_Func_Dust::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Func_LOD::ignored>(DT_Func_LOD::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_GameRulesProxy::ignored>(DT_GameRulesProxy::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_HL2GameRules::ignored>(DT_HL2GameRules::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_HL2Local::ignored>(DT_HL2Local::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_HL2MPGameRulesProxy::ignored>(DT_HL2MPGameRulesProxy::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_HL2MPMachineGun::ignored>(DT_HL2MPMachineGun::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_HL2MPRagdoll::ignored>(DT_HL2MPRagdoll::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_HL2MPRules::ignored>(DT_HL2MPRules::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_HL2MP_Player::ignored>(DT_HL2MP_Player::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_HL2_Player::ignored>(DT_HL2_Player::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_HLMachineGun::ignored>(DT_HLMachineGun::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_HLSelectFireMachineGun::ignored>(DT_HLSelectFireMachineGun::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_HalfLife2Proxy::ignored>(DT_HalfLife2Proxy::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_HandleTest::ignored>(DT_HandleTest::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_InfoLadderDismount::ignored>(DT_InfoLadderDismount::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_InfoLightingRelative::ignored>(DT_InfoLightingRelative::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_InfoOverlayAccessor::ignored>(DT_InfoOverlayAccessor::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_InfoTeleporterCountdown::ignored>(DT_InfoTeleporterCountdown::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_LaserDot::ignored>(DT_LaserDot::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_LightGlow::ignored>(DT_LightGlow::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Local::ignored>(DT_Local::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_LocalActiveWeaponData::ignored>(DT_LocalActiveWeaponData::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_LocalPlayerExclusive::ignored>(DT_LocalPlayerExclusive::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_LocalWeaponData::ignored>(DT_LocalWeaponData::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_MaterialModifyControl::ignored>(DT_MaterialModifyControl::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_MortarShell::ignored>(DT_MortarShell::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_MovieExplosion::ignored>(DT_MovieExplosion::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_NPC_AntlionGuard::ignored>(DT_NPC_AntlionGuard::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_NPC_Barney::ignored>(DT_NPC_Barney::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_NPC_Manhack::ignored>(DT_NPC_Manhack::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_NPC_Strider::ignored>(DT_NPC_Strider::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_NPC_Vortigaunt::ignored>(DT_NPC_Vortigaunt::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_OverlayVars::ignored>(DT_OverlayVars::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_ParticleFire::ignored>(DT_ParticleFire::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_ParticlePerformanceMonitor::ignored>(DT_ParticlePerformanceMonitor::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_ParticleSmokeGrenade::ignored>(DT_ParticleSmokeGrenade::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_ParticleSystem::ignored>(DT_ParticleSystem::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_PhysBox::ignored>(DT_PhysBox::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_PhysBoxMultiplayer::ignored>(DT_PhysBoxMultiplayer::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_PhysMagnet::ignored>(DT_PhysMagnet::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_PhysicsProp::ignored>(DT_PhysicsProp::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_PhysicsPropMultiplayer::ignored>(DT_PhysicsPropMultiplayer::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Plasma::ignored>(DT_Plasma::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_PlayerResource::ignored>(DT_PlayerResource::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_PlayerState::ignored>(DT_PlayerState::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_PointCamera::ignored>(DT_PointCamera::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_PointCommentaryNode::ignored>(DT_PointCommentaryNode::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_PoseController::ignored>(DT_PoseController::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Precipitation::ignored>(DT_Precipitation::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_PredictableId::ignored>(DT_PredictableId::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_PredictedViewModel::ignored>(DT_PredictedViewModel::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_PropAirboat::ignored>(DT_PropAirboat::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_PropCombineBall::ignored>(DT_PropCombineBall::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_PropCrane::ignored>(DT_PropCrane::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_PropVehicleDriveable::ignored>(DT_PropVehicleDriveable::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_PropVehiclePrisonerPod::ignored>(DT_PropVehiclePrisonerPod::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_ProxyToggle::ignored>(DT_ProxyToggle::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_ProxyToggle_ProxiedData::ignored>(DT_ProxyToggle_ProxiedData::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_QuadraticBeam::ignored>(DT_QuadraticBeam::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Ragdoll::ignored>(DT_Ragdoll::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_RagdollManager::ignored>(DT_RagdollManager::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Ragdoll_Attached::ignored>(DT_Ragdoll_Attached::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_RocketTrail::ignored>(DT_RocketTrail::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_RollerMine::ignored>(DT_RollerMine::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_RopeKeyframe::ignored>(DT_RopeKeyframe::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_RotorWashEmitter::ignored>(DT_RotorWashEmitter::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_SceneEntity::ignored>(DT_SceneEntity::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_ScriptIntro::ignored>(DT_ScriptIntro::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_ServerAnimationData::ignored>(DT_ServerAnimationData::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_ShadowControl::ignored>(DT_ShadowControl::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_SlideshowDisplay::ignored>(DT_SlideshowDisplay::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_SmokeStack::ignored>(DT_SmokeStack::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_SmokeTrail::ignored>(DT_SmokeTrail::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_SporeExplosion::ignored>(DT_SporeExplosion::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_SporeTrail::ignored>(DT_SporeTrail::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_SpotlightEnd::ignored>(DT_SpotlightEnd::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Sprite::ignored>(DT_Sprite::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_SpriteOriented::ignored>(DT_SpriteOriented::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_SpriteTrail::ignored>(DT_SpriteTrail::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_SteamJet::ignored>(DT_SteamJet::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Sun::ignored>(DT_Sun::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEAntlionDust::ignored>(DT_TEAntlionDust::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEArmorRicochet::ignored>(DT_TEArmorRicochet::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEBSPDecal::ignored>(DT_TEBSPDecal::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEBeamEntPoint::ignored>(DT_TEBeamEntPoint::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEBeamEnts::ignored>(DT_TEBeamEnts::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEBeamFollow::ignored>(DT_TEBeamFollow::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEBeamLaser::ignored>(DT_TEBeamLaser::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEBeamPoints::ignored>(DT_TEBeamPoints::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEBeamRing::ignored>(DT_TEBeamRing::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEBeamRingPoint::ignored>(DT_TEBeamRingPoint::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEBeamSpline::ignored>(DT_TEBeamSpline::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEBloodSprite::ignored>(DT_TEBloodSprite::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEBloodStream::ignored>(DT_TEBloodStream::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEBreakModel::ignored>(DT_TEBreakModel::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEBubbleTrail::ignored>(DT_TEBubbleTrail::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEBubbles::ignored>(DT_TEBubbles::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEClientProjectile::ignored>(DT_TEClientProjectile::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEConcussiveExplosion::ignored>(DT_TEConcussiveExplosion::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEDecal::ignored>(DT_TEDecal::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEDust::ignored>(DT_TEDust::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEDynamicLight::ignored>(DT_TEDynamicLight::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEEffectDispatch::ignored>(DT_TEEffectDispatch::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEEnergySplash::ignored>(DT_TEEnergySplash::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEExplosion::ignored>(DT_TEExplosion::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEFizz::ignored>(DT_TEFizz::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEFootprintDecal::ignored>(DT_TEFootprintDecal::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEGaussExplosion::ignored>(DT_TEGaussExplosion::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEGlowSprite::ignored>(DT_TEGlowSprite::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEHL2MPFireBullets::ignored>(DT_TEHL2MPFireBullets::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEImpact::ignored>(DT_TEImpact::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEKillPlayerAttachments::ignored>(DT_TEKillPlayerAttachments::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TELargeFunnel::ignored>(DT_TELargeFunnel::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEMetalSparks::ignored>(DT_TEMetalSparks::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEMuzzleFlash::ignored>(DT_TEMuzzleFlash::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEParticleSystem::ignored>(DT_TEParticleSystem::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEPhysicsProp::ignored>(DT_TEPhysicsProp::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEPlayerDecal::ignored>(DT_TEPlayerDecal::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEProjectedDecal::ignored>(DT_TEProjectedDecal::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEShatterSurface::ignored>(DT_TEShatterSurface::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEShowLine::ignored>(DT_TEShowLine::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TESmoke::ignored>(DT_TESmoke::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TESparks::ignored>(DT_TESparks::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TESprite::ignored>(DT_TESprite::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TESpriteSpray::ignored>(DT_TESpriteSpray::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEWorldDecal::ignored>(DT_TEWorldDecal::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Team::ignored>(DT_Team::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TeamRoundTimer::ignored>(DT_TeamRoundTimer::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TeamTrainWatcher::ignored>(DT_TeamTrainWatcher::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TeamplayRoundBasedRules::ignored>(DT_TeamplayRoundBasedRules::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TeamplayRoundBasedRulesProxy::ignored>(DT_TeamplayRoundBasedRulesProxy::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Tesla::ignored>(DT_Tesla::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TestTraceline::ignored>(DT_TestTraceline::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_VGuiScreen::ignored>(DT_VGuiScreen::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_VortigauntChargeToken::ignored>(DT_VortigauntChargeToken::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_VortigauntEffectDispel::ignored>(DT_VortigauntEffectDispel::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_VoteController::ignored>(DT_VoteController::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WORLD::ignored>(DT_WORLD::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WaterBullet::ignored>(DT_WaterBullet::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WaterLODControl::ignored>(DT_WaterLODControl::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Weapon357::ignored>(DT_Weapon357::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WeaponAR2::ignored>(DT_WeaponAR2::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WeaponAnnabelle::ignored>(DT_WeaponAnnabelle::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WeaponBugBait::ignored>(DT_WeaponBugBait::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WeaponCrossbow::ignored>(DT_WeaponCrossbow::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WeaponCrowbar::ignored>(DT_WeaponCrowbar::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WeaponCubemap::ignored>(DT_WeaponCubemap::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WeaponCycler::ignored>(DT_WeaponCycler::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WeaponFrag::ignored>(DT_WeaponFrag::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WeaponHL2MPBase::ignored>(DT_WeaponHL2MPBase::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WeaponPhysCannon::ignored>(DT_WeaponPhysCannon::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WeaponPistol::ignored>(DT_WeaponPistol::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WeaponRPG::ignored>(DT_WeaponRPG::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WeaponSMG1::ignored>(DT_WeaponSMG1::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WeaponShotgun::ignored>(DT_WeaponShotgun::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WeaponStunStick::ignored>(DT_WeaponStunStick::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Weapon_SLAM::ignored>(DT_Weapon_SLAM::ignored*)::g_pSendTableName
 D k_flMaxEntityEulerAngle
 D k_flMaxEntityPosCoord
 D k_flMaxEntitySpeed
 D k_flMaxEntitySpinRate
 D lagcompensation
 D locksound_t::m_DataMap
 D m_nDebugOverlayIndex
 D magnetted_objects_t::m_DataMap
 D modifiedconvars_t::m_DataMap
 D pFGDPropData
 D pSoundStateNames
 D pWeaponSoundCategories
 D pfFastCos
 D pfFastSinCos
 D pfInvRSquared
 D pfRSqrt
 D pfRSqrtFast
 D pfSqrt
 D pfVectorNormalize
 D pfVectorNormalizeFast
 D physfollower_t::m_DataMap
 D physgametrace
 D predef_flexcontroller_names
 D predef_flexcontroller_values
 D pszAntlionGibs_Medium
 D pszAntlionGibs_Small
 D pszAntlionGibs_Unique
 D pszItemCrateModelName
 D pszMineStateNames
 D responseSystemSaveRestoreOps
 D rgdpvpreset
 D sAllowPointServerCommand
 D sPropdataInteractionSections
 D sTeamNames
 D s_ElementNames
 D s_PluginCheck
 D s_iImpactEffectTexture
 D s_nExplosionTexture
 D s_pDebrisContext
 D s_pFadeOutContext
 D sky3dparams_t::m_DataMap
 D steamapicontext
 D steamgameserverapicontext
 D szExpressionTypes
 D te
 D template_t::m_DataMap
 D thinkcontextFuncs
 D thinkfunc_t::m_DataMap
 D typeinfo for AR2Explosion
 D typeinfo for CAISound
 D typeinfo for CAI_ActBusyBehavior
 D typeinfo for CAI_ActBusyGoal
 D typeinfo for CAI_ActBusyQueueGoal
 D typeinfo for CAI_AllyManager
 D typeinfo for CAI_AllySpeechManager
 D typeinfo for CAI_AntlionFollowBehavior
 D typeinfo for CAI_AssaultBehavior
 D typeinfo for CAI_AssaultGoal
 D typeinfo for CAI_BaseActor
 D typeinfo for CAI_BaseHumanoid
 D typeinfo for CAI_BaseNPC
 D typeinfo for CAI_BasePhysicsFlyingBot
 D typeinfo for CAI_BattleLine
 D typeinfo for CAI_Behavior<CAI_BaseNPC, 100000>
 D typeinfo for CAI_BehaviorBase
 D typeinfo for CAI_BehaviorHost<CAI_BaseNPC>
 D typeinfo for CAI_BehaviorHost<CAI_BlendedNPC>
 D typeinfo for CAI_BlendedMotor
 D typeinfo for CAI_BlendedNPC
 D typeinfo for CAI_BlendingHost<CAI_BaseNPC>
 D typeinfo for CAI_BlendingHost<CAI_BehaviorHost<CAI_BaseNPC> >
 D typeinfo for CAI_BlendingHost<CAI_BehaviorHost<CAI_BlendedNPC> >
 D typeinfo for CAI_BlendingHost<CNPC_BaseZombie>
 D typeinfo for CAI_ChangeHintGroup
 D typeinfo for CAI_ChangeTarget
 D typeinfo for CAI_Component
 D typeinfo for CAI_ComponentWithOuter<CAI_BaseNPC, CAI_BehaviorBase>
 D typeinfo for CAI_ComponentWithOuter<CNPC_Combine, CAI_StandoffBehavior>
 D typeinfo for CAI_ComponentWithOuter<CNPC_Strider, CAI_Navigator>
 D typeinfo for CAI_DefMovementSink
 D typeinfo for CAI_DynamicLink
 D typeinfo for CAI_DynamicLinkController
 D typeinfo for CAI_EnemiesListSaveRestoreOps
 D typeinfo for CAI_Expresser
 D typeinfo for CAI_ExpresserHost<CAI_BaseHumanoid>
 D typeinfo for CAI_ExpresserHost<CBasePlayer>
 D typeinfo for CAI_ExpresserSink
 D typeinfo for CAI_FollowBehavior
 D typeinfo for CAI_FollowGoal
 D typeinfo for CAI_FreePass
 D typeinfo for CAI_FuncTankBehavior
 D typeinfo for CAI_GoalEntity
 D typeinfo for CAI_Hint
 D typeinfo for CAI_LeadBehavior
 D typeinfo for CAI_LeadBehaviorHandler
 D typeinfo for CAI_LeadGoal
 D typeinfo for CAI_LeadGoal_Weapon
 D typeinfo for CAI_LocalNavigator
 D typeinfo for CAI_MappedActivityBehavior_Temporary
 D typeinfo for CAI_Motor
 D typeinfo for CAI_MoveAndShootOverlay
 D typeinfo for CAI_MoveProbe
 D typeinfo for CAI_NavInHintGroupFilter
 D typeinfo for CAI_Navigator
 D typeinfo for CAI_Network
 D typeinfo for CAI_NetworkBuildHelper
 D typeinfo for CAI_NetworkManager
 D typeinfo for CAI_Pathfinder
 D typeinfo for CAI_PlayerAlly
 D typeinfo for CAI_PoliceGoal
 D typeinfo for CAI_PolicingBehavior
 D typeinfo for CAI_ProxyMovementSink
 D typeinfo for CAI_RadialLinkController
 D typeinfo for CAI_RappelBehavior
 D typeinfo for CAI_Relationship
 D typeinfo for CAI_SaveRestoreBlockHandler
 D typeinfo for CAI_ScriptConditions
 D typeinfo for CAI_ScriptedSchedule
 D typeinfo for CAI_ScriptedSentence
 D typeinfo for CAI_ScriptedSequence
 D typeinfo for CAI_SensedObjectsManager
 D typeinfo for CAI_Senses
 D typeinfo for CAI_Sentence<CNPC_Combine>
 D typeinfo for CAI_Sentence<CNPC_MetroPolice>
 D typeinfo for CAI_SentenceBase
 D typeinfo for CAI_SpeechFilter
 D typeinfo for CAI_Spotlight
 D typeinfo for CAI_StandoffBehavior
 D typeinfo for CAI_StandoffGoal
 D typeinfo for CAI_SystemHook
 D typeinfo for CAI_TacticalServices
 D typeinfo for CAI_TestHull
 D typeinfo for CAI_TrackPather
 D typeinfo for CAPCController
 D typeinfo for CAPCFourWheelServerVehicle
 D typeinfo for CAPCMissile
 D typeinfo for CAchievementHLXKillEliteSoldierWithOwnEnergyBall
 D typeinfo for CAchievementHLXKillSoldierWithOwnGrenade
 D typeinfo for CAchievementHLXKillWithHopper
 D typeinfo for CAchievementHLXKillWithManhack
 D typeinfo for CAchievementHLXKillWithOneEnergyBall
 D typeinfo for CAchievementHLXKillWithPhysicsObjects
 D typeinfo for CAchievementMgr
 D typeinfo for CAchievementSaveRestoreBlockHandler
 D typeinfo for CAchievementSaveThread
 D typeinfo for CActBusyAnimData
 D typeinfo for CActivityDataOps
 D typeinfo for CAimTargetManager
 D typeinfo for CAlyxEmpEffect
 D typeinfo for CAmbientGeneric
 D typeinfo for CAmmoDef
 D typeinfo for CAnchorList
 D typeinfo for CAngryZombieCounter
 D typeinfo for CAntlionMakerManager
 D typeinfo for CAntlionRepellant
 D typeinfo for CAntlionTemplateMaker
 D typeinfo for CAreaPortal
 D typeinfo for CAssaultPoint
 D typeinfo for CAutoGameSystem
 D typeinfo for CAutoGameSystemPerFrame
 D typeinfo for CAvoidBox
 D typeinfo for CAvoidSphere
 D typeinfo for CBarnacleTongueFilter
 D typeinfo for CBarnacleTongueTip
 D typeinfo for CBaseAchievement
 D typeinfo for CBaseAnimating
 D typeinfo for CBaseAnimatingOverlay
 D typeinfo for CBaseAppSystem<IParticleSystemQuery>
 D typeinfo for CBaseButton
 D typeinfo for CBaseCombatCharacter
 D typeinfo for CBaseCombatWeapon
 D typeinfo for CBaseDMStart
 D typeinfo for CBaseDoor
 D typeinfo for CBaseEntity
 D typeinfo for CBaseEntity::NetworkVar_m_Collision
 D typeinfo for CBaseEntityClassList
 D typeinfo for CBaseEntityList
 D typeinfo for CBaseEntityModelLoadProxy::Handler
 D typeinfo for CBaseFilter
 D typeinfo for CBaseFire
 D typeinfo for CBaseFlex
 D typeinfo for CBaseGameStats
 D typeinfo for CBaseGameStats_Driver
 D typeinfo for CBaseGameSystem
 D typeinfo for CBaseGameSystemPerFrame
 D typeinfo for CBaseGrenade
 D typeinfo for CBaseGrenadeConcussion
 D typeinfo for CBaseGrenadeContact
 D typeinfo for CBaseGrenadeTimed
 D typeinfo for CBaseHL2MPBludgeonWeapon
 D typeinfo for CBaseHL2MPCombatWeapon
 D typeinfo for CBaseHLCombatWeapon
 D typeinfo for CBaseHeadcrab
 D typeinfo for CBaseHelicopter
 D typeinfo for CBaseMoveBehavior
 D typeinfo for CBaseMultiplayerPlayer
 D typeinfo for CBaseNPCMaker
 D typeinfo for CBaseParticleEntity
 D typeinfo for CBasePlatTrain
 D typeinfo for CBasePlayer
 D typeinfo for CBasePlayer::NetworkVar_m_Local
 D typeinfo for CBasePlayer::NetworkVar_pl
 D typeinfo for CBaseProjectile
 D typeinfo for CBaseProp
 D typeinfo for CBasePropDoor
 D typeinfo for CBaseRopePhysics
 D typeinfo for CBaseServerVehicle
 D typeinfo for CBaseSpriteProjectile
 D typeinfo for CBaseTempEntity
 D typeinfo for CBaseToggle
 D typeinfo for CBaseTrigger
 D typeinfo for CBaseVPhysicsTrigger
 D typeinfo for CBaseViewModel
 D typeinfo for CBeam
 D typeinfo for CBlackHeadcrab
 D typeinfo for CBlendingCycler
 D typeinfo for CBlood
 D typeinfo for CBloodSplat
 D typeinfo for CBombDropSensor
 D typeinfo for CBombSuppressor
 D typeinfo for CBoneFollower
 D typeinfo for CBotCmd
 D typeinfo for CBounceBomb
 D typeinfo for CBreakModelsPrecached
 D typeinfo for CBreakParser
 D typeinfo for CBreakable
 D typeinfo for CBreakableProp
 D typeinfo for CBreakableSurface
 D typeinfo for CBroadcastRecipientFilter
 D typeinfo for CBubbling
 D typeinfo for CBugBaitSensor
 D typeinfo for CBulletsTraceFilter
 D typeinfo for CBullseyeList
 D typeinfo for CChangeLevel
 D typeinfo for CCheckClient
 D typeinfo for CChildOperatorDefinition
 D typeinfo for CChoreoEvent
 D typeinfo for CChoreoScene
 D typeinfo for CChoreoStringPool
 D typeinfo for CCitadelEnergyCore
 D typeinfo for CCitizenResponseSystem
 D typeinfo for CClassPtrSaveRestoreOps
 D typeinfo for CCleanupDefaultRelationShips
 D typeinfo for CCollideList
 D typeinfo for CCollisionEvent
 D typeinfo for CCollisionProperty
 D typeinfo for CColorCorrection
 D typeinfo for CColorCorrectionVolume
 D typeinfo for CCombatCharVisCache
 D typeinfo for CCombineDropshipContainer
 D typeinfo for CCommandPoint
 D typeinfo for CCommentaryAuto
 D typeinfo for CCommentarySystem
 D typeinfo for CCommentaryViewPosition
 D typeinfo for CCommentary_SaveRestoreBlockHandler
 D typeinfo for CConceptHistoriesDataOps
 D typeinfo for CConcussiveBlast
 D typeinfo for CConstantForceController
 D typeinfo for CConstraintAnchor
 D typeinfo for CCopyRecipientFilter
 D typeinfo for CCorpse
 D typeinfo for CCraneServerVehicle
 D typeinfo for CCraneTip
 D typeinfo for CCredits
 D typeinfo for CCrossbowBolt
 D typeinfo for CCycler
 D typeinfo for CDataManager<CBoneCache, bonecacheparams_t, CBoneCache*, CThreadFastMutex>
 D typeinfo for CDataManagerBase
 D typeinfo for CDataObjectAccessSystem
 D typeinfo for CDebugHistory
 D typeinfo for CDecal
 D typeinfo for CDecalEmitterSystem
 D typeinfo for CDefSaveRestoreBlockHandler
 D typeinfo for CDefSaveRestoreOps
 D typeinfo for CDefaultAccessor
 D typeinfo for CDefaultParticleSystemQuery
 D typeinfo for CDefaultPlayerPickupVPhysics
 D typeinfo for CDefaultResponseSystem
 D typeinfo for CDefaultResponseSystemSaveRestoreBlockHandler
 D typeinfo for CDevShotSystem
 D typeinfo for CDirtySpatialPartitionEntityList
 D typeinfo for CDllDemandLoader
 D typeinfo for CDynamicLight
 D typeinfo for CDynamicProp
 D typeinfo for CEffectsServer
 D typeinfo for CEmbers
 D typeinfo for CEmptyConVar
 D typeinfo for CEnableMotionFixup
 D typeinfo for CEntFireAutoCompletionFunctor
 D typeinfo for CEntityBlocker
 D typeinfo for CEntityClassList<CAPCMissile>
 D typeinfo for CEntityClassList<CBugBaitSensor>
 D typeinfo for CEntityClassList<CLaserDot>
 D typeinfo for CEntityClassList<CPhysicsNPCSolver>
 D typeinfo for CEntityClassList<CPointCamera>
 D typeinfo for CEntityClassList<CSkyCamera>
 D typeinfo for CEntityDataInstantiator<CWatcherList>
 D typeinfo for CEntityDataInstantiator<ModelScale>
 D typeinfo for CEntityDataInstantiator<StepSimulationData>
 D typeinfo for CEntityDataInstantiator<groundlink_t>
 D typeinfo for CEntityDataInstantiator<physicspushlist_t>
 D typeinfo for CEntityDataInstantiator<touchlink_t>
 D typeinfo for CEntityDataInstantiator<vphysicsupdateai_t>
 D typeinfo for CEntityDissolve
 D typeinfo for CEntityFactory<AR2Explosion>
 D typeinfo for CEntityFactory<CAISound>
 D typeinfo for CEntityFactory<CAI_ActBusyGoal>
 D typeinfo for CEntityFactory<CAI_ActBusyQueueGoal>
 D typeinfo for CEntityFactory<CAI_AllyManager>
 D typeinfo for CEntityFactory<CAI_AllySpeechManager>
 D typeinfo for CEntityFactory<CAI_AssaultGoal>
 D typeinfo for CEntityFactory<CAI_BattleLine>
 D typeinfo for CEntityFactory<CAI_ChangeHintGroup>
 D typeinfo for CEntityFactory<CAI_ChangeTarget>
 D typeinfo for CEntityFactory<CAI_DynamicLink>
 D typeinfo for CEntityFactory<CAI_DynamicLinkController>
 D typeinfo for CEntityFactory<CAI_FollowGoal>
 D typeinfo for CEntityFactory<CAI_Hint>
 D typeinfo for CEntityFactory<CAI_LeadGoal>
 D typeinfo for CEntityFactory<CAI_LeadGoal_Weapon>
 D typeinfo for CEntityFactory<CAI_NetworkManager>
 D typeinfo for CEntityFactory<CAI_PoliceGoal>
 D typeinfo for CEntityFactory<CAI_RadialLinkController>
 D typeinfo for CEntityFactory<CAI_Relationship>
 D typeinfo for CEntityFactory<CAI_ScriptConditions>
 D typeinfo for CEntityFactory<CAI_ScriptedSchedule>
 D typeinfo for CEntityFactory<CAI_ScriptedSentence>
 D typeinfo for CEntityFactory<CAI_ScriptedSequence>
 D typeinfo for CEntityFactory<CAI_SpeechFilter>
 D typeinfo for CEntityFactory<CAI_StandoffGoal>
 D typeinfo for CEntityFactory<CAI_TestHull>
 D typeinfo for CEntityFactory<CAPCController>
 D typeinfo for CEntityFactory<CAPCMissile>
 D typeinfo for CEntityFactory<CAlyxEmpEffect>
 D typeinfo for CEntityFactory<CAmbientGeneric>
 D typeinfo for CEntityFactory<CAntlionRepellant>
 D typeinfo for CEntityFactory<CAntlionTemplateMaker>
 D typeinfo for CEntityFactory<CAreaPortal>
 D typeinfo for CEntityFactory<CAssaultPoint>
 D typeinfo for CEntityFactory<CAvoidBox>
 D typeinfo for CEntityFactory<CAvoidSphere>
 D typeinfo for CEntityFactory<CBarnacleTongueTip>
 D typeinfo for CEntityFactory<CBaseButton>
 D typeinfo for CEntityFactory<CBaseDMStart>
 D typeinfo for CEntityFactory<CBaseDoor>
 D typeinfo for CEntityFactory<CBaseEntity>
 D typeinfo for CEntityFactory<CBaseFilter>
 D typeinfo for CEntityFactory<CBaseFlex>
 D typeinfo for CEntityFactory<CBaseGrenade>
 D typeinfo for CEntityFactory<CBaseGrenadeConcussion>
 D typeinfo for CEntityFactory<CBaseGrenadeContact>
 D typeinfo for CEntityFactory<CBaseGrenadeTimed>
 D typeinfo for CEntityFactory<CBaseHL2MPCombatWeapon>
 D typeinfo for CEntityFactory<CBaseHLCombatWeapon>
 D typeinfo for CEntityFactory<CBaseMoveBehavior>
 D typeinfo for CEntityFactory<CBaseSpriteProjectile>
 D typeinfo for CEntityFactory<CBaseTrigger>
 D typeinfo for CEntityFactory<CBaseViewModel>
 D typeinfo for CEntityFactory<CBeam>
 D typeinfo for CEntityFactory<CBlackHeadcrab>
 D typeinfo for CEntityFactory<CBlendingCycler>
 D typeinfo for CEntityFactory<CBlood>
 D typeinfo for CEntityFactory<CBombDropSensor>
 D typeinfo for CEntityFactory<CBombSuppressor>
 D typeinfo for CEntityFactory<CBoneFollower>
 D typeinfo for CEntityFactory<CBounceBomb>
 D typeinfo for CEntityFactory<CBreakable>
 D typeinfo for CEntityFactory<CBreakableSurface>
 D typeinfo for CEntityFactory<CBubbling>
 D typeinfo for CEntityFactory<CBugBaitSensor>
 D typeinfo for CEntityFactory<CChangeLevel>
 D typeinfo for CEntityFactory<CCitadelEnergyCore>
 D typeinfo for CEntityFactory<CCitizenResponseSystem>
 D typeinfo for CEntityFactory<CColorCorrection>
 D typeinfo for CEntityFactory<CColorCorrectionVolume>
 D typeinfo for CEntityFactory<CCombineDropshipContainer>
 D typeinfo for CEntityFactory<CCommandPoint>
 D typeinfo for CEntityFactory<CCommentaryAuto>
 D typeinfo for CEntityFactory<CCommentaryViewPosition>
 D typeinfo for CEntityFactory<CConcussiveBlast>
 D typeinfo for CEntityFactory<CConstraintAnchor>
 D typeinfo for CEntityFactory<CCorpse>
 D typeinfo for CEntityFactory<CCraneTip>
 D typeinfo for CEntityFactory<CCredits>
 D typeinfo for CEntityFactory<CCrossbowBolt>
 D typeinfo for CEntityFactory<CDebugHistory>
 D typeinfo for CEntityFactory<CDecal>
 D typeinfo for CEntityFactory<CDynamicLight>
 D typeinfo for CEntityFactory<CDynamicProp>
 D typeinfo for CEntityFactory<CEmbers>
 D typeinfo for CEntityFactory<CEnableMotionFixup>
 D typeinfo for CEntityFactory<CEntityBlocker>
 D typeinfo for CEntityFactory<CEntityDissolve>
 D typeinfo for CEntityFactory<CEntityFlame>
 D typeinfo for CEntityFactory<CEntityParticleTrail>
 D typeinfo for CEntityFactory<CEnvAR2Explosion>
 D typeinfo for CEntityFactory<CEnvBeam>
 D typeinfo for CEntityFactory<CEnvBeverage>
 D typeinfo for CEntityFactory<CEnvDetailController>
 D typeinfo for CEntityFactory<CEnvDustPuff>
 D typeinfo for CEntityFactory<CEnvEffectsScript>
 D typeinfo for CEntityFactory<CEnvEntityMaker>
 D typeinfo for CEntityFactory<CEnvExplosion>
 D typeinfo for CEntityFactory<CEnvFade>
 D typeinfo for CEntityFactory<CEnvFireSensor>
 D typeinfo for CEntityFactory<CEnvFireSource>
 D typeinfo for CEntityFactory<CEnvFunnel>
 D typeinfo for CEntityFactory<CEnvGlobal>
 D typeinfo for CEntityFactory<CEnvGunfire>
 D typeinfo for CEntityFactory<CEnvHeadcrabCanister>
 D typeinfo for CEntityFactory<CEnvHudHint>
 D typeinfo for CEntityFactory<CEnvLaser>
 D typeinfo for CEntityFactory<CEnvLight>
 D typeinfo for CEntityFactory<CEnvMicrophone>
 D typeinfo for CEntityFactory<CEnvMuzzleFlash>
 D typeinfo for CEntityFactory<CEnvParticleScript>
 D typeinfo for CEntityFactory<CEnvPlayerSurfaceTrigger>
 D typeinfo for CEntityFactory<CEnvProjectedTexture>
 D typeinfo for CEntityFactory<CEnvQuadraticBeam>
 D typeinfo for CEntityFactory<CEnvScreenEffect>
 D typeinfo for CEntityFactory<CEnvScreenOverlay>
 D typeinfo for CEntityFactory<CEnvShake>
 D typeinfo for CEntityFactory<CEnvShooter>
 D typeinfo for CEntityFactory<CEnvSoundscape>
 D typeinfo for CEntityFactory<CEnvSoundscapeProxy>
 D typeinfo for CEntityFactory<CEnvSoundscapeTriggerable>
 D typeinfo for CEntityFactory<CEnvSpark>
 D typeinfo for CEntityFactory<CEnvSplash>
 D typeinfo for CEntityFactory<CEnvStarfield>
 D typeinfo for CEntityFactory<CEnvTonemapController>
 D typeinfo for CEntityFactory<CEnvTracer>
 D typeinfo for CEntityFactory<CEnvViewPunch>
 D typeinfo for CEntityFactory<CEnvWind>
 D typeinfo for CEntityFactory<CEnvZoom>
 D typeinfo for CEntityFactory<CEventQueueSaveLoadProxy>
 D typeinfo for CEntityFactory<CFastHeadcrab>
 D typeinfo for CEntityFactory<CFilterClass>
 D typeinfo for CEntityFactory<CFilterCombineBall>
 D typeinfo for CEntityFactory<CFilterEnemy>
 D typeinfo for CEntityFactory<CFilterMassGreater>
 D typeinfo for CEntityFactory<CFilterMultiple>
 D typeinfo for CEntityFactory<CFilterName>
 D typeinfo for CEntityFactory<CFire>
 D typeinfo for CEntityFactory<CFireSmoke>
 D typeinfo for CEntityFactory<CFireTrail>
 D typeinfo for CEntityFactory<CFish>
 D typeinfo for CEntityFactory<CFishPool>
 D typeinfo for CEntityFactory<CFlare>
 D typeinfo for CEntityFactory<CFlextalkActor>
 D typeinfo for CEntityFactory<CFogController>
 D typeinfo for CEntityFactory<CFuncAreaPortalWindow>
 D typeinfo for CEntityFactory<CFuncBrush>
 D typeinfo for CEntityFactory<CFuncCombineBallSpawner>
 D typeinfo for CEntityFactory<CFuncConveyor>
 D typeinfo for CEntityFactory<CFuncIllusionary>
 D typeinfo for CEntityFactory<CFuncLadder>
 D typeinfo for CEntityFactory<CFuncLadderEndPoint>
 D typeinfo for CEntityFactory<CFuncMonitor>
 D typeinfo for CEntityFactory<CFuncMoveLinear>
 D typeinfo for CEntityFactory<CFuncOccluder>
 D typeinfo for CEntityFactory<CFuncPlat>
 D typeinfo for CEntityFactory<CFuncPlatRot>
 D typeinfo for CEntityFactory<CFuncReflectiveGlass>
 D typeinfo for CEntityFactory<CFuncRotating>
 D typeinfo for CEntityFactory<CFuncSmokeVolume>
 D typeinfo for CEntityFactory<CFuncTankAPCRocket>
 D typeinfo for CEntityFactory<CFuncTankAirboatGun>
 D typeinfo for CEntityFactory<CFuncTankCombineCannon>
 D typeinfo for CEntityFactory<CFuncTankGun>
 D typeinfo for CEntityFactory<CFuncTankLaser>
 D typeinfo for CEntityFactory<CFuncTankMortar>
 D typeinfo for CEntityFactory<CFuncTankPhysCannister>
 D typeinfo for CEntityFactory<CFuncTankPulseLaser>
 D typeinfo for CEntityFactory<CFuncTankRocket>
 D typeinfo for CEntityFactory<CFuncTankTrain>
 D typeinfo for CEntityFactory<CFuncTrackAuto>
 D typeinfo for CEntityFactory<CFuncTrackChange>
 D typeinfo for CEntityFactory<CFuncTrackTrain>
 D typeinfo for CEntityFactory<CFuncTrain>
 D typeinfo for CEntityFactory<CFuncTrainControls>
 D typeinfo for CEntityFactory<CFuncVPhysicsClip>
 D typeinfo for CEntityFactory<CFuncVehicleClip>
 D typeinfo for CEntityFactory<CFuncWall>
 D typeinfo for CEntityFactory<CFuncWallToggle>
 D typeinfo for CEntityFactory<CFunc_DustCloud>
 D typeinfo for CEntityFactory<CFunc_DustMotes>
 D typeinfo for CEntityFactory<CFunc_LOD>
 D typeinfo for CEntityFactory<CGameEnd>
 D typeinfo for CEntityFactory<CGameGibManager>
 D typeinfo for CEntityFactory<CGamePlayerEquip>
 D typeinfo for CEntityFactory<CGamePlayerTeam>
 D typeinfo for CEntityFactory<CGamePlayerZone>
 D typeinfo for CEntityFactory<CGameScore>
 D typeinfo for CEntityFactory<CGameText>
 D typeinfo for CEntityFactory<CGameUI>
 D typeinfo for CEntityFactory<CGameWeaponManager>
 D typeinfo for CEntityFactory<CGenericActor>
 D typeinfo for CEntityFactory<CGenericCycler>
 D typeinfo for CEntityFactory<CGenericFlexCycler>
 D typeinfo for CEntityFactory<CGenericNPC>
 D typeinfo for CEntityFactory<CGib>
 D typeinfo for CEntityFactory<CGibShooter>
 D typeinfo for CEntityFactory<CGrenadeAR2>
 D typeinfo for CEntityFactory<CGrenadeBeam>
 D typeinfo for CEntityFactory<CGrenadeBeamChaser>
 D typeinfo for CEntityFactory<CGrenadeBugBait>
 D typeinfo for CEntityFactory<CGrenadeFrag>
 D typeinfo for CEntityFactory<CGrenadeHelicopter>
 D typeinfo for CEntityFactory<CGrenadeHomer>
 D typeinfo for CEntityFactory<CGrenadePathfollower>
 D typeinfo for CEntityFactory<CGunTarget>
 D typeinfo for CEntityFactory<CHL2MPGameRulesProxy>
 D typeinfo for CEntityFactory<CHL2MPRagdoll>
 D typeinfo for CEntityFactory<CHL2MP_Player>
 D typeinfo for CEntityFactory<CHL2NetworkBuildHelper>
 D typeinfo for CEntityFactory<CHalfLife2Proxy>
 D typeinfo for CEntityFactory<CHandleDummy>
 D typeinfo for CEntityFactory<CHandleTest>
 D typeinfo for CEntityFactory<CHeadcrab>
 D typeinfo for CEntityFactory<CHealthKit>
 D typeinfo for CEntityFactory<CHealthVial>
 D typeinfo for CEntityFactory<CHelicopterChunk>
 D typeinfo for CEntityFactory<CInfoAPCMissileHint>
 D typeinfo for CEntityFactory<CInfoCameraLink>
 D typeinfo for CEntityFactory<CInfoIntermission>
 D typeinfo for CEntityFactory<CInfoLadderDismount>
 D typeinfo for CEntityFactory<CInfoLightingRelative>
 D typeinfo for CEntityFactory<CInfoMassCenter>
 D typeinfo for CEntityFactory<CInfoOverlayAccessor>
 D typeinfo for CEntityFactory<CInfoTarget>
 D typeinfo for CEntityFactory<CInfoTeleporterCountdown>
 D typeinfo for CEntityFactory<CInstancedSceneEntity>
 D typeinfo for CEntityFactory<CItemBattery>
 D typeinfo for CEntityFactory<CItemSoda>
 D typeinfo for CEntityFactory<CItemSuit>
 D typeinfo for CEntityFactory<CItem_AR2AltFireRound>
 D typeinfo for CEntityFactory<CItem_AR2_Grenade>
 D typeinfo for CEntityFactory<CItem_AmmoCrate>
 D typeinfo for CEntityFactory<CItem_Box357Rounds>
 D typeinfo for CEntityFactory<CItem_BoxBuckshot>
 D typeinfo for CEntityFactory<CItem_BoxFlareRounds>
 D typeinfo for CEntityFactory<CItem_BoxLRounds>
 D typeinfo for CEntityFactory<CItem_BoxMRounds>
 D typeinfo for CEntityFactory<CItem_BoxSRounds>
 D typeinfo for CEntityFactory<CItem_BoxSniperRounds>
 D typeinfo for CEntityFactory<CItem_BoxXBowRounds>
 D typeinfo for CEntityFactory<CItem_DynamicResupply>
 D typeinfo for CEntityFactory<CItem_FlareRound>
 D typeinfo for CEntityFactory<CItem_ItemCrate>
 D typeinfo for CEntityFactory<CItem_LargeBox357Rounds>
 D typeinfo for CEntityFactory<CItem_LargeBoxLRounds>
 D typeinfo for CEntityFactory<CItem_LargeBoxMRounds>
 D typeinfo for CEntityFactory<CItem_LargeBoxSRounds>
 D typeinfo for CEntityFactory<CItem_RPG_Round>
 D typeinfo for CEntityFactory<CKeepUpright>
 D typeinfo for CEntityFactory<CLaserDot>
 D typeinfo for CEntityFactory<CLight>
 D typeinfo for CEntityFactory<CLightGlow>
 D typeinfo for CEntityFactory<CLogicActiveAutosave>
 D typeinfo for CEntityFactory<CLogicAuto>
 D typeinfo for CEntityFactory<CLogicAutosave>
 D typeinfo for CEntityFactory<CLogicBranch>
 D typeinfo for CEntityFactory<CLogicBranchList>
 D typeinfo for CEntityFactory<CLogicCase>
 D typeinfo for CEntityFactory<CLogicCollisionPair>
 D typeinfo for CEntityFactory<CLogicCompare>
 D typeinfo for CEntityFactory<CLogicCompareInteger>
 D typeinfo for CEntityFactory<CLogicLineToEntity>
 D typeinfo for CEntityFactory<CLogicMeasureMovement>
 D typeinfo for CEntityFactory<CLogicNavigation>
 D typeinfo for CEntityFactory<CLogicPlayerProxy>
 D typeinfo for CEntityFactory<CLogicRelay>
 D typeinfo for CEntityFactory<CLookDoor>
 D typeinfo for CEntityFactory<CLookDoorThinker>
 D typeinfo for CEntityFactory<CMaterialModifyControl>
 D typeinfo for CEntityFactory<CMathColorBlend>
 D typeinfo for CEntityFactory<CMathCounter>
 D typeinfo for CEntityFactory<CMathRemap>
 D typeinfo for CEntityFactory<CMessage>
 D typeinfo for CEntityFactory<CMessageEntity>
 D typeinfo for CEntityFactory<CMissile>
 D typeinfo for CEntityFactory<CMomentaryRotButton>
 D typeinfo for CEntityFactory<CMortarShell>
 D typeinfo for CEntityFactory<CMovementSpeedMod>
 D typeinfo for CEntityFactory<CMultiSource>
 D typeinfo for CEntityFactory<CNPCMaker>
 D typeinfo for CEntityFactory<CNPCSpawnDestination>
 D typeinfo for CEntityFactory<CNPC_APCDriver>
 D typeinfo for CEntityFactory<CNPC_Alyx>
 D typeinfo for CEntityFactory<CNPC_Antlion>
 D typeinfo for CEntityFactory<CNPC_AntlionGuard>
 D typeinfo for CEntityFactory<CNPC_AttackHelicopter>
 D typeinfo for CEntityFactory<CNPC_Barnacle>
 D typeinfo for CEntityFactory<CNPC_Barney>
 D typeinfo for CEntityFactory<CNPC_Breen>
 D typeinfo for CEntityFactory<CNPC_Bullseye>
 D typeinfo for CEntityFactory<CNPC_CScanner>
 D typeinfo for CEntityFactory<CNPC_CeilingTurret>
 D typeinfo for CEntityFactory<CNPC_Citizen>
 D typeinfo for CEntityFactory<CNPC_ClawScanner>
 D typeinfo for CEntityFactory<CNPC_Combine>
 D typeinfo for CEntityFactory<CNPC_CombineCamera>
 D typeinfo for CEntityFactory<CNPC_CombineDropship>
 D typeinfo for CEntityFactory<CNPC_CombineGunship>
 D typeinfo for CEntityFactory<CNPC_CombineS>
 D typeinfo for CEntityFactory<CNPC_CraneDriver>
 D typeinfo for CEntityFactory<CNPC_Crow>
 D typeinfo for CEntityFactory<CNPC_Dog>
 D typeinfo for CEntityFactory<CNPC_Eli>
 D typeinfo for CEntityFactory<CNPC_EnemyFinder>
 D typeinfo for CEntityFactory<CNPC_EnemyFinderCombineCannon>
 D typeinfo for CEntityFactory<CNPC_Fisherman>
 D typeinfo for CEntityFactory<CNPC_FloorTurret>
 D typeinfo for CEntityFactory<CNPC_Furniture>
 D typeinfo for CEntityFactory<CNPC_GMan>
 D typeinfo for CEntityFactory<CNPC_GroundTurret>
 D typeinfo for CEntityFactory<CNPC_Ichthyosaur>
 D typeinfo for CEntityFactory<CNPC_Kleiner>
 D typeinfo for CEntityFactory<CNPC_Launcher>
 D typeinfo for CEntityFactory<CNPC_Manhack>
 D typeinfo for CEntityFactory<CNPC_MetroPolice>
 D typeinfo for CEntityFactory<CNPC_MissileDefense>
 D typeinfo for CEntityFactory<CNPC_Monk>
 D typeinfo for CEntityFactory<CNPC_Mossman>
 D typeinfo for CEntityFactory<CNPC_Pigeon>
 D typeinfo for CEntityFactory<CNPC_PoisonZombie>
 D typeinfo for CEntityFactory<CNPC_RollerMine>
 D typeinfo for CEntityFactory<CNPC_Seagull>
 D typeinfo for CEntityFactory<CNPC_Stalker>
 D typeinfo for CEntityFactory<CNPC_Strider>
 D typeinfo for CEntityFactory<CNPC_VehicleDriver>
 D typeinfo for CEntityFactory<CNPC_Vortigaunt>
 D typeinfo for CEntityFactory<CNewNPC>
 D typeinfo for CEntityFactory<CNewRecharge>
 D typeinfo for CEntityFactory<CNewWallHealth>
 D typeinfo for CEntityFactory<CNodeEnt>
 D typeinfo for CEntityFactory<CNullEntity>
 D typeinfo for CEntityFactory<COrnamentProp>
 D typeinfo for CEntityFactory<CParticleFire>
 D typeinfo for CEntityFactory<CParticleLight>
 D typeinfo for CEntityFactory<CParticlePerformanceMonitor>
 D typeinfo for CEntityFactory<CParticleSystem>
 D typeinfo for CEntityFactory<CPathCorner>
 D typeinfo for CEntityFactory<CPathCornerCrash>
 D typeinfo for CEntityFactory<CPathKeyFrame>
 D typeinfo for CEntityFactory<CPathTrack>
 D typeinfo for CEntityFactory<CPhysBallSocket>
 D typeinfo for CEntityFactory<CPhysBox>
 D typeinfo for CEntityFactory<CPhysBoxMultiplayer>
 D typeinfo for CEntityFactory<CPhysConstraintSystem>
 D typeinfo for CEntityFactory<CPhysConvert>
 D typeinfo for CEntityFactory<CPhysExplosion>
 D typeinfo for CEntityFactory<CPhysFixed>
 D typeinfo for CEntityFactory<CPhysHinge>
 D typeinfo for CEntityFactory<CPhysImpact>
 D typeinfo for CEntityFactory<CPhysLength>
 D typeinfo for CEntityFactory<CPhysMagnet>
 D typeinfo for CEntityFactory<CPhysMotor>
 D typeinfo for CEntityFactory<CPhysPulley>
 D typeinfo for CEntityFactory<CPhysSlideConstraint>
 D typeinfo for CEntityFactory<CPhysSphere>
 D typeinfo for CEntityFactory<CPhysThruster>
 D typeinfo for CEntityFactory<CPhysTorque>
 D typeinfo for CEntityFactory<CPhysicsCannister>
 D typeinfo for CEntityFactory<CPhysicsEntitySolver>
 D typeinfo for CEntityFactory<CPhysicsNPCSolver>
 D typeinfo for CEntityFactory<CPhysicsProp>
 D typeinfo for CEntityFactory<CPhysicsPropMultiplayer>
 D typeinfo for CEntityFactory<CPhysicsPropRespawnable>
 D typeinfo for CEntityFactory<CPhysicsSpring>
 D typeinfo for CEntityFactory<CPhysicsWire>
 D typeinfo for CEntityFactory<CPlasma>
 D typeinfo for CEntityFactory<CPlayerPickupController>
 D typeinfo for CEntityFactory<CPlayerResource>
 D typeinfo for CEntityFactory<CPointAngleSensor>
 D typeinfo for CEntityFactory<CPointAngularVelocitySensor>
 D typeinfo for CEntityFactory<CPointBonusMapsAccessor>
 D typeinfo for CEntityFactory<CPointCamera>
 D typeinfo for CEntityFactory<CPointClientCommand>
 D typeinfo for CEntityFactory<CPointCombineBallLauncher>
 D typeinfo for CEntityFactory<CPointCommentaryNode>
 D typeinfo for CEntityFactory<CPointDevShotCamera>
 D typeinfo for CEntityFactory<CPointEntity>
 D typeinfo for CEntityFactory<CPointGamestatsCounter>
 D typeinfo for CEntityFactory<CPointHurt>
 D typeinfo for CEntityFactory<CPointPlayerMoveConstraint>
 D typeinfo for CEntityFactory<CPointProximitySensor>
 D typeinfo for CEntityFactory<CPointPush>
 D typeinfo for CEntityFactory<CPointServerCommand>
 D typeinfo for CEntityFactory<CPointSpotlight>
 D typeinfo for CEntityFactory<CPointTeleport>
 D typeinfo for CEntityFactory<CPointTemplate>
 D typeinfo for CEntityFactory<CPointVelocitySensor>
 D typeinfo for CEntityFactory<CPoseController>
 D typeinfo for CEntityFactory<CPrecipitation>
 D typeinfo for CEntityFactory<CPredictedViewModel>
 D typeinfo for CEntityFactory<CProjectedDecal>
 D typeinfo for CEntityFactory<CPropAPC>
 D typeinfo for CEntityFactory<CPropAirboat>
 D typeinfo for CEntityFactory<CPropCombineBall>
 D typeinfo for CEntityFactory<CPropCrane>
 D typeinfo for CEntityFactory<CPropDoorRotating>
 D typeinfo for CEntityFactory<CPropThumper>
 D typeinfo for CEntityFactory<CPropVehicle>
 D typeinfo for CEntityFactory<CPropVehicleDriveable>
 D typeinfo for CEntityFactory<CPropVehiclePrisonerPod>
 D typeinfo for CEntityFactory<CPropVehicleViewController>
 D typeinfo for CEntityFactory<CProtoSniper>
 D typeinfo for CEntityFactory<CPushable>
 D typeinfo for CEntityFactory<CRagGib>
 D typeinfo for CEntityFactory<CRagdollBoogie>
 D typeinfo for CEntityFactory<CRagdollConstraint>
 D typeinfo for CEntityFactory<CRagdollMagnet>
 D typeinfo for CEntityFactory<CRagdollManager>
 D typeinfo for CEntityFactory<CRagdollProp>
 D typeinfo for CEntityFactory<CRagdollPropAttached>
 D typeinfo for CEntityFactory<CRallyPoint>
 D typeinfo for CEntityFactory<CRecharge>
 D typeinfo for CEntityFactory<CReservePlayerSpot>
 D typeinfo for CEntityFactory<CRevertSaved>
 D typeinfo for CEntityFactory<CRopeAnchor>
 D typeinfo for CEntityFactory<CRopeKeyframe>
 D typeinfo for CEntityFactory<CRotButton>
 D typeinfo for CEntityFactory<CRotDoor>
 D typeinfo for CEntityFactory<CRotorWashEmitter>
 D typeinfo for CEntityFactory<CRotorWashShooter>
 D typeinfo for CEntityFactory<CSatchelCharge>
 D typeinfo for CEntityFactory<CSceneEntity>
 D typeinfo for CEntityFactory<CSceneListManager>
 D typeinfo for CEntityFactory<CSceneManager>
 D typeinfo for CEntityFactory<CScriptIntro>
 D typeinfo for CEntityFactory<CScriptedTarget>
 D typeinfo for CEntityFactory<CServerRagdollTrigger>
 D typeinfo for CEntityFactory<CShadowControl>
 D typeinfo for CEntityFactory<CShower>
 D typeinfo for CEntityFactory<CSimplePhysicsBrush>
 D typeinfo for CEntityFactory<CSimplePhysicsProp>
 D typeinfo for CEntityFactory<CSkyCamera>
 D typeinfo for CEntityFactory<CSlideshowDisplay>
 D typeinfo for CEntityFactory<CSmokeStack>
 D typeinfo for CEntityFactory<CSniperBullet>
 D typeinfo for CEntityFactory<CSniperTarget>
 D typeinfo for CEntityFactory<CSoundEnt>
 D typeinfo for CEntityFactory<CSparkTrail>
 D typeinfo for CEntityFactory<CSpeaker>
 D typeinfo for CEntityFactory<CSpotlightEnd>
 D typeinfo for CEntityFactory<CSprayCan>
 D typeinfo for CEntityFactory<CSprite>
 D typeinfo for CEntityFactory<CSpriteOriented>
 D typeinfo for CEntityFactory<CSpriteTrail>
 D typeinfo for CEntityFactory<CSquadInsignia>
 D typeinfo for CEntityFactory<CSteamJet>
 D typeinfo for CEntityFactory<CStripWeapons>
 D typeinfo for CEntityFactory<CSun>
 D typeinfo for CEntityFactory<CTankTargetChange>
 D typeinfo for CEntityFactory<CTankTrainAI>
 D typeinfo for CEntityFactory<CTargetCDAudioRep>
 D typeinfo for CEntityFactory<CTargetChangeGravity>
 D typeinfo for CEntityFactory<CTargetGunshipCrash>
 D typeinfo for CEntityFactory<CTeam>
 D typeinfo for CEntityFactory<CTeamControlPoint>
 D typeinfo for CEntityFactory<CTeamControlPointMaster>
 D typeinfo for CEntityFactory<CTeamControlPointRound>
 D typeinfo for CEntityFactory<CTeamRoundTimer>
 D typeinfo for CEntityFactory<CTeamSpawnPoint>
 D typeinfo for CEntityFactory<CTeamTrainWatcher>
 D typeinfo for CEntityFactory<CTeamVehicleSpawnPoint>
 D typeinfo for CEntityFactory<CTempEntTester>
 D typeinfo for CEntityFactory<CTemplateNPCMaker>
 D typeinfo for CEntityFactory<CTesla>
 D typeinfo for CEntityFactory<CTestEffect>
 D typeinfo for CEntityFactory<CTestTraceline>
 D typeinfo for CEntityFactory<CTest_ProxyToggle_Networkable>
 D typeinfo for CEntityFactory<CTextureToggle>
 D typeinfo for CEntityFactory<CTimerEntity>
 D typeinfo for CEntityFactory<CTriggerApplyImpulse>
 D typeinfo for CEntityFactory<CTriggerAreaCapture>
 D typeinfo for CEntityFactory<CTriggerBrush>
 D typeinfo for CEntityFactory<CTriggerCDAudio>
 D typeinfo for CEntityFactory<CTriggerCamera>
 D typeinfo for CEntityFactory<CTriggerGravity>
 D typeinfo for CEntityFactory<CTriggerHurt>
 D typeinfo for CEntityFactory<CTriggerImpact>
 D typeinfo for CEntityFactory<CTriggerLook>
 D typeinfo for CEntityFactory<CTriggerMultiple>
 D typeinfo for CEntityFactory<CTriggerOnce>
 D typeinfo for CEntityFactory<CTriggerPhysicsTrap>
 D typeinfo for CEntityFactory<CTriggerPlayerMovement>
 D typeinfo for CEntityFactory<CTriggerProximity>
 D typeinfo for CEntityFactory<CTriggerPush>
 D typeinfo for CEntityFactory<CTriggerRPGFire>
 D typeinfo for CEntityFactory<CTriggerRemove>
 D typeinfo for CEntityFactory<CTriggerSave>
 D typeinfo for CEntityFactory<CTriggerSoundscape>
 D typeinfo for CEntityFactory<CTriggerTeleport>
 D typeinfo for CEntityFactory<CTriggerTeleportRelative>
 D typeinfo for CEntityFactory<CTriggerToggleSave>
 D typeinfo for CEntityFactory<CTriggerVPhysicsMotion>
 D typeinfo for CEntityFactory<CTriggerVolume>
 D typeinfo for CEntityFactory<CTriggerWateryDeath>
 D typeinfo for CEntityFactory<CTriggerWeaponDissolve>
 D typeinfo for CEntityFactory<CTriggerWeaponStrip>
 D typeinfo for CEntityFactory<CTriggerWind>
 D typeinfo for CEntityFactory<CTripmineGrenade>
 D typeinfo for CEntityFactory<CTurretTipController>
 D typeinfo for CEntityFactory<CVGuiScreen>
 D typeinfo for CEntityFactory<CVortigauntChargeToken>
 D typeinfo for CEntityFactory<CVortigauntEffectDispel>
 D typeinfo for CEntityFactory<CVoteController>
 D typeinfo for CEntityFactory<CWC_UpdateIgnoreList>
 D typeinfo for CEntityFactory<CWallHealth>
 D typeinfo for CEntityFactory<CWaterBullet>
 D typeinfo for CEntityFactory<CWaterLODControl>
 D typeinfo for CEntityFactory<CWateryDeathLeech>
 D typeinfo for CEntityFactory<CWeapon357>
 D typeinfo for CEntityFactory<CWeaponAR2>
 D typeinfo for CEntityFactory<CWeaponAnnabelle>
 D typeinfo for CEntityFactory<CWeaponBugBait>
 D typeinfo for CEntityFactory<CWeaponCrossbow>
 D typeinfo for CEntityFactory<CWeaponCrowbar>
 D typeinfo for CEntityFactory<CWeaponCubemap>
 D typeinfo for CEntityFactory<CWeaponCycler>
 D typeinfo for CEntityFactory<CWeaponFrag>
 D typeinfo for CEntityFactory<CWeaponHL2MPBase>
 D typeinfo for CEntityFactory<CWeaponPhysCannon>
 D typeinfo for CEntityFactory<CWeaponPistol>
 D typeinfo for CEntityFactory<CWeaponRPG>
 D typeinfo for CEntityFactory<CWeaponSMG1>
 D typeinfo for CEntityFactory<CWeaponShotgun>
 D typeinfo for CEntityFactory<CWeaponStunStick>
 D typeinfo for CEntityFactory<CWeapon_SLAM>
 D typeinfo for CEntityFactory<CWeightButton>
 D typeinfo for CEntityFactory<CWindowPane>
 D typeinfo for CEntityFactory<CWorld>
 D typeinfo for CEntityFactory<CWorldItem>
 D typeinfo for CEntityFactory<CWreckage>
 D typeinfo for CEntityFactory<CZombie>
 D typeinfo for CEntityFactory<DustTrail>
 D typeinfo for CEntityFactory<FilterDamageType>
 D typeinfo for CEntityFactory<FilterTeam>
 D typeinfo for CEntityFactory<MovieExplosion>
 D typeinfo for CEntityFactory<ParticleSmokeGrenade>
 D typeinfo for CEntityFactory<RocketTrail>
 D typeinfo for CEntityFactory<SmokeTrail>
 D typeinfo for CEntityFactory<SporeExplosion>
 D typeinfo for CEntityFactory<SporeTrail>
 D typeinfo for CEntityFactoryDictionary
 D typeinfo for CEntityFlame
 D typeinfo for CEntityListSystem
 D typeinfo for CEntityParticleTrail
 D typeinfo for CEntityParticleTrail::NetworkVar_m_Info
 D typeinfo for CEntitySaveRestoreBlockHandler
 D typeinfo for CEntitySaveUtils
 D typeinfo for CEntityTouchManager
 D typeinfo for CEnvAR2Explosion
 D typeinfo for CEnvBeam
 D typeinfo for CEnvBeverage
 D typeinfo for CEnvDetailController
 D typeinfo for CEnvDustPuff
 D typeinfo for CEnvEffectsScript
 D typeinfo for CEnvEntityMaker
 D typeinfo for CEnvExplosion
 D typeinfo for CEnvFade
 D typeinfo for CEnvFireSensor
 D typeinfo for CEnvFireSource
 D typeinfo for CEnvFunnel
 D typeinfo for CEnvGlobal
 D typeinfo for CEnvGunfire
 D typeinfo for CEnvHeadcrabCanister
 D typeinfo for CEnvHeadcrabCanister::NetworkVar_m_Shared
 D typeinfo for CEnvHeadcrabCanisterShared
 D typeinfo for CEnvHudHint
 D typeinfo for CEnvLaser
 D typeinfo for CEnvLight
 D typeinfo for CEnvMicrophone
 D typeinfo for CEnvMuzzleFlash
 D typeinfo for CEnvParticleScript
 D typeinfo for CEnvPlayerSurfaceTrigger
 D typeinfo for CEnvProjectedTexture
 D typeinfo for CEnvQuadraticBeam
 D typeinfo for CEnvScreenEffect
 D typeinfo for CEnvScreenOverlay
 D typeinfo for CEnvShake
 D typeinfo for CEnvShooter
 D typeinfo for CEnvSoundscape
 D typeinfo for CEnvSoundscapeProxy
 D typeinfo for CEnvSoundscapeTriggerable
 D typeinfo for CEnvSpark
 D typeinfo for CEnvSplash
 D typeinfo for CEnvStarfield
 D typeinfo for CEnvTonemapController
 D typeinfo for CEnvTracer
 D typeinfo for CEnvViewPunch
 D typeinfo for CEnvWind
 D typeinfo for CEnvWindShared
 D typeinfo for CEnvZoom
 D typeinfo for CEventLog
 D typeinfo for CEventQueueSaveLoadProxy
 D typeinfo for CEventQueue_SaveRestoreBlockHandler
 D typeinfo for CEventsSaveDataOps
 D typeinfo for CFastHeadcrab
 D typeinfo for CFilterClass
 D typeinfo for CFilterCombineBall
 D typeinfo for CFilterEnemy
 D typeinfo for CFilterMassGreater
 D typeinfo for CFilterMultiple
 D typeinfo for CFilterName
 D typeinfo for CFire
 D typeinfo for CFireSmoke
 D typeinfo for CFireSphere
 D typeinfo for CFireTrail
 D typeinfo for CFish
 D typeinfo for CFishPool
 D typeinfo for CFlaggedEntitiesEnum
 D typeinfo for CFlare
 D typeinfo for CFlexAnimationTrack
 D typeinfo for CFlexCycler
 D typeinfo for CFlexSceneFileManager
 D typeinfo for CFlextalkActor
 D typeinfo for CFmtStrN<1024, false>
 D typeinfo for CFmtStrN<128, false>
 D typeinfo for CFmtStrN<256, false>
 D typeinfo for CFmtStrN<512, false>
 D typeinfo for CFogController
 D typeinfo for CFogController::NetworkVar_m_fog
 D typeinfo for CFogSystem
 D typeinfo for CFourWheelServerVehicle
 D typeinfo for CFourWheelVehiclePhysics
 D typeinfo for CFuncAreaPortalBase
 D typeinfo for CFuncAreaPortalWindow
 D typeinfo for CFuncBrush
 D typeinfo for CFuncCombineBallSpawner
 D typeinfo for CFuncConveyor
 D typeinfo for CFuncIllusionary
 D typeinfo for CFuncLadder
 D typeinfo for CFuncLadderEndPoint
 D typeinfo for CFuncMonitor
 D typeinfo for CFuncMoveLinear
 D typeinfo for CFuncOccluder
 D typeinfo for CFuncPlat
 D typeinfo for CFuncPlatRot
 D typeinfo for CFuncReflectiveGlass
 D typeinfo for CFuncRotating
 D typeinfo for CFuncSmokeVolume
 D typeinfo for CFuncTank
 D typeinfo for CFuncTankAPCRocket
 D typeinfo for CFuncTankAirboatGun
 D typeinfo for CFuncTankCombineCannon
 D typeinfo for CFuncTankGun
 D typeinfo for CFuncTankLaser
 D typeinfo for CFuncTankMortar
 D typeinfo for CFuncTankPhysCannister
 D typeinfo for CFuncTankPulseLaser
 D typeinfo for CFuncTankRocket
 D typeinfo for CFuncTankTrain
 D typeinfo for CFuncTrackAuto
 D typeinfo for CFuncTrackChange
 D typeinfo for CFuncTrackTrain
 D typeinfo for CFuncTrain
 D typeinfo for CFuncTrainControls
 D typeinfo for CFuncVPhysicsClip
 D typeinfo for CFuncVehicleClip
 D typeinfo for CFuncWall
 D typeinfo for CFuncWallToggle
 D typeinfo for CFunc_Dust
 D typeinfo for CFunc_DustCloud
 D typeinfo for CFunc_DustMotes
 D typeinfo for CFunc_LOD
 D typeinfo for CFunctor
 D typeinfo for CFunctor2<void (*)(CFunctor**, unsigned int), CFunctor**, int, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >
 D typeinfo for CFunctor2<void (*)(IPhysicsObject*, Vector const&), IPhysicsObject*, Vector, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >
 D typeinfo for CFunctor3<void (*)(IPhysicsObject*, Vector const&, Vector const&), IPhysicsObject*, Vector, Vector, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >
 D typeinfo for CFunctor4<CBaseEntity* (*)(CBaseEntity*, CBaseEntity*, bool, float), CBaseEntity*, CBaseEntity*, bool, float, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >
 D typeinfo for CGameDLL_ConVarAccessor
 D typeinfo for CGameEnd
 D typeinfo for CGameEventListener
 D typeinfo for CGameGibManager
 D typeinfo for CGameMovement
 D typeinfo for CGamePlayerEquip
 D typeinfo for CGamePlayerTeam
 D typeinfo for CGamePlayerZone
 D typeinfo for CGameRules
 D typeinfo for CGameRulesProxy
 D typeinfo for CGameScore
 D typeinfo for CGameStringPool
 D typeinfo for CGameText
 D typeinfo for CGameUI
 D typeinfo for CGameWeaponManager
 D typeinfo for CGenericActor
 D typeinfo for CGenericCycler
 D typeinfo for CGenericFlexCycler
 D typeinfo for CGenericNPC
 D typeinfo for CGib
 D typeinfo for CGibShooter
 D typeinfo for CGlobalEntityList
 D typeinfo for CGlobalState
 D typeinfo for CGrabController
 D typeinfo for CGrenadeAR2
 D typeinfo for CGrenadeBeam
 D typeinfo for CGrenadeBeamChaser
 D typeinfo for CGrenadeBugBait
 D typeinfo for CGrenadeFrag
 D typeinfo for CGrenadeHelicopter
 D typeinfo for CGrenadeHomer
 D typeinfo for CGrenadePathfollower
 D typeinfo for CGunTarget
 D typeinfo for CGunshipRagdollMotion
 D typeinfo for CHL2EventLog
 D typeinfo for CHL2GameMovement
 D typeinfo for CHL2MPGameRulesProxy
 D typeinfo for CHL2MPMachineGun
 D typeinfo for CHL2MPRagdoll
 D typeinfo for CHL2MPRules
 D typeinfo for CHL2MPSWeaponInfo
 D typeinfo for CHL2MP_Player
 D typeinfo for CHL2NetworkBuildHelper
 D typeinfo for CHL2PlayerLocalData
 D typeinfo for CHL2_Player
 D typeinfo for CHL2_Player::NetworkVar_m_HL2Local
 D typeinfo for CHLPlayerMove
 D typeinfo for CHLTVDirector
 D typeinfo for CHalfLife2
 D typeinfo for CHalfLife2Proxy
 D typeinfo for CHandleDummy
 D typeinfo for CHandleTest
 D typeinfo for CHangRope
 D typeinfo for CHeadcrab
 D typeinfo for CHealthKit
 D typeinfo for CHealthVial
 D typeinfo for CHelicopterChunk
 D typeinfo for CIKSaveRestoreOps
 D typeinfo for CInfoAPCMissileHint
 D typeinfo for CInfoCameraLink
 D typeinfo for CInfoIntermission
 D typeinfo for CInfoLadderDismount
 D typeinfo for CInfoLightingRelative
 D typeinfo for CInfoMassCenter
 D typeinfo for CInfoOverlayAccessor
 D typeinfo for CInfoTarget
 D typeinfo for CInfoTeleporterCountdown
 D typeinfo for CInstancedResponseSystem
 D typeinfo for CInstancedSceneEntity
 D typeinfo for CItem
 D typeinfo for CItemBattery
 D typeinfo for CItemSoda
 D typeinfo for CItemSuit
 D typeinfo for CItem_AR2AltFireRound
 D typeinfo for CItem_AR2_Grenade
 D typeinfo for CItem_AmmoCrate
 D typeinfo for CItem_Box357Rounds
 D typeinfo for CItem_BoxBuckshot
 D typeinfo for CItem_BoxFlareRounds
 D typeinfo for CItem_BoxLRounds
 D typeinfo for CItem_BoxMRounds
 D typeinfo for CItem_BoxSRounds
 D typeinfo for CItem_BoxSniperRounds
 D typeinfo for CItem_BoxXBowRounds
 D typeinfo for CItem_DynamicResupply
 D typeinfo for CItem_FlareRound
 D typeinfo for CItem_ItemCrate
 D typeinfo for CItem_LargeBox357Rounds
 D typeinfo for CItem_LargeBoxLRounds
 D typeinfo for CItem_LargeBoxMRounds
 D typeinfo for CItem_LargeBoxSRounds
 D typeinfo for CItem_RPG_Round
 D typeinfo for CKeepUpright
 D typeinfo for CLagCompensationManager
 D typeinfo for CLaserDot
 D typeinfo for CLight
 D typeinfo for CLightGlow
 D typeinfo for CListMissions
 D typeinfo for CLogicActiveAutosave
 D typeinfo for CLogicAuto
 D typeinfo for CLogicAutosave
 D typeinfo for CLogicBranch
 D typeinfo for CLogicBranchList
 D typeinfo for CLogicCase
 D typeinfo for CLogicCollisionPair
 D typeinfo for CLogicCompare
 D typeinfo for CLogicCompareInteger
 D typeinfo for CLogicLineToEntity
 D typeinfo for CLogicMeasureMovement
 D typeinfo for CLogicNavigation
 D typeinfo for CLogicPlayerProxy
 D typeinfo for CLogicRelay
 D typeinfo for CLogicalEntity
 D typeinfo for CLookDoor
 D typeinfo for CLookDoorThinker
 D typeinfo for CMapLoadEntityFilter
 D typeinfo for CMaterialModifyControl
 D typeinfo for CMathColorBlend
 D typeinfo for CMathCounter
 D typeinfo for CMathRemap
 D typeinfo for CMattsPipe
 D typeinfo for CMemberFunctor0<CParallelProcessor<QueryCacheUpdateRecord_t, CFuncJobItemProcessor<QueryCacheUpdateRecord_t> >*, void (CParallelProcessor<QueryCacheUpdateRecord_t, CFuncJobItemProcessor<QueryCacheUpdateRecord_t> >::*)(), CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>
 D typeinfo for CMemberFunctor0<CPropCombineBall*, void (CPropCombineBall::*)(), CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>
 D typeinfo for CMemberFunctor1<CAI_Navigator*, bool (CAI_Navigator::*)(Vector const&), Vector, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>
 D typeinfo for CMemberFunctor1<CNPC_RollerMine*, void (CNPC_RollerMine::*)(CBaseEntity*), CBaseEntity*, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>
 D typeinfo for CMemberFunctor2<CAI_Navigator*, bool (CAI_Navigator::*)(AI_NavGoal_t const&, unsigned int), AI_NavGoal_t, unsigned int, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>
 D typeinfo for CMemberFunctor3<CBreakableProp*, void (CBreakableProp::*)(Vector const&, Vector const&, QAngle const&), Vector, Vector, QAngle, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>
 D typeinfo for CMessage
 D typeinfo for CMessageEntity
 D typeinfo for CMissile
 D typeinfo for CModelSoundsCache
 D typeinfo for CModelSoundsCacheSaver
 D typeinfo for CMomentaryRotButton
 D typeinfo for CMortarShell
 D typeinfo for CMotorController
 D typeinfo for CMoveHelperServer
 D typeinfo for CMovementSpeedMod
 D typeinfo for CMultiSource
 D typeinfo for CMultiplayRules
 D typeinfo for CNPCBaseInteractive<CAI_BaseNPC>
 D typeinfo for CNPCBaseInteractive<CAI_BasePhysicsFlyingBot>
 D typeinfo for CNPCMaker
 D typeinfo for CNPCSpawnDestination
 D typeinfo for CNPC_APCDriver
 D typeinfo for CNPC_Alyx
 D typeinfo for CNPC_Antlion
 D typeinfo for CNPC_AntlionGuard
 D typeinfo for CNPC_AttackHelicopter
 D typeinfo for CNPC_Barnacle
 D typeinfo for CNPC_Barney
 D typeinfo for CNPC_BaseScanner
 D typeinfo for CNPC_BaseZombie
 D typeinfo for CNPC_Breen
 D typeinfo for CNPC_Bullseye
 D typeinfo for CNPC_CScanner
 D typeinfo for CNPC_CeilingTurret
 D typeinfo for CNPC_Citizen
 D typeinfo for CNPC_ClawScanner
 D typeinfo for CNPC_Combine
 D typeinfo for CNPC_Combine::CCombineStandoffBehavior
 D typeinfo for CNPC_CombineCamera
 D typeinfo for CNPC_CombineDropship
 D typeinfo for CNPC_CombineGunship
 D typeinfo for CNPC_CombineS
 D typeinfo for CNPC_CraneDriver
 D typeinfo for CNPC_Crow
 D typeinfo for CNPC_Dog
 D typeinfo for CNPC_Eli
 D typeinfo for CNPC_EnemyFinder
 D typeinfo for CNPC_EnemyFinderCombineCannon
 D typeinfo for CNPC_Fisherman
 D typeinfo for CNPC_FloorTurret
 D typeinfo for CNPC_Furniture
 D typeinfo for CNPC_GMan
 D typeinfo for CNPC_GroundTurret
 D typeinfo for CNPC_Ichthyosaur
 D typeinfo for CNPC_Kleiner
 D typeinfo for CNPC_Launcher
 D typeinfo for CNPC_Manhack
 D typeinfo for CNPC_MetroPolice
 D typeinfo for CNPC_MissileDefense
 D typeinfo for CNPC_Monk
 D typeinfo for CNPC_Mossman
 D typeinfo for CNPC_Pigeon
 D typeinfo for CNPC_PlayerCompanion
 D typeinfo for CNPC_PoisonZombie
 D typeinfo for CNPC_RollerMine
 D typeinfo for CNPC_Seagull
 D typeinfo for CNPC_Stalker
 D typeinfo for CNPC_Strider
 D typeinfo for CNPC_Strider::CNavigator
 D typeinfo for CNPC_Strider::CPathfinder
 D typeinfo for CNPC_VehicleDriver
 D typeinfo for CNPC_Vortigaunt
 D typeinfo for CNewNPC
 D typeinfo for CNewRecharge
 D typeinfo for CNewWallHealth
 D typeinfo for CNodeEnt
 D typeinfo for CNodeFilter
 D typeinfo for CNotifyList
 D typeinfo for CNullEntity
 D typeinfo for COrnamentProp
 D typeinfo for COverrideMoveCache
 D typeinfo for CPASAttenuationFilter
 D typeinfo for CPASFilter
 D typeinfo for CPVSFilter
 D typeinfo for CParticleFire
 D typeinfo for CParticleLight
 D typeinfo for CParticlePerformanceMonitor
 D typeinfo for CParticleSystem
 D typeinfo for CParticleSystemQuery
 D typeinfo for CPathCorner
 D typeinfo for CPathCornerCrash
 D typeinfo for CPathKeyFrame
 D typeinfo for CPathTrack
 D typeinfo for CPathfindNearestNodeFilter
 D typeinfo for CPhysBallSocket
 D typeinfo for CPhysBox
 D typeinfo for CPhysBoxMultiplayer
 D typeinfo for CPhysConstraint
 D typeinfo for CPhysConstraintEvents
 D typeinfo for CPhysConstraintSystem
 D typeinfo for CPhysConvert
 D typeinfo for CPhysExplosion
 D typeinfo for CPhysFixed
 D typeinfo for CPhysForce
 D typeinfo for CPhysHinge
 D typeinfo for CPhysImpact
 D typeinfo for CPhysLength
 D typeinfo for CPhysMagnet
 D typeinfo for CPhysMotor
 D typeinfo for CPhysObjSaveRestoreOps
 D typeinfo for CPhysPulley
 D typeinfo for CPhysSaveRestoreBlockHandler
 D typeinfo for CPhysSlideConstraint
 D typeinfo for CPhysSphere
 D typeinfo for CPhysThruster
 D typeinfo for CPhysTorque
 D typeinfo for CPhysicsCannister
 D typeinfo for CPhysicsEntitySolver
 D typeinfo for CPhysicsGameTrace
 D typeinfo for CPhysicsHook
 D typeinfo for CPhysicsNPCSolver
 D typeinfo for CPhysicsPlayerCallback
 D typeinfo for CPhysicsProp
 D typeinfo for CPhysicsPropMultiplayer
 D typeinfo for CPhysicsPropRespawnable
 D typeinfo for CPhysicsPushedEntities
 D typeinfo for CPhysicsShake
 D typeinfo for CPhysicsSpring
 D typeinfo for CPhysicsWind
 D typeinfo for CPhysicsWire
 D typeinfo for CPlasma
 D typeinfo for CPlatTrigger
 D typeinfo for CPlayerInfo
 D typeinfo for CPlayerInfoManager
 D typeinfo for CPlayerLocalData
 D typeinfo for CPlayerLocalData::NetworkVar_m_PlayerFog
 D typeinfo for CPlayerLocalData::NetworkVar_m_audio
 D typeinfo for CPlayerLocalData::NetworkVar_m_skybox3d
 D typeinfo for CPlayerMove
 D typeinfo for CPlayerPickupController
 D typeinfo for CPlayerResource
 D typeinfo for CPlayerState
 D typeinfo for CPluginBotManager
 D typeinfo for CPluginHelpersCheck
 D typeinfo for CPointAngleSensor
 D typeinfo for CPointAngularVelocitySensor
 D typeinfo for CPointBonusMapsAccessor
 D typeinfo for CPointCamera
 D typeinfo for CPointClientCommand
 D typeinfo for CPointCombineBallLauncher
 D typeinfo for CPointCommentaryNode
 D typeinfo for CPointDevShotCamera
 D typeinfo for CPointEntity
 D typeinfo for CPointGamestatsCounter
 D typeinfo for CPointHurt
 D typeinfo for CPointPlayerMoveConstraint
 D typeinfo for CPointProximitySensor
 D typeinfo for CPointPush
 D typeinfo for CPointServerCommand
 D typeinfo for CPointSpotlight
 D typeinfo for CPointTeleport
 D typeinfo for CPointTemplate
 D typeinfo for CPointTemplatePrecacher
 D typeinfo for CPointVelocitySensor
 D typeinfo for CPoseController
 D typeinfo for CPostFrameNavigationHook
 D typeinfo for CPrecacheOtherList
 D typeinfo for CPrecipitation
 D typeinfo for CPredictedViewModel
 D typeinfo for CPrisonerPodServerVehicle
 D typeinfo for CProjectedDecal
 D typeinfo for CPropAPC
 D typeinfo for CPropAirboat
 D typeinfo for CPropCombineBall
 D typeinfo for CPropCrane
 D typeinfo for CPropData
 D typeinfo for CPropDoorRotating
 D typeinfo for CPropThumper
 D typeinfo for CPropVehicle
 D typeinfo for CPropVehicleDriveable
 D typeinfo for CPropVehiclePrisonerPod
 D typeinfo for CPropVehicleViewController
 D typeinfo for CProtoSniper
 D typeinfo for CPushBlockerEnum
 D typeinfo for CPushable
 D typeinfo for CRagGib
 D typeinfo for CRagdollAnimatedFriction
 D typeinfo for CRagdollBoogie
 D typeinfo for CRagdollCollisionRules
 D typeinfo for CRagdollConstraint
 D typeinfo for CRagdollLRURetirement
 D typeinfo for CRagdollMagnet
 D typeinfo for CRagdollManager
 D typeinfo for CRagdollProp
 D typeinfo for CRagdollPropAttached
 D typeinfo for CRallyPoint
 D typeinfo for CRecharge
 D typeinfo for CRecipientFilter
 D typeinfo for CRefCountServiceBase<true, CRefMT>
 D typeinfo for CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >
 D typeinfo for CReliableBroadcastRecipientFilter
 D typeinfo for CReservePlayerSpot
 D typeinfo for CRespawnEntitiesFilter
 D typeinfo for CResponseSystem
 D typeinfo for CResponseSystemSaveRestoreOps
 D typeinfo for CRestore
 D typeinfo for CRevertSaved
 D typeinfo for CRollerController
 D typeinfo for CRopeAnchor
 D typeinfo for CRopeKeyframe
 D typeinfo for CRopePhysics<512>
 D typeinfo for CRotButton
 D typeinfo for CRotDoor
 D typeinfo for CRotorWashEmitter
 D typeinfo for CRotorWashShooter
 D typeinfo for CRuleBrushEntity
 D typeinfo for CRuleEntity
 D typeinfo for CRulePointEntity
 D typeinfo for CSatchelCharge
 D typeinfo for CSave
 D typeinfo for CSaveRestoreBlockSet
 D typeinfo for CSceneEntity
 D typeinfo for CSceneFindMarkFilter
 D typeinfo for CSceneFindNearestMarkFilter
 D typeinfo for CSceneListManager
 D typeinfo for CSceneManager
 D typeinfo for CSceneTokenProcessor
 D typeinfo for CScriptIntro
 D typeinfo for CScriptedTarget
 D typeinfo for CServerBenchmark
 D typeinfo for CServerChoreoTools
 D typeinfo for CServerDLLSharedAppSystems
 D typeinfo for CServerGameClients
 D typeinfo for CServerGameDLL
 D typeinfo for CServerGameEnts
 D typeinfo for CServerGameTags
 D typeinfo for CServerNetworkProperty
 D typeinfo for CServerOnlyEntity
 D typeinfo for CServerOnlyPointEntity
 D typeinfo for CServerRagdollTrigger
 D typeinfo for CServerTools
 D typeinfo for CShadowControl
 D typeinfo for CShowZone
 D typeinfo for CShower
 D typeinfo for CSimThinkManager
 D typeinfo for CSimplePhysics::IHelper
 D typeinfo for CSimplePhysicsBrush
 D typeinfo for CSimplePhysicsProp
 D typeinfo for CSingleUserRecipientFilter
 D typeinfo for CSingleplayRules
 D typeinfo for CSkipKeys
 D typeinfo for CSkyCamera
 D typeinfo for CSlideshowDisplay
 D typeinfo for CSmokeStack
 D typeinfo for CSniperBullet
 D typeinfo for CSniperTarget
 D typeinfo for CSolidSetDefaults
 D typeinfo for CSoundControllerImp
 D typeinfo for CSoundEmitterSystem
 D typeinfo for CSoundEnt
 D typeinfo for CSoundEnvelopeController
 D typeinfo for CSoundPatchSaveRestoreOps
 D typeinfo for CSoundscapeSystem
 D typeinfo for CSparkTrail
 D typeinfo for CSpeaker
 D typeinfo for CSpotlightEnd
 D typeinfo for CSprayCan
 D typeinfo for CSprite
 D typeinfo for CSpriteOriented
 D typeinfo for CSpriteTrail
 D typeinfo for CSquadInsignia
 D typeinfo for CStdStringSaveRestoreOps
 D typeinfo for CSteamJet
 D typeinfo for CStriderMinigun
 D typeinfo for CStringTableSaveRestoreOps
 D typeinfo for CStripWeapons
 D typeinfo for CSun
 D typeinfo for CTEAntlionDust
 D typeinfo for CTEArmorRicochet
 D typeinfo for CTEBSPDecal
 D typeinfo for CTEBaseBeam
 D typeinfo for CTEBeamEntPoint
 D typeinfo for CTEBeamEnts
 D typeinfo for CTEBeamFollow
 D typeinfo for CTEBeamLaser
 D typeinfo for CTEBeamPoints
 D typeinfo for CTEBeamRing
 D typeinfo for CTEBeamRingPoint
 D typeinfo for CTEBeamSpline
 D typeinfo for CTEBloodSprite
 D typeinfo for CTEBloodStream
 D typeinfo for CTEBreakModel
 D typeinfo for CTEBubbleTrail
 D typeinfo for CTEBubbles
 D typeinfo for CTEClientProjectile
 D typeinfo for CTEConcussiveExplosion
 D typeinfo for CTEDecal
 D typeinfo for CTEDust
 D typeinfo for CTEDynamicLight
 D typeinfo for CTEEffectDispatch
 D typeinfo for CTEEnergySplash
 D typeinfo for CTEExplosion
 D typeinfo for CTEFizz
 D typeinfo for CTEFootprintDecal
 D typeinfo for CTEGaussExplosion
 D typeinfo for CTEGlowSprite
 D typeinfo for CTEHL2MPFireBullets
 D typeinfo for CTEImpact
 D typeinfo for CTEKillPlayerAttachments
 D typeinfo for CTELargeFunnel
 D typeinfo for CTEMetalSparks
 D typeinfo for CTEMuzzleFlash
 D typeinfo for CTEParticleSystem
 D typeinfo for CTEPhysicsProp
 D typeinfo for CTEPlayerDecal
 D typeinfo for CTEProjectedDecal
 D typeinfo for CTEShatterSurface
 D typeinfo for CTEShowLine
 D typeinfo for CTESmoke
 D typeinfo for CTESparks
 D typeinfo for CTESprite
 D typeinfo for CTESpriteSpray
 D typeinfo for CTEWorldDecal
 D typeinfo for CTacticalMissionManager
 D typeinfo for CTacticalMissionManager::IForEachMission
 D typeinfo for CTankTargetChange
 D typeinfo for CTankTrainAI
 D typeinfo for CTargetCDAudioRep
 D typeinfo for CTargetChangeGravity
 D typeinfo for CTargetGunshipCrash
 D typeinfo for CTeam
 D typeinfo for CTeamControlPoint
 D typeinfo for CTeamControlPointMaster
 D typeinfo for CTeamControlPointRound
 D typeinfo for CTeamRecipientFilter
 D typeinfo for CTeamRoundTimer
 D typeinfo for CTeamSpawnPoint
 D typeinfo for CTeamTrainWatcher
 D typeinfo for CTeamVehicleSpawnPoint
 D typeinfo for CTeamplayRoundBasedRules
 D typeinfo for CTeamplayRules
 D typeinfo for CTempEntTester
 D typeinfo for CTempEntsSystem
 D typeinfo for CTemplateNPCMaker
 D typeinfo for CTemplate_SaveRestoreBlockHandler
 D typeinfo for CTemplatesHook
 D typeinfo for CTesla
 D typeinfo for CTestEffect
 D typeinfo for CTestTraceline
 D typeinfo for CTest_ProxyToggle_Networkable
 D typeinfo for CTextureToggle
 D typeinfo for CThinkContextsSaveDataOps
 D typeinfo for CThrustController
 D typeinfo for CTimerEntity
 D typeinfo for CTongueEntitiesEnum
 D typeinfo for CToolFrameworkServer
 D typeinfo for CTraceFilter
 D typeinfo for CTraceFilterAgainstEntityList
 D typeinfo for CTraceFilterAntlion
 D typeinfo for CTraceFilterCharge
 D typeinfo for CTraceFilterChopper
 D typeinfo for CTraceFilterCollisionGroupDelta
 D typeinfo for CTraceFilterDoor
 D typeinfo for CTraceFilterEntitiesOnly
 D typeinfo for CTraceFilterEntity
 D typeinfo for CTraceFilterEntityIgnoreOther
 D typeinfo for CTraceFilterLOS
 D typeinfo for CTraceFilterMelee
 D typeinfo for CTraceFilterMetroPolice
 D typeinfo for CTraceFilterNav
 D typeinfo for CTraceFilterNoCombatCharacters
 D typeinfo for CTraceFilterNoOwnerTest
 D typeinfo for CTraceFilterOnlyNPCsAndPlayer
 D typeinfo for CTraceFilterPlayersNPCs
 D typeinfo for CTraceFilterPlayersNPCsPhysicsProps
 D typeinfo for CTraceFilterPushFinal
 D typeinfo for CTraceFilterPushMove
 D typeinfo for CTraceFilterSimple
 D typeinfo for CTraceFilterSimpleList
 D typeinfo for CTraceFilterSimpleNPCExclude
 D typeinfo for CTraceFilterSkipNPCs
 D typeinfo for CTraceFilterSkipPhysics
 D typeinfo for CTraceFilterSkipTwoEntities
 D typeinfo for CTraceFilterWorldOnly
 D typeinfo for CTraceListData
 D typeinfo for CTracePassFilter
 D typeinfo for CTriggerApplyImpulse
 D typeinfo for CTriggerAreaCapture
 D typeinfo for CTriggerAreaCaptureShim
 D typeinfo for CTriggerBrush
 D typeinfo for CTriggerCDAudio
 D typeinfo for CTriggerCamera
 D typeinfo for CTriggerGravity
 D typeinfo for CTriggerHurt
 D typeinfo for CTriggerHurtShim
 D typeinfo for CTriggerImpact
 D typeinfo for CTriggerLook
 D typeinfo for CTriggerMultiple
 D typeinfo for CTriggerOnce
 D typeinfo for CTriggerPhysicsTrap
 D typeinfo for CTriggerPlayerMovement
 D typeinfo for CTriggerProximity
 D typeinfo for CTriggerPush
 D typeinfo for CTriggerRPGFire
 D typeinfo for CTriggerRemove
 D typeinfo for CTriggerSave
 D typeinfo for CTriggerSoundscape
 D typeinfo for CTriggerTeleport
 D typeinfo for CTriggerTeleportRelative
 D typeinfo for CTriggerToggleSave
 D typeinfo for CTriggerTraceEnum
 D typeinfo for CTriggerVPhysicsMotion
 D typeinfo for CTriggerVolume
 D typeinfo for CTriggerWateryDeath
 D typeinfo for CTriggerWeaponDissolve
 D typeinfo for CTriggerWeaponStrip
 D typeinfo for CTriggerWind
 D typeinfo for CTripmineGrenade
 D typeinfo for CTurretTipController
 D typeinfo for CUsePushFilter
 D typeinfo for CUserCmd
 D typeinfo for CUtlCStringConversion
 D typeinfo for CUtlCachedFileData<CModelSoundsCache>
 D typeinfo for CUtlCharConversion
 D typeinfo for CUtlMapDataOps<CUtlMap<string_t, CSimpleSimTimer, char>, 2, 10>
 D typeinfo for CUtlNoEscConversion
 D typeinfo for CUtlSymbolDataOps
 D typeinfo for CUtlVectorDataOps<CAI_InterestTarget, 10>
 D typeinfo for CUtlVectorDataOps<CUtlVector<AISquadEnemyInfo_t, CUtlMemory<AISquadEnemyInfo_t, int> >, 10>
 D typeinfo for CUtlVectorDataOps<CUtlVector<AI_Waypoint_t, CUtlMemory<AI_Waypoint_t, int> >, 10>
 D typeinfo for CUtlVectorDataOps<CUtlVector<CAI_ScriptConditionsElement, CUtlMemory<CAI_ScriptConditionsElement, int> >, 10>
 D typeinfo for CUtlVectorDataOps<CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer, int> >, 10>
 D typeinfo for CUtlVectorDataOps<CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >, 12>
 D typeinfo for CUtlVectorDataOps<CUtlVector<CHandle<CAI_BaseNPC>, CUtlMemory<CHandle<CAI_BaseNPC>, int> >, 13>
 D typeinfo for CUtlVectorDataOps<CUtlVector<CHandle<CBaseCombatWeapon>, CUtlMemory<CHandle<CBaseCombatWeapon>, int> >, 13>
 D typeinfo for CUtlVectorDataOps<CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity>, int> >, 13>
 D typeinfo for CUtlVectorDataOps<CUtlVector<CHandle<CBaseFlex>, CUtlMemory<CHandle<CBaseFlex>, int> >, 13>
 D typeinfo for CUtlVectorDataOps<CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer>, int> >, 13>
 D typeinfo for CUtlVectorDataOps<CUtlVector<CHandle<CFish>, CUtlMemory<CHandle<CFish>, int> >, 13>
 D typeinfo for CUtlVectorDataOps<CUtlVector<CHandle<CNPC_Antlion>, CUtlMemory<CHandle<CNPC_Antlion>, int> >, 13>
 D typeinfo for CUtlVectorDataOps<CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity>, int> >, 13>
 D typeinfo for CUtlVectorDataOps<CUtlVector<CHandle<CSceneListManager>, CUtlMemory<CHandle<CSceneListManager>, int> >, 13>
 D typeinfo for CUtlVectorDataOps<CUtlVector<CHandle<CVGuiScreen>, CUtlMemory<CHandle<CVGuiScreen>, int> >, 13>
 D typeinfo for CUtlVectorDataOps<CUtlVector<CPassengerInfo, CUtlMemory<CPassengerInfo, int> >, 10>
 D typeinfo for CUtlVectorDataOps<CUtlVector<Relationship_t, CUtlMemory<Relationship_t, int> >, 10>
 D typeinfo for CUtlVectorDataOps<CUtlVector<ResponseContext_t, CUtlMemory<ResponseContext_t, int> >, 10>
 D typeinfo for CUtlVectorDataOps<CUtlVector<SaveRestoreBlockHeader_t, CUtlMemory<SaveRestoreBlockHeader_t, int> >, 10>
 D typeinfo for CUtlVectorDataOps<CUtlVector<ScriptedNPCInteraction_t, CUtlMemory<ScriptedNPCInteraction_t, int> >, 10>
 D typeinfo for CUtlVectorDataOps<CUtlVector<UnreachableEnt_t, CUtlMemory<UnreachableEnt_t, int> >, 10>
 D typeinfo for CUtlVectorDataOps<CUtlVector<float, CUtlMemory<float, int> >, 16>
 D typeinfo for CUtlVectorDataOps<CUtlVector<globalentity_t, CUtlMemory<globalentity_t, int> >, 10>
 D typeinfo for CUtlVectorDataOps<CUtlVector<int, CUtlMemory<int, int> >, 5>
 D typeinfo for CUtlVectorDataOps<CUtlVector<magnetted_objects_t, CUtlMemory<magnetted_objects_t, int> >, 10>
 D typeinfo for CUtlVectorDataOps<CUtlVector<modifiedconvars_t, CUtlMemory<modifiedconvars_t, int> >, 10>
 D typeinfo for CUtlVectorDataOps<CUtlVector<physfollower_t, CUtlMemory<physfollower_t, int> >, 10>
 D typeinfo for CUtlVectorDataOps<CUtlVector<template_t, CUtlMemory<template_t, int> >, 10>
 D typeinfo for CUtlVectorDataOps<CUtlVector<thinkfunc_t, CUtlMemory<thinkfunc_t, int> >, 10>
 D typeinfo for CUtlVectorDataOps<CUtlVector<vehicle_crashsound_t, CUtlMemory<vehicle_crashsound_t, int> >, 10>
 D typeinfo for CUtlVectorDataOps<CUtlVector<vehicle_gear_t, CUtlMemory<vehicle_gear_t, int> >, 10>
 D typeinfo for CUtlVectorDataOps<CUtlVector<washentity_t, CUtlMemory<washentity_t, int> >, 10>
 D typeinfo for CVGuiScreen
 D typeinfo for CVarBitVecSaveRestoreOps<CBitVec<32> >
 D typeinfo for CVariantSaveDataOps
 D typeinfo for CVehicleSoundsParser
 D typeinfo for CVoiceGameMgr
 D typeinfo for CVoiceGameMgrHelper
 D typeinfo for CVortigauntChargeToken
 D typeinfo for CVortigauntEffectDispel
 D typeinfo for CVoteController
 D typeinfo for CVoteControllerSystem
 D typeinfo for CWC_UpdateIgnoreList
 D typeinfo for CWallHealth
 D typeinfo for CWaterBullet
 D typeinfo for CWaterLODControl
 D typeinfo for CWaterTraceFilter
 D typeinfo for CWateryDeathLeech
 D typeinfo for CWeapon357
 D typeinfo for CWeaponAR2
 D typeinfo for CWeaponAnnabelle
 D typeinfo for CWeaponBugBait
 D typeinfo for CWeaponCrossbow
 D typeinfo for CWeaponCrowbar
 D typeinfo for CWeaponCubemap
 D typeinfo for CWeaponCycler
 D typeinfo for CWeaponFrag
 D typeinfo for CWeaponHL2MPBase
 D typeinfo for CWeaponLOSFilter
 D typeinfo for CWeaponList
 D typeinfo for CWeaponPhysCannon
 D typeinfo for CWeaponPistol
 D typeinfo for CWeaponRPG
 D typeinfo for CWeaponSMG1
 D typeinfo for CWeaponShotgun
 D typeinfo for CWeaponStunStick
 D typeinfo for CWeapon_SLAM
 D typeinfo for CWeightButton
 D typeinfo for CWindowPane
 D typeinfo for CWorkerThread
 D typeinfo for CWorld
 D typeinfo for CWorldItem
 D typeinfo for CWreckage
 D typeinfo for CZombie
 D typeinfo for ConCommand
 D typeinfo for ConCommandBase
 D typeinfo for ConVar
 D typeinfo for CountdownTimer
 D typeinfo for DustTrail
 D typeinfo for EntityParticleTrailInfo_t
 D typeinfo for FileWeaponInfo_t
 D typeinfo for FilterDamageType
 D typeinfo for FilterTeam
 D typeinfo for IAI_MovementSink
 D typeinfo for IAchievement
 D typeinfo for IAchievementMgr
 D typeinfo for IAppSystem
 D typeinfo for IBaseCacheInfo
 D typeinfo for IBaseInterface
 D typeinfo for IBaseProjectileAutoList
 D typeinfo for IBehaviorBackBridge
 D typeinfo for IBotController
 D typeinfo for IBotManager
 D typeinfo for IBreakableWithPropData
 D typeinfo for IChoreoEventCallback
 D typeinfo for IChoreoStringPool
 D typeinfo for ICollideable
 D typeinfo for ICommandCallback
 D typeinfo for ICommandCompletionCallback
 D typeinfo for IConCommandBaseAccessor
 D typeinfo for IConVar
 D typeinfo for ICurveDataAccessor
 D typeinfo for IDecalEmitterSystem
 D typeinfo for IDrivableVehicle
 D typeinfo for IEffects
 D typeinfo for IEntityDataInstantiator
 D typeinfo for IEntityEnumerator
 D typeinfo for IEntityFactory
 D typeinfo for IEntityFactoryDictionary
 D typeinfo for IEntityFindFilter
 D typeinfo for IEntityListener
 D typeinfo for IEntitySaveUtils
 D typeinfo for IEventRegisterCallback
 D typeinfo for IForEachNavArea
 D typeinfo for IGameEventListener2
 D typeinfo for IGameMovement
 D typeinfo for IGameSystem
 D typeinfo for IGameSystemPerFrame
 D typeinfo for IHLTVDirector
 D typeinfo for IHandleEntity
 D typeinfo for IHasOwner
 D typeinfo for ILagCompensationManager
 D typeinfo for IMapEntityFilter
 D typeinfo for IMinigunHost
 D typeinfo for IModelLoadCallback
 D typeinfo for IMotionEvent
 D typeinfo for IMoveHelper
 D typeinfo for IMoveHelperServer
 D typeinfo for IMultiplayerPhysics
 D typeinfo for INPCInteractive
 D typeinfo for INPCPassengerCarrier
 D typeinfo for INearestNodeFilter
 D typeinfo for INodeListFilter
 D typeinfo for INotify
 D typeinfo for IParentPropInteraction
 D typeinfo for IParticleOperatorDefinition
 D typeinfo for IParticleSystemQuery
 D typeinfo for IPartitionEnumerator
 D typeinfo for IPartitionQueryCallback
 D typeinfo for IPhysSaveRestoreManager
 D typeinfo for IPhysicsCollisionEvent
 D typeinfo for IPhysicsCollisionSolver
 D typeinfo for IPhysicsConstraintEvent
 D typeinfo for IPhysicsGameTrace
 D typeinfo for IPhysicsObjectEvent
 D typeinfo for IPhysicsPlayerControllerEvent
 D typeinfo for IPhysicsPropAutoList
 D typeinfo for IPlayerInfo
 D typeinfo for IPlayerInfoManager
 D typeinfo for IPlayerPickupVPhysics
 D typeinfo for IPluginHelpersCheck
 D typeinfo for IPositionWatcher
 D typeinfo for IPredictionSystem
 D typeinfo for IRecipientFilter
 D typeinfo for IRefCounted
 D typeinfo for IResponseFilter
 D typeinfo for IResponseSystem
 D typeinfo for IRestore
 D typeinfo for IRotorWashShooter
 D typeinfo for ISave
 D typeinfo for ISaveRestoreBlockHandler
 D typeinfo for ISaveRestoreBlockSet
 D typeinfo for ISaveRestoreOps
 D typeinfo for ISceneTokenProcessor
 D typeinfo for IScorer
 D typeinfo for IServerBenchmark
 D typeinfo for IServerChoreoTools
 D typeinfo for IServerDLLSharedAppSystems
 D typeinfo for IServerEntity
 D typeinfo for IServerGameClients
 D typeinfo for IServerGameDLL
 D typeinfo for IServerGameEnts
 D typeinfo for IServerGameTags
 D typeinfo for IServerNetworkable
 D typeinfo for IServerTools
 D typeinfo for IServerUnknown
 D typeinfo for IServerVehicle
 D typeinfo for IStriderMinigunHost
 D typeinfo for ITFTeamTrainWatcher
 D typeinfo for ITempEntsSystem
 D typeinfo for IToolFrameworkServer
 D typeinfo for ITraceFilter
 D typeinfo for ITriggerAreaCaptureAutoList
 D typeinfo for ITriggerHurtAutoList
 D typeinfo for IVPhysicsKeyHandler
 D typeinfo for IVPhysicsWatcher
 D typeinfo for IVehicle
 D typeinfo for IVoiceGameMgrHelper
 D typeinfo for IWatcherCallback
 D typeinfo for MovieExplosion
 D typeinfo for ParticleSmokeGrenade
 D typeinfo for RocketTrail
 D typeinfo for SendProp
 D typeinfo for SmokeTrail
 D typeinfo for SporeExplosion
 D typeinfo for SporeTrail
 D typeinfo for audioparams_t
 D typeinfo for fogparams_t
 D typeinfo for fogplayerparams_t
 D typeinfo for locksound_t
 D typeinfo for sky3dparams_t
 D typeinfo for sky3dparams_t::NetworkVar_fog
 D typeinfo for vehicle_crashsound_t
 D typeinfo for vehicle_gear_t
 D typeinfo for vehiclesounds_t
 D typeinfo for washentity_t
 D usermessages
 D variantFuncs
 D variant_t::Entity() const::hNull
 D variant_t::m_SaveBool
 D variant_t::m_SaveColor
 D variant_t::m_SaveEHandle
 D variant_t::m_SaveFloat
 D variant_t::m_SaveInt
 D variant_t::m_SavePositionVector
 D variant_t::m_SaveString
 D variant_t::m_SaveVector
 D vehicle_crashsound_t::m_DataMap
 D vehicle_gear_t::m_DataMap
 D vehiclesound_parsenames
 D vehiclesounds_t::m_DataMap
 D vtable for AR2Explosion
 D vtable for CAISound
 D vtable for CAI_ActBusyBehavior
 D vtable for CAI_ActBusyGoal
 D vtable for CAI_ActBusyQueueGoal
 D vtable for CAI_AllyManager
 D vtable for CAI_AllySpeechManager
 D vtable for CAI_AntlionFollowBehavior
 D vtable for CAI_AssaultBehavior
 D vtable for CAI_AssaultGoal
 D vtable for CAI_BaseActor
 D vtable for CAI_BaseNPC
 D vtable for CAI_BasePhysicsFlyingBot
 D vtable for CAI_BattleLine
 D vtable for CAI_BehaviorHost<CAI_BaseNPC>
 D vtable for CAI_BehaviorHost<CAI_BlendedNPC>
 D vtable for CAI_BlendedMotor
 D vtable for CAI_ChangeHintGroup
 D vtable for CAI_ChangeTarget
 D vtable for CAI_DynamicLink
 D vtable for CAI_DynamicLinkController
 D vtable for CAI_EnemiesListSaveRestoreOps
 D vtable for CAI_Expresser
 D vtable for CAI_FollowBehavior
 D vtable for CAI_FollowGoal
 D vtable for CAI_FreePass
 D vtable for CAI_FuncTankBehavior
 D vtable for CAI_GoalEntity
 D vtable for CAI_Hint
 D vtable for CAI_LeadBehavior
 D vtable for CAI_LeadGoal
 D vtable for CAI_LeadGoal_Weapon
 D vtable for CAI_LocalNavigator
 D vtable for CAI_MappedActivityBehavior_Temporary
 D vtable for CAI_Motor
 D vtable for CAI_MoveAndShootOverlay
 D vtable for CAI_MoveProbe
 D vtable for CAI_NavInHintGroupFilter
 D vtable for CAI_Navigator
 D vtable for CAI_Network
 D vtable for CAI_NetworkManager
 D vtable for CAI_Pathfinder
 D vtable for CAI_PlayerAlly
 D vtable for CAI_PoliceGoal
 D vtable for CAI_PolicingBehavior
 D vtable for CAI_RadialLinkController
 D vtable for CAI_RappelBehavior
 D vtable for CAI_Relationship
 D vtable for CAI_SaveRestoreBlockHandler
 D vtable for CAI_ScriptConditions
 D vtable for CAI_ScriptedSchedule
 D vtable for CAI_ScriptedSentence
 D vtable for CAI_ScriptedSequence
 D vtable for CAI_SensedObjectsManager
 D vtable for CAI_Senses
 D vtable for CAI_Sentence<CNPC_Combine>
 D vtable for CAI_Sentence<CNPC_MetroPolice>
 D vtable for CAI_SentenceBase
 D vtable for CAI_SpeechFilter
 D vtable for CAI_Spotlight
 D vtable for CAI_StandoffBehavior
 D vtable for CAI_StandoffGoal
 D vtable for CAI_SystemHook
 D vtable for CAI_TacticalServices
 D vtable for CAI_TestHull
 D vtable for CAPCController
 D vtable for CAPCFourWheelServerVehicle
 D vtable for CAPCMissile
 D vtable for CAchievementHLXKillEliteSoldierWithOwnEnergyBall
 D vtable for CAchievementHLXKillSoldierWithOwnGrenade
 D vtable for CAchievementHLXKillWithHopper
 D vtable for CAchievementHLXKillWithManhack
 D vtable for CAchievementHLXKillWithOneEnergyBall
 D vtable for CAchievementHLXKillWithPhysicsObjects
 D vtable for CAchievementSaveRestoreBlockHandler
 D vtable for CAchievementSaveThread
 D vtable for CActBusyAnimData
 D vtable for CActivityDataOps
 D vtable for CAimTargetManager
 D vtable for CAlyxEmpEffect
 D vtable for CAmbientGeneric
 D vtable for CAmmoDef
 D vtable for CAnchorList
 D vtable for CAngryZombieCounter
 D vtable for CAntlionMakerManager
 D vtable for CAntlionRepellant
 D vtable for CAntlionTemplateMaker
 D vtable for CAreaPortal
 D vtable for CAssaultPoint
 D vtable for CAutoGameSystem
 D vtable for CAutoGameSystemPerFrame
 D vtable for CAvoidBox
 D vtable for CAvoidSphere
 D vtable for CBarnacleTongueFilter
 D vtable for CBarnacleTongueTip
 D vtable for CBaseAchievement
 D vtable for CBaseAnimating
 D vtable for CBaseAnimatingOverlay
 D vtable for CBaseButton
 D vtable for CBaseCombatCharacter
 D vtable for CBaseCombatWeapon
 D vtable for CBaseDMStart
 D vtable for CBaseDoor
 D vtable for CBaseEntity
 D vtable for CBaseEntity::NetworkVar_m_Collision
 D vtable for CBaseEntityClassList
 D vtable for CBaseEntityList
 D vtable for CBaseEntityModelLoadProxy::Handler
 D vtable for CBaseFilter
 D vtable for CBaseFire
 D vtable for CBaseFlex
 D vtable for CBaseGameStats
 D vtable for CBaseGameStats_Driver
 D vtable for CBaseGrenade
 D vtable for CBaseGrenadeConcussion
 D vtable for CBaseGrenadeContact
 D vtable for CBaseGrenadeTimed
 D vtable for CBaseHL2MPBludgeonWeapon
 D vtable for CBaseHL2MPCombatWeapon
 D vtable for CBaseHLCombatWeapon
 D vtable for CBaseHeadcrab
 D vtable for CBaseHelicopter
 D vtable for CBaseMoveBehavior
 D vtable for CBaseNPCMaker
 D vtable for CBaseParticleEntity
 D vtable for CBasePlatTrain
 D vtable for CBasePlayer
 D vtable for CBasePlayer::NetworkVar_m_Local
 D vtable for CBasePlayer::NetworkVar_pl
 D vtable for CBaseProjectile
 D vtable for CBasePropDoor
 D vtable for CBaseRopePhysics
 D vtable for CBaseServerVehicle
 D vtable for CBaseSpriteProjectile
 D vtable for CBaseTempEntity
 D vtable for CBaseToggle
 D vtable for CBaseTrigger
 D vtable for CBaseViewModel
 D vtable for CBeam
 D vtable for CBlackHeadcrab
 D vtable for CBlendingCycler
 D vtable for CBlood
 D vtable for CBloodSplat
 D vtable for CBombDropSensor
 D vtable for CBombSuppressor
 D vtable for CBoneFollower
 D vtable for CBotCmd
 D vtable for CBounceBomb
 D vtable for CBreakModelsPrecached
 D vtable for CBreakParser
 D vtable for CBreakable
 D vtable for CBreakableProp
 D vtable for CBreakableSurface
 D vtable for CBroadcastRecipientFilter
 D vtable for CBubbling
 D vtable for CBugBaitSensor
 D vtable for CBulletsTraceFilter
 D vtable for CBullseyeList
 D vtable for CChangeLevel
 D vtable for CCheckClient
 D vtable for CChildOperatorDefinition
 D vtable for CChoreoEvent
 D vtable for CChoreoScene
 D vtable for CChoreoStringPool
 D vtable for CCitadelEnergyCore
 D vtable for CCitizenResponseSystem
 D vtable for CCleanupDefaultRelationShips
 D vtable for CCollideList
 D vtable for CCollisionEvent
 D vtable for CCollisionProperty
 D vtable for CColorCorrection
 D vtable for CColorCorrectionVolume
 D vtable for CCombatCharVisCache
 D vtable for CCombineDropshipContainer
 D vtable for CCommandPoint
 D vtable for CCommentaryAuto
 D vtable for CCommentarySystem
 D vtable for CCommentaryViewPosition
 D vtable for CCommentary_SaveRestoreBlockHandler
 D vtable for CConceptHistoriesDataOps
 D vtable for CConcussiveBlast
 D vtable for CConstantForceController
 D vtable for CConstraintAnchor
 D vtable for CCopyRecipientFilter
 D vtable for CCorpse
 D vtable for CCraneServerVehicle
 D vtable for CCraneTip
 D vtable for CCredits
 D vtable for CCrossbowBolt
 D vtable for CDataManager<CBoneCache, bonecacheparams_t, CBoneCache*, CThreadFastMutex>
 D vtable for CDataManagerBase
 D vtable for CDataObjectAccessSystem
 D vtable for CDebugHistory
 D vtable for CDecal
 D vtable for CDecalEmitterSystem
 D vtable for CDefaultAccessor
 D vtable for CDefaultParticleSystemQuery
 D vtable for CDefaultResponseSystem
 D vtable for CDefaultResponseSystemSaveRestoreBlockHandler
 D vtable for CDevShotSystem
 D vtable for CDirtySpatialPartitionEntityList
 D vtable for CDllDemandLoader
 D vtable for CDynamicLight
 D vtable for CDynamicProp
 D vtable for CEffectsServer
 D vtable for CEmbers
 D vtable for CEmptyConVar
 D vtable for CEnableMotionFixup
 D vtable for CEntFireAutoCompletionFunctor
 D vtable for CEntityBlocker
 D vtable for CEntityClassList<CAPCMissile>
 D vtable for CEntityClassList<CBugBaitSensor>
 D vtable for CEntityClassList<CLaserDot>
 D vtable for CEntityClassList<CPhysicsNPCSolver>
 D vtable for CEntityClassList<CPointCamera>
 D vtable for CEntityClassList<CSkyCamera>
 D vtable for CEntityDataInstantiator<CWatcherList>
 D vtable for CEntityDataInstantiator<ModelScale>
 D vtable for CEntityDataInstantiator<StepSimulationData>
 D vtable for CEntityDataInstantiator<groundlink_t>
 D vtable for CEntityDataInstantiator<physicspushlist_t>
 D vtable for CEntityDataInstantiator<touchlink_t>
 D vtable for CEntityDataInstantiator<vphysicsupdateai_t>
 D vtable for CEntityDissolve
 D vtable for CEntityFactory<AR2Explosion>
 D vtable for CEntityFactory<CAISound>
 D vtable for CEntityFactory<CAI_ActBusyGoal>
 D vtable for CEntityFactory<CAI_ActBusyQueueGoal>
 D vtable for CEntityFactory<CAI_AllyManager>
 D vtable for CEntityFactory<CAI_AllySpeechManager>
 D vtable for CEntityFactory<CAI_AssaultGoal>
 D vtable for CEntityFactory<CAI_BattleLine>
 D vtable for CEntityFactory<CAI_ChangeHintGroup>
 D vtable for CEntityFactory<CAI_ChangeTarget>
 D vtable for CEntityFactory<CAI_DynamicLink>
 D vtable for CEntityFactory<CAI_DynamicLinkController>
 D vtable for CEntityFactory<CAI_FollowGoal>
 D vtable for CEntityFactory<CAI_Hint>
 D vtable for CEntityFactory<CAI_LeadGoal>
 D vtable for CEntityFactory<CAI_LeadGoal_Weapon>
 D vtable for CEntityFactory<CAI_NetworkManager>
 D vtable for CEntityFactory<CAI_PoliceGoal>
 D vtable for CEntityFactory<CAI_RadialLinkController>
 D vtable for CEntityFactory<CAI_Relationship>
 D vtable for CEntityFactory<CAI_ScriptConditions>
 D vtable for CEntityFactory<CAI_ScriptedSchedule>
 D vtable for CEntityFactory<CAI_ScriptedSentence>
 D vtable for CEntityFactory<CAI_ScriptedSequence>
 D vtable for CEntityFactory<CAI_SpeechFilter>
 D vtable for CEntityFactory<CAI_StandoffGoal>
 D vtable for CEntityFactory<CAI_TestHull>
 D vtable for CEntityFactory<CAPCController>
 D vtable for CEntityFactory<CAPCMissile>
 D vtable for CEntityFactory<CAlyxEmpEffect>
 D vtable for CEntityFactory<CAmbientGeneric>
 D vtable for CEntityFactory<CAntlionRepellant>
 D vtable for CEntityFactory<CAntlionTemplateMaker>
 D vtable for CEntityFactory<CAreaPortal>
 D vtable for CEntityFactory<CAssaultPoint>
 D vtable for CEntityFactory<CAvoidBox>
 D vtable for CEntityFactory<CAvoidSphere>
 D vtable for CEntityFactory<CBarnacleTongueTip>
 D vtable for CEntityFactory<CBaseButton>
 D vtable for CEntityFactory<CBaseDMStart>
 D vtable for CEntityFactory<CBaseDoor>
 D vtable for CEntityFactory<CBaseEntity>
 D vtable for CEntityFactory<CBaseFilter>
 D vtable for CEntityFactory<CBaseFlex>
 D vtable for CEntityFactory<CBaseGrenade>
 D vtable for CEntityFactory<CBaseGrenadeConcussion>
 D vtable for CEntityFactory<CBaseGrenadeContact>
 D vtable for CEntityFactory<CBaseGrenadeTimed>
 D vtable for CEntityFactory<CBaseHL2MPCombatWeapon>
 D vtable for CEntityFactory<CBaseHLCombatWeapon>
 D vtable for CEntityFactory<CBaseMoveBehavior>
 D vtable for CEntityFactory<CBaseSpriteProjectile>
 D vtable for CEntityFactory<CBaseTrigger>
 D vtable for CEntityFactory<CBaseViewModel>
 D vtable for CEntityFactory<CBeam>
 D vtable for CEntityFactory<CBlackHeadcrab>
 D vtable for CEntityFactory<CBlendingCycler>
 D vtable for CEntityFactory<CBlood>
 D vtable for CEntityFactory<CBombDropSensor>
 D vtable for CEntityFactory<CBombSuppressor>
 D vtable for CEntityFactory<CBoneFollower>
 D vtable for CEntityFactory<CBounceBomb>
 D vtable for CEntityFactory<CBreakable>
 D vtable for CEntityFactory<CBreakableSurface>
 D vtable for CEntityFactory<CBubbling>
 D vtable for CEntityFactory<CBugBaitSensor>
 D vtable for CEntityFactory<CChangeLevel>
 D vtable for CEntityFactory<CCitadelEnergyCore>
 D vtable for CEntityFactory<CCitizenResponseSystem>
 D vtable for CEntityFactory<CColorCorrection>
 D vtable for CEntityFactory<CColorCorrectionVolume>
 D vtable for CEntityFactory<CCombineDropshipContainer>
 D vtable for CEntityFactory<CCommandPoint>
 D vtable for CEntityFactory<CCommentaryAuto>
 D vtable for CEntityFactory<CCommentaryViewPosition>
 D vtable for CEntityFactory<CConcussiveBlast>
 D vtable for CEntityFactory<CConstraintAnchor>
 D vtable for CEntityFactory<CCorpse>
 D vtable for CEntityFactory<CCraneTip>
 D vtable for CEntityFactory<CCredits>
 D vtable for CEntityFactory<CCrossbowBolt>
 D vtable for CEntityFactory<CDebugHistory>
 D vtable for CEntityFactory<CDecal>
 D vtable for CEntityFactory<CDynamicLight>
 D vtable for CEntityFactory<CDynamicProp>
 D vtable for CEntityFactory<CEmbers>
 D vtable for CEntityFactory<CEnableMotionFixup>
 D vtable for CEntityFactory<CEntityBlocker>
 D vtable for CEntityFactory<CEntityDissolve>
 D vtable for CEntityFactory<CEntityFlame>
 D vtable for CEntityFactory<CEntityParticleTrail>
 D vtable for CEntityFactory<CEnvAR2Explosion>
 D vtable for CEntityFactory<CEnvBeam>
 D vtable for CEntityFactory<CEnvBeverage>
 D vtable for CEntityFactory<CEnvDetailController>
 D vtable for CEntityFactory<CEnvDustPuff>
 D vtable for CEntityFactory<CEnvEffectsScript>
 D vtable for CEntityFactory<CEnvEntityMaker>
 D vtable for CEntityFactory<CEnvExplosion>
 D vtable for CEntityFactory<CEnvFade>
 D vtable for CEntityFactory<CEnvFireSensor>
 D vtable for CEntityFactory<CEnvFireSource>
 D vtable for CEntityFactory<CEnvFunnel>
 D vtable for CEntityFactory<CEnvGlobal>
 D vtable for CEntityFactory<CEnvGunfire>
 D vtable for CEntityFactory<CEnvHeadcrabCanister>
 D vtable for CEntityFactory<CEnvHudHint>
 D vtable for CEntityFactory<CEnvLaser>
 D vtable for CEntityFactory<CEnvLight>
 D vtable for CEntityFactory<CEnvMicrophone>
 D vtable for CEntityFactory<CEnvMuzzleFlash>
 D vtable for CEntityFactory<CEnvParticleScript>
 D vtable for CEntityFactory<CEnvPlayerSurfaceTrigger>
 D vtable for CEntityFactory<CEnvProjectedTexture>
 D vtable for CEntityFactory<CEnvQuadraticBeam>
 D vtable for CEntityFactory<CEnvScreenEffect>
 D vtable for CEntityFactory<CEnvScreenOverlay>
 D vtable for CEntityFactory<CEnvShake>
 D vtable for CEntityFactory<CEnvShooter>
 D vtable for CEntityFactory<CEnvSoundscape>
 D vtable for CEntityFactory<CEnvSoundscapeProxy>
 D vtable for CEntityFactory<CEnvSoundscapeTriggerable>
 D vtable for CEntityFactory<CEnvSpark>
 D vtable for CEntityFactory<CEnvSplash>
 D vtable for CEntityFactory<CEnvStarfield>
 D vtable for CEntityFactory<CEnvTonemapController>
 D vtable for CEntityFactory<CEnvTracer>
 D vtable for CEntityFactory<CEnvViewPunch>
 D vtable for CEntityFactory<CEnvWind>
 D vtable for CEntityFactory<CEnvZoom>
 D vtable for CEntityFactory<CEventQueueSaveLoadProxy>
 D vtable for CEntityFactory<CFastHeadcrab>
 D vtable for CEntityFactory<CFilterClass>
 D vtable for CEntityFactory<CFilterCombineBall>
 D vtable for CEntityFactory<CFilterEnemy>
 D vtable for CEntityFactory<CFilterMassGreater>
 D vtable for CEntityFactory<CFilterMultiple>
 D vtable for CEntityFactory<CFilterName>
 D vtable for CEntityFactory<CFire>
 D vtable for CEntityFactory<CFireSmoke>
 D vtable for CEntityFactory<CFireTrail>
 D vtable for CEntityFactory<CFish>
 D vtable for CEntityFactory<CFishPool>
 D vtable for CEntityFactory<CFlare>
 D vtable for CEntityFactory<CFlextalkActor>
 D vtable for CEntityFactory<CFogController>
 D vtable for CEntityFactory<CFuncAreaPortalWindow>
 D vtable for CEntityFactory<CFuncBrush>
 D vtable for CEntityFactory<CFuncCombineBallSpawner>
 D vtable for CEntityFactory<CFuncConveyor>
 D vtable for CEntityFactory<CFuncIllusionary>
 D vtable for CEntityFactory<CFuncLadder>
 D vtable for CEntityFactory<CFuncLadderEndPoint>
 D vtable for CEntityFactory<CFuncMonitor>
 D vtable for CEntityFactory<CFuncMoveLinear>
 D vtable for CEntityFactory<CFuncOccluder>
 D vtable for CEntityFactory<CFuncPlat>
 D vtable for CEntityFactory<CFuncPlatRot>
 D vtable for CEntityFactory<CFuncReflectiveGlass>
 D vtable for CEntityFactory<CFuncRotating>
 D vtable for CEntityFactory<CFuncSmokeVolume>
 D vtable for CEntityFactory<CFuncTankAPCRocket>
 D vtable for CEntityFactory<CFuncTankAirboatGun>
 D vtable for CEntityFactory<CFuncTankCombineCannon>
 D vtable for CEntityFactory<CFuncTankGun>
 D vtable for CEntityFactory<CFuncTankLaser>
 D vtable for CEntityFactory<CFuncTankMortar>
 D vtable for CEntityFactory<CFuncTankPhysCannister>
 D vtable for CEntityFactory<CFuncTankPulseLaser>
 D vtable for CEntityFactory<CFuncTankRocket>
 D vtable for CEntityFactory<CFuncTankTrain>
 D vtable for CEntityFactory<CFuncTrackAuto>
 D vtable for CEntityFactory<CFuncTrackChange>
 D vtable for CEntityFactory<CFuncTrackTrain>
 D vtable for CEntityFactory<CFuncTrain>
 D vtable for CEntityFactory<CFuncTrainControls>
 D vtable for CEntityFactory<CFuncVPhysicsClip>
 D vtable for CEntityFactory<CFuncVehicleClip>
 D vtable for CEntityFactory<CFuncWall>
 D vtable for CEntityFactory<CFuncWallToggle>
 D vtable for CEntityFactory<CFunc_DustCloud>
 D vtable for CEntityFactory<CFunc_DustMotes>
 D vtable for CEntityFactory<CFunc_LOD>
 D vtable for CEntityFactory<CGameEnd>
 D vtable for CEntityFactory<CGameGibManager>
 D vtable for CEntityFactory<CGamePlayerEquip>
 D vtable for CEntityFactory<CGamePlayerTeam>
 D vtable for CEntityFactory<CGamePlayerZone>
 D vtable for CEntityFactory<CGameScore>
 D vtable for CEntityFactory<CGameText>
 D vtable for CEntityFactory<CGameUI>
 D vtable for CEntityFactory<CGameWeaponManager>
 D vtable for CEntityFactory<CGenericActor>
 D vtable for CEntityFactory<CGenericCycler>
 D vtable for CEntityFactory<CGenericFlexCycler>
 D vtable for CEntityFactory<CGenericNPC>
 D vtable for CEntityFactory<CGib>
 D vtable for CEntityFactory<CGibShooter>
 D vtable for CEntityFactory<CGrenadeAR2>
 D vtable for CEntityFactory<CGrenadeBeam>
 D vtable for CEntityFactory<CGrenadeBeamChaser>
 D vtable for CEntityFactory<CGrenadeBugBait>
 D vtable for CEntityFactory<CGrenadeFrag>
 D vtable for CEntityFactory<CGrenadeHelicopter>
 D vtable for CEntityFactory<CGrenadeHomer>
 D vtable for CEntityFactory<CGrenadePathfollower>
 D vtable for CEntityFactory<CGunTarget>
 D vtable for CEntityFactory<CHL2MPGameRulesProxy>
 D vtable for CEntityFactory<CHL2MPRagdoll>
 D vtable for CEntityFactory<CHL2MP_Player>
 D vtable for CEntityFactory<CHL2NetworkBuildHelper>
 D vtable for CEntityFactory<CHalfLife2Proxy>
 D vtable for CEntityFactory<CHandleDummy>
 D vtable for CEntityFactory<CHandleTest>
 D vtable for CEntityFactory<CHeadcrab>
 D vtable for CEntityFactory<CHealthKit>
 D vtable for CEntityFactory<CHealthVial>
 D vtable for CEntityFactory<CHelicopterChunk>
 D vtable for CEntityFactory<CInfoAPCMissileHint>
 D vtable for CEntityFactory<CInfoCameraLink>
 D vtable for CEntityFactory<CInfoIntermission>
 D vtable for CEntityFactory<CInfoLadderDismount>
 D vtable for CEntityFactory<CInfoLightingRelative>
 D vtable for CEntityFactory<CInfoMassCenter>
 D vtable for CEntityFactory<CInfoOverlayAccessor>
 D vtable for CEntityFactory<CInfoTarget>
 D vtable for CEntityFactory<CInfoTeleporterCountdown>
 D vtable for CEntityFactory<CInstancedSceneEntity>
 D vtable for CEntityFactory<CItemBattery>
 D vtable for CEntityFactory<CItemSoda>
 D vtable for CEntityFactory<CItemSuit>
 D vtable for CEntityFactory<CItem_AR2AltFireRound>
 D vtable for CEntityFactory<CItem_AR2_Grenade>
 D vtable for CEntityFactory<CItem_AmmoCrate>
 D vtable for CEntityFactory<CItem_Box357Rounds>
 D vtable for CEntityFactory<CItem_BoxBuckshot>
 D vtable for CEntityFactory<CItem_BoxFlareRounds>
 D vtable for CEntityFactory<CItem_BoxLRounds>
 D vtable for CEntityFactory<CItem_BoxMRounds>
 D vtable for CEntityFactory<CItem_BoxSRounds>
 D vtable for CEntityFactory<CItem_BoxSniperRounds>
 D vtable for CEntityFactory<CItem_BoxXBowRounds>
 D vtable for CEntityFactory<CItem_DynamicResupply>
 D vtable for CEntityFactory<CItem_FlareRound>
 D vtable for CEntityFactory<CItem_ItemCrate>
 D vtable for CEntityFactory<CItem_LargeBox357Rounds>
 D vtable for CEntityFactory<CItem_LargeBoxLRounds>
 D vtable for CEntityFactory<CItem_LargeBoxMRounds>
 D vtable for CEntityFactory<CItem_LargeBoxSRounds>
 D vtable for CEntityFactory<CItem_RPG_Round>
 D vtable for CEntityFactory<CKeepUpright>
 D vtable for CEntityFactory<CLaserDot>
 D vtable for CEntityFactory<CLight>
 D vtable for CEntityFactory<CLightGlow>
 D vtable for CEntityFactory<CLogicActiveAutosave>
 D vtable for CEntityFactory<CLogicAuto>
 D vtable for CEntityFactory<CLogicAutosave>
 D vtable for CEntityFactory<CLogicBranch>
 D vtable for CEntityFactory<CLogicBranchList>
 D vtable for CEntityFactory<CLogicCase>
 D vtable for CEntityFactory<CLogicCollisionPair>
 D vtable for CEntityFactory<CLogicCompare>
 D vtable for CEntityFactory<CLogicCompareInteger>
 D vtable for CEntityFactory<CLogicLineToEntity>
 D vtable for CEntityFactory<CLogicMeasureMovement>
 D vtable for CEntityFactory<CLogicNavigation>
 D vtable for CEntityFactory<CLogicPlayerProxy>
 D vtable for CEntityFactory<CLogicRelay>
 D vtable for CEntityFactory<CLookDoor>
 D vtable for CEntityFactory<CLookDoorThinker>
 D vtable for CEntityFactory<CMaterialModifyControl>
 D vtable for CEntityFactory<CMathColorBlend>
 D vtable for CEntityFactory<CMathCounter>
 D vtable for CEntityFactory<CMathRemap>
 D vtable for CEntityFactory<CMessage>
 D vtable for CEntityFactory<CMessageEntity>
 D vtable for CEntityFactory<CMissile>
 D vtable for CEntityFactory<CMomentaryRotButton>
 D vtable for CEntityFactory<CMortarShell>
 D vtable for CEntityFactory<CMovementSpeedMod>
 D vtable for CEntityFactory<CMultiSource>
 D vtable for CEntityFactory<CNPCMaker>
 D vtable for CEntityFactory<CNPCSpawnDestination>
 D vtable for CEntityFactory<CNPC_APCDriver>
 D vtable for CEntityFactory<CNPC_Alyx>
 D vtable for CEntityFactory<CNPC_Antlion>
 D vtable for CEntityFactory<CNPC_AntlionGuard>
 D vtable for CEntityFactory<CNPC_AttackHelicopter>
 D vtable for CEntityFactory<CNPC_Barnacle>
 D vtable for CEntityFactory<CNPC_Barney>
 D vtable for CEntityFactory<CNPC_Breen>
 D vtable for CEntityFactory<CNPC_Bullseye>
 D vtable for CEntityFactory<CNPC_CScanner>
 D vtable for CEntityFactory<CNPC_CeilingTurret>
 D vtable for CEntityFactory<CNPC_Citizen>
 D vtable for CEntityFactory<CNPC_ClawScanner>
 D vtable for CEntityFactory<CNPC_Combine>
 D vtable for CEntityFactory<CNPC_CombineCamera>
 D vtable for CEntityFactory<CNPC_CombineDropship>
 D vtable for CEntityFactory<CNPC_CombineGunship>
 D vtable for CEntityFactory<CNPC_CombineS>
 D vtable for CEntityFactory<CNPC_CraneDriver>
 D vtable for CEntityFactory<CNPC_Crow>
 D vtable for CEntityFactory<CNPC_Dog>
 D vtable for CEntityFactory<CNPC_Eli>
 D vtable for CEntityFactory<CNPC_EnemyFinder>
 D vtable for CEntityFactory<CNPC_EnemyFinderCombineCannon>
 D vtable for CEntityFactory<CNPC_Fisherman>
 D vtable for CEntityFactory<CNPC_FloorTurret>
 D vtable for CEntityFactory<CNPC_Furniture>
 D vtable for CEntityFactory<CNPC_GMan>
 D vtable for CEntityFactory<CNPC_GroundTurret>
 D vtable for CEntityFactory<CNPC_Ichthyosaur>
 D vtable for CEntityFactory<CNPC_Kleiner>
 D vtable for CEntityFactory<CNPC_Launcher>
 D vtable for CEntityFactory<CNPC_Manhack>
 D vtable for CEntityFactory<CNPC_MetroPolice>
 D vtable for CEntityFactory<CNPC_MissileDefense>
 D vtable for CEntityFactory<CNPC_Monk>
 D vtable for CEntityFactory<CNPC_Mossman>
 D vtable for CEntityFactory<CNPC_Pigeon>
 D vtable for CEntityFactory<CNPC_PoisonZombie>
 D vtable for CEntityFactory<CNPC_RollerMine>
 D vtable for CEntityFactory<CNPC_Seagull>
 D vtable for CEntityFactory<CNPC_Stalker>
 D vtable for CEntityFactory<CNPC_Strider>
 D vtable for CEntityFactory<CNPC_VehicleDriver>
 D vtable for CEntityFactory<CNPC_Vortigaunt>
 D vtable for CEntityFactory<CNewNPC>
 D vtable for CEntityFactory<CNewRecharge>
 D vtable for CEntityFactory<CNewWallHealth>
 D vtable for CEntityFactory<CNodeEnt>
 D vtable for CEntityFactory<CNullEntity>
 D vtable for CEntityFactory<COrnamentProp>
 D vtable for CEntityFactory<CParticleFire>
 D vtable for CEntityFactory<CParticleLight>
 D vtable for CEntityFactory<CParticlePerformanceMonitor>
 D vtable for CEntityFactory<CParticleSystem>
 D vtable for CEntityFactory<CPathCorner>
 D vtable for CEntityFactory<CPathCornerCrash>
 D vtable for CEntityFactory<CPathKeyFrame>
 D vtable for CEntityFactory<CPathTrack>
 D vtable for CEntityFactory<CPhysBallSocket>
 D vtable for CEntityFactory<CPhysBox>
 D vtable for CEntityFactory<CPhysBoxMultiplayer>
 D vtable for CEntityFactory<CPhysConstraintSystem>
 D vtable for CEntityFactory<CPhysConvert>
 D vtable for CEntityFactory<CPhysExplosion>
 D vtable for CEntityFactory<CPhysFixed>
 D vtable for CEntityFactory<CPhysHinge>
 D vtable for CEntityFactory<CPhysImpact>
 D vtable for CEntityFactory<CPhysLength>
 D vtable for CEntityFactory<CPhysMagnet>
 D vtable for CEntityFactory<CPhysMotor>
 D vtable for CEntityFactory<CPhysPulley>
 D vtable for CEntityFactory<CPhysSlideConstraint>
 D vtable for CEntityFactory<CPhysSphere>
 D vtable for CEntityFactory<CPhysThruster>
 D vtable for CEntityFactory<CPhysTorque>
 D vtable for CEntityFactory<CPhysicsCannister>
 D vtable for CEntityFactory<CPhysicsEntitySolver>
 D vtable for CEntityFactory<CPhysicsNPCSolver>
 D vtable for CEntityFactory<CPhysicsProp>
 D vtable for CEntityFactory<CPhysicsPropMultiplayer>
 D vtable for CEntityFactory<CPhysicsPropRespawnable>
 D vtable for CEntityFactory<CPhysicsSpring>
 D vtable for CEntityFactory<CPhysicsWire>
 D vtable for CEntityFactory<CPlasma>
 D vtable for CEntityFactory<CPlayerPickupController>
 D vtable for CEntityFactory<CPlayerResource>
 D vtable for CEntityFactory<CPointAngleSensor>
 D vtable for CEntityFactory<CPointAngularVelocitySensor>
 D vtable for CEntityFactory<CPointBonusMapsAccessor>
 D vtable for CEntityFactory<CPointCamera>
 D vtable for CEntityFactory<CPointClientCommand>
 D vtable for CEntityFactory<CPointCombineBallLauncher>
 D vtable for CEntityFactory<CPointCommentaryNode>
 D vtable for CEntityFactory<CPointDevShotCamera>
 D vtable for CEntityFactory<CPointEntity>
 D vtable for CEntityFactory<CPointGamestatsCounter>
 D vtable for CEntityFactory<CPointHurt>
 D vtable for CEntityFactory<CPointPlayerMoveConstraint>
 D vtable for CEntityFactory<CPointProximitySensor>
 D vtable for CEntityFactory<CPointPush>
 D vtable for CEntityFactory<CPointServerCommand>
 D vtable for CEntityFactory<CPointSpotlight>
 D vtable for CEntityFactory<CPointTeleport>
 D vtable for CEntityFactory<CPointTemplate>
 D vtable for CEntityFactory<CPointVelocitySensor>
 D vtable for CEntityFactory<CPoseController>
 D vtable for CEntityFactory<CPrecipitation>
 D vtable for CEntityFactory<CPredictedViewModel>
 D vtable for CEntityFactory<CProjectedDecal>
 D vtable for CEntityFactory<CPropAPC>
 D vtable for CEntityFactory<CPropAirboat>
 D vtable for CEntityFactory<CPropCombineBall>
 D vtable for CEntityFactory<CPropCrane>
 D vtable for CEntityFactory<CPropDoorRotating>
 D vtable for CEntityFactory<CPropThumper>
 D vtable for CEntityFactory<CPropVehicle>
 D vtable for CEntityFactory<CPropVehicleDriveable>
 D vtable for CEntityFactory<CPropVehiclePrisonerPod>
 D vtable for CEntityFactory<CPropVehicleViewController>
 D vtable for CEntityFactory<CProtoSniper>
 D vtable for CEntityFactory<CPushable>
 D vtable for CEntityFactory<CRagGib>
 D vtable for CEntityFactory<CRagdollBoogie>
 D vtable for CEntityFactory<CRagdollConstraint>
 D vtable for CEntityFactory<CRagdollMagnet>
 D vtable for CEntityFactory<CRagdollManager>
 D vtable for CEntityFactory<CRagdollProp>
 D vtable for CEntityFactory<CRagdollPropAttached>
 D vtable for CEntityFactory<CRallyPoint>
 D vtable for CEntityFactory<CRecharge>
 D vtable for CEntityFactory<CReservePlayerSpot>
 D vtable for CEntityFactory<CRevertSaved>
 D vtable for CEntityFactory<CRopeAnchor>
 D vtable for CEntityFactory<CRopeKeyframe>
 D vtable for CEntityFactory<CRotButton>
 D vtable for CEntityFactory<CRotDoor>
 D vtable for CEntityFactory<CRotorWashEmitter>
 D vtable for CEntityFactory<CRotorWashShooter>
 D vtable for CEntityFactory<CSatchelCharge>
 D vtable for CEntityFactory<CSceneEntity>
 D vtable for CEntityFactory<CSceneListManager>
 D vtable for CEntityFactory<CSceneManager>
 D vtable for CEntityFactory<CScriptIntro>
 D vtable for CEntityFactory<CScriptedTarget>
 D vtable for CEntityFactory<CServerRagdollTrigger>
 D vtable for CEntityFactory<CShadowControl>
 D vtable for CEntityFactory<CShower>
 D vtable for CEntityFactory<CSimplePhysicsBrush>
 D vtable for CEntityFactory<CSimplePhysicsProp>
 D vtable for CEntityFactory<CSkyCamera>
 D vtable for CEntityFactory<CSlideshowDisplay>
 D vtable for CEntityFactory<CSmokeStack>
 D vtable for CEntityFactory<CSniperBullet>
 D vtable for CEntityFactory<CSniperTarget>
 D vtable for CEntityFactory<CSoundEnt>
 D vtable for CEntityFactory<CSparkTrail>
 D vtable for CEntityFactory<CSpeaker>
 D vtable for CEntityFactory<CSpotlightEnd>
 D vtable for CEntityFactory<CSprayCan>
 D vtable for CEntityFactory<CSprite>
 D vtable for CEntityFactory<CSpriteOriented>
 D vtable for CEntityFactory<CSpriteTrail>
 D vtable for CEntityFactory<CSquadInsignia>
 D vtable for CEntityFactory<CSteamJet>
 D vtable for CEntityFactory<CStripWeapons>
 D vtable for CEntityFactory<CSun>
 D vtable for CEntityFactory<CTankTargetChange>
 D vtable for CEntityFactory<CTankTrainAI>
 D vtable for CEntityFactory<CTargetCDAudioRep>
 D vtable for CEntityFactory<CTargetChangeGravity>
 D vtable for CEntityFactory<CTargetGunshipCrash>
 D vtable for CEntityFactory<CTeam>
 D vtable for CEntityFactory<CTeamControlPoint>
 D vtable for CEntityFactory<CTeamControlPointMaster>
 D vtable for CEntityFactory<CTeamControlPointRound>
 D vtable for CEntityFactory<CTeamRoundTimer>
 D vtable for CEntityFactory<CTeamSpawnPoint>
 D vtable for CEntityFactory<CTeamTrainWatcher>
 D vtable for CEntityFactory<CTeamVehicleSpawnPoint>
 D vtable for CEntityFactory<CTempEntTester>
 D vtable for CEntityFactory<CTemplateNPCMaker>
 D vtable for CEntityFactory<CTesla>
 D vtable for CEntityFactory<CTestEffect>
 D vtable for CEntityFactory<CTestTraceline>
 D vtable for CEntityFactory<CTest_ProxyToggle_Networkable>
 D vtable for CEntityFactory<CTextureToggle>
 D vtable for CEntityFactory<CTimerEntity>
 D vtable for CEntityFactory<CTriggerApplyImpulse>
 D vtable for CEntityFactory<CTriggerAreaCapture>
 D vtable for CEntityFactory<CTriggerBrush>
 D vtable for CEntityFactory<CTriggerCDAudio>
 D vtable for CEntityFactory<CTriggerCamera>
 D vtable for CEntityFactory<CTriggerGravity>
 D vtable for CEntityFactory<CTriggerHurt>
 D vtable for CEntityFactory<CTriggerImpact>
 D vtable for CEntityFactory<CTriggerLook>
 D vtable for CEntityFactory<CTriggerMultiple>
 D vtable for CEntityFactory<CTriggerOnce>
 D vtable for CEntityFactory<CTriggerPhysicsTrap>
 D vtable for CEntityFactory<CTriggerPlayerMovement>
 D vtable for CEntityFactory<CTriggerProximity>
 D vtable for CEntityFactory<CTriggerPush>
 D vtable for CEntityFactory<CTriggerRPGFire>
 D vtable for CEntityFactory<CTriggerRemove>
 D vtable for CEntityFactory<CTriggerSave>
 D vtable for CEntityFactory<CTriggerSoundscape>
 D vtable for CEntityFactory<CTriggerTeleport>
 D vtable for CEntityFactory<CTriggerTeleportRelative>
 D vtable for CEntityFactory<CTriggerToggleSave>
 D vtable for CEntityFactory<CTriggerVPhysicsMotion>
 D vtable for CEntityFactory<CTriggerVolume>
 D vtable for CEntityFactory<CTriggerWateryDeath>
 D vtable for CEntityFactory<CTriggerWeaponDissolve>
 D vtable for CEntityFactory<CTriggerWeaponStrip>
 D vtable for CEntityFactory<CTriggerWind>
 D vtable for CEntityFactory<CTripmineGrenade>
 D vtable for CEntityFactory<CTurretTipController>
 D vtable for CEntityFactory<CVGuiScreen>
 D vtable for CEntityFactory<CVortigauntChargeToken>
 D vtable for CEntityFactory<CVortigauntEffectDispel>
 D vtable for CEntityFactory<CVoteController>
 D vtable for CEntityFactory<CWC_UpdateIgnoreList>
 D vtable for CEntityFactory<CWallHealth>
 D vtable for CEntityFactory<CWaterBullet>
 D vtable for CEntityFactory<CWaterLODControl>
 D vtable for CEntityFactory<CWateryDeathLeech>
 D vtable for CEntityFactory<CWeapon357>
 D vtable for CEntityFactory<CWeaponAR2>
 D vtable for CEntityFactory<CWeaponAnnabelle>
 D vtable for CEntityFactory<CWeaponBugBait>
 D vtable for CEntityFactory<CWeaponCrossbow>
 D vtable for CEntityFactory<CWeaponCrowbar>
 D vtable for CEntityFactory<CWeaponCubemap>
 D vtable for CEntityFactory<CWeaponCycler>
 D vtable for CEntityFactory<CWeaponFrag>
 D vtable for CEntityFactory<CWeaponHL2MPBase>
 D vtable for CEntityFactory<CWeaponPhysCannon>
 D vtable for CEntityFactory<CWeaponPistol>
 D vtable for CEntityFactory<CWeaponRPG>
 D vtable for CEntityFactory<CWeaponSMG1>
 D vtable for CEntityFactory<CWeaponShotgun>
 D vtable for CEntityFactory<CWeaponStunStick>
 D vtable for CEntityFactory<CWeapon_SLAM>
 D vtable for CEntityFactory<CWeightButton>
 D vtable for CEntityFactory<CWindowPane>
 D vtable for CEntityFactory<CWorld>
 D vtable for CEntityFactory<CWorldItem>
 D vtable for CEntityFactory<CWreckage>
 D vtable for CEntityFactory<CZombie>
 D vtable for CEntityFactory<DustTrail>
 D vtable for CEntityFactory<FilterDamageType>
 D vtable for CEntityFactory<FilterTeam>
 D vtable for CEntityFactory<MovieExplosion>
 D vtable for CEntityFactory<ParticleSmokeGrenade>
 D vtable for CEntityFactory<RocketTrail>
 D vtable for CEntityFactory<SmokeTrail>
 D vtable for CEntityFactory<SporeExplosion>
 D vtable for CEntityFactory<SporeTrail>
 D vtable for CEntityFactoryDictionary
 D vtable for CEntityFlame
 D vtable for CEntityListSystem
 D vtable for CEntityParticleTrail
 D vtable for CEntityParticleTrail::NetworkVar_m_Info
 D vtable for CEntitySaveRestoreBlockHandler
 D vtable for CEntitySaveUtils
 D vtable for CEntityTouchManager
 D vtable for CEnvAR2Explosion
 D vtable for CEnvBeam
 D vtable for CEnvBeverage
 D vtable for CEnvDetailController
 D vtable for CEnvDustPuff
 D vtable for CEnvEffectsScript
 D vtable for CEnvEntityMaker
 D vtable for CEnvExplosion
 D vtable for CEnvFade
 D vtable for CEnvFireSensor
 D vtable for CEnvFireSource
 D vtable for CEnvFunnel
 D vtable for CEnvGlobal
 D vtable for CEnvGunfire
 D vtable for CEnvHeadcrabCanister
 D vtable for CEnvHeadcrabCanister::NetworkVar_m_Shared
 D vtable for CEnvHeadcrabCanisterShared
 D vtable for CEnvHudHint
 D vtable for CEnvLaser
 D vtable for CEnvLight
 D vtable for CEnvMicrophone
 D vtable for CEnvMuzzleFlash
 D vtable for CEnvParticleScript
 D vtable for CEnvPlayerSurfaceTrigger
 D vtable for CEnvProjectedTexture
 D vtable for CEnvQuadraticBeam
 D vtable for CEnvScreenEffect
 D vtable for CEnvScreenOverlay
 D vtable for CEnvShake
 D vtable for CEnvShooter
 D vtable for CEnvSoundscape
 D vtable for CEnvSoundscapeProxy
 D vtable for CEnvSoundscapeTriggerable
 D vtable for CEnvSpark
 D vtable for CEnvSplash
 D vtable for CEnvStarfield
 D vtable for CEnvTonemapController
 D vtable for CEnvTracer
 D vtable for CEnvViewPunch
 D vtable for CEnvWind
 D vtable for CEnvWindShared
 D vtable for CEnvZoom
 D vtable for CEventLog
 D vtable for CEventQueueSaveLoadProxy
 D vtable for CEventQueue_SaveRestoreBlockHandler
 D vtable for CEventsSaveDataOps
 D vtable for CFastHeadcrab
 D vtable for CFilterClass
 D vtable for CFilterCombineBall
 D vtable for CFilterEnemy
 D vtable for CFilterMassGreater
 D vtable for CFilterMultiple
 D vtable for CFilterName
 D vtable for CFire
 D vtable for CFireSmoke
 D vtable for CFireSphere
 D vtable for CFireTrail
 D vtable for CFish
 D vtable for CFishPool
 D vtable for CFlaggedEntitiesEnum
 D vtable for CFlare
 D vtable for CFlexAnimationTrack
 D vtable for CFlexSceneFileManager
 D vtable for CFlextalkActor
 D vtable for CFmtStrN<1024, false>
 D vtable for CFmtStrN<128, false>
 D vtable for CFmtStrN<256, false>
 D vtable for CFmtStrN<512, false>
 D vtable for CFogController
 D vtable for CFogController::NetworkVar_m_fog
 D vtable for CFogSystem
 D vtable for CFourWheelServerVehicle
 D vtable for CFourWheelVehiclePhysics
 D vtable for CFuncAreaPortalBase
 D vtable for CFuncAreaPortalWindow
 D vtable for CFuncBrush
 D vtable for CFuncCombineBallSpawner
 D vtable for CFuncConveyor
 D vtable for CFuncIllusionary
 D vtable for CFuncLadder
 D vtable for CFuncLadderEndPoint
 D vtable for CFuncMonitor
 D vtable for CFuncMoveLinear
 D vtable for CFuncOccluder
 D vtable for CFuncPlat
 D vtable for CFuncPlatRot
 D vtable for CFuncReflectiveGlass
 D vtable for CFuncRotating
 D vtable for CFuncSmokeVolume
 D vtable for CFuncTank
 D vtable for CFuncTankAPCRocket
 D vtable for CFuncTankAirboatGun
 D vtable for CFuncTankCombineCannon
 D vtable for CFuncTankGun
 D vtable for CFuncTankLaser
 D vtable for CFuncTankMortar
 D vtable for CFuncTankPhysCannister
 D vtable for CFuncTankPulseLaser
 D vtable for CFuncTankRocket
 D vtable for CFuncTankTrain
 D vtable for CFuncTrackAuto
 D vtable for CFuncTrackChange
 D vtable for CFuncTrackTrain
 D vtable for CFuncTrain
 D vtable for CFuncTrainControls
 D vtable for CFuncVPhysicsClip
 D vtable for CFuncVehicleClip
 D vtable for CFuncWall
 D vtable for CFuncWallToggle
 D vtable for CFunc_Dust
 D vtable for CFunc_DustCloud
 D vtable for CFunc_DustMotes
 D vtable for CFunc_LOD
 D vtable for CFunctor2<void (*)(CFunctor**, unsigned int), CFunctor**, int, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >
 D vtable for CFunctor2<void (*)(IPhysicsObject*, Vector const&), IPhysicsObject*, Vector, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >
 D vtable for CFunctor3<void (*)(IPhysicsObject*, Vector const&, Vector const&), IPhysicsObject*, Vector, Vector, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >
 D vtable for CFunctor4<CBaseEntity* (*)(CBaseEntity*, CBaseEntity*, bool, float), CBaseEntity*, CBaseEntity*, bool, float, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >
 D vtable for CGameDLL_ConVarAccessor
 D vtable for CGameEnd
 D vtable for CGameEventListener
 D vtable for CGameGibManager
 D vtable for CGameMovement
 D vtable for CGamePlayerEquip
 D vtable for CGamePlayerTeam
 D vtable for CGamePlayerZone
 D vtable for CGameRules
 D vtable for CGameRulesProxy
 D vtable for CGameScore
 D vtable for CGameStringPool
 D vtable for CGameText
 D vtable for CGameUI
 D vtable for CGameWeaponManager
 D vtable for CGenericActor
 D vtable for CGenericCycler
 D vtable for CGenericFlexCycler
 D vtable for CGenericNPC
 D vtable for CGib
 D vtable for CGibShooter
 D vtable for CGlobalEntityList
 D vtable for CGlobalState
 D vtable for CGrabController
 D vtable for CGrenadeAR2
 D vtable for CGrenadeBeam
 D vtable for CGrenadeBeamChaser
 D vtable for CGrenadeBugBait
 D vtable for CGrenadeFrag
 D vtable for CGrenadeHelicopter
 D vtable for CGrenadeHomer
 D vtable for CGrenadePathfollower
 D vtable for CGunTarget
 D vtable for CGunshipRagdollMotion
 D vtable for CHL2EventLog
 D vtable for CHL2GameMovement
 D vtable for CHL2MPGameRulesProxy
 D vtable for CHL2MPMachineGun
 D vtable for CHL2MPRagdoll
 D vtable for CHL2MPRules
 D vtable for CHL2MPSWeaponInfo
 D vtable for CHL2MP_Player
 D vtable for CHL2NetworkBuildHelper
 D vtable for CHL2PlayerLocalData
 D vtable for CHL2_Player
 D vtable for CHL2_Player::NetworkVar_m_HL2Local
 D vtable for CHLPlayerMove
 D vtable for CHLTVDirector
 D vtable for CHalfLife2
 D vtable for CHalfLife2Proxy
 D vtable for CHandleDummy
 D vtable for CHandleTest
 D vtable for CHangRope
 D vtable for CHeadcrab
 D vtable for CHealthKit
 D vtable for CHealthVial
 D vtable for CHelicopterChunk
 D vtable for CIKSaveRestoreOps
 D vtable for CInfoAPCMissileHint
 D vtable for CInfoCameraLink
 D vtable for CInfoIntermission
 D vtable for CInfoLadderDismount
 D vtable for CInfoLightingRelative
 D vtable for CInfoMassCenter
 D vtable for CInfoOverlayAccessor
 D vtable for CInfoTarget
 D vtable for CInfoTeleporterCountdown
 D vtable for CInstancedResponseSystem
 D vtable for CInstancedSceneEntity
 D vtable for CItem
 D vtable for CItemBattery
 D vtable for CItemSoda
 D vtable for CItemSuit
 D vtable for CItem_AR2AltFireRound
 D vtable for CItem_AR2_Grenade
 D vtable for CItem_AmmoCrate
 D vtable for CItem_Box357Rounds
 D vtable for CItem_BoxBuckshot
 D vtable for CItem_BoxFlareRounds
 D vtable for CItem_BoxLRounds
 D vtable for CItem_BoxMRounds
 D vtable for CItem_BoxSRounds
 D vtable for CItem_BoxSniperRounds
 D vtable for CItem_BoxXBowRounds
 D vtable for CItem_DynamicResupply
 D vtable for CItem_FlareRound
 D vtable for CItem_ItemCrate
 D vtable for CItem_LargeBox357Rounds
 D vtable for CItem_LargeBoxLRounds
 D vtable for CItem_LargeBoxMRounds
 D vtable for CItem_LargeBoxSRounds
 D vtable for CItem_RPG_Round
 D vtable for CKeepUpright
 D vtable for CLagCompensationManager
 D vtable for CLaserDot
 D vtable for CLight
 D vtable for CLightGlow
 D vtable for CListMissions
 D vtable for CLogicActiveAutosave
 D vtable for CLogicAuto
 D vtable for CLogicAutosave
 D vtable for CLogicBranch
 D vtable for CLogicBranchList
 D vtable for CLogicCase
 D vtable for CLogicCollisionPair
 D vtable for CLogicCompare
 D vtable for CLogicCompareInteger
 D vtable for CLogicLineToEntity
 D vtable for CLogicMeasureMovement
 D vtable for CLogicNavigation
 D vtable for CLogicPlayerProxy
 D vtable for CLogicRelay
 D vtable for CLookDoor
 D vtable for CLookDoorThinker
 D vtable for CMapLoadEntityFilter
 D vtable for CMaterialModifyControl
 D vtable for CMathColorBlend
 D vtable for CMathCounter
 D vtable for CMathRemap
 D vtable for CMattsPipe
 D vtable for CMemberFunctor0<CParallelProcessor<QueryCacheUpdateRecord_t, CFuncJobItemProcessor<QueryCacheUpdateRecord_t> >*, void (CParallelProcessor<QueryCacheUpdateRecord_t, CFuncJobItemProcessor<QueryCacheUpdateRecord_t> >::*)(), CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>
 D vtable for CMemberFunctor0<CPropCombineBall*, void (CPropCombineBall::*)(), CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>
 D vtable for CMemberFunctor1<CAI_Navigator*, bool (CAI_Navigator::*)(Vector const&), Vector, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>
 D vtable for CMemberFunctor1<CNPC_RollerMine*, void (CNPC_RollerMine::*)(CBaseEntity*), CBaseEntity*, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>
 D vtable for CMemberFunctor2<CAI_Navigator*, bool (CAI_Navigator::*)(AI_NavGoal_t const&, unsigned int), AI_NavGoal_t, unsigned int, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>
 D vtable for CMemberFunctor3<CBreakableProp*, void (CBreakableProp::*)(Vector const&, Vector const&, QAngle const&), Vector, Vector, QAngle, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>
 D vtable for CMessage
 D vtable for CMessageEntity
 D vtable for CMissile
 D vtable for CModelSoundsCache
 D vtable for CModelSoundsCacheSaver
 D vtable for CMomentaryRotButton
 D vtable for CMortarShell
 D vtable for CMotorController
 D vtable for CMoveHelperServer
 D vtable for CMovementSpeedMod
 D vtable for CMultiSource
 D vtable for CMultiplayRules
 D vtable for CNPCBaseInteractive<CAI_BaseNPC>
 D vtable for CNPCBaseInteractive<CAI_BasePhysicsFlyingBot>
 D vtable for CNPCMaker
 D vtable for CNPCSpawnDestination
 D vtable for CNPC_APCDriver
 D vtable for CNPC_Alyx
 D vtable for CNPC_Antlion
 D vtable for CNPC_AntlionGuard
 D vtable for CNPC_AttackHelicopter
 D vtable for CNPC_Barnacle
 D vtable for CNPC_Barney
 D vtable for CNPC_BaseScanner
 D vtable for CNPC_BaseZombie
 D vtable for CNPC_Breen
 D vtable for CNPC_Bullseye
 D vtable for CNPC_CScanner
 D vtable for CNPC_CeilingTurret
 D vtable for CNPC_Citizen
 D vtable for CNPC_ClawScanner
 D vtable for CNPC_Combine
 D vtable for CNPC_Combine::CCombineStandoffBehavior
 D vtable for CNPC_CombineCamera
 D vtable for CNPC_CombineDropship
 D vtable for CNPC_CombineGunship
 D vtable for CNPC_CombineS
 D vtable for CNPC_CraneDriver
 D vtable for CNPC_Crow
 D vtable for CNPC_Dog
 D vtable for CNPC_Eli
 D vtable for CNPC_EnemyFinder
 D vtable for CNPC_EnemyFinderCombineCannon
 D vtable for CNPC_Fisherman
 D vtable for CNPC_FloorTurret
 D vtable for CNPC_Furniture
 D vtable for CNPC_GMan
 D vtable for CNPC_GroundTurret
 D vtable for CNPC_Ichthyosaur
 D vtable for CNPC_Kleiner
 D vtable for CNPC_Launcher
 D vtable for CNPC_Manhack
 D vtable for CNPC_MetroPolice
 D vtable for CNPC_MissileDefense
 D vtable for CNPC_Monk
 D vtable for CNPC_Mossman
 D vtable for CNPC_Pigeon
 D vtable for CNPC_PlayerCompanion
 D vtable for CNPC_PoisonZombie
 D vtable for CNPC_RollerMine
 D vtable for CNPC_Seagull
 D vtable for CNPC_Stalker
 D vtable for CNPC_Strider
 D vtable for CNPC_Strider::CNavigator
 D vtable for CNPC_Strider::CPathfinder
 D vtable for CNPC_VehicleDriver
 D vtable for CNPC_Vortigaunt
 D vtable for CNewNPC
 D vtable for CNewRecharge
 D vtable for CNewWallHealth
 D vtable for CNodeEnt
 D vtable for CNodeFilter
 D vtable for CNotifyList
 D vtable for CNullEntity
 D vtable for COrnamentProp
 D vtable for COverrideMoveCache
 D vtable for CPASAttenuationFilter
 D vtable for CPASFilter
 D vtable for CPVSFilter
 D vtable for CParticleFire
 D vtable for CParticleLight
 D vtable for CParticlePerformanceMonitor
 D vtable for CParticleSystem
 D vtable for CParticleSystemQuery
 D vtable for CPathCorner
 D vtable for CPathCornerCrash
 D vtable for CPathKeyFrame
 D vtable for CPathTrack
 D vtable for CPathfindNearestNodeFilter
 D vtable for CPhysBallSocket
 D vtable for CPhysBox
 D vtable for CPhysBoxMultiplayer
 D vtable for CPhysConstraint
 D vtable for CPhysConstraintEvents
 D vtable for CPhysConstraintSystem
 D vtable for CPhysConvert
 D vtable for CPhysExplosion
 D vtable for CPhysFixed
 D vtable for CPhysForce
 D vtable for CPhysHinge
 D vtable for CPhysImpact
 D vtable for CPhysLength
 D vtable for CPhysMagnet
 D vtable for CPhysMotor
 D vtable for CPhysObjSaveRestoreOps
 D vtable for CPhysPulley
 D vtable for CPhysSaveRestoreBlockHandler
 D vtable for CPhysSlideConstraint
 D vtable for CPhysSphere
 D vtable for CPhysThruster
 D vtable for CPhysTorque
 D vtable for CPhysicsCannister
 D vtable for CPhysicsEntitySolver
 D vtable for CPhysicsGameTrace
 D vtable for CPhysicsHook
 D vtable for CPhysicsNPCSolver
 D vtable for CPhysicsPlayerCallback
 D vtable for CPhysicsProp
 D vtable for CPhysicsPropMultiplayer
 D vtable for CPhysicsPropRespawnable
 D vtable for CPhysicsPushedEntities
 D vtable for CPhysicsShake
 D vtable for CPhysicsSpring
 D vtable for CPhysicsWind
 D vtable for CPhysicsWire
 D vtable for CPlasma
 D vtable for CPlatTrigger
 D vtable for CPlayerInfo
 D vtable for CPlayerInfoManager
 D vtable for CPlayerLocalData
 D vtable for CPlayerLocalData::NetworkVar_m_PlayerFog
 D vtable for CPlayerLocalData::NetworkVar_m_audio
 D vtable for CPlayerLocalData::NetworkVar_m_skybox3d
 D vtable for CPlayerMove
 D vtable for CPlayerPickupController
 D vtable for CPlayerResource
 D vtable for CPluginBotManager
 D vtable for CPluginHelpersCheck
 D vtable for CPointAngleSensor
 D vtable for CPointAngularVelocitySensor
 D vtable for CPointBonusMapsAccessor
 D vtable for CPointCamera
 D vtable for CPointClientCommand
 D vtable for CPointCombineBallLauncher
 D vtable for CPointCommentaryNode
 D vtable for CPointDevShotCamera
 D vtable for CPointEntity
 D vtable for CPointGamestatsCounter
 D vtable for CPointHurt
 D vtable for CPointPlayerMoveConstraint
 D vtable for CPointProximitySensor
 D vtable for CPointPush
 D vtable for CPointServerCommand
 D vtable for CPointSpotlight
 D vtable for CPointTeleport
 D vtable for CPointTemplate
 D vtable for CPointTemplatePrecacher
 D vtable for CPointVelocitySensor
 D vtable for CPoseController
 D vtable for CPostFrameNavigationHook
 D vtable for CPrecacheOtherList
 D vtable for CPrecipitation
 D vtable for CPredictedViewModel
 D vtable for CPrisonerPodServerVehicle
 D vtable for CProjectedDecal
 D vtable for CPropAPC
 D vtable for CPropAirboat
 D vtable for CPropCombineBall
 D vtable for CPropCrane
 D vtable for CPropData
 D vtable for CPropDoorRotating
 D vtable for CPropThumper
 D vtable for CPropVehicle
 D vtable for CPropVehicleDriveable
 D vtable for CPropVehiclePrisonerPod
 D vtable for CPropVehicleViewController
 D vtable for CProtoSniper
 D vtable for CPushBlockerEnum
 D vtable for CPushable
 D vtable for CRagGib
 D vtable for CRagdollAnimatedFriction
 D vtable for CRagdollBoogie
 D vtable for CRagdollCollisionRules
 D vtable for CRagdollConstraint
 D vtable for CRagdollLRURetirement
 D vtable for CRagdollMagnet
 D vtable for CRagdollManager
 D vtable for CRagdollProp
 D vtable for CRagdollPropAttached
 D vtable for CRallyPoint
 D vtable for CRecharge
 D vtable for CRecipientFilter
 D vtable for CReliableBroadcastRecipientFilter
 D vtable for CReservePlayerSpot
 D vtable for CRespawnEntitiesFilter
 D vtable for CResponseSystem
 D vtable for CResponseSystemSaveRestoreOps
 D vtable for CRestore
 D vtable for CRevertSaved
 D vtable for CRollerController
 D vtable for CRopeAnchor
 D vtable for CRopeKeyframe
 D vtable for CRopePhysics<512>
 D vtable for CRotButton
 D vtable for CRotDoor
 D vtable for CRotorWashEmitter
 D vtable for CRotorWashShooter
 D vtable for CSatchelCharge
 D vtable for CSave
 D vtable for CSaveRestoreBlockSet
 D vtable for CSceneEntity
 D vtable for CSceneFindMarkFilter
 D vtable for CSceneFindNearestMarkFilter
 D vtable for CSceneListManager
 D vtable for CSceneManager
 D vtable for CSceneTokenProcessor
 D vtable for CScriptIntro
 D vtable for CScriptedTarget
 D vtable for CServerBenchmark
 D vtable for CServerChoreoTools
 D vtable for CServerDLLSharedAppSystems
 D vtable for CServerGameClients
 D vtable for CServerGameDLL
 D vtable for CServerGameEnts
 D vtable for CServerGameTags
 D vtable for CServerNetworkProperty
 D vtable for CServerRagdollTrigger
 D vtable for CServerTools
 D vtable for CShadowControl
 D vtable for CShowZone
 D vtable for CShower
 D vtable for CSimThinkManager
 D vtable for CSimplePhysicsBrush
 D vtable for CSimplePhysicsProp
 D vtable for CSingleUserRecipientFilter
 D vtable for CSingleplayRules
 D vtable for CSkipKeys
 D vtable for CSkyCamera
 D vtable for CSlideshowDisplay
 D vtable for CSmokeStack
 D vtable for CSniperBullet
 D vtable for CSniperTarget
 D vtable for CSolidSetDefaults
 D vtable for CSoundControllerImp
 D vtable for CSoundEmitterSystem
 D vtable for CSoundEnt
 D vtable for CSoundEnvelopeController
 D vtable for CSoundPatchSaveRestoreOps
 D vtable for CSoundscapeSystem
 D vtable for CSparkTrail
 D vtable for CSpeaker
 D vtable for CSpotlightEnd
 D vtable for CSprayCan
 D vtable for CSprite
 D vtable for CSpriteOriented
 D vtable for CSpriteTrail
 D vtable for CSquadInsignia
 D vtable for CStdStringSaveRestoreOps
 D vtable for CSteamJet
 D vtable for CStriderMinigun
 D vtable for CStringTableSaveRestoreOps
 D vtable for CStripWeapons
 D vtable for CSun
 D vtable for CTEAntlionDust
 D vtable for CTEArmorRicochet
 D vtable for CTEBSPDecal
 D vtable for CTEBaseBeam
 D vtable for CTEBeamEntPoint
 D vtable for CTEBeamEnts
 D vtable for CTEBeamFollow
 D vtable for CTEBeamLaser
 D vtable for CTEBeamPoints
 D vtable for CTEBeamRing
 D vtable for CTEBeamRingPoint
 D vtable for CTEBeamSpline
 D vtable for CTEBloodSprite
 D vtable for CTEBloodStream
 D vtable for CTEBreakModel
 D vtable for CTEBubbleTrail
 D vtable for CTEBubbles
 D vtable for CTEClientProjectile
 D vtable for CTEConcussiveExplosion
 D vtable for CTEDecal
 D vtable for CTEDust
 D vtable for CTEDynamicLight
 D vtable for CTEEffectDispatch
 D vtable for CTEEnergySplash
 D vtable for CTEExplosion
 D vtable for CTEFizz
 D vtable for CTEFootprintDecal
 D vtable for CTEGaussExplosion
 D vtable for CTEGlowSprite
 D vtable for CTEHL2MPFireBullets
 D vtable for CTEImpact
 D vtable for CTEKillPlayerAttachments
 D vtable for CTELargeFunnel
 D vtable for CTEMetalSparks
 D vtable for CTEMuzzleFlash
 D vtable for CTEPhysicsProp
 D vtable for CTEPlayerDecal
 D vtable for CTEProjectedDecal
 D vtable for CTEShatterSurface
 D vtable for CTEShowLine
 D vtable for CTESmoke
 D vtable for CTESparks
 D vtable for CTESprite
 D vtable for CTESpriteSpray
 D vtable for CTEWorldDecal
 D vtable for CTacticalMissionManager
 D vtable for CTankTargetChange
 D vtable for CTankTrainAI
 D vtable for CTargetCDAudioRep
 D vtable for CTargetChangeGravity
 D vtable for CTargetGunshipCrash
 D vtable for CTeam
 D vtable for CTeamControlPoint
 D vtable for CTeamControlPointMaster
 D vtable for CTeamControlPointRound
 D vtable for CTeamRecipientFilter
 D vtable for CTeamRoundTimer
 D vtable for CTeamSpawnPoint
 D vtable for CTeamTrainWatcher
 D vtable for CTeamVehicleSpawnPoint
 D vtable for CTeamplayRules
 D vtable for CTempEntTester
 D vtable for CTempEntsSystem
 D vtable for CTemplateNPCMaker
 D vtable for CTemplate_SaveRestoreBlockHandler
 D vtable for CTemplatesHook
 D vtable for CTesla
 D vtable for CTestEffect
 D vtable for CTestTraceline
 D vtable for CTest_ProxyToggle_Networkable
 D vtable for CTextureToggle
 D vtable for CThinkContextsSaveDataOps
 D vtable for CThrustController
 D vtable for CTimerEntity
 D vtable for CTongueEntitiesEnum
 D vtable for CToolFrameworkServer
 D vtable for CTraceFilterAgainstEntityList
 D vtable for CTraceFilterAntlion
 D vtable for CTraceFilterCharge
 D vtable for CTraceFilterChopper
 D vtable for CTraceFilterCollisionGroupDelta
 D vtable for CTraceFilterDoor
 D vtable for CTraceFilterEntity
 D vtable for CTraceFilterEntityIgnoreOther
 D vtable for CTraceFilterLOS
 D vtable for CTraceFilterMelee
 D vtable for CTraceFilterMetroPolice
 D vtable for CTraceFilterNav
 D vtable for CTraceFilterNoCombatCharacters
 D vtable for CTraceFilterNoOwnerTest
 D vtable for CTraceFilterOnlyNPCsAndPlayer
 D vtable for CTraceFilterPlayersNPCs
 D vtable for CTraceFilterPlayersNPCsPhysicsProps
 D vtable for CTraceFilterPushFinal
 D vtable for CTraceFilterPushMove
 D vtable for CTraceFilterSimple
 D vtable for CTraceFilterSimpleList
 D vtable for CTraceFilterSimpleNPCExclude
 D vtable for CTraceFilterSkipNPCs
 D vtable for CTraceFilterSkipPhysics
 D vtable for CTraceFilterSkipTwoEntities
 D vtable for CTraceFilterWorldOnly
 D vtable for CTraceListData
 D vtable for CTracePassFilter
 D vtable for CTriggerApplyImpulse
 D vtable for CTriggerAreaCapture
 D vtable for CTriggerAreaCaptureShim
 D vtable for CTriggerBrush
 D vtable for CTriggerCDAudio
 D vtable for CTriggerCamera
 D vtable for CTriggerGravity
 D vtable for CTriggerHurt
 D vtable for CTriggerHurtShim
 D vtable for CTriggerImpact
 D vtable for CTriggerLook
 D vtable for CTriggerMultiple
 D vtable for CTriggerOnce
 D vtable for CTriggerPhysicsTrap
 D vtable for CTriggerPlayerMovement
 D vtable for CTriggerProximity
 D vtable for CTriggerPush
 D vtable for CTriggerRPGFire
 D vtable for CTriggerRemove
 D vtable for CTriggerSave
 D vtable for CTriggerSoundscape
 D vtable for CTriggerTeleport
 D vtable for CTriggerTeleportRelative
 D vtable for CTriggerToggleSave
 D vtable for CTriggerTraceEnum
 D vtable for CTriggerVPhysicsMotion
 D vtable for CTriggerVolume
 D vtable for CTriggerWateryDeath
 D vtable for CTriggerWeaponDissolve
 D vtable for CTriggerWeaponStrip
 D vtable for CTriggerWind
 D vtable for CTripmineGrenade
 D vtable for CTurretTipController
 D vtable for CUsePushFilter
 D vtable for CUserCmd
 D vtable for CUtlCStringConversion
 D vtable for CUtlCachedFileData<CModelSoundsCache>
 D vtable for CUtlCharConversion
 D vtable for CUtlMapDataOps<CUtlMap<string_t, CSimpleSimTimer, char>, 2, 10>
 D vtable for CUtlNoEscConversion
 D vtable for CUtlSymbolDataOps
 D vtable for CUtlVectorDataOps<CAI_InterestTarget, 10>
 D vtable for CUtlVectorDataOps<CUtlVector<AISquadEnemyInfo_t, CUtlMemory<AISquadEnemyInfo_t, int> >, 10>
 D vtable for CUtlVectorDataOps<CUtlVector<AI_Waypoint_t, CUtlMemory<AI_Waypoint_t, int> >, 10>
 D vtable for CUtlVectorDataOps<CUtlVector<CAI_ScriptConditionsElement, CUtlMemory<CAI_ScriptConditionsElement, int> >, 10>
 D vtable for CUtlVectorDataOps<CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer, int> >, 10>
 D vtable for CUtlVectorDataOps<CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >, 12>
 D vtable for CUtlVectorDataOps<CUtlVector<CHandle<CAI_BaseNPC>, CUtlMemory<CHandle<CAI_BaseNPC>, int> >, 13>
 D vtable for CUtlVectorDataOps<CUtlVector<CHandle<CBaseCombatWeapon>, CUtlMemory<CHandle<CBaseCombatWeapon>, int> >, 13>
 D vtable for CUtlVectorDataOps<CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity>, int> >, 13>
 D vtable for CUtlVectorDataOps<CUtlVector<CHandle<CBaseFlex>, CUtlMemory<CHandle<CBaseFlex>, int> >, 13>
 D vtable for CUtlVectorDataOps<CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer>, int> >, 13>
 D vtable for CUtlVectorDataOps<CUtlVector<CHandle<CFish>, CUtlMemory<CHandle<CFish>, int> >, 13>
 D vtable for CUtlVectorDataOps<CUtlVector<CHandle<CNPC_Antlion>, CUtlMemory<CHandle<CNPC_Antlion>, int> >, 13>
 D vtable for CUtlVectorDataOps<CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity>, int> >, 13>
 D vtable for CUtlVectorDataOps<CUtlVector<CHandle<CSceneListManager>, CUtlMemory<CHandle<CSceneListManager>, int> >, 13>
 D vtable for CUtlVectorDataOps<CUtlVector<CHandle<CVGuiScreen>, CUtlMemory<CHandle<CVGuiScreen>, int> >, 13>
 D vtable for CUtlVectorDataOps<CUtlVector<CPassengerInfo, CUtlMemory<CPassengerInfo, int> >, 10>
 D vtable for CUtlVectorDataOps<CUtlVector<Relationship_t, CUtlMemory<Relationship_t, int> >, 10>
 D vtable for CUtlVectorDataOps<CUtlVector<ResponseContext_t, CUtlMemory<ResponseContext_t, int> >, 10>
 D vtable for CUtlVectorDataOps<CUtlVector<SaveRestoreBlockHeader_t, CUtlMemory<SaveRestoreBlockHeader_t, int> >, 10>
 D vtable for CUtlVectorDataOps<CUtlVector<ScriptedNPCInteraction_t, CUtlMemory<ScriptedNPCInteraction_t, int> >, 10>
 D vtable for CUtlVectorDataOps<CUtlVector<UnreachableEnt_t, CUtlMemory<UnreachableEnt_t, int> >, 10>
 D vtable for CUtlVectorDataOps<CUtlVector<float, CUtlMemory<float, int> >, 16>
 D vtable for CUtlVectorDataOps<CUtlVector<globalentity_t, CUtlMemory<globalentity_t, int> >, 10>
 D vtable for CUtlVectorDataOps<CUtlVector<int, CUtlMemory<int, int> >, 5>
 D vtable for CUtlVectorDataOps<CUtlVector<magnetted_objects_t, CUtlMemory<magnetted_objects_t, int> >, 10>
 D vtable for CUtlVectorDataOps<CUtlVector<modifiedconvars_t, CUtlMemory<modifiedconvars_t, int> >, 10>
 D vtable for CUtlVectorDataOps<CUtlVector<physfollower_t, CUtlMemory<physfollower_t, int> >, 10>
 D vtable for CUtlVectorDataOps<CUtlVector<template_t, CUtlMemory<template_t, int> >, 10>
 D vtable for CUtlVectorDataOps<CUtlVector<thinkfunc_t, CUtlMemory<thinkfunc_t, int> >, 10>
 D vtable for CUtlVectorDataOps<CUtlVector<vehicle_crashsound_t, CUtlMemory<vehicle_crashsound_t, int> >, 10>
 D vtable for CUtlVectorDataOps<CUtlVector<vehicle_gear_t, CUtlMemory<vehicle_gear_t, int> >, 10>
 D vtable for CUtlVectorDataOps<CUtlVector<washentity_t, CUtlMemory<washentity_t, int> >, 10>
 D vtable for CVGuiScreen
 D vtable for CVarBitVecSaveRestoreOps<CBitVec<32> >
 D vtable for CVariantSaveDataOps
 D vtable for CVehicleSoundsParser
 D vtable for CVoiceGameMgr
 D vtable for CVoiceGameMgrHelper
 D vtable for CVortigauntChargeToken
 D vtable for CVortigauntEffectDispel
 D vtable for CVoteController
 D vtable for CVoteControllerSystem
 D vtable for CWC_UpdateIgnoreList
 D vtable for CWallHealth
 D vtable for CWaterBullet
 D vtable for CWaterLODControl
 D vtable for CWaterTraceFilter
 D vtable for CWateryDeathLeech
 D vtable for CWeapon357
 D vtable for CWeaponAR2
 D vtable for CWeaponAnnabelle
 D vtable for CWeaponBugBait
 D vtable for CWeaponCrossbow
 D vtable for CWeaponCrowbar
 D vtable for CWeaponCubemap
 D vtable for CWeaponCycler
 D vtable for CWeaponFrag
 D vtable for CWeaponHL2MPBase
 D vtable for CWeaponLOSFilter
 D vtable for CWeaponList
 D vtable for CWeaponPhysCannon
 D vtable for CWeaponPistol
 D vtable for CWeaponRPG
 D vtable for CWeaponSMG1
 D vtable for CWeaponShotgun
 D vtable for CWeaponStunStick
 D vtable for CWeapon_SLAM
 D vtable for CWeightButton
 D vtable for CWindowPane
 D vtable for CWorkerThread
 D vtable for CWorld
 D vtable for CWorldItem
 D vtable for CWreckage
 D vtable for CZombie
 D vtable for ConCommand
 D vtable for ConVar
 D vtable for CountdownTimer
 D vtable for DustTrail
 D vtable for EntityParticleTrailInfo_t
 D vtable for FileWeaponInfo_t
 D vtable for FilterDamageType
 D vtable for FilterTeam
 D vtable for IBaseProjectileAutoList
 D vtable for IDecalEmitterSystem
 D vtable for IGameSystem
 D vtable for IGameSystemPerFrame
 D vtable for IModelLoadCallback
 D vtable for IPhysicsPropAutoList
 D vtable for IPredictionSystem
 D vtable for ITFTeamTrainWatcher
 D vtable for ITriggerAreaCaptureAutoList
 D vtable for ITriggerHurtAutoList
 D vtable for MovieExplosion
 D vtable for ParticleSmokeGrenade
 D vtable for RocketTrail
 D vtable for SendProp
 D vtable for SmokeTrail
 D vtable for SporeExplosion
 D vtable for SporeTrail
 D vtable for fogparams_t
 D vtable for locksound_t
 D vtable for sky3dparams_t
 D vtable for sky3dparams_t::NetworkVar_fog
 D vtable for vehicle_crashsound_t
 D vtable for vehicle_gear_t
 D vtable for vehiclesounds_t
 D vtable for washentity_t
 D washentity_t::m_DataMap
 DevMsg
 DevMsg(char const*, ...)
 DevWarning
 DevWarning(char const*, ...)
 DoNewAssertDialog
 Error
 GetCPUInformation
 HushAsserts
 KeyValuesSystem
 Log
 MemAllocScratch
 MemFreeScratch
 Msg
 Plat_FloatTime
 Plat_IsInBenchmarkMode
 Plat_IsInDebugSession
 Plat_MSTime
 Plat_SetBenchmarkMode
 R Four_Epsilons
 R Four_FLT_MAX
 R Four_Negative_FLT_MAX
 R Four_Ones
 R Four_Zeros
 R g_SIMD_ComponentMask
 R g_SIMD_clear_wmask
 R nanmask
 R typeinfo name for AR2Explosion
 R typeinfo name for CAISound
 R typeinfo name for CAI_ActBusyBehavior
 R typeinfo name for CAI_ActBusyGoal
 R typeinfo name for CAI_ActBusyQueueGoal
 R typeinfo name for CAI_AllyManager
 R typeinfo name for CAI_AllySpeechManager
 R typeinfo name for CAI_AntlionFollowBehavior
 R typeinfo name for CAI_AssaultBehavior
 R typeinfo name for CAI_AssaultGoal
 R typeinfo name for CAI_BaseActor
 R typeinfo name for CAI_BaseHumanoid
 R typeinfo name for CAI_BaseNPC
 R typeinfo name for CAI_BasePhysicsFlyingBot
 R typeinfo name for CAI_BattleLine
 R typeinfo name for CAI_Behavior<CAI_BaseNPC, 100000>
 R typeinfo name for CAI_BehaviorBase
 R typeinfo name for CAI_BehaviorHost<CAI_BaseNPC>
 R typeinfo name for CAI_BehaviorHost<CAI_BlendedNPC>
 R typeinfo name for CAI_BlendedMotor
 R typeinfo name for CAI_BlendedNPC
 R typeinfo name for CAI_BlendingHost<CAI_BaseNPC>
 R typeinfo name for CAI_BlendingHost<CAI_BehaviorHost<CAI_BaseNPC> >
 R typeinfo name for CAI_BlendingHost<CAI_BehaviorHost<CAI_BlendedNPC> >
 R typeinfo name for CAI_BlendingHost<CNPC_BaseZombie>
 R typeinfo name for CAI_ChangeHintGroup
 R typeinfo name for CAI_ChangeTarget
 R typeinfo name for CAI_Component
 R typeinfo name for CAI_ComponentWithOuter<CAI_BaseNPC, CAI_BehaviorBase>
 R typeinfo name for CAI_ComponentWithOuter<CNPC_Combine, CAI_StandoffBehavior>
 R typeinfo name for CAI_ComponentWithOuter<CNPC_Strider, CAI_Navigator>
 R typeinfo name for CAI_DefMovementSink
 R typeinfo name for CAI_DynamicLink
 R typeinfo name for CAI_DynamicLinkController
 R typeinfo name for CAI_EnemiesListSaveRestoreOps
 R typeinfo name for CAI_Expresser
 R typeinfo name for CAI_ExpresserHost<CAI_BaseHumanoid>
 R typeinfo name for CAI_ExpresserHost<CBasePlayer>
 R typeinfo name for CAI_ExpresserSink
 R typeinfo name for CAI_FollowBehavior
 R typeinfo name for CAI_FollowGoal
 R typeinfo name for CAI_FreePass
 R typeinfo name for CAI_FuncTankBehavior
 R typeinfo name for CAI_GoalEntity
 R typeinfo name for CAI_Hint
 R typeinfo name for CAI_LeadBehavior
 R typeinfo name for CAI_LeadBehaviorHandler
 R typeinfo name for CAI_LeadGoal
 R typeinfo name for CAI_LeadGoal_Weapon
 R typeinfo name for CAI_LocalNavigator
 R typeinfo name for CAI_MappedActivityBehavior_Temporary
 R typeinfo name for CAI_Motor
 R typeinfo name for CAI_MoveAndShootOverlay
 R typeinfo name for CAI_MoveProbe
 R typeinfo name for CAI_NavInHintGroupFilter
 R typeinfo name for CAI_Navigator
 R typeinfo name for CAI_Network
 R typeinfo name for CAI_NetworkBuildHelper
 R typeinfo name for CAI_NetworkManager
 R typeinfo name for CAI_Pathfinder
 R typeinfo name for CAI_PlayerAlly
 R typeinfo name for CAI_PoliceGoal
 R typeinfo name for CAI_PolicingBehavior
 R typeinfo name for CAI_ProxyMovementSink
 R typeinfo name for CAI_RadialLinkController
 R typeinfo name for CAI_RappelBehavior
 R typeinfo name for CAI_Relationship
 R typeinfo name for CAI_SaveRestoreBlockHandler
 R typeinfo name for CAI_ScriptConditions
 R typeinfo name for CAI_ScriptedSchedule
 R typeinfo name for CAI_ScriptedSentence
 R typeinfo name for CAI_ScriptedSequence
 R typeinfo name for CAI_SensedObjectsManager
 R typeinfo name for CAI_Senses
 R typeinfo name for CAI_Sentence<CNPC_Combine>
 R typeinfo name for CAI_Sentence<CNPC_MetroPolice>
 R typeinfo name for CAI_SentenceBase
 R typeinfo name for CAI_SpeechFilter
 R typeinfo name for CAI_Spotlight
 R typeinfo name for CAI_StandoffBehavior
 R typeinfo name for CAI_StandoffGoal
 R typeinfo name for CAI_SystemHook
 R typeinfo name for CAI_TacticalServices
 R typeinfo name for CAI_TestHull
 R typeinfo name for CAI_TrackPather
 R typeinfo name for CAPCController
 R typeinfo name for CAPCFourWheelServerVehicle
 R typeinfo name for CAPCMissile
 R typeinfo name for CAchievementHLXKillEliteSoldierWithOwnEnergyBall
 R typeinfo name for CAchievementHLXKillSoldierWithOwnGrenade
 R typeinfo name for CAchievementHLXKillWithHopper
 R typeinfo name for CAchievementHLXKillWithManhack
 R typeinfo name for CAchievementHLXKillWithOneEnergyBall
 R typeinfo name for CAchievementHLXKillWithPhysicsObjects
 R typeinfo name for CAchievementMgr
 R typeinfo name for CAchievementSaveRestoreBlockHandler
 R typeinfo name for CAchievementSaveThread
 R typeinfo name for CActBusyAnimData
 R typeinfo name for CActivityDataOps
 R typeinfo name for CAimTargetManager
 R typeinfo name for CAlyxEmpEffect
 R typeinfo name for CAmbientGeneric
 R typeinfo name for CAmmoDef
 R typeinfo name for CAnchorList
 R typeinfo name for CAngryZombieCounter
 R typeinfo name for CAntlionMakerManager
 R typeinfo name for CAntlionRepellant
 R typeinfo name for CAntlionTemplateMaker
 R typeinfo name for CAreaPortal
 R typeinfo name for CAssaultPoint
 R typeinfo name for CAutoGameSystem
 R typeinfo name for CAutoGameSystemPerFrame
 R typeinfo name for CAvoidBox
 R typeinfo name for CAvoidSphere
 R typeinfo name for CBarnacleTongueFilter
 R typeinfo name for CBarnacleTongueTip
 R typeinfo name for CBaseAchievement
 R typeinfo name for CBaseAnimating
 R typeinfo name for CBaseAnimatingOverlay
 R typeinfo name for CBaseAppSystem<IParticleSystemQuery>
 R typeinfo name for CBaseButton
 R typeinfo name for CBaseCombatCharacter
 R typeinfo name for CBaseCombatWeapon
 R typeinfo name for CBaseDMStart
 R typeinfo name for CBaseDoor
 R typeinfo name for CBaseEntity
 R typeinfo name for CBaseEntity*
 R typeinfo name for CBaseEntity::NetworkVar_m_Collision
 R typeinfo name for CBaseEntityClassList
 R typeinfo name for CBaseEntityList
 R typeinfo name for CBaseEntityModelLoadProxy::Handler
 R typeinfo name for CBaseFilter
 R typeinfo name for CBaseFire
 R typeinfo name for CBaseFlex
 R typeinfo name for CBaseGameStats
 R typeinfo name for CBaseGameStats_Driver
 R typeinfo name for CBaseGameSystem
 R typeinfo name for CBaseGameSystemPerFrame
 R typeinfo name for CBaseGrenade
 R typeinfo name for CBaseGrenadeConcussion
 R typeinfo name for CBaseGrenadeContact
 R typeinfo name for CBaseGrenadeTimed
 R typeinfo name for CBaseHL2MPBludgeonWeapon
 R typeinfo name for CBaseHL2MPCombatWeapon
 R typeinfo name for CBaseHLCombatWeapon
 R typeinfo name for CBaseHeadcrab
 R typeinfo name for CBaseHelicopter
 R typeinfo name for CBaseMoveBehavior
 R typeinfo name for CBaseMultiplayerPlayer
 R typeinfo name for CBaseNPCMaker
 R typeinfo name for CBaseParticleEntity
 R typeinfo name for CBasePlatTrain
 R typeinfo name for CBasePlayer
 R typeinfo name for CBasePlayer::NetworkVar_m_Local
 R typeinfo name for CBasePlayer::NetworkVar_pl
 R typeinfo name for CBaseProjectile
 R typeinfo name for CBaseProp
 R typeinfo name for CBasePropDoor
 R typeinfo name for CBaseRopePhysics
 R typeinfo name for CBaseServerVehicle
 R typeinfo name for CBaseSpriteProjectile
 R typeinfo name for CBaseTempEntity
 R typeinfo name for CBaseToggle
 R typeinfo name for CBaseTrigger
 R typeinfo name for CBaseVPhysicsTrigger
 R typeinfo name for CBaseViewModel
 R typeinfo name for CBeam
 R typeinfo name for CBlackHeadcrab
 R typeinfo name for CBlendingCycler
 R typeinfo name for CBlood
 R typeinfo name for CBloodSplat
 R typeinfo name for CBombDropSensor
 R typeinfo name for CBombSuppressor
 R typeinfo name for CBoneFollower
 R typeinfo name for CBotCmd
 R typeinfo name for CBounceBomb
 R typeinfo name for CBreakModelsPrecached
 R typeinfo name for CBreakParser
 R typeinfo name for CBreakable
 R typeinfo name for CBreakableProp
 R typeinfo name for CBreakableSurface
 R typeinfo name for CBroadcastRecipientFilter
 R typeinfo name for CBubbling
 R typeinfo name for CBugBaitSensor
 R typeinfo name for CBulletsTraceFilter
 R typeinfo name for CBullseyeList
 R typeinfo name for CChangeLevel
 R typeinfo name for CCheckClient
 R typeinfo name for CChildOperatorDefinition
 R typeinfo name for CChoreoEvent
 R typeinfo name for CChoreoScene
 R typeinfo name for CChoreoStringPool
 R typeinfo name for CCitadelEnergyCore
 R typeinfo name for CCitizenResponseSystem
 R typeinfo name for CClassPtrSaveRestoreOps
 R typeinfo name for CCleanupDefaultRelationShips
 R typeinfo name for CCollideList
 R typeinfo name for CCollisionEvent
 R typeinfo name for CCollisionProperty
 R typeinfo name for CColorCorrection
 R typeinfo name for CColorCorrectionVolume
 R typeinfo name for CCombatCharVisCache
 R typeinfo name for CCombineDropshipContainer
 R typeinfo name for CCommandPoint
 R typeinfo name for CCommentaryAuto
 R typeinfo name for CCommentarySystem
 R typeinfo name for CCommentaryViewPosition
 R typeinfo name for CCommentary_SaveRestoreBlockHandler
 R typeinfo name for CConceptHistoriesDataOps
 R typeinfo name for CConcussiveBlast
 R typeinfo name for CConstantForceController
 R typeinfo name for CConstraintAnchor
 R typeinfo name for CCopyRecipientFilter
 R typeinfo name for CCorpse
 R typeinfo name for CCraneServerVehicle
 R typeinfo name for CCraneTip
 R typeinfo name for CCredits
 R typeinfo name for CCrossbowBolt
 R typeinfo name for CCycler
 R typeinfo name for CDataManager<CBoneCache, bonecacheparams_t, CBoneCache*, CThreadFastMutex>
 R typeinfo name for CDataManagerBase
 R typeinfo name for CDataObjectAccessSystem
 R typeinfo name for CDebugHistory
 R typeinfo name for CDecal
 R typeinfo name for CDecalEmitterSystem
 R typeinfo name for CDefSaveRestoreBlockHandler
 R typeinfo name for CDefSaveRestoreOps
 R typeinfo name for CDefaultAccessor
 R typeinfo name for CDefaultParticleSystemQuery
 R typeinfo name for CDefaultPlayerPickupVPhysics
 R typeinfo name for CDefaultResponseSystem
 R typeinfo name for CDefaultResponseSystemSaveRestoreBlockHandler
 R typeinfo name for CDevShotSystem
 R typeinfo name for CDirtySpatialPartitionEntityList
 R typeinfo name for CDllDemandLoader
 R typeinfo name for CDynamicLight
 R typeinfo name for CDynamicProp
 R typeinfo name for CEffectsServer
 R typeinfo name for CEmbers
 R typeinfo name for CEmptyConVar
 R typeinfo name for CEnableMotionFixup
 R typeinfo name for CEntFireAutoCompletionFunctor
 R typeinfo name for CEntityBlocker
 R typeinfo name for CEntityClassList<CAPCMissile>
 R typeinfo name for CEntityClassList<CBugBaitSensor>
 R typeinfo name for CEntityClassList<CLaserDot>
 R typeinfo name for CEntityClassList<CPhysicsNPCSolver>
 R typeinfo name for CEntityClassList<CPointCamera>
 R typeinfo name for CEntityClassList<CSkyCamera>
 R typeinfo name for CEntityDataInstantiator<CWatcherList>
 R typeinfo name for CEntityDataInstantiator<ModelScale>
 R typeinfo name for CEntityDataInstantiator<StepSimulationData>
 R typeinfo name for CEntityDataInstantiator<groundlink_t>
 R typeinfo name for CEntityDataInstantiator<physicspushlist_t>
 R typeinfo name for CEntityDataInstantiator<touchlink_t>
 R typeinfo name for CEntityDataInstantiator<vphysicsupdateai_t>
 R typeinfo name for CEntityDissolve
 R typeinfo name for CEntityFactory<AR2Explosion>
 R typeinfo name for CEntityFactory<CAISound>
 R typeinfo name for CEntityFactory<CAI_ActBusyGoal>
 R typeinfo name for CEntityFactory<CAI_ActBusyQueueGoal>
 R typeinfo name for CEntityFactory<CAI_AllyManager>
 R typeinfo name for CEntityFactory<CAI_AllySpeechManager>
 R typeinfo name for CEntityFactory<CAI_AssaultGoal>
 R typeinfo name for CEntityFactory<CAI_BattleLine>
 R typeinfo name for CEntityFactory<CAI_ChangeHintGroup>
 R typeinfo name for CEntityFactory<CAI_ChangeTarget>
 R typeinfo name for CEntityFactory<CAI_DynamicLink>
 R typeinfo name for CEntityFactory<CAI_DynamicLinkController>
 R typeinfo name for CEntityFactory<CAI_FollowGoal>
 R typeinfo name for CEntityFactory<CAI_Hint>
 R typeinfo name for CEntityFactory<CAI_LeadGoal>
 R typeinfo name for CEntityFactory<CAI_LeadGoal_Weapon>
 R typeinfo name for CEntityFactory<CAI_NetworkManager>
 R typeinfo name for CEntityFactory<CAI_PoliceGoal>
 R typeinfo name for CEntityFactory<CAI_RadialLinkController>
 R typeinfo name for CEntityFactory<CAI_Relationship>
 R typeinfo name for CEntityFactory<CAI_ScriptConditions>
 R typeinfo name for CEntityFactory<CAI_ScriptedSchedule>
 R typeinfo name for CEntityFactory<CAI_ScriptedSentence>
 R typeinfo name for CEntityFactory<CAI_ScriptedSequence>
 R typeinfo name for CEntityFactory<CAI_SpeechFilter>
 R typeinfo name for CEntityFactory<CAI_StandoffGoal>
 R typeinfo name for CEntityFactory<CAI_TestHull>
 R typeinfo name for CEntityFactory<CAPCController>
 R typeinfo name for CEntityFactory<CAPCMissile>
 R typeinfo name for CEntityFactory<CAlyxEmpEffect>
 R typeinfo name for CEntityFactory<CAmbientGeneric>
 R typeinfo name for CEntityFactory<CAntlionRepellant>
 R typeinfo name for CEntityFactory<CAntlionTemplateMaker>
 R typeinfo name for CEntityFactory<CAreaPortal>
 R typeinfo name for CEntityFactory<CAssaultPoint>
 R typeinfo name for CEntityFactory<CAvoidBox>
 R typeinfo name for CEntityFactory<CAvoidSphere>
 R typeinfo name for CEntityFactory<CBarnacleTongueTip>
 R typeinfo name for CEntityFactory<CBaseButton>
 R typeinfo name for CEntityFactory<CBaseDMStart>
 R typeinfo name for CEntityFactory<CBaseDoor>
 R typeinfo name for CEntityFactory<CBaseEntity>
 R typeinfo name for CEntityFactory<CBaseFilter>
 R typeinfo name for CEntityFactory<CBaseFlex>
 R typeinfo name for CEntityFactory<CBaseGrenade>
 R typeinfo name for CEntityFactory<CBaseGrenadeConcussion>
 R typeinfo name for CEntityFactory<CBaseGrenadeContact>
 R typeinfo name for CEntityFactory<CBaseGrenadeTimed>
 R typeinfo name for CEntityFactory<CBaseHL2MPCombatWeapon>
 R typeinfo name for CEntityFactory<CBaseHLCombatWeapon>
 R typeinfo name for CEntityFactory<CBaseMoveBehavior>
 R typeinfo name for CEntityFactory<CBaseSpriteProjectile>
 R typeinfo name for CEntityFactory<CBaseTrigger>
 R typeinfo name for CEntityFactory<CBaseViewModel>
 R typeinfo name for CEntityFactory<CBeam>
 R typeinfo name for CEntityFactory<CBlackHeadcrab>
 R typeinfo name for CEntityFactory<CBlendingCycler>
 R typeinfo name for CEntityFactory<CBlood>
 R typeinfo name for CEntityFactory<CBombDropSensor>
 R typeinfo name for CEntityFactory<CBombSuppressor>
 R typeinfo name for CEntityFactory<CBoneFollower>
 R typeinfo name for CEntityFactory<CBounceBomb>
 R typeinfo name for CEntityFactory<CBreakable>
 R typeinfo name for CEntityFactory<CBreakableSurface>
 R typeinfo name for CEntityFactory<CBubbling>
 R typeinfo name for CEntityFactory<CBugBaitSensor>
 R typeinfo name for CEntityFactory<CChangeLevel>
 R typeinfo name for CEntityFactory<CCitadelEnergyCore>
 R typeinfo name for CEntityFactory<CCitizenResponseSystem>
 R typeinfo name for CEntityFactory<CColorCorrection>
 R typeinfo name for CEntityFactory<CColorCorrectionVolume>
 R typeinfo name for CEntityFactory<CCombineDropshipContainer>
 R typeinfo name for CEntityFactory<CCommandPoint>
 R typeinfo name for CEntityFactory<CCommentaryAuto>
 R typeinfo name for CEntityFactory<CCommentaryViewPosition>
 R typeinfo name for CEntityFactory<CConcussiveBlast>
 R typeinfo name for CEntityFactory<CConstraintAnchor>
 R typeinfo name for CEntityFactory<CCorpse>
 R typeinfo name for CEntityFactory<CCraneTip>
 R typeinfo name for CEntityFactory<CCredits>
 R typeinfo name for CEntityFactory<CCrossbowBolt>
 R typeinfo name for CEntityFactory<CDebugHistory>
 R typeinfo name for CEntityFactory<CDecal>
 R typeinfo name for CEntityFactory<CDynamicLight>
 R typeinfo name for CEntityFactory<CDynamicProp>
 R typeinfo name for CEntityFactory<CEmbers>
 R typeinfo name for CEntityFactory<CEnableMotionFixup>
 R typeinfo name for CEntityFactory<CEntityBlocker>
 R typeinfo name for CEntityFactory<CEntityDissolve>
 R typeinfo name for CEntityFactory<CEntityFlame>
 R typeinfo name for CEntityFactory<CEntityParticleTrail>
 R typeinfo name for CEntityFactory<CEnvAR2Explosion>
 R typeinfo name for CEntityFactory<CEnvBeam>
 R typeinfo name for CEntityFactory<CEnvBeverage>
 R typeinfo name for CEntityFactory<CEnvDetailController>
 R typeinfo name for CEntityFactory<CEnvDustPuff>
 R typeinfo name for CEntityFactory<CEnvEffectsScript>
 R typeinfo name for CEntityFactory<CEnvEntityMaker>
 R typeinfo name for CEntityFactory<CEnvExplosion>
 R typeinfo name for CEntityFactory<CEnvFade>
 R typeinfo name for CEntityFactory<CEnvFireSensor>
 R typeinfo name for CEntityFactory<CEnvFireSource>
 R typeinfo name for CEntityFactory<CEnvFunnel>
 R typeinfo name for CEntityFactory<CEnvGlobal>
 R typeinfo name for CEntityFactory<CEnvGunfire>
 R typeinfo name for CEntityFactory<CEnvHeadcrabCanister>
 R typeinfo name for CEntityFactory<CEnvHudHint>
 R typeinfo name for CEntityFactory<CEnvLaser>
 R typeinfo name for CEntityFactory<CEnvLight>
 R typeinfo name for CEntityFactory<CEnvMicrophone>
 R typeinfo name for CEntityFactory<CEnvMuzzleFlash>
 R typeinfo name for CEntityFactory<CEnvParticleScript>
 R typeinfo name for CEntityFactory<CEnvPlayerSurfaceTrigger>
 R typeinfo name for CEntityFactory<CEnvProjectedTexture>
 R typeinfo name for CEntityFactory<CEnvQuadraticBeam>
 R typeinfo name for CEntityFactory<CEnvScreenEffect>
 R typeinfo name for CEntityFactory<CEnvScreenOverlay>
 R typeinfo name for CEntityFactory<CEnvShake>
 R typeinfo name for CEntityFactory<CEnvShooter>
 R typeinfo name for CEntityFactory<CEnvSoundscape>
 R typeinfo name for CEntityFactory<CEnvSoundscapeProxy>
 R typeinfo name for CEntityFactory<CEnvSoundscapeTriggerable>
 R typeinfo name for CEntityFactory<CEnvSpark>
 R typeinfo name for CEntityFactory<CEnvSplash>
 R typeinfo name for CEntityFactory<CEnvStarfield>
 R typeinfo name for CEntityFactory<CEnvTonemapController>
 R typeinfo name for CEntityFactory<CEnvTracer>
 R typeinfo name for CEntityFactory<CEnvViewPunch>
 R typeinfo name for CEntityFactory<CEnvWind>
 R typeinfo name for CEntityFactory<CEnvZoom>
 R typeinfo name for CEntityFactory<CEventQueueSaveLoadProxy>
 R typeinfo name for CEntityFactory<CFastHeadcrab>
 R typeinfo name for CEntityFactory<CFilterClass>
 R typeinfo name for CEntityFactory<CFilterCombineBall>
 R typeinfo name for CEntityFactory<CFilterEnemy>
 R typeinfo name for CEntityFactory<CFilterMassGreater>
 R typeinfo name for CEntityFactory<CFilterMultiple>
 R typeinfo name for CEntityFactory<CFilterName>
 R typeinfo name for CEntityFactory<CFire>
 R typeinfo name for CEntityFactory<CFireSmoke>
 R typeinfo name for CEntityFactory<CFireTrail>
 R typeinfo name for CEntityFactory<CFish>
 R typeinfo name for CEntityFactory<CFishPool>
 R typeinfo name for CEntityFactory<CFlare>
 R typeinfo name for CEntityFactory<CFlextalkActor>
 R typeinfo name for CEntityFactory<CFogController>
 R typeinfo name for CEntityFactory<CFuncAreaPortalWindow>
 R typeinfo name for CEntityFactory<CFuncBrush>
 R typeinfo name for CEntityFactory<CFuncCombineBallSpawner>
 R typeinfo name for CEntityFactory<CFuncConveyor>
 R typeinfo name for CEntityFactory<CFuncIllusionary>
 R typeinfo name for CEntityFactory<CFuncLadder>
 R typeinfo name for CEntityFactory<CFuncLadderEndPoint>
 R typeinfo name for CEntityFactory<CFuncMonitor>
 R typeinfo name for CEntityFactory<CFuncMoveLinear>
 R typeinfo name for CEntityFactory<CFuncOccluder>
 R typeinfo name for CEntityFactory<CFuncPlat>
 R typeinfo name for CEntityFactory<CFuncPlatRot>
 R typeinfo name for CEntityFactory<CFuncReflectiveGlass>
 R typeinfo name for CEntityFactory<CFuncRotating>
 R typeinfo name for CEntityFactory<CFuncSmokeVolume>
 R typeinfo name for CEntityFactory<CFuncTankAPCRocket>
 R typeinfo name for CEntityFactory<CFuncTankAirboatGun>
 R typeinfo name for CEntityFactory<CFuncTankCombineCannon>
 R typeinfo name for CEntityFactory<CFuncTankGun>
 R typeinfo name for CEntityFactory<CFuncTankLaser>
 R typeinfo name for CEntityFactory<CFuncTankMortar>
 R typeinfo name for CEntityFactory<CFuncTankPhysCannister>
 R typeinfo name for CEntityFactory<CFuncTankPulseLaser>
 R typeinfo name for CEntityFactory<CFuncTankRocket>
 R typeinfo name for CEntityFactory<CFuncTankTrain>
 R typeinfo name for CEntityFactory<CFuncTrackAuto>
 R typeinfo name for CEntityFactory<CFuncTrackChange>
 R typeinfo name for CEntityFactory<CFuncTrackTrain>
 R typeinfo name for CEntityFactory<CFuncTrain>
 R typeinfo name for CEntityFactory<CFuncTrainControls>
 R typeinfo name for CEntityFactory<CFuncVPhysicsClip>
 R typeinfo name for CEntityFactory<CFuncVehicleClip>
 R typeinfo name for CEntityFactory<CFuncWall>
 R typeinfo name for CEntityFactory<CFuncWallToggle>
 R typeinfo name for CEntityFactory<CFunc_DustCloud>
 R typeinfo name for CEntityFactory<CFunc_DustMotes>
 R typeinfo name for CEntityFactory<CFunc_LOD>
 R typeinfo name for CEntityFactory<CGameEnd>
 R typeinfo name for CEntityFactory<CGameGibManager>
 R typeinfo name for CEntityFactory<CGamePlayerEquip>
 R typeinfo name for CEntityFactory<CGamePlayerTeam>
 R typeinfo name for CEntityFactory<CGamePlayerZone>
 R typeinfo name for CEntityFactory<CGameScore>
 R typeinfo name for CEntityFactory<CGameText>
 R typeinfo name for CEntityFactory<CGameUI>
 R typeinfo name for CEntityFactory<CGameWeaponManager>
 R typeinfo name for CEntityFactory<CGenericActor>
 R typeinfo name for CEntityFactory<CGenericCycler>
 R typeinfo name for CEntityFactory<CGenericFlexCycler>
 R typeinfo name for CEntityFactory<CGenericNPC>
 R typeinfo name for CEntityFactory<CGib>
 R typeinfo name for CEntityFactory<CGibShooter>
 R typeinfo name for CEntityFactory<CGrenadeAR2>
 R typeinfo name for CEntityFactory<CGrenadeBeam>
 R typeinfo name for CEntityFactory<CGrenadeBeamChaser>
 R typeinfo name for CEntityFactory<CGrenadeBugBait>
 R typeinfo name for CEntityFactory<CGrenadeFrag>
 R typeinfo name for CEntityFactory<CGrenadeHelicopter>
 R typeinfo name for CEntityFactory<CGrenadeHomer>
 R typeinfo name for CEntityFactory<CGrenadePathfollower>
 R typeinfo name for CEntityFactory<CGunTarget>
 R typeinfo name for CEntityFactory<CHL2MPGameRulesProxy>
 R typeinfo name for CEntityFactory<CHL2MPRagdoll>
 R typeinfo name for CEntityFactory<CHL2MP_Player>
 R typeinfo name for CEntityFactory<CHL2NetworkBuildHelper>
 R typeinfo name for CEntityFactory<CHalfLife2Proxy>
 R typeinfo name for CEntityFactory<CHandleDummy>
 R typeinfo name for CEntityFactory<CHandleTest>
 R typeinfo name for CEntityFactory<CHeadcrab>
 R typeinfo name for CEntityFactory<CHealthKit>
 R typeinfo name for CEntityFactory<CHealthVial>
 R typeinfo name for CEntityFactory<CHelicopterChunk>
 R typeinfo name for CEntityFactory<CInfoAPCMissileHint>
 R typeinfo name for CEntityFactory<CInfoCameraLink>
 R typeinfo name for CEntityFactory<CInfoIntermission>
 R typeinfo name for CEntityFactory<CInfoLadderDismount>
 R typeinfo name for CEntityFactory<CInfoLightingRelative>
 R typeinfo name for CEntityFactory<CInfoMassCenter>
 R typeinfo name for CEntityFactory<CInfoOverlayAccessor>
 R typeinfo name for CEntityFactory<CInfoTarget>
 R typeinfo name for CEntityFactory<CInfoTeleporterCountdown>
 R typeinfo name for CEntityFactory<CInstancedSceneEntity>
 R typeinfo name for CEntityFactory<CItemBattery>
 R typeinfo name for CEntityFactory<CItemSoda>
 R typeinfo name for CEntityFactory<CItemSuit>
 R typeinfo name for CEntityFactory<CItem_AR2AltFireRound>
 R typeinfo name for CEntityFactory<CItem_AR2_Grenade>
 R typeinfo name for CEntityFactory<CItem_AmmoCrate>
 R typeinfo name for CEntityFactory<CItem_Box357Rounds>
 R typeinfo name for CEntityFactory<CItem_BoxBuckshot>
 R typeinfo name for CEntityFactory<CItem_BoxFlareRounds>
 R typeinfo name for CEntityFactory<CItem_BoxLRounds>
 R typeinfo name for CEntityFactory<CItem_BoxMRounds>
 R typeinfo name for CEntityFactory<CItem_BoxSRounds>
 R typeinfo name for CEntityFactory<CItem_BoxSniperRounds>
 R typeinfo name for CEntityFactory<CItem_BoxXBowRounds>
 R typeinfo name for CEntityFactory<CItem_DynamicResupply>
 R typeinfo name for CEntityFactory<CItem_FlareRound>
 R typeinfo name for CEntityFactory<CItem_ItemCrate>
 R typeinfo name for CEntityFactory<CItem_LargeBox357Rounds>
 R typeinfo name for CEntityFactory<CItem_LargeBoxLRounds>
 R typeinfo name for CEntityFactory<CItem_LargeBoxMRounds>
 R typeinfo name for CEntityFactory<CItem_LargeBoxSRounds>
 R typeinfo name for CEntityFactory<CItem_RPG_Round>
 R typeinfo name for CEntityFactory<CKeepUpright>
 R typeinfo name for CEntityFactory<CLaserDot>
 R typeinfo name for CEntityFactory<CLight>
 R typeinfo name for CEntityFactory<CLightGlow>
 R typeinfo name for CEntityFactory<CLogicActiveAutosave>
 R typeinfo name for CEntityFactory<CLogicAuto>
 R typeinfo name for CEntityFactory<CLogicAutosave>
 R typeinfo name for CEntityFactory<CLogicBranch>
 R typeinfo name for CEntityFactory<CLogicBranchList>
 R typeinfo name for CEntityFactory<CLogicCase>
 R typeinfo name for CEntityFactory<CLogicCollisionPair>
 R typeinfo name for CEntityFactory<CLogicCompare>
 R typeinfo name for CEntityFactory<CLogicCompareInteger>
 R typeinfo name for CEntityFactory<CLogicLineToEntity>
 R typeinfo name for CEntityFactory<CLogicMeasureMovement>
 R typeinfo name for CEntityFactory<CLogicNavigation>
 R typeinfo name for CEntityFactory<CLogicPlayerProxy>
 R typeinfo name for CEntityFactory<CLogicRelay>
 R typeinfo name for CEntityFactory<CLookDoor>
 R typeinfo name for CEntityFactory<CLookDoorThinker>
 R typeinfo name for CEntityFactory<CMaterialModifyControl>
 R typeinfo name for CEntityFactory<CMathColorBlend>
 R typeinfo name for CEntityFactory<CMathCounter>
 R typeinfo name for CEntityFactory<CMathRemap>
 R typeinfo name for CEntityFactory<CMessage>
 R typeinfo name for CEntityFactory<CMessageEntity>
 R typeinfo name for CEntityFactory<CMissile>
 R typeinfo name for CEntityFactory<CMomentaryRotButton>
 R typeinfo name for CEntityFactory<CMortarShell>
 R typeinfo name for CEntityFactory<CMovementSpeedMod>
 R typeinfo name for CEntityFactory<CMultiSource>
 R typeinfo name for CEntityFactory<CNPCMaker>
 R typeinfo name for CEntityFactory<CNPCSpawnDestination>
 R typeinfo name for CEntityFactory<CNPC_APCDriver>
 R typeinfo name for CEntityFactory<CNPC_Alyx>
 R typeinfo name for CEntityFactory<CNPC_Antlion>
 R typeinfo name for CEntityFactory<CNPC_AntlionGuard>
 R typeinfo name for CEntityFactory<CNPC_AttackHelicopter>
 R typeinfo name for CEntityFactory<CNPC_Barnacle>
 R typeinfo name for CEntityFactory<CNPC_Barney>
 R typeinfo name for CEntityFactory<CNPC_Breen>
 R typeinfo name for CEntityFactory<CNPC_Bullseye>
 R typeinfo name for CEntityFactory<CNPC_CScanner>
 R typeinfo name for CEntityFactory<CNPC_CeilingTurret>
 R typeinfo name for CEntityFactory<CNPC_Citizen>
 R typeinfo name for CEntityFactory<CNPC_ClawScanner>
 R typeinfo name for CEntityFactory<CNPC_Combine>
 R typeinfo name for CEntityFactory<CNPC_CombineCamera>
 R typeinfo name for CEntityFactory<CNPC_CombineDropship>
 R typeinfo name for CEntityFactory<CNPC_CombineGunship>
 R typeinfo name for CEntityFactory<CNPC_CombineS>
 R typeinfo name for CEntityFactory<CNPC_CraneDriver>
 R typeinfo name for CEntityFactory<CNPC_Crow>
 R typeinfo name for CEntityFactory<CNPC_Dog>
 R typeinfo name for CEntityFactory<CNPC_Eli>
 R typeinfo name for CEntityFactory<CNPC_EnemyFinder>
 R typeinfo name for CEntityFactory<CNPC_EnemyFinderCombineCannon>
 R typeinfo name for CEntityFactory<CNPC_Fisherman>
 R typeinfo name for CEntityFactory<CNPC_FloorTurret>
 R typeinfo name for CEntityFactory<CNPC_Furniture>
 R typeinfo name for CEntityFactory<CNPC_GMan>
 R typeinfo name for CEntityFactory<CNPC_GroundTurret>
 R typeinfo name for CEntityFactory<CNPC_Ichthyosaur>
 R typeinfo name for CEntityFactory<CNPC_Kleiner>
 R typeinfo name for CEntityFactory<CNPC_Launcher>
 R typeinfo name for CEntityFactory<CNPC_Manhack>
 R typeinfo name for CEntityFactory<CNPC_MetroPolice>
 R typeinfo name for CEntityFactory<CNPC_MissileDefense>
 R typeinfo name for CEntityFactory<CNPC_Monk>
 R typeinfo name for CEntityFactory<CNPC_Mossman>
 R typeinfo name for CEntityFactory<CNPC_Pigeon>
 R typeinfo name for CEntityFactory<CNPC_PoisonZombie>
 R typeinfo name for CEntityFactory<CNPC_RollerMine>
 R typeinfo name for CEntityFactory<CNPC_Seagull>
 R typeinfo name for CEntityFactory<CNPC_Stalker>
 R typeinfo name for CEntityFactory<CNPC_Strider>
 R typeinfo name for CEntityFactory<CNPC_VehicleDriver>
 R typeinfo name for CEntityFactory<CNPC_Vortigaunt>
 R typeinfo name for CEntityFactory<CNewNPC>
 R typeinfo name for CEntityFactory<CNewRecharge>
 R typeinfo name for CEntityFactory<CNewWallHealth>
 R typeinfo name for CEntityFactory<CNodeEnt>
 R typeinfo name for CEntityFactory<CNullEntity>
 R typeinfo name for CEntityFactory<COrnamentProp>
 R typeinfo name for CEntityFactory<CParticleFire>
 R typeinfo name for CEntityFactory<CParticleLight>
 R typeinfo name for CEntityFactory<CParticlePerformanceMonitor>
 R typeinfo name for CEntityFactory<CParticleSystem>
 R typeinfo name for CEntityFactory<CPathCorner>
 R typeinfo name for CEntityFactory<CPathCornerCrash>
 R typeinfo name for CEntityFactory<CPathKeyFrame>
 R typeinfo name for CEntityFactory<CPathTrack>
 R typeinfo name for CEntityFactory<CPhysBallSocket>
 R typeinfo name for CEntityFactory<CPhysBox>
 R typeinfo name for CEntityFactory<CPhysBoxMultiplayer>
 R typeinfo name for CEntityFactory<CPhysConstraintSystem>
 R typeinfo name for CEntityFactory<CPhysConvert>
 R typeinfo name for CEntityFactory<CPhysExplosion>
 R typeinfo name for CEntityFactory<CPhysFixed>
 R typeinfo name for CEntityFactory<CPhysHinge>
 R typeinfo name for CEntityFactory<CPhysImpact>
 R typeinfo name for CEntityFactory<CPhysLength>
 R typeinfo name for CEntityFactory<CPhysMagnet>
 R typeinfo name for CEntityFactory<CPhysMotor>
 R typeinfo name for CEntityFactory<CPhysPulley>
 R typeinfo name for CEntityFactory<CPhysSlideConstraint>
 R typeinfo name for CEntityFactory<CPhysSphere>
 R typeinfo name for CEntityFactory<CPhysThruster>
 R typeinfo name for CEntityFactory<CPhysTorque>
 R typeinfo name for CEntityFactory<CPhysicsCannister>
 R typeinfo name for CEntityFactory<CPhysicsEntitySolver>
 R typeinfo name for CEntityFactory<CPhysicsNPCSolver>
 R typeinfo name for CEntityFactory<CPhysicsProp>
 R typeinfo name for CEntityFactory<CPhysicsPropMultiplayer>
 R typeinfo name for CEntityFactory<CPhysicsPropRespawnable>
 R typeinfo name for CEntityFactory<CPhysicsSpring>
 R typeinfo name for CEntityFactory<CPhysicsWire>
 R typeinfo name for CEntityFactory<CPlasma>
 R typeinfo name for CEntityFactory<CPlayerPickupController>
 R typeinfo name for CEntityFactory<CPlayerResource>
 R typeinfo name for CEntityFactory<CPointAngleSensor>
 R typeinfo name for CEntityFactory<CPointAngularVelocitySensor>
 R typeinfo name for CEntityFactory<CPointBonusMapsAccessor>
 R typeinfo name for CEntityFactory<CPointCamera>
 R typeinfo name for CEntityFactory<CPointClientCommand>
 R typeinfo name for CEntityFactory<CPointCombineBallLauncher>
 R typeinfo name for CEntityFactory<CPointCommentaryNode>
 R typeinfo name for CEntityFactory<CPointDevShotCamera>
 R typeinfo name for CEntityFactory<CPointEntity>
 R typeinfo name for CEntityFactory<CPointGamestatsCounter>
 R typeinfo name for CEntityFactory<CPointHurt>
 R typeinfo name for CEntityFactory<CPointPlayerMoveConstraint>
 R typeinfo name for CEntityFactory<CPointProximitySensor>
 R typeinfo name for CEntityFactory<CPointPush>
 R typeinfo name for CEntityFactory<CPointServerCommand>
 R typeinfo name for CEntityFactory<CPointSpotlight>
 R typeinfo name for CEntityFactory<CPointTeleport>
 R typeinfo name for CEntityFactory<CPointTemplate>
 R typeinfo name for CEntityFactory<CPointVelocitySensor>
 R typeinfo name for CEntityFactory<CPoseController>
 R typeinfo name for CEntityFactory<CPrecipitation>
 R typeinfo name for CEntityFactory<CPredictedViewModel>
 R typeinfo name for CEntityFactory<CProjectedDecal>
 R typeinfo name for CEntityFactory<CPropAPC>
 R typeinfo name for CEntityFactory<CPropAirboat>
 R typeinfo name for CEntityFactory<CPropCombineBall>
 R typeinfo name for CEntityFactory<CPropCrane>
 R typeinfo name for CEntityFactory<CPropDoorRotating>
 R typeinfo name for CEntityFactory<CPropThumper>
 R typeinfo name for CEntityFactory<CPropVehicle>
 R typeinfo name for CEntityFactory<CPropVehicleDriveable>
 R typeinfo name for CEntityFactory<CPropVehiclePrisonerPod>
 R typeinfo name for CEntityFactory<CPropVehicleViewController>
 R typeinfo name for CEntityFactory<CProtoSniper>
 R typeinfo name for CEntityFactory<CPushable>
 R typeinfo name for CEntityFactory<CRagGib>
 R typeinfo name for CEntityFactory<CRagdollBoogie>
 R typeinfo name for CEntityFactory<CRagdollConstraint>
 R typeinfo name for CEntityFactory<CRagdollMagnet>
 R typeinfo name for CEntityFactory<CRagdollManager>
 R typeinfo name for CEntityFactory<CRagdollProp>
 R typeinfo name for CEntityFactory<CRagdollPropAttached>
 R typeinfo name for CEntityFactory<CRallyPoint>
 R typeinfo name for CEntityFactory<CRecharge>
 R typeinfo name for CEntityFactory<CReservePlayerSpot>
 R typeinfo name for CEntityFactory<CRevertSaved>
 R typeinfo name for CEntityFactory<CRopeAnchor>
 R typeinfo name for CEntityFactory<CRopeKeyframe>
 R typeinfo name for CEntityFactory<CRotButton>
 R typeinfo name for CEntityFactory<CRotDoor>
 R typeinfo name for CEntityFactory<CRotorWashEmitter>
 R typeinfo name for CEntityFactory<CRotorWashShooter>
 R typeinfo name for CEntityFactory<CSatchelCharge>
 R typeinfo name for CEntityFactory<CSceneEntity>
 R typeinfo name for CEntityFactory<CSceneListManager>
 R typeinfo name for CEntityFactory<CSceneManager>
 R typeinfo name for CEntityFactory<CScriptIntro>
 R typeinfo name for CEntityFactory<CScriptedTarget>
 R typeinfo name for CEntityFactory<CServerRagdollTrigger>
 R typeinfo name for CEntityFactory<CShadowControl>
 R typeinfo name for CEntityFactory<CShower>
 R typeinfo name for CEntityFactory<CSimplePhysicsBrush>
 R typeinfo name for CEntityFactory<CSimplePhysicsProp>
 R typeinfo name for CEntityFactory<CSkyCamera>
 R typeinfo name for CEntityFactory<CSlideshowDisplay>
 R typeinfo name for CEntityFactory<CSmokeStack>
 R typeinfo name for CEntityFactory<CSniperBullet>
 R typeinfo name for CEntityFactory<CSniperTarget>
 R typeinfo name for CEntityFactory<CSoundEnt>
 R typeinfo name for CEntityFactory<CSparkTrail>
 R typeinfo name for CEntityFactory<CSpeaker>
 R typeinfo name for CEntityFactory<CSpotlightEnd>
 R typeinfo name for CEntityFactory<CSprayCan>
 R typeinfo name for CEntityFactory<CSprite>
 R typeinfo name for CEntityFactory<CSpriteOriented>
 R typeinfo name for CEntityFactory<CSpriteTrail>
 R typeinfo name for CEntityFactory<CSquadInsignia>
 R typeinfo name for CEntityFactory<CSteamJet>
 R typeinfo name for CEntityFactory<CStripWeapons>
 R typeinfo name for CEntityFactory<CSun>
 R typeinfo name for CEntityFactory<CTankTargetChange>
 R typeinfo name for CEntityFactory<CTankTrainAI>
 R typeinfo name for CEntityFactory<CTargetCDAudioRep>
 R typeinfo name for CEntityFactory<CTargetChangeGravity>
 R typeinfo name for CEntityFactory<CTargetGunshipCrash>
 R typeinfo name for CEntityFactory<CTeam>
 R typeinfo name for CEntityFactory<CTeamControlPoint>
 R typeinfo name for CEntityFactory<CTeamControlPointMaster>
 R typeinfo name for CEntityFactory<CTeamControlPointRound>
 R typeinfo name for CEntityFactory<CTeamRoundTimer>
 R typeinfo name for CEntityFactory<CTeamSpawnPoint>
 R typeinfo name for CEntityFactory<CTeamTrainWatcher>
 R typeinfo name for CEntityFactory<CTeamVehicleSpawnPoint>
 R typeinfo name for CEntityFactory<CTempEntTester>
 R typeinfo name for CEntityFactory<CTemplateNPCMaker>
 R typeinfo name for CEntityFactory<CTesla>
 R typeinfo name for CEntityFactory<CTestEffect>
 R typeinfo name for CEntityFactory<CTestTraceline>
 R typeinfo name for CEntityFactory<CTest_ProxyToggle_Networkable>
 R typeinfo name for CEntityFactory<CTextureToggle>
 R typeinfo name for CEntityFactory<CTimerEntity>
 R typeinfo name for CEntityFactory<CTriggerApplyImpulse>
 R typeinfo name for CEntityFactory<CTriggerAreaCapture>
 R typeinfo name for CEntityFactory<CTriggerBrush>
 R typeinfo name for CEntityFactory<CTriggerCDAudio>
 R typeinfo name for CEntityFactory<CTriggerCamera>
 R typeinfo name for CEntityFactory<CTriggerGravity>
 R typeinfo name for CEntityFactory<CTriggerHurt>
 R typeinfo name for CEntityFactory<CTriggerImpact>
 R typeinfo name for CEntityFactory<CTriggerLook>
 R typeinfo name for CEntityFactory<CTriggerMultiple>
 R typeinfo name for CEntityFactory<CTriggerOnce>
 R typeinfo name for CEntityFactory<CTriggerPhysicsTrap>
 R typeinfo name for CEntityFactory<CTriggerPlayerMovement>
 R typeinfo name for CEntityFactory<CTriggerProximity>
 R typeinfo name for CEntityFactory<CTriggerPush>
 R typeinfo name for CEntityFactory<CTriggerRPGFire>
 R typeinfo name for CEntityFactory<CTriggerRemove>
 R typeinfo name for CEntityFactory<CTriggerSave>
 R typeinfo name for CEntityFactory<CTriggerSoundscape>
 R typeinfo name for CEntityFactory<CTriggerTeleport>
 R typeinfo name for CEntityFactory<CTriggerTeleportRelative>
 R typeinfo name for CEntityFactory<CTriggerToggleSave>
 R typeinfo name for CEntityFactory<CTriggerVPhysicsMotion>
 R typeinfo name for CEntityFactory<CTriggerVolume>
 R typeinfo name for CEntityFactory<CTriggerWateryDeath>
 R typeinfo name for CEntityFactory<CTriggerWeaponDissolve>
 R typeinfo name for CEntityFactory<CTriggerWeaponStrip>
 R typeinfo name for CEntityFactory<CTriggerWind>
 R typeinfo name for CEntityFactory<CTripmineGrenade>
 R typeinfo name for CEntityFactory<CTurretTipController>
 R typeinfo name for CEntityFactory<CVGuiScreen>
 R typeinfo name for CEntityFactory<CVortigauntChargeToken>
 R typeinfo name for CEntityFactory<CVortigauntEffectDispel>
 R typeinfo name for CEntityFactory<CVoteController>
 R typeinfo name for CEntityFactory<CWC_UpdateIgnoreList>
 R typeinfo name for CEntityFactory<CWallHealth>
 R typeinfo name for CEntityFactory<CWaterBullet>
 R typeinfo name for CEntityFactory<CWaterLODControl>
 R typeinfo name for CEntityFactory<CWateryDeathLeech>
 R typeinfo name for CEntityFactory<CWeapon357>
 R typeinfo name for CEntityFactory<CWeaponAR2>
 R typeinfo name for CEntityFactory<CWeaponAnnabelle>
 R typeinfo name for CEntityFactory<CWeaponBugBait>
 R typeinfo name for CEntityFactory<CWeaponCrossbow>
 R typeinfo name for CEntityFactory<CWeaponCrowbar>
 R typeinfo name for CEntityFactory<CWeaponCubemap>
 R typeinfo name for CEntityFactory<CWeaponCycler>
 R typeinfo name for CEntityFactory<CWeaponFrag>
 R typeinfo name for CEntityFactory<CWeaponHL2MPBase>
 R typeinfo name for CEntityFactory<CWeaponPhysCannon>
 R typeinfo name for CEntityFactory<CWeaponPistol>
 R typeinfo name for CEntityFactory<CWeaponRPG>
 R typeinfo name for CEntityFactory<CWeaponSMG1>
 R typeinfo name for CEntityFactory<CWeaponShotgun>
 R typeinfo name for CEntityFactory<CWeaponStunStick>
 R typeinfo name for CEntityFactory<CWeapon_SLAM>
 R typeinfo name for CEntityFactory<CWeightButton>
 R typeinfo name for CEntityFactory<CWindowPane>
 R typeinfo name for CEntityFactory<CWorld>
 R typeinfo name for CEntityFactory<CWorldItem>
 R typeinfo name for CEntityFactory<CWreckage>
 R typeinfo name for CEntityFactory<CZombie>
 R typeinfo name for CEntityFactory<DustTrail>
 R typeinfo name for CEntityFactory<FilterDamageType>
 R typeinfo name for CEntityFactory<FilterTeam>
 R typeinfo name for CEntityFactory<MovieExplosion>
 R typeinfo name for CEntityFactory<ParticleSmokeGrenade>
 R typeinfo name for CEntityFactory<RocketTrail>
 R typeinfo name for CEntityFactory<SmokeTrail>
 R typeinfo name for CEntityFactory<SporeExplosion>
 R typeinfo name for CEntityFactory<SporeTrail>
 R typeinfo name for CEntityFactoryDictionary
 R typeinfo name for CEntityFlame
 R typeinfo name for CEntityListSystem
 R typeinfo name for CEntityParticleTrail
 R typeinfo name for CEntityParticleTrail::NetworkVar_m_Info
 R typeinfo name for CEntitySaveRestoreBlockHandler
 R typeinfo name for CEntitySaveUtils
 R typeinfo name for CEntityTouchManager
 R typeinfo name for CEnvAR2Explosion
 R typeinfo name for CEnvBeam
 R typeinfo name for CEnvBeverage
 R typeinfo name for CEnvDetailController
 R typeinfo name for CEnvDustPuff
 R typeinfo name for CEnvEffectsScript
 R typeinfo name for CEnvEntityMaker
 R typeinfo name for CEnvExplosion
 R typeinfo name for CEnvFade
 R typeinfo name for CEnvFireSensor
 R typeinfo name for CEnvFireSource
 R typeinfo name for CEnvFunnel
 R typeinfo name for CEnvGlobal
 R typeinfo name for CEnvGunfire
 R typeinfo name for CEnvHeadcrabCanister
 R typeinfo name for CEnvHeadcrabCanister::NetworkVar_m_Shared
 R typeinfo name for CEnvHeadcrabCanisterShared
 R typeinfo name for CEnvHudHint
 R typeinfo name for CEnvLaser
 R typeinfo name for CEnvLight
 R typeinfo name for CEnvMicrophone
 R typeinfo name for CEnvMuzzleFlash
 R typeinfo name for CEnvParticleScript
 R typeinfo name for CEnvPlayerSurfaceTrigger
 R typeinfo name for CEnvProjectedTexture
 R typeinfo name for CEnvQuadraticBeam
 R typeinfo name for CEnvScreenEffect
 R typeinfo name for CEnvScreenOverlay
 R typeinfo name for CEnvShake
 R typeinfo name for CEnvShooter
 R typeinfo name for CEnvSoundscape
 R typeinfo name for CEnvSoundscapeProxy
 R typeinfo name for CEnvSoundscapeTriggerable
 R typeinfo name for CEnvSpark
 R typeinfo name for CEnvSplash
 R typeinfo name for CEnvStarfield
 R typeinfo name for CEnvTonemapController
 R typeinfo name for CEnvTracer
 R typeinfo name for CEnvViewPunch
 R typeinfo name for CEnvWind
 R typeinfo name for CEnvWindShared
 R typeinfo name for CEnvZoom
 R typeinfo name for CEventLog
 R typeinfo name for CEventQueueSaveLoadProxy
 R typeinfo name for CEventQueue_SaveRestoreBlockHandler
 R typeinfo name for CEventsSaveDataOps
 R typeinfo name for CFastHeadcrab
 R typeinfo name for CFilterClass
 R typeinfo name for CFilterCombineBall
 R typeinfo name for CFilterEnemy
 R typeinfo name for CFilterMassGreater
 R typeinfo name for CFilterMultiple
 R typeinfo name for CFilterName
 R typeinfo name for CFire
 R typeinfo name for CFireSmoke
 R typeinfo name for CFireSphere
 R typeinfo name for CFireTrail
 R typeinfo name for CFish
 R typeinfo name for CFishPool
 R typeinfo name for CFlaggedEntitiesEnum
 R typeinfo name for CFlare
 R typeinfo name for CFlexAnimationTrack
 R typeinfo name for CFlexCycler
 R typeinfo name for CFlexSceneFileManager
 R typeinfo name for CFlextalkActor
 R typeinfo name for CFmtStrN<1024, false>
 R typeinfo name for CFmtStrN<128, false>
 R typeinfo name for CFmtStrN<256, false>
 R typeinfo name for CFmtStrN<512, false>
 R typeinfo name for CFogController
 R typeinfo name for CFogController::NetworkVar_m_fog
 R typeinfo name for CFogSystem
 R typeinfo name for CFourWheelServerVehicle
 R typeinfo name for CFourWheelVehiclePhysics
 R typeinfo name for CFuncAreaPortalBase
 R typeinfo name for CFuncAreaPortalWindow
 R typeinfo name for CFuncBrush
 R typeinfo name for CFuncCombineBallSpawner
 R typeinfo name for CFuncConveyor
 R typeinfo name for CFuncIllusionary
 R typeinfo name for CFuncLadder
 R typeinfo name for CFuncLadderEndPoint
 R typeinfo name for CFuncMonitor
 R typeinfo name for CFuncMoveLinear
 R typeinfo name for CFuncOccluder
 R typeinfo name for CFuncPlat
 R typeinfo name for CFuncPlatRot
 R typeinfo name for CFuncReflectiveGlass
 R typeinfo name for CFuncRotating
 R typeinfo name for CFuncSmokeVolume
 R typeinfo name for CFuncTank
 R typeinfo name for CFuncTankAPCRocket
 R typeinfo name for CFuncTankAirboatGun
 R typeinfo name for CFuncTankCombineCannon
 R typeinfo name for CFuncTankGun
 R typeinfo name for CFuncTankLaser
 R typeinfo name for CFuncTankMortar
 R typeinfo name for CFuncTankPhysCannister
 R typeinfo name for CFuncTankPulseLaser
 R typeinfo name for CFuncTankRocket
 R typeinfo name for CFuncTankTrain
 R typeinfo name for CFuncTrackAuto
 R typeinfo name for CFuncTrackChange
 R typeinfo name for CFuncTrackTrain
 R typeinfo name for CFuncTrain
 R typeinfo name for CFuncTrainControls
 R typeinfo name for CFuncVPhysicsClip
 R typeinfo name for CFuncVehicleClip
 R typeinfo name for CFuncWall
 R typeinfo name for CFuncWallToggle
 R typeinfo name for CFunc_Dust
 R typeinfo name for CFunc_DustCloud
 R typeinfo name for CFunc_DustMotes
 R typeinfo name for CFunc_LOD
 R typeinfo name for CFunctor
 R typeinfo name for CFunctor2<void (*)(CFunctor**, unsigned int), CFunctor**, int, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >
 R typeinfo name for CFunctor2<void (*)(IPhysicsObject*, Vector const&), IPhysicsObject*, Vector, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >
 R typeinfo name for CFunctor3<void (*)(IPhysicsObject*, Vector const&, Vector const&), IPhysicsObject*, Vector, Vector, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >
 R typeinfo name for CFunctor4<CBaseEntity* (*)(CBaseEntity*, CBaseEntity*, bool, float), CBaseEntity*, CBaseEntity*, bool, float, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >
 R typeinfo name for CGameDLL_ConVarAccessor
 R typeinfo name for CGameEnd
 R typeinfo name for CGameEventListener
 R typeinfo name for CGameGibManager
 R typeinfo name for CGameMovement
 R typeinfo name for CGamePlayerEquip
 R typeinfo name for CGamePlayerTeam
 R typeinfo name for CGamePlayerZone
 R typeinfo name for CGameRules
 R typeinfo name for CGameRulesProxy
 R typeinfo name for CGameScore
 R typeinfo name for CGameStringPool
 R typeinfo name for CGameText
 R typeinfo name for CGameUI
 R typeinfo name for CGameWeaponManager
 R typeinfo name for CGenericActor
 R typeinfo name for CGenericCycler
 R typeinfo name for CGenericFlexCycler
 R typeinfo name for CGenericNPC
 R typeinfo name for CGib
 R typeinfo name for CGibShooter
 R typeinfo name for CGlobalEntityList
 R typeinfo name for CGlobalState
 R typeinfo name for CGrabController
 R typeinfo name for CGrenadeAR2
 R typeinfo name for CGrenadeBeam
 R typeinfo name for CGrenadeBeamChaser
 R typeinfo name for CGrenadeBugBait
 R typeinfo name for CGrenadeFrag
 R typeinfo name for CGrenadeHelicopter
 R typeinfo name for CGrenadeHomer
 R typeinfo name for CGrenadePathfollower
 R typeinfo name for CGunTarget
 R typeinfo name for CGunshipRagdollMotion
 R typeinfo name for CHL2EventLog
 R typeinfo name for CHL2GameMovement
 R typeinfo name for CHL2MPGameRulesProxy
 R typeinfo name for CHL2MPMachineGun
 R typeinfo name for CHL2MPRagdoll
 R typeinfo name for CHL2MPRules
 R typeinfo name for CHL2MPSWeaponInfo
 R typeinfo name for CHL2MP_Player
 R typeinfo name for CHL2NetworkBuildHelper
 R typeinfo name for CHL2PlayerLocalData
 R typeinfo name for CHL2_Player
 R typeinfo name for CHL2_Player::NetworkVar_m_HL2Local
 R typeinfo name for CHLPlayerMove
 R typeinfo name for CHLTVDirector
 R typeinfo name for CHalfLife2
 R typeinfo name for CHalfLife2Proxy
 R typeinfo name for CHandleDummy
 R typeinfo name for CHandleTest
 R typeinfo name for CHangRope
 R typeinfo name for CHeadcrab
 R typeinfo name for CHealthKit
 R typeinfo name for CHealthVial
 R typeinfo name for CHelicopterChunk
 R typeinfo name for CIKSaveRestoreOps
 R typeinfo name for CInfoAPCMissileHint
 R typeinfo name for CInfoCameraLink
 R typeinfo name for CInfoIntermission
 R typeinfo name for CInfoLadderDismount
 R typeinfo name for CInfoLightingRelative
 R typeinfo name for CInfoMassCenter
 R typeinfo name for CInfoOverlayAccessor
 R typeinfo name for CInfoTarget
 R typeinfo name for CInfoTeleporterCountdown
 R typeinfo name for CInstancedResponseSystem
 R typeinfo name for CInstancedSceneEntity
 R typeinfo name for CItem
 R typeinfo name for CItemBattery
 R typeinfo name for CItemSoda
 R typeinfo name for CItemSuit
 R typeinfo name for CItem_AR2AltFireRound
 R typeinfo name for CItem_AR2_Grenade
 R typeinfo name for CItem_AmmoCrate
 R typeinfo name for CItem_Box357Rounds
 R typeinfo name for CItem_BoxBuckshot
 R typeinfo name for CItem_BoxFlareRounds
 R typeinfo name for CItem_BoxLRounds
 R typeinfo name for CItem_BoxMRounds
 R typeinfo name for CItem_BoxSRounds
 R typeinfo name for CItem_BoxSniperRounds
 R typeinfo name for CItem_BoxXBowRounds
 R typeinfo name for CItem_DynamicResupply
 R typeinfo name for CItem_FlareRound
 R typeinfo name for CItem_ItemCrate
 R typeinfo name for CItem_LargeBox357Rounds
 R typeinfo name for CItem_LargeBoxLRounds
 R typeinfo name for CItem_LargeBoxMRounds
 R typeinfo name for CItem_LargeBoxSRounds
 R typeinfo name for CItem_RPG_Round
 R typeinfo name for CKeepUpright
 R typeinfo name for CLagCompensationManager
 R typeinfo name for CLaserDot
 R typeinfo name for CLight
 R typeinfo name for CLightGlow
 R typeinfo name for CListMissions
 R typeinfo name for CLogicActiveAutosave
 R typeinfo name for CLogicAuto
 R typeinfo name for CLogicAutosave
 R typeinfo name for CLogicBranch
 R typeinfo name for CLogicBranchList
 R typeinfo name for CLogicCase
 R typeinfo name for CLogicCollisionPair
 R typeinfo name for CLogicCompare
 R typeinfo name for CLogicCompareInteger
 R typeinfo name for CLogicLineToEntity
 R typeinfo name for CLogicMeasureMovement
 R typeinfo name for CLogicNavigation
 R typeinfo name for CLogicPlayerProxy
 R typeinfo name for CLogicRelay
 R typeinfo name for CLogicalEntity
 R typeinfo name for CLookDoor
 R typeinfo name for CLookDoorThinker
 R typeinfo name for CMapLoadEntityFilter
 R typeinfo name for CMaterialModifyControl
 R typeinfo name for CMathColorBlend
 R typeinfo name for CMathCounter
 R typeinfo name for CMathRemap
 R typeinfo name for CMattsPipe
 R typeinfo name for CMemberFunctor0<CParallelProcessor<QueryCacheUpdateRecord_t, CFuncJobItemProcessor<QueryCacheUpdateRecord_t> >*, void (CParallelProcessor<QueryCacheUpdateRecord_t, CFuncJobItemProcessor<QueryCacheUpdateRecord_t> >::*)(), CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>
 R typeinfo name for CMemberFunctor0<CPropCombineBall*, void (CPropCombineBall::*)(), CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>
 R typeinfo name for CMemberFunctor1<CAI_Navigator*, bool (CAI_Navigator::*)(Vector const&), Vector, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>
 R typeinfo name for CMemberFunctor1<CNPC_RollerMine*, void (CNPC_RollerMine::*)(CBaseEntity*), CBaseEntity*, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>
 R typeinfo name for CMemberFunctor2<CAI_Navigator*, bool (CAI_Navigator::*)(AI_NavGoal_t const&, unsigned int), AI_NavGoal_t, unsigned int, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>
 R typeinfo name for CMemberFunctor3<CBreakableProp*, void (CBreakableProp::*)(Vector const&, Vector const&, QAngle const&), Vector, Vector, QAngle, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>
 R typeinfo name for CMessage
 R typeinfo name for CMessageEntity
 R typeinfo name for CMissile
 R typeinfo name for CModelSoundsCache
 R typeinfo name for CModelSoundsCacheSaver
 R typeinfo name for CMomentaryRotButton
 R typeinfo name for CMortarShell
 R typeinfo name for CMotorController
 R typeinfo name for CMoveHelperServer
 R typeinfo name for CMovementSpeedMod
 R typeinfo name for CMultiSource
 R typeinfo name for CMultiplayRules
 R typeinfo name for CNPCBaseInteractive<CAI_BaseNPC>
 R typeinfo name for CNPCBaseInteractive<CAI_BasePhysicsFlyingBot>
 R typeinfo name for CNPCMaker
 R typeinfo name for CNPCSpawnDestination
 R typeinfo name for CNPC_APCDriver
 R typeinfo name for CNPC_Alyx
 R typeinfo name for CNPC_Antlion
 R typeinfo name for CNPC_AntlionGuard
 R typeinfo name for CNPC_AttackHelicopter
 R typeinfo name for CNPC_Barnacle
 R typeinfo name for CNPC_Barney
 R typeinfo name for CNPC_BaseScanner
 R typeinfo name for CNPC_BaseZombie
 R typeinfo name for CNPC_Breen
 R typeinfo name for CNPC_Bullseye
 R typeinfo name for CNPC_CScanner
 R typeinfo name for CNPC_CeilingTurret
 R typeinfo name for CNPC_Citizen
 R typeinfo name for CNPC_ClawScanner
 R typeinfo name for CNPC_Combine
 R typeinfo name for CNPC_Combine::CCombineStandoffBehavior
 R typeinfo name for CNPC_CombineCamera
 R typeinfo name for CNPC_CombineDropship
 R typeinfo name for CNPC_CombineGunship
 R typeinfo name for CNPC_CombineS
 R typeinfo name for CNPC_CraneDriver
 R typeinfo name for CNPC_Crow
 R typeinfo name for CNPC_Dog
 R typeinfo name for CNPC_Eli
 R typeinfo name for CNPC_EnemyFinder
 R typeinfo name for CNPC_EnemyFinderCombineCannon
 R typeinfo name for CNPC_Fisherman
 R typeinfo name for CNPC_FloorTurret
 R typeinfo name for CNPC_Furniture
 R typeinfo name for CNPC_GMan
 R typeinfo name for CNPC_GroundTurret
 R typeinfo name for CNPC_Ichthyosaur
 R typeinfo name for CNPC_Kleiner
 R typeinfo name for CNPC_Launcher
 R typeinfo name for CNPC_Manhack
 R typeinfo name for CNPC_MetroPolice
 R typeinfo name for CNPC_MissileDefense
 R typeinfo name for CNPC_Monk
 R typeinfo name for CNPC_Mossman
 R typeinfo name for CNPC_Pigeon
 R typeinfo name for CNPC_PlayerCompanion
 R typeinfo name for CNPC_PoisonZombie
 R typeinfo name for CNPC_RollerMine
 R typeinfo name for CNPC_Seagull
 R typeinfo name for CNPC_Stalker
 R typeinfo name for CNPC_Strider
 R typeinfo name for CNPC_Strider::CNavigator
 R typeinfo name for CNPC_Strider::CPathfinder
 R typeinfo name for CNPC_VehicleDriver
 R typeinfo name for CNPC_Vortigaunt
 R typeinfo name for CNewNPC
 R typeinfo name for CNewRecharge
 R typeinfo name for CNewWallHealth
 R typeinfo name for CNodeEnt
 R typeinfo name for CNodeFilter
 R typeinfo name for CNotifyList
 R typeinfo name for CNullEntity
 R typeinfo name for COrnamentProp
 R typeinfo name for COverrideMoveCache
 R typeinfo name for CPASAttenuationFilter
 R typeinfo name for CPASFilter
 R typeinfo name for CPVSFilter
 R typeinfo name for CParticleFire
 R typeinfo name for CParticleLight
 R typeinfo name for CParticlePerformanceMonitor
 R typeinfo name for CParticleSystem
 R typeinfo name for CParticleSystemQuery
 R typeinfo name for CPathCorner
 R typeinfo name for CPathCornerCrash
 R typeinfo name for CPathKeyFrame
 R typeinfo name for CPathTrack
 R typeinfo name for CPathfindNearestNodeFilter
 R typeinfo name for CPhysBallSocket
 R typeinfo name for CPhysBox
 R typeinfo name for CPhysBoxMultiplayer
 R typeinfo name for CPhysConstraint
 R typeinfo name for CPhysConstraintEvents
 R typeinfo name for CPhysConstraintSystem
 R typeinfo name for CPhysConvert
 R typeinfo name for CPhysExplosion
 R typeinfo name for CPhysFixed
 R typeinfo name for CPhysForce
 R typeinfo name for CPhysHinge
 R typeinfo name for CPhysImpact
 R typeinfo name for CPhysLength
 R typeinfo name for CPhysMagnet
 R typeinfo name for CPhysMotor
 R typeinfo name for CPhysObjSaveRestoreOps
 R typeinfo name for CPhysPulley
 R typeinfo name for CPhysSaveRestoreBlockHandler
 R typeinfo name for CPhysSlideConstraint
 R typeinfo name for CPhysSphere
 R typeinfo name for CPhysThruster
 R typeinfo name for CPhysTorque
 R typeinfo name for CPhysicsCannister
 R typeinfo name for CPhysicsEntitySolver
 R typeinfo name for CPhysicsGameTrace
 R typeinfo name for CPhysicsHook
 R typeinfo name for CPhysicsNPCSolver
 R typeinfo name for CPhysicsPlayerCallback
 R typeinfo name for CPhysicsProp
 R typeinfo name for CPhysicsPropMultiplayer
 R typeinfo name for CPhysicsPropRespawnable
 R typeinfo name for CPhysicsPushedEntities
 R typeinfo name for CPhysicsShake
 R typeinfo name for CPhysicsSpring
 R typeinfo name for CPhysicsWind
 R typeinfo name for CPhysicsWire
 R typeinfo name for CPlasma
 R typeinfo name for CPlatTrigger
 R typeinfo name for CPlayerInfo
 R typeinfo name for CPlayerInfoManager
 R typeinfo name for CPlayerLocalData
 R typeinfo name for CPlayerLocalData::NetworkVar_m_PlayerFog
 R typeinfo name for CPlayerLocalData::NetworkVar_m_audio
 R typeinfo name for CPlayerLocalData::NetworkVar_m_skybox3d
 R typeinfo name for CPlayerMove
 R typeinfo name for CPlayerPickupController
 R typeinfo name for CPlayerResource
 R typeinfo name for CPlayerState
 R typeinfo name for CPluginBotManager
 R typeinfo name for CPluginHelpersCheck
 R typeinfo name for CPointAngleSensor
 R typeinfo name for CPointAngularVelocitySensor
 R typeinfo name for CPointBonusMapsAccessor
 R typeinfo name for CPointCamera
 R typeinfo name for CPointClientCommand
 R typeinfo name for CPointCombineBallLauncher
 R typeinfo name for CPointCommentaryNode
 R typeinfo name for CPointDevShotCamera
 R typeinfo name for CPointEntity
 R typeinfo name for CPointGamestatsCounter
 R typeinfo name for CPointHurt
 R typeinfo name for CPointPlayerMoveConstraint
 R typeinfo name for CPointProximitySensor
 R typeinfo name for CPointPush
 R typeinfo name for CPointServerCommand
 R typeinfo name for CPointSpotlight
 R typeinfo name for CPointTeleport
 R typeinfo name for CPointTemplate
 R typeinfo name for CPointTemplatePrecacher
 R typeinfo name for CPointVelocitySensor
 R typeinfo name for CPoseController
 R typeinfo name for CPostFrameNavigationHook
 R typeinfo name for CPrecacheOtherList
 R typeinfo name for CPrecipitation
 R typeinfo name for CPredictedViewModel
 R typeinfo name for CPrisonerPodServerVehicle
 R typeinfo name for CProjectedDecal
 R typeinfo name for CPropAPC
 R typeinfo name for CPropAirboat
 R typeinfo name for CPropCombineBall
 R typeinfo name for CPropCrane
 R typeinfo name for CPropData
 R typeinfo name for CPropDoorRotating
 R typeinfo name for CPropThumper
 R typeinfo name for CPropVehicle
 R typeinfo name for CPropVehicleDriveable
 R typeinfo name for CPropVehiclePrisonerPod
 R typeinfo name for CPropVehicleViewController
 R typeinfo name for CProtoSniper
 R typeinfo name for CPushBlockerEnum
 R typeinfo name for CPushable
 R typeinfo name for CRagGib
 R typeinfo name for CRagdollAnimatedFriction
 R typeinfo name for CRagdollBoogie
 R typeinfo name for CRagdollCollisionRules
 R typeinfo name for CRagdollConstraint
 R typeinfo name for CRagdollLRURetirement
 R typeinfo name for CRagdollMagnet
 R typeinfo name for CRagdollManager
 R typeinfo name for CRagdollProp
 R typeinfo name for CRagdollPropAttached
 R typeinfo name for CRallyPoint
 R typeinfo name for CRecharge
 R typeinfo name for CRecipientFilter
 R typeinfo name for CRefCountServiceBase<true, CRefMT>
 R typeinfo name for CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >
 R typeinfo name for CReliableBroadcastRecipientFilter
 R typeinfo name for CReservePlayerSpot
 R typeinfo name for CRespawnEntitiesFilter
 R typeinfo name for CResponseSystem
 R typeinfo name for CResponseSystemSaveRestoreOps
 R typeinfo name for CRestore
 R typeinfo name for CRevertSaved
 R typeinfo name for CRollerController
 R typeinfo name for CRopeAnchor
 R typeinfo name for CRopeKeyframe
 R typeinfo name for CRopePhysics<512>
 R typeinfo name for CRotButton
 R typeinfo name for CRotDoor
 R typeinfo name for CRotorWashEmitter
 R typeinfo name for CRotorWashShooter
 R typeinfo name for CRuleBrushEntity
 R typeinfo name for CRuleEntity
 R typeinfo name for CRulePointEntity
 R typeinfo name for CSatchelCharge
 R typeinfo name for CSave
 R typeinfo name for CSaveRestoreBlockSet
 R typeinfo name for CSceneEntity
 R typeinfo name for CSceneFindMarkFilter
 R typeinfo name for CSceneFindNearestMarkFilter
 R typeinfo name for CSceneListManager
 R typeinfo name for CSceneManager
 R typeinfo name for CSceneTokenProcessor
 R typeinfo name for CScriptIntro
 R typeinfo name for CScriptedTarget
 R typeinfo name for CServerBenchmark
 R typeinfo name for CServerChoreoTools
 R typeinfo name for CServerDLLSharedAppSystems
 R typeinfo name for CServerGameClients
 R typeinfo name for CServerGameDLL
 R typeinfo name for CServerGameEnts
 R typeinfo name for CServerGameTags
 R typeinfo name for CServerNetworkProperty
 R typeinfo name for CServerOnlyEntity
 R typeinfo name for CServerOnlyPointEntity
 R typeinfo name for CServerRagdollTrigger
 R typeinfo name for CServerTools
 R typeinfo name for CShadowControl
 R typeinfo name for CShowZone
 R typeinfo name for CShower
 R typeinfo name for CSimThinkManager
 R typeinfo name for CSimplePhysics::IHelper
 R typeinfo name for CSimplePhysicsBrush
 R typeinfo name for CSimplePhysicsProp
 R typeinfo name for CSingleUserRecipientFilter
 R typeinfo name for CSingleplayRules
 R typeinfo name for CSkipKeys
 R typeinfo name for CSkyCamera
 R typeinfo name for CSlideshowDisplay
 R typeinfo name for CSmokeStack
 R typeinfo name for CSniperBullet
 R typeinfo name for CSniperTarget
 R typeinfo name for CSolidSetDefaults
 R typeinfo name for CSoundControllerImp
 R typeinfo name for CSoundEmitterSystem
 R typeinfo name for CSoundEnt
 R typeinfo name for CSoundEnvelopeController
 R typeinfo name for CSoundPatchSaveRestoreOps
 R typeinfo name for CSoundscapeSystem
 R typeinfo name for CSparkTrail
 R typeinfo name for CSpeaker
 R typeinfo name for CSpotlightEnd
 R typeinfo name for CSprayCan
 R typeinfo name for CSprite
 R typeinfo name for CSpriteOriented
 R typeinfo name for CSpriteTrail
 R typeinfo name for CSquadInsignia
 R typeinfo name for CStdStringSaveRestoreOps
 R typeinfo name for CSteamJet
 R typeinfo name for CStriderMinigun
 R typeinfo name for CStringTableSaveRestoreOps
 R typeinfo name for CStripWeapons
 R typeinfo name for CSun
 R typeinfo name for CTEAntlionDust
 R typeinfo name for CTEArmorRicochet
 R typeinfo name for CTEBSPDecal
 R typeinfo name for CTEBaseBeam
 R typeinfo name for CTEBeamEntPoint
 R typeinfo name for CTEBeamEnts
 R typeinfo name for CTEBeamFollow
 R typeinfo name for CTEBeamLaser
 R typeinfo name for CTEBeamPoints
 R typeinfo name for CTEBeamRing
 R typeinfo name for CTEBeamRingPoint
 R typeinfo name for CTEBeamSpline
 R typeinfo name for CTEBloodSprite
 R typeinfo name for CTEBloodStream
 R typeinfo name for CTEBreakModel
 R typeinfo name for CTEBubbleTrail
 R typeinfo name for CTEBubbles
 R typeinfo name for CTEClientProjectile
 R typeinfo name for CTEConcussiveExplosion
 R typeinfo name for CTEDecal
 R typeinfo name for CTEDust
 R typeinfo name for CTEDynamicLight
 R typeinfo name for CTEEffectDispatch
 R typeinfo name for CTEEnergySplash
 R typeinfo name for CTEExplosion
 R typeinfo name for CTEFizz
 R typeinfo name for CTEFootprintDecal
 R typeinfo name for CTEGaussExplosion
 R typeinfo name for CTEGlowSprite
 R typeinfo name for CTEHL2MPFireBullets
 R typeinfo name for CTEImpact
 R typeinfo name for CTEKillPlayerAttachments
 R typeinfo name for CTELargeFunnel
 R typeinfo name for CTEMetalSparks
 R typeinfo name for CTEMuzzleFlash
 R typeinfo name for CTEParticleSystem
 R typeinfo name for CTEPhysicsProp
 R typeinfo name for CTEPlayerDecal
 R typeinfo name for CTEProjectedDecal
 R typeinfo name for CTEShatterSurface
 R typeinfo name for CTEShowLine
 R typeinfo name for CTESmoke
 R typeinfo name for CTESparks
 R typeinfo name for CTESprite
 R typeinfo name for CTESpriteSpray
 R typeinfo name for CTEWorldDecal
 R typeinfo name for CTacticalMissionManager
 R typeinfo name for CTacticalMissionManager::IForEachMission
 R typeinfo name for CTankTargetChange
 R typeinfo name for CTankTrainAI
 R typeinfo name for CTargetCDAudioRep
 R typeinfo name for CTargetChangeGravity
 R typeinfo name for CTargetGunshipCrash
 R typeinfo name for CTeam
 R typeinfo name for CTeamControlPoint
 R typeinfo name for CTeamControlPointMaster
 R typeinfo name for CTeamControlPointRound
 R typeinfo name for CTeamRecipientFilter
 R typeinfo name for CTeamRoundTimer
 R typeinfo name for CTeamSpawnPoint
 R typeinfo name for CTeamTrainWatcher
 R typeinfo name for CTeamVehicleSpawnPoint
 R typeinfo name for CTeamplayRoundBasedRules
 R typeinfo name for CTeamplayRules
 R typeinfo name for CTempEntTester
 R typeinfo name for CTempEntsSystem
 R typeinfo name for CTemplateNPCMaker
 R typeinfo name for CTemplate_SaveRestoreBlockHandler
 R typeinfo name for CTemplatesHook
 R typeinfo name for CTesla
 R typeinfo name for CTestEffect
 R typeinfo name for CTestTraceline
 R typeinfo name for CTest_ProxyToggle_Networkable
 R typeinfo name for CTextureToggle
 R typeinfo name for CThinkContextsSaveDataOps
 R typeinfo name for CThrustController
 R typeinfo name for CTimerEntity
 R typeinfo name for CTongueEntitiesEnum
 R typeinfo name for CToolFrameworkServer
 R typeinfo name for CTraceFilter
 R typeinfo name for CTraceFilterAgainstEntityList
 R typeinfo name for CTraceFilterAntlion
 R typeinfo name for CTraceFilterCharge
 R typeinfo name for CTraceFilterChopper
 R typeinfo name for CTraceFilterCollisionGroupDelta
 R typeinfo name for CTraceFilterDoor
 R typeinfo name for CTraceFilterEntitiesOnly
 R typeinfo name for CTraceFilterEntity
 R typeinfo name for CTraceFilterEntityIgnoreOther
 R typeinfo name for CTraceFilterLOS
 R typeinfo name for CTraceFilterMelee
 R typeinfo name for CTraceFilterMetroPolice
 R typeinfo name for CTraceFilterNav
 R typeinfo name for CTraceFilterNoCombatCharacters
 R typeinfo name for CTraceFilterNoOwnerTest
 R typeinfo name for CTraceFilterOnlyNPCsAndPlayer
 R typeinfo name for CTraceFilterPlayersNPCs
 R typeinfo name for CTraceFilterPlayersNPCsPhysicsProps
 R typeinfo name for CTraceFilterPushFinal
 R typeinfo name for CTraceFilterPushMove
 R typeinfo name for CTraceFilterSimple
 R typeinfo name for CTraceFilterSimpleList
 R typeinfo name for CTraceFilterSimpleNPCExclude
 R typeinfo name for CTraceFilterSkipNPCs
 R typeinfo name for CTraceFilterSkipPhysics
 R typeinfo name for CTraceFilterSkipTwoEntities
 R typeinfo name for CTraceFilterWorldOnly
 R typeinfo name for CTraceListData
 R typeinfo name for CTracePassFilter
 R typeinfo name for CTriggerApplyImpulse
 R typeinfo name for CTriggerAreaCapture
 R typeinfo name for CTriggerAreaCaptureShim
 R typeinfo name for CTriggerBrush
 R typeinfo name for CTriggerCDAudio
 R typeinfo name for CTriggerCamera
 R typeinfo name for CTriggerGravity
 R typeinfo name for CTriggerHurt
 R typeinfo name for CTriggerHurtShim
 R typeinfo name for CTriggerImpact
 R typeinfo name for CTriggerLook
 R typeinfo name for CTriggerMultiple
 R typeinfo name for CTriggerOnce
 R typeinfo name for CTriggerPhysicsTrap
 R typeinfo name for CTriggerPlayerMovement
 R typeinfo name for CTriggerProximity
 R typeinfo name for CTriggerPush
 R typeinfo name for CTriggerRPGFire
 R typeinfo name for CTriggerRemove
 R typeinfo name for CTriggerSave
 R typeinfo name for CTriggerSoundscape
 R typeinfo name for CTriggerTeleport
 R typeinfo name for CTriggerTeleportRelative
 R typeinfo name for CTriggerToggleSave
 R typeinfo name for CTriggerTraceEnum
 R typeinfo name for CTriggerVPhysicsMotion
 R typeinfo name for CTriggerVolume
 R typeinfo name for CTriggerWateryDeath
 R typeinfo name for CTriggerWeaponDissolve
 R typeinfo name for CTriggerWeaponStrip
 R typeinfo name for CTriggerWind
 R typeinfo name for CTripmineGrenade
 R typeinfo name for CTurretTipController
 R typeinfo name for CUsePushFilter
 R typeinfo name for CUserCmd
 R typeinfo name for CUtlCStringConversion
 R typeinfo name for CUtlCachedFileData<CModelSoundsCache>
 R typeinfo name for CUtlCharConversion
 R typeinfo name for CUtlMapDataOps<CUtlMap<string_t, CSimpleSimTimer, char>, 2, 10>
 R typeinfo name for CUtlNoEscConversion
 R typeinfo name for CUtlSymbolDataOps
 R typeinfo name for CUtlVectorDataOps<CAI_InterestTarget, 10>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<AISquadEnemyInfo_t, CUtlMemory<AISquadEnemyInfo_t, int> >, 10>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<AI_Waypoint_t, CUtlMemory<AI_Waypoint_t, int> >, 10>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<CAI_ScriptConditionsElement, CUtlMemory<CAI_ScriptConditionsElement, int> >, 10>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer, int> >, 10>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >, 12>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<CHandle<CAI_BaseNPC>, CUtlMemory<CHandle<CAI_BaseNPC>, int> >, 13>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<CHandle<CBaseCombatWeapon>, CUtlMemory<CHandle<CBaseCombatWeapon>, int> >, 13>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity>, int> >, 13>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<CHandle<CBaseFlex>, CUtlMemory<CHandle<CBaseFlex>, int> >, 13>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer>, int> >, 13>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<CHandle<CFish>, CUtlMemory<CHandle<CFish>, int> >, 13>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<CHandle<CNPC_Antlion>, CUtlMemory<CHandle<CNPC_Antlion>, int> >, 13>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity>, int> >, 13>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<CHandle<CSceneListManager>, CUtlMemory<CHandle<CSceneListManager>, int> >, 13>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<CHandle<CVGuiScreen>, CUtlMemory<CHandle<CVGuiScreen>, int> >, 13>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<CPassengerInfo, CUtlMemory<CPassengerInfo, int> >, 10>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<Relationship_t, CUtlMemory<Relationship_t, int> >, 10>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<ResponseContext_t, CUtlMemory<ResponseContext_t, int> >, 10>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<SaveRestoreBlockHeader_t, CUtlMemory<SaveRestoreBlockHeader_t, int> >, 10>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<ScriptedNPCInteraction_t, CUtlMemory<ScriptedNPCInteraction_t, int> >, 10>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<UnreachableEnt_t, CUtlMemory<UnreachableEnt_t, int> >, 10>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<float, CUtlMemory<float, int> >, 16>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<globalentity_t, CUtlMemory<globalentity_t, int> >, 10>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<int, CUtlMemory<int, int> >, 5>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<magnetted_objects_t, CUtlMemory<magnetted_objects_t, int> >, 10>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<modifiedconvars_t, CUtlMemory<modifiedconvars_t, int> >, 10>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<physfollower_t, CUtlMemory<physfollower_t, int> >, 10>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<template_t, CUtlMemory<template_t, int> >, 10>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<thinkfunc_t, CUtlMemory<thinkfunc_t, int> >, 10>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<vehicle_crashsound_t, CUtlMemory<vehicle_crashsound_t, int> >, 10>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<vehicle_gear_t, CUtlMemory<vehicle_gear_t, int> >, 10>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<washentity_t, CUtlMemory<washentity_t, int> >, 10>
 R typeinfo name for CVGuiScreen
 R typeinfo name for CVarBitVecSaveRestoreOps<CBitVec<32> >
 R typeinfo name for CVariantSaveDataOps
 R typeinfo name for CVehicleSoundsParser
 R typeinfo name for CVoiceGameMgr
 R typeinfo name for CVoiceGameMgrHelper
 R typeinfo name for CVortigauntChargeToken
 R typeinfo name for CVortigauntEffectDispel
 R typeinfo name for CVoteController
 R typeinfo name for CVoteControllerSystem
 R typeinfo name for CWC_UpdateIgnoreList
 R typeinfo name for CWallHealth
 R typeinfo name for CWaterBullet
 R typeinfo name for CWaterLODControl
 R typeinfo name for CWaterTraceFilter
 R typeinfo name for CWateryDeathLeech
 R typeinfo name for CWeapon357
 R typeinfo name for CWeaponAR2
 R typeinfo name for CWeaponAnnabelle
 R typeinfo name for CWeaponBugBait
 R typeinfo name for CWeaponCrossbow
 R typeinfo name for CWeaponCrowbar
 R typeinfo name for CWeaponCubemap
 R typeinfo name for CWeaponCycler
 R typeinfo name for CWeaponFrag
 R typeinfo name for CWeaponHL2MPBase
 R typeinfo name for CWeaponLOSFilter
 R typeinfo name for CWeaponList
 R typeinfo name for CWeaponPhysCannon
 R typeinfo name for CWeaponPistol
 R typeinfo name for CWeaponRPG
 R typeinfo name for CWeaponSMG1
 R typeinfo name for CWeaponShotgun
 R typeinfo name for CWeaponStunStick
 R typeinfo name for CWeapon_SLAM
 R typeinfo name for CWeightButton
 R typeinfo name for CWindowPane
 R typeinfo name for CWorkerThread
 R typeinfo name for CWorld
 R typeinfo name for CWorldItem
 R typeinfo name for CWreckage
 R typeinfo name for CZombie
 R typeinfo name for ConCommand
 R typeinfo name for ConCommandBase
 R typeinfo name for ConVar
 R typeinfo name for CountdownTimer
 R typeinfo name for DustTrail
 R typeinfo name for EntityParticleTrailInfo_t
 R typeinfo name for FileWeaponInfo_t
 R typeinfo name for FilterDamageType
 R typeinfo name for FilterTeam
 R typeinfo name for IAI_MovementSink
 R typeinfo name for IAchievement
 R typeinfo name for IAchievementMgr
 R typeinfo name for IAppSystem
 R typeinfo name for IBaseCacheInfo
 R typeinfo name for IBaseInterface
 R typeinfo name for IBaseProjectileAutoList
 R typeinfo name for IBehaviorBackBridge
 R typeinfo name for IBotController
 R typeinfo name for IBotManager
 R typeinfo name for IBreakableWithPropData
 R typeinfo name for IChoreoEventCallback
 R typeinfo name for IChoreoStringPool
 R typeinfo name for ICollideable
 R typeinfo name for ICommandCallback
 R typeinfo name for ICommandCompletionCallback
 R typeinfo name for IConCommandBaseAccessor
 R typeinfo name for IConVar
 R typeinfo name for ICurveDataAccessor
 R typeinfo name for IDecalEmitterSystem
 R typeinfo name for IDrivableVehicle
 R typeinfo name for IEffects
 R typeinfo name for IEntityDataInstantiator
 R typeinfo name for IEntityEnumerator
 R typeinfo name for IEntityFactory
 R typeinfo name for IEntityFactoryDictionary
 R typeinfo name for IEntityFindFilter
 R typeinfo name for IEntityListener
 R typeinfo name for IEntitySaveUtils
 R typeinfo name for IEventRegisterCallback
 R typeinfo name for IForEachNavArea
 R typeinfo name for IGameEventListener2
 R typeinfo name for IGameMovement
 R typeinfo name for IGameSystem
 R typeinfo name for IGameSystemPerFrame
 R typeinfo name for IHLTVDirector
 R typeinfo name for IHandleEntity
 R typeinfo name for IHasOwner
 R typeinfo name for ILagCompensationManager
 R typeinfo name for IMapEntityFilter
 R typeinfo name for IMinigunHost
 R typeinfo name for IModelLoadCallback
 R typeinfo name for IMotionEvent
 R typeinfo name for IMoveHelper
 R typeinfo name for IMoveHelperServer
 R typeinfo name for IMultiplayerPhysics
 R typeinfo name for INPCInteractive
 R typeinfo name for INPCPassengerCarrier
 R typeinfo name for INearestNodeFilter
 R typeinfo name for INodeListFilter
 R typeinfo name for INotify
 R typeinfo name for IParentPropInteraction
 R typeinfo name for IParticleOperatorDefinition
 R typeinfo name for IParticleSystemQuery
 R typeinfo name for IPartitionEnumerator
 R typeinfo name for IPartitionQueryCallback
 R typeinfo name for IPhysSaveRestoreManager
 R typeinfo name for IPhysicsCollisionEvent
 R typeinfo name for IPhysicsCollisionSolver
 R typeinfo name for IPhysicsConstraintEvent
 R typeinfo name for IPhysicsGameTrace
 R typeinfo name for IPhysicsObjectEvent
 R typeinfo name for IPhysicsPlayerControllerEvent
 R typeinfo name for IPhysicsPropAutoList
 R typeinfo name for IPlayerInfo
 R typeinfo name for IPlayerInfoManager
 R typeinfo name for IPlayerPickupVPhysics
 R typeinfo name for IPluginHelpersCheck
 R typeinfo name for IPositionWatcher
 R typeinfo name for IPredictionSystem
 R typeinfo name for IRecipientFilter
 R typeinfo name for IRefCounted
 R typeinfo name for IResponseFilter
 R typeinfo name for IResponseSystem
 R typeinfo name for IRestore
 R typeinfo name for IRotorWashShooter
 R typeinfo name for ISave
 R typeinfo name for ISaveRestoreBlockHandler
 R typeinfo name for ISaveRestoreBlockSet
 R typeinfo name for ISaveRestoreOps
 R typeinfo name for ISceneTokenProcessor
 R typeinfo name for IScorer
 R typeinfo name for IServerBenchmark
 R typeinfo name for IServerChoreoTools
 R typeinfo name for IServerDLLSharedAppSystems
 R typeinfo name for IServerEntity
 R typeinfo name for IServerGameClients
 R typeinfo name for IServerGameDLL
 R typeinfo name for IServerGameEnts
 R typeinfo name for IServerGameTags
 R typeinfo name for IServerNetworkable
 R typeinfo name for IServerTools
 R typeinfo name for IServerUnknown
 R typeinfo name for IServerVehicle
 R typeinfo name for IStriderMinigunHost
 R typeinfo name for ITFTeamTrainWatcher
 R typeinfo name for ITempEntsSystem
 R typeinfo name for IToolFrameworkServer
 R typeinfo name for ITraceFilter
 R typeinfo name for ITriggerAreaCaptureAutoList
 R typeinfo name for ITriggerHurtAutoList
 R typeinfo name for IVPhysicsKeyHandler
 R typeinfo name for IVPhysicsWatcher
 R typeinfo name for IVehicle
 R typeinfo name for IVoiceGameMgrHelper
 R typeinfo name for IWatcherCallback
 R typeinfo name for MovieExplosion
 R typeinfo name for ParticleSmokeGrenade
 R typeinfo name for RocketTrail
 R typeinfo name for SendProp
 R typeinfo name for SmokeTrail
 R typeinfo name for SporeExplosion
 R typeinfo name for SporeTrail
 R typeinfo name for audioparams_t
 R typeinfo name for fogparams_t
 R typeinfo name for fogplayerparams_t
 R typeinfo name for locksound_t
 R typeinfo name for sky3dparams_t
 R typeinfo name for sky3dparams_t::NetworkVar_fog
 R typeinfo name for vehicle_crashsound_t
 R typeinfo name for vehicle_gear_t
 R typeinfo name for vehiclesounds_t
 R typeinfo name for washentity_t
 R vec3_angle
 R vec3_invalid
 R vec3_origin
 RandomFloat
 RandomInt
 RandomSeed
 ShouldUseNewAssertDialog
 SteamAPI_GetHSteamPipe
 SteamAPI_GetHSteamUser
 SteamGameServer_GetHSteamUser
 SteamInternal_ContextInit
 SteamInternal_CreateInterface
 SteamInternal_FindOrCreateGameServerInterface
 SteamInternal_FindOrCreateUserInterface
 T AIGetNumFollowers(CBaseEntity*, string_t)
 T AIStrongOpt()
 T AI_ClampYaw(float, float, float, float)
 T AI_CriteriaSet::AI_CriteriaSet()
 T AI_CriteriaSet::AppendCriteria(char const*, char const*, float)
 T AI_CriteriaSet::CritEntry_t::LessFunc(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&)
 T AI_CriteriaSet::Describe()
 T AI_CriteriaSet::FindCriterionIndex(char const*) const
 T AI_CriteriaSet::GetValue(int) const
 T AI_CriteriaSet::GetWeight(int) const
 T AI_CriteriaSet::RemoveCriteria(char const*)
 T AI_CriteriaSet::~AI_CriteriaSet()
 T AI_Response::AI_Response()
 T AI_Response::AI_Response(AI_Response const&)
 T AI_Response::Describe()
 T AI_Response::DescribeResponse(ResponseType_t)
 T AI_Response::GetDelay() const
 T AI_Response::GetOdds() const
 T AI_Response::GetPreDelay() const
 T AI_Response::GetRespeakDelay() const
 T AI_Response::GetResponsePtr() const
 T AI_Response::GetSoundLevel() const
 T AI_Response::GetSpeakOnce() const
 T AI_Response::GetWeaponDelay() const
 T AI_Response::Init(ResponseType_t, char const*, AI_CriteriaSet const&, AI_ResponseParams const&, char const*, char const*, bool)
 T AI_Response::ShouldBreakOnNonIdle() const
 T AI_Response::ShouldntUseScene() const
 T AI_Response::operator=(AI_Response const&)
 T AI_Response::~AI_Response()
 T AI_TraceLOS(Vector const&, Vector const&, CBaseEntity*, CGameTrace*, ITraceFilter*)
 T AI_Waypoint_t::AI_Waypoint_t()
 T AI_Waypoint_t::AI_Waypoint_t(Vector const&, float, Navigation_t, int, int)
 T AI_Waypoint_t::~AI_Waypoint_t()
 T AR2Explosion::CreateAR2Explosion(Vector const&)
 T AR2Explosion::GetDataDescMap()
 T AR2Explosion::GetServerClass()
 T AR2Explosion::YouForgotToImplementOrDeclareServerClass()
 T AR2Explosion::~AR2Explosion()
 T ActivityDataOps()
 T ActivityList_AddActivityEntry(char const*, int, bool)
 T ActivityList_Free()
 T ActivityList_IndexForName(char const*)
 T ActivityList_Init()
 T ActivityList_NameForIndex(int)
 T ActivityList_RegisterPrivateActivity(char const*)
 T ActivityList_RegisterSharedActivities()
 T ActivityList_RegisterSharedActivity(char const*, int)
 T AddMultiDamage(CTakeDamageInfo const&, CBaseEntity*)
 T AddRestoredEntity(CBaseEntity*)
 T AddSurfacepropFile(char const*, IPhysicsSurfaceProps*, IFileSystem*)
 T AddWaypointLists(AI_Waypoint_t*, AI_Waypoint_t*)
 T AdjustStriderNodePosition(CAI_Network*, CAI_Node*)
 T AimTarget_ForceRepopulateList()
 T AimTarget_ListCopy(CBaseEntity**, int)
 T AimTarget_ListCount()
 T AllocPooledString(char const*)
 T AllocateStringHelper(char const*, ...)
 T AllocateUniqueDataTableName(bool, char const*, ...)
 T AngleDiff(float, float)
 T AngleDistance(float, float)
 T AngleIMatrix(QAngle const&, Vector const&, matrix3x4_t&)
 T AngleIMatrix(QAngle const&, matrix3x4_t&)
 T AngleMatrix(QAngle const&, Vector const&, matrix3x4_t&)
 T AngleMatrix(QAngle const&, matrix3x4_t&)
 T AngleMatrix(RadianEuler const&, Vector const&, matrix3x4_t&)
 T AngleNormalize(float)
 T AngleQuaternion(QAngle const&, Quaternion&)
 T AngleQuaternion(RadianEuler const&, Quaternion&)
 T AngleVectors(QAngle const&, Vector*)
 T AngleVectors(QAngle const&, Vector*, Vector*, Vector*)
 T AngleVectorsTranspose(QAngle const&, Vector*, Vector*, Vector*)
 T AnyPlayersInHierarchy_R(CBaseEntity*)
 T ApplyChargeDamage(CBaseEntity*, CBaseEntity*, float)
 T ApplyMultiDamage()
 T ApplyViewLocking(float, float, ViewLockData_t&, RemapAngleRange_CurvePart_t)
 T Approach(float, float, float)
 T ApproachAngle(float, float, float)
 T AttenuateCaption(char const*, Vector const&, CUtlVector<Vector, CUtlMemory<Vector, int> >&)
 T AxisAngleQuaternion(Vector const&, float, Quaternion&)
 T BSpline(Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
 T BasicGameStatsRecord_t::ParseFromBuffer(CUtlBuffer&, int)
 T BasicGameStatsRecord_t::SaveToBuffer(CUtlBuffer&)
 T BasicGameStats_t::Clear()
 T BasicGameStats_t::FindOrAddRecordForMap(char const*)
 T BasicGameStats_t::ParseFromBuffer(CUtlBuffer&, int)
 T BasicGameStats_t::SaveToBuffer(CUtlBuffer&)
 T BeginDMXContext()
 T Bias(float, float)
 T BlendBones(CStudioHdr const*, Quaternion*, Vector*, mstudioseqdesc_t&, int, Quaternion const*, Vector const*, float, int)
 T BoxOnPlaneSide(float const*, float const*, cplane_t const*)
 T BreakModelCreateSingle(CBaseEntity*, breakmodel_t*, Vector const&, QAngle const&, Vector const&, Vector const&, int, breakablepropparams_t const&)
 T BreakModelList(CUtlVector<breakmodel_t, CUtlMemory<breakmodel_t, int> >&, int, float, int)
 T BugBaitGrenade_Create(Vector const&, QAngle const&, Vector const&, QAngle const&, CBaseEntity*)
 T BuildBoneChain(CStudioHdr const*, matrix3x4_t const&, Vector const*, Quaternion const*, int, matrix3x4_t*, CBoneBitList&)
 T BuildChangeList(levellist_t*, int)
 T BuildGammaTable(float, float, float, int)
 T BuildPropList(char const*, CUtlVector<breakmodel_t, CUtlMemory<breakmodel_t, int> >&, int, float, int)
 T CAIHintVector::~CAIHintVector()
 T CAISound::GetDataDescMap()
 T CAISound::InputEmitAISound(inputdata_t&)
 T CAISound::InputInsertSound(inputdata_t&)
 T CAISound::~CAISound()
 T CAI_ActBusyBehavior::BuildScheduleTestBits()
 T CAI_ActBusyBehavior::CAI_ActBusyBehavior()
 T CAI_ActBusyBehavior::CanFlinch()
 T CAI_ActBusyBehavior::CanRunAScriptedNPCInteraction(bool)
 T CAI_ActBusyBehavior::CanSelectSchedule()
 T CAI_ActBusyBehavior::CheckAndCleanupOnExit()
 T CAI_ActBusyBehavior::CollectSafeZoneVolumes(CAI_ActBusyGoal*)
 T CAI_ActBusyBehavior::ComputeAndSetRenderBounds()
 T CAI_ActBusyBehavior::CountEnemiesInSafeZone()
 T CAI_ActBusyBehavior::Enable(CAI_ActBusyGoal*, float, bool)
 T CAI_ActBusyBehavior::EndScheduleSelection()
 T CAI_ActBusyBehavior::FValidateHintType(CAI_Hint*)
 T CAI_ActBusyBehavior::FindCombatActBusyHintNode()
 T CAI_ActBusyBehavior::FindCombatActBusyTeleportHintNode()
 T CAI_ActBusyBehavior::ForceActBusy(CAI_ActBusyGoal*, CAI_Hint*, float, bool, bool, bool, CBaseEntity*, Activity)
 T CAI_ActBusyBehavior::ForceActBusyLeave(bool)
 T CAI_ActBusyBehavior::GatherConditions()
 T CAI_ActBusyBehavior::GetClassScheduleIdSpace()
 T CAI_ActBusyBehavior::GetDataDescMap()
 T CAI_ActBusyBehavior::GetName()
 T CAI_ActBusyBehavior::GetReasonableFacingDist()
 T CAI_ActBusyBehavior::GetSchedulingErrorName()
 T CAI_ActBusyBehavior::HandleAnimEvent(animevent_t*)
 T CAI_ActBusyBehavior::HasAnimForActBusy(int, busyanimparts_t)
 T CAI_ActBusyBehavior::InitCustomSchedules()
 T CAI_ActBusyBehavior::IsActive()
 T CAI_ActBusyBehavior::IsCombatActBusy()
 T CAI_ActBusyBehavior::IsInterruptable()
 T CAI_ActBusyBehavior::IsStopBusying()
 T CAI_ActBusyBehavior::LoadedSchedules()
 T CAI_ActBusyBehavior::NPC_TranslateActivity(Activity)
 T CAI_ActBusyBehavior::NotifyBusyEnding()
 T CAI_ActBusyBehavior::OnFriendDamaged(CBaseCombatCharacter*, CBaseEntity*)
 T CAI_ActBusyBehavior::OnRestore()
 T CAI_ActBusyBehavior::OnScheduleChange()
 T CAI_ActBusyBehavior::OnSeeEntity(CBaseEntity*)
 T CAI_ActBusyBehavior::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CAI_ActBusyBehavior::PlaySoundForActBusy(busyanimparts_t)
 T CAI_ActBusyBehavior::QueryHearSound(CSound*)
 T CAI_ActBusyBehavior::RunTask(Task_t const*)
 T CAI_ActBusyBehavior::SelectSchedule()
 T CAI_ActBusyBehavior::SelectScheduleForLeaving()
 T CAI_ActBusyBehavior::SelectScheduleWhileBusy()
 T CAI_ActBusyBehavior::SelectScheduleWhileNotBusy(int)
 T CAI_ActBusyBehavior::ShouldIgnoreSound(CSound*)
 T CAI_ActBusyBehavior::ShouldPlayerAvoid()
 T CAI_ActBusyBehavior::StartTask(Task_t const*)
 T CAI_ActBusyBehavior::StopBusying()
 T CAI_ActBusyBehavior::~CAI_ActBusyBehavior()
 T CAI_ActBusyGoal::EnableGoal(CAI_BaseNPC*)
 T CAI_ActBusyGoal::GetBusyBehaviorForNPC(CBaseEntity*, char const*)
 T CAI_ActBusyGoal::GetDataDescMap()
 T CAI_ActBusyGoal::InputActivate(inputdata_t&)
 T CAI_ActBusyGoal::InputDeactivate(inputdata_t&)
 T CAI_ActBusyGoal::InputForceNPCToActBusy(inputdata_t&)
 T CAI_ActBusyGoal::InputForceThisNPCToActBusy(inputdata_t&)
 T CAI_ActBusyGoal::InputForceThisNPCToLeave(inputdata_t&)
 T CAI_ActBusyGoal::InputSetBusySearchRange(inputdata_t&)
 T CAI_ActBusyGoal::NPCAbortedMoveTo(CAI_BaseNPC*)
 T CAI_ActBusyGoal::NPCFinishedBusy(CAI_BaseNPC*)
 T CAI_ActBusyGoal::NPCLeft(CAI_BaseNPC*)
 T CAI_ActBusyGoal::NPCLostSeeEntity(CAI_BaseNPC*)
 T CAI_ActBusyGoal::NPCMovingToBusy(CAI_BaseNPC*)
 T CAI_ActBusyGoal::NPCSeeEnemy(CAI_BaseNPC*)
 T CAI_ActBusyGoal::NPCStartedBusy(CAI_BaseNPC*)
 T CAI_ActBusyGoal::NPCStartedLeavingBusy(CAI_BaseNPC*)
 T CAI_ActBusyGoal::~CAI_ActBusyGoal()
 T CAI_ActBusyQueueGoal::DrawDebugGeometryOverlays()
 T CAI_ActBusyQueueGoal::GetDataDescMap()
 T CAI_ActBusyQueueGoal::InputActivate(inputdata_t&)
 T CAI_ActBusyQueueGoal::InputMoveQueueUp(inputdata_t&)
 T CAI_ActBusyQueueGoal::InputPlayerStartedBlocking(inputdata_t&)
 T CAI_ActBusyQueueGoal::InputPlayerStoppedBlocking(inputdata_t&)
 T CAI_ActBusyQueueGoal::MoveQueueUpThink()
 T CAI_ActBusyQueueGoal::NPCAbortedMoveTo(CAI_BaseNPC*)
 T CAI_ActBusyQueueGoal::NPCFinishedBusy(CAI_BaseNPC*)
 T CAI_ActBusyQueueGoal::NPCMovingToBusy(CAI_BaseNPC*)
 T CAI_ActBusyQueueGoal::NPCStartedBusy(CAI_BaseNPC*)
 T CAI_ActBusyQueueGoal::NPCStartedLeavingBusy(CAI_BaseNPC*)
 T CAI_ActBusyQueueGoal::PushNPCBackInQueue(CAI_BaseNPC*, int)
 T CAI_ActBusyQueueGoal::QueueThink()
 T CAI_ActBusyQueueGoal::RecalculateQueueCount()
 T CAI_ActBusyQueueGoal::Spawn()
 T CAI_ActBusyQueueGoal::~CAI_ActBusyQueueGoal()
 T CAI_AllyManager::CountAllies(int*, int*)
 T CAI_AllyManager::GetDataDescMap()
 T CAI_AllyManager::InputReplenish(inputdata_t&)
 T CAI_AllyManager::InputSetMaxAllies(inputdata_t&)
 T CAI_AllyManager::InputSetMaxMedics(inputdata_t&)
 T CAI_AllyManager::Spawn()
 T CAI_AllyManager::WatchCounts()
 T CAI_AllyManager::~CAI_AllyManager()
 T CAI_AllySpeechManager* _CreateEntityTemplate<CAI_AllySpeechManager>(CAI_AllySpeechManager*, char const*)
 T CAI_AllySpeechManager::GetDataDescMap()
 T CAI_AllySpeechManager::OnSpokeConcept(CAI_PlayerAlly*, char const*, AI_Response*)
 T CAI_AllySpeechManager::Spawn()
 T CAI_AllySpeechManager::~CAI_AllySpeechManager()
 T CAI_AntlionFollowBehavior::FarFromFollowTarget()
 T CAI_AntlionFollowBehavior::ShouldFollow()
 T CAI_AntlionFollowBehavior::~CAI_AntlionFollowBehavior()
 T CAI_AssaultBehavior::BeginScheduleSelection()
 T CAI_AssaultBehavior::BuildScheduleTestBits()
 T CAI_AssaultBehavior::CAI_AssaultBehavior()
 T CAI_AssaultBehavior::CanRunAScriptedNPCInteraction(bool)
 T CAI_AssaultBehavior::CanSelectSchedule()
 T CAI_AssaultBehavior::ClearAssaultPoint()
 T CAI_AssaultBehavior::DrawDebugTextOverlays(int)
 T CAI_AssaultBehavior::EndScheduleSelection()
 T CAI_AssaultBehavior::FindAssaultPoint(string_t)
 T CAI_AssaultBehavior::GatherConditions()
 T CAI_AssaultBehavior::GetClassScheduleIdSpace()
 T CAI_AssaultBehavior::GetDataDescMap()
 T CAI_AssaultBehavior::GetMaxTacticalLateralMovement()
 T CAI_AssaultBehavior::GetName()
 T CAI_AssaultBehavior::GetSchedulingErrorName()
 T CAI_AssaultBehavior::InitCustomSchedules()
 T CAI_AssaultBehavior::InitializeBehavior()
 T CAI_AssaultBehavior::IsAllowedToDivert()
 T CAI_AssaultBehavior::IsForcingCrouch()
 T CAI_AssaultBehavior::IsUrgent()
 T CAI_AssaultBehavior::IsValidShootPosition(Vector const&, CAI_Node*, CAI_Hint const*)
 T CAI_AssaultBehavior::LoadedSchedules()
 T CAI_AssaultBehavior::OnHitAssaultPoint()
 T CAI_AssaultBehavior::OnRestore()
 T CAI_AssaultBehavior::OnScheduleChange()
 T CAI_AssaultBehavior::OnStartSchedule(int)
 T CAI_AssaultBehavior::OnStrictAssault()
 T CAI_AssaultBehavior::RunTask(Task_t const*)
 T CAI_AssaultBehavior::SelectSchedule()
 T CAI_AssaultBehavior::SetParameters(string_t, AssaultCue_t, int)
 T CAI_AssaultBehavior::StartTask(Task_t const*)
 T CAI_AssaultBehavior::TranslateSchedule(int)
 T CAI_AssaultBehavior::UnlockRallyPoint()
 T CAI_AssaultBehavior::UpdateForceCrouch()
 T CAI_AssaultBehavior::UpdateOnRemove()
 T CAI_AssaultBehavior::~CAI_AssaultBehavior()
 T CAI_AssaultGoal::DisableGoal(CAI_BaseNPC*)
 T CAI_AssaultGoal::EnableGoal(CAI_BaseNPC*)
 T CAI_AssaultGoal::GetDataDescMap()
 T CAI_AssaultGoal::InputBeginAssault(inputdata_t&)
 T CAI_AssaultGoal::~CAI_AssaultGoal()
 T CAI_BaseActor::AddLookTarget(CBaseEntity*, float, float, float)
 T CAI_BaseActor::AddLookTarget(Vector const&, float, float, float)
 T CAI_BaseActor::CheckSceneEventCompletion(CSceneEventInfo*, float, CChoreoScene*, CChoreoEvent*)
 T CAI_BaseActor::ClearLookTarget(CBaseEntity*)
 T CAI_BaseActor::ClearSceneEvent(CSceneEventInfo*, bool, bool)
 T CAI_BaseActor::CreateComponents()
 T CAI_BaseActor::CreateExpresser()
 T CAI_BaseActor::ExpireCurrentRandomLookTarget()
 T CAI_BaseActor::EyeDirection2D()
 T CAI_BaseActor::EyeDirection3D()
 T CAI_BaseActor::EyePosition()
 T CAI_BaseActor::GetDataDescMap()
 T CAI_BaseActor::GetExpresser()
 T CAI_BaseActor::GetHeadDebounce()
 T CAI_BaseActor::HasActiveLookTargets()
 T CAI_BaseActor::HeadDirection2D()
 T CAI_BaseActor::HeadDirection3D()
 T CAI_BaseActor::HeadTargetValidity(Vector const&)
 T CAI_BaseActor::InputSetExpressionOverride(inputdata_t&)
 T CAI_BaseActor::IsServerSideFlexController(char const*)
 T CAI_BaseActor::MaintainLookTargets(float)
 T CAI_BaseActor::MakeRandomLookTarget(AILookTargetArgs_t*, float, float)
 T CAI_BaseActor::OnNewLookTarget()
 T CAI_BaseActor::OnSelectedLookTarget(AILookTargetArgs_t*)
 T CAI_BaseActor::OnStateChange(NPC_STATE, NPC_STATE)
 T CAI_BaseActor::PickLookTarget(CAI_InterestTarget&, bool, float, float)
 T CAI_BaseActor::PickLookTarget(bool, float, float)
 T CAI_BaseActor::PickRandomLookTarget(AILookTargetArgs_t*)
 T CAI_BaseActor::PickTacticalLookTarget(AILookTargetArgs_t*)
 T CAI_BaseActor::PlayExpressionForState(NPC_STATE)
 T CAI_BaseActor::Precache()
 T CAI_BaseActor::ProcessSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*)
 T CAI_BaseActor::RandomFaceFlex(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*)
 T CAI_BaseActor::SelectRandomExpressionForState(NPC_STATE)
 T CAI_BaseActor::SetExpression(char const*)
 T CAI_BaseActor::SetHeadDirection(Vector const&, float)
 T CAI_BaseActor::SetModel(char const*)
 T CAI_BaseActor::SetViewtarget(Vector const&)
 T CAI_BaseActor::ShouldBruteForceFailedNav()
 T CAI_BaseActor::StartSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*, CChoreoActor*, CBaseEntity*)
 T CAI_BaseActor::StartTaskRangeAttack1(Task_t const*)
 T CAI_BaseActor::StudioFrameAdvance()
 T CAI_BaseActor::UpdateBodyControl()
 T CAI_BaseActor::UpdateHeadControl(Vector const&, float)
 T CAI_BaseActor::UpdateLatchedValues()
 T CAI_BaseActor::UseSemaphore()
 T CAI_BaseActor::ValidEyeTarget(Vector const&)
 T CAI_BaseActor::ValidHeadTarget(Vector const&)
 T CAI_BaseActor::~CAI_BaseActor()
 T CAI_BaseHumanoid::BuildScheduleTestBits()
 T CAI_BaseHumanoid::CheckAmmo()
 T CAI_BaseHumanoid::HandleInteraction(int, void*, CBaseCombatCharacter*)
 T CAI_BaseHumanoid::OnMoveBlocked(AIMoveResult_t*)
 T CAI_BaseHumanoid::RunTask(Task_t const*)
 T CAI_BaseHumanoid::RunTaskRangeAttack1(Task_t const*)
 T CAI_BaseHumanoid::StartTask(Task_t const*)
 T CAI_BaseHumanoid::StartTaskRangeAttack1(Task_t const*)
 T CAI_BaseHumanoid::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
 T CAI_BaseNPC::AccessBehaviors()
 T CAI_BaseNPC::Activate()
 T CAI_BaseNPC::AddActivityToSR(char const*, int)
 T CAI_BaseNPC::AddClassRelationship(Class_T, Disposition_t, int)
 T CAI_BaseNPC::AddEntityRelationship(CBaseEntity*, Disposition_t, int)
 T CAI_BaseNPC::AddEventToSR(char const*, int)
 T CAI_BaseNPC::AddFacingTarget(CBaseEntity*, Vector const&, float, float, float)
 T CAI_BaseNPC::AddFacingTarget(CBaseEntity*, float, float, float)
 T CAI_BaseNPC::AddFacingTarget(Vector const&, float, float, float)
 T CAI_BaseNPC::AddLookTarget(CBaseEntity*, float, float, float)
 T CAI_BaseNPC::AddLookTarget(Vector const&, float, float, float)
 T CAI_BaseNPC::AddRelationship(char const*, CBaseEntity*)
 T CAI_BaseNPC::AddScriptedNPCInteraction(ScriptedNPCInteraction_t*)
 T CAI_BaseNPC::AddToSquad(string_t)
 T CAI_BaseNPC::AdvanceToIdealActivity()
 T CAI_BaseNPC::AimGun()
 T CAI_BaseNPC::AlertSound()
 T CAI_BaseNPC::AllowedToIgnite()
 T CAI_BaseNPC::AutoMovement(CBaseEntity*, AIMoveTrace_t*)
 T CAI_BaseNPC::AutoMovement(float, CBaseEntity*, AIMoveTrace_t*)
 T CAI_BaseNPC::BBoxFlat()
 T CAI_BaseNPC::BarnacleDeathSound()
 T CAI_BaseNPC::BeginRappel()
 T CAI_BaseNPC::BestEnemy()
 T CAI_BaseNPC::BodyTarget(Vector const&, bool)
 T CAI_BaseNPC::Break(CBaseEntity*)
 T CAI_BaseNPC::BuildScheduleTestBits()
 T CAI_BaseNPC::CAI_BaseNPC()
 T CAI_BaseNPC::CalcIdealYaw(Vector const&)
 T CAI_BaseNPC::CalcReasonableFacing(bool)
 T CAI_BaseNPC::CalcYawSpeed()
 T CAI_BaseNPC::CalculateForcedInteractionPosition()
 T CAI_BaseNPC::CallNPCThink()
 T CAI_BaseNPC::CanBeAnEnemyOf(CBaseEntity*)
 T CAI_BaseNPC::CanBeUsedAsAFriend()
 T CAI_BaseNPC::CanFlinch()
 T CAI_BaseNPC::CanHolsterWeapon()
 T CAI_BaseNPC::CanPlaySentence(bool)
 T CAI_BaseNPC::CanPlaySequence(bool, int)
 T CAI_BaseNPC::CanRespondToEvent(char const*)
 T CAI_BaseNPC::CanRunAScriptedNPCInteraction(bool)
 T CAI_BaseNPC::CanStandOn(CBaseEntity*) const
 T CAI_BaseNPC::CapabilitiesAdd(int)
 T CAI_BaseNPC::CapabilitiesClear()
 T CAI_BaseNPC::CapabilitiesGet() const
 T CAI_BaseNPC::CapabilitiesRemove(int)
 T CAI_BaseNPC::CascadePlayerPush(Vector const&, Vector const&)
 T CAI_BaseNPC::CheckAmmo()
 T CAI_BaseNPC::CheckFlinches()
 T CAI_BaseNPC::CheckOnGround()
 T CAI_BaseNPC::CheckPVSCondition()
 T CAI_BaseNPC::CheckPhysicsContacts()
 T CAI_BaseNPC::CheckSquad()
 T CAI_BaseNPC::CheckTarget(CBaseEntity*)
 T CAI_BaseNPC::ChooseEnemy()
 T CAI_BaseNPC::CineCleanup()
 T CAI_BaseNPC::CleanupOnDeath(CBaseEntity*, bool)
 T CAI_BaseNPC::ClearAllSchedules()
 T CAI_BaseNPC::ClearAttackConditions()
 T CAI_BaseNPC::ClearCommandGoal()
 T CAI_BaseNPC::ClearCondition(int)
 T CAI_BaseNPC::ClearConditions(int*, int)
 T CAI_BaseNPC::ClearCustomInterruptCondition(int)
 T CAI_BaseNPC::ClearEnemyMemory()
 T CAI_BaseNPC::ClearHintNode(float)
 T CAI_BaseNPC::ClearIgnoreConditions(int*, int)
 T CAI_BaseNPC::ClearSchedule(char const*)
 T CAI_BaseNPC::ClearSenseConditions()
 T CAI_BaseNPC::ClearTransientConditions()
 T CAI_BaseNPC::CollectShotStats(Vector const&, Vector const&)
 T CAI_BaseNPC::ConditionInterruptsCurSchedule(int)
 T CAI_BaseNPC::ConditionInterruptsSchedule(int, int)
 T CAI_BaseNPC::ConditionName(int)
 T CAI_BaseNPC::CorpseFallThink()
 T CAI_BaseNPC::CouldShootIfCrouching(CBaseEntity*)
 T CAI_BaseNPC::CoverRadius()
 T CAI_BaseNPC::CreateComponents()
 T CAI_BaseNPC::CreateCustomTarget(Vector const&, float)
 T CAI_BaseNPC::CreateLocalNavigator()
 T CAI_BaseNPC::CreateMotor()
 T CAI_BaseNPC::CreateMoveProbe()
 T CAI_BaseNPC::CreateNavigator()
 T CAI_BaseNPC::CreatePathfinder()
 T CAI_BaseNPC::CreateSenses()
 T CAI_BaseNPC::CreateTacticalServices()
 T CAI_BaseNPC::CreateVPhysics()
 T CAI_BaseNPC::Crouch()
 T CAI_BaseNPC::CurrentWeaponLOSCondition(Vector const&, bool)
 T CAI_BaseNPC::DeathSound(CTakeDamageInfo const&)
 T CAI_BaseNPC::DecalTrace(CGameTrace*, char const*)
 T CAI_BaseNPC::DesireCrouch()
 T CAI_BaseNPC::DiscardScheduleState()
 T CAI_BaseNPC::DoImpactEffect(CGameTrace&, int)
 T CAI_BaseNPC::DrawDebugGeometryOverlays()
 T CAI_BaseNPC::DrawDebugTextOverlays()
 T CAI_BaseNPC::DropItem(char const*, Vector, QAngle)
 T CAI_BaseNPC::DumpTaskTimings()
 T CAI_BaseNPC::EndTaskOverlay()
 T CAI_BaseNPC::EnemyDistTolerance()
 T CAI_BaseNPC::EnemyDistance(CBaseEntity*)
 T CAI_BaseNPC::Event_Gibbed(CTakeDamageInfo const&)
 T CAI_BaseNPC::Event_Killed(CTakeDamageInfo const&)
 T CAI_BaseNPC::ExitScriptedSequence()
 T CAI_BaseNPC::EyeDirection2D()
 T CAI_BaseNPC::EyeDirection3D()
 T CAI_BaseNPC::EyeLookTarget()
 T CAI_BaseNPC::EyeOffset(Activity)
 T CAI_BaseNPC::EyePosition()
 T CAI_BaseNPC::FCanCheckAttacks()
 T CAI_BaseNPC::FInAimCone(Vector const&)
 T CAI_BaseNPC::FOkToMakeSound(int)
 T CAI_BaseNPC::FScheduleDone()
 T CAI_BaseNPC::FValidateHintType(CAI_Hint*)
 T CAI_BaseNPC::FacingIdeal()
 T CAI_BaseNPC::FacingPosition()
 T CAI_BaseNPC::FearSound()
 T CAI_BaseNPC::FindCoverFromEnemy(bool, float, float)
 T CAI_BaseNPC::FindCoverPos(CBaseEntity*, Vector*)
 T CAI_BaseNPC::FindCoverPos(CSound*, Vector*)
 T CAI_BaseNPC::FindCoverPosInRadius(CBaseEntity*, Vector const&, float, Vector*)
 T CAI_BaseNPC::FindNamedEntity(char const*, IEntityFindFilter*)
 T CAI_BaseNPC::FindNearestValidGoalPos(Vector const&, Vector*)
 T CAI_BaseNPC::FindSpotForNPCInRadius(Vector*, Vector const&, CAI_BaseNPC*, float, bool)
 T CAI_BaseNPC::FireBullets(FireBulletsInfo_t const&)
 T CAI_BaseNPC::FlyMove(Vector const&, unsigned int)
 T CAI_BaseNPC::ForceSelectedGo(CBaseEntity*, Vector const&, Vector const&, bool)
 T CAI_BaseNPC::ForceSelectedGoRandom()
 T CAI_BaseNPC::FoundEnemySound()
 T CAI_BaseNPC::GatherAttackConditions(CBaseEntity*, float)
 T CAI_BaseNPC::GatherConditions()
 T CAI_BaseNPC::GatherEnemyConditions(CBaseEntity*)
 T CAI_BaseNPC::GetActivityID(char const*)
 T CAI_BaseNPC::GetActivityName(int)
 T CAI_BaseNPC::GetActualShootPosition(Vector const&)
 T CAI_BaseNPC::GetActualShootTrajectory(Vector const&)
 T CAI_BaseNPC::GetAlternateMoveShootTarget()
 T CAI_BaseNPC::GetAttackSpread(CBaseCombatWeapon*, CBaseEntity*)
 T CAI_BaseNPC::GetAutoAimCenter()
 T CAI_BaseNPC::GetBestScent()
 T CAI_BaseNPC::GetBestSound(int)
 T CAI_BaseNPC::GetClassScheduleIdSpace()
 T CAI_BaseNPC::GetConditionID(char const*)
 T CAI_BaseNPC::GetCoverActivity(CAI_Hint*)
 T CAI_BaseNPC::GetCrouchEyeOffset()
 T CAI_BaseNPC::GetCrouchGunOffset()
 T CAI_BaseNPC::GetDataDescMap()
 T CAI_BaseNPC::GetDefaultNavGoalTolerance()
 T CAI_BaseNPC::GetEnemies()
 T CAI_BaseNPC::GetEnemy()
 T CAI_BaseNPC::GetEnemy() const
 T CAI_BaseNPC::GetEnemyCombatCharacterPointer()
 T CAI_BaseNPC::GetEnemyLKP() const
 T CAI_BaseNPC::GetEnemyLastTimeSeen() const
 T CAI_BaseNPC::GetEnemyOccluder()
 T CAI_BaseNPC::GetExpresser()
 T CAI_BaseNPC::GetFacingDirection(Vector&)
 T CAI_BaseNPC::GetFailSchedule()
 T CAI_BaseNPC::GetFlinchActivity(bool, bool)
 T CAI_BaseNPC::GetGlobalScheduleId(int)
 T CAI_BaseNPC::GetGoalRepathTolerance(CBaseEntity*, GoalType_t, Vector const&, Vector const&)
 T CAI_BaseNPC::GetHintActivity(short, Activity)
 T CAI_BaseNPC::GetHintDelay(short)
 T CAI_BaseNPC::GetHitgroupDamageMultiplier(int, CTakeDamageInfo const&)
 T CAI_BaseNPC::GetInteractionPartner()
 T CAI_BaseNPC::GetJumpGravity() const
 T CAI_BaseNPC::GetLocalScheduleId(int)
 T CAI_BaseNPC::GetLocalTaskId(int)
 T CAI_BaseNPC::GetLoudestSoundOfType(int)
 T CAI_BaseNPC::GetMaxJumpSpeed() const
 T CAI_BaseNPC::GetMaxTacticalLateralMovement()
 T CAI_BaseNPC::GetNavTargetEntity()
 T CAI_BaseNPC::GetNavType() const
 T CAI_BaseNPC::GetNewSchedule()
 T CAI_BaseNPC::GetNodeViewOffset()
 T CAI_BaseNPC::GetReactionDelay(CBaseEntity*)
 T CAI_BaseNPC::GetReasonableFacingDist()
 T CAI_BaseNPC::GetReloadActivity(CAI_Hint*)
 T CAI_BaseNPC::GetRunningBehavior()
 T CAI_BaseNPC::GetSchedule(int)
 T CAI_BaseNPC::GetScheduleID(char const*)
 T CAI_BaseNPC::GetScheduleOfType(int)
 T CAI_BaseNPC::GetSchedulingErrorName()
 T CAI_BaseNPC::GetScriptCustomMoveActivity()
 T CAI_BaseNPC::GetScriptCustomMoveSequence()
 T CAI_BaseNPC::GetServerClass()
 T CAI_BaseNPC::GetShootEnemyDir(Vector const&, bool)
 T CAI_BaseNPC::GetSmoothedVelocity()
 T CAI_BaseNPC::GetSoundInterests()
 T CAI_BaseNPC::GetSoundPriority(CSound*)
 T CAI_BaseNPC::GetSpreadBias(CBaseCombatWeapon*, CBaseEntity*)
 T CAI_BaseNPC::GetSquadCommandRepresentative()
 T CAI_BaseNPC::GetSquadSlotDebugName(int)
 T CAI_BaseNPC::GetStepDownMultiplier() const
 T CAI_BaseNPC::GetStoppedActivity()
 T CAI_BaseNPC::GetTask()
 T CAI_BaseNPC::GetTaskID(char const*)
 T CAI_BaseNPC::GetTimeToNavGoal()
 T CAI_BaseNPC::GetTracerType()
 T CAI_BaseNPC::GiveWeapon(string_t)
 T CAI_BaseNPC::HandleAnimEvent(animevent_t*)
 T CAI_BaseNPC::HandleInteraction(int, void*, CBaseCombatCharacter*)
 T CAI_BaseNPC::HasCondition(int)
 T CAI_BaseNPC::HasCondition(int, bool)
 T CAI_BaseNPC::HasConditionsToInterruptSchedule(int)
 T CAI_BaseNPC::HasInterruptCondition(int)
 T CAI_BaseNPC::HasStrategySlotRange(int, int)
 T CAI_BaseNPC::HeadDirection2D()
 T CAI_BaseNPC::HeadDirection3D()
 T CAI_BaseNPC::HearingSensitivity()
 T CAI_BaseNPC::HolsterWeapon()
 T CAI_BaseNPC::IdleSound()
 T CAI_BaseNPC::Ignite(float, bool, float, bool)
 T CAI_BaseNPC::ImpactTrace(CGameTrace*, int, char const*)
 T CAI_BaseNPC::InitDefaultActivitySR()
 T CAI_BaseNPC::InitDefaultConditionSR()
 T CAI_BaseNPC::InitDefaultScheduleSR()
 T CAI_BaseNPC::InitDefaultSquadSlotSR()
 T CAI_BaseNPC::InitDefaultTaskSR()
 T CAI_BaseNPC::InitRelationshipTable()
 T CAI_BaseNPC::InitSchedulingTables()
 T CAI_BaseNPC::InitSquad()
 T CAI_BaseNPC::InnateRange1MaxRange()
 T CAI_BaseNPC::InnateRange1MinRange()
 T CAI_BaseNPC::InnateWeaponLOSCondition(Vector const&, Vector const&, bool)
 T CAI_BaseNPC::InputActivateSpeedModifier(inputdata_t&)
 T CAI_BaseNPC::InputBeginRappel(inputdata_t&)
 T CAI_BaseNPC::InputBreak(inputdata_t&)
 T CAI_BaseNPC::InputDisableSpeedModifier(inputdata_t&)
 T CAI_BaseNPC::InputForceInteractionWithNPC(inputdata_t&)
 T CAI_BaseNPC::InputForgetEntity(inputdata_t&)
 T CAI_BaseNPC::InputGagDisable(inputdata_t&)
 T CAI_BaseNPC::InputGagEnable(inputdata_t&)
 T CAI_BaseNPC::InputHolsterAndDestroyWeapon(inputdata_t&)
 T CAI_BaseNPC::InputHolsterWeapon(inputdata_t&)
 T CAI_BaseNPC::InputIgnoreDangerSounds(inputdata_t&)
 T CAI_BaseNPC::InputInsideTransition(inputdata_t&)
 T CAI_BaseNPC::InputOutsideTransition(inputdata_t&)
 T CAI_BaseNPC::InputSetEnemyFilter(inputdata_t&)
 T CAI_BaseNPC::InputSetHealth(inputdata_t&)
 T CAI_BaseNPC::InputSetRelationship(inputdata_t&)
 T CAI_BaseNPC::InputSetSpeedModifierRadius(inputdata_t&)
 T CAI_BaseNPC::InputSetSpeedModifierSpeed(inputdata_t&)
 T CAI_BaseNPC::InputSetSquad(inputdata_t&)
 T CAI_BaseNPC::InputStartScripting(inputdata_t&)
 T CAI_BaseNPC::InputStopScripting(inputdata_t&)
 T CAI_BaseNPC::InputUnholsterWeapon(inputdata_t&)
 T CAI_BaseNPC::InputUpdateEnemyMemory(inputdata_t&)
 T CAI_BaseNPC::InputWake(inputdata_t&)
 T CAI_BaseNPC::IsActivityFinished()
 T CAI_BaseNPC::IsActivityMovementPhased(Activity)
 T CAI_BaseNPC::IsAllowedToDodge()
 T CAI_BaseNPC::IsCommandMoving()
 T CAI_BaseNPC::IsCommandable()
 T CAI_BaseNPC::IsCoverPosition(Vector const&, Vector const&)
 T CAI_BaseNPC::IsCrouchedActivity(Activity)
 T CAI_BaseNPC::IsCrouching()
 T CAI_BaseNPC::IsCurSchedule(int, bool)
 T CAI_BaseNPC::IsCurTaskContinuousMove()
 T CAI_BaseNPC::IsCustomInterruptConditionSet(int)
 T CAI_BaseNPC::IsHeavyDamage(CTakeDamageInfo const&)
 T CAI_BaseNPC::IsInPlayerSquad() const
 T CAI_BaseNPC::IsInterruptable()
 T CAI_BaseNPC::IsJumpLegal(Vector const&, Vector const&, Vector const&) const
 T CAI_BaseNPC::IsJumpLegal(Vector const&, Vector const&, Vector const&, float, float, float) const
 T CAI_BaseNPC::IsLightDamage(CTakeDamageInfo const&)
 T CAI_BaseNPC::IsMedic()
 T CAI_BaseNPC::IsMoving()
 T CAI_BaseNPC::IsNPC() const
 T CAI_BaseNPC::IsNavigationUrgent()
 T CAI_BaseNPC::IsPlayerAlly(CBasePlayer*)
 T CAI_BaseNPC::IsScheduleValid()
 T CAI_BaseNPC::IsSilentSquadMember() const
 T CAI_BaseNPC::IsSquadmateInSpread(Vector const&, Vector const&, float, float)
 T CAI_BaseNPC::IsStrategySlotRangeOccupied(int, int)
 T CAI_BaseNPC::IsTemplate()
 T CAI_BaseNPC::IsUnreachable(CBaseEntity*)
 T CAI_BaseNPC::IsUnusableNode(int, CAI_Hint*)
 T CAI_BaseNPC::IsValidCommandTarget(CBaseEntity*)
 T CAI_BaseNPC::IsValidCover(Vector const&, CAI_Hint const*)
 T CAI_BaseNPC::IsValidEnemy(CBaseEntity*)
 T CAI_BaseNPC::IsValidMoveAwayDest(Vector const&)
 T CAI_BaseNPC::IsValidReasonableFacing(Vector const&, float)
 T CAI_BaseNPC::IsValidShootPosition(Vector const&, CAI_Node*, CAI_Hint const*)
 T CAI_BaseNPC::IsWaitFinished()
 T CAI_BaseNPC::IsWaitingToRappel()
 T CAI_BaseNPC::IsWeaponHolstered()
 T CAI_BaseNPC::IsWeaponStateChanging()
 T CAI_BaseNPC::JustMadeSound(int, float)
 T CAI_BaseNPC::KeyValue(char const*, char const*)
 T CAI_BaseNPC::LineOfSightDist(Vector const&, float)
 T CAI_BaseNPC::LoadDefaultSchedules()
 T CAI_BaseNPC::LoadSchedules()
 T CAI_BaseNPC::LoadedSchedules()
 T CAI_BaseNPC::LockBestSound()
 T CAI_BaseNPC::LostEnemySound()
 T CAI_BaseNPC::MaintainActivity()
 T CAI_BaseNPC::MaintainLookTargets(float)
 T CAI_BaseNPC::MaintainSchedule()
 T CAI_BaseNPC::MaintainTurnActivity()
 T CAI_BaseNPC::MakeAIFootstepSound(float, float)
 T CAI_BaseNPC::MakeTracer(Vector const&, CGameTrace const&, int)
 T CAI_BaseNPC::MarkEnemyAsEluded()
 T CAI_BaseNPC::MaxYawSpeed()
 T CAI_BaseNPC::MeleeAttack1Conditions(float, float)
 T CAI_BaseNPC::MeleeAttack2Conditions(float, float)
 T CAI_BaseNPC::ModifyOrAppendCriteria(AI_CriteriaSet&)
 T CAI_BaseNPC::MoveOrder(Vector const&, CAI_BaseNPC**, int)
 T CAI_BaseNPC::MovementCost(int, Vector const&, Vector const&, float*)
 T CAI_BaseNPC::NPCInit()
 T CAI_BaseNPC::NPCInitThink()
 T CAI_BaseNPC::NPCThink()
 T CAI_BaseNPC::NPCUse(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CAI_BaseNPC::NPC_TranslateActivity(Activity)
 T CAI_BaseNPC::NetworkStateChanged_m_lifeState()
 T CAI_BaseNPC::NetworkStateChanged_m_lifeState(void*)
 T CAI_BaseNPC::NotifyDeadFriend(CBaseEntity*)
 T CAI_BaseNPC::NotifyFriendsOfDamage(CBaseEntity*)
 T CAI_BaseNPC::NotifyPushMove()
 T CAI_BaseNPC::NumBehaviors()
 T CAI_BaseNPC::NumWeaponsInSquad(char const*)
 T CAI_BaseNPC::ObjectCaps()
 T CAI_BaseNPC::OccupyStrategySlot(int)
 T CAI_BaseNPC::OccupyStrategySlotRange(int, int)
 T CAI_BaseNPC::OnBeginMoveAndShoot()
 T CAI_BaseNPC::OnBehaviorChangeStatus(CAI_BehaviorBase*, bool)
 T CAI_BaseNPC::OnCalcBaseMove(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T CAI_BaseNPC::OnChangeActiveWeapon(CBaseCombatWeapon*, CBaseCombatWeapon*)
 T CAI_BaseNPC::OnChangeActivity(Activity)
 T CAI_BaseNPC::OnChangeHintGroup(string_t, string_t)
 T CAI_BaseNPC::OnClearGoal(CAI_BehaviorBase*, CAI_GoalEntity*)
 T CAI_BaseNPC::OnDoorBlocked(CBasePropDoor*)
 T CAI_BaseNPC::OnDoorFullyOpen(CBasePropDoor*)
 T CAI_BaseNPC::OnEndMoveAndShoot()
 T CAI_BaseNPC::OnFriendDamaged(CBaseCombatCharacter*, CBaseEntity*)
 T CAI_BaseNPC::OnGivenWeapon(CBaseCombatWeapon*)
 T CAI_BaseNPC::OnListened()
 T CAI_BaseNPC::OnLooked(int)
 T CAI_BaseNPC::OnMoveOrder()
 T CAI_BaseNPC::OnMoveToCommandGoalFailed()
 T CAI_BaseNPC::OnMovementComplete()
 T CAI_BaseNPC::OnMovementFailed()
 T CAI_BaseNPC::OnObstructingDoor(AILocalMoveGoal_t*, CBaseDoor*, float, AIMoveResult_t*)
 T CAI_BaseNPC::OnObstructionPreSteer(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T CAI_BaseNPC::OnRangeAttack1()
 T CAI_BaseNPC::OnRestore()
 T CAI_BaseNPC::OnScheduleChange()
 T CAI_BaseNPC::OnSeeEntity(CBaseEntity*)
 T CAI_BaseNPC::OnStartScene()
 T CAI_BaseNPC::OnStartSchedule(int)
 T CAI_BaseNPC::OnStateChange(NPC_STATE, NPC_STATE)
 T CAI_BaseNPC::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CAI_BaseNPC::OnTakeDamage_Dead(CTakeDamageInfo const&)
 T CAI_BaseNPC::OnTakeDamage_Dying(CTakeDamageInfo const&)
 T CAI_BaseNPC::OnTargetOrder()
 T CAI_BaseNPC::OnUpcomingPropDoor(AILocalMoveGoal_t*, CBasePropDoor*, float, AIMoveResult_t*)
 T CAI_BaseNPC::OnUpdateShotRegulator()
 T CAI_BaseNPC::OpenPropDoorBegin(CBasePropDoor*)
 T CAI_BaseNPC::OverrideMove(float)
 T CAI_BaseNPC::OverrideMoveFacing(AILocalMoveGoal_t const&, float)
 T CAI_BaseNPC::PainSound(CTakeDamageInfo const&)
 T CAI_BaseNPC::ParseScriptedNPCInteractions()
 T CAI_BaseNPC::PassesDamageFilter(CTakeDamageInfo const&)
 T CAI_BaseNPC::PhysicsSolidMaskForEntity() const
 T CAI_BaseNPC::PickupItem(CBaseEntity*)
 T CAI_BaseNPC::PickupWeapon(CBaseCombatWeapon*)
 T CAI_BaseNPC::PlayFlinchGesture()
 T CAI_BaseNPC::PlayScriptedSentence(char const*, float, float, soundlevel_t, bool, CBaseEntity*)
 T CAI_BaseNPC::PlaySentence(char const*, float, float, soundlevel_t, CBaseEntity*)
 T CAI_BaseNPC::PlayerHasIlluminatedNPC(CBasePlayer*, float)
 T CAI_BaseNPC::PlayerInRange(Vector const&, float)
 T CAI_BaseNPC::PlayerInSpread(Vector const&, Vector const&, float, float, bool)
 T CAI_BaseNPC::PlayerPenetratingVPhysics()
 T CAI_BaseNPC::PointInSpread(CBaseCombatCharacter*, Vector const&, Vector const&, Vector const&, float, float)
 T CAI_BaseNPC::PopulatePoseParameters()
 T CAI_BaseNPC::PostConstructor(char const*)
 T CAI_BaseNPC::PostMovement()
 T CAI_BaseNPC::PostNPCInit()
 T CAI_BaseNPC::PostRunStopMoving()
 T CAI_BaseNPC::PostscheduleThink()
 T CAI_BaseNPC::PreNPCThink()
 T CAI_BaseNPC::PreThink()
 T CAI_BaseNPC::Precache()
 T CAI_BaseNPC::PrescheduleThink()
 T CAI_BaseNPC::QueryHearSound(CSound*)
 T CAI_BaseNPC::QuerySeeEntity(CBaseEntity*, bool)
 T CAI_BaseNPC::RangeAttack1Conditions(float, float)
 T CAI_BaseNPC::RangeAttack2Conditions(float, float)
 T CAI_BaseNPC::RebalanceThinks()
 T CAI_BaseNPC::RelaxAim()
 T CAI_BaseNPC::RememberUnreachable(CBaseEntity*, float)
 T CAI_BaseNPC::RemoveFromSquad()
 T CAI_BaseNPC::RemoveIgnoredConditions()
 T CAI_BaseNPC::RemoveMemory()
 T CAI_BaseNPC::ReportAIState()
 T CAI_BaseNPC::ReportOverThinkLimit(float)
 T CAI_BaseNPC::ResetIdealActivity(Activity)
 T CAI_BaseNPC::ResolveActivityToSequence(Activity, int&, Activity&, Activity&)
 T CAI_BaseNPC::RespondedTo(char const*, bool, bool)
 T CAI_BaseNPC::Restore(IRestore&)
 T CAI_BaseNPC::RunAI()
 T CAI_BaseNPC::RunAnimation()
 T CAI_BaseNPC::RunAttackTask(int)
 T CAI_BaseNPC::RunDieTask()
 T CAI_BaseNPC::RunTask(Task_t const*)
 T CAI_BaseNPC::RunTask(Task_t*)
 T CAI_BaseNPC::Save(ISave&)
 T CAI_BaseNPC::ScheduledFollowPath(int, CBaseEntity*, Activity)
 T CAI_BaseNPC::ScheduledMoveToGoalEntity(int, CBaseEntity*, Activity)
 T CAI_BaseNPC::SelectAlertIdealState()
 T CAI_BaseNPC::SelectAlertSchedule()
 T CAI_BaseNPC::SelectCombatSchedule()
 T CAI_BaseNPC::SelectDeadSchedule()
 T CAI_BaseNPC::SelectDeathPose(CTakeDamageInfo const&)
 T CAI_BaseNPC::SelectFailSchedule(int, int, int)
 T CAI_BaseNPC::SelectFlinchSchedule()
 T CAI_BaseNPC::SelectIdealState()
 T CAI_BaseNPC::SelectIdleIdealState()
 T CAI_BaseNPC::SelectIdleSchedule()
 T CAI_BaseNPC::SelectSchedule()
 T CAI_BaseNPC::SelectScriptIdealState()
 T CAI_BaseNPC::SetActivity(Activity)
 T CAI_BaseNPC::SetActivityAndSequence(Activity, int, Activity, Activity)
 T CAI_BaseNPC::SetAim(Vector const&)
 T CAI_BaseNPC::SetCommandGoal(Vector const&)
 T CAI_BaseNPC::SetCondition(int)
 T CAI_BaseNPC::SetCustomInterruptCondition(int)
 T CAI_BaseNPC::SetDefaultEyeOffset()
 T CAI_BaseNPC::SetDistLook(float)
 T CAI_BaseNPC::SetEnemy(CBaseEntity*, bool)
 T CAI_BaseNPC::SetEnemyOccluder(CBaseEntity*)
 T CAI_BaseNPC::SetHeadDirection(Vector const&, float)
 T CAI_BaseNPC::SetHintGroup(string_t, bool)
 T CAI_BaseNPC::SetHintNode(CAI_Hint*)
 T CAI_BaseNPC::SetHullSizeNormal(bool)
 T CAI_BaseNPC::SetHullSizeSmall(bool)
 T CAI_BaseNPC::SetIdealActivity(Activity)
 T CAI_BaseNPC::SetIgnoreConditions(int*, int)
 T CAI_BaseNPC::SetNavType(Navigation_t)
 T CAI_BaseNPC::SetPlayerAvoidState()
 T CAI_BaseNPC::SetSchedule(CAI_Schedule*)
 T CAI_BaseNPC::SetSchedule(int)
 T CAI_BaseNPC::SetScriptedScheduleIgnoreConditions(Interruptability_t)
 T CAI_BaseNPC::SetSequenceById(int)
 T CAI_BaseNPC::SetSequenceByName(char const*)
 T CAI_BaseNPC::SetSquad(CAI_Squad*)
 T CAI_BaseNPC::SetState(NPC_STATE)
 T CAI_BaseNPC::SetTarget(CBaseEntity*)
 T CAI_BaseNPC::SetTurnActivity()
 T CAI_BaseNPC::SetWait(float, float)
 T CAI_BaseNPC::SetupVPhysicsHull()
 T CAI_BaseNPC::ShouldAcceptGoal(CAI_BehaviorBase*, CAI_GoalEntity*)
 T CAI_BaseNPC::ShouldAlwaysThink()
 T CAI_BaseNPC::ShouldAutoSummon()
 T CAI_BaseNPC::ShouldBruteForceFailedNav()
 T CAI_BaseNPC::ShouldChooseNewEnemy()
 T CAI_BaseNPC::ShouldFadeOnDeath()
 T CAI_BaseNPC::ShouldFailNav(bool)
 T CAI_BaseNPC::ShouldGoToIdleState()
 T CAI_BaseNPC::ShouldIgnoreSound(CSound*)
 T CAI_BaseNPC::ShouldLookForBetterWeapon()
 T CAI_BaseNPC::ShouldMoveAndShoot()
 T CAI_BaseNPC::ShouldMoveWait()
 T CAI_BaseNPC::ShouldNotDistanceCull()
 T CAI_BaseNPC::ShouldPickADeathPose()
 T CAI_BaseNPC::ShouldPlayIdleSound()
 T CAI_BaseNPC::ShouldPlayerAvoid()
 T CAI_BaseNPC::ShouldProbeCollideAgainstEntity(CBaseEntity*)
 T CAI_BaseNPC::ShouldSavePhysics()
 T CAI_BaseNPC::Sleep()
 T CAI_BaseNPC::SoundIsVisible(CSound*)
 T CAI_BaseNPC::SpeakSentence(int)
 T CAI_BaseNPC::SquadSlotName(int)
 T CAI_BaseNPC::Stand()
 T CAI_BaseNPC::StartNPC()
 T CAI_BaseNPC::StartScriptMoveToTargetTask(int)
 T CAI_BaseNPC::StartTargetHandling(CBaseEntity*)
 T CAI_BaseNPC::StartTask(Task_t const*)
 T CAI_BaseNPC::StartTask(Task_t*)
 T CAI_BaseNPC::StartTouch(CBaseEntity*)
 T CAI_BaseNPC::StepHeight() const
 T CAI_BaseNPC::TargetOrder(CBaseEntity*, CAI_BaseNPC**, int)
 T CAI_BaseNPC::TaskComplete(bool)
 T CAI_BaseNPC::TaskFail(int)
 T CAI_BaseNPC::TaskIsRunning()
 T CAI_BaseNPC::TaskMovementComplete()
 T CAI_BaseNPC::TaskName(int)
 T CAI_BaseNPC::Teleport(Vector const*, QAngle const*, Vector const*)
 T CAI_BaseNPC::TestPlayerPushing(CBaseEntity*)
 T CAI_BaseNPC::TestShootPosition(Vector const&, Vector const&)
 T CAI_BaseNPC::ToggleFreeze()
 T CAI_BaseNPC::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
 T CAI_BaseNPC::TranslateActivity(Activity, Activity*)
 T CAI_BaseNPC::TranslateNavGoal(CBaseEntity*, Vector&)
 T CAI_BaseNPC::TranslateSchedule(int)
 T CAI_BaseNPC::TryRestoreHull()
 T CAI_BaseNPC::UnholsterWeapon()
 T CAI_BaseNPC::UpdateEfficiency(bool)
 T CAI_BaseNPC::UpdateEnemyMemory(CBaseEntity*, Vector const&, CBaseEntity*)
 T CAI_BaseNPC::UpdateEnemyPos()
 T CAI_BaseNPC::UpdateOnRemove()
 T CAI_BaseNPC::UpdateSleepState(bool)
 T CAI_BaseNPC::UpdateTargetPos()
 T CAI_BaseNPC::UpdateTransmitState()
 T CAI_BaseNPC::UpdateTurnGesture()
 T CAI_BaseNPC::UseAttackSquadSlots()
 T CAI_BaseNPC::VacateStrategySlot()
 T CAI_BaseNPC::ValidEyeTarget(Vector const&)
 T CAI_BaseNPC::ValidateNavGoal()
 T CAI_BaseNPC::VecToYaw(Vector const&)
 T CAI_BaseNPC::Wake(bool)
 T CAI_BaseNPC::WalkMove(Vector const&, unsigned int)
 T CAI_BaseNPC::WeaponLOSCondition(Vector const&, Vector const&, bool)
 T CAI_BaseNPC::Weapon_IsBetterAvailable()
 T CAI_BaseNPC::Weapon_ShootPosition()
 T CAI_BaseNPC::WokeThisTick() const
 T CAI_BaseNPC::YouForgotToImplementOrDeclareServerClass()
 T CAI_BaseNPC::~CAI_BaseNPC()
 T CAI_BasePhysicsFlyingBot::AddNoiseToVelocity(float)
 T CAI_BasePhysicsFlyingBot::BodyAngles()
 T CAI_BasePhysicsFlyingBot::CAI_BasePhysicsFlyingBot()
 T CAI_BasePhysicsFlyingBot::ClampMotorForces(Vector&, Vector&)
 T CAI_BasePhysicsFlyingBot::CreateVPhysics()
 T CAI_BasePhysicsFlyingBot::GetDataDescMap()
 T CAI_BasePhysicsFlyingBot::GetHeadTurnRate()
 T CAI_BasePhysicsFlyingBot::GetVelocity(Vector*, Vector*)
 T CAI_BasePhysicsFlyingBot::MinGroundDist()
 T CAI_BasePhysicsFlyingBot::ProgressFlyPath(float, CBaseEntity const*, unsigned int, bool, float)
 T CAI_BasePhysicsFlyingBot::ShouldSavePhysics()
 T CAI_BasePhysicsFlyingBot::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)
 T CAI_BasePhysicsFlyingBot::StartTask(Task_t const*)
 T CAI_BasePhysicsFlyingBot::TranslateNavGoal(CBaseEntity*, Vector&)
 T CAI_BasePhysicsFlyingBot::TurnHeadToTarget(float, Vector const&)
 T CAI_BasePhysicsFlyingBot::VelocityToAvoidObstacles(float)
 T CAI_BasePhysicsFlyingBot::~CAI_BasePhysicsFlyingBot()
 T CAI_BattleLine::GetDataDescMap()
 T CAI_BattleLine::InputActivate(inputdata_t&)
 T CAI_BattleLine::InputDeactivate(inputdata_t&)
 T CAI_BattleLine::MovementThink()
 T CAI_BattleLine::NotifyChangeTacticalConstraints()
 T CAI_BattleLine::Spawn()
 T CAI_BattleLine::UpdateOnRemove()
 T CAI_BattleLine::~CAI_BattleLine()
 T CAI_Behavior<CAI_BaseNPC, 100000>::GetClassScheduleIdSpace()
 T CAI_Behavior<CAI_BaseNPC, 100000>::IsBehaviorSchedule(int)
 T CAI_BehaviorBase::AimGun()
 T CAI_BehaviorBase::BeginScheduleSelection()
 T CAI_BehaviorBase::BestEnemy()
 T CAI_BehaviorBase::BridgeSelectFailSchedule(int, int, int, int*)
 T CAI_BehaviorBase::BridgeSpeakMapmakerInterruptConcept(string_t)
 T CAI_BehaviorBase::BuildScheduleTestBits()
 T CAI_BehaviorBase::CanFlinch()
 T CAI_BehaviorBase::CanRunAScriptedNPCInteraction(bool)
 T CAI_BehaviorBase::CanSelectSchedule()
 T CAI_BehaviorBase::CleanupOnDeath(CBaseEntity*, bool)
 T CAI_BehaviorBase::DrawDebugTextOverlays(int)
 T CAI_BehaviorBase::EndScheduleSelection()
 T CAI_BehaviorBase::Event_Killed(CTakeDamageInfo const&)
 T CAI_BehaviorBase::FValidateHintType(CAI_Hint*)
 T CAI_BehaviorBase::GatherConditions()
 T CAI_BehaviorBase::GatherConditionsNotActive()
 T CAI_BehaviorBase::GetDataDescMap()
 T CAI_BehaviorBase::GetDefaultNavGoalTolerance()
 T CAI_BehaviorBase::GetFlinchActivity(bool, bool)
 T CAI_BehaviorBase::GetMaxTacticalLateralMovement()
 T CAI_BehaviorBase::GetReasonableFacingDist()
 T CAI_BehaviorBase::GetSchedule(int)
 T CAI_BehaviorBase::GetSchedulingErrorName()
 T CAI_BehaviorBase::HandleAnimEvent(animevent_t*)
 T CAI_BehaviorBase::IsCrouchedActivity(Activity)
 T CAI_BehaviorBase::IsCrouching()
 T CAI_BehaviorBase::IsCurSchedule(int, bool)
 T CAI_BehaviorBase::IsCurTaskContinuousMove()
 T CAI_BehaviorBase::IsInterruptable()
 T CAI_BehaviorBase::IsNavigationUrgent()
 T CAI_BehaviorBase::IsValidCover(Vector const&, CAI_Hint const*)
 T CAI_BehaviorBase::IsValidEnemy(CBaseEntity*)
 T CAI_BehaviorBase::IsValidShootPosition(Vector const&, CAI_Node*, CAI_Hint const*)
 T CAI_BehaviorBase::KeyValue(char const*, char const*)
 T CAI_BehaviorBase::ModifyOrAppendCriteria(AI_CriteriaSet&)
 T CAI_BehaviorBase::NPC_TranslateActivity(Activity)
 T CAI_BehaviorBase::NotifyChangeBehaviorStatus(bool)
 T CAI_BehaviorBase::OnCalcBaseMove(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T CAI_BehaviorBase::OnChangeActiveWeapon(CBaseCombatWeapon*, CBaseCombatWeapon*)
 T CAI_BehaviorBase::OnChangeHintGroup(string_t, string_t)
 T CAI_BehaviorBase::OnFriendDamaged(CBaseCombatCharacter*, CBaseEntity*)
 T CAI_BehaviorBase::OnMovementComplete()
 T CAI_BehaviorBase::OnMovementFailed()
 T CAI_BehaviorBase::OnRestore()
 T CAI_BehaviorBase::OnScheduleChange()
 T CAI_BehaviorBase::OnSeeEntity(CBaseEntity*)
 T CAI_BehaviorBase::OnStartSchedule(int)
 T CAI_BehaviorBase::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CAI_BehaviorBase::OnUpdateShotRegulator()
 T CAI_BehaviorBase::Precache()
 T CAI_BehaviorBase::PrescheduleThink()
 T CAI_BehaviorBase::QueryHearSound(CSound*)
 T CAI_BehaviorBase::Restore(IRestore&)
 T CAI_BehaviorBase::RestoreBehaviors(IRestore&, CAI_BehaviorBase**, int)
 T CAI_BehaviorBase::RunTask(Task_t const*)
 T CAI_BehaviorBase::Save(ISave&)
 T CAI_BehaviorBase::SaveBehaviors(ISave&, CAI_BehaviorBase*, CAI_BehaviorBase**, int)
 T CAI_BehaviorBase::SelectFailSchedule(int, int, int)
 T CAI_BehaviorBase::SelectSchedule()
 T CAI_BehaviorBase::ShouldAlwaysThink()
 T CAI_BehaviorBase::ShouldIgnoreSound(CSound*)
 T CAI_BehaviorBase::ShouldPlayerAvoid()
 T CAI_BehaviorBase::Spawn()
 T CAI_BehaviorBase::SpeakMapmakerInterruptConcept(string_t)
 T CAI_BehaviorBase::StartTask(Task_t const*)
 T CAI_BehaviorBase::Teleport(Vector const*, QAngle const*, Vector const*)
 T CAI_BehaviorBase::TranslateSchedule(int)
 T CAI_BehaviorBase::UpdateOnRemove()
 T CAI_BehaviorHost<CAI_BaseNPC>::AccessBehaviors()
 T CAI_BehaviorHost<CAI_BaseNPC>::AimGun()
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_BestEnemy()
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_CanFlinch()
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_CanRunAScriptedNPCInteraction(bool)
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_GatherConditions()
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_GetDefaultNavGoalTolerance()
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_GetFlinchActivity(bool, bool)
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_GetMaxTacticalLateralMovement()
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_GetReasonableFacingDist()
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_HandleAnimEvent(animevent_t*)
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_IsCrouchedActivity(Activity)
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_IsCrouching()
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_IsInterruptable()
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_IsNavigationUrgent()
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_IsValidCover(Vector const&, CAI_Hint const*)
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_IsValidEnemy(CBaseEntity*)
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_IsValidShootPosition(Vector const&, CAI_Node*, CAI_Hint const*)
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_ModifyOrAppendCriteria(AI_CriteriaSet&)
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_NPC_TranslateActivity(Activity)
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_OnCalcBaseMove(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_OnFriendDamaged(CBaseCombatCharacter*, CBaseEntity*)
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_OnSeeEntity(CBaseEntity*)
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_QueryHearSound(CSound*)
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_SelectSchedule()
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_ShouldIgnoreSound(CSound*)
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_ShouldPlayerAvoid()
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_Teleport(Vector const*, QAngle const*, Vector const*)
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_TranslateSchedule(int)
 T CAI_BehaviorHost<CAI_BaseNPC>::BehaviorSelectSchedule()
 T CAI_BehaviorHost<CAI_BaseNPC>::BestEnemy()
 T CAI_BehaviorHost<CAI_BaseNPC>::BuildScheduleTestBits()
 T CAI_BehaviorHost<CAI_BaseNPC>::CanFlinch()
 T CAI_BehaviorHost<CAI_BaseNPC>::CanRunAScriptedNPCInteraction(bool)
 T CAI_BehaviorHost<CAI_BaseNPC>::CleanupOnDeath(CBaseEntity*, bool)
 T CAI_BehaviorHost<CAI_BaseNPC>::CreateBehaviors()
 T CAI_BehaviorHost<CAI_BaseNPC>::CreateComponents()
 T CAI_BehaviorHost<CAI_BaseNPC>::Event_Killed(CTakeDamageInfo const&)
 T CAI_BehaviorHost<CAI_BaseNPC>::FValidateHintType(CAI_Hint*)
 T CAI_BehaviorHost<CAI_BaseNPC>::ForceSelectedGo(CBaseEntity*, Vector const&, Vector const&, bool)
 T CAI_BehaviorHost<CAI_BaseNPC>::ForceSelectedGoRandom()
 T CAI_BehaviorHost<CAI_BaseNPC>::GatherConditions()
 T CAI_BehaviorHost<CAI_BaseNPC>::GetDefaultNavGoalTolerance()
 T CAI_BehaviorHost<CAI_BaseNPC>::GetFailSchedule()
 T CAI_BehaviorHost<CAI_BaseNPC>::GetFlinchActivity(bool, bool)
 T CAI_BehaviorHost<CAI_BaseNPC>::GetMaxTacticalLateralMovement()
 T CAI_BehaviorHost<CAI_BaseNPC>::GetNewSchedule()
 T CAI_BehaviorHost<CAI_BaseNPC>::GetReasonableFacingDist()
 T CAI_BehaviorHost<CAI_BaseNPC>::GetRunningBehavior()
 T CAI_BehaviorHost<CAI_BaseNPC>::GetSchedule(int)
 T CAI_BehaviorHost<CAI_BaseNPC>::HandleAnimEvent(animevent_t*)
 T CAI_BehaviorHost<CAI_BaseNPC>::IsCrouchedActivity(Activity)
 T CAI_BehaviorHost<CAI_BaseNPC>::IsCrouching()
 T CAI_BehaviorHost<CAI_BaseNPC>::IsCurTaskContinuousMove()
 T CAI_BehaviorHost<CAI_BaseNPC>::IsInterruptable()
 T CAI_BehaviorHost<CAI_BaseNPC>::IsNavigationUrgent()
 T CAI_BehaviorHost<CAI_BaseNPC>::IsValidCover(Vector const&, CAI_Hint const*)
 T CAI_BehaviorHost<CAI_BaseNPC>::IsValidEnemy(CBaseEntity*)
 T CAI_BehaviorHost<CAI_BaseNPC>::IsValidShootPosition(Vector const&, CAI_Node*, CAI_Hint const*)
 T CAI_BehaviorHost<CAI_BaseNPC>::ModifyOrAppendCriteria(AI_CriteriaSet&)
 T CAI_BehaviorHost<CAI_BaseNPC>::NPCInit()
 T CAI_BehaviorHost<CAI_BaseNPC>::NPC_TranslateActivity(Activity)
 T CAI_BehaviorHost<CAI_BaseNPC>::NumBehaviors()
 T CAI_BehaviorHost<CAI_BaseNPC>::OnBehaviorChangeStatus(CAI_BehaviorBase*, bool)
 T CAI_BehaviorHost<CAI_BaseNPC>::OnCalcBaseMove(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T CAI_BehaviorHost<CAI_BaseNPC>::OnChangeActiveWeapon(CBaseCombatWeapon*, CBaseCombatWeapon*)
 T CAI_BehaviorHost<CAI_BaseNPC>::OnChangeHintGroup(string_t, string_t)
 T CAI_BehaviorHost<CAI_BaseNPC>::OnChangeRunningBehavior(CAI_BehaviorBase*, CAI_BehaviorBase*)
 T CAI_BehaviorHost<CAI_BaseNPC>::OnFriendDamaged(CBaseCombatCharacter*, CBaseEntity*)
 T CAI_BehaviorHost<CAI_BaseNPC>::OnMovementComplete()
 T CAI_BehaviorHost<CAI_BaseNPC>::OnMovementFailed()
 T CAI_BehaviorHost<CAI_BaseNPC>::OnRestore()
 T CAI_BehaviorHost<CAI_BaseNPC>::OnScheduleChange()
 T CAI_BehaviorHost<CAI_BaseNPC>::OnSeeEntity(CBaseEntity*)
 T CAI_BehaviorHost<CAI_BaseNPC>::OnStartSchedule(int)
 T CAI_BehaviorHost<CAI_BaseNPC>::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CAI_BehaviorHost<CAI_BaseNPC>::Precache()
 T CAI_BehaviorHost<CAI_BaseNPC>::PrescheduleThink()
 T CAI_BehaviorHost<CAI_BaseNPC>::QueryHearSound(CSound*)
 T CAI_BehaviorHost<CAI_BaseNPC>::Restore(IRestore&)
 T CAI_BehaviorHost<CAI_BaseNPC>::RunTask(Task_t const*)
 T CAI_BehaviorHost<CAI_BaseNPC>::Save(ISave&)
 T CAI_BehaviorHost<CAI_BaseNPC>::ScheduledFollowPath(int, CBaseEntity*, Activity)
 T CAI_BehaviorHost<CAI_BaseNPC>::ScheduledMoveToGoalEntity(int, CBaseEntity*, Activity)
 T CAI_BehaviorHost<CAI_BaseNPC>::SelectFailSchedule(int, int, int)
 T CAI_BehaviorHost<CAI_BaseNPC>::SelectSchedule()
 T CAI_BehaviorHost<CAI_BaseNPC>::ShouldAlwaysThink()
 T CAI_BehaviorHost<CAI_BaseNPC>::ShouldBehaviorSelectSchedule(CAI_BehaviorBase*)
 T CAI_BehaviorHost<CAI_BaseNPC>::ShouldIgnoreSound(CSound*)
 T CAI_BehaviorHost<CAI_BaseNPC>::ShouldPlayerAvoid()
 T CAI_BehaviorHost<CAI_BaseNPC>::SpeakMapmakerInterruptConcept(string_t)
 T CAI_BehaviorHost<CAI_BaseNPC>::StartTask(Task_t const*)
 T CAI_BehaviorHost<CAI_BaseNPC>::TaskName(int)
 T CAI_BehaviorHost<CAI_BaseNPC>::Teleport(Vector const*, QAngle const*, Vector const*)
 T CAI_BehaviorHost<CAI_BaseNPC>::TranslateSchedule(int)
 T CAI_BehaviorHost<CAI_BaseNPC>::UpdateOnRemove()
 T CAI_BehaviorHost<CAI_BaseNPC>::~CAI_BehaviorHost()
 T CAI_BehaviorHost<CAI_BlendedNPC>::AccessBehaviors()
 T CAI_BehaviorHost<CAI_BlendedNPC>::AimGun()
 T CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_BestEnemy()
 T CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_CanFlinch()
 T CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_CanRunAScriptedNPCInteraction(bool)
 T CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_GatherConditions()
 T CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_GetDefaultNavGoalTolerance()
 T CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_GetFlinchActivity(bool, bool)
 T CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_GetMaxTacticalLateralMovement()
 T CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_GetReasonableFacingDist()
 T CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_HandleAnimEvent(animevent_t*)
 T CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_IsCrouchedActivity(Activity)
 T CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_IsCrouching()
 T CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_IsInterruptable()
 T CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_IsNavigationUrgent()
 T CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_IsValidCover(Vector const&, CAI_Hint const*)
 T CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_IsValidEnemy(CBaseEntity*)
 T CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_IsValidShootPosition(Vector const&, CAI_Node*, CAI_Hint const*)
 T CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_ModifyOrAppendCriteria(AI_CriteriaSet&)
 T CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_NPC_TranslateActivity(Activity)
 T CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_OnCalcBaseMove(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_OnFriendDamaged(CBaseCombatCharacter*, CBaseEntity*)
 T CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_OnSeeEntity(CBaseEntity*)
 T CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_QueryHearSound(CSound*)
 T CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_SelectSchedule()
 T CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_ShouldIgnoreSound(CSound*)
 T CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_ShouldPlayerAvoid()
 T CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_Teleport(Vector const*, QAngle const*, Vector const*)
 T CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_TranslateSchedule(int)
 T CAI_BehaviorHost<CAI_BlendedNPC>::BestEnemy()
 T CAI_BehaviorHost<CAI_BlendedNPC>::BuildScheduleTestBits()
 T CAI_BehaviorHost<CAI_BlendedNPC>::CanFlinch()
 T CAI_BehaviorHost<CAI_BlendedNPC>::CanRunAScriptedNPCInteraction(bool)
 T CAI_BehaviorHost<CAI_BlendedNPC>::CleanupOnDeath(CBaseEntity*, bool)
 T CAI_BehaviorHost<CAI_BlendedNPC>::CreateBehaviors()
 T CAI_BehaviorHost<CAI_BlendedNPC>::CreateComponents()
 T CAI_BehaviorHost<CAI_BlendedNPC>::Event_Killed(CTakeDamageInfo const&)
 T CAI_BehaviorHost<CAI_BlendedNPC>::FValidateHintType(CAI_Hint*)
 T CAI_BehaviorHost<CAI_BlendedNPC>::ForceSelectedGo(CBaseEntity*, Vector const&, Vector const&, bool)
 T CAI_BehaviorHost<CAI_BlendedNPC>::ForceSelectedGoRandom()
 T CAI_BehaviorHost<CAI_BlendedNPC>::GatherConditions()
 T CAI_BehaviorHost<CAI_BlendedNPC>::GetDefaultNavGoalTolerance()
 T CAI_BehaviorHost<CAI_BlendedNPC>::GetFailSchedule()
 T CAI_BehaviorHost<CAI_BlendedNPC>::GetFlinchActivity(bool, bool)
 T CAI_BehaviorHost<CAI_BlendedNPC>::GetMaxTacticalLateralMovement()
 T CAI_BehaviorHost<CAI_BlendedNPC>::GetNewSchedule()
 T CAI_BehaviorHost<CAI_BlendedNPC>::GetReasonableFacingDist()
 T CAI_BehaviorHost<CAI_BlendedNPC>::GetRunningBehavior()
 T CAI_BehaviorHost<CAI_BlendedNPC>::GetSchedule(int)
 T CAI_BehaviorHost<CAI_BlendedNPC>::HandleAnimEvent(animevent_t*)
 T CAI_BehaviorHost<CAI_BlendedNPC>::IsCrouchedActivity(Activity)
 T CAI_BehaviorHost<CAI_BlendedNPC>::IsCrouching()
 T CAI_BehaviorHost<CAI_BlendedNPC>::IsCurTaskContinuousMove()
 T CAI_BehaviorHost<CAI_BlendedNPC>::IsInterruptable()
 T CAI_BehaviorHost<CAI_BlendedNPC>::IsNavigationUrgent()
 T CAI_BehaviorHost<CAI_BlendedNPC>::IsValidCover(Vector const&, CAI_Hint const*)
 T CAI_BehaviorHost<CAI_BlendedNPC>::IsValidEnemy(CBaseEntity*)
 T CAI_BehaviorHost<CAI_BlendedNPC>::IsValidShootPosition(Vector const&, CAI_Node*, CAI_Hint const*)
 T CAI_BehaviorHost<CAI_BlendedNPC>::ModifyOrAppendCriteria(AI_CriteriaSet&)
 T CAI_BehaviorHost<CAI_BlendedNPC>::NPCInit()
 T CAI_BehaviorHost<CAI_BlendedNPC>::NPC_TranslateActivity(Activity)
 T CAI_BehaviorHost<CAI_BlendedNPC>::NumBehaviors()
 T CAI_BehaviorHost<CAI_BlendedNPC>::OnBehaviorChangeStatus(CAI_BehaviorBase*, bool)
 T CAI_BehaviorHost<CAI_BlendedNPC>::OnCalcBaseMove(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T CAI_BehaviorHost<CAI_BlendedNPC>::OnChangeActiveWeapon(CBaseCombatWeapon*, CBaseCombatWeapon*)
 T CAI_BehaviorHost<CAI_BlendedNPC>::OnChangeHintGroup(string_t, string_t)
 T CAI_BehaviorHost<CAI_BlendedNPC>::OnChangeRunningBehavior(CAI_BehaviorBase*, CAI_BehaviorBase*)
 T CAI_BehaviorHost<CAI_BlendedNPC>::OnFriendDamaged(CBaseCombatCharacter*, CBaseEntity*)
 T CAI_BehaviorHost<CAI_BlendedNPC>::OnMovementComplete()
 T CAI_BehaviorHost<CAI_BlendedNPC>::OnMovementFailed()
 T CAI_BehaviorHost<CAI_BlendedNPC>::OnRestore()
 T CAI_BehaviorHost<CAI_BlendedNPC>::OnScheduleChange()
 T CAI_BehaviorHost<CAI_BlendedNPC>::OnSeeEntity(CBaseEntity*)
 T CAI_BehaviorHost<CAI_BlendedNPC>::OnStartSchedule(int)
 T CAI_BehaviorHost<CAI_BlendedNPC>::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CAI_BehaviorHost<CAI_BlendedNPC>::Precache()
 T CAI_BehaviorHost<CAI_BlendedNPC>::PrescheduleThink()
 T CAI_BehaviorHost<CAI_BlendedNPC>::QueryHearSound(CSound*)
 T CAI_BehaviorHost<CAI_BlendedNPC>::Restore(IRestore&)
 T CAI_BehaviorHost<CAI_BlendedNPC>::RunTask(Task_t const*)
 T CAI_BehaviorHost<CAI_BlendedNPC>::Save(ISave&)
 T CAI_BehaviorHost<CAI_BlendedNPC>::ScheduledFollowPath(int, CBaseEntity*, Activity)
 T CAI_BehaviorHost<CAI_BlendedNPC>::ScheduledMoveToGoalEntity(int, CBaseEntity*, Activity)
 T CAI_BehaviorHost<CAI_BlendedNPC>::SelectFailSchedule(int, int, int)
 T CAI_BehaviorHost<CAI_BlendedNPC>::SelectSchedule()
 T CAI_BehaviorHost<CAI_BlendedNPC>::ShouldAlwaysThink()
 T CAI_BehaviorHost<CAI_BlendedNPC>::ShouldBehaviorSelectSchedule(CAI_BehaviorBase*)
 T CAI_BehaviorHost<CAI_BlendedNPC>::ShouldIgnoreSound(CSound*)
 T CAI_BehaviorHost<CAI_BlendedNPC>::ShouldPlayerAvoid()
 T CAI_BehaviorHost<CAI_BlendedNPC>::SpeakMapmakerInterruptConcept(string_t)
 T CAI_BehaviorHost<CAI_BlendedNPC>::StartTask(Task_t const*)
 T CAI_BehaviorHost<CAI_BlendedNPC>::TaskName(int)
 T CAI_BehaviorHost<CAI_BlendedNPC>::Teleport(Vector const*, QAngle const*, Vector const*)
 T CAI_BehaviorHost<CAI_BlendedNPC>::TranslateSchedule(int)
 T CAI_BehaviorHost<CAI_BlendedNPC>::UpdateOnRemove()
 T CAI_BehaviorHost<CAI_BlendedNPC>::~CAI_BehaviorHost()
 T CAI_BlendedMotor::AddTurnGesture(float)
 T CAI_BlendedMotor::BuildInsertNode(int, float)
 T CAI_BlendedMotor::BuildTurnScript(AILocalMoveGoal_t const&)
 T CAI_BlendedMotor::BuildTurnScript(int, int)
 T CAI_BlendedMotor::BuildVelocityScript(AILocalMoveGoal_t const&)
 T CAI_BlendedMotor::GetInteriorSequence(int)
 T CAI_BlendedMotor::GetMoveScriptTotalTime()
 T CAI_BlendedMotor::GetMoveScriptYaw()
 T CAI_BlendedMotor::InsertSlowdown(float, float, bool)
 T CAI_BlendedMotor::MaintainTurnActivity()
 T CAI_BlendedMotor::MoveClimbStart(Vector const&, Vector const&, float, float)
 T CAI_BlendedMotor::MoveContinue()
 T CAI_BlendedMotor::MoveFlyExecute(AILocalMoveGoal_t const&, AIMoveTrace_t*)
 T CAI_BlendedMotor::MoveGroundExecute(AILocalMoveGoal_t const&, AIMoveTrace_t*)
 T CAI_BlendedMotor::MoveJumpStart(Vector const&)
 T CAI_BlendedMotor::MovePaused()
 T CAI_BlendedMotor::MoveStart()
 T CAI_BlendedMotor::MoveStop()
 T CAI_BlendedMotor::OverrideMaxYawSpeed(Activity)
 T CAI_BlendedMotor::RecalculateYawSpeed()
 T CAI_BlendedMotor::ResetGoalSequence()
 T CAI_BlendedMotor::ResetMoveCalculations()
 T CAI_BlendedMotor::SetMoveScriptAnim(float)
 T CAI_BlendedMotor::UpdateYaw(int)
 T CAI_BlendedMotor::~CAI_BlendedMotor()
 T CAI_BlendingHost<CAI_BaseNPC>::CreateMotor()
 T CAI_BlendingHost<CAI_BaseNPC>::CreateNavigator()
 T CAI_BlendingHost<CAI_BaseNPC>::GetTimeToNavGoal()
 T CAI_BlendingHost<CAI_BaseNPC>::MaxYawSpeed()
 T CAI_BlendingHost<CAI_BehaviorHost<CAI_BaseNPC> >::CreateMotor()
 T CAI_BlendingHost<CAI_BehaviorHost<CAI_BaseNPC> >::CreateNavigator()
 T CAI_BlendingHost<CAI_BehaviorHost<CAI_BaseNPC> >::GetTimeToNavGoal()
 T CAI_BlendingHost<CAI_BehaviorHost<CAI_BaseNPC> >::MaxYawSpeed()
 T CAI_BlendingHost<CAI_BehaviorHost<CAI_BlendedNPC> >::CreateMotor()
 T CAI_BlendingHost<CAI_BehaviorHost<CAI_BlendedNPC> >::CreateNavigator()
 T CAI_BlendingHost<CAI_BehaviorHost<CAI_BlendedNPC> >::GetTimeToNavGoal()
 T CAI_BlendingHost<CNPC_BaseZombie>::CreateMotor()
 T CAI_BlendingHost<CNPC_BaseZombie>::CreateNavigator()
 T CAI_BlendingHost<CNPC_BaseZombie>::GetTimeToNavGoal()
 T CAI_BlendingHost<CNPC_BaseZombie>::MaxYawSpeed()
 T CAI_ChangeHintGroup::FindQualifiedNPC(CAI_BaseNPC*, CBaseEntity*, CBaseEntity*)
 T CAI_ChangeHintGroup::GetDataDescMap()
 T CAI_ChangeHintGroup::InputActivate(inputdata_t&)
 T CAI_ChangeHintGroup::ObjectCaps()
 T CAI_ChangeHintGroup::~CAI_ChangeHintGroup()
 T CAI_ChangeTarget::GetDataDescMap()
 T CAI_ChangeTarget::InputActivate(inputdata_t&)
 T CAI_ChangeTarget::ObjectCaps()
 T CAI_ChangeTarget::~CAI_ChangeTarget()
 T CAI_Component::SetOuter(CAI_BaseNPC*)
 T CAI_Component::TaskComplete(bool)
 T CAI_Component::TaskFail(int)
 T CAI_ComponentWithOuter<CAI_BaseNPC, CAI_BehaviorBase>::SetOuter(CAI_BaseNPC*)
 T CAI_DefMovementSink::OnFailedLocalNavigation(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T CAI_DefMovementSink::OnFailedSteer(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T CAI_DefMovementSink::OnInsufficientStopDist(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T CAI_DefMovementSink::OnMoveBlocked(AIMoveResult_t*)
 T CAI_DefMovementSink::OnMoveExecuteFailed(AILocalMoveGoal_t const&, AIMoveTrace_t const&, AIMotorMoveResult_t, AIMoveResult_t*)
 T CAI_DefMovementSink::OnMoveStalled(AILocalMoveGoal_t const&)
 T CAI_DynamicLink::GenerateControllerLinks()
 T CAI_DynamicLink::GetDataDescMap()
 T CAI_DynamicLink::GetDynamicLink(int, int)
 T CAI_DynamicLink::InitDynamicLinks()
 T CAI_DynamicLink::InputTurnOff(inputdata_t&)
 T CAI_DynamicLink::InputTurnOn(inputdata_t&)
 T CAI_DynamicLink::ObjectCaps()
 T CAI_DynamicLink::PurgeDynamicLinks()
 T CAI_DynamicLink::ResetDynamicLinks()
 T CAI_DynamicLink::SetLinkState()
 T CAI_DynamicLink::~CAI_DynamicLink()
 T CAI_DynamicLinkController::GenerateLinksFromVolume()
 T CAI_DynamicLinkController::GetDataDescMap()
 T CAI_DynamicLinkController::InputSetAllowed(inputdata_t&)
 T CAI_DynamicLinkController::InputSetInvert(inputdata_t&)
 T CAI_DynamicLinkController::InputTurnOff(inputdata_t&)
 T CAI_DynamicLinkController::InputTurnOn(inputdata_t&)
 T CAI_DynamicLinkController::~CAI_DynamicLinkController()
 T CAI_Enemies::CAI_Enemies()
 T CAI_Enemies::ClearMemory(CBaseEntity*)
 T CAI_Enemies::Find(CBaseEntity*, bool)
 T CAI_Enemies::FirstTimeSeen(CBaseEntity*)
 T CAI_Enemies::GetDangerMemory()
 T CAI_Enemies::GetFirst(AIEnemiesIter_t__**)
 T CAI_Enemies::GetNext(AIEnemiesIter_t__**)
 T CAI_Enemies::HasEludedMe(CBaseEntity*)
 T CAI_Enemies::HasMemory(CBaseEntity*)
 T CAI_Enemies::LastKnownPosition(CBaseEntity*)
 T CAI_Enemies::LastSeenPosition(CBaseEntity*)
 T CAI_Enemies::LastTimeSeen(CBaseEntity*, bool)
 T CAI_Enemies::MarkAsEluded(CBaseEntity*)
 T CAI_Enemies::OnTookDamageFrom(CBaseEntity*)
 T CAI_Enemies::RefreshMemories()
 T CAI_Enemies::SetEnemyDiscardTime(float)
 T CAI_Enemies::SetFreeKnowledgeDuration(float)
 T CAI_Enemies::SetTimeValidEnemy(CBaseEntity*, float)
 T CAI_Enemies::SetUnforgettable(CBaseEntity*, bool)
 T CAI_Enemies::TimeAtFirstHand(CBaseEntity*)
 T CAI_Enemies::UpdateMemory(CAI_Network*, CBaseEntity*, Vector const&, float, bool)
 T CAI_Enemies::~CAI_Enemies()
 T CAI_EnemiesListSaveRestoreOps::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CAI_EnemiesListSaveRestoreOps::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CAI_EnemiesListSaveRestoreOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CAI_EnemiesListSaveRestoreOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CAI_Expresser::CAI_Expresser(CBaseFlex*)
 T CAI_Expresser::CanSpeak()
 T CAI_Expresser::CanSpeakAfterMyself()
 T CAI_Expresser::CanSpeakConcept(char const*)
 T CAI_Expresser::ClearSpokeConcept(char const*)
 T CAI_Expresser::GetResponseDuration(AI_Response&)
 T CAI_Expresser::GetSemaphoreAvailableTime(CBaseEntity*)
 T CAI_Expresser::IsSpeaking()
 T CAI_Expresser::IsValidResponse(ResponseType_t, char const*)
 T CAI_Expresser::NoteSpeaking(float, float)
 T CAI_Expresser::SemaphoreIsAvailable(CBaseEntity*)
 T CAI_Expresser::SetOuter(CBaseFlex*)
 T CAI_Expresser::SetSpokeConcept(char const*, AI_Response*, bool)
 T CAI_Expresser::Speak(char const*, char const*, char*, unsigned long, IRecipientFilter*)
 T CAI_Expresser::SpeakDispatchResponse(char const*, AI_Response&, IRecipientFilter*)
 T CAI_Expresser::SpeakFindResponse(AI_Response&, char const*, char const*)
 T CAI_Expresser::SpeakRawScene(char const*, float, AI_Response*, IRecipientFilter*)
 T CAI_Expresser::SpeakRawSentence(char const*, float, float, soundlevel_t, CBaseEntity*)
 T CAI_Expresser::SpeechMsg(CBaseEntity*, char const*, ...)
 T CAI_Expresser::SpokeConcept(char const*)
 T CAI_Expresser::TestAllResponses()
 T CAI_Expresser::~CAI_Expresser()
 T CAI_ExpresserHost<CAI_BaseHumanoid>::DispatchResponse(char const*)
 T CAI_ExpresserHost<CAI_BaseHumanoid>::GetResponseSystem()
 T CAI_ExpresserHost<CAI_BaseHumanoid>::ModifyOrAppendCriteria(AI_CriteriaSet&)
 T CAI_ExpresserHost<CAI_BaseHumanoid>::NoteSpeaking(float, float)
 T CAI_ExpresserHost<CAI_BaseHumanoid>::PlaySentence(char const*, float, float, soundlevel_t, CBaseEntity*)
 T CAI_ExpresserHost<CAI_BaseHumanoid>::PostSpeakDispatchResponse(char const*, AI_Response&)
 T CAI_ExpresserHost<CAI_BaseHumanoid>::Speak(char const*, char const*, char*, unsigned long, IRecipientFilter*)
 T CAI_ExpresserHost_NPC_DoModifyOrAppendCriteria(CAI_BaseNPC*, AI_CriteriaSet&)
 T CAI_ExpresserSink::OnSpokeConcept(char const*, AI_Response*)
 T CAI_ExpresserSink::OnStartSpeaking()
 T CAI_FollowBehavior::BeginScheduleSelection()
 T CAI_FollowBehavior::BuildScheduleTestBits()
 T CAI_FollowBehavior::CAI_FollowBehavior(AI_FollowParams_t const&)
 T CAI_FollowBehavior::CanSelectSchedule()
 T CAI_FollowBehavior::CleanupOnDeath(CBaseEntity*, bool)
 T CAI_FollowBehavior::DrawDebugGeometryOverlays()
 T CAI_FollowBehavior::DrawDebugTextOverlays(int)
 T CAI_FollowBehavior::EndScheduleSelection()
 T CAI_FollowBehavior::FValidateHintType(CAI_Hint*)
 T CAI_FollowBehavior::FarFromFollowTarget()
 T CAI_FollowBehavior::FindFollowPoint()
 T CAI_FollowBehavior::FollowCallBaseSelectSchedule()
 T CAI_FollowBehavior::GatherConditions()
 T CAI_FollowBehavior::GetClassScheduleIdSpace()
 T CAI_FollowBehavior::GetDataDescMap()
 T CAI_FollowBehavior::GetFollowPoint()
 T CAI_FollowBehavior::GetFollowTarget()
 T CAI_FollowBehavior::GetFollowTargetViewLoc(Vector*)
 T CAI_FollowBehavior::GetName()
 T CAI_FollowBehavior::GetSchedulingErrorName()
 T CAI_FollowBehavior::InitCustomSchedules()
 T CAI_FollowBehavior::IsActive()
 T CAI_FollowBehavior::IsChaseGoalInRange()
 T CAI_FollowBehavior::IsCurTaskContinuousMove()
 T CAI_FollowBehavior::IsFollowPointInRange()
 T CAI_FollowBehavior::IsFollowTargetInRange(float)
 T CAI_FollowBehavior::IsMovingToFollowTarget()
 T CAI_FollowBehavior::IsValidCover(Vector const&, CAI_Hint const*)
 T CAI_FollowBehavior::IsValidShootPosition(Vector const&, CAI_Node*, CAI_Hint const*)
 T CAI_FollowBehavior::LoadSchedules()
 T CAI_FollowBehavior::LoadedSchedules()
 T CAI_FollowBehavior::NPC_TranslateActivity(Activity)
 T CAI_FollowBehavior::OnMovementComplete()
 T CAI_FollowBehavior::OnMovementFailed()
 T CAI_FollowBehavior::OnStartSchedule(int)
 T CAI_FollowBehavior::Precache()
 T CAI_FollowBehavior::RunTask(Task_t const*)
 T CAI_FollowBehavior::SelectFailSchedule(int, int, int)
 T CAI_FollowBehavior::SelectSchedule()
 T CAI_FollowBehavior::SelectScheduleFollowPoints()
 T CAI_FollowBehavior::SelectScheduleMoveToFormation()
 T CAI_FollowBehavior::SetFollowGoal(CAI_FollowGoal*, bool)
 T CAI_FollowBehavior::SetFollowGoalDirect(CAI_FollowGoal*)
 T CAI_FollowBehavior::SetFollowPoint(CAI_Hint*)
 T CAI_FollowBehavior::SetFollowTarget(CBaseEntity*, bool)
 T CAI_FollowBehavior::SetParameters(AI_FollowParams_t const&)
 T CAI_FollowBehavior::ShouldAlwaysThink()
 T CAI_FollowBehavior::ShouldFollow()
 T CAI_FollowBehavior::ShouldMoveToFollowTarget()
 T CAI_FollowBehavior::StartTask(Task_t const*)
 T CAI_FollowBehavior::TargetIsUnreachable()
 T CAI_FollowBehavior::TaskComplete(bool)
 T CAI_FollowBehavior::TranslateSchedule(int)
 T CAI_FollowBehavior::UpdateFollowPosition()
 T CAI_FollowBehavior::ValidateFaceTarget(Vector*)
 T CAI_FollowBehavior::~CAI_FollowBehavior()
 T CAI_FollowGoal::DisableGoal(CAI_BaseNPC*)
 T CAI_FollowGoal::EnableGoal(CAI_BaseNPC*)
 T CAI_FollowGoal::GetDataDescMap()
 T CAI_FollowGoal::~CAI_FollowGoal()
 T CAI_FollowManager::AddFollower(CBaseEntity*, CAI_BaseNPC*, AI_Formations_t, AI_FollowManagerInfoHandle_t*)
 T CAI_FollowManager::CalcFollowPosition(AI_FollowManagerInfoHandle_t&, AI_FollowNavInfo_t*)
 T CAI_FollowManager::ChangeFormation(AI_FollowManagerInfoHandle_t&, AI_Formations_t)
 T CAI_FollowManager::CountFollowers(CBaseEntity*, string_t)
 T CAI_FollowManager::FindCreateGroup(CBaseEntity*, AI_Formations_t)
 T CAI_FollowManager::RedistributeSlots(AI_FollowGroup_t*)
 T CAI_FollowManager::RemoveFollower(AI_FollowManagerInfoHandle_t&)
 T CAI_FollowManager::RemoveGroup(AI_FollowGroup_t*)
 T CAI_FollowManager::~CAI_FollowManager()
 T CAI_FreePass::HasPass()
 T CAI_FreePass::Reset(float, float)
 T CAI_FreePass::Revoke(bool)
 T CAI_FreePass::ShouldAllowFVisible(bool)
 T CAI_FreePass::Update()
 T CAI_FreePass::~CAI_FreePass()
 T CAI_FuncTankBehavior::AimGun()
 T CAI_FuncTankBehavior::BeginScheduleSelection()
 T CAI_FuncTankBehavior::BestEnemy()
 T CAI_FuncTankBehavior::CAI_FuncTankBehavior()
 T CAI_FuncTankBehavior::CanSelectSchedule()
 T CAI_FuncTankBehavior::Dismount()
 T CAI_FuncTankBehavior::EndScheduleSelection()
 T CAI_FuncTankBehavior::Event_Killed(CTakeDamageInfo const&)
 T CAI_FuncTankBehavior::GatherConditions()
 T CAI_FuncTankBehavior::GetClassScheduleIdSpace()
 T CAI_FuncTankBehavior::GetDataDescMap()
 T CAI_FuncTankBehavior::GetName()
 T CAI_FuncTankBehavior::GetSchedulingErrorName()
 T CAI_FuncTankBehavior::InitCustomSchedules()
 T CAI_FuncTankBehavior::LoadedSchedules()
 T CAI_FuncTankBehavior::NPC_TranslateActivity(Activity)
 T CAI_FuncTankBehavior::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CAI_FuncTankBehavior::PrescheduleThink()
 T CAI_FuncTankBehavior::RunTask(Task_t const*)
 T CAI_FuncTankBehavior::SelectSchedule()
 T CAI_FuncTankBehavior::SetFuncTank(CHandle<CFuncTank>)
 T CAI_FuncTankBehavior::StartTask(Task_t const*)
 T CAI_FuncTankBehavior::UpdateOnRemove()
 T CAI_FuncTankBehavior::~CAI_FuncTankBehavior()
 T CAI_GlobalNamespace::AddSymbol(char const*, int)
 T CAI_GlobalNamespace::CAI_GlobalNamespace()
 T CAI_GlobalNamespace::Clear()
 T CAI_GlobalNamespace::IdToSymbol(int) const
 T CAI_GlobalNamespace::NextGlobalBase() const
 T CAI_GlobalNamespace::SymbolToId(char const*) const
 T CAI_GlobalNamespace::~CAI_GlobalNamespace()
 T CAI_GlobalScheduleNamespace::~CAI_GlobalScheduleNamespace()
 T CAI_GoalEntity::DelayedRefresh()
 T CAI_GoalEntity::DisableGoal(CAI_BaseNPC*)
 T CAI_GoalEntity::DrawDebugTextOverlays()
 T CAI_GoalEntity::EnableGoal(CAI_BaseNPC*)
 T CAI_GoalEntity::GetDataDescMap()
 T CAI_GoalEntity::InputActivate(inputdata_t&)
 T CAI_GoalEntity::InputDeactivate(inputdata_t&)
 T CAI_GoalEntity::InputUpdateActors(inputdata_t&)
 T CAI_GoalEntity::ObjectCaps()
 T CAI_GoalEntity::OnEntityCreated(CBaseEntity*)
 T CAI_GoalEntity::OnEntityDeleted(CBaseEntity*)
 T CAI_GoalEntity::OnRestore()
 T CAI_GoalEntity::PruneActors()
 T CAI_GoalEntity::ResolveNames()
 T CAI_GoalEntity::Spawn()
 T CAI_GoalEntity::UpdateOnRemove()
 T CAI_GoalEntity::~CAI_GoalEntity()
 T CAI_Hint::Activate()
 T CAI_Hint::DisableForSeconds(float)
 T CAI_Hint::DrawDebugTextOverlays()
 T CAI_Hint::EnableThink()
 T CAI_Hint::FixupTargetNode()
 T CAI_Hint::GetDataDescMap()
 T CAI_Hint::GetDirection()
 T CAI_Hint::GetNode()
 T CAI_Hint::GetPosition(CBaseCombatCharacter*, Vector*)
 T CAI_Hint::GetPosition(Hull_t, Vector*)
 T CAI_Hint::HintMatchesCriteria(CAI_BaseNPC*, CHintCriteria const&, Vector const&, float*, bool, bool)
 T CAI_Hint::InputDisableHint(inputdata_t&)
 T CAI_Hint::InputEnableHint(inputdata_t&)
 T CAI_Hint::IsInNodeFOV(CBaseEntity*)
 T CAI_Hint::IsLocked()
 T CAI_Hint::IsLockedBy(CBaseEntity*)
 T CAI_Hint::IsViewable()
 T CAI_Hint::Lock(CBaseEntity*)
 T CAI_Hint::NPCStartedUsing(CAI_BaseNPC*)
 T CAI_Hint::NPCStoppedUsing(CAI_BaseNPC*)
 T CAI_Hint::ObjectCaps()
 T CAI_Hint::OnRestore()
 T CAI_Hint::SetHintType(int, bool)
 T CAI_Hint::Spawn()
 T CAI_Hint::Unlock(float)
 T CAI_Hint::UpdateOnRemove()
 T CAI_Hint::Yaw()
 T CAI_Hint::~CAI_Hint()
 T CAI_HintManager::AddHintByType(CAI_Hint*)
 T CAI_HintManager::CreateHint(HintNodeData*, char const*)
 T CAI_HintManager::DrawHintOverlays(float)
 T CAI_HintManager::DumpHints()
 T CAI_HintManager::FindAllHints(CAI_BaseNPC*, Vector const&, CHintCriteria const&, CUtlVector<CAI_Hint*, CUtlMemory<CAI_Hint*, int> >*)
 T CAI_HintManager::FindHint(CAI_BaseNPC*, CHintCriteria const&)
 T CAI_HintManager::FindHint(CAI_BaseNPC*, Hint_e, int, float, Vector const*)
 T CAI_HintManager::FindHint(CAI_BaseNPC*, Vector const&, CHintCriteria const&)
 T CAI_HintManager::FindHint(Vector const&, CHintCriteria const&)
 T CAI_HintManager::FindHintRandom(CAI_BaseNPC*, Vector const&, CHintCriteria const&)
 T CAI_HintManager::GetFirstHint(AIHintIter_t__**)
 T CAI_HintManager::GetFlags(char const*)
 T CAI_HintManager::GetNextHint(AIHintIter_t__**)
 T CAI_HintManager::RemoveHint(CAI_Hint*)
 T CAI_InterestTarget::Add(CAI_InterestTarget_t::CAI_InterestTarget_e, CBaseEntity*, Vector const&, float, float, float)
 T CAI_InterestTarget::Add(CBaseEntity*, Vector const&, float, float, float)
 T CAI_InterestTarget::Add(CBaseEntity*, float, float, float)
 T CAI_InterestTarget::Add(Vector const&, float, float, float)
 T CAI_InterestTarget_t::GetPosition()
 T CAI_InterestTarget_t::Interest()
 T CAI_InterestTarget_t::IsActive()
 T CAI_InterestTarget_t::IsThis(CBaseEntity*)
 T CAI_LeadBehavior::BeginScheduleSelection()
 T CAI_LeadBehavior::CScheduleLoader::CScheduleLoader()
 T CAI_LeadBehavior::CanSelectSchedule()
 T CAI_LeadBehavior::DrawDebugTextOverlays(int)
 T CAI_LeadBehavior::GatherConditions()
 T CAI_LeadBehavior::GetClassScheduleIdSpace()
 T CAI_LeadBehavior::GetClosestPointOnRoute(Vector const&, Vector*)
 T CAI_LeadBehavior::GetDataDescMap()
 T CAI_LeadBehavior::GetName()
 T CAI_LeadBehavior::GetSchedulingErrorName()
 T CAI_LeadBehavior::InitCustomSchedules()
 T CAI_LeadBehavior::IsCurTaskContinuousMove()
 T CAI_LeadBehavior::IsNavigationUrgent()
 T CAI_LeadBehavior::LeadPlayer(AI_LeadArgs_t const&, CAI_LeadBehaviorHandler*)
 T CAI_LeadBehavior::LoadSchedules()
 T CAI_LeadBehavior::LoadedSchedules()
 T CAI_LeadBehavior::OnRestore()
 T CAI_LeadBehavior::PlayerIsAheadOfMe(bool)
 T CAI_LeadBehavior::RunTask(Task_t const*)
 T CAI_LeadBehavior::SelectSchedule()
 T CAI_LeadBehavior::SetGoal(AI_LeadArgs_t const&)
 T CAI_LeadBehavior::Speak(char const*)
 T CAI_LeadBehavior::StartTask(Task_t const*)
 T CAI_LeadBehavior::TranslateSchedule(int)
 T CAI_LeadBehavior::~CAI_LeadBehavior()
 T CAI_LeadGoal::GetConceptModifiers(char const*)
 T CAI_LeadGoal::GetDataDescMap()
 T CAI_LeadGoal::GetLeadBehavior()
 T CAI_LeadGoal::InputActivate(inputdata_t&)
 T CAI_LeadGoal::InputDeactivate(inputdata_t&)
 T CAI_LeadGoal::InputSetFailure(inputdata_t&)
 T CAI_LeadGoal::InputSetSuccess(inputdata_t&)
 T CAI_LeadGoal::OnEvent(int)
 T CAI_LeadGoal::~CAI_LeadGoal()
 T CAI_LeadGoal_Weapon::GetConceptModifiers(char const*)
 T CAI_LeadGoal_Weapon::GetDataDescMap()
 T CAI_LeadGoal_Weapon::InputActivate(inputdata_t&)
 T CAI_LeadGoal_Weapon::~CAI_LeadGoal_Weapon()
 T CAI_Link::CAI_Link()
 T CAI_Link::DestNodeID(int)
 T CAI_LocalIdSpace::AddSymbol(char const*, int, char const*, char const*)
 T CAI_LocalIdSpace::CAI_LocalIdSpace(bool)
 T CAI_LocalIdSpace::GlobalToLocal(int) const
 T CAI_LocalIdSpace::Init(CAI_GlobalNamespace*, CAI_LocalIdSpace*)
 T CAI_LocalIdSpace::LocalToGlobal(int) const
 T CAI_LocalNavigator::AddObstacle(Vector const&, float, AI_MoveSuggType_t)
 T CAI_LocalNavigator::CAI_LocalNavigator(CAI_BaseNPC*)
 T CAI_LocalNavigator::Init(IAI_MovementSink*)
 T CAI_LocalNavigator::MoveCalc(AILocalMoveGoal_t*, bool)
 T CAI_LocalNavigator::MoveCalcDirect(AILocalMoveGoal_t*, bool, float*, AIMoveResult_t*)
 T CAI_LocalNavigator::MoveCalcRaw(AILocalMoveGoal_t*, bool)
 T CAI_LocalNavigator::MoveCalcSteer(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T CAI_LocalNavigator::ResetMoveCalculations()
 T CAI_LocalNavigator::~CAI_LocalNavigator()
 T CAI_Manager::AccessAIs()
 T CAI_Manager::NumAIs()
 T CAI_Manager::~CAI_Manager()
 T CAI_MappedActivityBehavior_Temporary::OnChangeActiveWeapon(CBaseCombatWeapon*, CBaseCombatWeapon*)
 T CAI_MappedActivityBehavior_Temporary::UpdateTranslateActivityMap()
 T CAI_MappedActivityBehavior_Temporary::~CAI_MappedActivityBehavior_Temporary()
 T CAI_Motor::AddFacingTarget(CBaseEntity*, Vector const&, float, float, float)
 T CAI_Motor::AddFacingTarget(CBaseEntity*, float, float, float)
 T CAI_Motor::AddFacingTarget(Vector const&, float, float, float)
 T CAI_Motor::AddTurnGesture(float)
 T CAI_Motor::CAI_Motor(CAI_BaseNPC*)
 T CAI_Motor::CalcIntervalMove()
 T CAI_Motor::DeltaIdealYaw()
 T CAI_Motor::GetFacingDirection(Vector&)
 T CAI_Motor::GetIdealAccel() const
 T CAI_Motor::GetIdealSpeed() const
 T CAI_Motor::GetNavigator()
 T CAI_Motor::GetPlaybackRate()
 T CAI_Motor::GetSequenceGroundSpeed(int)
 T CAI_Motor::Init(IAI_MovementSink*)
 T CAI_Motor::MaintainTurnActivity()
 T CAI_Motor::MinCheckDist()
 T CAI_Motor::MinStoppingDist(float)
 T CAI_Motor::MoveClimbExecute(Vector const&, Vector const&, float, float, int)
 T CAI_Motor::MoveClimbStart(Vector const&, Vector const&, float, float)
 T CAI_Motor::MoveClimbStop()
 T CAI_Motor::MoveFacing(AILocalMoveGoal_t const&)
 T CAI_Motor::MoveFlyExecute(AILocalMoveGoal_t const&, AIMoveTrace_t*)
 T CAI_Motor::MoveGroundExecute(AILocalMoveGoal_t const&, AIMoveTrace_t*)
 T CAI_Motor::MoveGroundExecuteWalk(AILocalMoveGoal_t const&, float, float, AIMoveTrace_t*)
 T CAI_Motor::MoveGroundStep(Vector const&, CBaseEntity*, float, bool, bool, AIMoveTrace_t*)
 T CAI_Motor::MoveJumpExecute()
 T CAI_Motor::MoveJumpStart(Vector const&)
 T CAI_Motor::MoveJumpStop()
 T CAI_Motor::MoveNormalExecute(AILocalMoveGoal_t const&)
 T CAI_Motor::MovePaused()
 T CAI_Motor::MoveStart()
 T CAI_Motor::MoveStop()
 T CAI_Motor::OverrideMaxYawSpeed(Activity)
 T CAI_Motor::RecalculateYawSpeed()
 T CAI_Motor::ResetMoveCalculations()
 T CAI_Motor::SelectWeightedSequence(Activity)
 T CAI_Motor::SetIdealYawAndUpdate(float, float)
 T CAI_Motor::SetIdealYawToTarget(Vector const&, float, float)
 T CAI_Motor::SetIdealYawToTargetAndUpdate(Vector const&, float)
 T CAI_Motor::SetPlaybackRate(float)
 T CAI_Motor::UpdateYaw(int)
 T CAI_Motor::~CAI_Motor()
 T CAI_MoveAndShootOverlay::CAI_MoveAndShootOverlay()
 T CAI_MoveAndShootOverlay::CanAimAtEnemy()
 T CAI_MoveAndShootOverlay::EndShootWhileMove()
 T CAI_MoveAndShootOverlay::NoShootWhileMove()
 T CAI_MoveAndShootOverlay::RunShootWhileMove()
 T CAI_MoveAndShootOverlay::SetInitialDelay(float)
 T CAI_MoveAndShootOverlay::StartShootWhileMove()
 T CAI_MoveAndShootOverlay::SuspendMoveAndShoot(float)
 T CAI_MoveAndShootOverlay::~CAI_MoveAndShootOverlay()
 T CAI_MoveProbe::CAI_MoveProbe(CAI_BaseNPC*)
 T CAI_MoveProbe::CalcJumpLaunchVelocity(Vector const&, Vector const&, float, float*, float, Vector*) const
 T CAI_MoveProbe::CheckStandPosition(Vector const&, unsigned int) const
 T CAI_MoveProbe::CheckStep(CAI_MoveProbe::CheckStepArgs_t const&, CAI_MoveProbe::CheckStepResult_t*) const
 T CAI_MoveProbe::ClimbMoveLimit(Vector const&, Vector const&, CBaseEntity const*, AIMoveTrace_t*) const
 T CAI_MoveProbe::FloorPoint(Vector const&, unsigned int, float, float, Vector*) const
 T CAI_MoveProbe::FlyMoveLimit(Vector const&, Vector const&, unsigned int, CBaseEntity const*, AIMoveTrace_t*) const
 T CAI_MoveProbe::GroundMoveLimit(Vector const&, Vector const&, unsigned int, CBaseEntity const*, unsigned int, float, AIMoveTrace_t*) const
 T CAI_MoveProbe::JumpMoveLimit(Vector const&, Vector const&, unsigned int, CBaseEntity const*, AIMoveTrace_t*) const
 T CAI_MoveProbe::MoveLimit(Navigation_t, Vector const&, Vector const&, unsigned int, CBaseEntity const*, float, unsigned int, AIMoveTrace_t*)
 T CAI_MoveProbe::SetupCheckStepTraceListData(CAI_MoveProbe::CheckStepArgs_t const&) const
 T CAI_MoveProbe::ShouldBrushBeIgnored(CBaseEntity*)
 T CAI_MoveProbe::TestGroundMove(Vector const&, Vector const&, unsigned int, float, unsigned int, AIMoveTrace_t*) const
 T CAI_MoveProbe::TraceHull(Vector const&, Vector const&, Vector const&, Vector const&, unsigned int, CGameTrace*) const
 T CAI_MoveProbe::TraceHull(Vector const&, Vector const&, unsigned int, CGameTrace*) const
 T CAI_MoveProbe::TraceLine(Vector const&, Vector const&, unsigned int, bool, CGameTrace*) const
 T CAI_MoveProbe::~CAI_MoveProbe()
 T CAI_MoveSolver::Solve(AI_MoveSuggestion_t const*, int, AI_MoveSolution_t*)
 T CAI_MoveSolver::VisualizeRegulations(Vector const&)
 T CAI_NamespaceInfos::Compare(AI_NamespaceAddInfo_t const*, AI_NamespaceAddInfo_t const*)
 T CAI_NavInHintGroupFilter::IsValid(CAI_Node*)
 T CAI_NavInHintGroupFilter::ShouldContinue()
 T CAI_Navigator::AdvancePath()
 T CAI_Navigator::BuildAndGetPathDistToGoal()
 T CAI_Navigator::CAI_Navigator(CAI_BaseNPC*)
 T CAI_Navigator::CalcYawSpeed()
 T CAI_Navigator::CanFitAtNode(int, unsigned int)
 T CAI_Navigator::CanFitAtPosition(Vector const&, unsigned int, bool, bool)
 T CAI_Navigator::ClearGoal()
 T CAI_Navigator::ClearPath()
 T CAI_Navigator::CurWaypointIsGoal() const
 T CAI_Navigator::DelayNavigationFailure(AIMoveTrace_t const&)
 T CAI_Navigator::DoFindPath()
 T CAI_Navigator::DoFindPathToPathcorner(CBaseEntity*)
 T CAI_Navigator::DoFindPathToPos()
 T CAI_Navigator::DrawDebugRouteOverlay()
 T CAI_Navigator::FindPath(AI_NavGoal_t const&, unsigned int)
 T CAI_Navigator::FindPath(bool, bool)
 T CAI_Navigator::FindVectorGoal(Vector*, Vector const&, float, float, bool)
 T CAI_Navigator::GetArrivalActivity() const
 T CAI_Navigator::GetArrivalDirection()
 T CAI_Navigator::GetArrivalDistance() const
 T CAI_Navigator::GetArrivalSequence(int)
 T CAI_Navigator::GetArrivalSpeed()
 T CAI_Navigator::GetCurWaypointFlags() const
 T CAI_Navigator::GetCurWaypointPos() const
 T CAI_Navigator::GetGoalFlags() const
 T CAI_Navigator::GetGoalPos() const
 T CAI_Navigator::GetGoalTarget()
 T CAI_Navigator::GetGoalType() const
 T CAI_Navigator::GetMovementActivity() const
 T CAI_Navigator::GetMovementSequence()
 T CAI_Navigator::GetNavFailCounter() const
 T CAI_Navigator::GetNextPathcorner(CBaseEntity*)
 T CAI_Navigator::GetPathTimeToGoal()
 T CAI_Navigator::GetPointAlongPath(Vector*, float, bool)
 T CAI_Navigator::GetStepDownMultiplier()
 T CAI_Navigator::GetStoppingPath(CAI_WaypointList*)
 T CAI_Navigator::IgnoreStoppingPath()
 T CAI_Navigator::Init(CAI_Network*)
 T CAI_Navigator::IsGoalActive() const
 T CAI_Navigator::IsGoalSet() const
 T CAI_Navigator::MarkCurWaypointFailedLink()
 T CAI_Navigator::Move(float)
 T CAI_Navigator::MoveCalcBaseGoal(AILocalMoveGoal_t*)
 T CAI_Navigator::MoveClimb()
 T CAI_Navigator::MoveEnact(AILocalMoveGoal_t const&)
 T CAI_Navigator::MoveJump()
 T CAI_Navigator::MoveNormal()
 T CAI_Navigator::MoveUpdateWaypoint(AIMoveResult_t*)
 T CAI_Navigator::MovementCost(int, Vector&, Vector&)
 T CAI_Navigator::OnCalcBaseMove(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T CAI_Navigator::OnClearPath()
 T CAI_Navigator::OnFailedLocalNavigation(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T CAI_Navigator::OnFailedSteer(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T CAI_Navigator::OnInsufficientStopDist(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T CAI_Navigator::OnMoveBlocked(AIMoveResult_t*)
 T CAI_Navigator::OnMoveExecuteFailed(AILocalMoveGoal_t const&, AIMoveTrace_t const&, AIMotorMoveResult_t, AIMoveResult_t*)
 T CAI_Navigator::OnMoveStalled(AILocalMoveGoal_t const&)
 T CAI_Navigator::OnNavComplete()
 T CAI_Navigator::OnNavFailed(bool)
 T CAI_Navigator::OnNavFailed(int, bool)
 T CAI_Navigator::OnNewGoal()
 T CAI_Navigator::OnObstructionPreSteer(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T CAI_Navigator::OnScheduleChange()
 T CAI_Navigator::PreMove()
 T CAI_Navigator::PrependLocalAvoidance(float, AIMoveTrace_t const&)
 T CAI_Navigator::PrependWaypoint(Vector const&, Navigation_t, unsigned int)
 T CAI_Navigator::ProgressFlyPath(AI_ProgressFlyPathParams_t const&)
 T CAI_Navigator::RefindPathToGoal(bool, bool)
 T CAI_Navigator::Restore(IRestore&)
 T CAI_Navigator::Save(ISave&)
 T CAI_Navigator::SetArrivalActivity(Activity)
 T CAI_Navigator::SetArrivalDirection(CBaseEntity*)
 T CAI_Navigator::SetArrivalDirection(QAngle const&)
 T CAI_Navigator::SetArrivalDirection(Vector const&)
 T CAI_Navigator::SetArrivalDistance(float)
 T CAI_Navigator::SetArrivalSequence(int)
 T CAI_Navigator::SetGoal(AI_NavGoal_t const&, unsigned int)
 T CAI_Navigator::SetGoalFromStoppingPath()
 T CAI_Navigator::SetGoalTarget(CBaseEntity*, Vector const&)
 T CAI_Navigator::SetGoalTolerance(float)
 T CAI_Navigator::SetMovementActivity(Activity)
 T CAI_Navigator::SetNavType(Navigation_t)
 T CAI_Navigator::SetRandomGoal(Vector const&, float, Vector const&)
 T CAI_Navigator::SetRandomGoal(float, Vector const&)
 T CAI_Navigator::SetVectorGoal(Vector const&, float, float, bool)
 T CAI_Navigator::SetVectorGoalFromTarget(Vector const&, float, bool)
 T CAI_Navigator::SetWanderGoal(float, float)
 T CAI_Navigator::ShouldOptimizeInitialPathSegment(AI_Waypoint_t*)
 T CAI_Navigator::SimplifyFlyPath(AI_ProgressFlyPathParams_t const&)
 T CAI_Navigator::SimplifyPath(bool, float)
 T CAI_Navigator::SimplifyPathBacktrack()
 T CAI_Navigator::SimplifyPathForward(float)
 T CAI_Navigator::SimplifyPathForwardScan(CAI_Navigator::SimplifyForwardScanParams const&)
 T CAI_Navigator::SimplifyPathForwardScan(CAI_Navigator::SimplifyForwardScanParams const&, AI_Waypoint_t*, Vector const&, float, bool, bool, int*)
 T CAI_Navigator::SimplifyPathInsertSimplification(AI_Waypoint_t*, Vector const&)
 T CAI_Navigator::StopMoving(bool)
 T CAI_Navigator::TeleportAlongPath()
 T CAI_Navigator::UpdateGoalPos(Vector const&)
 T CAI_Navigator::~CAI_Navigator()
 T CAI_Network::AddNode(Vector const&, float)
 T CAI_Network::CAI_Network()
 T CAI_Network::CreateLink(int, int, CAI_DynamicLink*)
 T CAI_Network::EnumElement(IHandleEntity*)
 T CAI_Network::FindBSSmallest(CVarBitVec*, float*, int)
 T CAI_Network::GetCachedNearestNode(Vector const&, CAI_BaseNPC*, int*)
 T CAI_Network::GetNodePosition(CBaseCombatCharacter*, int)
 T CAI_Network::GetNodePosition(Hull_t, int)
 T CAI_Network::GetNodeYaw(int)
 T CAI_Network::IsConnected(int, int)
 T CAI_Network::ListNodesInBox(CNodeList&, int, Vector const&, Vector const&, INodeListFilter*)
 T CAI_Network::NearestNodeToPoint(CAI_BaseNPC*, Vector const&, bool, INearestNodeFilter*)
 T CAI_Network::~CAI_Network()
 T CAI_NetworkBuilder::Build(CAI_Network*)
 T CAI_NetworkBuilder::ComputeConnection(CAI_Node*, CAI_Node*, Hull_t)
 T CAI_NetworkBuilder::FloodFillZone(CAI_Node**, CAI_Node*, int)
 T CAI_NetworkBuilder::ForceDynamicLinkNeighbors()
 T CAI_NetworkBuilder::InitClimbNodePosition(CAI_Network*, CAI_Node*)
 T CAI_NetworkBuilder::InitGroundNodePosition(CAI_Network*, CAI_Node*)
 T CAI_NetworkBuilder::InitLinks(CAI_Network*, CAI_Node*)
 T CAI_NetworkBuilder::InitNeighbors(CAI_Network*, CAI_Node*)
 T CAI_NetworkBuilder::InitNodePosition(CAI_Network*, CAI_Node*)
 T CAI_NetworkBuilder::InitVisibility(CAI_Network*, CAI_Node*)
 T CAI_NetworkBuilder::InitZones(CAI_Network*)
 T CAI_NetworkBuilder::Rebuild(CAI_Network*)
 T CAI_NetworkBuilder::~CAI_NetworkBuilder()
 T CAI_NetworkEditTools::DrawAINetworkOverlay()
 T CAI_NetworkEditTools::DrawEditInfoOverlay()
 T CAI_NetworkEditTools::DrawHull(Hull_t)
 T CAI_NetworkEditTools::DrawNextHull(char const*)
 T CAI_NetworkEditTools::FindAILinkNearestFacing(Vector const&, Vector const&, float)
 T CAI_NetworkEditTools::FindAINodeNearestFacing(Vector const&, Vector const&, float, int)
 T CAI_NetworkEditTools::GetNodeIdFromWCId(int)
 T CAI_NetworkEditTools::GetWCIdFromNodeId(int)
 T CAI_NetworkEditTools::RecalcUsableNodesForHull()
 T CAI_NetworkEditTools::SetDebugBits(char const*, int)
 T CAI_NetworkEditTools::SetRebuildFlags()
 T CAI_NetworkManager::BuildNetworkGraph()
 T CAI_NetworkManager::CAI_NetworkManager()
 T CAI_NetworkManager::DelayedInit()
 T CAI_NetworkManager::DeleteAllAINetworks()
 T CAI_NetworkManager::GetDataDescMap()
 T CAI_NetworkManager::InitializeAINetworks()
 T CAI_NetworkManager::IsAIFileCurrent(char const*)
 T CAI_NetworkManager::LoadNetworkGraph()
 T CAI_NetworkManager::MarkDontSaveGraph()
 T CAI_NetworkManager::ObjectCaps()
 T CAI_NetworkManager::RebuildNetworkGraph()
 T CAI_NetworkManager::RebuildThink()
 T CAI_NetworkManager::SaveNetworkGraph()
 T CAI_NetworkManager::Spawn()
 T CAI_NetworkManager::StartRebuild()
 T CAI_NetworkManager::~CAI_NetworkManager()
 T CAI_Node::AddLink(CAI_Link*)
 T CAI_Node::CAI_Node(int, Vector const&, float)
 T CAI_Node::GetLink(int)
 T CAI_Node::GetPosition(int)
 T CAI_Node::GetShuffeledLink(int)
 T CAI_Node::HasLink(int)
 T CAI_Node::ShuffleLinks()
 T CAI_Path::ActualGoalPosition() const
 T CAI_Path::Advance()
 T CAI_Path::BaseGoalPosition() const
 T CAI_Path::CAI_Path()
 T CAI_Path::Clear()
 T CAI_Path::CurWaypointFlags() const
 T CAI_Path::CurWaypointIsGoal() const
 T CAI_Path::CurWaypointNavType() const
 T CAI_Path::CurWaypointPos() const
 T CAI_Path::CurWaypointYaw() const
 T CAI_Path::GetArrivalActivity() const
 T CAI_Path::GetArrivalSequence() const
 T CAI_Path::GetGoalDirection(Vector const&)
 T CAI_Path::GetGoalSpeed(Vector const&)
 T CAI_Path::GetGoalStoppingDistance() const
 T CAI_Path::GetPathDistanceToGoal(Vector const&)
 T CAI_Path::GetPathLength()
 T CAI_Path::GoalFlags() const
 T CAI_Path::GoalType() const
 T CAI_Path::NextWaypointPos() const
 T CAI_Path::PrependWaypoint(Vector const&, Navigation_t, unsigned int)
 T CAI_Path::PrependWaypoints(AI_Waypoint_t*)
 T CAI_Path::ResetGoalPosition(Vector const&)
 T CAI_Path::SetArrivalActivity(Activity)
 T CAI_Path::SetArrivalSequence(int)
 T CAI_Path::SetGoalDirection(CBaseEntity*)
 T CAI_Path::SetGoalDirection(Vector const&)
 T CAI_Path::SetGoalSpeed(CBaseEntity*)
 T CAI_Path::SetGoalSpeed(float)
 T CAI_Path::SetGoalStoppingDistance(float)
 T CAI_Path::SetGoalType(GoalType_t)
 T CAI_Path::SetLastNodeAsGoal(bool)
 T CAI_Path::SetMovementActivity(Activity)
 T CAI_Path::SetWaypoints(AI_Waypoint_t*, bool)
 T CAI_Path::~CAI_Path()
 T CAI_Pathfinder::BuildComplexRoute(Navigation_t, Vector const&, Vector const&, CBaseEntity const*, int, int, int, float, float, float)
 T CAI_Pathfinder::BuildLocalRoute(Vector const&, Vector const&, CBaseEntity const*, int, int, int, float)
 T CAI_Pathfinder::BuildNodeRoute(Vector const&, Vector const&, int, float)
 T CAI_Pathfinder::BuildOBBAvoidanceRoute(Vector const&, Vector const&, CBaseEntity const*, CBaseEntity const*, Navigation_t)
 T CAI_Pathfinder::BuildRadialRoute(Vector const&, Vector const&, Vector const&, float, float, float, bool, float, bool)
 T CAI_Pathfinder::BuildRoute(Vector const&, Vector const&, CBaseEntity*, float, Navigation_t, bool)
 T CAI_Pathfinder::BuildRouteThroughPoints(Vector*, int, int, int, int, Navigation_t, CBaseEntity*)
 T CAI_Pathfinder::BuildSimpleRoute(Navigation_t, Vector const&, Vector const&, CBaseEntity const*, int, int, int, float)
 T CAI_Pathfinder::BuildTriangulationRoute(Vector const&, Vector const&, CBaseEntity const*, int, int, float, float, Navigation_t)
 T CAI_Pathfinder::CTriDebugOverlay::AddTriOverlayLine(Vector const&, Vector const&, int, int, int, bool)
 T CAI_Pathfinder::CTriDebugOverlay::AddTriOverlayLines(Vector const&, Vector const&, Vector const&, AIMoveTrace_t const&, AIMoveTrace_t const&, bool)
 T CAI_Pathfinder::CanUseLocalNavigation()
 T CAI_Pathfinder::CheckStaleNavTypeRoute(Navigation_t, Vector const&, Vector const&)
 T CAI_Pathfinder::CheckStaleRoute(Vector const&, Vector const&, int)
 T CAI_Pathfinder::ComputeWaypointType(CAI_Node**, int, int)
 T CAI_Pathfinder::CreateNodeWaypoint(Hull_t, int, int)
 T CAI_Pathfinder::DrawDebugGeometryOverlays(int)
 T CAI_Pathfinder::FindBestPath(int, int)
 T CAI_Pathfinder::FindShortRandomPath(int, float, Vector const&)
 T CAI_Pathfinder::Init(CAI_Network*)
 T CAI_Pathfinder::IsLinkStillStale(int, CAI_Link*)
 T CAI_Pathfinder::IsLinkUsable(CAI_Link*, int)
 T CAI_Pathfinder::MakeRouteFromParents(int*, int)
 T CAI_Pathfinder::NearestNodeToNPC()
 T CAI_Pathfinder::NearestNodeToPoint(Vector const&)
 T CAI_Pathfinder::RouteFromNode(Vector const&, int, int, float)
 T CAI_Pathfinder::RouteToNode(Vector const&, int, int, float)
 T CAI_Pathfinder::TestTriangulationRoute(Navigation_t, Vector const&, Vector const&, Vector const&, CBaseEntity const*, AIMoveTrace_t*)
 T CAI_Pathfinder::Triangulate(Navigation_t, Vector const&, Vector const&, float, CBaseEntity const*, Vector*)
 T CAI_Pathfinder::UnlockRouteNodes(AI_Waypoint_t*)
 T CAI_Pathfinder::~CAI_Pathfinder()
 T CAI_PlaneSolver::AddObstacle(Vector const&, float, CBaseEntity*, AI_MoveSuggType_t)
 T CAI_PlaneSolver::AdjustSolutionForFliers(AILocalMoveGoal_t const&, float, Vector*)
 T CAI_PlaneSolver::CAI_PlaneSolver(CAI_BaseNPC*)
 T CAI_PlaneSolver::CalcProbeDist(float)
 T CAI_PlaneSolver::GenerateCircleObstacleSuggestions(AILocalMoveGoal_t const&, float)
 T CAI_PlaneSolver::GenerateObstacleNpcs(AILocalMoveGoal_t const&, float)
 T CAI_PlaneSolver::GenerateObstacleSuggestion(AILocalMoveGoal_t const&, float, float, float, int)
 T CAI_PlaneSolver::GenerateObstacleSuggestions(AILocalMoveGoal_t const&, AIMoveTrace_t const&, float, float, float, int)
 T CAI_PlaneSolver::GenerateSuggestionFromTrace(AILocalMoveGoal_t const&, AIMoveTrace_t const&, float, float, float, int)
 T CAI_PlaneSolver::RunMoveSolver(AILocalMoveGoal_t const&, AIMoveTrace_t const&, float, bool, Vector*)
 T CAI_PlaneSolver::Solve(AILocalMoveGoal_t const&, float, Vector*)
 T CAI_PlaneSolver::VisualizeSolution(Vector const&, Vector const&)
 T CAI_PlayerAlly::AnswerQuestion(CAI_PlayerAlly*, int, bool)
 T CAI_PlayerAlly::CScheduleLoader::CScheduleLoader()
 T CAI_PlayerAlly::CanPlaySentence(bool)
 T CAI_PlayerAlly::CanRespondToEvent(char const*)
 T CAI_PlayerAlly::CreateVPhysics()
 T CAI_PlayerAlly::DisplayDeathMessage()
 T CAI_PlayerAlly::Event_Killed(CTakeDamageInfo const&)
 T CAI_PlayerAlly::EyeLookTarget()
 T CAI_PlayerAlly::FindNamedEntity(char const*, IEntityFindFilter*)
 T CAI_PlayerAlly::FindSpeechTarget(int)
 T CAI_PlayerAlly::GatherConditions()
 T CAI_PlayerAlly::GatherEnemyConditions(CBaseEntity*)
 T CAI_PlayerAlly::GetClassScheduleIdSpace()
 T CAI_PlayerAlly::GetDataDescMap()
 T CAI_PlayerAlly::GetDeathMessageText()
 T CAI_PlayerAlly::GetSchedulingErrorName()
 T CAI_PlayerAlly::InitCustomSchedules()
 T CAI_PlayerAlly::InputAnswerQuestion(inputdata_t&)
 T CAI_PlayerAlly::InputAnswerQuestionHello(inputdata_t&)
 T CAI_PlayerAlly::InputDisableSpeakWhileScripting(inputdata_t&)
 T CAI_PlayerAlly::InputEnableSpeakWhileScripting(inputdata_t&)
 T CAI_PlayerAlly::InputIdleRespond(inputdata_t&)
 T CAI_PlayerAlly::InputMakeGameEndAlly(inputdata_t&)
 T CAI_PlayerAlly::InputMakeRegularAlly(inputdata_t&)
 T CAI_PlayerAlly::InputSpeakResponseConcept(inputdata_t&)
 T CAI_PlayerAlly::IsAllowedToSpeak(char const*, bool)
 T CAI_PlayerAlly::IsOkToCombatSpeak()
 T CAI_PlayerAlly::IsOkToSpeak()
 T CAI_PlayerAlly::IsOkToSpeak(ConceptCategory_t, bool)
 T CAI_PlayerAlly::IsOkToSpeakInResponseToPlayer()
 T CAI_PlayerAlly::IsValidSpeechTarget(int, CBaseEntity*)
 T CAI_PlayerAlly::LoadSchedules()
 T CAI_PlayerAlly::LoadedSchedules()
 T CAI_PlayerAlly::ModifyOrAppendCriteria(AI_CriteriaSet&)
 T CAI_PlayerAlly::ObjectCaps()
 T CAI_PlayerAlly::OnKilledNPC(CBaseCombatCharacter*)
 T CAI_PlayerAlly::OnSpokeConcept(char const*, AI_Response*)
 T CAI_PlayerAlly::OnStartSchedule(int)
 T CAI_PlayerAlly::OnStartSpeaking()
 T CAI_PlayerAlly::OnStateChange(NPC_STATE, NPC_STATE)
 T CAI_PlayerAlly::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CAI_PlayerAlly::PainSound(CTakeDamageInfo const&)
 T CAI_PlayerAlly::PlayScriptedSentence(char const*, float, float, soundlevel_t, bool, CBaseEntity*)
 T CAI_PlayerAlly::PostSpeakDispatchResponse(char const*, AI_Response*)
 T CAI_PlayerAlly::PrescheduleThink()
 T CAI_PlayerAlly::RespondedTo(char const*, bool, bool)
 T CAI_PlayerAlly::RunTask(Task_t const*)
 T CAI_PlayerAlly::SelectAlertSpeech(AISpeechSelection_t*)
 T CAI_PlayerAlly::SelectAnswerFriend(CBaseEntity*, AISpeechSelection_t*, bool)
 T CAI_PlayerAlly::SelectIdleSpeech(AISpeechSelection_t*)
 T CAI_PlayerAlly::SelectInterjection()
 T CAI_PlayerAlly::SelectNonCombatSpeechSchedule()
 T CAI_PlayerAlly::SelectPlayerUseSpeech()
 T CAI_PlayerAlly::SelectQuestionAndAnswerSpeech(AISpeechSelection_t*)
 T CAI_PlayerAlly::SelectQuestionFriend(CBaseEntity*, AISpeechSelection_t*)
 T CAI_PlayerAlly::SelectSchedule()
 T CAI_PlayerAlly::ShouldRegenerateHealth()
 T CAI_PlayerAlly::ShouldSpeakRandom(char const*, int)
 T CAI_PlayerAlly::SpeakIfAllowed(char const*, char const*, bool, char*, unsigned long)
 T CAI_PlayerAlly::SpeakMapmakerInterruptConcept(string_t)
 T CAI_PlayerAlly::SquadSlotName(int)
 T CAI_PlayerAlly::StartTask(Task_t const*)
 T CAI_PlayerAlly::TakeHealth(float, int)
 T CAI_PlayerAlly::TaskFail(int)
 T CAI_PlayerAlly::Touch(CBaseEntity*)
 T CAI_PlayerAlly::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
 T CAI_PlayerAlly::TranslateSchedule(int)
 T CAI_PlayerAlly::~CAI_PlayerAlly()
 T CAI_PoliceGoal* _CreateEntityTemplate<CAI_PoliceGoal>(CAI_PoliceGoal*, char const*)
 T CAI_PoliceGoal::FireWarningLevelOutput(int)
 T CAI_PoliceGoal::GetDataDescMap()
 T CAI_PoliceGoal::GetRadius()
 T CAI_PoliceGoal::GetTarget()
 T CAI_PoliceGoal::InputDisableKnockOut(inputdata_t&)
 T CAI_PoliceGoal::InputEnableKnockOut(inputdata_t&)
 T CAI_PoliceGoal::ShouldKnockOutTarget(Vector const&, bool)
 T CAI_PoliceGoal::ShouldRemainAtPost()
 T CAI_PoliceGoal::~CAI_PoliceGoal()
 T CAI_PolicingBehavior::AnnouncePolicing()
 T CAI_PolicingBehavior::BuildScheduleTestBits()
 T CAI_PolicingBehavior::CAI_PolicingBehavior()
 T CAI_PolicingBehavior::CanSelectSchedule()
 T CAI_PolicingBehavior::Enable(CAI_PoliceGoal*)
 T CAI_PolicingBehavior::GatherConditions()
 T CAI_PolicingBehavior::GetClassScheduleIdSpace()
 T CAI_PolicingBehavior::GetDataDescMap()
 T CAI_PolicingBehavior::GetName()
 T CAI_PolicingBehavior::GetSchedulingErrorName()
 T CAI_PolicingBehavior::HostSetBatonState(bool)
 T CAI_PolicingBehavior::InitCustomSchedules()
 T CAI_PolicingBehavior::LoadedSchedules()
 T CAI_PolicingBehavior::NPC_TranslateActivity(Activity)
 T CAI_PolicingBehavior::RunTask(Task_t const*)
 T CAI_PolicingBehavior::SelectFailSchedule(int, int, int)
 T CAI_PolicingBehavior::SelectHarassSchedule()
 T CAI_PolicingBehavior::SelectSchedule()
 T CAI_PolicingBehavior::SelectSuppressSchedule()
 T CAI_PolicingBehavior::ShouldKnockOutTarget(CBaseEntity*)
 T CAI_PolicingBehavior::StartTask(Task_t const*)
 T CAI_PolicingBehavior::TargetIsHostile()
 T CAI_PolicingBehavior::TranslateSchedule(int)
 T CAI_PolicingBehavior::~CAI_PolicingBehavior()
 T CAI_ProxyMovementSink::CalcYawSpeed()
 T CAI_ProxyMovementSink::OnCalcBaseMove(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T CAI_ProxyMovementSink::OnFailedLocalNavigation(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T CAI_ProxyMovementSink::OnFailedSteer(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T CAI_ProxyMovementSink::OnInsufficientStopDist(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T CAI_ProxyMovementSink::OnMoveBlocked(AIMoveResult_t*)
 T CAI_ProxyMovementSink::OnMoveExecuteFailed(AILocalMoveGoal_t const&, AIMoveTrace_t const&, AIMotorMoveResult_t, AIMoveResult_t*)
 T CAI_ProxyMovementSink::OnMoveStalled(AILocalMoveGoal_t const&)
 T CAI_ProxyMovementSink::OnObstructionPreSteer(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T CAI_RadialLinkController::Activate()
 T CAI_RadialLinkController::GetDataDescMap()
 T CAI_RadialLinkController::ModifyNodeLinks(bool)
 T CAI_RadialLinkController::PollMotionThink()
 T CAI_RadialLinkController::Spawn()
 T CAI_RadialLinkController::~CAI_RadialLinkController()
 T CAI_RappelBehavior::BeginRappel()
 T CAI_RappelBehavior::CAI_RappelBehavior()
 T CAI_RappelBehavior::CanSelectSchedule()
 T CAI_RappelBehavior::CleanupOnDeath(CBaseEntity*, bool)
 T CAI_RappelBehavior::CreateZipline()
 T CAI_RappelBehavior::CutZipline()
 T CAI_RappelBehavior::GatherConditions()
 T CAI_RappelBehavior::GetClassScheduleIdSpace()
 T CAI_RappelBehavior::GetDataDescMap()
 T CAI_RappelBehavior::GetName()
 T CAI_RappelBehavior::GetSchedulingErrorName()
 T CAI_RappelBehavior::InitCustomSchedules()
 T CAI_RappelBehavior::KeyValue(char const*, char const*)
 T CAI_RappelBehavior::LoadedSchedules()
 T CAI_RappelBehavior::Precache()
 T CAI_RappelBehavior::RunTask(Task_t const*)
 T CAI_RappelBehavior::SelectSchedule()
 T CAI_RappelBehavior::SetDescentSpeed()
 T CAI_RappelBehavior::StartTask(Task_t const*)
 T CAI_RappelBehavior::~CAI_RappelBehavior()
 T CAI_Relationship::Activate()
 T CAI_Relationship::ApplyRelationship(CBaseEntity*, CBaseEntity*)
 T CAI_Relationship::ApplyRelationshipThink()
 T CAI_Relationship::ChangeRelationships(int, int, CBaseEntity*, CBaseEntity*)
 T CAI_Relationship::GetDataDescMap()
 T CAI_Relationship::InputApplyRelationship(inputdata_t&)
 T CAI_Relationship::InputRevertRelationship(inputdata_t&)
 T CAI_Relationship::InputRevertToDefaultRelationship(inputdata_t&)
 T CAI_Relationship::OnEntityDeleted(CBaseEntity*)
 T CAI_Relationship::OnEntitySpawned(CBaseEntity*)
 T CAI_Relationship::OnRestore()
 T CAI_Relationship::Spawn()
 T CAI_Relationship::UpdateOnRemove()
 T CAI_Relationship::~CAI_Relationship()
 T CAI_SaveRestoreBlockHandler::GetBlockName()
 T CAI_SaveRestoreBlockHandler::PostRestore()
 T CAI_SaveRestoreBlockHandler::ReadRestoreHeaders(IRestore*)
 T CAI_SaveRestoreBlockHandler::Restore(IRestore*, bool)
 T CAI_SaveRestoreBlockHandler::Save(ISave*)
 T CAI_SaveRestoreBlockHandler::WriteSaveHeaders(ISave*)
 T CAI_SchedulesManager::CreateSchedule(char*, int)
 T CAI_SchedulesManager::CreateStringRegistries()
 T CAI_SchedulesManager::DeleteAllSchedules()
 T CAI_SchedulesManager::DestroyStringRegistries()
 T CAI_SchedulesManager::GetMemoryID(char const*)
 T CAI_SchedulesManager::GetScheduleByName(char const*)
 T CAI_SchedulesManager::GetScheduleFromID(int)
 T CAI_SchedulesManager::GetStateID(char const*)
 T CAI_SchedulesManager::LoadAllSchedules()
 T CAI_SchedulesManager::LoadSchedulesFromBuffer(char const*, char const*, CAI_ClassScheduleIdSpace*)
 T CAI_ScriptConditions::Activate()
 T CAI_ScriptConditions::AddNewElement(CBaseEntity*)
 T CAI_ScriptConditions::Enable()
 T CAI_ScriptConditions::EvalActorSeePlayer(CAI_ScriptConditions::EvalArgs_t const&)
 T CAI_ScriptConditions::EvalActorSeeTarget(CAI_ScriptConditions::EvalArgs_t const&)
 T CAI_ScriptConditions::EvalActorTargetProximity(CAI_ScriptConditions::EvalArgs_t const&)
 T CAI_ScriptConditions::EvalPlayerActorLOS(CAI_ScriptConditions::EvalArgs_t const&)
 T CAI_ScriptConditions::EvalPlayerActorLook(CAI_ScriptConditions::EvalArgs_t const&)
 T CAI_ScriptConditions::EvalPlayerActorProximity(CAI_ScriptConditions::EvalArgs_t const&)
 T CAI_ScriptConditions::EvalPlayerBlockingActor(CAI_ScriptConditions::EvalArgs_t const&)
 T CAI_ScriptConditions::EvalPlayerTargetLOS(CAI_ScriptConditions::EvalArgs_t const&)
 T CAI_ScriptConditions::EvalPlayerTargetLook(CAI_ScriptConditions::EvalArgs_t const&)
 T CAI_ScriptConditions::EvalPlayerTargetProximity(CAI_ScriptConditions::EvalArgs_t const&)
 T CAI_ScriptConditions::EvalState(CAI_ScriptConditions::EvalArgs_t const&)
 T CAI_ScriptConditions::EvaluationThink()
 T CAI_ScriptConditions::GetDataDescMap()
 T CAI_ScriptConditions::InputDisable(inputdata_t&)
 T CAI_ScriptConditions::InputEnable(inputdata_t&)
 T CAI_ScriptConditions::IsInFOV(CBaseEntity*, CBaseEntity*, float, bool)
 T CAI_ScriptConditions::OnEntitySpawned(CBaseEntity*)
 T CAI_ScriptConditions::OnRestore()
 T CAI_ScriptConditions::Spawn()
 T CAI_ScriptConditions::UpdateOnRemove()
 T CAI_ScriptConditions::~CAI_ScriptConditions()
 T CAI_ScriptedSchedule::FindScriptEntity(bool)
 T CAI_ScriptedSchedule::GetDataDescMap()
 T CAI_ScriptedSchedule::InputStartSchedule(inputdata_t&)
 T CAI_ScriptedSchedule::InputStopSchedule(inputdata_t&)
 T CAI_ScriptedSchedule::ScriptThink()
 T CAI_ScriptedSchedule::StartSchedule(CAI_BaseNPC*)
 T CAI_ScriptedSchedule::~CAI_ScriptedSchedule()
 T CAI_ScriptedSentence::DelayThink()
 T CAI_ScriptedSentence::FindEntity()
 T CAI_ScriptedSentence::FindThink()
 T CAI_ScriptedSentence::GetDataDescMap()
 T CAI_ScriptedSentence::InputBeginSentence(inputdata_t&)
 T CAI_ScriptedSentence::KeyValue(char const*, char const*)
 T CAI_ScriptedSentence::ObjectCaps()
 T CAI_ScriptedSentence::Spawn()
 T CAI_ScriptedSentence::StartSentence(CAI_BaseNPC*)
 T CAI_ScriptedSentence::~CAI_ScriptedSentence()
 T CAI_ScriptedSequence::Activate()
 T CAI_ScriptedSequence::AllowInterrupt(bool)
 T CAI_ScriptedSequence::Blocked(CBaseEntity*)
 T CAI_ScriptedSequence::CanEnqueueAfter()
 T CAI_ScriptedSequence::CanInterrupt()
 T CAI_ScriptedSequence::CancelScript()
 T CAI_ScriptedSequence::DelayStart(bool)
 T CAI_ScriptedSequence::DrawDebugGeometryOverlays()
 T CAI_ScriptedSequence::DrawDebugTextOverlays()
 T CAI_ScriptedSequence::FindScriptEntity()
 T CAI_ScriptedSequence::FinishedActionSequence(CAI_BaseNPC*)
 T CAI_ScriptedSequence::FireScriptEvent(int)
 T CAI_ScriptedSequence::FixScriptNPCSchedule(CAI_BaseNPC*, int)
 T CAI_ScriptedSequence::GetDataDescMap()
 T CAI_ScriptedSequence::GetSpawnPreIdleSequenceForScript(CBaseEntity*)
 T CAI_ScriptedSequence::InputBeginSequence(inputdata_t&)
 T CAI_ScriptedSequence::InputCancelSequence(inputdata_t&)
 T CAI_ScriptedSequence::InputMoveToPosition(inputdata_t&)
 T CAI_ScriptedSequence::InputScriptPlayerDeath(inputdata_t&)
 T CAI_ScriptedSequence::IsTimeToStart()
 T CAI_ScriptedSequence::IsWaitingForBegin()
 T CAI_ScriptedSequence::ModifyScriptedAutoMovement(Vector*)
 T CAI_ScriptedSequence::ObjectCaps()
 T CAI_ScriptedSequence::OnBeginSequence()
 T CAI_ScriptedSequence::PostIdleDone(CAI_BaseNPC*)
 T CAI_ScriptedSequence::RemoveIgnoredConditions()
 T CAI_ScriptedSequence::ScriptEntityCancel(CBaseEntity*, bool)
 T CAI_ScriptedSequence::ScriptThink()
 T CAI_ScriptedSequence::SequenceDone(CAI_BaseNPC*)
 T CAI_ScriptedSequence::Spawn()
 T CAI_ScriptedSequence::StartScript()
 T CAI_ScriptedSequence::StartSequence(CAI_BaseNPC*, string_t, bool)
 T CAI_ScriptedSequence::StopActionLoop(bool)
 T CAI_ScriptedSequence::SynchNewSequence(CAI_BaseNPC::SCRIPTSTATE, string_t, bool)
 T CAI_ScriptedSequence::SynchronizeSequence(CAI_BaseNPC*)
 T CAI_ScriptedSequence::Touch(CBaseEntity*)
 T CAI_ScriptedSequence::UpdateOnRemove()
 T CAI_ScriptedSequence::~CAI_ScriptedSequence()
 T CAI_SensedObjectsManager::AddEntity(CBaseEntity*)
 T CAI_SensedObjectsManager::Init()
 T CAI_SensedObjectsManager::OnEntityDeleted(CBaseEntity*)
 T CAI_SensedObjectsManager::OnEntitySpawned(CBaseEntity*)
 T CAI_SensedObjectsManager::Term()
 T CAI_SensedObjectsManager::~CAI_SensedObjectsManager()
 T CAI_Senses::CanHearSound(CSound*)
 T CAI_Senses::CanSeeEntity(CBaseEntity*)
 T CAI_Senses::DidSeeEntity(CBaseEntity*) const
 T CAI_Senses::EndGather(int, CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity>, int> >*)
 T CAI_Senses::GetClosestSound(bool, int, bool)
 T CAI_Senses::GetFirstHeardSound(AISoundIter_t__**)
 T CAI_Senses::GetFirstSeenEntity(AISightIter_t__**, seentype_t) const
 T CAI_Senses::GetNextHeardSound(AISoundIter_t__**)
 T CAI_Senses::GetNextSeenEntity(AISightIter_t__**) const
 T CAI_Senses::GetTimeLastUpdate(CBaseEntity*)
 T CAI_Senses::Listen()
 T CAI_Senses::Look(CBaseEntity*)
 T CAI_Senses::Look(int)
 T CAI_Senses::LookForHighPriorityEntities(int)
 T CAI_Senses::LookForNPCs(int)
 T CAI_Senses::LookForObjects(int)
 T CAI_Senses::PerformSensing()
 T CAI_Senses::ShouldSeeEntity(CBaseEntity*)
 T CAI_Senses::WaitingUntilSeen(CBaseEntity*)
 T CAI_Senses::~CAI_Senses()
 T CAI_Sentence<CNPC_Combine>::GetSoundLevel()
 T CAI_Sentence<CNPC_Combine>::GetVolume()
 T CAI_Sentence<CNPC_Combine>::Init(CNPC_Combine*, char const*)
 T CAI_Sentence<CNPC_Combine>::~CAI_Sentence()
 T CAI_Sentence<CNPC_MetroPolice>::GetSoundLevel()
 T CAI_Sentence<CNPC_MetroPolice>::GetVolume()
 T CAI_Sentence<CNPC_MetroPolice>::Init(CNPC_MetroPolice*, char const*)
 T CAI_Sentence<CNPC_MetroPolice>::~CAI_Sentence()
 T CAI_SentenceBase::CAI_SentenceBase()
 T CAI_SentenceBase::ClearQueue()
 T CAI_SentenceBase::MatchesCriteria(SentenceCriteria_t)
 T CAI_SentenceBase::PlaySentence(char const*)
 T CAI_SentenceBase::Speak(char const*, SentencePriority_t, SentenceCriteria_t)
 T CAI_SentenceBase::SpeakQueued(char const*, SentencePriority_t, SentenceCriteria_t)
 T CAI_SentenceBase::UpdateSentenceQueue()
 T CAI_SentenceBase::~CAI_SentenceBase()
 T CAI_ShotRegulator::CAI_ShotRegulator()
 T CAI_ShotRegulator::FireNoEarlierThan(float)
 T CAI_ShotRegulator::GetBurstShotCountRange(int*, int*) const
 T CAI_ShotRegulator::GetBurstShotsRemaining() const
 T CAI_ShotRegulator::GetRestInterval(float*, float*) const
 T CAI_ShotRegulator::IsInRestInterval() const
 T CAI_ShotRegulator::NextShotTime() const
 T CAI_ShotRegulator::OnFiredWeapon()
 T CAI_ShotRegulator::Reset(bool)
 T CAI_ShotRegulator::SetBurstInterval(float, float)
 T CAI_ShotRegulator::SetBurstShotCountRange(int, int)
 T CAI_ShotRegulator::SetBurstShotsRemaining(int)
 T CAI_ShotRegulator::SetParameters(int, int, float, float)
 T CAI_ShotRegulator::SetRestInterval(float, float)
 T CAI_ShotRegulator::ShouldShoot() const
 T CAI_SpeechFilter::Activate()
 T CAI_SpeechFilter::GetDataDescMap()
 T CAI_SpeechFilter::InputDisable(inputdata_t&)
 T CAI_SpeechFilter::InputEnable(inputdata_t&)
 T CAI_SpeechFilter::InputSetIdleModifier(inputdata_t&)
 T CAI_SpeechFilter::OnEntityCreated(CBaseEntity*)
 T CAI_SpeechFilter::OnEntityDeleted(CBaseEntity*)
 T CAI_SpeechFilter::PopulateSubjectList(bool)
 T CAI_SpeechFilter::Spawn()
 T CAI_SpeechFilter::UpdateOnRemove()
 T CAI_SpeechFilter::~CAI_SpeechFilter()
 T CAI_Spotlight::CAI_Spotlight()
 T CAI_Spotlight::ComputeEndpoint(Vector const&, Vector*)
 T CAI_Spotlight::ConstrainToCone(Vector*)
 T CAI_Spotlight::CreateSpotlightEntities()
 T CAI_Spotlight::Init(CAI_BaseNPC*, int, float, float)
 T CAI_Spotlight::SetSpotlightTargetDirection(Vector const&)
 T CAI_Spotlight::SetSpotlightTargetPos(Vector const&)
 T CAI_Spotlight::SpotlightCreate(int, Vector const&)
 T CAI_Spotlight::SpotlightDestroy()
 T CAI_Spotlight::Update()
 T CAI_Spotlight::UpdateSpotlightDirection()
 T CAI_Spotlight::UpdateSpotlightEndpoint()
 T CAI_Spotlight::~CAI_Spotlight()
 T CAI_Squad::AddToSquad(CAI_BaseNPC*)
 T CAI_Squad::BroadcastInteraction(int, void*, CBaseCombatCharacter*)
 T CAI_Squad::CAI_Squad()
 T CAI_Squad::CAI_Squad(string_t)
 T CAI_Squad::FOkToMakeSound(int)
 T CAI_Squad::FindEnemyInfo(CBaseEntity*)
 T CAI_Squad::GetFirstMember(AISquadIter_t__**, bool)
 T CAI_Squad::GetLeader()
 T CAI_Squad::GetNextMember(AISquadIter_t__**, bool)
 T CAI_Squad::GetSquadMemberNearestTo(Vector const&)
 T CAI_Squad::IsLeader(CAI_BaseNPC*)
 T CAI_Squad::IsSilentMember(CAI_BaseNPC const*)
 T CAI_Squad::IsSquadInflictor(CBaseEntity*)
 T CAI_Squad::IsStrategySlotRangeOccupied(CBaseEntity*, int, int)
 T CAI_Squad::JustMadeSound(int, float)
 T CAI_Squad::NumMembers(bool)
 T CAI_Squad::OccupyStrategySlotRange(CBaseEntity*, int, int, int*)
 T CAI_Squad::RemoveFromSquad(CAI_BaseNPC*, bool)
 T CAI_Squad::SetSquadInflictor(CBaseEntity*)
 T CAI_Squad::SquadIsMember(CBaseEntity*)
 T CAI_Squad::SquadMemberInRange(Vector const&, float)
 T CAI_Squad::SquadNewEnemy(CBaseEntity*)
 T CAI_Squad::SquadRemember(int)
 T CAI_Squad::UpdateEnemyMemory(CAI_BaseNPC*, CBaseEntity*, Vector const&)
 T CAI_Squad::VacateStrategySlot(CBaseEntity*, int)
 T CAI_Squad::~CAI_Squad()
 T CAI_SquadManager::CreateSquad(string_t)
 T CAI_SquadManager::DeleteAllSquads()
 T CAI_SquadManager::FindSquad(string_t)
 T CAI_SquadManager::NumSquads()
 T CAI_StandoffBehavior::BeginScheduleSelection()
 T CAI_StandoffBehavior::BuildScheduleTestBits()
 T CAI_StandoffBehavior::CAI_StandoffBehavior(CAI_BaseNPC*)
 T CAI_StandoffBehavior::CanSelectSchedule()
 T CAI_StandoffBehavior::EndScheduleSelection()
 T CAI_StandoffBehavior::GatherConditions()
 T CAI_StandoffBehavior::GetClassScheduleIdSpace()
 T CAI_StandoffBehavior::GetDataDescMap()
 T CAI_StandoffBehavior::GetDirectionOfStandoff(Vector*)
 T CAI_StandoffBehavior::GetName()
 T CAI_StandoffBehavior::GetSchedulingErrorName()
 T CAI_StandoffBehavior::GetStandoffGoalPosition()
 T CAI_StandoffBehavior::InitCustomSchedules()
 T CAI_StandoffBehavior::IsBehindBattleLines(Vector const&)
 T CAI_StandoffBehavior::IsCrouching()
 T CAI_StandoffBehavior::IsValidCover(Vector const&, CAI_Hint const*)
 T CAI_StandoffBehavior::IsValidShootPosition(Vector const&, CAI_Node*, CAI_Hint const*)
 T CAI_StandoffBehavior::LoadedSchedules()
 T CAI_StandoffBehavior::NPC_TranslateActivity(Activity)
 T CAI_StandoffBehavior::OnChangeHintGroup(string_t, string_t)
 T CAI_StandoffBehavior::OnRestore()
 T CAI_StandoffBehavior::OnUpdateShotRegulator()
 T CAI_StandoffBehavior::PrescheduleThink()
 T CAI_StandoffBehavior::SelectSchedule()
 T CAI_StandoffBehavior::SelectScheduleAttack()
 T CAI_StandoffBehavior::SelectScheduleCheckCover()
 T CAI_StandoffBehavior::SelectScheduleEstablishAim()
 T CAI_StandoffBehavior::SelectScheduleUpdateWeapon()
 T CAI_StandoffBehavior::SetActive(bool)
 T CAI_StandoffBehavior::SetReuseCurrentCover()
 T CAI_StandoffBehavior::SetStandoffGoalPosition(Vector const&)
 T CAI_StandoffBehavior::Spawn()
 T CAI_StandoffBehavior::StartTask(Task_t const*)
 T CAI_StandoffBehavior::TranslateSchedule(int)
 T CAI_StandoffBehavior::UnlockHintNode()
 T CAI_StandoffBehavior::UpdateBattleLines()
 T CAI_StandoffBehavior::UpdateTranslateActivityMap()
 T CAI_StandoffBehavior::~CAI_StandoffBehavior()
 T CAI_StandoffGoal::DisableGoal(CAI_BaseNPC*)
 T CAI_StandoffGoal::EnableGoal(CAI_BaseNPC*)
 T CAI_StandoffGoal::GetDataDescMap()
 T CAI_StandoffGoal::InputActivate(inputdata_t&)
 T CAI_StandoffGoal::InputDeactivate(inputdata_t&)
 T CAI_StandoffGoal::InputSetAggressiveness(inputdata_t&)
 T CAI_StandoffGoal::SetBehaviorParams(CAI_StandoffBehavior*)
 T CAI_StandoffGoal::~CAI_StandoffGoal()
 T CAI_SystemHook::LevelInitPostEntity()
 T CAI_SystemHook::LevelInitPreEntity()
 T CAI_SystemHook::LevelShutdownPostEntity()
 T CAI_SystemHook::LevelShutdownPreEntity()
 T CAI_SystemHook::~CAI_SystemHook()
 T CAI_TacticalServices::FindBackAwayNode(Vector const&)
 T CAI_TacticalServices::FindBackAwayPos(Vector const&, Vector*)
 T CAI_TacticalServices::FindCoverNode(Vector const&, Vector const&, Vector const&, float, float)
 T CAI_TacticalServices::FindCoverPos(Vector const&, Vector const&, Vector const&, float, float, Vector*)
 T CAI_TacticalServices::FindCoverPos(Vector const&, Vector const&, float, float, Vector*)
 T CAI_TacticalServices::FindLateralCover(Vector const&, Vector const&, float, float, int, Vector*)
 T CAI_TacticalServices::FindLateralCover(Vector const&, float, Vector*)
 T CAI_TacticalServices::FindLateralLos(Vector const&, Vector*)
 T CAI_TacticalServices::FindLos(Vector const&, Vector const&, float, float, float, FlankType_t, Vector const&, float, Vector*)
 T CAI_TacticalServices::FindLos(Vector const&, Vector const&, float, float, float, Vector*)
 T CAI_TacticalServices::FindLosNode(Vector const&, Vector const&, float, float, float, FlankType_t, Vector const&, float)
 T CAI_TacticalServices::Init(CAI_Network*)
 T CAI_TacticalServices::TestLateralCover(Vector const&, Vector const&, float)
 T CAI_TacticalServices::TestLateralLos(Vector const&, Vector const&)
 T CAI_TacticalServices::~CAI_TacticalServices()
 T CAI_TestHull::GetTestHull()
 T CAI_TestHull::IsJumpLegal(Vector const&, Vector const&, Vector const&) const
 T CAI_TestHull::ObjectCaps()
 T CAI_TestHull::Precache()
 T CAI_TestHull::ReturnTestHull()
 T CAI_TestHull::Spawn()
 T CAI_TestHull::~CAI_TestHull()
 T CAI_TrackPather::BestPointOnPath(CPathTrack*, Vector const&, float, bool, bool)
 T CAI_TrackPather::ClosestPointToCurrentPath(Vector*) const
 T CAI_TrackPather::ComputeDistanceAlongPathToPoint(CPathTrack*, CPathTrack*, Vector const&, bool)
 T CAI_TrackPather::ComputeDistanceToLeadingPosition()
 T CAI_TrackPather::ComputeDistanceToTargetPosition()
 T CAI_TrackPather::ComputeLeadingPointAlongPath(Vector const&, CPathTrack*, float, Vector*)
 T CAI_TrackPather::ComputeNormalizedDestVelocity(Vector*) const
 T CAI_TrackPather::ComputePathDirection(CPathTrack*, Vector*)
 T CAI_TrackPather::ComputePathDistance(CPathTrack*, CPathTrack*, bool) const
 T CAI_TrackPather::ComputePointAlongCurrentPath(float, float, Vector*)
 T CAI_TrackPather::CurrentPathDirection(Vector*)
 T CAI_TrackPather::EnableLeading(bool)
 T CAI_TrackPather::FindClosestPointOnPath(CPathTrack*, Vector const&, Vector*, Vector*, float*)
 T CAI_TrackPather::FindTrackBlocker(Vector const&, Vector const&)
 T CAI_TrackPather::FlyToPathTrack(string_t)
 T CAI_TrackPather::GetLeadingDistance() const
 T CAI_TrackPather::HasLOSToTarget(CPathTrack*)
 T CAI_TrackPather::HasReachedTarget()
 T CAI_TrackPather::InitPathingData(float, float, float)
 T CAI_TrackPather::InputChooseFarthestPathPoint(inputdata_t&)
 T CAI_TrackPather::InputChooseNearestPathPoint(inputdata_t&)
 T CAI_TrackPather::InputFlyToPathTrack(inputdata_t&)
 T CAI_TrackPather::InputSetTrack(inputdata_t&)
 T CAI_TrackPather::InputStartBreakableMovement(inputdata_t&)
 T CAI_TrackPather::InputStartLeading(inputdata_t&)
 T CAI_TrackPather::InputStartPatrol(inputdata_t&)
 T CAI_TrackPather::InputStartPatrolBreakable(inputdata_t&)
 T CAI_TrackPather::InputStopBreakableMovement(inputdata_t&)
 T CAI_TrackPather::InputStopLeading(inputdata_t&)
 T CAI_TrackPather::InputStopPatrol(inputdata_t&)
 T CAI_TrackPather::IsOnSameTrack(CPathTrack*, CPathTrack*) const
 T CAI_TrackPather::MaxDistanceFromCurrentPath() const
 T CAI_TrackPather::MoveToClosestTrackPoint(CPathTrack*)
 T CAI_TrackPather::MoveToTrackPoint(CPathTrack*)
 T CAI_TrackPather::OnRestore()
 T CAI_TrackPather::OnSave(IEntitySaveUtils*)
 T CAI_TrackPather::SelectNewDestTarget()
 T CAI_TrackPather::SetFarthestPathDist(float)
 T CAI_TrackPather::SetLeadingDistance(float)
 T CAI_TrackPather::SetTrack(string_t)
 T CAI_TrackPather::SetupNewCurrentTarget(CPathTrack*)
 T CAI_TrackPather::ShouldUseFixedPatrolLogic()
 T CAI_TrackPather::TargetSpeedAcrossPath() const
 T CAI_TrackPather::TargetSpeedAlongPath() const
 T CAI_TrackPather::Teleported()
 T CAI_TrackPather::UpdateCurrentTarget()
 T CAI_TrackPather::UpdateCurrentTargetLeading()
 T CAI_TrackPather::UpdateTargetPosition()
 T CAI_TrackPather::UpdateTargetPositionLeading()
 T CAI_TrackPather::UpdateTrackNavigation()
 T CAI_TrackPather::VisualizeDebugInfo(Vector const&, Vector const&)
 T CAI_WaypointList::GetLast()
 T CAI_WaypointList::PrependWaypoint(Vector const&, Navigation_t, unsigned int, float)
 T CAI_WaypointList::PrependWaypoints(AI_Waypoint_t*)
 T CAI_WaypointList::RemoveAll()
 T CAI_WaypointList::Set(AI_Waypoint_t*)
 T CAPCController::ActivateRocketGuidance()
 T CAPCController::AimBarrelAt(Vector const&)
 T CAPCController::DeactivateRocketGuidance()
 T CAPCController::GetDataDescMap()
 T CAPCController::InputActivate(inputdata_t&)
 T CAPCController::InputDeactivate(inputdata_t&)
 T CAPCController::KeyValue(char const*, char const*)
 T CAPCController::ObjectCaps()
 T CAPCController::Precache()
 T CAPCController::ShouldSavePhysics()
 T CAPCController::Spawn()
 T CAPCController::StartRotSound()
 T CAPCController::StopRotSound()
 T CAPCController::Think()
 T CAPCController::TrackTarget()
 T CAPCController::~CAPCController()
 T CAPCFourWheelServerVehicle::NPC_AimPrimaryWeapon(Vector)
 T CAPCFourWheelServerVehicle::NPC_AimSecondaryWeapon(Vector)
 T CAPCFourWheelServerVehicle::NPC_HasPrimaryWeapon()
 T CAPCFourWheelServerVehicle::NPC_HasSecondaryWeapon()
 T CAPCFourWheelServerVehicle::Weapon_PrimaryCanFireAt()
 T CAPCFourWheelServerVehicle::Weapon_PrimaryRanges(float*, float*)
 T CAPCFourWheelServerVehicle::Weapon_SecondaryCanFireAt()
 T CAPCFourWheelServerVehicle::Weapon_SecondaryRanges(float*, float*)
 T CAPCFourWheelServerVehicle::~CAPCFourWheelServerVehicle()
 T CAPCMissile::APCMissileTouch(CBaseEntity*)
 T CAPCMissile::AimAtSpecificTarget(CBaseEntity*)
 T CAPCMissile::AugerDelay(float)
 T CAPCMissile::AugerHealth()
 T CAPCMissile::AugerStartThink()
 T CAPCMissile::BeginSeekThink()
 T CAPCMissile::Classify()
 T CAPCMissile::ComputeActualDotPosition(CLaserDot*, Vector*, float*)
 T CAPCMissile::ComputeLeadingPosition(Vector const&, CBaseEntity*, Vector*)
 T CAPCMissile::Create(Vector const&, QAngle const&, Vector const&, CBaseEntity*)
 T CAPCMissile::DoExplosion()
 T CAPCMissile::ExplodeDelay(float)
 T CAPCMissile::ExplodeThink()
 T CAPCMissile::GetDataDescMap()
 T CAPCMissile::IgniteDelay()
 T CAPCMissile::SetGuidanceHint(char const*)
 T CAPCMissile::~CAPCMissile()
 T CAchievementHLXKillEliteSoldierWithOwnEnergyBall::Event_EntityKilled(CBaseEntity*, CBaseEntity*, CBaseEntity*, IGameEvent*)
 T CAchievementHLXKillEliteSoldierWithOwnEnergyBall::Init()
 T CAchievementHLXKillEliteSoldierWithOwnEnergyBall::~CAchievementHLXKillEliteSoldierWithOwnEnergyBall()
 T CAchievementHLXKillSoldierWithOwnGrenade::Event_EntityKilled(CBaseEntity*, CBaseEntity*, CBaseEntity*, IGameEvent*)
 T CAchievementHLXKillSoldierWithOwnGrenade::Init()
 T CAchievementHLXKillSoldierWithOwnGrenade::~CAchievementHLXKillSoldierWithOwnGrenade()
 T CAchievementHLXKillWithHopper::Event_EntityKilled(CBaseEntity*, CBaseEntity*, CBaseEntity*, IGameEvent*)
 T CAchievementHLXKillWithHopper::Init()
 T CAchievementHLXKillWithHopper::~CAchievementHLXKillWithHopper()
 T CAchievementHLXKillWithManhack::Event_EntityKilled(CBaseEntity*, CBaseEntity*, CBaseEntity*, IGameEvent*)
 T CAchievementHLXKillWithManhack::Init()
 T CAchievementHLXKillWithManhack::~CAchievementHLXKillWithManhack()
 T CAchievementHLXKillWithOneEnergyBall::Event_EntityKilled(CBaseEntity*, CBaseEntity*, CBaseEntity*, IGameEvent*)
 T CAchievementHLXKillWithOneEnergyBall::Init()
 T CAchievementHLXKillWithOneEnergyBall::~CAchievementHLXKillWithOneEnergyBall()
 T CAchievementHLXKillWithPhysicsObjects::Event_EntityKilled(CBaseEntity*, CBaseEntity*, CBaseEntity*, IGameEvent*)
 T CAchievementHLXKillWithPhysicsObjects::Init()
 T CAchievementHLXKillWithPhysicsObjects::~CAchievementHLXKillWithPhysicsObjects()
 T CAchievementMgr::CheckAchievementsEnabled()
 T CAchievementMgr::PostRestoreSavedGame()
 T CAchievementMgr::PreRestoreSavedGame()
 T CAchievementSaveRestoreBlockHandler::GetBlockName()
 T CAchievementSaveRestoreBlockHandler::ReadRestoreHeaders(IRestore*)
 T CAchievementSaveRestoreBlockHandler::Restore(IRestore*, bool)
 T CAchievementSaveRestoreBlockHandler::Save(ISave*)
 T CAchievementSaveRestoreBlockHandler::WriteSaveHeaders(ISave*)
 T CAchievementSaveThread::Run()
 T CAchievementSaveThread::~CAchievementSaveThread()
 T CActBusyAnimData::FindBusyAnim(Activity, char const*)
 T CActBusyAnimData::LevelInitPostEntity()
 T CActBusyAnimData::LevelShutdownPostEntity()
 T CActBusyAnimData::ParseActBusyFromKV(busyanim_t*, KeyValues*)
 T CActBusyAnimData::ParseAnimDataFile()
 T CActBusyAnimData::~CActBusyAnimData()
 T CActivityDataOps::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CActivityDataOps::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CActivityDataOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CActivityDataOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CAimTargetManager::ForceRepopulateList()
 T CAimTargetManager::LevelInitPreEntity()
 T CAimTargetManager::OnEntityCreated(CBaseEntity*)
 T CAimTargetManager::OnEntityDeleted(CBaseEntity*)
 T CAimTargetManager::~CAimTargetManager()
 T CAlyxEmpEffect::Activate()
 T CAlyxEmpEffect::AutomaticThink()
 T CAlyxEmpEffect::GetDataDescMap()
 T CAlyxEmpEffect::GetServerClass()
 T CAlyxEmpEffect::InputSetTargetEnt(inputdata_t&)
 T CAlyxEmpEffect::InputStartCharge(inputdata_t&)
 T CAlyxEmpEffect::InputStartDischarge(inputdata_t&)
 T CAlyxEmpEffect::InputStop(inputdata_t&)
 T CAlyxEmpEffect::Precache()
 T CAlyxEmpEffect::Spawn()
 T CAlyxEmpEffect::StartCharge(float)
 T CAlyxEmpEffect::StartDischarge()
 T CAlyxEmpEffect::Stop(float)
 T CAlyxEmpEffect::YouForgotToImplementOrDeclareServerClass()
 T CAlyxEmpEffect::~CAlyxEmpEffect()
 T CAmbientGeneric::Activate()
 T CAmbientGeneric::ComputeMaxAudibleDistance()
 T CAmbientGeneric::GetDataDescMap()
 T CAmbientGeneric::InitModulationParms()
 T CAmbientGeneric::InputFadeIn(inputdata_t&)
 T CAmbientGeneric::InputFadeOut(inputdata_t&)
 T CAmbientGeneric::InputPitch(inputdata_t&)
 T CAmbientGeneric::InputPlaySound(inputdata_t&)
 T CAmbientGeneric::InputStopSound(inputdata_t&)
 T CAmbientGeneric::InputToggleSound(inputdata_t&)
 T CAmbientGeneric::InputVolume(inputdata_t&)
 T CAmbientGeneric::KeyValue(char const*, char const*)
 T CAmbientGeneric::Precache()
 T CAmbientGeneric::RampThink()
 T CAmbientGeneric::SendSound(SoundFlags_t)
 T CAmbientGeneric::SetTransmit(CCheckTransmitInfo*, bool)
 T CAmbientGeneric::Spawn()
 T CAmbientGeneric::ToggleSound()
 T CAmbientGeneric::UpdateOnRemove()
 T CAmbientGeneric::~CAmbientGeneric()
 T CAmmoDef::AddAmmoType(char const*, int, int, int, int, int, float, int, int, int)
 T CAmmoDef::CAmmoDef()
 T CAmmoDef::DamageForce(int)
 T CAmmoDef::DamageType(int)
 T CAmmoDef::Flags(int)
 T CAmmoDef::GetAmmoOfIndex(int)
 T CAmmoDef::Index(char const*)
 T CAmmoDef::MaxCarry(int)
 T CAmmoDef::MaxSplashSize(int)
 T CAmmoDef::MinSplashSize(int)
 T CAmmoDef::NPCDamage(int)
 T CAmmoDef::PlrDamage(int)
 T CAmmoDef::~CAmmoDef()
 T CAnchorList::AddToList(CBaseEntity*, float)
 T CAnchorList::LevelShutdownPostEntity()
 T CAnchorList::~CAnchorList()
 T CAngryZombieCounter::LevelInitPreEntity()
 T CAngryZombieCounter::~CAngryZombieCounter()
 T CAnimationLayer::DispatchAnimEvents(CBaseAnimating*, CBaseAnimating*)
 T CAnimationLayer::Init(CBaseAnimatingOverlay*)
 T CAnimationLayer::StudioFrameAdvance(float, CBaseAnimating*)
 T CAntlionMakerManager::BroadcastFightGoal(Vector const&)
 T CAntlionMakerManager::BroadcastFollowGoal(CBaseEntity*)
 T CAntlionMakerManager::GatherMakers()
 T CAntlionMakerManager::LevelInitPostEntity()
 T CAntlionMakerManager::~CAntlionMakerManager()
 T CAntlionRepellant::GetDataDescMap()
 T CAntlionRepellant::InputDisable(inputdata_t&)
 T CAntlionRepellant::InputEnable(inputdata_t&)
 T CAntlionRepellant::IsPositionRepellantFree(Vector)
 T CAntlionRepellant::OnRestore()
 T CAntlionRepellant::Spawn()
 T CAntlionRepellant::~CAntlionRepellant()
 T CAntlionTemplateMaker::Activate()
 T CAntlionTemplateMaker::ActivateAllSpores()
 T CAntlionTemplateMaker::ActivateSpore(char const*, Vector)
 T CAntlionTemplateMaker::AllHintsFromClusterBlocked(CAI_Hint*, bool&)
 T CAntlionTemplateMaker::BlockedCheckFunc()
 T CAntlionTemplateMaker::ChildPostSpawn(CAI_BaseNPC*)
 T CAntlionTemplateMaker::ChildPreSpawn(CAI_BaseNPC*)
 T CAntlionTemplateMaker::CreateProxyTarget(Vector const&)
 T CAntlionTemplateMaker::DeathNotice(CBaseEntity*)
 T CAntlionTemplateMaker::Disable()
 T CAntlionTemplateMaker::DisableAllSpores()
 T CAntlionTemplateMaker::DoBlockedEffects(CBaseEntity*, Vector)
 T CAntlionTemplateMaker::DrawDebugGeometryOverlays()
 T CAntlionTemplateMaker::DrawDebugTextOverlays()
 T CAntlionTemplateMaker::Enable()
 T CAntlionTemplateMaker::FindHintSpawnPosition(Vector const&, float, string_t, CAI_Hint**, bool)
 T CAntlionTemplateMaker::FindNodesCloseToPlayer()
 T CAntlionTemplateMaker::FindPositionOnFoot(Vector&, float, CBaseEntity*)
 T CAntlionTemplateMaker::FindPositionOnVehicle(Vector&, float, CBaseEntity*)
 T CAntlionTemplateMaker::FixupOrphans()
 T CAntlionTemplateMaker::GetDataDescMap()
 T CAntlionTemplateMaker::InputAddToPool(inputdata_t&)
 T CAntlionTemplateMaker::InputChangeDestinationGroup(inputdata_t&)
 T CAntlionTemplateMaker::InputClearFightTarget(inputdata_t&)
 T CAntlionTemplateMaker::InputClearFollowTarget(inputdata_t&)
 T CAntlionTemplateMaker::InputSetFightTarget(inputdata_t&)
 T CAntlionTemplateMaker::InputSetFollowTarget(inputdata_t&)
 T CAntlionTemplateMaker::InputSetMaxPool(inputdata_t&)
 T CAntlionTemplateMaker::InputSetPoolRegenAmount(inputdata_t&)
 T CAntlionTemplateMaker::InputSetPoolRegenTime(inputdata_t&)
 T CAntlionTemplateMaker::InputSetSpawnRadius(inputdata_t&)
 T CAntlionTemplateMaker::IsDepleted()
 T CAntlionTemplateMaker::MakeNPC()
 T CAntlionTemplateMaker::ObjectCaps()
 T CAntlionTemplateMaker::PoolRegenThink()
 T CAntlionTemplateMaker::PrecacheTemplateEntity(CBaseEntity*)
 T CAntlionTemplateMaker::RemoveChild(CNPC_Antlion*)
 T CAntlionTemplateMaker::SetChildMoveState(AntlionMoveState_e)
 T CAntlionTemplateMaker::SetFightTarget(string_t, CBaseEntity*, CBaseEntity*)
 T CAntlionTemplateMaker::UpdateChildren()
 T CAntlionTemplateMaker::ValidateSpawnPosition(Vector&, CBaseEntity*)
 T CAntlionTemplateMaker::~CAntlionTemplateMaker()
 T CAreaPortal::GetDataDescMap()
 T CAreaPortal::InputClose(inputdata_t&)
 T CAreaPortal::InputOpen(inputdata_t&)
 T CAreaPortal::InputToggle(inputdata_t&)
 T CAreaPortal::KeyValue(char const*, char const*)
 T CAreaPortal::Precache()
 T CAreaPortal::Spawn()
 T CAreaPortal::UpdateTransmitState()
 T CAreaPortal::UpdateVisibility(Vector const&, float, bool&)
 T CAreaPortal::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CAreaPortal::~CAreaPortal()
 T CAssaultPoint::GetDataDescMap()
 T CAssaultPoint::InputSetAllowDiversion(inputdata_t&)
 T CAssaultPoint::InputSetClearOnContact(inputdata_t&)
 T CAssaultPoint::InputSetForceClear(inputdata_t&)
 T CAssaultPoint::~CAssaultPoint()
 T CAutoGameSystem::CAutoGameSystem(char const*)
 T CAutoGameSystem::Name()
 T CAutoGameSystem::~CAutoGameSystem()
 T CAutoGameSystemPerFrame::CAutoGameSystemPerFrame(char const*)
 T CAutoGameSystemPerFrame::Name()
 T CAutoGameSystemPerFrame::~CAutoGameSystemPerFrame()
 T CAvoidBox::Activate()
 T CAvoidBox::ComputeAvoidanceForces(CBaseEntity*, float, float, Vector*)
 T CAvoidBox::GetDataDescMap()
 T CAvoidBox::Spawn()
 T CAvoidBox::UpdateOnRemove()
 T CAvoidBox::~CAvoidBox()
 T CAvoidSphere::Activate()
 T CAvoidSphere::ComputeAvoidanceForces(CBaseEntity*, float, float, Vector*)
 T CAvoidSphere::GetDataDescMap()
 T CAvoidSphere::UpdateOnRemove()
 T CAvoidSphere::~CAvoidSphere()
 T CBarnacleTongueFilter::ShouldHitEntity(IHandleEntity*, int)
 T CBarnacleTongueTip::CreateSpring(CBaseAnimating*)
 T CBarnacleTongueTip::CreateTongueTip(CNPC_Barnacle*, CBaseAnimating*, Vector const&, QAngle const&)
 T CBarnacleTongueTip::GetDataDescMap()
 T CBarnacleTongueTip::Precache()
 T CBarnacleTongueTip::Spawn()
 T CBarnacleTongueTip::UpdateOnRemove()
 T CBarnacleTongueTip::UpdateTransmitState()
 T CBarnacleTongueTip::VPhysicsUpdate(IPhysicsObject*)
 T CBarnacleTongueTip::~CBarnacleTongueTip()
 T CBaseAchievement::AlwaysEnabled()
 T CBaseAchievement::AlwaysListen()
 T CBaseAchievement::ApplySettings(KeyValues*)
 T CBaseAchievement::CBaseAchievement()
 T CBaseAchievement::CalcProgressMsgIncrement()
 T CBaseAchievement::Event_EntityKilled(CBaseEntity*, CBaseEntity*, CBaseEntity*, IGameEvent*)
 T CBaseAchievement::FireGameEvent(IGameEvent*)
 T CBaseAchievement::FireGameEvent_Internal(IGameEvent*)
 T CBaseAchievement::GetAchievementID()
 T CBaseAchievement::GetCount()
 T CBaseAchievement::GetDataDescMap()
 T CBaseAchievement::GetFlags()
 T CBaseAchievement::GetGoal()
 T CBaseAchievement::GetName()
 T CBaseAchievement::GetPointValue()
 T CBaseAchievement::GetSettings(KeyValues*)
 T CBaseAchievement::HandleProgressUpdate()
 T CBaseAchievement::IncrementCount(int)
 T CBaseAchievement::Init()
 T CBaseAchievement::IsAchieved()
 T CBaseAchievement::IsActive()
 T CBaseAchievement::IsMetaAchievement()
 T CBaseAchievement::ListenForEvents()
 T CBaseAchievement::LocalPlayerCanEarn()
 T CBaseAchievement::OnAchieved()
 T CBaseAchievement::OnMapEvent(char const*)
 T CBaseAchievement::OnPlayerStatsUpdate()
 T CBaseAchievement::OnSteamUserStatsStored()
 T CBaseAchievement::PostRestoreSavedGame()
 T CBaseAchievement::PreRestoreSavedGame()
 T CBaseAchievement::PrintAdditionalStatus()
 T CBaseAchievement::SetAttackerFilter(char const*)
 T CBaseAchievement::SetFlags(int)
 T CBaseAchievement::SetGameDirFilter(char const*)
 T CBaseAchievement::SetInflictorFilter(char const*)
 T CBaseAchievement::SetShowOnHUD(bool)
 T CBaseAchievement::SetVictimFilter(char const*)
 T CBaseAchievement::ShouldHideUntilAchieved()
 T CBaseAchievement::ShouldSaveWithGame()
 T CBaseAchievement::ShouldShowOnHUD()
 T CBaseAchievement::ShouldShowProgressNotification()
 T CBaseAchievement::Think()
 T CBaseAchievement::UpdateAchievement(int)
 T CBaseAchievement::~CBaseAchievement()
 T CBaseAnimating::Activate()
 T CBaseAnimating::BecomeRagdollOnClient(Vector const&)
 T CBaseAnimating::BuildMatricesWithBoneMerge(CStudioHdr const*, QAngle const&, Vector const&, Vector const*, Quaternion const*, matrix3x4_t*, CBaseAnimating*, CBoneCache*)
 T CBaseAnimating::CBaseAnimating()
 T CBaseAnimating::CalculateIKLocks(float)
 T CBaseAnimating::CanBecomeRagdoll()
 T CBaseAnimating::ClampRagdollForce(Vector const&, Vector*)
 T CBaseAnimating::ComputeHitboxSurroundingBox(Vector*, Vector*)
 T CBaseAnimating::CopyAnimationDataFrom(CBaseAnimating*)
 T CBaseAnimating::DispatchAnimEvents(CBaseAnimating*)
 T CBaseAnimating::Dissolve(char const*, float, bool, int, Vector, int)
 T CBaseAnimating::DoMuzzleFlash()
 T CBaseAnimating::DrawDebugTextOverlays()
 T CBaseAnimating::DrawRawSkeleton(matrix3x4_t*, int, bool, float, bool)
 T CBaseAnimating::DrawServerHitboxes(float, bool)
 T CBaseAnimating::EdgeLimitPoseParameter(int, float, float)
 T CBaseAnimating::EnableServerIK()
 T CBaseAnimating::Extinguish()
 T CBaseAnimating::ExtractBbox(int, Vector&, Vector&)
 T CBaseAnimating::FindTransitionSequence(int, int, int*)
 T CBaseAnimating::GetAnimTimeInterval() const
 T CBaseAnimating::GetAttachment(char const*, Vector&, QAngle&)
 T CBaseAnimating::GetAttachment(char const*, Vector&, Vector*, Vector*, Vector*)
 T CBaseAnimating::GetAttachment(int, Vector&, QAngle&)
 T CBaseAnimating::GetAttachment(int, Vector&, Vector*, Vector*, Vector*)
 T CBaseAnimating::GetAttachment(int, matrix3x4_t&)
 T CBaseAnimating::GetAttachmentBone(int)
 T CBaseAnimating::GetAttachmentLocal(int, Vector&, QAngle&)
 T CBaseAnimating::GetBaseAnimating()
 T CBaseAnimating::GetBodygroup(int)
 T CBaseAnimating::GetBoneCache()
 T CBaseAnimating::GetBoneController(int)
 T CBaseAnimating::GetBonePosition(int, Vector&, QAngle&)
 T CBaseAnimating::GetBoneTransform(int, matrix3x4_t&)
 T CBaseAnimating::GetDataDescMap()
 T CBaseAnimating::GetEntryVelocity(int)
 T CBaseAnimating::GetFlexControllerName(LocalFlexController_t)
 T CBaseAnimating::GetFlexControllerType(LocalFlexController_t)
 T CBaseAnimating::GetGroundSpeedVelocity()
 T CBaseAnimating::GetHitboxBone(int)
 T CBaseAnimating::GetHitboxSet()
 T CBaseAnimating::GetHitboxesFrontside(int*, int, Vector const&, float)
 T CBaseAnimating::GetIdealAccel() const
 T CBaseAnimating::GetIdealSpeed() const
 T CBaseAnimating::GetInputDispatchEffectPosition(char const*, Vector&, QAngle&)
 T CBaseAnimating::GetInstantaneousVelocity(float)
 T CBaseAnimating::GetIntervalMovement(float, bool&, Vector&, QAngle&)
 T CBaseAnimating::GetLastVisibleCycle(CStudioHdr*, int)
 T CBaseAnimating::GetMovementFrame(float)
 T CBaseAnimating::GetNumFlexControllers()
 T CBaseAnimating::GetPhysicsBone(int)
 T CBaseAnimating::GetPoseParameter(char const*)
 T CBaseAnimating::GetPoseParameter(int)
 T CBaseAnimating::GetPoseParameterRange(int, float&, float&)
 T CBaseAnimating::GetSequenceActivity(int)
 T CBaseAnimating::GetSequenceActivityName(int)
 T CBaseAnimating::GetSequenceCycleRate(CStudioHdr*, int)
 T CBaseAnimating::GetSequenceGroundSpeed(CStudioHdr*, int)
 T CBaseAnimating::GetSequenceKeyValues(int)
 T CBaseAnimating::GetSequenceLinearMotion(int, Vector*)
 T CBaseAnimating::GetSequenceMoveYaw(int)
 T CBaseAnimating::GetSequenceMovement(int, float, float, Vector&, QAngle&)
 T CBaseAnimating::GetSequenceName(int)
 T CBaseAnimating::GetServerClass()
 T CBaseAnimating::GetSkeleton(CStudioHdr*, Vector*, Quaternion*, int)
 T CBaseAnimating::GetStepAngles() const
 T CBaseAnimating::GetStepOrigin() const
 T CBaseAnimating::GetVelocity(Vector*, Vector*)
 T CBaseAnimating::GotoSequence(int, float, float, int, int&, float&, int&)
 T CBaseAnimating::HandleAnimEvent(animevent_t*)
 T CBaseAnimating::HasAnimEvent(int, int)
 T CBaseAnimating::HasMovement(int)
 T CBaseAnimating::HasPoseParameter(int, int)
 T CBaseAnimating::Ignite(float, bool, float, bool)
 T CBaseAnimating::IgniteHitboxFireScale(float)
 T CBaseAnimating::IgniteLifetime(float)
 T CBaseAnimating::IgniteNumHitboxFires(int)
 T CBaseAnimating::InitBoneControllers()
 T CBaseAnimating::InputBecomeRagdoll(inputdata_t&)
 T CBaseAnimating::InputIgnite(inputdata_t&)
 T CBaseAnimating::InputIgniteHitboxFireScale(inputdata_t&)
 T CBaseAnimating::InputIgniteLifetime(inputdata_t&)
 T CBaseAnimating::InputIgniteNumHitboxFires(inputdata_t&)
 T CBaseAnimating::InputSetLightingOrigin(inputdata_t&)
 T CBaseAnimating::InputSetLightingOriginRelative(inputdata_t&)
 T CBaseAnimating::InputSetModelScale(inputdata_t&)
 T CBaseAnimating::InvalidateBoneCache()
 T CBaseAnimating::IsActivityFinished()
 T CBaseAnimating::IsRagdoll()
 T CBaseAnimating::IsValidSequence(int)
 T CBaseAnimating::LockStudioHdr()
 T CBaseAnimating::LookupActivity(char const*)
 T CBaseAnimating::LookupAttachment(char const*)
 T CBaseAnimating::LookupBone(char const*)
 T CBaseAnimating::LookupPoseParameter(CStudioHdr*, char const*)
 T CBaseAnimating::LookupSequence(char const*)
 T CBaseAnimating::ModifyOrAppendCriteria(AI_CriteriaSet&)
 T CBaseAnimating::OnNewModel()
 T CBaseAnimating::OnRestore()
 T CBaseAnimating::PopulatePoseParameters()
 T CBaseAnimating::Precache()
 T CBaseAnimating::RefreshCollisionBounds()
 T CBaseAnimating::ResetActivityIndexes()
 T CBaseAnimating::ResetClientsideFrame()
 T CBaseAnimating::ResetEventIndexes()
 T CBaseAnimating::ResetSequence(int)
 T CBaseAnimating::ResetSequenceInfo()
 T CBaseAnimating::Restore(IRestore&)
 T CBaseAnimating::Scorch(int, int)
 T CBaseAnimating::SelectHeaviestSequence(Activity)
 T CBaseAnimating::SelectWeightedSequence(Activity)
 T CBaseAnimating::SelectWeightedSequence(Activity, int)
 T CBaseAnimating::SequenceDuration(CStudioHdr*, int)
 T CBaseAnimating::SetBodygroup(int, int)
 T CBaseAnimating::SetBoneController(int, float)
 T CBaseAnimating::SetFadeDistance(float, float)
 T CBaseAnimating::SetIKGroundContactInfo(float, float)
 T CBaseAnimating::SetLightingOrigin(CBaseEntity*)
 T CBaseAnimating::SetLightingOrigin(string_t)
 T CBaseAnimating::SetLightingOriginRelative(CBaseEntity*)
 T CBaseAnimating::SetLightingOriginRelative(string_t)
 T CBaseAnimating::SetModel(char const*)
 T CBaseAnimating::SetModelScale(float, float)
 T CBaseAnimating::SetPoseParameter(CStudioHdr*, char const*, float)
 T CBaseAnimating::SetPoseParameter(CStudioHdr*, int, float)
 T CBaseAnimating::SetSequence(int)
 T CBaseAnimating::SetSequenceBox()
 T CBaseAnimating::SetTransmit(CCheckTransmitInfo*, bool)
 T CBaseAnimating::SetupBones(matrix3x4_t*, int)
 T CBaseAnimating::Spawn()
 T CBaseAnimating::StudioFrameAdvance()
 T CBaseAnimating::StudioFrameAdvanceInternal(CStudioHdr*, float)
 T CBaseAnimating::StudioFrameAdvanceManual(float)
 T CBaseAnimating::Teleport(Vector const*, QAngle const*, Vector const*)
 T CBaseAnimating::TestCollision(Ray_t const&, unsigned int, CGameTrace&)
 T CBaseAnimating::TestHitboxes(Ray_t const&, unsigned int, CGameTrace&)
 T CBaseAnimating::TransferDissolveFrom(CBaseAnimating*)
 T CBaseAnimating::UnlockStudioHdr()
 T CBaseAnimating::UpdateModelScale()
 T CBaseAnimating::UpdateStepOrigin()
 T CBaseAnimating::UseClientSideAnimation()
 T CBaseAnimating::YouForgotToImplementOrDeclareServerClass()
 T CBaseAnimating::~CBaseAnimating()
 T CBaseAnimatingOverlay::AddGesture(Activity, bool)
 T CBaseAnimatingOverlay::AddGestureSequence(int, bool)
 T CBaseAnimatingOverlay::AddLayeredSequence(int, int)
 T CBaseAnimatingOverlay::AllocateLayer(int)
 T CBaseAnimatingOverlay::DispatchAnimEvents(CBaseAnimating*)
 T CBaseAnimatingOverlay::FastRemoveLayer(int)
 T CBaseAnimatingOverlay::FindGestureLayer(Activity)
 T CBaseAnimatingOverlay::GetAnimOverlay(int)
 T CBaseAnimatingOverlay::GetDataDescMap()
 T CBaseAnimatingOverlay::GetLayerCycle(int)
 T CBaseAnimatingOverlay::GetLayerDuration(int)
 T CBaseAnimatingOverlay::GetLayerSequence(int)
 T CBaseAnimatingOverlay::GetServerClass()
 T CBaseAnimatingOverlay::GetSkeleton(CStudioHdr*, Vector*, Quaternion*, int)
 T CBaseAnimatingOverlay::HasActiveLayer()
 T CBaseAnimatingOverlay::IsPlayingGesture(Activity)
 T CBaseAnimatingOverlay::OnRestore()
 T CBaseAnimatingOverlay::RemoveGesture(Activity)
 T CBaseAnimatingOverlay::RemoveLayer(int, float, float)
 T CBaseAnimatingOverlay::RestartGesture(Activity, bool, bool)
 T CBaseAnimatingOverlay::SetLayerCycle(int, float)
 T CBaseAnimatingOverlay::SetLayerCycle(int, float, float)
 T CBaseAnimatingOverlay::SetLayerCycle(int, float, float, float)
 T CBaseAnimatingOverlay::SetLayerDuration(int, float)
 T CBaseAnimatingOverlay::SetLayerLooping(int, bool)
 T CBaseAnimatingOverlay::SetLayerNoRestore(int, bool)
 T CBaseAnimatingOverlay::SetLayerPlaybackRate(int, float)
 T CBaseAnimatingOverlay::SetLayerPriority(int, int)
 T CBaseAnimatingOverlay::SetLayerWeight(int, float)
 T CBaseAnimatingOverlay::SetNumAnimOverlays(int)
 T CBaseAnimatingOverlay::StudioFrameAdvance()
 T CBaseAnimatingOverlay::YouForgotToImplementOrDeclareServerClass()
 T CBaseAnimatingOverlay::~CBaseAnimatingOverlay()
 T CBaseAppSystem<IParticleSystemQuery>::Connect(void* (*)(char const*, int*))
 T CBaseAppSystem<IParticleSystemQuery>::Disconnect()
 T CBaseAppSystem<IParticleSystemQuery>::Init()
 T CBaseAppSystem<IParticleSystemQuery>::QueryInterface(char const*)
 T CBaseAppSystem<IParticleSystemQuery>::Shutdown()
 T CBaseButton* _CreateEntityTemplate<CBaseButton>(CBaseButton*, char const*)
 T CBaseButton::ButtonActivate()
 T CBaseButton::ButtonBackHome()
 T CBaseButton::ButtonReturn()
 T CBaseButton::ButtonSpark()
 T CBaseButton::ButtonTouch(CBaseEntity*)
 T CBaseButton::ButtonUse(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CBaseButton::CreateVPhysics()
 T CBaseButton::DrawDebugTextOverlays()
 T CBaseButton::GetDataDescMap()
 T CBaseButton::InputLock(inputdata_t&)
 T CBaseButton::InputPress(inputdata_t&)
 T CBaseButton::InputPressIn(inputdata_t&)
 T CBaseButton::InputPressOut(inputdata_t&)
 T CBaseButton::InputUnlock(inputdata_t&)
 T CBaseButton::KeyValue(char const*, char const*)
 T CBaseButton::Lock()
 T CBaseButton::ObjectCaps()
 T CBaseButton::OnTakeDamage(CTakeDamageInfo const&)
 T CBaseButton::Precache()
 T CBaseButton::Press(CBaseEntity*, CBaseButton::BUTTON_CODE)
 T CBaseButton::Spawn()
 T CBaseButton::TriggerAndWait()
 T CBaseButton::Unlock()
 T CBaseButton::~CBaseButton()
 T CBaseCombatCharacter::AddClassRelationship(Class_T, Disposition_t, int)
 T CBaseCombatCharacter::AddEntityRelationship(CBaseEntity*, Disposition_t, int)
 T CBaseCombatCharacter::AddPlayerItem(CBaseCombatWeapon*)
 T CBaseCombatCharacter::AllocateDefaultRelationships()
 T CBaseCombatCharacter::ApplyStressDamage(IPhysicsObject*, bool)
 T CBaseCombatCharacter::BecomeRagdoll(CTakeDamageInfo const&, Vector const&)
 T CBaseCombatCharacter::BecomeRagdollBoogie(CBaseEntity*, Vector const&, float, int)
 T CBaseCombatCharacter::BloodColor()
 T CBaseCombatCharacter::BodyAngles()
 T CBaseCombatCharacter::BodyDirection2D()
 T CBaseCombatCharacter::BodyDirection3D()
 T CBaseCombatCharacter::CBaseCombatCharacter()
 T CBaseCombatCharacter::CalcDamageForceVector(CTakeDamageInfo const&)
 T CBaseCombatCharacter::CalcWeaponProficiency(CBaseCombatWeapon*)
 T CBaseCombatCharacter::CanBecomeServerRagdoll()
 T CBaseCombatCharacter::ChangeTeam(int)
 T CBaseCombatCharacter::CheckTraceHullAttack(Vector const&, Vector const&, Vector const&, Vector const&, int, int, float, bool)
 T CBaseCombatCharacter::CheckTraceHullAttack(float, Vector const&, Vector const&, int, int, float, bool)
 T CBaseCombatCharacter::ClearLastKnownArea()
 T CBaseCombatCharacter::CorpseFade()
 T CBaseCombatCharacter::CorpseGib(CTakeDamageInfo const&)
 T CBaseCombatCharacter::DoMuzzleFlash()
 T CBaseCombatCharacter::DropWeaponForWeaponStrip(CBaseCombatWeapon*, Vector const&, QAngle const&, float)
 T CBaseCombatCharacter::Event_Dying()
 T CBaseCombatCharacter::Event_Dying(CTakeDamageInfo const&)
 T CBaseCombatCharacter::Event_Gibbed(CTakeDamageInfo const&)
 T CBaseCombatCharacter::Event_Killed(CTakeDamageInfo const&)
 T CBaseCombatCharacter::ExitVehicle()
 T CBaseCombatCharacter::EyeDirection2D()
 T CBaseCombatCharacter::EyeDirection3D()
 T CBaseCombatCharacter::FInAimCone(CBaseEntity*)
 T CBaseCombatCharacter::FInAimCone(Vector const&)
 T CBaseCombatCharacter::FInViewCone(CBaseEntity*)
 T CBaseCombatCharacter::FInViewCone(Vector const&)
 T CBaseCombatCharacter::FVisible(CBaseEntity*, int, CBaseEntity**)
 T CBaseCombatCharacter::FVisible(Vector const&, int, CBaseEntity**)
 T CBaseCombatCharacter::FindEntityRelationship(CBaseEntity*)
 T CBaseCombatCharacter::FindHealthItem(Vector const&, Vector const&)
 T CBaseCombatCharacter::FindMissTarget()
 T CBaseCombatCharacter::FixupBurningServerRagdoll(CBaseEntity*)
 T CBaseCombatCharacter::GetActiveWeapon() const
 T CBaseCombatCharacter::GetAliveDuration() const
 T CBaseCombatCharacter::GetAmmoCount(int) const
 T CBaseCombatCharacter::GetAttackSpread(CBaseCombatWeapon*, CBaseEntity*)
 T CBaseCombatCharacter::GetDataDescMap()
 T CBaseCombatCharacter::GetDeathActivity()
 T CBaseCombatCharacter::GetDefaultRelationshipDisposition(Class_T)
 T CBaseCombatCharacter::GetFogObscuredRatio(CBaseEntity*) const
 T CBaseCombatCharacter::GetFogObscuredRatio(Vector const&) const
 T CBaseCombatCharacter::GetFogObscuredRatio(float) const
 T CBaseCombatCharacter::GetInteractionID()
 T CBaseCombatCharacter::GetLastKnownArea() const
 T CBaseCombatCharacter::GetPhysicsImpactDamageTable()
 T CBaseCombatCharacter::GetServerClass()
 T CBaseCombatCharacter::GetSpreadBias(CBaseCombatWeapon*, CBaseEntity*)
 T CBaseCombatCharacter::GetTimeSinceLastInjury(int) const
 T CBaseCombatCharacter::GetVehicle()
 T CBaseCombatCharacter::GetVehicleEntity()
 T CBaseCombatCharacter::GiveAmmo(int, char const*, bool)
 T CBaseCombatCharacter::GiveAmmo(int, int, bool)
 T CBaseCombatCharacter::HandleInteraction(int, void*, CBaseCombatCharacter*)
 T CBaseCombatCharacter::HasAlienGibs()
 T CBaseCombatCharacter::HasEverBeenInjured(int) const
 T CBaseCombatCharacter::HasHumanGibs()
 T CBaseCombatCharacter::HeadDirection2D()
 T CBaseCombatCharacter::HeadDirection3D()
 T CBaseCombatCharacter::IRelationPriority(CBaseEntity*)
 T CBaseCombatCharacter::IRelationType(CBaseEntity*)
 T CBaseCombatCharacter::InitInteractionSystem()
 T CBaseCombatCharacter::InputKilledNPC(inputdata_t&)
 T CBaseCombatCharacter::IsAreaTraversable(CNavArea const*) const
 T CBaseCombatCharacter::IsHiddenByFog(CBaseEntity*) const
 T CBaseCombatCharacter::IsHiddenByFog(Vector const&) const
 T CBaseCombatCharacter::IsHiddenByFog(float) const
 T CBaseCombatCharacter::IsInAVehicle() const
 T CBaseCombatCharacter::IsInFieldOfView(CBaseEntity*) const
 T CBaseCombatCharacter::IsInFieldOfView(Vector const&) const
 T CBaseCombatCharacter::IsLineOfSightClear(CBaseEntity*, CBaseCombatCharacter::LineOfSightCheckType) const
 T CBaseCombatCharacter::IsLineOfSightClear(Vector const&, CBaseCombatCharacter::LineOfSightCheckType, CBaseEntity*) const
 T CBaseCombatCharacter::IsLookingTowards(CBaseEntity const*, float) const
 T CBaseCombatCharacter::IsLookingTowards(Vector const&, float) const
 T CBaseCombatCharacter::MyCombatCharacterPointer()
 T CBaseCombatCharacter::NPC_TranslateActivity(Activity)
 T CBaseCombatCharacter::NetworkStateChanged_m_iAmmo()
 T CBaseCombatCharacter::NetworkStateChanged_m_iAmmo(void*)
 T CBaseCombatCharacter::NetworkVar_m_hMyWeapons::Set(int, CHandle<CBaseCombatWeapon> const&)
 T CBaseCombatCharacter::NotifyFriendsOfDamage(CBaseEntity*)
 T CBaseCombatCharacter::OnChangeActiveWeapon(CBaseCombatWeapon*, CBaseCombatWeapon*)
 T CBaseCombatCharacter::OnFriendDamaged(CBaseCombatCharacter*, CBaseEntity*)
 T CBaseCombatCharacter::OnKilledNPC(CBaseCombatCharacter*)
 T CBaseCombatCharacter::OnNavAreaChanged(CNavArea*, CNavArea*)
 T CBaseCombatCharacter::OnNavAreaRemoved(CNavArea*)
 T CBaseCombatCharacter::OnPlayerKilledOther(CBaseEntity*, CTakeDamageInfo const&)
 T CBaseCombatCharacter::OnPursuedBy(INextBot*)
 T CBaseCombatCharacter::OnTakeDamage(CTakeDamageInfo const&)
 T CBaseCombatCharacter::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CBaseCombatCharacter::OnTakeDamage_Dead(CTakeDamageInfo const&)
 T CBaseCombatCharacter::OnTakeDamage_Dying(CTakeDamageInfo const&)
 T CBaseCombatCharacter::Precache()
 T CBaseCombatCharacter::PushawayTouch(CBaseEntity*)
 T CBaseCombatCharacter::RemoveAllAmmo()
 T CBaseCombatCharacter::RemoveAllWeapons()
 T CBaseCombatCharacter::RemoveAmmo(int, char const*)
 T CBaseCombatCharacter::RemoveAmmo(int, int)
 T CBaseCombatCharacter::RemoveEntityRelationship(CBaseEntity*)
 T CBaseCombatCharacter::RemovePlayerItem(CBaseCombatWeapon*)
 T CBaseCombatCharacter::ResetVisibilityCache(CBaseCombatCharacter*)
 T CBaseCombatCharacter::Restore(IRestore&)
 T CBaseCombatCharacter::SetActiveWeapon(CBaseCombatWeapon*)
 T CBaseCombatCharacter::SetBloodColor(int)
 T CBaseCombatCharacter::SetDefaultRelationship(Class_T, Class_T, Disposition_t, int)
 T CBaseCombatCharacter::SetLightingOriginRelative(CBaseEntity*)
 T CBaseCombatCharacter::SetTransmit(CCheckTransmitInfo*, bool)
 T CBaseCombatCharacter::ShouldGib(CTakeDamageInfo const&)
 T CBaseCombatCharacter::ShouldShootMissTarget(CBaseCombatCharacter*)
 T CBaseCombatCharacter::Spawn()
 T CBaseCombatCharacter::SwitchToNextBestWeapon(CBaseCombatWeapon*)
 T CBaseCombatCharacter::TakeHealth(float, int)
 T CBaseCombatCharacter::ThrowDirForWeaponStrip(CBaseCombatWeapon*, Vector const&, Vector*)
 T CBaseCombatCharacter::UpdateLastKnownArea()
 T CBaseCombatCharacter::UpdateOnRemove()
 T CBaseCombatCharacter::VPhysicsShadowCollision(int, gamevcollisionevent_t*)
 T CBaseCombatCharacter::VPhysicsUpdate(IPhysicsObject*)
 T CBaseCombatCharacter::Weapon_CanSwitchTo(CBaseCombatWeapon*)
 T CBaseCombatCharacter::Weapon_CanUse(CBaseCombatWeapon*)
 T CBaseCombatCharacter::Weapon_Create(char const*)
 T CBaseCombatCharacter::Weapon_Detach(CBaseCombatWeapon*)
 T CBaseCombatCharacter::Weapon_Drop(CBaseCombatWeapon*, Vector const*, Vector const*)
 T CBaseCombatCharacter::Weapon_DropAll(bool)
 T CBaseCombatCharacter::Weapon_Equip(CBaseCombatWeapon*)
 T CBaseCombatCharacter::Weapon_EquipAmmoOnly(CBaseCombatWeapon*)
 T CBaseCombatCharacter::Weapon_FindUsable(Vector const&)
 T CBaseCombatCharacter::Weapon_FrameUpdate()
 T CBaseCombatCharacter::Weapon_GetSlot(int) const
 T CBaseCombatCharacter::Weapon_GetWpnForAmmo(int)
 T CBaseCombatCharacter::Weapon_HandleAnimEvent(animevent_t*)
 T CBaseCombatCharacter::Weapon_IsOnGround(CBaseCombatWeapon*)
 T CBaseCombatCharacter::Weapon_OwnsThisType(char const*, int) const
 T CBaseCombatCharacter::Weapon_SetActivity(Activity, float)
 T CBaseCombatCharacter::Weapon_ShootPosition()
 T CBaseCombatCharacter::Weapon_SlotOccupied(CBaseCombatWeapon*)
 T CBaseCombatCharacter::Weapon_Switch(CBaseCombatWeapon*, int)
 T CBaseCombatCharacter::Weapon_TranslateActivity(Activity, bool*)
 T CBaseCombatCharacter::YouForgotToImplementOrDeclareServerClass()
 T CBaseCombatCharacter::~CBaseCombatCharacter()
 T CBaseCombatWeapon::AbortReload()
 T CBaseCombatWeapon::Activate()
 T CBaseCombatWeapon::ActivityList(int&)
 T CBaseCombatWeapon::ActivityOverride(Activity, bool*)
 T CBaseCombatWeapon::AddViewKick()
 T CBaseCombatWeapon::AddViewmodelBob(CBaseViewModel*, Vector&, QAngle&)
 T CBaseCombatWeapon::AllowsAutoSwitchFrom() const
 T CBaseCombatWeapon::AllowsAutoSwitchTo() const
 T CBaseCombatWeapon::AttemptToMaterialize()
 T CBaseCombatWeapon::AutoFiresFullClip() const
 T CBaseCombatWeapon::CBaseCombatWeapon()
 T CBaseCombatWeapon::CalcViewmodelBob()
 T CBaseCombatWeapon::CanBePickedUpByNPCs()
 T CBaseCombatWeapon::CanBeSelected()
 T CBaseCombatWeapon::CanDeploy()
 T CBaseCombatWeapon::CanHolster() const
 T CBaseCombatWeapon::CanLower()
 T CBaseCombatWeapon::CanPerformSecondaryAttack() const
 T CBaseCombatWeapon::CanReload()
 T CBaseCombatWeapon::CapabilitiesGet()
 T CBaseCombatWeapon::CheckReload()
 T CBaseCombatWeapon::CheckRespawn()
 T CBaseCombatWeapon::Clip1()
 T CBaseCombatWeapon::Clip2()
 T CBaseCombatWeapon::DefaultDeploy(char*, char*, int, char*)
 T CBaseCombatWeapon::DefaultReload(int, int, int)
 T CBaseCombatWeapon::DefaultTouch(CBaseEntity*)
 T CBaseCombatWeapon::Delete()
 T CBaseCombatWeapon::Deploy()
 T CBaseCombatWeapon::DestroyItem()
 T CBaseCombatWeapon::Detach()
 T CBaseCombatWeapon::DisplayAltFireHudHint()
 T CBaseCombatWeapon::DisplayReloadHudHint()
 T CBaseCombatWeapon::Drop(Vector const&)
 T CBaseCombatWeapon::Equip(CBaseCombatCharacter*)
 T CBaseCombatWeapon::FallInit()
 T CBaseCombatWeapon::FallThink()
 T CBaseCombatWeapon::FinishReload()
 T CBaseCombatWeapon::ForceWeaponSwitch() const
 T CBaseCombatWeapon::GetAnimPrefix() const
 T CBaseCombatWeapon::GetAvailableWeaponsInBox(CBaseCombatWeapon**, int, Vector const&, Vector const&)
 T CBaseCombatWeapon::GetBulletSpread()
 T CBaseCombatWeapon::GetBulletSpread(WeaponProficiency_t)
 T CBaseCombatWeapon::GetBulletType()
 T CBaseCombatWeapon::GetControlPanelClassName(int, char const*&)
 T CBaseCombatWeapon::GetControlPanelInfo(int, char const*&)
 T CBaseCombatWeapon::GetDamage(float, int)
 T CBaseCombatWeapon::GetDataDescMap()
 T CBaseCombatWeapon::GetDeathNoticeName()
 T CBaseCombatWeapon::GetDefaultAnimSpeed()
 T CBaseCombatWeapon::GetDefaultClip1() const
 T CBaseCombatWeapon::GetDefaultClip2() const
 T CBaseCombatWeapon::GetDmgAccumulator()
 T CBaseCombatWeapon::GetDrawActivity()
 T CBaseCombatWeapon::GetEncryptionKey()
 T CBaseCombatWeapon::GetFireRate()
 T CBaseCombatWeapon::GetLastWeapon()
 T CBaseCombatWeapon::GetMaxAutoAimDeflection()
 T CBaseCombatWeapon::GetMaxBurst()
 T CBaseCombatWeapon::GetMaxClip1() const
 T CBaseCombatWeapon::GetMaxClip2() const
 T CBaseCombatWeapon::GetMaxRestTime()
 T CBaseCombatWeapon::GetMinBurst()
 T CBaseCombatWeapon::GetMinRestTime()
 T CBaseCombatWeapon::GetName() const
 T CBaseCombatWeapon::GetOwner() const
 T CBaseCombatWeapon::GetPosition() const
 T CBaseCombatWeapon::GetPrimaryAmmoType() const
 T CBaseCombatWeapon::GetPrimaryAttackActivity()
 T CBaseCombatWeapon::GetPrintName() const
 T CBaseCombatWeapon::GetProficiencyValues()
 T CBaseCombatWeapon::GetRandomBurst()
 T CBaseCombatWeapon::GetRumbleEffect() const
 T CBaseCombatWeapon::GetSecondaryAmmoType() const
 T CBaseCombatWeapon::GetSecondaryAttackActivity()
 T CBaseCombatWeapon::GetServerClass()
 T CBaseCombatWeapon::GetShootSound(int) const
 T CBaseCombatWeapon::GetSkinOverride() const
 T CBaseCombatWeapon::GetSlot() const
 T CBaseCombatWeapon::GetSpreadBias(WeaponProficiency_t)
 T CBaseCombatWeapon::GetSpriteActive() const
 T CBaseCombatWeapon::GetSpriteAmmo() const
 T CBaseCombatWeapon::GetSpriteAmmo2() const
 T CBaseCombatWeapon::GetSpriteAutoaim() const
 T CBaseCombatWeapon::GetSpriteCrosshair() const
 T CBaseCombatWeapon::GetSpriteInactive() const
 T CBaseCombatWeapon::GetSpriteZoomedAutoaim() const
 T CBaseCombatWeapon::GetSpriteZoomedCrosshair() const
 T CBaseCombatWeapon::GetSubType()
 T CBaseCombatWeapon::GetViewModel(int) const
 T CBaseCombatWeapon::GetWeaponFlags() const
 T CBaseCombatWeapon::GetWeaponIdleTime()
 T CBaseCombatWeapon::GetWeight() const
 T CBaseCombatWeapon::GetWorldModel() const
 T CBaseCombatWeapon::GetWpnData() const
 T CBaseCombatWeapon::GiveDefaultAmmo()
 T CBaseCombatWeapon::GiveTo(CBaseEntity*)
 T CBaseCombatWeapon::HandleAnimEvent(animevent_t*)
 T CBaseCombatWeapon::HandleFireOnEmpty()
 T CBaseCombatWeapon::HasAmmo()
 T CBaseCombatWeapon::HasAnyAmmo()
 T CBaseCombatWeapon::HasPrimaryAmmo()
 T CBaseCombatWeapon::HasSecondaryAmmo()
 T CBaseCombatWeapon::HasWeaponIdleTimeElapsed()
 T CBaseCombatWeapon::HideThink()
 T CBaseCombatWeapon::Holster(CBaseCombatWeapon*)
 T CBaseCombatWeapon::HolsterOnDetach()
 T CBaseCombatWeapon::InputHideWeapon(inputdata_t&)
 T CBaseCombatWeapon::IsAllowedToSwitch()
 T CBaseCombatWeapon::IsBaseCombatWeapon() const
 T CBaseCombatWeapon::IsHolstered()
 T CBaseCombatWeapon::IsLocked(CBaseEntity*)
 T CBaseCombatWeapon::IsPredicted() const
 T CBaseCombatWeapon::IsViewModelSequenceFinished() const
 T CBaseCombatWeapon::IsWeaponVisible()
 T CBaseCombatWeapon::IsWeaponZoomed()
 T CBaseCombatWeapon::ItemBusyFrame()
 T CBaseCombatWeapon::ItemHolsterFrame()
 T CBaseCombatWeapon::ItemPostFrame()
 T CBaseCombatWeapon::ItemPreFrame()
 T CBaseCombatWeapon::Kill()
 T CBaseCombatWeapon::Lock(float, CBaseEntity*)
 T CBaseCombatWeapon::Lower()
 T CBaseCombatWeapon::MaintainIdealActivity()
 T CBaseCombatWeapon::MakeTracer(Vector const&, CGameTrace const&, int)
 T CBaseCombatWeapon::Materialize()
 T CBaseCombatWeapon::MyCombatWeaponPointer()
 T CBaseCombatWeapon::NetworkStateChanged_m_nNextThinkTick()
 T CBaseCombatWeapon::NetworkStateChanged_m_nNextThinkTick(void*)
 T CBaseCombatWeapon::ObjectCaps()
 T CBaseCombatWeapon::OnActiveStateChanged(int)
 T CBaseCombatWeapon::OnPickedUp(CBaseCombatCharacter*)
 T CBaseCombatWeapon::Operator_ForceNPCFire(CBaseCombatCharacter*, bool)
 T CBaseCombatWeapon::Operator_FrameUpdate(CBaseCombatCharacter*)
 T CBaseCombatWeapon::Operator_HandleAnimEvent(animevent_t*, CBaseCombatCharacter*)
 T CBaseCombatWeapon::PoseParamList(int&)
 T CBaseCombatWeapon::PoseParameterOverride(bool)
 T CBaseCombatWeapon::Precache()
 T CBaseCombatWeapon::PrimaryAttack()
 T CBaseCombatWeapon::Ready()
 T CBaseCombatWeapon::Reload()
 T CBaseCombatWeapon::ReloadOrSwitchWeapons()
 T CBaseCombatWeapon::RescindAltFireHudHint()
 T CBaseCombatWeapon::RescindReloadHudHint()
 T CBaseCombatWeapon::Respawn()
 T CBaseCombatWeapon::SecondaryAttack()
 T CBaseCombatWeapon::SendViewModelAnim(int)
 T CBaseCombatWeapon::SendWeaponAnim(int)
 T CBaseCombatWeapon::SetActivity(Activity, float)
 T CBaseCombatWeapon::SetIdealActivity(Activity)
 T CBaseCombatWeapon::SetOwner(CBaseCombatCharacter*)
 T CBaseCombatWeapon::SetPickupTouch()
 T CBaseCombatWeapon::SetSubType(int)
 T CBaseCombatWeapon::SetViewModel()
 T CBaseCombatWeapon::SetViewModelIndex(int)
 T CBaseCombatWeapon::SetWeaponIdleTime(float)
 T CBaseCombatWeapon::SetWeaponVisible(bool)
 T CBaseCombatWeapon::ShouldBlockPrimaryFire()
 T CBaseCombatWeapon::ShouldDisplayAltFireHUDHint()
 T CBaseCombatWeapon::ShouldDisplayReloadHUDHint()
 T CBaseCombatWeapon::ShouldShowControlPanels()
 T CBaseCombatWeapon::ShouldUseLargeViewModelVROverride()
 T CBaseCombatWeapon::Spawn()
 T CBaseCombatWeapon::StartSprinting()
 T CBaseCombatWeapon::StopSprinting()
 T CBaseCombatWeapon::StopWeaponSound(WeaponSound_t)
 T CBaseCombatWeapon::UpdateAutoFire()
 T CBaseCombatWeapon::UpdateClientData(CBasePlayer*)
 T CBaseCombatWeapon::UpdateTransmitState()
 T CBaseCombatWeapon::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CBaseCombatWeapon::UsesClipsForAmmo1() const
 T CBaseCombatWeapon::UsesClipsForAmmo2() const
 T CBaseCombatWeapon::UsesPrimaryAmmo()
 T CBaseCombatWeapon::UsesSecondaryAmmo()
 T CBaseCombatWeapon::VisibleInWeaponSelection()
 T CBaseCombatWeapon::WeaponAutoAimScale()
 T CBaseCombatWeapon::WeaponIdle()
 T CBaseCombatWeapon::WeaponLOSCondition(Vector const&, Vector const&, bool)
 T CBaseCombatWeapon::WeaponMeleeAttack1Condition(float, float)
 T CBaseCombatWeapon::WeaponMeleeAttack2Condition(float, float)
 T CBaseCombatWeapon::WeaponRangeAttack1Condition(float, float)
 T CBaseCombatWeapon::WeaponRangeAttack2Condition(float, float)
 T CBaseCombatWeapon::WeaponSound(WeaponSound_t, float)
 T CBaseCombatWeapon::YouForgotToImplementOrDeclareServerClass()
 T CBaseCombatWeapon::~CBaseCombatWeapon()
 T CBaseDMStart::GetDataDescMap()
 T CBaseDMStart::IsTriggered(CBaseEntity*)
 T CBaseDMStart::~CBaseDMStart()
 T CBaseDoor::Activate()
 T CBaseDoor::Blocked(CBaseEntity*)
 T CBaseDoor::ChainTouch(CBaseEntity*)
 T CBaseDoor::ChainUse()
 T CBaseDoor::CloseAreaPortalsThink()
 T CBaseDoor::CreateVPhysics()
 T CBaseDoor::DoorActivate()
 T CBaseDoor::DoorGoDown()
 T CBaseDoor::DoorGoUp()
 T CBaseDoor::DoorHitBottom()
 T CBaseDoor::DoorHitTop()
 T CBaseDoor::DoorTouch(CBaseEntity*)
 T CBaseDoor::EndBlocked()
 T CBaseDoor::GetDataDescMap()
 T CBaseDoor::GetServerClass()
 T CBaseDoor::InputClose(inputdata_t&)
 T CBaseDoor::InputLock(inputdata_t&)
 T CBaseDoor::InputOpen(inputdata_t&)
 T CBaseDoor::InputSetSpeed(inputdata_t&)
 T CBaseDoor::InputSetToggleState(inputdata_t&)
 T CBaseDoor::InputToggle(inputdata_t&)
 T CBaseDoor::InputUnlock(inputdata_t&)
 T CBaseDoor::IsRotatingDoor()
 T CBaseDoor::KeyValue(char const*, char const*)
 T CBaseDoor::MovingSoundThink()
 T CBaseDoor::ObjectCaps()
 T CBaseDoor::Precache()
 T CBaseDoor::SetToggleState(int)
 T CBaseDoor::ShouldBlockNav() const
 T CBaseDoor::ShouldSavePhysics()
 T CBaseDoor::Spawn()
 T CBaseDoor::StartBlocked(CBaseEntity*)
 T CBaseDoor::StopMovingSound()
 T CBaseDoor::UpdateAreaPortals(bool)
 T CBaseDoor::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CBaseDoor::YouForgotToImplementOrDeclareServerClass()
 T CBaseDoor::~CBaseDoor()
 T CBaseEdict::GetChangeAccessor()
 T CBaseEntity::AcceptInput(char const*, CBaseEntity*, CBaseEntity*, variant_t, int)
 T CBaseEntity::Activate()
 T CBaseEntity::AddContext(char const*)
 T CBaseEntity::AddEffects(int)
 T CBaseEntity::AddEntityToGroundList(CBaseEntity*)
 T CBaseEntity::AddFlag(int)
 T CBaseEntity::AddPoints(int, bool)
 T CBaseEntity::AddPointsToTeam(int, bool)
 T CBaseEntity::AddStepDiscontinuity(float, Vector const&, QAngle const&)
 T CBaseEntity::AddTimedOverlay(char const*, int)
 T CBaseEntity::AdjustDamageDirection(CTakeDamageInfo const&, Vector&, CBaseEntity*)
 T CBaseEntity::AppendContextToCriteria(AI_CriteriaSet&, char const*)
 T CBaseEntity::ApplyAbsVelocityImpulse(Vector const&)
 T CBaseEntity::ApplyLocalAngularVelocityImpulse(Vector const&)
 T CBaseEntity::Blocked(CBaseEntity*)
 T CBaseEntity::BlocksLOS()
 T CBaseEntity::BloodColor()
 T CBaseEntity::BodyTarget(Vector const&, bool)
 T CBaseEntity::CBaseEntity(bool)
 T CBaseEntity::CalcAbsolutePosition()
 T CBaseEntity::CalcAbsoluteVelocity()
 T CBaseEntity::CanBeHitByMeleeAttack(CBaseEntity*)
 T CBaseEntity::CanBeSeenBy(CAI_BaseNPC*)
 T CBaseEntity::CanStandOn(CBaseEntity*) const
 T CBaseEntity::CanStandOn(edict_t*) const
 T CBaseEntity::ChangeTeam(int)
 T CBaseEntity::CheckHasGamePhysicsSimulation()
 T CBaseEntity::CheckHasThinkFunction(bool)
 T CBaseEntity::CheckStepSimulationChanged()
 T CBaseEntity::ClassMatchesComplex(char const*)
 T CBaseEntity::Classify()
 T CBaseEntity::ClearFlags()
 T CBaseEntity::CollisionRulesChanged()
 T CBaseEntity::ComputeAbsPosition(Vector const&, Vector*)
 T CBaseEntity::ComputeStepSimulationNetwork(StepSimulationData*)
 T CBaseEntity::ComputeTracerStartPosition(Vector const&, Vector*)
 T CBaseEntity::ComputeWorldSpaceSurroundingBox(Vector*, Vector*)
 T CBaseEntity::Create(char const*, Vector const&, QAngle const&, CBaseEntity*)
 T CBaseEntity::CreateBubbleTrailTracer(Vector const&, Vector const&, Vector const&)
 T CBaseEntity::CreateDataObject(int)
 T CBaseEntity::CreateNoSpawn(char const*, Vector const&, QAngle const&, CBaseEntity*)
 T CBaseEntity::CreateVPhysics()
 T CBaseEntity::DamageDecal(int, int)
 T CBaseEntity::DeathNotice(CBaseEntity*)
 T CBaseEntity::DecalTrace(CGameTrace*, char const*)
 T CBaseEntity::Deflected(CBaseEntity*, Vector&)
 T CBaseEntity::DestroyAllDataObjects()
 T CBaseEntity::DestroyDataObject(int)
 T CBaseEntity::DetectInSkybox()
 T CBaseEntity::DispatchResponse(char const*)
 T CBaseEntity::DispatchTraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
 T CBaseEntity::DispatchUpdateTransmitState()
 T CBaseEntity::DoImpactEffect(CGameTrace&, int)
 T CBaseEntity::DoesHavePlayerChild()
 T CBaseEntity::DrawAbsBoxOverlay()
 T CBaseEntity::DrawBBoxOverlay(float)
 T CBaseEntity::DrawDebugGeometryOverlays()
 T CBaseEntity::DrawDebugTextOverlays()
 T CBaseEntity::DrawInputOverlay(char const*, CBaseEntity*, variant_t)
 T CBaseEntity::DrawOutputOverlay(CEventAction*)
 T CBaseEntity::DrawTimedOverlays()
 T CBaseEntity::DumpResponseCriteria()
 T CBaseEntity::EarPosition()
 T CBaseEntity::EmitCloseCaption(IRecipientFilter&, int, char const*, CUtlVector<Vector, CUtlMemory<Vector, int> >&, float, bool)
 T CBaseEntity::EmitSentenceByIndex(IRecipientFilter&, int, int, int, float, soundlevel_t, int, int, Vector const*, Vector const*, bool, float)
 T CBaseEntity::EmitSound(IRecipientFilter&, int, EmitSound_t const&)
 T CBaseEntity::EmitSound(IRecipientFilter&, int, EmitSound_t const&, short&)
 T CBaseEntity::EmitSound(IRecipientFilter&, int, char const*, Vector const*, float, float*)
 T CBaseEntity::EmitSound(char const*, float, float*)
 T CBaseEntity::EmitSound(char const*, short&, float, float*)
 T CBaseEntity::EndBlocked()
 T CBaseEntity::EndTouch(CBaseEntity*)
 T CBaseEntity::EntityText(int, char const*, float, int, int, int, int)
 T CBaseEntity::Event_Killed(CTakeDamageInfo const&)
 T CBaseEntity::Event_KilledOther(CBaseEntity*, CTakeDamageInfo const&)
 T CBaseEntity::EyeAngles()
 T CBaseEntity::EyePosition()
 T CBaseEntity::FVisible(CBaseEntity*, int, CBaseEntity**)
 T CBaseEntity::FVisible(Vector const&, int, CBaseEntity**)
 T CBaseEntity::FireBullets(FireBulletsInfo_t const&)
 T CBaseEntity::FireNamedOutput(char const*, variant_t, CBaseEntity*, CBaseEntity*, float)
 T CBaseEntity::FollowEntity(CBaseEntity*, bool)
 T CBaseEntity::ForceVPhysicsCollide(CBaseEntity*)
 T CBaseEntity::GenderExpandString(char const*, char*, int)
 T CBaseEntity::GetAttackDamageScale(CBaseEntity*)
 T CBaseEntity::GetAutoAimCenter()
 T CBaseEntity::GetAutoAimRadius()
 T CBaseEntity::GetBaseAnimating()
 T CBaseEntity::GetBaseEntity()
 T CBaseEntity::GetBeamTraceFilter()
 T CBaseEntity::GetCollideable()
 T CBaseEntity::GetDamage()
 T CBaseEntity::GetDamageType() const
 T CBaseEntity::GetDataDescMap()
 T CBaseEntity::GetDataObject(int)
 T CBaseEntity::GetDebugName()
 T CBaseEntity::GetDelay()
 T CBaseEntity::GetEnemy()
 T CBaseEntity::GetEnemy() const
 T CBaseEntity::GetEntitySkybox()
 T CBaseEntity::GetFirstThinkTick()
 T CBaseEntity::GetFollowedEntity()
 T CBaseEntity::GetGroundChangeTime()
 T CBaseEntity::GetGroundEntity()
 T CBaseEntity::GetGroundVelocityToApply(Vector&)
 T CBaseEntity::GetIndexForThinkContext(char const*)
 T CBaseEntity::GetInputDispatchEffectPosition(char const*, Vector&, QAngle&)
 T CBaseEntity::GetKeyValue(char const*, char*, int)
 T CBaseEntity::GetLastThink(char const*)
 T CBaseEntity::GetMaxHealth() const
 T CBaseEntity::GetModel()
 T CBaseEntity::GetModelIndex() const
 T CBaseEntity::GetModelName() const
 T CBaseEntity::GetNetworkable()
 T CBaseEntity::GetNextTarget()
 T CBaseEntity::GetNextThink(char const*)
 T CBaseEntity::GetNextThinkTick(char const*)
 T CBaseEntity::GetNextThinkTick(int) const
 T CBaseEntity::GetParametersForSound(char const*, CSoundParameters&, char const*)
 T CBaseEntity::GetParametersForSound(char const*, short&, CSoundParameters&, char const*)
 T CBaseEntity::GetParentToWorldTransform(matrix3x4_t&)
 T CBaseEntity::GetReceivedDamageScale(CBaseEntity*)
 T CBaseEntity::GetRefEHandle() const
 T CBaseEntity::GetResponseSystem()
 T CBaseEntity::GetRootMoveParent()
 T CBaseEntity::GetServerClass()
 T CBaseEntity::GetServerVehicle()
 T CBaseEntity::GetSmoothedVelocity()
 T CBaseEntity::GetSoundDuration(char const*, char const*)
 T CBaseEntity::GetSoundEmissionOrigin() const
 T CBaseEntity::GetStepAngles() const
 T CBaseEntity::GetStepOrigin() const
 T CBaseEntity::GetTeam() const
 T CBaseEntity::GetTeamNumber() const
 T CBaseEntity::GetTouchTrace()
 T CBaseEntity::GetTracerAttachment()
 T CBaseEntity::GetTracerType()
 T CBaseEntity::GetVectors(Vector*, Vector*, Vector*) const
 T CBaseEntity::GetVelocity(Vector*, Vector*)
 T CBaseEntity::GetViewOffset() const
 T CBaseEntity::GetWaterType() const
 T CBaseEntity::HandleShotImpactingGlass(FireBulletsInfo_t const&, CGameTrace const&, Vector const&, ITraceFilter*)
 T CBaseEntity::HandleShotImpactingWater(FireBulletsInfo_t const&, Vector const&, ITraceFilter*, Vector*)
 T CBaseEntity::HasDataObjectType(int) const
 T CBaseEntity::HasNPCsOnIt()
 T CBaseEntity::HasPhysicsAttacker(float)
 T CBaseEntity::HasTarget(string_t)
 T CBaseEntity::HeadTarget(Vector const&)
 T CBaseEntity::ImpactTrace(CGameTrace*, int, char const*)
 T CBaseEntity::IncrementInterpolationFrame()
 T CBaseEntity::InputAddContext(inputdata_t&)
 T CBaseEntity::InputAddOutput(inputdata_t&)
 T CBaseEntity::InputAlpha(inputdata_t&)
 T CBaseEntity::InputAlternativeSorting(inputdata_t&)
 T CBaseEntity::InputClearContext(inputdata_t&)
 T CBaseEntity::InputClearParent(inputdata_t&)
 T CBaseEntity::InputColor(inputdata_t&)
 T CBaseEntity::InputDisableDamageForces(inputdata_t&)
 T CBaseEntity::InputDisableShadow(inputdata_t&)
 T CBaseEntity::InputDispatchEffect(inputdata_t&)
 T CBaseEntity::InputDispatchResponse(inputdata_t&)
 T CBaseEntity::InputEnableDamageForces(inputdata_t&)
 T CBaseEntity::InputEnableShadow(inputdata_t&)
 T CBaseEntity::InputFireUser1(inputdata_t&)
 T CBaseEntity::InputFireUser2(inputdata_t&)
 T CBaseEntity::InputFireUser3(inputdata_t&)
 T CBaseEntity::InputFireUser4(inputdata_t&)
 T CBaseEntity::InputKill(inputdata_t&)
 T CBaseEntity::InputKillHierarchy(inputdata_t&)
 T CBaseEntity::InputRemoveContext(inputdata_t&)
 T CBaseEntity::InputSetDamageFilter(inputdata_t&)
 T CBaseEntity::InputSetParent(inputdata_t&)
 T CBaseEntity::InputSetParentAttachment(inputdata_t&)
 T CBaseEntity::InputSetParentAttachmentMaintainOffset(inputdata_t&)
 T CBaseEntity::InputSetTeam(inputdata_t&)
 T CBaseEntity::InputUse(inputdata_t&)
 T CBaseEntity::Intersects(CBaseEntity*)
 T CBaseEntity::InvalidatePhysicsRecursive(int)
 T CBaseEntity::IsAIWalkable()
 T CBaseEntity::IsAlive()
 T CBaseEntity::IsBSPModel() const
 T CBaseEntity::IsBaseCombatWeapon() const
 T CBaseEntity::IsBaseObject() const
 T CBaseEntity::IsBaseTrain() const
 T CBaseEntity::IsCombatItem() const
 T CBaseEntity::IsCurrentlyTouching() const
 T CBaseEntity::IsDeflectable()
 T CBaseEntity::IsDormant()
 T CBaseEntity::IsFloating()
 T CBaseEntity::IsFollowingEntity()
 T CBaseEntity::IsInWorld() const
 T CBaseEntity::IsLockedByMaster()
 T CBaseEntity::IsMoving()
 T CBaseEntity::IsNPC() const
 T CBaseEntity::IsNetClient() const
 T CBaseEntity::IsPlayer() const
 T CBaseEntity::IsPrecacheAllowed()
 T CBaseEntity::IsSimulatingOnAlternateTicks()
 T CBaseEntity::IsStandable() const
 T CBaseEntity::IsTemplate()
 T CBaseEntity::IsTriggered(CBaseEntity*)
 T CBaseEntity::IsViewable()
 T CBaseEntity::IsWearable() const
 T CBaseEntity::KeyValue(char const*, Vector const&)
 T CBaseEntity::KeyValue(char const*, char const*)
 T CBaseEntity::KeyValue(char const*, float)
 T CBaseEntity::LocalEyeAngles()
 T CBaseEntity::MakeDormant()
 T CBaseEntity::MakeTracer(Vector const&, CGameTrace const&, int)
 T CBaseEntity::ModifyEmitSoundParams(EmitSound_t&)
 T CBaseEntity::ModifyFireBulletsDamage(CTakeDamageInfo*)
 T CBaseEntity::ModifyOrAppendCriteria(AI_CriteriaSet&)
 T CBaseEntity::MoveDone()
 T CBaseEntity::MyCombatCharacterPointer()
 T CBaseEntity::MyCombatWeaponPointer()
 T CBaseEntity::MyNPCPointer()
 T CBaseEntity::MyNextBotPointer()
 T CBaseEntity::NameMatchesComplex(char const*)
 T CBaseEntity::NetworkStateChanged_m_fFlags()
 T CBaseEntity::NetworkStateChanged_m_fFlags(void*)
 T CBaseEntity::NetworkStateChanged_m_flFriction()
 T CBaseEntity::NetworkStateChanged_m_flFriction(void*)
 T CBaseEntity::NetworkStateChanged_m_hGroundEntity()
 T CBaseEntity::NetworkStateChanged_m_hGroundEntity(void*)
 T CBaseEntity::NetworkStateChanged_m_iHealth()
 T CBaseEntity::NetworkStateChanged_m_iHealth(void*)
 T CBaseEntity::NetworkStateChanged_m_iMaxHealth()
 T CBaseEntity::NetworkStateChanged_m_iMaxHealth(void*)
 T CBaseEntity::NetworkStateChanged_m_lifeState()
 T CBaseEntity::NetworkStateChanged_m_lifeState(void*)
 T CBaseEntity::NetworkStateChanged_m_nNextThinkTick()
 T CBaseEntity::NetworkStateChanged_m_nNextThinkTick(void*)
 T CBaseEntity::NetworkStateChanged_m_nWaterLevel()
 T CBaseEntity::NetworkStateChanged_m_nWaterLevel(void*)
 T CBaseEntity::NetworkStateChanged_m_takedamage()
 T CBaseEntity::NetworkStateChanged_m_takedamage(void*)
 T CBaseEntity::NetworkStateChanged_m_vecBaseVelocity()
 T CBaseEntity::NetworkStateChanged_m_vecBaseVelocity(void*)
 T CBaseEntity::NetworkStateChanged_m_vecVelocity()
 T CBaseEntity::NetworkStateChanged_m_vecVelocity(void*)
 T CBaseEntity::NetworkStateChanged_m_vecViewOffset()
 T CBaseEntity::NetworkStateChanged_m_vecViewOffset(void*)
 T CBaseEntity::NetworkVar_m_Collision::NetworkStateChanged()
 T CBaseEntity::NetworkVar_m_Collision::NetworkStateChanged(void*)
 T CBaseEntity::NotifySystemEvent(CBaseEntity*, notify_system_event_t, notify_system_event_params_t const&)
 T CBaseEntity::ObjectCaps()
 T CBaseEntity::OnControls(CBaseEntity*)
 T CBaseEntity::OnEntityEvent(EntityEvent_t, void*)
 T CBaseEntity::OnNewModel()
 T CBaseEntity::OnRestore()
 T CBaseEntity::OnSave(IEntitySaveUtils*)
 T CBaseEntity::OnTakeDamage(CTakeDamageInfo const&)
 T CBaseEntity::ParseMapData(CEntityMapData*)
 T CBaseEntity::PassesDamageFilter(CTakeDamageInfo const&)
 T CBaseEntity::PerformCustomPhysics(Vector*, Vector*, QAngle*, QAngle*)
 T CBaseEntity::PerformPush(float)
 T CBaseEntity::PhysicsAddGravityMove(Vector&)
 T CBaseEntity::PhysicsAddHalfGravity(float)
 T CBaseEntity::PhysicsCheckForEntityUntouch()
 T CBaseEntity::PhysicsCheckVelocity()
 T CBaseEntity::PhysicsCheckWater()
 T CBaseEntity::PhysicsCheckWaterTransition()
 T CBaseEntity::PhysicsClipVelocity(Vector const&, Vector const&, Vector&, float)
 T CBaseEntity::PhysicsCustom()
 T CBaseEntity::PhysicsDispatchThink(void (CBaseEntity::*)())
 T CBaseEntity::PhysicsImpact(CBaseEntity*, CGameTrace&)
 T CBaseEntity::PhysicsMarkEntitiesAsTouching(CBaseEntity*, CGameTrace&)
 T CBaseEntity::PhysicsMarkEntitiesAsTouchingEventDriven(CBaseEntity*, CGameTrace&)
 T CBaseEntity::PhysicsMarkEntityAsTouched(CBaseEntity*)
 T CBaseEntity::PhysicsNoclip()
 T CBaseEntity::PhysicsNone()
 T CBaseEntity::PhysicsNotifyOtherOfGroundRemoval(CBaseEntity*, CBaseEntity*)
 T CBaseEntity::PhysicsNotifyOtherOfUntouch(CBaseEntity*, CBaseEntity*)
 T CBaseEntity::PhysicsPushEntity(Vector const&, CGameTrace*)
 T CBaseEntity::PhysicsPushMove(float)
 T CBaseEntity::PhysicsPushRotate(float)
 T CBaseEntity::PhysicsPusher()
 T CBaseEntity::PhysicsRelinkChildren(float)
 T CBaseEntity::PhysicsRemoveGroundList(CBaseEntity*)
 T CBaseEntity::PhysicsRemoveTouchedList(CBaseEntity*)
 T CBaseEntity::PhysicsRemoveToucher(CBaseEntity*, touchlink_t*)
 T CBaseEntity::PhysicsRigidChild()
 T CBaseEntity::PhysicsRunSpecificThink(int, void (CBaseEntity::*)())
 T CBaseEntity::PhysicsRunThink(CBaseEntity::thinkmethods_t)
 T CBaseEntity::PhysicsSimulate()
 T CBaseEntity::PhysicsSolidMaskForEntity() const
 T CBaseEntity::PhysicsSplash(Vector const&, Vector const&, float, float)
 T CBaseEntity::PhysicsStep()
 T CBaseEntity::PhysicsStepRecheckGround()
 T CBaseEntity::PhysicsStepRunTimestep(float)
 T CBaseEntity::PhysicsToss()
 T CBaseEntity::PhysicsTouchTriggers(Vector const*)
 T CBaseEntity::PhysicsTryMove(float, CGameTrace*)
 T CBaseEntity::PostClientActive()
 T CBaseEntity::PostConstructor(char const*)
 T CBaseEntity::Precache()
 T CBaseEntity::PrecacheModel(char const*, bool)
 T CBaseEntity::PrecacheModelComponents(int)
 T CBaseEntity::PrecacheScriptSound(char const*)
 T CBaseEntity::PrefetchScriptSound(char const*)
 T CBaseEntity::ReadKeyField(char const*, variant_t*)
 T CBaseEntity::RecalcHasPlayerChildBit()
 T CBaseEntity::RegisterThinkContext(char const*)
 T CBaseEntity::Remove()
 T CBaseEntity::RemoveAllDecals()
 T CBaseEntity::RemoveDeferred()
 T CBaseEntity::RemoveFlag(int)
 T CBaseEntity::RemoveRecipientsIfNotCloseCaptioning(CRecipientFilter&)
 T CBaseEntity::RequiredEdictIndex()
 T CBaseEntity::ResolveFlyCollisionBounce(CGameTrace&, Vector&, float)
 T CBaseEntity::ResolveFlyCollisionCustom(CGameTrace&, Vector&)
 T CBaseEntity::ResolveFlyCollisionSlide(CGameTrace&, Vector&)
 T CBaseEntity::Respawn()
 T CBaseEntity::Restore(IRestore&)
 T CBaseEntity::SUB_AllowedToFade()
 T CBaseEntity::SUB_CallUseToggle()
 T CBaseEntity::SUB_DoNothing()
 T CBaseEntity::SUB_FadeOut()
 T CBaseEntity::SUB_PerformFadeOut()
 T CBaseEntity::SUB_Remove()
 T CBaseEntity::SUB_StartFadeOut(float, bool)
 T CBaseEntity::SUB_StartFadeOutInstant()
 T CBaseEntity::SUB_Vanish()
 T CBaseEntity::Save(ISave&)
 T CBaseEntity::SendDebugPivotOverlay()
 T CBaseEntity::SendOnKilledGameEvent(CTakeDamageInfo const&)
 T CBaseEntity::SetAIWalkable(bool)
 T CBaseEntity::SetAbsAngles(QAngle const&)
 T CBaseEntity::SetAbsOrigin(Vector const&)
 T CBaseEntity::SetAbsVelocity(Vector const&)
 T CBaseEntity::SetAllowPrecache(bool)
 T CBaseEntity::SetBlocksLOS(bool)
 T CBaseEntity::SetCheckUntouch(bool)
 T CBaseEntity::SetClassname(char const*)
 T CBaseEntity::SetCollisionBounds(Vector const&, Vector const&)
 T CBaseEntity::SetCollisionBoundsFromModel()
 T CBaseEntity::SetCollisionGroup(int)
 T CBaseEntity::SetDamage(float)
 T CBaseEntity::SetEffectEntity(CBaseEntity*)
 T CBaseEntity::SetEffects(int)
 T CBaseEntity::SetGroundChangeTime(float)
 T CBaseEntity::SetGroundEntity(CBaseEntity*)
 T CBaseEntity::SetLastThink(int, float)
 T CBaseEntity::SetLocalAngles(QAngle const&)
 T CBaseEntity::SetLocalAngularVelocity(QAngle const&)
 T CBaseEntity::SetLocalOrigin(Vector const&)
 T CBaseEntity::SetLocalVelocity(Vector const&)
 T CBaseEntity::SetModel(char const*)
 T CBaseEntity::SetModelIndex(int)
 T CBaseEntity::SetModelIndexOverride(int, int)
 T CBaseEntity::SetMoveDoneTime(float)
 T CBaseEntity::SetMoveType(MoveType_t, MoveCollide_t)
 T CBaseEntity::SetNextThink(float, char const*)
 T CBaseEntity::SetNextThink(int, float)
 T CBaseEntity::SetOwnerEntity(CBaseEntity*)
 T CBaseEntity::SetParent(CBaseEntity*, int)
 T CBaseEntity::SetParent(string_t, CBaseEntity*, int)
 T CBaseEntity::SetParentAttachment(char const*, char const*, bool)
 T CBaseEntity::SetPredictionEligible(bool)
 T CBaseEntity::SetPredictionRandomSeed(CUserCmd const*)
 T CBaseEntity::SetRefEHandle(CBaseHandle const&)
 T CBaseEntity::SetScaledPhysics(IPhysicsObject*)
 T CBaseEntity::SetShadowCastDistance(float, float)
 T CBaseEntity::SetSize(Vector const&, Vector const&)
 T CBaseEntity::SetTransmit(CCheckTransmitInfo*, bool)
 T CBaseEntity::SetTransmitState(int)
 T CBaseEntity::SetViewOffset(Vector const&)
 T CBaseEntity::SetWaterType(int)
 T CBaseEntity::ShadowCastDistThink()
 T CBaseEntity::ShouldAttractAutoAim(CBaseEntity*)
 T CBaseEntity::ShouldBlockNav() const
 T CBaseEntity::ShouldCollide(int, int) const
 T CBaseEntity::ShouldDrawWaterImpacts()
 T CBaseEntity::ShouldSavePhysics()
 T CBaseEntity::ShouldToggle(USE_TYPE, int)
 T CBaseEntity::ShouldTransmit(CCheckTransmitInfo const*)
 T CBaseEntity::SimulateAngles(float)
 T CBaseEntity::Spawn()
 T CBaseEntity::Splash()
 T CBaseEntity::StartBlocked(CBaseEntity*)
 T CBaseEntity::StartTouch(CBaseEntity*)
 T CBaseEntity::StepSimulationThink(float)
 T CBaseEntity::StopFollowingEntity()
 T CBaseEntity::StopLoopingSounds()
 T CBaseEntity::StopSound(char const*)
 T CBaseEntity::StopSound(int, char const*)
 T CBaseEntity::StopSound(int, int, char const*)
 T CBaseEntity::TakeDamage(CTakeDamageInfo const&)
 T CBaseEntity::TakeHealth(float, int)
 T CBaseEntity::TeamID() const
 T CBaseEntity::Teleport(Vector const*, QAngle const*, Vector const*)
 T CBaseEntity::TestCollision(Ray_t const&, unsigned int, CGameTrace&)
 T CBaseEntity::TestHitboxes(Ray_t const&, unsigned int, CGameTrace&)
 T CBaseEntity::Think()
 T CBaseEntity::ThinkSet(void (CBaseEntity::*)(), float, char const*)
 T CBaseEntity::ToggleFlag(int)
 T CBaseEntity::Touch(CBaseEntity*)
 T CBaseEntity::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
 T CBaseEntity::TraceAttackToTriggers(CTakeDamageInfo const&, Vector const&, Vector const&, Vector const&)
 T CBaseEntity::TraceBleed(float, Vector const&, CGameTrace*, int)
 T CBaseEntity::UnsetPlayerSimulated()
 T CBaseEntity::UpdateBaseVelocity()
 T CBaseEntity::UpdateOnRemove()
 T CBaseEntity::UpdatePhysicsShadowToCurrentPosition(float)
 T CBaseEntity::UpdateShotStatistics(CGameTrace const&)
 T CBaseEntity::UpdateTransmitState()
 T CBaseEntity::UpdateWaterState()
 T CBaseEntity::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CBaseEntity::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CBaseEntity::VPhysicsDestroyObject()
 T CBaseEntity::VPhysicsFriction(IPhysicsObject*, float, int, int)
 T CBaseEntity::VPhysicsGetObjectList(IPhysicsObject**, int)
 T CBaseEntity::VPhysicsInitNormal(SolidType_t, int, bool, solid_t*)
 T CBaseEntity::VPhysicsInitShadow(bool, bool, solid_t*)
 T CBaseEntity::VPhysicsInitStatic()
 T CBaseEntity::VPhysicsIsFlesh()
 T CBaseEntity::VPhysicsSetObject(IPhysicsObject*)
 T CBaseEntity::VPhysicsShadowCollision(int, gamevcollisionevent_t*)
 T CBaseEntity::VPhysicsShadowUpdate(IPhysicsObject*)
 T CBaseEntity::VPhysicsSwapObject(IPhysicsObject*)
 T CBaseEntity::VPhysicsTakeDamage(CTakeDamageInfo const&)
 T CBaseEntity::VPhysicsUpdate(IPhysicsObject*)
 T CBaseEntity::VPhysicsUpdatePusher(IPhysicsObject*)
 T CBaseEntity::ViewPunch(QAngle const&)
 T CBaseEntity::WorldSpaceCenter() const
 T CBaseEntity::YouForgotToImplementOrDeclareServerClass()
 T CBaseEntity::operator delete(void*)
 T CBaseEntity::operator new(unsigned long)
 T CBaseEntity::~CBaseEntity()
 T CBaseEntityClassList::CBaseEntityClassList()
 T CBaseEntityClassList::~CBaseEntityClassList()
 T CBaseEntityList::AddEntityAtSlot(IHandleEntity*, int, int)
 T CBaseEntityList::AddNetworkableEntity(IHandleEntity*, int, int)
 T CBaseEntityList::AddNonNetworkableEntity(IHandleEntity*)
 T CBaseEntityList::CBaseEntityList()
 T CBaseEntityList::OnAddEntity(IHandleEntity*, CBaseHandle)
 T CBaseEntityList::OnRemoveEntity(IHandleEntity*, CBaseHandle)
 T CBaseEntityList::RemoveEntity(CBaseHandle)
 T CBaseEntityList::RemoveEntityAtSlot(int)
 T CBaseEntityList::~CBaseEntityList()
 T CBaseEntityModelLoadProxy::Handler::OnModelLoadComplete(model_t const*)
 T CBaseEntityOutput::FireOutput(variant_t, CBaseEntity*, CBaseEntity*, float)
 T CBaseEntityOutput::GetMaxDelay()
 T CBaseEntityOutput::NumberOfElements()
 T CBaseEntityOutput::Restore(IRestore&, int)
 T CBaseEntityOutput::~CBaseEntityOutput()
 T CBaseFilter::GetDataDescMap()
 T CBaseFilter::InputTestActivator(inputdata_t&)
 T CBaseFilter::PassesDamageFilter(CTakeDamageInfo const&)
 T CBaseFilter::PassesDamageFilterImpl(CTakeDamageInfo const&)
 T CBaseFilter::PassesFilter(CBaseEntity*, CBaseEntity*)
 T CBaseFilter::PassesFilterImpl(CBaseEntity*, CBaseEntity*)
 T CBaseFilter::~CBaseFilter()
 T CBaseFire::CBaseFire()
 T CBaseFire::Enable(int)
 T CBaseFire::GetDataDescMap()
 T CBaseFire::Scale(float, float)
 T CBaseFire::Scale(float, float, float)
 T CBaseFire::~CBaseFire()
 T CBaseFlex* _CreateEntityTemplate<CBaseFlex>(CBaseFlex*, char const*)
 T CBaseFlex::AddFlexAnimation(CSceneEventInfo*)
 T CBaseFlex::AddFlexSetting(char const*, float, flexsettinghdr_t const*, bool)
 T CBaseFlex::AddSceneEvent(CChoreoScene*, CChoreoEvent*, CBaseEntity*)
 T CBaseFlex::CBaseFlex()
 T CBaseFlex::CheckSceneEvent(float, CChoreoScene*, CChoreoEvent*)
 T CBaseFlex::CheckSceneEventCompletion(CSceneEventInfo*, float, CChoreoScene*, CChoreoEvent*)
 T CBaseFlex::ClearSceneEvent(CSceneEventInfo*, bool, bool)
 T CBaseFlex::ClearSceneEvents(CChoreoScene*, bool)
 T CBaseFlex::DoBodyLean()
 T CBaseFlex::EnsureTranslations(flexsettinghdr_t const*)
 T CBaseFlex::EnterSceneSequence(CChoreoScene*, CChoreoEvent*, bool)
 T CBaseFlex::FindFlexController(char const*)
 T CBaseFlex::FindSceneFile(char const*)
 T CBaseFlex::FlexControllerLocalToGlobal(flexsettinghdr_t const*, int)
 T CBaseFlex::FlexSettingLessFunc(CBaseFlex::FS_LocalToGlobal_t const&, CBaseFlex::FS_LocalToGlobal_t const&)
 T CBaseFlex::GetDataDescMap()
 T CBaseFlex::GetFlexWeight(LocalFlexController_t)
 T CBaseFlex::GetServerClass()
 T CBaseFlex::GetSpecialDSP()
 T CBaseFlex::HandleStartGestureSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*, CChoreoActor*)
 T CBaseFlex::HandleStartSequenceSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*, CChoreoActor*)
 T CBaseFlex::PermitResponse(float)
 T CBaseFlex::PlayAutoGeneratedSoundScene(char const*)
 T CBaseFlex::PlayScene(char const*, float, AI_Response*, IRecipientFilter*)
 T CBaseFlex::ProcessFacingSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*)
 T CBaseFlex::ProcessFlexAnimationSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*)
 T CBaseFlex::ProcessFlexSettingSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*)
 T CBaseFlex::ProcessGestureSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*)
 T CBaseFlex::ProcessLookAtSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*)
 T CBaseFlex::ProcessMoveToSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*)
 T CBaseFlex::ProcessSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*)
 T CBaseFlex::ProcessSceneEvents()
 T CBaseFlex::ProcessSequenceSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*)
 T CBaseFlex::RemoveChoreoScene(CChoreoScene*, bool)
 T CBaseFlex::RemoveSceneEvent(CChoreoScene*, CChoreoEvent*, bool)
 T CBaseFlex::SetFlexWeight(LocalFlexController_t, float)
 T CBaseFlex::SetModel(char const*)
 T CBaseFlex::SetPermitResponse(float)
 T CBaseFlex::SetViewtarget(Vector const&)
 T CBaseFlex::StartChoreoScene(CChoreoScene*)
 T CBaseFlex::StartSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*, CChoreoActor*, CBaseEntity*)
 T CBaseFlex::Teleport(Vector const*, QAngle const*, Vector const*)
 T CBaseFlex::YouForgotToImplementOrDeclareServerClass()
 T CBaseFlex::~CBaseFlex()
 T CBaseGameStats::AddDataForSend(KeyValues*, StatSendType_t)
 T CBaseGameStats::AppendCustomDataToSaveBuffer(CUtlBuffer&)
 T CBaseGameStats::AutoSave_OnInit()
 T CBaseGameStats::AutoSave_OnLevelInit()
 T CBaseGameStats::AutoSave_OnLevelShutdown()
 T CBaseGameStats::AutoSave_OnMapChange()
 T CBaseGameStats::AutoSave_OnShutdown()
 T CBaseGameStats::AutoUpload_OnInit()
 T CBaseGameStats::AutoUpload_OnLevelInit()
 T CBaseGameStats::AutoUpload_OnLevelShutdown()
 T CBaseGameStats::AutoUpload_OnMapChange()
 T CBaseGameStats::AutoUpload_OnShutdown()
 T CBaseGameStats::Clear()
 T CBaseGameStats::Event_Commentary()
 T CBaseGameStats::Event_CrateSmashed()
 T CBaseGameStats::Event_Credits()
 T CBaseGameStats::Event_DecrementPlayerEnteredNoClip(CBasePlayer*)
 T CBaseGameStats::Event_FlippedVehicle(CBasePlayer*, CPropVehicleDriveable*)
 T CBaseGameStats::Event_IncrementCountedStatistic(Vector const&, char const*, float)
 T CBaseGameStats::Event_Init()
 T CBaseGameStats::Event_LevelInit()
 T CBaseGameStats::Event_LevelShutdown(float)
 T CBaseGameStats::Event_LoadGame()
 T CBaseGameStats::Event_MapChange(char const*, char const*)
 T CBaseGameStats::Event_PlayerConnected(CBasePlayer*)
 T CBaseGameStats::Event_PlayerDamage(CBasePlayer*, CTakeDamageInfo const&)
 T CBaseGameStats::Event_PlayerDisconnected(CBasePlayer*)
 T CBaseGameStats::Event_PlayerEnteredGodMode(CBasePlayer*)
 T CBaseGameStats::Event_PlayerEnteredNoClip(CBasePlayer*)
 T CBaseGameStats::Event_PlayerKilled(CBasePlayer*, CTakeDamageInfo const&)
 T CBaseGameStats::Event_PlayerKilledOther(CBasePlayer*, CBaseEntity*, CTakeDamageInfo const&)
 T CBaseGameStats::Event_PlayerSuicide(CBasePlayer*)
 T CBaseGameStats::Event_PlayerTraveled(CBasePlayer*, float, bool, bool)
 T CBaseGameStats::Event_PreSaveGameLoaded(char const*, bool)
 T CBaseGameStats::Event_Punted(CBaseEntity*)
 T CBaseGameStats::Event_SaveGame()
 T CBaseGameStats::Event_Shutdown()
 T CBaseGameStats::Event_WeaponFired(CBasePlayer*, bool, char const*)
 T CBaseGameStats::Event_WeaponHit(CBasePlayer*, bool, char const*, CTakeDamageInfo const&)
 T CBaseGameStats::Event_WindowShattered(CBasePlayer*)
 T CBaseGameStats::GetStatSaveFileName()
 T CBaseGameStats::GetStatUploadRegistryKeyName()
 T CBaseGameStats::HaveValidData()
 T CBaseGameStats::LoadCustomDataFromBuffer(CUtlBuffer&)
 T CBaseGameStats::LoadFromFile()
 T CBaseGameStats::LoadingEvent_PlayerIDDifferentThanLoadedStats()
 T CBaseGameStats::OnInit(CBaseGameStats*, char const*)
 T CBaseGameStats::SaveToFileNOW(bool)
 T CBaseGameStats::SetHL2UnlockedChapterStatistic()
 T CBaseGameStats::ShouldSendDataOnAppShutdown()
 T CBaseGameStats::ShouldSendDataOnLevelShutdown()
 T CBaseGameStats::ShouldTrackStandardStats()
 T CBaseGameStats::StatTrackingEnabledForMod()
 T CBaseGameStats::StatsLog(char const*, ...)
 T CBaseGameStats::UploadStatsFileNOW()
 T CBaseGameStats::UseOldFormat()
 T CBaseGameStats::UserPlayedAllTheMaps()
 T CBaseGameStats::~CBaseGameStats()
 T CBaseGameStats_Driver::CollectData(StatSendType_t)
 T CBaseGameStats_Driver::FrameUpdatePostEntityThink()
 T CBaseGameStats_Driver::Init()
 T CBaseGameStats_Driver::LevelInitPreEntity()
 T CBaseGameStats_Driver::LevelShutdown()
 T CBaseGameStats_Driver::LevelShutdownPreClearSteamAPIContext()
 T CBaseGameStats_Driver::LevelShutdownPreEntity()
 T CBaseGameStats_Driver::OnRestore()
 T CBaseGameStats_Driver::OnSave()
 T CBaseGameStats_Driver::PossibleMapChange()
 T CBaseGameStats_Driver::ResetData()
 T CBaseGameStats_Driver::SendData()
 T CBaseGameStats_Driver::Shutdown()
 T CBaseGameStats_Driver::~CBaseGameStats_Driver()
 T CBaseGameSystem::FrameUpdatePostEntityThink()
 T CBaseGameSystem::FrameUpdatePreEntityThink()
 T CBaseGameSystem::Init()
 T CBaseGameSystem::IsPerFrame()
 T CBaseGameSystem::LevelInitPostEntity()
 T CBaseGameSystem::LevelInitPreEntity()
 T CBaseGameSystem::LevelShutdownPostEntity()
 T CBaseGameSystem::LevelShutdownPreClearSteamAPIContext()
 T CBaseGameSystem::LevelShutdownPreEntity()
 T CBaseGameSystem::Name()
 T CBaseGameSystem::OnRestore()
 T CBaseGameSystem::OnSave()
 T CBaseGameSystem::PostInit()
 T CBaseGameSystem::PreClientUpdate()
 T CBaseGameSystem::SafeRemoveIfDesired()
 T CBaseGameSystem::Shutdown()
 T CBaseGameSystemPerFrame::FrameUpdatePostEntityThink()
 T CBaseGameSystemPerFrame::FrameUpdatePreEntityThink()
 T CBaseGameSystemPerFrame::Init()
 T CBaseGameSystemPerFrame::IsPerFrame()
 T CBaseGameSystemPerFrame::LevelInitPostEntity()
 T CBaseGameSystemPerFrame::LevelInitPreEntity()
 T CBaseGameSystemPerFrame::LevelShutdownPostEntity()
 T CBaseGameSystemPerFrame::LevelShutdownPreClearSteamAPIContext()
 T CBaseGameSystemPerFrame::LevelShutdownPreEntity()
 T CBaseGameSystemPerFrame::OnRestore()
 T CBaseGameSystemPerFrame::OnSave()
 T CBaseGameSystemPerFrame::PostInit()
 T CBaseGameSystemPerFrame::PreClientUpdate()
 T CBaseGameSystemPerFrame::SafeRemoveIfDesired()
 T CBaseGameSystemPerFrame::Shutdown()
 T CBaseGrenade::BloodColor()
 T CBaseGrenade::BounceSound()
 T CBaseGrenade::BounceTouch(CBaseEntity*)
 T CBaseGrenade::CBaseGrenade()
 T CBaseGrenade::DangerSoundThink()
 T CBaseGrenade::Detonate()
 T CBaseGrenade::DetonateUse(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CBaseGrenade::Event_Killed(CTakeDamageInfo const&)
 T CBaseGrenade::Explode(CGameTrace*, int)
 T CBaseGrenade::ExplodeTouch(CBaseEntity*)
 T CBaseGrenade::GetBlastForce()
 T CBaseGrenade::GetDamage()
 T CBaseGrenade::GetDamageRadius()
 T CBaseGrenade::GetDataDescMap()
 T CBaseGrenade::GetServerClass()
 T CBaseGrenade::GetShakeAmplitude()
 T CBaseGrenade::GetShakeRadius()
 T CBaseGrenade::GetThrower()
 T CBaseGrenade::NetworkStateChanged_m_fFlags()
 T CBaseGrenade::NetworkStateChanged_m_fFlags(void*)
 T CBaseGrenade::NetworkStateChanged_m_vecVelocity()
 T CBaseGrenade::NetworkStateChanged_m_vecVelocity(void*)
 T CBaseGrenade::ObjectCaps()
 T CBaseGrenade::PreDetonate()
 T CBaseGrenade::Precache()
 T CBaseGrenade::SetDamage(float)
 T CBaseGrenade::SetDamageRadius(float)
 T CBaseGrenade::SetThrower(CBaseCombatCharacter*)
 T CBaseGrenade::SlideTouch(CBaseEntity*)
 T CBaseGrenade::Smoke()
 T CBaseGrenade::TumbleThink()
 T CBaseGrenade::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CBaseGrenade::YouForgotToImplementOrDeclareServerClass()
 T CBaseGrenade::~CBaseGrenade()
 T CBaseGrenadeConcussion::ExplodeConcussion(CBaseEntity*)
 T CBaseGrenadeConcussion::FallThink()
 T CBaseGrenadeConcussion::GetDataDescMap()
 T CBaseGrenadeConcussion::Precache()
 T CBaseGrenadeConcussion::Spawn()
 T CBaseGrenadeConcussion::~CBaseGrenadeConcussion()
 T CBaseGrenadeContact::Precache()
 T CBaseGrenadeContact::Spawn()
 T CBaseGrenadeContact::~CBaseGrenadeContact()
 T CBaseGrenadeTimed::Precache()
 T CBaseGrenadeTimed::Spawn()
 T CBaseGrenadeTimed::~CBaseGrenadeTimed()
 T CBaseHL2MPBludgeonWeapon::CBaseHL2MPBludgeonWeapon()
 T CBaseHL2MPBludgeonWeapon::ChooseIntersectionPointAndActivity(CGameTrace&, Vector const&, Vector const&, CBasePlayer*)
 T CBaseHL2MPBludgeonWeapon::GetDamageForActivity(Activity)
 T CBaseHL2MPBludgeonWeapon::GetFireRate()
 T CBaseHL2MPBludgeonWeapon::GetPrimaryAttackActivity()
 T CBaseHL2MPBludgeonWeapon::GetRange()
 T CBaseHL2MPBludgeonWeapon::GetSecondaryAttackActivity()
 T CBaseHL2MPBludgeonWeapon::GetServerClass()
 T CBaseHL2MPBludgeonWeapon::Hit(CGameTrace&, Activity)
 T CBaseHL2MPBludgeonWeapon::ImpactEffect(CGameTrace&)
 T CBaseHL2MPBludgeonWeapon::ImpactWater(Vector const&, Vector const&)
 T CBaseHL2MPBludgeonWeapon::ItemPostFrame()
 T CBaseHL2MPBludgeonWeapon::Precache()
 T CBaseHL2MPBludgeonWeapon::PrimaryAttack()
 T CBaseHL2MPBludgeonWeapon::SecondaryAttack()
 T CBaseHL2MPBludgeonWeapon::Spawn()
 T CBaseHL2MPBludgeonWeapon::Swing(int)
 T CBaseHL2MPBludgeonWeapon::YouForgotToImplementOrDeclareServerClass()
 T CBaseHL2MPBludgeonWeapon::~CBaseHL2MPBludgeonWeapon()
 T CBaseHL2MPCombatWeapon::AddViewmodelBob(CBaseViewModel*, Vector&, QAngle&)
 T CBaseHL2MPCombatWeapon::CBaseHL2MPCombatWeapon()
 T CBaseHL2MPCombatWeapon::CalcViewmodelBob()
 T CBaseHL2MPCombatWeapon::Deploy()
 T CBaseHL2MPCombatWeapon::GetBulletSpread(WeaponProficiency_t)
 T CBaseHL2MPCombatWeapon::GetDataDescMap()
 T CBaseHL2MPCombatWeapon::GetProficiencyValues()
 T CBaseHL2MPCombatWeapon::GetServerClass()
 T CBaseHL2MPCombatWeapon::GetSpreadBias(WeaponProficiency_t)
 T CBaseHL2MPCombatWeapon::Holster(CBaseCombatWeapon*)
 T CBaseHL2MPCombatWeapon::ItemHolsterFrame()
 T CBaseHL2MPCombatWeapon::Lower()
 T CBaseHL2MPCombatWeapon::Ready()
 T CBaseHL2MPCombatWeapon::WeaponIdle()
 T CBaseHL2MPCombatWeapon::WeaponShouldBeLowered()
 T CBaseHL2MPCombatWeapon::YouForgotToImplementOrDeclareServerClass()
 T CBaseHL2MPCombatWeapon::~CBaseHL2MPCombatWeapon()
 T CBaseHLCombatWeapon::AddViewmodelBob(CBaseViewModel*, Vector&, QAngle&)
 T CBaseHLCombatWeapon::CalcViewmodelBob()
 T CBaseHLCombatWeapon::CanLower()
 T CBaseHLCombatWeapon::Deploy()
 T CBaseHLCombatWeapon::GetBulletSpread(WeaponProficiency_t)
 T CBaseHLCombatWeapon::GetDataDescMap()
 T CBaseHLCombatWeapon::GetDefaultProficiencyValues()
 T CBaseHLCombatWeapon::GetProficiencyValues()
 T CBaseHLCombatWeapon::GetServerClass()
 T CBaseHLCombatWeapon::GetSpreadBias(WeaponProficiency_t)
 T CBaseHLCombatWeapon::Holster(CBaseCombatWeapon*)
 T CBaseHLCombatWeapon::ItemHolsterFrame()
 T CBaseHLCombatWeapon::Lower()
 T CBaseHLCombatWeapon::Ready()
 T CBaseHLCombatWeapon::WeaponIdle()
 T CBaseHLCombatWeapon::WeaponShouldBeLowered()
 T CBaseHLCombatWeapon::YouForgotToImplementOrDeclareServerClass()
 T CBaseHLCombatWeapon::~CBaseHLCombatWeapon()
 T CBaseHeadcrab::AllowedToIgnite()
 T CBaseHeadcrab::AttackSound()
 T CBaseHeadcrab::BeginClimbFromCanister()
 T CBaseHeadcrab::BodyTarget(Vector const&, bool)
 T CBaseHeadcrab::BuildScheduleTestBits()
 T CBaseHeadcrab::Burrow()
 T CBaseHeadcrab::CalcDamageInfo(CTakeDamageInfo*)
 T CBaseHeadcrab::CanBeAnEnemyOf(CBaseEntity*)
 T CBaseHeadcrab::ClampRagdollForce(Vector const&, Vector*)
 T CBaseHeadcrab::Classify()
 T CBaseHeadcrab::ClearBurrowPoint(Vector const&)
 T CBaseHeadcrab::CorpseGib(CTakeDamageInfo const&)
 T CBaseHeadcrab::CrawlFromCanister()
 T CBaseHeadcrab::CreateDust(bool)
 T CBaseHeadcrab::EliminateRollAndPitch()
 T CBaseHeadcrab::Event_Killed(CTakeDamageInfo const&)
 T CBaseHeadcrab::FValidateHintType(CAI_Hint*)
 T CBaseHeadcrab::FindBurrow(Vector const&, float, bool)
 T CBaseHeadcrab::GatherConditions()
 T CBaseHeadcrab::GetAutoAimRadius()
 T CBaseHeadcrab::GetClassScheduleIdSpace()
 T CBaseHeadcrab::GetDataDescMap()
 T CBaseHeadcrab::GetReactionDelay(CBaseEntity*)
 T CBaseHeadcrab::GetSchedulingErrorName()
 T CBaseHeadcrab::HandleAnimEvent(animevent_t*)
 T CBaseHeadcrab::HandleInteraction(int, void*, CBaseCombatCharacter*)
 T CBaseHeadcrab::HasHeadroom()
 T CBaseHeadcrab::Ignite(float, bool, float, bool)
 T CBaseHeadcrab::ImpactSound()
 T CBaseHeadcrab::InitCustomSchedules()
 T CBaseHeadcrab::InnateRange1MaxRange()
 T CBaseHeadcrab::InnateRange1MinRange()
 T CBaseHeadcrab::InputBurrow(inputdata_t&)
 T CBaseHeadcrab::InputBurrowImmediate(inputdata_t&)
 T CBaseHeadcrab::InputDropFromCeiling(inputdata_t&)
 T CBaseHeadcrab::InputStartHangingFromCeiling(inputdata_t&)
 T CBaseHeadcrab::InputUnburrow(inputdata_t&)
 T CBaseHeadcrab::IsFirmlyOnGround()
 T CBaseHeadcrab::JumpAttack(bool, Vector const&, bool)
 T CBaseHeadcrab::JumpFromCanister()
 T CBaseHeadcrab::JumpToBurrowHint(CAI_Hint*)
 T CBaseHeadcrab::Leap(Vector const&)
 T CBaseHeadcrab::LeapTouch(CBaseEntity*)
 T CBaseHeadcrab::LoadedSchedules()
 T CBaseHeadcrab::MaxYawSpeed()
 T CBaseHeadcrab::OnChangeActivity(Activity)
 T CBaseHeadcrab::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CBaseHeadcrab::PlayerHasIlluminatedNPC(CBasePlayer*, float)
 T CBaseHeadcrab::Precache()
 T CBaseHeadcrab::PrescheduleThink()
 T CBaseHeadcrab::RangeAttack1Conditions(float, float)
 T CBaseHeadcrab::RunTask(Task_t const*)
 T CBaseHeadcrab::SelectFailSchedule(int, int, int)
 T CBaseHeadcrab::SelectSchedule()
 T CBaseHeadcrab::SetBurrowed(bool)
 T CBaseHeadcrab::Spawn()
 T CBaseHeadcrab::SquadSlotName(int)
 T CBaseHeadcrab::StartTask(Task_t const*)
 T CBaseHeadcrab::TelegraphSound()
 T CBaseHeadcrab::ThrowAt(Vector const&)
 T CBaseHeadcrab::ThrowThink()
 T CBaseHeadcrab::Touch(CBaseEntity*)
 T CBaseHeadcrab::TouchDamage(CBaseEntity*)
 T CBaseHeadcrab::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
 T CBaseHeadcrab::TranslateSchedule(int)
 T CBaseHeadcrab::Unburrow()
 T CBaseHeadcrab::ValidBurrowPoint(Vector const&)
 T CBaseHeadcrab::~CBaseHeadcrab()
 T CBaseHelicopter::AimRocketGun()
 T CBaseHelicopter::ApplyGeneralDrag()
 T CBaseHelicopter::ApplySidewaysDrag(Vector const&)
 T CBaseHelicopter::BloodColor()
 T CBaseHelicopter::CBaseHelicopter()
 T CBaseHelicopter::CallDyingThink()
 T CBaseHelicopter::ChooseEnemy()
 T CBaseHelicopter::Classify()
 T CBaseHelicopter::ComputeActualTargetPosition(float, float, float, Vector*, bool)
 T CBaseHelicopter::CrashTouch(CBaseEntity*)
 T CBaseHelicopter::DelayedKillThink()
 T CBaseHelicopter::DoRotorPhysicsPush(Vector const&, float)
 T CBaseHelicopter::DoWashPush(washentity_t*, Vector const&)
 T CBaseHelicopter::DoWashPushOnAirboat(CBaseEntity*, Vector const&, float)
 T CBaseHelicopter::DrawDebugGeometryOverlays()
 T CBaseHelicopter::DrawRotorWash(float, Vector const&)
 T CBaseHelicopter::DyingThink()
 T CBaseHelicopter::EnemySearchDistance()
 T CBaseHelicopter::Event_Killed(CTakeDamageInfo const&)
 T CBaseHelicopter::FireGun()
 T CBaseHelicopter::FireRocket(Vector, Vector)
 T CBaseHelicopter::FireWeapons()
 T CBaseHelicopter::Flight()
 T CBaseHelicopter::FlyTouch(CBaseEntity*)
 T CBaseHelicopter::GatherEnemyConditions(CBaseEntity*)
 T CBaseHelicopter::GetAcceleration()
 T CBaseHelicopter::GetDataDescMap()
 T CBaseHelicopter::GetMaxSpeed()
 T CBaseHelicopter::GetMaxSpeedFiring()
 T CBaseHelicopter::GetRotorVolume()
 T CBaseHelicopter::GetServerClass()
 T CBaseHelicopter::GetTrackPatherTarget(Vector*)
 T CBaseHelicopter::GetTrackPatherTargetEnt()
 T CBaseHelicopter::HelicopterPostThink()
 T CBaseHelicopter::HelicopterThink()
 T CBaseHelicopter::Hunt()
 T CBaseHelicopter::Ignite(float, bool, float, bool)
 T CBaseHelicopter::InitializeRotorSound()
 T CBaseHelicopter::InputActivate(inputdata_t&)
 T CBaseHelicopter::InputDisableRotorSound(inputdata_t&)
 T CBaseHelicopter::InputDisableRotorWash(inputdata_t&)
 T CBaseHelicopter::InputEnableRotorSound(inputdata_t&)
 T CBaseHelicopter::InputEnableRotorWash(inputdata_t&)
 T CBaseHelicopter::InputGunOff(inputdata_t&)
 T CBaseHelicopter::InputGunOn(inputdata_t&)
 T CBaseHelicopter::InputKill(inputdata_t&)
 T CBaseHelicopter::InputMissileOff(inputdata_t&)
 T CBaseHelicopter::InputMissileOn(inputdata_t&)
 T CBaseHelicopter::InputMoveSpecifiedSpeed(inputdata_t&)
 T CBaseHelicopter::InputMoveTopSpeed(inputdata_t&)
 T CBaseHelicopter::InputSetAngles(inputdata_t&)
 T CBaseHelicopter::IsCrashing()
 T CBaseHelicopter::NullThink()
 T CBaseHelicopter::Precache()
 T CBaseHelicopter::RotorWashThink()
 T CBaseHelicopter::SetTransmit(CCheckTransmitInfo*, bool)
 T CBaseHelicopter::ShowDamage()
 T CBaseHelicopter::Spawn()
 T CBaseHelicopter::Startup()
 T CBaseHelicopter::StopLoopingSounds()
 T CBaseHelicopter::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
 T CBaseHelicopter::UpdateDesiredPosition()
 T CBaseHelicopter::UpdateEnemy()
 T CBaseHelicopter::UpdateFacingDirection()
 T CBaseHelicopter::UpdateOnRemove()
 T CBaseHelicopter::UpdatePlayerDopplerShift()
 T CBaseHelicopter::UpdateRotorSoundPitch(int)
 T CBaseHelicopter::UpdateRotorWashVolume()
 T CBaseHelicopter::YouForgotToImplementOrDeclareServerClass()
 T CBaseHelicopter::~CBaseHelicopter()
 T CBaseMoveBehavior::Activate()
 T CBaseMoveBehavior::GetDataDescMap()
 T CBaseMoveBehavior::IsMoving()
 T CBaseMoveBehavior::MoveDone()
 T CBaseMoveBehavior::Spawn()
 T CBaseMoveBehavior::StartMoving(int)
 T CBaseMoveBehavior::StopMoving()
 T CBaseMoveBehavior::~CBaseMoveBehavior()
 T CBaseMultiplayerPlayer::EscortScoringThink()
 T CBaseMultiplayerPlayer::StartScoringEscortPoints(float)
 T CBaseMultiplayerPlayer::StopScoringEscortPoints()
 T CBaseNPCMaker::CanMakeNPC(bool)
 T CBaseNPCMaker::ChildPostSpawn(CAI_BaseNPC*)
 T CBaseNPCMaker::ChildPreSpawn(CAI_BaseNPC*)
 T CBaseNPCMaker::DeathNotice(CBaseEntity*)
 T CBaseNPCMaker::Disable()
 T CBaseNPCMaker::Enable()
 T CBaseNPCMaker::GetDataDescMap()
 T CBaseNPCMaker::HumanHullFits(Vector const&)
 T CBaseNPCMaker::InputAddMaxChildren(inputdata_t&)
 T CBaseNPCMaker::InputDisable(inputdata_t&)
 T CBaseNPCMaker::InputEnable(inputdata_t&)
 T CBaseNPCMaker::InputSetMaxChildren(inputdata_t&)
 T CBaseNPCMaker::InputSetMaxLiveChildren(inputdata_t&)
 T CBaseNPCMaker::InputSetSpawnFrequency(inputdata_t&)
 T CBaseNPCMaker::InputSpawnNPC(inputdata_t&)
 T CBaseNPCMaker::InputToggle(inputdata_t&)
 T CBaseNPCMaker::IsDepleted()
 T CBaseNPCMaker::MakerThink()
 T CBaseNPCMaker::ObjectCaps()
 T CBaseNPCMaker::Spawn()
 T CBaseNPCMaker::~CBaseNPCMaker()
 T CBaseParticleEntity::Activate()
 T CBaseParticleEntity::CBaseParticleEntity()
 T CBaseParticleEntity::FollowEntity(CBaseEntity*)
 T CBaseParticleEntity::GetServerClass()
 T CBaseParticleEntity::SetLifetime(float)
 T CBaseParticleEntity::Think()
 T CBaseParticleEntity::UpdateTransmitState()
 T CBaseParticleEntity::YouForgotToImplementOrDeclareServerClass()
 T CBaseParticleEntity::~CBaseParticleEntity()
 T CBasePlatTrain::GetDataDescMap()
 T CBasePlatTrain::IsTogglePlat()
 T CBasePlatTrain::KeyValue(char const*, char const*)
 T CBasePlatTrain::PlayMovingSound()
 T CBasePlatTrain::Precache()
 T CBasePlatTrain::~CBasePlatTrain()
 T CBasePlayer::Activate()
 T CBasePlayer::ActivateMovementConstraint(CBaseEntity*, Vector const&, float, float, float)
 T CBasePlayer::AddPoints(int, bool)
 T CBasePlayer::AddPointsToTeam(int, bool)
 T CBasePlayer::AdjustPlayerTimeBase(int)
 T CBasePlayer::AllowImmediateDecalPainting()
 T CBasePlayer::AttemptToExitFreezeCam()
 T CBasePlayer::AutoaimDeflection(Vector&, autoaim_params_t&)
 T CBasePlayer::BodyAngles()
 T CBasePlayer::BodyTarget(Vector const&, bool)
 T CBasePlayer::BumpWeapon(CBaseCombatWeapon*)
 T CBasePlayer::CBasePlayer()
 T CBasePlayer::CacheVehicleView()
 T CBasePlayer::CalcRoll(QAngle const&, Vector const&, float, float)
 T CBasePlayer::CanBreatheUnderwater() const
 T CBasePlayer::CanEnterVehicle(IServerVehicle*, int)
 T CBasePlayer::CanHearAndReadChatFrom(CBasePlayer*)
 T CBasePlayer::CanPickupObject(CBaseEntity*, float, float)
 T CBasePlayer::CanSpeak()
 T CBasePlayer::ChangeTeam(int)
 T CBasePlayer::ChangeTeam(int, bool, bool)
 T CBasePlayer::CheatImpulseCommands(int)
 T CBasePlayer::CheckChatText(char*, int)
 T CBasePlayer::CheckObserverSettings()
 T CBasePlayer::CheckSuitUpdate()
 T CBasePlayer::CheckTimeBasedDamage()
 T CBasePlayer::CheckTrainUpdate()
 T CBasePlayer::Classify()
 T CBasePlayer::ClearPlayerSimulationList()
 T CBasePlayer::ClearUseEntity()
 T CBasePlayer::ClearZoomOwner()
 T CBasePlayer::ClientCommand(CCommand const&)
 T CBasePlayer::CommitSuicide(Vector const&, bool, bool)
 T CBasePlayer::CommitSuicide(bool, bool)
 T CBasePlayer::CreateCorpse()
 T CBasePlayer::CreatePlayer(char const*, edict_t*)
 T CBasePlayer::CreateRagdollEntity()
 T CBasePlayer::CreateViewModel(int)
 T CBasePlayer::DamageEffect(float, int)
 T CBasePlayer::DeactivateMovementConstraint()
 T CBasePlayer::DeathSound(CTakeDamageInfo const&)
 T CBasePlayer::DestroyViewModels()
 T CBasePlayer::DoImpactEffect(CGameTrace&, int)
 T CBasePlayer::DoMuzzleFlash()
 T CBasePlayer::DoubleCheckUseNPC(CBaseEntity*, Vector const&, Vector const&)
 T CBasePlayer::DrawDebugGeometryOverlays()
 T CBasePlayer::Duck()
 T CBasePlayer::DumpPerfToRecipient(CBasePlayer*, int)
 T CBasePlayer::EnableControl(bool)
 T CBasePlayer::EntSelectSpawnPoint()
 T CBasePlayer::EquipSuit(bool)
 T CBasePlayer::Event_Dying(CTakeDamageInfo const&)
 T CBasePlayer::Event_Killed(CTakeDamageInfo const&)
 T CBasePlayer::Event_KilledOther(CBaseEntity*, CTakeDamageInfo const&)
 T CBasePlayer::ExitLadder()
 T CBasePlayer::EyeAngles()
 T CBasePlayer::EyePosition()
 T CBasePlayer::EyePositionAndVectors(Vector*, Vector*, Vector*, Vector*)
 T CBasePlayer::EyeVectors(Vector*, Vector*, Vector*)
 T CBasePlayer::FindNextObserverTarget(bool)
 T CBasePlayer::FindUseEntity()
 T CBasePlayer::FlashlightIsOn()
 T CBasePlayer::FlashlightTurnOff()
 T CBasePlayer::FlashlightTurnOn()
 T CBasePlayer::ForceButtons(int)
 T CBasePlayer::ForceClientDllUpdate()
 T CBasePlayer::ForceDropOfCarriedPhysObjects(CBaseEntity*)
 T CBasePlayer::ForceObserverMode(int)
 T CBasePlayer::ForceOrigin(Vector const&)
 T CBasePlayer::ForceRespawn()
 T CBasePlayer::ForceSimulation()
 T CBasePlayer::GetAutoaimScore(Vector const&, Vector const&, Vector const&, CBaseEntity*, float, CBaseCombatWeapon*)
 T CBasePlayer::GetAutoaimVector(autoaim_params_t&)
 T CBasePlayer::GetAutoaimVector(float)
 T CBasePlayer::GetAutoaimVector(float, float)
 T CBasePlayer::GetBotType() const
 T CBasePlayer::GetDataDescMap()
 T CBasePlayer::GetDefaultFOV() const
 T CBasePlayer::GetDelayTicks()
 T CBasePlayer::GetExpresser()
 T CBasePlayer::GetFOV()
 T CBasePlayer::GetFOVDistanceAdjustFactorForNetworking()
 T CBasePlayer::GetFOVForNetworking()
 T CBasePlayer::GetHeldObjectMass(IPhysicsObject*)
 T CBasePlayer::GetInVehicle(IServerVehicle*, int)
 T CBasePlayer::GetLadderSurface(Vector const&)
 T CBasePlayer::GetNetworkIDString()
 T CBasePlayer::GetNextObserverSearchStartPoint(bool)
 T CBasePlayer::GetObserverMode()
 T CBasePlayer::GetObserverTarget()
 T CBasePlayer::GetOverrideStepSound(char const*)
 T CBasePlayer::GetPhysicsImpactDamageTable()
 T CBasePlayer::GetPlayerMaxSpeed()
 T CBasePlayer::GetPlayerMaxs() const
 T CBasePlayer::GetPlayerMins() const
 T CBasePlayer::GetPreviouslyPredictedOrigin() const
 T CBasePlayer::GetPunchAngle()
 T CBasePlayer::GetReplayEntity()
 T CBasePlayer::GetSceneSoundToken()
 T CBasePlayer::GetServerClass()
 T CBasePlayer::GetSmoothedVelocity()
 T CBasePlayer::GetSteamID(CSteamID*)
 T CBasePlayer::GetStepSoundVelocities(float*, float*)
 T CBasePlayer::GetStickDist()
 T CBasePlayer::GetTimeBase() const
 T CBasePlayer::GetTimeSinceWeaponFired() const
 T CBasePlayer::GetTracerType()
 T CBasePlayer::GetVehicle()
 T CBasePlayer::GetVehicleEntity()
 T CBasePlayer::GetViewModel(int, bool)
 T CBasePlayer::GiveNamedItem(char const*, int)
 T CBasePlayer::HandleAnimEvent(animevent_t*)
 T CBasePlayer::HandleFuncTrain()
 T CBasePlayer::HandleVoteCommands(CCommand const&)
 T CBasePlayer::HasAnyAmmoOfType(int)
 T CBasePlayer::HasHaptics()
 T CBasePlayer::HasNamedPlayerItem(char const*)
 T CBasePlayer::HideViewModels()
 T CBasePlayer::Hints()
 T CBasePlayer::ImpulseCommands()
 T CBasePlayer::IncrementArmorValue(int, int)
 T CBasePlayer::IncrementDeathCount(int)
 T CBasePlayer::IncrementFragCount(int)
 T CBasePlayer::InitFogController()
 T CBasePlayer::InitHUD()
 T CBasePlayer::InitVCollision(Vector const&, Vector const&)
 T CBasePlayer::InitialSpawn()
 T CBasePlayer::InputHandleMapEvent(inputdata_t&)
 T CBasePlayer::InputSetFogController(inputdata_t&)
 T CBasePlayer::InputSetHUDVisibility(inputdata_t&)
 T CBasePlayer::InputSetHealth(inputdata_t&)
 T CBasePlayer::Internal_HandleMapEvent(inputdata_t&)
 T CBasePlayer::IsBot() const
 T CBasePlayer::IsBotOfType(int) const
 T CBasePlayer::IsDead() const
 T CBasePlayer::IsFakeClient() const
 T CBasePlayer::IsFiringWeapon() const
 T CBasePlayer::IsFollowingPhysics()
 T CBasePlayer::IsIlluminatedByFlashlight(CBaseEntity*, float*)
 T CBasePlayer::IsInAVehicle() const
 T CBasePlayer::IsNetClient() const
 T CBasePlayer::IsOnLadder()
 T CBasePlayer::IsPlayer() const
 T CBasePlayer::IsReadyToPlay()
 T CBasePlayer::IsReadyToSpawn()
 T CBasePlayer::IsUseableEntity(CBaseEntity*, unsigned int)
 T CBasePlayer::IsUserCmdDataValid(CUserCmd*)
 T CBasePlayer::IsValidObserverTarget(CBaseEntity*)
 T CBasePlayer::ItemPostFrame()
 T CBasePlayer::ItemPreFrame()
 T CBasePlayer::Jump()
 T CBasePlayer::JumptoPosition(Vector const&, QAngle const&)
 T CBasePlayer::LeaveVehicle(Vector const&, QAngle const&)
 T CBasePlayer::LocalEyeAngles()
 T CBasePlayer::MakeTracer(Vector const&, CGameTrace const&, int)
 T CBasePlayer::ModeWantsSpectatorGUI(int)
 T CBasePlayer::ModifyOrAppendPlayerCriteria(AI_CriteriaSet&)
 T CBasePlayer::NetworkStateChanged_m_ArmorValue()
 T CBasePlayer::NetworkStateChanged_m_ArmorValue(void*)
 T CBasePlayer::NetworkStateChanged_m_fFlags()
 T CBasePlayer::NetworkStateChanged_m_fFlags(void*)
 T CBasePlayer::NetworkStateChanged_m_flFriction()
 T CBasePlayer::NetworkStateChanged_m_flFriction(void*)
 T CBasePlayer::NetworkStateChanged_m_hGroundEntity()
 T CBasePlayer::NetworkStateChanged_m_hGroundEntity(void*)
 T CBasePlayer::NetworkStateChanged_m_iAmmo()
 T CBasePlayer::NetworkStateChanged_m_iAmmo(void*)
 T CBasePlayer::NetworkStateChanged_m_iHealth()
 T CBasePlayer::NetworkStateChanged_m_iHealth(void*)
 T CBasePlayer::NetworkStateChanged_m_lifeState()
 T CBasePlayer::NetworkStateChanged_m_lifeState(void*)
 T CBasePlayer::NetworkStateChanged_m_nNextThinkTick()
 T CBasePlayer::NetworkStateChanged_m_nNextThinkTick(void*)
 T CBasePlayer::NetworkStateChanged_m_nWaterLevel()
 T CBasePlayer::NetworkStateChanged_m_nWaterLevel(void*)
 T CBasePlayer::NetworkStateChanged_m_vecBaseVelocity()
 T CBasePlayer::NetworkStateChanged_m_vecBaseVelocity(void*)
 T CBasePlayer::NetworkStateChanged_m_vecVelocity()
 T CBasePlayer::NetworkStateChanged_m_vecVelocity(void*)
 T CBasePlayer::NetworkStateChanged_m_vecViewOffset()
 T CBasePlayer::NetworkStateChanged_m_vecViewOffset(void*)
 T CBasePlayer::NetworkVar_m_Local::NetworkStateChanged()
 T CBasePlayer::NetworkVar_m_Local::NetworkStateChanged(void*)
 T CBasePlayer::NetworkVar_pl::NetworkStateChanged()
 T CBasePlayer::NetworkVar_pl::NetworkStateChanged(void*)
 T CBasePlayer::NetworkVar_pl::~NetworkVar_pl()
 T CBasePlayer::NotifyNearbyRadiationSource(float)
 T CBasePlayer::ObjectCaps()
 T CBasePlayer::ObserverUse(bool)
 T CBasePlayer::OnDamagedByExplosion(CTakeDamageInfo const&)
 T CBasePlayer::OnEmitFootstepSound(CSoundParameters const&, Vector const&, float)
 T CBasePlayer::OnMyWeaponFired(CBaseCombatWeapon*)
 T CBasePlayer::OnRestore()
 T CBasePlayer::OnTakeDamage(CTakeDamageInfo const&)
 T CBasePlayer::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CBasePlayer::OnVehicleEnd(Vector&)
 T CBasePlayer::OnVehicleStart()
 T CBasePlayer::PackDeadPlayerItems()
 T CBasePlayer::PhysicsSimulate()
 T CBasePlayer::PhysicsSolidMaskForEntity() const
 T CBasePlayer::PickupObject(CBaseEntity*, bool)
 T CBasePlayer::PlayStepSound(Vector&, surfacedata_t*, float, bool)
 T CBasePlayer::PlayUseDenySound()
 T CBasePlayer::PlayerDeathThink()
 T CBasePlayer::PlayerRunCommand(CUserCmd*, IMoveHelper*)
 T CBasePlayer::PlayerSolidMask(bool) const
 T CBasePlayer::PlayerUse()
 T CBasePlayer::PostThink()
 T CBasePlayer::PostThinkVPhysics()
 T CBasePlayer::PreThink()
 T CBasePlayer::Precache()
 T CBasePlayer::ProcessUsercmds(CUserCmd*, int, int, int, bool)
 T CBasePlayer::RefreshCollisionBounds()
 T CBasePlayer::RemoveAllCommandContextsExceptNewest()
 T CBasePlayer::RemoveAllItems(bool)
 T CBasePlayer::RemoveFromPlayerSimulationList(CBaseEntity*)
 T CBasePlayer::RemovePlayerItem(CBaseCombatWeapon*)
 T CBasePlayer::RemoveSuit()
 T CBasePlayer::ReplaceContextCommands(CCommandContext*, CUserCmd*, int)
 T CBasePlayer::RequiredEdictIndex()
 T CBasePlayer::ResetAutoaim()
 T CBasePlayer::ResetDeathCount()
 T CBasePlayer::ResetFragCount()
 T CBasePlayer::ResetObserverMode()
 T CBasePlayer::ResetPerRoundStats()
 T CBasePlayer::ResetScores()
 T CBasePlayer::Restore(IRestore&)
 T CBasePlayer::RumbleEffect(unsigned char, unsigned char, unsigned char)
 T CBasePlayer::RunNullCommand()
 T CBasePlayer::Save(ISave&)
 T CBasePlayer::SelectItem(char const*, int)
 T CBasePlayer::SelectLastItem()
 T CBasePlayer::SetAnimation(PLAYER_ANIM)
 T CBasePlayer::SetAnimationExtension(char const*)
 T CBasePlayer::SetArmorValue(int)
 T CBasePlayer::SetBodyPitch(float)
 T CBasePlayer::SetDefaultFOV(int)
 T CBasePlayer::SetFOV(CBaseEntity*, int, float, int)
 T CBasePlayer::SetFlashlightEnabled(bool)
 T CBasePlayer::SetHaptics(bool)
 T CBasePlayer::SetMaxSpeed(float)
 T CBasePlayer::SetModel(char const*)
 T CBasePlayer::SetObserverMode(int)
 T CBasePlayer::SetObserverTarget(CBaseEntity*)
 T CBasePlayer::SetPhysicsFlag(int, bool)
 T CBasePlayer::SetPlayerName(char const*)
 T CBasePlayer::SetPlayerUnderwater(bool)
 T CBasePlayer::SetPreviouslyPredictedOrigin(Vector const&)
 T CBasePlayer::SetStepSoundTime(stepsoundtimes_t, bool)
 T CBasePlayer::SetSuitUpdate(char const*, int, int)
 T CBasePlayer::SetVCollisionState(Vector const&, Vector const&, int)
 T CBasePlayer::SetViewEntity(CBaseEntity*)
 T CBasePlayer::SetupVPhysicsShadow(Vector const&, Vector const&, CPhysCollide*, char const*, CPhysCollide*, char const*)
 T CBasePlayer::SetupVisibility(CBaseEntity*, unsigned char*, int)
 T CBasePlayer::SharedSpawn()
 T CBasePlayer::ShouldAnnounceAchievement()
 T CBasePlayer::ShouldAutoaim()
 T CBasePlayer::ShouldFadeOnDeath()
 T CBasePlayer::ShouldGainInstantSpawn()
 T CBasePlayer::ShouldSavePhysics()
 T CBasePlayer::ShouldTakeDamageInCommentaryMode(CTakeDamageInfo const&)
 T CBasePlayer::ShouldTransmit(CCheckTransmitInfo const*)
 T CBasePlayer::ShowCrosshair(bool)
 T CBasePlayer::ShowViewModel(bool)
 T CBasePlayer::ShowViewPortPanel(char const*, bool, KeyValues*)
 T CBasePlayer::SimulatePlayerSimulatedEntities()
 T CBasePlayer::SnapEyeAngles(QAngle const&)
 T CBasePlayer::Spawn()
 T CBasePlayer::SpawnArmorValue() const
 T CBasePlayer::StartObserverMode(int)
 T CBasePlayer::StartReplayMode(float, float, int)
 T CBasePlayer::StopObserverMode()
 T CBasePlayer::StopReplayMode()
 T CBasePlayer::TakeHealth(float, int)
 T CBasePlayer::ToggleDuck()
 T CBasePlayer::Touch(CBaseEntity*)
 T CBasePlayer::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
 T CBasePlayer::UnforceButtons(int)
 T CBasePlayer::UpdateButtonState(int)
 T CBasePlayer::UpdateClientData()
 T CBasePlayer::UpdateGeigerCounter()
 T CBasePlayer::UpdateOnRemove()
 T CBasePlayer::UpdatePhysicsShadowToCurrentPosition()
 T CBasePlayer::UpdatePhysicsShadowToPosition(Vector const&)
 T CBasePlayer::UpdatePlayerSound()
 T CBasePlayer::UpdateStepSound(surfacedata_t*, Vector const&, Vector const&)
 T CBasePlayer::UpdateTransmitState()
 T CBasePlayer::UpdateUnderwaterState()
 T CBasePlayer::UsingStandardWeaponsInVehicle()
 T CBasePlayer::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CBasePlayer::VPhysicsDestroyObject()
 T CBasePlayer::VPhysicsShadowUpdate(IPhysicsObject*)
 T CBasePlayer::VPhysicsUpdate(IPhysicsObject*)
 T CBasePlayer::ValidateCurrentObserverTarget()
 T CBasePlayer::VelocityPunch(Vector const&)
 T CBasePlayer::ViewPunch(QAngle const&)
 T CBasePlayer::ViewPunchReset(float)
 T CBasePlayer::WantsLagCompensationOnEntity(CBasePlayer const*, CUserCmd const*, CBitVec<2048> const*) const
 T CBasePlayer::WaterMove()
 T CBasePlayer::Weapon_CanUse(CBaseCombatWeapon*)
 T CBasePlayer::Weapon_Drop(CBaseCombatWeapon*, Vector const*, Vector const*)
 T CBasePlayer::Weapon_Equip(CBaseCombatWeapon*)
 T CBasePlayer::Weapon_SetLast(CBaseCombatWeapon*)
 T CBasePlayer::Weapon_ShootPosition()
 T CBasePlayer::Weapon_ShouldSelectItem(CBaseCombatWeapon*)
 T CBasePlayer::Weapon_ShouldSetLast(CBaseCombatWeapon*, CBaseCombatWeapon*)
 T CBasePlayer::Weapon_Switch(CBaseCombatWeapon*, int)
 T CBasePlayer::YouForgotToImplementOrDeclareServerClass()
 T CBasePlayer::~CBasePlayer()
 T CBaseProjectile::CBaseProjectile()
 T CBaseProjectile::CanCollideWithTeammates() const
 T CBaseProjectile::CollideWithTeammatesThink()
 T CBaseProjectile::Destroy(bool, bool)
 T CBaseProjectile::GetBaseProjectileType() const
 T CBaseProjectile::GetCollideWithTeammatesDelay() const
 T CBaseProjectile::GetDestroyableHitCount() const
 T CBaseProjectile::GetProjectileType() const
 T CBaseProjectile::GetServerClass()
 T CBaseProjectile::IsDestroyable()
 T CBaseProjectile::SetLauncher(CBaseEntity*)
 T CBaseProjectile::Spawn()
 T CBaseProjectile::YouForgotToImplementOrDeclareServerClass()
 T CBaseProjectile::~CBaseProjectile()
 T CBaseProp::Activate()
 T CBaseProp::CalculateBlockLOS()
 T CBaseProp::DrawDebugGeometryOverlays()
 T CBaseProp::IsAlive()
 T CBaseProp::KeyValue(char const*, char const*)
 T CBaseProp::OverridePropdata()
 T CBaseProp::ParsePropData()
 T CBaseProp::Precache()
 T CBaseProp::Spawn()
 T CBasePropDoor::Activate()
 T CBasePropDoor::Blocked(CBaseEntity*)
 T CBasePropDoor::CalcDoorSounds()
 T CBasePropDoor::DoorAutoCloseThink()
 T CBasePropDoor::DoorCanClose(bool)
 T CBasePropDoor::DoorCanOpen()
 T CBasePropDoor::DoorClose()
 T CBasePropDoor::DoorCloseMoveDone()
 T CBasePropDoor::DoorOpen(CBaseEntity*)
 T CBasePropDoor::DoorOpenMoveDone()
 T CBasePropDoor::EndBlocked()
 T CBasePropDoor::GetDataDescMap()
 T CBasePropDoor::GetServerClass()
 T CBasePropDoor::HandleAnimEvent(animevent_t*)
 T CBasePropDoor::InputClose(inputdata_t&)
 T CBasePropDoor::InputLock(inputdata_t&)
 T CBasePropDoor::InputOpen(inputdata_t&)
 T CBasePropDoor::InputOpenAwayFrom(inputdata_t&)
 T CBasePropDoor::InputToggle(inputdata_t&)
 T CBasePropDoor::InputUnlock(inputdata_t&)
 T CBasePropDoor::NPCOpenDoor(CAI_BaseNPC*)
 T CBasePropDoor::ObjectCaps()
 T CBasePropDoor::OnDoorClosed()
 T CBasePropDoor::OnDoorOpened()
 T CBasePropDoor::OnStartBlocked(CBaseEntity*)
 T CBasePropDoor::OnUse(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CBasePropDoor::Precache()
 T CBasePropDoor::Spawn()
 T CBasePropDoor::StartBlocked(CBaseEntity*)
 T CBasePropDoor::TestCollision(Ray_t const&, unsigned int, CGameTrace&)
 T CBasePropDoor::Unlock()
 T CBasePropDoor::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CBasePropDoor::YouForgotToImplementOrDeclareServerClass()
 T CBasePropDoor::~CBasePropDoor()
 T CBaseRopePhysics::ApplyConstraints(CSimplePhysics::CNode*, int)
 T CBaseRopePhysics::CBaseRopePhysics(CSimplePhysics::CNode*, int, CRopeSpring*, float*)
 T CBaseRopePhysics::GetNodeForces(CSimplePhysics::CNode*, int, Vector*)
 T CBaseRopePhysics::ResetSpringLength(float)
 T CBaseRopePhysics::Restart()
 T CBaseRopePhysics::SetNumNodes(int)
 T CBaseRopePhysics::Simulate(float)
 T CBaseServerVehicle::CBaseServerVehicle()
 T CBaseServerVehicle::CacheEntryExitPoints()
 T CBaseServerVehicle::CheckExitPoint(float, int, Vector*)
 T CBaseServerVehicle::ClassifyPassenger(CBaseCombatCharacter*, Class_T)
 T CBaseServerVehicle::FindOrCreatePassengerRole(string_t, int*)
 T CBaseServerVehicle::FinishMove(CBasePlayer*, CUserCmd*, CMoveData*)
 T CBaseServerVehicle::GetDrivableVehicle()
 T CBaseServerVehicle::GetDriver()
 T CBaseServerVehicle::GetEntryAnimForPoint(Vector const&)
 T CBaseServerVehicle::GetExitAnimToUse(Vector&, bool&)
 T CBaseServerVehicle::GetLocalAttachmentAtTime(int, int, float, Vector*, QAngle*)
 T CBaseServerVehicle::GetPassenger(int)
 T CBaseServerVehicle::GetPassengerExitPoint(int, Vector*, QAngle*)
 T CBaseServerVehicle::GetPassengerRole(CBaseCombatCharacter*)
 T CBaseServerVehicle::GetPassengerSeatPoint(int, Vector*, QAngle*)
 T CBaseServerVehicle::GetVehicleController()
 T CBaseServerVehicle::GetVehicleEnt()
 T CBaseServerVehicle::GetVehicleParams()
 T CBaseServerVehicle::GetVehicleViewPosition(int, Vector*, QAngle*, float*)
 T CBaseServerVehicle::HandleEntryExitFinish(bool, bool)
 T CBaseServerVehicle::HandlePassengerEntry(CBaseCombatCharacter*, bool)
 T CBaseServerVehicle::HandlePassengerExit(CBaseCombatCharacter*)
 T CBaseServerVehicle::Initialize(char const*)
 T CBaseServerVehicle::IsPassengerDamagable(int)
 T CBaseServerVehicle::IsPassengerEntering()
 T CBaseServerVehicle::IsPassengerExiting()
 T CBaseServerVehicle::IsPassengerUsingStandardWeapons(int)
 T CBaseServerVehicle::IsPassengerVisible(int)
 T CBaseServerVehicle::IsVehicleBodyInWater()
 T CBaseServerVehicle::IsVehicleUpright()
 T CBaseServerVehicle::ItemPostFrame(CBasePlayer*)
 T CBaseServerVehicle::NPC_AddPassenger(CBaseCombatCharacter*, string_t, int)
 T CBaseServerVehicle::NPC_AimPrimaryWeapon(Vector)
 T CBaseServerVehicle::NPC_AimSecondaryWeapon(Vector)
 T CBaseServerVehicle::NPC_Brake()
 T CBaseServerVehicle::NPC_CanDrive()
 T CBaseServerVehicle::NPC_DriveVehicle()
 T CBaseServerVehicle::NPC_GetAvailableSeat(CBaseCombatCharacter*, string_t, VehicleSeatQuery_e)
 T CBaseServerVehicle::NPC_GetPassengerInSeat(int, int)
 T CBaseServerVehicle::NPC_GetPassengerSeatAnims(CBaseCombatCharacter*, PassengerSeatAnimType_t)
 T CBaseServerVehicle::NPC_GetPassengerSeatAttachment(CBaseCombatCharacter*)
 T CBaseServerVehicle::NPC_GetPassengerSeatPosition(CBaseCombatCharacter*, Vector*, QAngle*)
 T CBaseServerVehicle::NPC_GetPassengerSeatPositionLocal(CBaseCombatCharacter*, Vector*, QAngle*)
 T CBaseServerVehicle::NPC_HasAvailableSeat(string_t)
 T CBaseServerVehicle::NPC_HasPrimaryWeapon()
 T CBaseServerVehicle::NPC_HasSecondaryWeapon()
 T CBaseServerVehicle::NPC_PrimaryFire()
 T CBaseServerVehicle::NPC_RemovePassenger(CBaseCombatCharacter*)
 T CBaseServerVehicle::NPC_SecondaryFire()
 T CBaseServerVehicle::NPC_SetDriver(CNPC_VehicleDriver*)
 T CBaseServerVehicle::NPC_ThrottleCenter()
 T CBaseServerVehicle::NPC_ThrottleForward()
 T CBaseServerVehicle::NPC_ThrottleReverse()
 T CBaseServerVehicle::NPC_TurnCenter()
 T CBaseServerVehicle::NPC_TurnLeft(float)
 T CBaseServerVehicle::NPC_TurnRight(float)
 T CBaseServerVehicle::ParseEntryExitAnims()
 T CBaseServerVehicle::ParseExitAnim(KeyValues*, bool)
 T CBaseServerVehicle::ParseNPCPassengerSeat(KeyValues*, CPassengerSeat*)
 T CBaseServerVehicle::ParseNPCRoles(KeyValues*)
 T CBaseServerVehicle::PassengerDamageModifier(CTakeDamageInfo const&)
 T CBaseServerVehicle::PassengerShouldReceiveDamage(CTakeDamageInfo&)
 T CBaseServerVehicle::PlayCrashSound(float)
 T CBaseServerVehicle::PlayLoopingSound(char const*)
 T CBaseServerVehicle::PlaySound(vehiclesound)
 T CBaseServerVehicle::Precache()
 T CBaseServerVehicle::ProcessMovement(CBasePlayer*, CMoveData*)
 T CBaseServerVehicle::RecalculateSoundGear(vbs_sound_update_t&)
 T CBaseServerVehicle::ReloadScript()
 T CBaseServerVehicle::RestorePassengerInfo()
 T CBaseServerVehicle::SetPassenger(int, CBaseCombatCharacter*)
 T CBaseServerVehicle::SetVehicle(CBaseEntity*)
 T CBaseServerVehicle::SetupMove(CBasePlayer*, CUserCmd*, IMoveHelper*, CMoveData*)
 T CBaseServerVehicle::SoundShutdown(float)
 T CBaseServerVehicle::SoundStart()
 T CBaseServerVehicle::SoundStartDisabled()
 T CBaseServerVehicle::SoundState_ChooseState(vbs_sound_update_t&)
 T CBaseServerVehicle::SoundState_OnNewState(sound_states)
 T CBaseServerVehicle::SoundUpdate(vbs_sound_update_t&)
 T CBaseServerVehicle::StartEngineRumble()
 T CBaseServerVehicle::StopEngineRumble()
 T CBaseServerVehicle::StopSound(vehiclesound)
 T CBaseServerVehicle::Weapon_PrimaryCanFireAt()
 T CBaseServerVehicle::Weapon_PrimaryRanges(float*, float*)
 T CBaseServerVehicle::Weapon_SecondaryCanFireAt()
 T CBaseServerVehicle::Weapon_SecondaryRanges(float*, float*)
 T CBaseServerVehicle::~CBaseServerVehicle()
 T CBaseSpriteProjectile::GetDataDescMap()
 T CBaseSpriteProjectile::HandleThink()
 T CBaseSpriteProjectile::HandleTouch(CBaseEntity*)
 T CBaseSpriteProjectile::Precache()
 T CBaseSpriteProjectile::Think()
 T CBaseSpriteProjectile::Touch(CBaseEntity*)
 T CBaseSpriteProjectile::~CBaseSpriteProjectile()
 T CBaseTeamObjectiveResource::GetCPCapPercentage(int)
 T CBaseTeamObjectiveResource::NetworkVar_m_iCappingTeam::Set(int, int const&)
 T CBaseTeamObjectiveResource::ResetControlPoints()
 T CBaseTeamObjectiveResource::ResetHillData(int)
 T CBaseTeamObjectiveResource::SetBaseCP(int, int)
 T CBaseTeamObjectiveResource::SetCPCapPercentage(int, float)
 T CBaseTeamObjectiveResource::SetCPCapTime(int, int, float)
 T CBaseTeamObjectiveResource::SetCPCapTimeScalesWithPlayers(int, bool)
 T CBaseTeamObjectiveResource::SetCPGroup(int, int)
 T CBaseTeamObjectiveResource::SetCPIcons(int, int, int)
 T CBaseTeamObjectiveResource::SetCPLocked(int, bool)
 T CBaseTeamObjectiveResource::SetCPOverlays(int, int, int)
 T CBaseTeamObjectiveResource::SetCPPosition(int, Vector const&)
 T CBaseTeamObjectiveResource::SetCPRequiredCappers(int, int, int)
 T CBaseTeamObjectiveResource::SetCPUnlockTime(int, float)
 T CBaseTeamObjectiveResource::SetCPVisible(int, bool)
 T CBaseTeamObjectiveResource::SetCapBlocked(int, bool)
 T CBaseTeamObjectiveResource::SetCapLayoutCustomPosition(float, float)
 T CBaseTeamObjectiveResource::SetCappingTeam(int, int)
 T CBaseTeamObjectiveResource::SetHillData(int, float, float, bool)
 T CBaseTeamObjectiveResource::SetNumControlPoints(int)
 T CBaseTeamObjectiveResource::SetNumPlayers(int, int, int)
 T CBaseTeamObjectiveResource::SetOwningTeam(int, int)
 T CBaseTeamObjectiveResource::SetPreviousPoint(int, int, int, int)
 T CBaseTeamObjectiveResource::SetTeamBaseIcons(int, int)
 T CBaseTeamObjectiveResource::SetTeamCanCap(int, int, bool)
 T CBaseTeamObjectiveResource::SetTeamInZone(int, int)
 T CBaseTeamObjectiveResource::SetTrackAlarm(int, bool)
 T CBaseTeamObjectiveResource::SetTrainPathDistance(int, float)
 T CBaseTeamObjectiveResource::SetWarnOnCap(int, int)
 T CBaseTeamObjectiveResource::SetWarnSound(int, string_t)
 T CBaseTeamObjectiveResource::TeamCanCapPoint(int, int)
 T CBaseTeamObjectiveResource::UpdateCapHudElement()
 T CBaseTempEntity::CBaseTempEntity(char const*)
 T CBaseTempEntity::Create(IRecipientFilter&, float)
 T CBaseTempEntity::GetList()
 T CBaseTempEntity::GetName()
 T CBaseTempEntity::GetNext()
 T CBaseTempEntity::GetServerClass()
 T CBaseTempEntity::Precache()
 T CBaseTempEntity::PrecacheTempEnts()
 T CBaseTempEntity::Test(Vector const&, QAngle const&)
 T CBaseTempEntity::YouForgotToImplementOrDeclareServerClass()
 T CBaseTempEntity::~CBaseTempEntity()
 T CBaseToggle::AngularMove(QAngle const&, float)
 T CBaseToggle::AxisDelta(int, QAngle const&, QAngle const&)
 T CBaseToggle::AxisDir()
 T CBaseToggle::CBaseToggle()
 T CBaseToggle::GetDataDescMap()
 T CBaseToggle::GetDelay()
 T CBaseToggle::IsLockedByMaster()
 T CBaseToggle::KeyValue(char const*, Vector)
 T CBaseToggle::KeyValue(char const*, char const*)
 T CBaseToggle::KeyValue(char const*, float)
 T CBaseToggle::LinearMove(Vector const&, float)
 T CBaseToggle::MoveDone()
 T CBaseToggle::~CBaseToggle()
 T CBaseTrigger::Activate()
 T CBaseTrigger::CBaseTrigger()
 T CBaseTrigger::Disable()
 T CBaseTrigger::DrawDebugTextOverlays()
 T CBaseTrigger::Enable()
 T CBaseTrigger::EndTouch(CBaseEntity*)
 T CBaseTrigger::EndTouchAll()
 T CBaseTrigger::GetDataDescMap()
 T CBaseTrigger::GetTouchedEntityOfType(char const*)
 T CBaseTrigger::InitTrigger()
 T CBaseTrigger::InputDisable(inputdata_t&)
 T CBaseTrigger::InputDisableAndEndTouch(inputdata_t&)
 T CBaseTrigger::InputEnable(inputdata_t&)
 T CBaseTrigger::InputEndTouch(inputdata_t&)
 T CBaseTrigger::InputStartTouch(inputdata_t&)
 T CBaseTrigger::InputToggle(inputdata_t&)
 T CBaseTrigger::InputTouchTest(inputdata_t&)
 T CBaseTrigger::IsTouching(CBaseEntity*)
 T CBaseTrigger::PassesTriggerFilters(CBaseEntity*)
 T CBaseTrigger::PostClientActive()
 T CBaseTrigger::Spawn()
 T CBaseTrigger::StartTouch(CBaseEntity*)
 T CBaseTrigger::StartTouchAll()
 T CBaseTrigger::UpdateOnRemove()
 T CBaseTrigger::UsesFilter()
 T CBaseTrigger::~CBaseTrigger()
 T CBaseVPhysicsTrigger::Activate()
 T CBaseVPhysicsTrigger::InputDisable(inputdata_t&)
 T CBaseVPhysicsTrigger::InputEnable(inputdata_t&)
 T CBaseVPhysicsTrigger::InputToggle(inputdata_t&)
 T CBaseVPhysicsTrigger::PassesTriggerFilters(CBaseEntity*)
 T CBaseVPhysicsTrigger::Spawn()
 T CBaseViewModel::AddEffects(int)
 T CBaseViewModel::AddViewModelBob(CBasePlayer*, Vector&, QAngle&)
 T CBaseViewModel::CBaseViewModel()
 T CBaseViewModel::CalcViewModelLag(Vector&, QAngle&, QAngle&)
 T CBaseViewModel::CalcViewModelView(CBasePlayer*, Vector const&, QAngle const&)
 T CBaseViewModel::GetDataDescMap()
 T CBaseViewModel::GetOwner()
 T CBaseViewModel::GetOwnerViaInterface()
 T CBaseViewModel::GetOwningWeapon()
 T CBaseViewModel::GetServerClass()
 T CBaseViewModel::IsSelfAnimating()
 T CBaseViewModel::IsViewable()
 T CBaseViewModel::Precache()
 T CBaseViewModel::RemoveEffects(int)
 T CBaseViewModel::SendViewModelMatchingSequence(int)
 T CBaseViewModel::SetIndex(int)
 T CBaseViewModel::SetOwner(CBaseEntity*)
 T CBaseViewModel::SetTransmit(CCheckTransmitInfo*, bool)
 T CBaseViewModel::SetWeaponModel(char const*, CBaseCombatWeapon*)
 T CBaseViewModel::ShouldTransmit(CCheckTransmitInfo const*)
 T CBaseViewModel::Spawn()
 T CBaseViewModel::UpdateOnRemove()
 T CBaseViewModel::UpdateTransmitState()
 T CBaseViewModel::YouForgotToImplementOrDeclareServerClass()
 T CBaseViewModel::~CBaseViewModel()
 T CBeam::BeamCreate(char const*, float)
 T CBeam::BeamDamage(CGameTrace*)
 T CBeam::BeamInit(char const*, float)
 T CBeam::CBeam()
 T CBeam::DoSparks(Vector const&, Vector const&)
 T CBeam::DrawDebugTextOverlays()
 T CBeam::EntsInit(CBaseEntity*, CBaseEntity*)
 T CBeam::GetAbsEndPos() const
 T CBeam::GetAbsStartPos() const
 T CBeam::GetDataDescMap()
 T CBeam::GetDecalName()
 T CBeam::GetServerClass()
 T CBeam::InputColorBlueValue(inputdata_t&)
 T CBeam::InputColorGreenValue(inputdata_t&)
 T CBeam::InputColorRedValue(inputdata_t&)
 T CBeam::InputNoise(inputdata_t&)
 T CBeam::InputWidth(inputdata_t&)
 T CBeam::NetworkVar_m_hAttachEntity::Set(int, CHandle<CBaseEntity> const&)
 T CBeam::NetworkVar_m_nAttachIndex::Set(int, int const&)
 T CBeam::ObjectCaps()
 T CBeam::PointEntInit(Vector const&, CBaseEntity*)
 T CBeam::PointsInit(Vector const&, Vector const&)
 T CBeam::Precache()
 T CBeam::RandomTargetname(char const*)
 T CBeam::RelinkBeam()
 T CBeam::SetAbsEndPos(Vector const&)
 T CBeam::SetAbsStartPos(Vector const&)
 T CBeam::SetBeamFlag(int)
 T CBeam::SetBeamFlags(int)
 T CBeam::SetEndEntity(CBaseEntity*)
 T CBeam::SetModel(char const*)
 T CBeam::SetStartEntity(CBaseEntity*)
 T CBeam::SetTransmit(CCheckTransmitInfo*, bool)
 T CBeam::SetType(int)
 T CBeam::ShouldTransmit(CCheckTransmitInfo const*)
 T CBeam::Spawn()
 T CBeam::UpdateTransmitState()
 T CBeam::WorldSpaceCenter() const
 T CBeam::YouForgotToImplementOrDeclareServerClass()
 T CBeam::~CBeam()
 T CBlackHeadcrab::AlertSound()
 T CBlackHeadcrab::AttackSound()
 T CBlackHeadcrab::BiteSound()
 T CBlackHeadcrab::BuildScheduleTestBits()
 T CBlackHeadcrab::DeathSound(CTakeDamageInfo const&)
 T CBlackHeadcrab::Eject(QAngle const&, float, CBaseEntity*)
 T CBlackHeadcrab::EjectTouch(CBaseEntity*)
 T CBlackHeadcrab::GetClassScheduleIdSpace()
 T CBlackHeadcrab::GetDataDescMap()
 T CBlackHeadcrab::GetSchedulingErrorName()
 T CBlackHeadcrab::GetSoundInterests()
 T CBlackHeadcrab::HandleAnimEvent(animevent_t*)
 T CBlackHeadcrab::IdleSound()
 T CBlackHeadcrab::ImpactSound()
 T CBlackHeadcrab::InitCustomSchedules()
 T CBlackHeadcrab::IsHeavyDamage(CTakeDamageInfo const&)
 T CBlackHeadcrab::JumpFlinch(Vector const*)
 T CBlackHeadcrab::LoadedSchedules()
 T CBlackHeadcrab::MaxYawSpeed()
 T CBlackHeadcrab::NPC_TranslateActivity(Activity)
 T CBlackHeadcrab::PainSound(CTakeDamageInfo const&)
 T CBlackHeadcrab::Precache()
 T CBlackHeadcrab::PrescheduleThink()
 T CBlackHeadcrab::SelectSchedule()
 T CBlackHeadcrab::Spawn()
 T CBlackHeadcrab::SquadSlotName(int)
 T CBlackHeadcrab::TelegraphSound()
 T CBlackHeadcrab::TouchDamage(CBaseEntity*)
 T CBlackHeadcrab::TranslateSchedule(int)
 T CBlackHeadcrab::~CBlackHeadcrab()
 T CBlendingCycler::GetDataDescMap()
 T CBlendingCycler::KeyValue(char const*, char const*)
 T CBlendingCycler::ObjectCaps()
 T CBlendingCycler::Spawn()
 T CBlendingCycler::Think()
 T CBlendingCycler::~CBlendingCycler()
 T CBlood::BloodPosition(CBaseEntity*)
 T CBlood::GetDataDescMap()
 T CBlood::InputEmitBlood(inputdata_t&)
 T CBlood::KeyValue(char const*, char const*)
 T CBlood::Spawn()
 T CBlood::~CBlood()
 T CBloodSplat::Think()
 T CBloodSplat::~CBloodSplat()
 T CBombDropSensor::GetDataDescMap()
 T CBombDropSensor::InputDropBomb(inputdata_t&)
 T CBombDropSensor::InputDropBombAtTarget(inputdata_t&)
 T CBombDropSensor::InputDropBombAtTargetAlways(inputdata_t&)
 T CBombDropSensor::InputDropBombDelay(inputdata_t&)
 T CBombDropSensor::InputDropBombStraightDown(inputdata_t&)
 T CBombDropSensor::Spawn()
 T CBombDropSensor::~CBombDropSensor()
 T CBombSuppressor::Activate()
 T CBombSuppressor::GetDataDescMap()
 T CBombSuppressor::Spawn()
 T CBombSuppressor::UpdateOnRemove()
 T CBombSuppressor::~CBombSuppressor()
 T CBoneCache::CreateResource(bonecacheparams_t const&)
 T CBoneCache::GetCachedBone(int)
 T CBoneCache::IsValid(float, float)
 T CBoneCache::ReadCachedBonePointers(matrix3x4_t**, int)
 T CBoneCache::UpdateBones(matrix3x4_t const*, int, float)
 T CBoneFollower::GetDataDescMap()
 T CBoneFollower::GetServerClass()
 T CBoneFollower::Init(CBaseEntity*, char const*, solid_t&, Vector const&, QAngle const&)
 T CBoneFollower::ObjectCaps()
 T CBoneFollower::TestCollision(Ray_t const&, unsigned int, CGameTrace&)
 T CBoneFollower::Touch(CBaseEntity*)
 T CBoneFollower::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
 T CBoneFollower::UpdateTransmitState()
 T CBoneFollower::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CBoneFollower::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CBoneFollower::VPhysicsFriction(IPhysicsObject*, float, int, int)
 T CBoneFollower::VPhysicsShadowCollision(int, gamevcollisionevent_t*)
 T CBoneFollower::VPhysicsUpdate(IPhysicsObject*)
 T CBoneFollower::YouForgotToImplementOrDeclareServerClass()
 T CBoneFollower::~CBoneFollower()
 T CBoneFollowerManager::AddBoneFollower(CBaseAnimating*, char const*, solid_t*)
 T CBoneFollowerManager::CBoneFollowerManager()
 T CBoneFollowerManager::CreatePhysicsFollower(CBaseAnimating*, physfollower_t&, char const*, solid_t*)
 T CBoneFollowerManager::DestroyBoneFollowers()
 T CBoneFollowerManager::GetBoneFollower(int)
 T CBoneFollowerManager::InitBoneFollowers(CBaseAnimating*, int, char const**)
 T CBoneFollowerManager::UpdateBoneFollowers(CBaseAnimating*)
 T CBoneFollowerManager::~CBoneFollowerManager()
 T CBoneSetup::AccumulatePose(Vector*, Quaternion*, int, float, float, float, CIKContext*)
 T CBoneSetup::AddLocalLayers(Vector*, Quaternion*, mstudioseqdesc_t&, int, float, float, float, CIKContext*)
 T CBoneSetup::AddSequenceLayers(Vector*, Quaternion*, mstudioseqdesc_t&, int, float, float, float, CIKContext*)
 T CBoneSetup::CalcAutoplaySequences(Vector*, Quaternion*, float, CIKContext*)
 T CBoneSetupMemoryPool<Quaternion>::Alloc()
 T CBoneSetupMemoryPool<Quaternion>::~CBoneSetupMemoryPool()
 T CBoneSetupMemoryPool<Vector>::Alloc()
 T CBoneSetupMemoryPool<Vector>::~CBoneSetupMemoryPool()
 T CBoneSetupMemoryPool<matrix3x4_t>::Alloc()
 T CBoneSetupMemoryPool<matrix3x4_t>::~CBoneSetupMemoryPool()
 T CBotCmd::~CBotCmd()
 T CBounceBomb::BounceThink()
 T CBounceBomb::CaptiveThink()
 T CBounceBomb::CavernBounceThink()
 T CBounceBomb::CloseHooks()
 T CBounceBomb::CreateVPhysics()
 T CBounceBomb::DrawDebugTextOverlays()
 T CBounceBomb::ExplodeThink()
 T CBounceBomb::ExplodeTouch(CBaseEntity*)
 T CBounceBomb::FindNearestNPC()
 T CBounceBomb::ForcePhysgunOpen(CBasePlayer*)
 T CBounceBomb::GetDataDescMap()
 T CBounceBomb::HasPhysicsAttacker(float)
 T CBounceBomb::HasPreferredCarryAnglesForPlayer(CBasePlayer*)
 T CBounceBomb::InputDisarm(inputdata_t&)
 T CBounceBomb::IsValidLocation()
 T CBounceBomb::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T CBounceBomb::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CBounceBomb::OnRestore()
 T CBounceBomb::OnTakeDamage(CTakeDamageInfo const&)
 T CBounceBomb::OpenHooks(bool)
 T CBounceBomb::Precache()
 T CBounceBomb::PreferredCarryAngles()
 T CBounceBomb::SearchThink()
 T CBounceBomb::SetMineState(int)
 T CBounceBomb::SettleThink()
 T CBounceBomb::Spawn()
 T CBounceBomb::UpdateLight(bool, unsigned int, unsigned int, unsigned int, unsigned int)
 T CBounceBomb::Wake(bool)
 T CBounceBomb::~CBounceBomb()
 T CBreakModelsPrecached::BreakLessFunc(CBreakModelsPrecached::breakable_precache_t const&, CBreakModelsPrecached::breakable_precache_t const&)
 T CBreakModelsPrecached::LevelShutdownPostEntity()
 T CBreakModelsPrecached::~CBreakModelsPrecached()
 T CBreakParser::ParseKeyValue(void*, char const*, char const*)
 T CBreakParser::ParseModelName(breakmodel_t*, char const*)
 T CBreakParser::SetDefaults(void*)
 T CBreakable::BreakTouch(CBaseEntity*)
 T CBreakable::CreateVPhysics()
 T CBreakable::DamageDecal(int, int)
 T CBreakable::DamageSound()
 T CBreakable::Die()
 T CBreakable::DrawDebugTextOverlays()
 T CBreakable::GetBasePropData()
 T CBreakable::GetBreakableCount()
 T CBreakable::GetBreakableModel()
 T CBreakable::GetBreakableSkin()
 T CBreakable::GetDataDescMap()
 T CBreakable::GetDmgModBullet()
 T CBreakable::GetDmgModClub()
 T CBreakable::GetDmgModExplosive()
 T CBreakable::GetExplosiveDamage()
 T CBreakable::GetExplosiveRadius()
 T CBreakable::GetMaxBreakableSize()
 T CBreakable::GetMultiplayerBreakMode() const
 T CBreakable::GetPhysicsDamageTable()
 T CBreakable::GetPhysicsMode()
 T CBreakable::HasInteraction(propdata_interactions_t)
 T CBreakable::HasPhysicsAttacker(float)
 T CBreakable::InputAddHealth(inputdata_t&)
 T CBreakable::InputBreak(inputdata_t&)
 T CBreakable::InputRemoveHealth(inputdata_t&)
 T CBreakable::InputSetHealth(inputdata_t&)
 T CBreakable::InputSetMass(inputdata_t&)
 T CBreakable::IsBreakable()
 T CBreakable::KeyValue(char const*, char const*)
 T CBreakable::MaterialSoundRandom(int, Materials, float)
 T CBreakable::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T CBreakable::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CBreakable::OnTakeDamage(CTakeDamageInfo const&)
 T CBreakable::ParsePropData()
 T CBreakable::Precache()
 T CBreakable::ResetOnGroundFlags()
 T CBreakable::SetBasePropData(string_t)
 T CBreakable::SetBreakableCount(int)
 T CBreakable::SetBreakableModel(string_t)
 T CBreakable::SetBreakableSkin(int)
 T CBreakable::SetDmgModBullet(float)
 T CBreakable::SetDmgModClub(float)
 T CBreakable::SetDmgModExplosive(float)
 T CBreakable::SetExplosiveDamage(float)
 T CBreakable::SetExplosiveRadius(float)
 T CBreakable::SetInteraction(propdata_interactions_t)
 T CBreakable::SetMaxBreakableSize(int)
 T CBreakable::SetMultiplayerBreakMode(mp_break_t)
 T CBreakable::SetPhysicsDamageTable(string_t)
 T CBreakable::SetPhysicsMode(int)
 T CBreakable::SetPropDataBlocksLOS(bool)
 T CBreakable::SetPropDataIsAIWalkable(bool)
 T CBreakable::Spawn()
 T CBreakable::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
 T CBreakable::UpdateHealth(int, CBaseEntity*)
 T CBreakable::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CBreakable::~CBreakable()
 T CBreakableProp::AnimateThink()
 T CBreakableProp::Break(CBaseEntity*, CTakeDamageInfo const&)
 T CBreakableProp::BreakThink()
 T CBreakableProp::BreakablePropTouch(CBaseEntity*)
 T CBreakableProp::CBreakableProp()
 T CBreakableProp::CheckRemoveRagdolls()
 T CBreakableProp::DisableAutoFade()
 T CBreakableProp::Event_Killed(CTakeDamageInfo const&)
 T CBreakableProp::FindEnableMotionFixup()
 T CBreakableProp::ForceFadeScaleToAlwaysVisible()
 T CBreakableProp::GetAutoAimRadius()
 T CBreakableProp::GetBasePropData()
 T CBreakableProp::GetBreakableCount()
 T CBreakableProp::GetBreakableModel()
 T CBreakableProp::GetBreakableSkin()
 T CBreakableProp::GetDataDescMap()
 T CBreakableProp::GetDmgModBullet()
 T CBreakableProp::GetDmgModClub()
 T CBreakableProp::GetDmgModExplosive()
 T CBreakableProp::GetExplosiveDamage()
 T CBreakableProp::GetExplosiveRadius()
 T CBreakableProp::GetMaxBreakableSize()
 T CBreakableProp::GetMultiplayerBreakMode() const
 T CBreakableProp::GetPhysicsDamageTable()
 T CBreakableProp::GetPhysicsMode()
 T CBreakableProp::GetRootPhysicsObjectForBreak()
 T CBreakableProp::GetServerClass()
 T CBreakableProp::HandleFirstCollisionInteractions(int, gamevcollisionevent_t*)
 T CBreakableProp::HandleInteractionStick(int, gamevcollisionevent_t*)
 T CBreakableProp::HasInteraction(propdata_interactions_t)
 T CBreakableProp::HasPhysicsAttacker(float)
 T CBreakableProp::HasPreferredCarryAnglesForPlayer(CBasePlayer*)
 T CBreakableProp::Ignite(float, bool, float, bool)
 T CBreakableProp::InputAddHealth(inputdata_t&)
 T CBreakableProp::InputBreak(inputdata_t&)
 T CBreakableProp::InputDisablePhyscannonPickup(inputdata_t&)
 T CBreakableProp::InputDisablePuntSound(inputdata_t&)
 T CBreakableProp::InputEnablePhyscannonPickup(inputdata_t&)
 T CBreakableProp::InputEnablePuntSound(inputdata_t&)
 T CBreakableProp::InputRemoveHealth(inputdata_t&)
 T CBreakableProp::InputSetHealth(inputdata_t&)
 T CBreakableProp::OnAttemptPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CBreakableProp::OnBreak(Vector const&, Vector const&, CBaseEntity*)
 T CBreakableProp::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T CBreakableProp::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CBreakableProp::OnTakeDamage(CTakeDamageInfo const&)
 T CBreakableProp::OverridePropdata()
 T CBreakableProp::PhysGunLaunchAngularImpulse()
 T CBreakableProp::PlayPuntSound()
 T CBreakableProp::Precache()
 T CBreakableProp::PreferredCarryAngles()
 T CBreakableProp::RampToDefaultFadeScale()
 T CBreakableProp::SetBasePropData(string_t)
 T CBreakableProp::SetBreakableCount(int)
 T CBreakableProp::SetBreakableModel(string_t)
 T CBreakableProp::SetBreakableSkin(int)
 T CBreakableProp::SetDmgModBullet(float)
 T CBreakableProp::SetDmgModClub(float)
 T CBreakableProp::SetDmgModExplosive(float)
 T CBreakableProp::SetExplosiveDamage(float)
 T CBreakableProp::SetExplosiveRadius(float)
 T CBreakableProp::SetInteraction(propdata_interactions_t)
 T CBreakableProp::SetMaxBreakableSize(int)
 T CBreakableProp::SetMultiplayerBreakMode(mp_break_t)
 T CBreakableProp::SetPhysicsDamageTable(string_t)
 T CBreakableProp::SetPhysicsMode(int)
 T CBreakableProp::SetPropDataBlocksLOS(bool)
 T CBreakableProp::SetPropDataIsAIWalkable(bool)
 T CBreakableProp::Spawn()
 T CBreakableProp::StickAtPosition(Vector const&, Vector const&, QAngle const&)
 T CBreakableProp::UpdateHealth(int, CBaseEntity*)
 T CBreakableProp::YouForgotToImplementOrDeclareServerClass()
 T CBreakableProp::~CBreakableProp()
 T CBreakableSurface::BreakAllPanes()
 T CBreakableSurface::BreakThink()
 T CBreakableSurface::CreateShards(Vector const&, QAngle const&, Vector const&, Vector const&, float, float, int)
 T CBreakableSurface::Die(CBaseEntity*, Vector const&)
 T CBreakableSurface::DropPane(int, int)
 T CBreakableSurface::GetDataDescMap()
 T CBreakableSurface::GetServerClass()
 T CBreakableSurface::InputShatter(inputdata_t&)
 T CBreakableSurface::OnTakeDamage(CTakeDamageInfo const&)
 T CBreakableSurface::Precache()
 T CBreakableSurface::RecalcSupport(int, int)
 T CBreakableSurface::SetSupport(int, int, float)
 T CBreakableSurface::ShatterPane(int, int, Vector const&, Vector const&)
 T CBreakableSurface::Spawn()
 T CBreakableSurface::SurfaceTouch(CBaseEntity*)
 T CBreakableSurface::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
 T CBreakableSurface::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CBreakableSurface::YouForgotToImplementOrDeclareServerClass()
 T CBreakableSurface::~CBreakableSurface()
 T CBroadcastRecipientFilter::~CBroadcastRecipientFilter()
 T CBubbling::FizzThink()
 T CBubbling::GetDataDescMap()
 T CBubbling::InputActivate(inputdata_t&)
 T CBubbling::InputDeactivate(inputdata_t&)
 T CBubbling::InputSetCurrent(inputdata_t&)
 T CBubbling::InputSetDensity(inputdata_t&)
 T CBubbling::InputSetFrequency(inputdata_t&)
 T CBubbling::InputToggle(inputdata_t&)
 T CBubbling::Precache()
 T CBubbling::Spawn()
 T CBubbling::Toggle()
 T CBubbling::~CBubbling()
 T CBugBaitSensor::GetDataDescMap()
 T CBugBaitSensor::InputDisable(inputdata_t&)
 T CBugBaitSensor::InputEnable(inputdata_t&)
 T CBugBaitSensor::InputToggle(inputdata_t&)
 T CBugBaitSensor::~CBugBaitSensor()
 T CBulletsTraceFilter::ShouldHitEntity(IHandleEntity*, int)
 T CBullseyeList::LevelShutdownPostEntity()
 T CBullseyeList::~CBullseyeList()
 T CC_AI_Disable()
 T CC_AI_GraphConnect(CCommand const&)
 T CC_AI_Hull(CCommand const&)
 T CC_AI_LOS_Debug(IConVar*, char const*, float)
 T CC_AI_NextHull(CCommand const&)
 T CC_AI_Nodes(CCommand const&)
 T CC_AI_Resume()
 T CC_AI_ShowConnect(CCommand const&)
 T CC_AI_ShowFlyConnect(CCommand const&)
 T CC_AI_ShowGrid(CCommand const&)
 T CC_AI_ShowHints()
 T CC_AI_ShowHull(CCommand const&)
 T CC_AI_ShowJumpConnect(CCommand const&)
 T CC_AI_ShowVisibility(CCommand const&)
 T CC_AI_Step()
 T CC_AirDensity(CCommand const&)
 T CC_BloodSpray(CCommand const&)
 T CC_CH_CreateAirboat()
 T CC_CH_CreateJeep()
 T CC_CH_ForceRespawn()
 T CC_CH_TournamentRestart()
 T CC_CollisionTest(CCommand const&)
 T CC_CommentaryChanged(IConVar*, char const*, float)
 T CC_CommentaryFinishNode()
 T CC_CommentaryNotChanging()
 T CC_CreateFlashlight(CCommand const&)
 T CC_DebugHistory_AddLine(CCommand const&)
 T CC_DebugHistory_Dump(CCommand const&)
 T CC_DrawCross(CCommand const&)
 T CC_DrawLine(CCommand const&)
 T CC_DumpEventQueue()
 T CC_DumpGameStringTable()
 T CC_Ent_AbsBox(CCommand const&)
 T CC_Ent_AttachmentPoints(CCommand const&)
 T CC_Ent_Autoaim(CCommand const&)
 T CC_Ent_BBox(CCommand const&)
 T CC_Ent_CancelPendingEntFires(CCommand const&)
 T CC_Ent_Create(CCommand const&)
 T CC_Ent_Dump(CCommand const&)
 T CC_Ent_FireTarget(CCommand const&)
 T CC_Ent_Info(CCommand const&)
 T CC_Ent_Keyvalue(CCommand const&)
 T CC_Ent_Messages(CCommand const&)
 T CC_Ent_Name(CCommand const&)
 T CC_Ent_Orient(CCommand const&)
 T CC_Ent_Pause()
 T CC_Ent_Picker()
 T CC_Ent_Pivot(CCommand const&)
 T CC_Ent_RBox(CCommand const&)
 T CC_Ent_Remove(CCommand const&)
 T CC_Ent_RemoveAll(CCommand const&)
 T CC_Ent_Rotate(CCommand const&)
 T CC_Ent_SetName(CCommand const&)
 T CC_Ent_Show_Response_Criteria(CCommand const&)
 T CC_Ent_Step(CCommand const&)
 T CC_Ent_Teleport(CCommand const&)
 T CC_Ent_Text(CCommand const&)
 T CC_Ent_ViewOffset(CCommand const&)
 T CC_Find_Ent(CCommand const&)
 T CC_Find_Ent_Index(CCommand const&)
 T CC_GetCommandEnt(CCommand const&, CBaseEntity**, Vector*, QAngle*)
 T CC_GiveCurrentAmmo()
 T CC_Global_Set(CCommand const&)
 T CC_God_f()
 T CC_GroundList_f(CCommand const&)
 T CC_HurtMe_f(CCommand const&)
 T CC_KDTreeTest(CCommand const&)
 T CC_NPC_Bipass(CCommand const&)
 T CC_NPC_Combat(CCommand const&)
 T CC_NPC_Conditions(CCommand const&)
 T CC_NPC_Create(CCommand const&)
 T CC_NPC_Create_Aimed(CCommand const&)
 T CC_NPC_Destroy(CCommand const&)
 T CC_NPC_DestroyUnselected()
 T CC_NPC_Enemies(CCommand const&)
 T CC_NPC_Focus(CCommand const&)
 T CC_NPC_Freeze(CCommand const&)
 T CC_NPC_Go()
 T CC_NPC_GoRandom()
 T CC_NPC_Kill(CCommand const&)
 T CC_NPC_Nearest(CCommand const&)
 T CC_NPC_Relationships(CCommand const&)
 T CC_NPC_Reset()
 T CC_NPC_Route(CCommand const&)
 T CC_NPC_Select(CCommand const&)
 T CC_NPC_Task_Text(CCommand const&)
 T CC_NPC_Tasks(CCommand const&)
 T CC_NPC_Teleport()
 T CC_NPC_ViewSteeringRegulations(CCommand const&)
 T CC_NPC_ViewSteeringRegulationsAll()
 T CC_NPC_Viewcone(CCommand const&)
 T CC_Notarget_f()
 T CC_Particle_Test_Start(CCommand const&)
 T CC_Particle_Test_Stop(CCommand const&)
 T CC_Player_BugBaitSwap()
 T CC_Player_NoClip()
 T CC_Player_PhysSwap()
 T CC_Player_SetModel(CCommand const&)
 T CC_Player_TestDispatchEffect(CCommand const&)
 T CC_Player_Use(CCommand const&)
 T CC_Prop_Debug()
 T CC_Prop_Dynamic_Create(CCommand const&)
 T CC_Prop_Physics_Create(CCommand const&)
 T CC_Shake()
 T CC_Test_EHandle()
 T CC_Test_Entity_Blocker()
 T CC_ToggleDuck()
 T CC_ToggleZoom()
 T CC_VoxelTreeBox(CCommand const&)
 T CC_VoxelTreePlayerView()
 T CC_VoxelTreeSphere(CCommand const&)
 T CC_VoxelTreeView()
 T CC_WC_AirNodeEdit()
 T CC_WC_AirNodeEditFurther()
 T CC_WC_AirNodeEditNearer()
 T CC_WC_Create()
 T CC_WC_Destroy()
 T CC_WC_DestroyUndo()
 T CC_WC_LinkEdit()
 T CC_ai_drop_hint(CCommand const&)
 T CC_setang_f(CCommand const&)
 T CCallQueue::~CCallQueue()
 T CCallQueueT<CTSQueue<CFunctor*, false> >::CallQueued()
 T CCallQueueT<CTSQueue<CFunctor*, false> >::QueueFunctorInternal(CFunctor*)
 T CChangeLevel::Activate()
 T CChangeLevel::AddTransitionToList(levellist_t*, int, char const*, char const*, edict_t*)
 T CChangeLevel::BuildChangeLevelList(levellist_t*, int)
 T CChangeLevel::BuildEntityTransitionList(CBaseEntity*, char const*, CBaseEntity**, int*, int)
 T CChangeLevel::ChangeLevelNow(CBaseEntity*)
 T CChangeLevel::ChangeList(levellist_t*, int)
 T CChangeLevel::ComputeEntitySaveFlags(CBaseEntity*)
 T CChangeLevel::FindLandmark(char const*)
 T CChangeLevel::GetDataDescMap()
 T CChangeLevel::InTransitionVolume(CBaseEntity*, char const*)
 T CChangeLevel::InputChangeLevel(inputdata_t&)
 T CChangeLevel::IsEntityInTransition(CBaseEntity*)
 T CChangeLevel::KeyValue(char const*, char const*)
 T CChangeLevel::NotifyEntitiesOutOfTransition()
 T CChangeLevel::Spawn()
 T CChangeLevel::TouchChangeLevel(CBaseEntity*)
 T CChangeLevel::WarnAboutActiveLead()
 T CChangeLevel::~CChangeLevel()
 T CCheckClient::LevelInitPreEntity()
 T CCheckClient::~CCheckClient()
 T CChildOperatorDefinition::CreateInstance(UniqueId_t const&) const
 T CChildOperatorDefinition::GetClassSize() const
 T CChildOperatorDefinition::GetId() const
 T CChildOperatorDefinition::GetName() const
 T CChildOperatorDefinition::GetUnpackStructure() const
 T CChildOperatorDefinition::IsObsolete() const
 T CChoreoActor::AddChannel(CChoreoChannel*)
 T CChoreoActor::CChoreoActor()
 T CChoreoActor::FindChannelIndex(CChoreoChannel*)
 T CChoreoActor::GetChannel(int)
 T CChoreoActor::GetName()
 T CChoreoActor::GetNumChannels()
 T CChoreoActor::RestoreFromBuffer(CUtlBuffer&, CChoreoScene*, IChoreoStringPool*)
 T CChoreoActor::SetActive(bool)
 T CChoreoActor::SetName(char const*)
 T CChoreoChannel::AddEvent(CChoreoEvent*)
 T CChoreoChannel::CChoreoChannel()
 T CChoreoChannel::GetEvent(int)
 T CChoreoChannel::GetName()
 T CChoreoChannel::GetNumEvents()
 T CChoreoChannel::ReconcileCloseCaption()
 T CChoreoChannel::RestoreFromBuffer(CUtlBuffer&, CChoreoScene*, CChoreoActor*, IChoreoStringPool*)
 T CChoreoChannel::SetActor(CChoreoActor*)
 T CChoreoChannel::SetName(char const*)
 T CChoreoEvent::AddAbsoluteTag(CChoreoEvent::AbsTagType, char const*, float)
 T CChoreoEvent::AddEventDependency(CChoreoEvent*)
 T CChoreoEvent::AddRelativeTag(char const*, float)
 T CChoreoEvent::AddTimingTag(char const*, float, bool)
 T CChoreoEvent::AddTrack(char const*)
 T CChoreoEvent::CChoreoEvent(CChoreoScene*)
 T CChoreoEvent::CheckProcessing(IChoreoEventCallback*, CChoreoScene*, float)
 T CChoreoEvent::ClearEventDependencies()
 T CChoreoEvent::ContinueProcessing(IChoreoEventCallback*, CChoreoScene*, float)
 T CChoreoEvent::CurveHasEndTime()
 T CChoreoEvent::FindAbsoluteTag(CChoreoEvent::AbsTagType, char const*)
 T CChoreoEvent::GetActor()
 T CChoreoEvent::GetChannel()
 T CChoreoEvent::GetCloseCaptionToken() const
 T CChoreoEvent::GetCloseCaptionType() const
 T CChoreoEvent::GetDefaultCurveType()
 T CChoreoEvent::GetDescription()
 T CChoreoEvent::GetDistanceToTarget()
 T CChoreoEvent::GetDuration()
 T CChoreoEvent::GetEndTime()
 T CChoreoEvent::GetEventDependencies(CUtlVector<CChoreoEvent*, CUtlMemory<CChoreoEvent*, int> >&)
 T CChoreoEvent::GetFlexAnimationTrack(int)
 T CChoreoEvent::GetIntensity(float)
 T CChoreoEvent::GetLastSlaveEndTime() const
 T CChoreoEvent::GetLoopCount()
 T CChoreoEvent::GetName()
 T CChoreoEvent::GetNumFlexAnimationTracks()
 T CChoreoEvent::GetNumLoopsRemaining()
 T CChoreoEvent::GetOriginalPercentageFromPlaybackPercentage(float)
 T CChoreoEvent::GetParameters()
 T CChoreoEvent::GetParameters2()
 T CChoreoEvent::GetParameters3()
 T CChoreoEvent::GetPlayOverScript()
 T CChoreoEvent::GetPlaybackCloseCaptionToken(char*, int)
 T CChoreoEvent::GetStartTime()
 T CChoreoEvent::GetSubScene()
 T CChoreoEvent::GetTrackLookupSet()
 T CChoreoEvent::GetType()
 T CChoreoEvent::HasEndTime()
 T CChoreoEvent::Init(CChoreoScene*)
 T CChoreoEvent::IsLockBodyFacing()
 T CChoreoEvent::IsProcessing() const
 T CChoreoEvent::IsResumeCondition()
 T CChoreoEvent::IsSuppressingCaptionAttenuation() const
 T CChoreoEvent::IsUsingCombinedFile() const
 T CChoreoEvent::ResetProcessing()
 T CChoreoEvent::RestoreFlexAnimationsFromBuffer(CUtlBuffer&, IChoreoStringPool*)
 T CChoreoEvent::RestoreFromBuffer(CUtlBuffer&, CChoreoScene*, IChoreoStringPool*)
 T CChoreoEvent::SetActor(CChoreoActor*)
 T CChoreoEvent::SetChannel(CChoreoChannel*)
 T CChoreoEvent::SetCloseCaptionType(CChoreoEvent::CLOSECAPTION)
 T CChoreoEvent::SetEndTime(float)
 T CChoreoEvent::SetLastSlaveEndTime(float)
 T CChoreoEvent::SetName(char const*)
 T CChoreoEvent::SetNumLoopsRemaining(int)
 T CChoreoEvent::SetNumSlaves(int)
 T CChoreoEvent::SetParameters(char const*)
 T CChoreoEvent::SetRequiredCombinedChecksum(unsigned int)
 T CChoreoEvent::SetStartTime(float)
 T CChoreoEvent::SetSubScene(CChoreoScene*)
 T CChoreoEvent::SetTrackLookupSet(bool)
 T CChoreoEvent::SetType(CChoreoEvent::EVENTTYPE)
 T CChoreoEvent::SetUsingCombinedFile(bool)
 T CChoreoEvent::SetUsingRelativeTag(bool, char const*, char const*)
 T CChoreoEvent::SnapTimes()
 T CChoreoEvent::StartProcessing(IChoreoEventCallback*, CChoreoScene*, float)
 T CChoreoEvent::StopProcessing(IChoreoEventCallback*, CChoreoScene*, float)
 T CChoreoEvent::VerifyTagOrder()
 T CChoreoEvent::~CChoreoEvent()
 T CChoreoScene::AllocActor()
 T CChoreoScene::AllocChannel()
 T CChoreoScene::AllocEvent()
 T CChoreoScene::CChoreoScene(IChoreoEventCallback*)
 T CChoreoScene::CheckEventCompletion()
 T CChoreoScene::CurveHasEndTime()
 T CChoreoScene::EventLess(CChoreoScene::ActiveList const&, CChoreoScene::ActiveList const&)
 T CChoreoScene::EventThink(CChoreoEvent*, float, float, bool, CChoreoScene::PROCESSING_TYPE&)
 T CChoreoScene::FindActorIndex(CChoreoActor*)
 T CChoreoScene::FindStopTime()
 T CChoreoScene::GetActor(int)
 T CChoreoScene::GetDefaultCurveType()
 T CChoreoScene::GetDuration()
 T CChoreoScene::GetEvent(int)
 T CChoreoScene::GetFilename() const
 T CChoreoScene::GetNumActors()
 T CChoreoScene::GetNumChannels()
 T CChoreoScene::GetNumEvents()
 T CChoreoScene::GetPlayingSoundName(char*, int)
 T CChoreoScene::GetTime()
 T CChoreoScene::HasEventsOfType(CChoreoEvent::EVENTTYPE) const
 T CChoreoScene::HasUnplayedSpeech()
 T CChoreoScene::InternalDetermineEventTypes()
 T CChoreoScene::IsBackground()
 T CChoreoScene::IsSubScene() const
 T CChoreoScene::LoopThink(float)
 T CChoreoScene::LoopToTime(float)
 T CChoreoScene::ProcessActiveListEntry(CChoreoScene::ActiveList*)
 T CChoreoScene::ReconcileCloseCaption()
 T CChoreoScene::ResetSimulation(bool, float, float)
 T CChoreoScene::RestoreFromBinaryBuffer(CUtlBuffer&, char const*, IChoreoStringPool*)
 T CChoreoScene::ResumeSimulation()
 T CChoreoScene::SetBackground(bool)
 T CChoreoScene::SetEventCallbackInterface(IChoreoEventCallback*)
 T CChoreoScene::SetPrintFunc(void (*)(char const*, ...))
 T CChoreoScene::SetSoundFileStartupLatency(float)
 T CChoreoScene::SetSubScene(bool)
 T CChoreoScene::SetTime(float)
 T CChoreoScene::ShouldIgnorePhonemes() const
 T CChoreoScene::SimulationFinished()
 T CChoreoScene::SnapTime(float)
 T CChoreoScene::Think(float)
 T CChoreoScene::~CChoreoScene()
 T CChoreoStringPool::FindOrAddString(char const*)
 T CChoreoStringPool::GetString(short, char*, int)
 T CCitadelEnergyCore::GetDataDescMap()
 T CCitadelEnergyCore::GetServerClass()
 T CCitadelEnergyCore::InputStartCharge(inputdata_t&)
 T CCitadelEnergyCore::InputStartDischarge(inputdata_t&)
 T CCitadelEnergyCore::InputStop(inputdata_t&)
 T CCitadelEnergyCore::Precache()
 T CCitadelEnergyCore::ShouldTransmit(CCheckTransmitInfo const*)
 T CCitadelEnergyCore::Spawn()
 T CCitadelEnergyCore::StartCharge(float)
 T CCitadelEnergyCore::StopDischarge(float)
 T CCitadelEnergyCore::UpdateTransmitState()
 T CCitadelEnergyCore::YouForgotToImplementOrDeclareServerClass()
 T CCitadelEnergyCore::~CCitadelEnergyCore()
 T CCitizenResponseSystem::AddResponseTrigger(citizenresponses_t)
 T CCitizenResponseSystem::GetDataDescMap()
 T CCitizenResponseSystem::InputResponseVitalNPC(inputdata_t&)
 T CCitizenResponseSystem::OnRestore()
 T CCitizenResponseSystem::ResponseThink()
 T CCitizenResponseSystem::Spawn()
 T CCitizenResponseSystem::~CCitizenResponseSystem()
 T CClassPtrSaveRestoreOps::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CClassPtrSaveRestoreOps::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CCleanupDefaultRelationShips::Shutdown()
 T CCleanupDefaultRelationShips::~CCleanupDefaultRelationShips()
 T CCleanupUtlSymbolTable::~CCleanupUtlSymbolTable()
 T CCollideList::EnumEntity(IHandleEntity*)
 T CCollisionEvent::AddDamageEvent(CBaseEntity*, CTakeDamageInfo const&, IPhysicsObject*, bool, Vector const&, Vector const&)
 T CCollisionEvent::AddDamageInflictor(IPhysicsObject*, float, Vector const&, Vector const&, bool)
 T CCollisionEvent::AddTouchEvent(CBaseEntity*, CBaseEntity*, int, Vector const&, Vector const&)
 T CCollisionEvent::AdditionalCollisionChecksThisTick(int)
 T CCollisionEvent::DeltaTimeSinceLastFluid(CBaseEntity*)
 T CCollisionEvent::EndTouch(IPhysicsObject*, IPhysicsObject*, IPhysicsCollisionData*)
 T CCollisionEvent::FindOrAddPenetrateEvent(CBaseEntity*, CBaseEntity*)
 T CCollisionEvent::FluidEndTouch(IPhysicsObject*, IPhysicsFluidController*)
 T CCollisionEvent::FluidStartTouch(IPhysicsObject*, IPhysicsFluidController*)
 T CCollisionEvent::FlushQueuedOperations()
 T CCollisionEvent::FrameUpdate()
 T CCollisionEvent::Friction(IPhysicsObject*, float, int, int, IPhysicsCollisionData*)
 T CCollisionEvent::GetListOfPenetratingEntities(CBaseEntity*, CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >&)
 T CCollisionEvent::LevelShutdown()
 T CCollisionEvent::ObjectEnterTrigger(IPhysicsObject*, IPhysicsObject*)
 T CCollisionEvent::ObjectLeaveTrigger(IPhysicsObject*, IPhysicsObject*)
 T CCollisionEvent::ObjectSleep(IPhysicsObject*)
 T CCollisionEvent::ObjectWake(IPhysicsObject*)
 T CCollisionEvent::PostCollision(vcollisionevent_t*)
 T CCollisionEvent::PostSimulationFrame()
 T CCollisionEvent::PreCollision(vcollisionevent_t*)
 T CCollisionEvent::RestoreDamageInflictorState(IPhysicsObject*)
 T CCollisionEvent::RestoreDamageInflictorState(int, float)
 T CCollisionEvent::ShouldCollide(IPhysicsObject*, IPhysicsObject*, void*, void*)
 T CCollisionEvent::ShouldFreezeContacts(IPhysicsObject**, int)
 T CCollisionEvent::ShouldFreezeObject(IPhysicsObject*)
 T CCollisionEvent::ShouldSolvePenetration(IPhysicsObject*, IPhysicsObject*, void*, void*, float)
 T CCollisionEvent::StartTouch(IPhysicsObject*, IPhysicsObject*, IPhysicsCollisionData*)
 T CCollisionEvent::UpdateDamageEvents()
 T CCollisionEvent::UpdateFrictionSounds()
 T CCollisionEvent::UpdatePenetrateEvents()
 T CCollisionEvent::UpdateTouchEvents()
 T CCollisionEvent::~CCollisionEvent()
 T CCollisionProperty::CCollisionProperty()
 T CCollisionProperty::CalcDistanceFromPoint(Vector const&) const
 T CCollisionProperty::CalcNearestPoint(Vector const&, Vector*) const
 T CCollisionProperty::CollisionAABBToWorldAABB(Vector const&, Vector const&, Vector*, Vector*) const
 T CCollisionProperty::CollisionToNormalizedSpace(Vector const&, Vector*) const
 T CCollisionProperty::CollisionToWorldTransform() const
 T CCollisionProperty::ComputeSurroundingBox(Vector*, Vector*)
 T CCollisionProperty::ComputeVPhysicsSurroundingBox(Vector*, Vector*)
 T CCollisionProperty::DestroyPartitionHandle()
 T CCollisionProperty::DoesVPhysicsInvalidateSurroundingBox() const
 T CCollisionProperty::GetCollisionAngles() const
 T CCollisionProperty::GetCollisionGroup() const
 T CCollisionProperty::GetCollisionModel()
 T CCollisionProperty::GetCollisionModelIndex()
 T CCollisionProperty::GetCollisionOrigin() const
 T CCollisionProperty::GetDataDescMap()
 T CCollisionProperty::GetEntityHandle()
 T CCollisionProperty::GetIClientUnknown()
 T CCollisionProperty::GetRootParentToWorldTransform() const
 T CCollisionProperty::GetSolid() const
 T CCollisionProperty::GetSolidFlags() const
 T CCollisionProperty::Init(CBaseEntity*)
 T CCollisionProperty::IsPointInBounds(Vector const&) const
 T CCollisionProperty::MarkPartitionHandleDirty()
 T CCollisionProperty::MarkSurroundingBoundsDirty()
 T CCollisionProperty::NetworkStateChanged()
 T CCollisionProperty::NetworkStateChanged(void*)
 T CCollisionProperty::NormalizedToCollisionSpace(Vector const&, Vector*) const
 T CCollisionProperty::NormalizedToWorldSpace(Vector const&, Vector*) const
 T CCollisionProperty::OBBMaxs() const
 T CCollisionProperty::OBBMaxsPreScaled() const
 T CCollisionProperty::OBBMins() const
 T CCollisionProperty::OBBMinsPreScaled() const
 T CCollisionProperty::RandomPointInBounds(Vector const&, Vector const&, Vector*) const
 T CCollisionProperty::RefreshScaledCollisionBounds()
 T CCollisionProperty::SetCollisionBounds(Vector const&, Vector const&)
 T CCollisionProperty::SetSolid(SolidType_t)
 T CCollisionProperty::SetSolidFlags(int)
 T CCollisionProperty::SetSurroundingBoundsType(SurroundingBoundsType_t, Vector const*, Vector const*)
 T CCollisionProperty::ShouldTouchTrigger(int) const
 T CCollisionProperty::TestCollision(Ray_t const&, unsigned int, CGameTrace&)
 T CCollisionProperty::TestHitboxes(Ray_t const&, unsigned int, CGameTrace&)
 T CCollisionProperty::UpdatePartition()
 T CCollisionProperty::UpdateServerPartitionMask()
 T CCollisionProperty::UseTriggerBounds(bool, float)
 T CCollisionProperty::WorldSpaceCenter() const
 T CCollisionProperty::WorldSpaceSurroundingBounds(Vector*, Vector*)
 T CCollisionProperty::WorldSpaceTriggerBounds(Vector*, Vector*) const
 T CCollisionProperty::WorldToNormalizedSpace(Vector const&, Vector*) const
 T CCollisionProperty::~CCollisionProperty()
 T CColorCorrection::Activate()
 T CColorCorrection::CColorCorrection()
 T CColorCorrection::FadeInThink()
 T CColorCorrection::FadeOutThink()
 T CColorCorrection::GetDataDescMap()
 T CColorCorrection::GetServerClass()
 T CColorCorrection::InputDisable(inputdata_t&)
 T CColorCorrection::InputEnable(inputdata_t&)
 T CColorCorrection::InputSetFadeInDuration(inputdata_t&)
 T CColorCorrection::InputSetFadeOutDuration(inputdata_t&)
 T CColorCorrection::ObjectCaps()
 T CColorCorrection::Spawn()
 T CColorCorrection::UpdateTransmitState()
 T CColorCorrection::YouForgotToImplementOrDeclareServerClass()
 T CColorCorrection::~CColorCorrection()
 T CColorCorrectionVolume::CColorCorrectionVolume()
 T CColorCorrectionVolume::EndTouch(CBaseEntity*)
 T CColorCorrectionVolume::GetDataDescMap()
 T CColorCorrectionVolume::GetServerClass()
 T CColorCorrectionVolume::InputDisable(inputdata_t&)
 T CColorCorrectionVolume::InputEnable(inputdata_t&)
 T CColorCorrectionVolume::KeyValue(char const*, char const*)
 T CColorCorrectionVolume::ObjectCaps()
 T CColorCorrectionVolume::PassesTriggerFilters(CBaseEntity*)
 T CColorCorrectionVolume::Spawn()
 T CColorCorrectionVolume::StartTouch(CBaseEntity*)
 T CColorCorrectionVolume::ThinkFunc()
 T CColorCorrectionVolume::UpdateTransmitState()
 T CColorCorrectionVolume::YouForgotToImplementOrDeclareServerClass()
 T CColorCorrectionVolume::~CColorCorrectionVolume()
 T CCombatCharVisCache::FrameUpdatePreEntityThink()
 T CCombatCharVisCache::LevelShutdownPreEntity()
 T CCombatCharVisCache::~CCombatCharVisCache()
 T CCombineDropshipContainer::AddSmokeTrail(Vector const&)
 T CCombineDropshipContainer::CreateCorpse()
 T CCombineDropshipContainer::Event_Killed(CTakeDamageInfo const&)
 T CCombineDropshipContainer::GetDataDescMap()
 T CCombineDropshipContainer::OnTakeDamage(CTakeDamageInfo const&)
 T CCombineDropshipContainer::OverridePropdata()
 T CCombineDropshipContainer::Precache()
 T CCombineDropshipContainer::Spawn()
 T CCombineDropshipContainer::ThrowFlamingGib()
 T CCombineDropshipContainer::~CCombineDropshipContainer()
 T CCommandPoint::GetDataDescMap()
 T CCommandPoint::InputOutsideTransition(inputdata_t&)
 T CCommandPoint::ObjectCaps()
 T CCommandPoint::~CCommandPoint()
 T CCommentaryAuto::GetDataDescMap()
 T CCommentaryAuto::InputMultiplayerSpawned(inputdata_t&)
 T CCommentaryAuto::Spawn()
 T CCommentaryAuto::Think()
 T CCommentaryAuto::~CCommentaryAuto()
 T CCommentarySystem::ConvarChanged(IConVar*, char const*, float)
 T CCommentarySystem::GetDataDescMap()
 T CCommentarySystem::GetNodeUnderCrosshair()
 T CCommentarySystem::InitCommentary()
 T CCommentarySystem::JumpToNextNode(CBasePlayer*)
 T CCommentarySystem::LevelInitPostEntity()
 T CCommentarySystem::LevelInitPreEntity()
 T CCommentarySystem::LevelShutdownPreEntity()
 T CCommentarySystem::OnRestore()
 T CCommentarySystem::ParseEntKVBlock(CBaseEntity*, KeyValues*)
 T CCommentarySystem::PrePlayerRunCommand(CBasePlayer*, CUserCmd*)
 T CCommentarySystem::ShutDownCommentary()
 T CCommentarySystem::~CCommentarySystem()
 T CCommentaryViewPosition::Precache()
 T CCommentaryViewPosition::Spawn()
 T CCommentaryViewPosition::~CCommentaryViewPosition()
 T CCommentary_SaveRestoreBlockHandler::GetBlockName()
 T CCommentary_SaveRestoreBlockHandler::ReadRestoreHeaders(IRestore*)
 T CCommentary_SaveRestoreBlockHandler::Restore(IRestore*, bool)
 T CCommentary_SaveRestoreBlockHandler::Save(ISave*)
 T CCommentary_SaveRestoreBlockHandler::WriteSaveHeaders(ISave*)
 T CConceptHistoriesDataOps::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CConceptHistoriesDataOps::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CConceptHistoriesDataOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CConceptHistoriesDataOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CConceptInfoMap::CConceptInfoMap()
 T CConceptInfoMap::~CConceptInfoMap()
 T CConcussiveBlast::Explode(float)
 T CConcussiveBlast::GetDataDescMap()
 T CConcussiveBlast::Precache()
 T CConcussiveBlast::~CConcussiveBlast()
 T CConstantForceController::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)
 T CConstraintAnchor::GetDataDescMap()
 T CConstraintAnchor::Spawn()
 T CConstraintAnchor::~CConstraintAnchor()
 T CConstraintFloodList::AddLink(CBaseEntity*, CBaseEntity*, bool)
 T CConstraintFloodList::BuildGraphFromEntity(CBaseEntity*, CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >&)
 T CCopyRecipientFilter::AddRecipient(CBasePlayer*)
 T CCopyRecipientFilter::GetRecipientCount() const
 T CCopyRecipientFilter::GetRecipientIndex(int) const
 T CCopyRecipientFilter::Init(IRecipientFilter*)
 T CCopyRecipientFilter::IsInitMessage() const
 T CCopyRecipientFilter::IsReliable() const
 T CCopyRecipientFilter::~CCopyRecipientFilter()
 T CCorpse::GetServerClass()
 T CCorpse::ObjectCaps()
 T CCorpse::YouForgotToImplementOrDeclareServerClass()
 T CCorpse::~CCorpse()
 T CCraneServerVehicle::GetVehicleViewPosition(int, Vector*, QAngle*, float*)
 T CCraneServerVehicle::IsPassengerEntering()
 T CCraneServerVehicle::IsPassengerExiting()
 T CCraneServerVehicle::NPC_DriveVehicle()
 T CCraneServerVehicle::NPC_SetDriver(CNPC_VehicleDriver*)
 T CCraneTip::CreateConstraint(CBaseAnimating*, IPhysicsConstraintGroup*)
 T CCraneTip::GetDataDescMap()
 T CCraneTip::Precache()
 T CCraneTip::Spawn()
 T CCraneTip::~CCraneTip()
 T CCredits::GetDataDescMap()
 T CCredits::InputRollCredits(inputdata_t&)
 T CCredits::InputRollOutroCredits(inputdata_t&)
 T CCredits::InputSetLogoLength(inputdata_t&)
 T CCredits::InputShowLogo(inputdata_t&)
 T CCredits::OnRestore()
 T CCredits::RollOutroCredits()
 T CCredits::Spawn()
 T CCredits::~CCredits()
 T CCrossbowBolt::BoltTouch(CBaseEntity*)
 T CCrossbowBolt::BubbleThink()
 T CCrossbowBolt::Classify()
 T CCrossbowBolt::CreateSprites()
 T CCrossbowBolt::CreateVPhysics()
 T CCrossbowBolt::GetDataDescMap()
 T CCrossbowBolt::GetServerClass()
 T CCrossbowBolt::PhysicsSolidMaskForEntity() const
 T CCrossbowBolt::Precache()
 T CCrossbowBolt::Spawn()
 T CCrossbowBolt::YouForgotToImplementOrDeclareServerClass()
 T CCrossbowBolt::~CCrossbowBolt()
 T CCurveData::GetBoundedSample(ICurveDataAccessor*, int, bool&)
 T CCurveData::GetIntensity(ICurveDataAccessor*, float)
 T CCurveData::RestoreFromBuffer(CUtlBuffer&, IChoreoStringPool*)
 T CCycler::GenericCyclerSpawn(char*, Vector, Vector)
 T CCycler::GetDataDescMap()
 T CCycler::InputSetSequence(inputdata_t&)
 T CCycler::IsAlive()
 T CCycler::ObjectCaps()
 T CCycler::OnTakeDamage(CTakeDamageInfo const&)
 T CCycler::Precache()
 T CCycler::Spawn()
 T CCycler::Think()
 T CCycler::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CDamageModifier::GetModifier() const
 T CDamageModifier::IsDamageDoneToMe() const
 T CDataManager<CBoneCache, bonecacheparams_t, CBoneCache*, CThreadFastMutex>::DestroyResourceStorage(void*)
 T CDataManager<CBoneCache, bonecacheparams_t, CBoneCache*, CThreadFastMutex>::GetRealSize(void*)
 T CDataManager<CBoneCache, bonecacheparams_t, CBoneCache*, CThreadFastMutex>::Lock()
 T CDataManager<CBoneCache, bonecacheparams_t, CBoneCache*, CThreadFastMutex>::TryLock()
 T CDataManager<CBoneCache, bonecacheparams_t, CBoneCache*, CThreadFastMutex>::Unlock()
 T CDataManager<CBoneCache, bonecacheparams_t, CBoneCache*, CThreadFastMutex>::~CDataManager()
 T CDataManagerBase::BreakLock(memhandle_t__*)
 T CDataManagerBase::CDataManagerBase(unsigned int)
 T CDataManagerBase::CreateHandle(bool)
 T CDataManagerBase::DestroyResource(memhandle_t__*)
 T CDataManagerBase::EnsureCapacity(unsigned int)
 T CDataManagerBase::FlushAll()
 T CDataManagerBase::GetForFreeByIndex(unsigned short)
 T CDataManagerBase::GetResource_NoLock(memhandle_t__*)
 T CDataManagerBase::Lock()
 T CDataManagerBase::StoreResourceInHandle(unsigned short, void*, unsigned int)
 T CDataManagerBase::TouchByIndex(unsigned short)
 T CDataManagerBase::TryLock()
 T CDataManagerBase::Unlock()
 T CDataManagerBase::~CDataManagerBase()
 T CDataObjectAccessSystem::Init()
 T CDataObjectAccessSystem::Shutdown()
 T CDataObjectAccessSystem::~CDataObjectAccessSystem()
 T CDatadescGeneratedNameHolder::GenerateName(char const*)
 T CDatadescGeneratedNameHolder::~CDatadescGeneratedNameHolder()
 T CDebugHistory::GetDataDescMap()
 T CDebugHistory::Restore(IRestore&)
 T CDebugHistory::Save(ISave&)
 T CDebugHistory::Spawn()
 T CDebugHistory::~CDebugHistory()
 T CDecal::Activate()
 T CDecal::GetDataDescMap()
 T CDecal::InputActivate(inputdata_t&)
 T CDecal::KeyValue(char const*, char const*)
 T CDecal::Spawn()
 T CDecal::StaticDecal()
 T CDecal::TriggerDecal(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CDecal::~CDecal()
 T CDecalEmitterSystem::CDecalEmitterSystem(char const*)
 T CDecalEmitterSystem::Clear()
 T CDecalEmitterSystem::GetDecalIndexForName(char const*)
 T CDecalEmitterSystem::GetDecalNameForIndex(int)
 T CDecalEmitterSystem::Init()
 T CDecalEmitterSystem::LevelInitPreEntity()
 T CDecalEmitterSystem::LoadDecalsFromScript(char const*)
 T CDecalEmitterSystem::Shutdown()
 T CDecalEmitterSystem::TranslateDecalForGameMaterial(char const*, unsigned char)
 T CDecalEmitterSystem::~CDecalEmitterSystem()
 T CDefOps<CAI_BaseNPC*>::LessFunc(CAI_BaseNPC* const&, CAI_BaseNPC* const&)
 T CDefOps<CBaseEntity*>::LessFunc(CBaseEntity* const&, CBaseEntity* const&)
 T CDefOps<CChoreoActor*>::LessFunc(CChoreoActor* const&, CChoreoActor* const&)
 T CDefOps<CPhysCollide const*>::LessFunc(CPhysCollide const* const&, CPhysCollide const* const&)
 T CDefOps<CSteamID>::LessFunc(CSteamID const&, CSteamID const&)
 T CDefOps<IPhysicsObject*>::LessFunc(IPhysicsObject* const&, IPhysicsObject* const&)
 T CDefOps<int>::LessFunc(int const&, int const&)
 T CDefOps<unsigned int>::LessFunc(unsigned int const&, unsigned int const&)
 T CDefOps<unsigned long long>::LessFunc(unsigned long long const&, unsigned long long const&)
 T CDefSaveRestoreBlockHandler::PostRestore()
 T CDefSaveRestoreBlockHandler::PostSave()
 T CDefSaveRestoreBlockHandler::PreRestore()
 T CDefSaveRestoreBlockHandler::PreSave(CSaveRestoreData*)
 T CDefSaveRestoreOps::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CDefSaveRestoreOps::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CDefSaveRestoreOps::Parse(SaveRestoreFieldInfo_t const&, char const*)
 T CDefaultAccessor::RegisterConCommandBase(ConCommandBase*)
 T CDefaultParticleSystemQuery::GetLightingAtPoint(Vector const&, Color&)
 T CDefaultParticleSystemQuery::GetPixelVisibility(int*, Vector const&, float)
 T CDefaultParticleSystemQuery::GetRandomPointsOnControllingObjectHitBox(CParticleCollection*, int, int, float, int, Vector*, Vector, Vector*, int*)
 T CDefaultParticleSystemQuery::TraceLine(Vector const&, Vector const&, unsigned int, IHandleEntity const*, int, CBaseTrace*)
 T CDefaultPlayerPickupVPhysics::ForcePhysgunOpen(CBasePlayer*)
 T CDefaultPlayerPickupVPhysics::HasPreferredCarryAnglesForPlayer(CBasePlayer*)
 T CDefaultPlayerPickupVPhysics::OnAttemptPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CDefaultPlayerPickupVPhysics::OnFailedPhysGunPickup(Vector)
 T CDefaultPlayerPickupVPhysics::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T CDefaultPlayerPickupVPhysics::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CDefaultPlayerPickupVPhysics::PhysGunLaunchAngularImpulse()
 T CDefaultPlayerPickupVPhysics::PhysGunLaunchVelocity(Vector const&, float)
 T CDefaultPlayerPickupVPhysics::PreferredCarryAngles()
 T CDefaultPlayerPickupVPhysics::ShouldPuntUseLaunchForces(PhysGunForce_t)
 T CDefaultResponseSystem::CDefaultResponseSystem()
 T CDefaultResponseSystem::ClearInstanced()
 T CDefaultResponseSystem::GetScriptFile()
 T CDefaultResponseSystem::Init()
 T CDefaultResponseSystem::LevelInitPostEntity()
 T CDefaultResponseSystem::LevelInitPreEntity()
 T CDefaultResponseSystem::PrecacheCustomResponseSystem(char const*)
 T CDefaultResponseSystem::Release()
 T CDefaultResponseSystem::ReloadAllResponseSystems()
 T CDefaultResponseSystem::Shutdown()
 T CDefaultResponseSystem::~CDefaultResponseSystem()
 T CDefaultResponseSystemSaveRestoreBlockHandler::GetBlockName()
 T CDefaultResponseSystemSaveRestoreBlockHandler::ReadRestoreHeaders(IRestore*)
 T CDefaultResponseSystemSaveRestoreBlockHandler::Restore(IRestore*, bool)
 T CDefaultResponseSystemSaveRestoreBlockHandler::Save(ISave*)
 T CDefaultResponseSystemSaveRestoreBlockHandler::WriteSaveHeaders(ISave*)
 T CDevShotSystem::FrameUpdatePostEntityThink()
 T CDevShotSystem::LevelInitPreEntity()
 T CDevShotSystem::SafeRemoveIfDesired()
 T CDevShotSystem::~CDevShotSystem()
 T CDirtySpatialPartitionEntityList::CDirtySpatialPartitionEntityList(char const*)
 T CDirtySpatialPartitionEntityList::Init()
 T CDirtySpatialPartitionEntityList::LevelShutdownPostEntity()
 T CDirtySpatialPartitionEntityList::OnPostQuery(int)
 T CDirtySpatialPartitionEntityList::OnPreQuery(int)
 T CDirtySpatialPartitionEntityList::OnPreQuery_V1()
 T CDirtySpatialPartitionEntityList::Shutdown()
 T CDirtySpatialPartitionEntityList::~CDirtySpatialPartitionEntityList()
 T CDllDemandLoader::CDllDemandLoader(char const*)
 T CDllDemandLoader::GetFactory()
 T CDllDemandLoader::~CDllDemandLoader()
 T CDmxAttribute::AllocateDataMemory(DmAttributeType_t)
 T CDmxAttribute::CDmxAttribute(char const*)
 T CDmxAttribute::FreeDataMemory()
 T CDmxAttribute::GetName() const
 T CDmxAttribute::SetValue(char const*)
 T CDmxAttribute::Unserialize(DmAttributeType_t, CUtlBuffer&)
 T CDmxAttribute::UnserializeElement(DmAttributeType_t, CUtlBuffer&)
 T CDmxAttribute::~CDmxAttribute()
 T CDmxElement::AddAttribute(char const*)
 T CDmxElement::AddElementsToDelete(CUtlVector<CDmxElement*, CUtlMemory<CDmxElement*, int> >&)
 T CDmxElement::CDmxElement(char const*)
 T CDmxElement::GetAttribute(char const*)
 T CDmxElement::GetAttribute(char const*) const
 T CDmxElement::GetId() const
 T CDmxElement::GetName() const
 T CDmxElement::GetTypeString() const
 T CDmxElement::HasAttribute(char const*) const
 T CDmxElement::LockForChanges(bool)
 T CDmxElement::RemoveAllElementsRecursive()
 T CDmxElement::Resort() const
 T CDmxElement::SetId(UniqueId_t const&)
 T CDmxElement::UnpackIntoStructure(void*, unsigned long, DmxElementUnpackStructure_t const*) const
 T CDmxElement::~CDmxElement()
 T CDmxElementDictionary::Clear()
 T CDmxElementDictionary::HookUpElementArrayAttributes()
 T CDmxElementDictionary::HookUpElementReferences()
 T CDmxKeyValues2ErrorStack::ReportError(char const*, ...)
 T CDmxSerializer::Unserialize(CUtlBuffer&, int, CDmxElement**)
 T CDmxSerializer::UnserializeAttributes(CUtlBuffer&, CDmxElement*, CUtlVector<CDmxElement*, CUtlMemory<CDmxElement*, int> >&, int, int*, char*)
 T CDmxSerializer::UnserializeElementArrayAttribute(CUtlBuffer&, CDmxAttribute*, CUtlVector<CDmxElement*, CUtlMemory<CDmxElement*, int> >&)
 T CDmxSerializer::UnserializeElementIndex(CUtlBuffer&, CUtlVector<CDmxElement*, CUtlMemory<CDmxElement*, int> >&)
 T CDmxSerializerKeyValues2::CreateDmxElement(char const*)
 T CDmxSerializerKeyValues2::EatWhitespacesAndComments(CUtlBuffer&)
 T CDmxSerializerKeyValues2::ReadToken(CUtlBuffer&, CUtlBuffer&)
 T CDmxSerializerKeyValues2::Unserialize(char const*, CUtlBuffer&, CDmxElement**)
 T CDmxSerializerKeyValues2::UnserializeArrayAttribute(CUtlBuffer&, int, char const*, DmAttributeType_t)
 T CDmxSerializerKeyValues2::UnserializeAttribute(CUtlBuffer&, int, char const*, DmAttributeType_t)
 T CDmxSerializerKeyValues2::UnserializeAttributeValueFromToken(CDmxAttribute*, DmAttributeType_t, CUtlBuffer&)
 T CDmxSerializerKeyValues2::UnserializeElement(CUtlBuffer&, char const*, int*)
 T CDmxSerializerKeyValues2::UnserializeElement(CUtlBuffer&, int*)
 T CDmxSerializerKeyValues2::UnserializeElementArrayAttribute(CUtlBuffer&, int, char const*)
 T CDmxSerializerKeyValues2::UnserializeElementAttribute(CUtlBuffer&, int, char const*, char const*)
 T CDynamicLight::DynamicLightThink()
 T CDynamicLight::GetDataDescMap()
 T CDynamicLight::GetServerClass()
 T CDynamicLight::InputToggle(inputdata_t&)
 T CDynamicLight::InputTurnOff(inputdata_t&)
 T CDynamicLight::InputTurnOn(inputdata_t&)
 T CDynamicLight::KeyValue(char const*, char const*)
 T CDynamicLight::Spawn()
 T CDynamicLight::YouForgotToImplementOrDeclareServerClass()
 T CDynamicLight::~CDynamicLight()
 T CDynamicProp::AnimThink()
 T CDynamicProp::CDynamicProp()
 T CDynamicProp::CreateBoneFollowers()
 T CDynamicProp::CreateVPhysics()
 T CDynamicProp::FinishSetSequence(int)
 T CDynamicProp::GetDataDescMap()
 T CDynamicProp::GetRootPhysicsObjectForBreak()
 T CDynamicProp::GetServerClass()
 T CDynamicProp::HandleAnimEvent(animevent_t*)
 T CDynamicProp::InputDisableCollision(inputdata_t&)
 T CDynamicProp::InputEnableCollision(inputdata_t&)
 T CDynamicProp::InputSetAnimation(inputdata_t&)
 T CDynamicProp::InputSetDefaultAnimation(inputdata_t&)
 T CDynamicProp::InputSetPlaybackRate(inputdata_t&)
 T CDynamicProp::InputTurnOff(inputdata_t&)
 T CDynamicProp::InputTurnOn(inputdata_t&)
 T CDynamicProp::NotifyPositionChanged(CBaseEntity*)
 T CDynamicProp::OnRestore()
 T CDynamicProp::OverridePropdata()
 T CDynamicProp::PropSetAnim(char const*)
 T CDynamicProp::PropSetSequence(int)
 T CDynamicProp::SetParent(CBaseEntity*, int)
 T CDynamicProp::Spawn()
 T CDynamicProp::TestCollision(Ray_t const&, unsigned int, CGameTrace&)
 T CDynamicProp::UpdateOnRemove()
 T CDynamicProp::YouForgotToImplementOrDeclareServerClass()
 T CDynamicProp::~CDynamicProp()
 T CEffectsServer::Beam(Vector const&, Vector const&, int, int, unsigned char, unsigned char, float, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
 T CEffectsServer::Dust(Vector const&, Vector const&, float, float)
 T CEffectsServer::EnergySplash(Vector const&, Vector const&, bool)
 T CEffectsServer::IsServer()
 T CEffectsServer::MetalSparks(Vector const&, Vector const&)
 T CEffectsServer::MuzzleFlash(Vector const&, QAngle const&, float, int)
 T CEffectsServer::Ricochet(Vector const&, Vector const&)
 T CEffectsServer::Smoke(Vector const&, int, float, float)
 T CEffectsServer::Sparks(Vector const&, int, int, Vector const*)
 T CEffectsServer::SuppressEffectsSounds(bool)
 T CEffectsServer::Time()
 T CEffectsServer::~CEffectsServer()
 T CEmbers::EmberUse(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CEmbers::GetDataDescMap()
 T CEmbers::GetServerClass()
 T CEmbers::Precache()
 T CEmbers::Spawn()
 T CEmbers::YouForgotToImplementOrDeclareServerClass()
 T CEmbers::~CEmbers()
 T CEmptyConVar::GetName() const
 T CEmptyConVar::IsFlagSet(int) const
 T CEmptyConVar::SetValue(char const*)
 T CEmptyConVar::SetValue(float)
 T CEmptyConVar::SetValue(int)
 T CEmptyConVar::~CEmptyConVar()
 T CEnableMotionFixup::~CEnableMotionFixup()
 T CEntFireAutoCompletionFunctor::CommandCallback(CCommand const&)
 T CEntFireAutoCompletionFunctor::CommandCompletionCallback(char const*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >&)
 T CEntFireAutoCompletionFunctor::EntFire_AutoCompleteInput(char const*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >&)
 T CEntityBlocker::Create(Vector const&, Vector const&, Vector const&, CBaseEntity*, bool)
 T CEntityBlocker::Spawn()
 T CEntityBlocker::TestCollision(Ray_t const&, unsigned int, CGameTrace&)
 T CEntityBlocker::~CEntityBlocker()
 T CEntityClassList<CAPCMissile>::LevelShutdownPostEntity()
 T CEntityClassList<CAPCMissile>::~CEntityClassList()
 T CEntityClassList<CBugBaitSensor>::LevelShutdownPostEntity()
 T CEntityClassList<CBugBaitSensor>::~CEntityClassList()
 T CEntityClassList<CLaserDot>::LevelShutdownPostEntity()
 T CEntityClassList<CLaserDot>::~CEntityClassList()
 T CEntityClassList<CPhysicsNPCSolver>::LevelShutdownPostEntity()
 T CEntityClassList<CPhysicsNPCSolver>::~CEntityClassList()
 T CEntityClassList<CPointCamera>::LevelShutdownPostEntity()
 T CEntityClassList<CPointCamera>::~CEntityClassList()
 T CEntityClassList<CSkyCamera>::LevelShutdownPostEntity()
 T CEntityClassList<CSkyCamera>::~CEntityClassList()
 T CEntityDataInstantiator<CWatcherList>::CompareFunc(CEntityDataInstantiator<CWatcherList>::HashEntry const&, CEntityDataInstantiator<CWatcherList>::HashEntry const&)
 T CEntityDataInstantiator<CWatcherList>::CreateDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<CWatcherList>::DestroyDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<CWatcherList>::GetDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<CWatcherList>::KeyFunc(CEntityDataInstantiator<CWatcherList>::HashEntry const&)
 T CEntityDataInstantiator<CWatcherList>::~CEntityDataInstantiator()
 T CEntityDataInstantiator<ModelScale>::CompareFunc(CEntityDataInstantiator<ModelScale>::HashEntry const&, CEntityDataInstantiator<ModelScale>::HashEntry const&)
 T CEntityDataInstantiator<ModelScale>::CreateDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<ModelScale>::DestroyDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<ModelScale>::GetDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<ModelScale>::KeyFunc(CEntityDataInstantiator<ModelScale>::HashEntry const&)
 T CEntityDataInstantiator<ModelScale>::~CEntityDataInstantiator()
 T CEntityDataInstantiator<StepSimulationData>::CompareFunc(CEntityDataInstantiator<StepSimulationData>::HashEntry const&, CEntityDataInstantiator<StepSimulationData>::HashEntry const&)
 T CEntityDataInstantiator<StepSimulationData>::CreateDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<StepSimulationData>::DestroyDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<StepSimulationData>::GetDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<StepSimulationData>::KeyFunc(CEntityDataInstantiator<StepSimulationData>::HashEntry const&)
 T CEntityDataInstantiator<StepSimulationData>::~CEntityDataInstantiator()
 T CEntityDataInstantiator<groundlink_t>::CompareFunc(CEntityDataInstantiator<groundlink_t>::HashEntry const&, CEntityDataInstantiator<groundlink_t>::HashEntry const&)
 T CEntityDataInstantiator<groundlink_t>::CreateDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<groundlink_t>::DestroyDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<groundlink_t>::GetDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<groundlink_t>::KeyFunc(CEntityDataInstantiator<groundlink_t>::HashEntry const&)
 T CEntityDataInstantiator<groundlink_t>::~CEntityDataInstantiator()
 T CEntityDataInstantiator<physicspushlist_t>::CompareFunc(CEntityDataInstantiator<physicspushlist_t>::HashEntry const&, CEntityDataInstantiator<physicspushlist_t>::HashEntry const&)
 T CEntityDataInstantiator<physicspushlist_t>::CreateDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<physicspushlist_t>::DestroyDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<physicspushlist_t>::GetDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<physicspushlist_t>::KeyFunc(CEntityDataInstantiator<physicspushlist_t>::HashEntry const&)
 T CEntityDataInstantiator<physicspushlist_t>::~CEntityDataInstantiator()
 T CEntityDataInstantiator<touchlink_t>::CompareFunc(CEntityDataInstantiator<touchlink_t>::HashEntry const&, CEntityDataInstantiator<touchlink_t>::HashEntry const&)
 T CEntityDataInstantiator<touchlink_t>::CreateDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<touchlink_t>::DestroyDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<touchlink_t>::GetDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<touchlink_t>::KeyFunc(CEntityDataInstantiator<touchlink_t>::HashEntry const&)
 T CEntityDataInstantiator<touchlink_t>::~CEntityDataInstantiator()
 T CEntityDataInstantiator<vphysicsupdateai_t>::CompareFunc(CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry const&, CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry const&)
 T CEntityDataInstantiator<vphysicsupdateai_t>::CreateDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<vphysicsupdateai_t>::DestroyDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<vphysicsupdateai_t>::GetDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<vphysicsupdateai_t>::KeyFunc(CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry const&)
 T CEntityDataInstantiator<vphysicsupdateai_t>::~CEntityDataInstantiator()
 T CEntityDissolve::CEntityDissolve()
 T CEntityDissolve::Create(CBaseEntity*, CBaseEntity*)
 T CEntityDissolve::Create(CBaseEntity*, char const*, float, int, bool*)
 T CEntityDissolve::DissolveThink()
 T CEntityDissolve::ElectrocuteThink()
 T CEntityDissolve::GetDataDescMap()
 T CEntityDissolve::GetServerClass()
 T CEntityDissolve::InputDissolve(inputdata_t&)
 T CEntityDissolve::Precache()
 T CEntityDissolve::SetStartTime(float)
 T CEntityDissolve::Spawn()
 T CEntityDissolve::YouForgotToImplementOrDeclareServerClass()
 T CEntityDissolve::~CEntityDissolve()
 T CEntityFactory<AR2Explosion>::Create(char const*)
 T CEntityFactory<AR2Explosion>::Destroy(IServerNetworkable*)
 T CEntityFactory<AR2Explosion>::GetEntitySize()
 T CEntityFactory<CAISound>::Create(char const*)
 T CEntityFactory<CAISound>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAISound>::GetEntitySize()
 T CEntityFactory<CAI_ActBusyGoal>::Create(char const*)
 T CEntityFactory<CAI_ActBusyGoal>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAI_ActBusyGoal>::GetEntitySize()
 T CEntityFactory<CAI_ActBusyQueueGoal>::Create(char const*)
 T CEntityFactory<CAI_ActBusyQueueGoal>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAI_ActBusyQueueGoal>::GetEntitySize()
 T CEntityFactory<CAI_AllyManager>::Create(char const*)
 T CEntityFactory<CAI_AllyManager>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAI_AllyManager>::GetEntitySize()
 T CEntityFactory<CAI_AllySpeechManager>::Create(char const*)
 T CEntityFactory<CAI_AllySpeechManager>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAI_AllySpeechManager>::GetEntitySize()
 T CEntityFactory<CAI_AssaultGoal>::Create(char const*)
 T CEntityFactory<CAI_AssaultGoal>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAI_AssaultGoal>::GetEntitySize()
 T CEntityFactory<CAI_BattleLine>::Create(char const*)
 T CEntityFactory<CAI_BattleLine>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAI_BattleLine>::GetEntitySize()
 T CEntityFactory<CAI_ChangeHintGroup>::Create(char const*)
 T CEntityFactory<CAI_ChangeHintGroup>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAI_ChangeHintGroup>::GetEntitySize()
 T CEntityFactory<CAI_ChangeTarget>::Create(char const*)
 T CEntityFactory<CAI_ChangeTarget>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAI_ChangeTarget>::GetEntitySize()
 T CEntityFactory<CAI_DynamicLink>::Create(char const*)
 T CEntityFactory<CAI_DynamicLink>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAI_DynamicLink>::GetEntitySize()
 T CEntityFactory<CAI_DynamicLinkController>::Create(char const*)
 T CEntityFactory<CAI_DynamicLinkController>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAI_DynamicLinkController>::GetEntitySize()
 T CEntityFactory<CAI_FollowGoal>::Create(char const*)
 T CEntityFactory<CAI_FollowGoal>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAI_FollowGoal>::GetEntitySize()
 T CEntityFactory<CAI_Hint>::Create(char const*)
 T CEntityFactory<CAI_Hint>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAI_Hint>::GetEntitySize()
 T CEntityFactory<CAI_LeadGoal>::Create(char const*)
 T CEntityFactory<CAI_LeadGoal>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAI_LeadGoal>::GetEntitySize()
 T CEntityFactory<CAI_LeadGoal_Weapon>::Create(char const*)
 T CEntityFactory<CAI_LeadGoal_Weapon>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAI_LeadGoal_Weapon>::GetEntitySize()
 T CEntityFactory<CAI_NetworkManager>::Create(char const*)
 T CEntityFactory<CAI_NetworkManager>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAI_NetworkManager>::GetEntitySize()
 T CEntityFactory<CAI_PoliceGoal>::Create(char const*)
 T CEntityFactory<CAI_PoliceGoal>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAI_PoliceGoal>::GetEntitySize()
 T CEntityFactory<CAI_RadialLinkController>::Create(char const*)
 T CEntityFactory<CAI_RadialLinkController>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAI_RadialLinkController>::GetEntitySize()
 T CEntityFactory<CAI_Relationship>::Create(char const*)
 T CEntityFactory<CAI_Relationship>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAI_Relationship>::GetEntitySize()
 T CEntityFactory<CAI_ScriptConditions>::Create(char const*)
 T CEntityFactory<CAI_ScriptConditions>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAI_ScriptConditions>::GetEntitySize()
 T CEntityFactory<CAI_ScriptedSchedule>::Create(char const*)
 T CEntityFactory<CAI_ScriptedSchedule>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAI_ScriptedSchedule>::GetEntitySize()
 T CEntityFactory<CAI_ScriptedSentence>::Create(char const*)
 T CEntityFactory<CAI_ScriptedSentence>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAI_ScriptedSentence>::GetEntitySize()
 T CEntityFactory<CAI_ScriptedSequence>::Create(char const*)
 T CEntityFactory<CAI_ScriptedSequence>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAI_ScriptedSequence>::GetEntitySize()
 T CEntityFactory<CAI_SpeechFilter>::Create(char const*)
 T CEntityFactory<CAI_SpeechFilter>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAI_SpeechFilter>::GetEntitySize()
 T CEntityFactory<CAI_StandoffGoal>::Create(char const*)
 T CEntityFactory<CAI_StandoffGoal>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAI_StandoffGoal>::GetEntitySize()
 T CEntityFactory<CAI_TestHull>::Create(char const*)
 T CEntityFactory<CAI_TestHull>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAI_TestHull>::GetEntitySize()
 T CEntityFactory<CAPCController>::Create(char const*)
 T CEntityFactory<CAPCController>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAPCController>::GetEntitySize()
 T CEntityFactory<CAPCMissile>::Create(char const*)
 T CEntityFactory<CAPCMissile>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAPCMissile>::GetEntitySize()
 T CEntityFactory<CAlyxEmpEffect>::Create(char const*)
 T CEntityFactory<CAlyxEmpEffect>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAlyxEmpEffect>::GetEntitySize()
 T CEntityFactory<CAmbientGeneric>::Create(char const*)
 T CEntityFactory<CAmbientGeneric>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAmbientGeneric>::GetEntitySize()
 T CEntityFactory<CAntlionRepellant>::Create(char const*)
 T CEntityFactory<CAntlionRepellant>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAntlionRepellant>::GetEntitySize()
 T CEntityFactory<CAntlionTemplateMaker>::Create(char const*)
 T CEntityFactory<CAntlionTemplateMaker>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAntlionTemplateMaker>::GetEntitySize()
 T CEntityFactory<CAreaPortal>::Create(char const*)
 T CEntityFactory<CAreaPortal>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAreaPortal>::GetEntitySize()
 T CEntityFactory<CAssaultPoint>::Create(char const*)
 T CEntityFactory<CAssaultPoint>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAssaultPoint>::GetEntitySize()
 T CEntityFactory<CAvoidBox>::Create(char const*)
 T CEntityFactory<CAvoidBox>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAvoidBox>::GetEntitySize()
 T CEntityFactory<CAvoidSphere>::Create(char const*)
 T CEntityFactory<CAvoidSphere>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAvoidSphere>::GetEntitySize()
 T CEntityFactory<CBarnacleTongueTip>::Create(char const*)
 T CEntityFactory<CBarnacleTongueTip>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBarnacleTongueTip>::GetEntitySize()
 T CEntityFactory<CBaseButton>::Create(char const*)
 T CEntityFactory<CBaseButton>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBaseButton>::GetEntitySize()
 T CEntityFactory<CBaseDMStart>::Create(char const*)
 T CEntityFactory<CBaseDMStart>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBaseDMStart>::GetEntitySize()
 T CEntityFactory<CBaseDoor>::Create(char const*)
 T CEntityFactory<CBaseDoor>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBaseDoor>::GetEntitySize()
 T CEntityFactory<CBaseEntity>::Create(char const*)
 T CEntityFactory<CBaseEntity>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBaseEntity>::GetEntitySize()
 T CEntityFactory<CBaseFilter>::Create(char const*)
 T CEntityFactory<CBaseFilter>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBaseFilter>::GetEntitySize()
 T CEntityFactory<CBaseFlex>::Create(char const*)
 T CEntityFactory<CBaseFlex>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBaseFlex>::GetEntitySize()
 T CEntityFactory<CBaseGrenade>::Create(char const*)
 T CEntityFactory<CBaseGrenade>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBaseGrenade>::GetEntitySize()
 T CEntityFactory<CBaseGrenadeConcussion>::Create(char const*)
 T CEntityFactory<CBaseGrenadeConcussion>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBaseGrenadeConcussion>::GetEntitySize()
 T CEntityFactory<CBaseGrenadeContact>::Create(char const*)
 T CEntityFactory<CBaseGrenadeContact>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBaseGrenadeContact>::GetEntitySize()
 T CEntityFactory<CBaseGrenadeTimed>::Create(char const*)
 T CEntityFactory<CBaseGrenadeTimed>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBaseGrenadeTimed>::GetEntitySize()
 T CEntityFactory<CBaseHL2MPCombatWeapon>::Create(char const*)
 T CEntityFactory<CBaseHL2MPCombatWeapon>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBaseHL2MPCombatWeapon>::GetEntitySize()
 T CEntityFactory<CBaseHLCombatWeapon>::Create(char const*)
 T CEntityFactory<CBaseHLCombatWeapon>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBaseHLCombatWeapon>::GetEntitySize()
 T CEntityFactory<CBaseMoveBehavior>::Create(char const*)
 T CEntityFactory<CBaseMoveBehavior>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBaseMoveBehavior>::GetEntitySize()
 T CEntityFactory<CBaseSpriteProjectile>::Create(char const*)
 T CEntityFactory<CBaseSpriteProjectile>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBaseSpriteProjectile>::GetEntitySize()
 T CEntityFactory<CBaseTrigger>::Create(char const*)
 T CEntityFactory<CBaseTrigger>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBaseTrigger>::GetEntitySize()
 T CEntityFactory<CBaseViewModel>::Create(char const*)
 T CEntityFactory<CBaseViewModel>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBaseViewModel>::GetEntitySize()
 T CEntityFactory<CBeam>::Create(char const*)
 T CEntityFactory<CBeam>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBeam>::GetEntitySize()
 T CEntityFactory<CBlackHeadcrab>::Create(char const*)
 T CEntityFactory<CBlackHeadcrab>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBlackHeadcrab>::GetEntitySize()
 T CEntityFactory<CBlendingCycler>::Create(char const*)
 T CEntityFactory<CBlendingCycler>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBlendingCycler>::GetEntitySize()
 T CEntityFactory<CBlood>::Create(char const*)
 T CEntityFactory<CBlood>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBlood>::GetEntitySize()
 T CEntityFactory<CBombDropSensor>::Create(char const*)
 T CEntityFactory<CBombDropSensor>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBombDropSensor>::GetEntitySize()
 T CEntityFactory<CBombSuppressor>::Create(char const*)
 T CEntityFactory<CBombSuppressor>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBombSuppressor>::GetEntitySize()
 T CEntityFactory<CBoneFollower>::Create(char const*)
 T CEntityFactory<CBoneFollower>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBoneFollower>::GetEntitySize()
 T CEntityFactory<CBounceBomb>::Create(char const*)
 T CEntityFactory<CBounceBomb>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBounceBomb>::GetEntitySize()
 T CEntityFactory<CBreakable>::Create(char const*)
 T CEntityFactory<CBreakable>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBreakable>::GetEntitySize()
 T CEntityFactory<CBreakableSurface>::Create(char const*)
 T CEntityFactory<CBreakableSurface>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBreakableSurface>::GetEntitySize()
 T CEntityFactory<CBubbling>::Create(char const*)
 T CEntityFactory<CBubbling>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBubbling>::GetEntitySize()
 T CEntityFactory<CBugBaitSensor>::Create(char const*)
 T CEntityFactory<CBugBaitSensor>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBugBaitSensor>::GetEntitySize()
 T CEntityFactory<CChangeLevel>::Create(char const*)
 T CEntityFactory<CChangeLevel>::Destroy(IServerNetworkable*)
 T CEntityFactory<CChangeLevel>::GetEntitySize()
 T CEntityFactory<CCitadelEnergyCore>::Create(char const*)
 T CEntityFactory<CCitadelEnergyCore>::Destroy(IServerNetworkable*)
 T CEntityFactory<CCitadelEnergyCore>::GetEntitySize()
 T CEntityFactory<CCitizenResponseSystem>::Create(char const*)
 T CEntityFactory<CCitizenResponseSystem>::Destroy(IServerNetworkable*)
 T CEntityFactory<CCitizenResponseSystem>::GetEntitySize()
 T CEntityFactory<CColorCorrection>::Create(char const*)
 T CEntityFactory<CColorCorrection>::Destroy(IServerNetworkable*)
 T CEntityFactory<CColorCorrection>::GetEntitySize()
 T CEntityFactory<CColorCorrectionVolume>::Create(char const*)
 T CEntityFactory<CColorCorrectionVolume>::Destroy(IServerNetworkable*)
 T CEntityFactory<CColorCorrectionVolume>::GetEntitySize()
 T CEntityFactory<CCombineDropshipContainer>::Create(char const*)
 T CEntityFactory<CCombineDropshipContainer>::Destroy(IServerNetworkable*)
 T CEntityFactory<CCombineDropshipContainer>::GetEntitySize()
 T CEntityFactory<CCommandPoint>::Create(char const*)
 T CEntityFactory<CCommandPoint>::Destroy(IServerNetworkable*)
 T CEntityFactory<CCommandPoint>::GetEntitySize()
 T CEntityFactory<CCommentaryAuto>::Create(char const*)
 T CEntityFactory<CCommentaryAuto>::Destroy(IServerNetworkable*)
 T CEntityFactory<CCommentaryAuto>::GetEntitySize()
 T CEntityFactory<CCommentaryViewPosition>::Create(char const*)
 T CEntityFactory<CCommentaryViewPosition>::Destroy(IServerNetworkable*)
 T CEntityFactory<CCommentaryViewPosition>::GetEntitySize()
 T CEntityFactory<CConcussiveBlast>::Create(char const*)
 T CEntityFactory<CConcussiveBlast>::Destroy(IServerNetworkable*)
 T CEntityFactory<CConcussiveBlast>::GetEntitySize()
 T CEntityFactory<CConstraintAnchor>::Create(char const*)
 T CEntityFactory<CConstraintAnchor>::Destroy(IServerNetworkable*)
 T CEntityFactory<CConstraintAnchor>::GetEntitySize()
 T CEntityFactory<CCorpse>::Create(char const*)
 T CEntityFactory<CCorpse>::Destroy(IServerNetworkable*)
 T CEntityFactory<CCorpse>::GetEntitySize()
 T CEntityFactory<CCraneTip>::Create(char const*)
 T CEntityFactory<CCraneTip>::Destroy(IServerNetworkable*)
 T CEntityFactory<CCraneTip>::GetEntitySize()
 T CEntityFactory<CCredits>::Create(char const*)
 T CEntityFactory<CCredits>::Destroy(IServerNetworkable*)
 T CEntityFactory<CCredits>::GetEntitySize()
 T CEntityFactory<CCrossbowBolt>::Create(char const*)
 T CEntityFactory<CCrossbowBolt>::Destroy(IServerNetworkable*)
 T CEntityFactory<CCrossbowBolt>::GetEntitySize()
 T CEntityFactory<CDebugHistory>::Create(char const*)
 T CEntityFactory<CDebugHistory>::Destroy(IServerNetworkable*)
 T CEntityFactory<CDebugHistory>::GetEntitySize()
 T CEntityFactory<CDecal>::Create(char const*)
 T CEntityFactory<CDecal>::Destroy(IServerNetworkable*)
 T CEntityFactory<CDecal>::GetEntitySize()
 T CEntityFactory<CDynamicLight>::Create(char const*)
 T CEntityFactory<CDynamicLight>::Destroy(IServerNetworkable*)
 T CEntityFactory<CDynamicLight>::GetEntitySize()
 T CEntityFactory<CDynamicProp>::Create(char const*)
 T CEntityFactory<CDynamicProp>::Destroy(IServerNetworkable*)
 T CEntityFactory<CDynamicProp>::GetEntitySize()
 T CEntityFactory<CEmbers>::Create(char const*)
 T CEntityFactory<CEmbers>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEmbers>::GetEntitySize()
 T CEntityFactory<CEnableMotionFixup>::Create(char const*)
 T CEntityFactory<CEnableMotionFixup>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnableMotionFixup>::GetEntitySize()
 T CEntityFactory<CEntityBlocker>::Create(char const*)
 T CEntityFactory<CEntityBlocker>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEntityBlocker>::GetEntitySize()
 T CEntityFactory<CEntityDissolve>::Create(char const*)
 T CEntityFactory<CEntityDissolve>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEntityDissolve>::GetEntitySize()
 T CEntityFactory<CEntityFlame>::Create(char const*)
 T CEntityFactory<CEntityFlame>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEntityFlame>::GetEntitySize()
 T CEntityFactory<CEntityParticleTrail>::Create(char const*)
 T CEntityFactory<CEntityParticleTrail>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEntityParticleTrail>::GetEntitySize()
 T CEntityFactory<CEnvAR2Explosion>::Create(char const*)
 T CEntityFactory<CEnvAR2Explosion>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvAR2Explosion>::GetEntitySize()
 T CEntityFactory<CEnvBeam>::Create(char const*)
 T CEntityFactory<CEnvBeam>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvBeam>::GetEntitySize()
 T CEntityFactory<CEnvBeverage>::Create(char const*)
 T CEntityFactory<CEnvBeverage>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvBeverage>::GetEntitySize()
 T CEntityFactory<CEnvDetailController>::Create(char const*)
 T CEntityFactory<CEnvDetailController>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvDetailController>::GetEntitySize()
 T CEntityFactory<CEnvDustPuff>::Create(char const*)
 T CEntityFactory<CEnvDustPuff>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvDustPuff>::GetEntitySize()
 T CEntityFactory<CEnvEffectsScript>::Create(char const*)
 T CEntityFactory<CEnvEffectsScript>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvEffectsScript>::GetEntitySize()
 T CEntityFactory<CEnvEntityMaker>::Create(char const*)
 T CEntityFactory<CEnvEntityMaker>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvEntityMaker>::GetEntitySize()
 T CEntityFactory<CEnvExplosion>::Create(char const*)
 T CEntityFactory<CEnvExplosion>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvExplosion>::GetEntitySize()
 T CEntityFactory<CEnvFade>::Create(char const*)
 T CEntityFactory<CEnvFade>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvFade>::GetEntitySize()
 T CEntityFactory<CEnvFireSensor>::Create(char const*)
 T CEntityFactory<CEnvFireSensor>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvFireSensor>::GetEntitySize()
 T CEntityFactory<CEnvFireSource>::Create(char const*)
 T CEntityFactory<CEnvFireSource>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvFireSource>::GetEntitySize()
 T CEntityFactory<CEnvFunnel>::Create(char const*)
 T CEntityFactory<CEnvFunnel>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvFunnel>::GetEntitySize()
 T CEntityFactory<CEnvGlobal>::Create(char const*)
 T CEntityFactory<CEnvGlobal>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvGlobal>::GetEntitySize()
 T CEntityFactory<CEnvGunfire>::Create(char const*)
 T CEntityFactory<CEnvGunfire>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvGunfire>::GetEntitySize()
 T CEntityFactory<CEnvHeadcrabCanister>::Create(char const*)
 T CEntityFactory<CEnvHeadcrabCanister>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvHeadcrabCanister>::GetEntitySize()
 T CEntityFactory<CEnvHudHint>::Create(char const*)
 T CEntityFactory<CEnvHudHint>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvHudHint>::GetEntitySize()
 T CEntityFactory<CEnvLaser>::Create(char const*)
 T CEntityFactory<CEnvLaser>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvLaser>::GetEntitySize()
 T CEntityFactory<CEnvLight>::Create(char const*)
 T CEntityFactory<CEnvLight>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvLight>::GetEntitySize()
 T CEntityFactory<CEnvMicrophone>::Create(char const*)
 T CEntityFactory<CEnvMicrophone>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvMicrophone>::GetEntitySize()
 T CEntityFactory<CEnvMuzzleFlash>::Create(char const*)
 T CEntityFactory<CEnvMuzzleFlash>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvMuzzleFlash>::GetEntitySize()
 T CEntityFactory<CEnvParticleScript>::Create(char const*)
 T CEntityFactory<CEnvParticleScript>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvParticleScript>::GetEntitySize()
 T CEntityFactory<CEnvPlayerSurfaceTrigger>::Create(char const*)
 T CEntityFactory<CEnvPlayerSurfaceTrigger>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvPlayerSurfaceTrigger>::GetEntitySize()
 T CEntityFactory<CEnvProjectedTexture>::Create(char const*)
 T CEntityFactory<CEnvProjectedTexture>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvProjectedTexture>::GetEntitySize()
 T CEntityFactory<CEnvQuadraticBeam>::Create(char const*)
 T CEntityFactory<CEnvQuadraticBeam>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvQuadraticBeam>::GetEntitySize()
 T CEntityFactory<CEnvScreenEffect>::Create(char const*)
 T CEntityFactory<CEnvScreenEffect>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvScreenEffect>::GetEntitySize()
 T CEntityFactory<CEnvScreenOverlay>::Create(char const*)
 T CEntityFactory<CEnvScreenOverlay>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvScreenOverlay>::GetEntitySize()
 T CEntityFactory<CEnvShake>::Create(char const*)
 T CEntityFactory<CEnvShake>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvShake>::GetEntitySize()
 T CEntityFactory<CEnvShooter>::Create(char const*)
 T CEntityFactory<CEnvShooter>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvShooter>::GetEntitySize()
 T CEntityFactory<CEnvSoundscape>::Create(char const*)
 T CEntityFactory<CEnvSoundscape>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvSoundscape>::GetEntitySize()
 T CEntityFactory<CEnvSoundscapeProxy>::Create(char const*)
 T CEntityFactory<CEnvSoundscapeProxy>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvSoundscapeProxy>::GetEntitySize()
 T CEntityFactory<CEnvSoundscapeTriggerable>::Create(char const*)
 T CEntityFactory<CEnvSoundscapeTriggerable>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvSoundscapeTriggerable>::GetEntitySize()
 T CEntityFactory<CEnvSpark>::Create(char const*)
 T CEntityFactory<CEnvSpark>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvSpark>::GetEntitySize()
 T CEntityFactory<CEnvSplash>::Create(char const*)
 T CEntityFactory<CEnvSplash>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvSplash>::GetEntitySize()
 T CEntityFactory<CEnvStarfield>::Create(char const*)
 T CEntityFactory<CEnvStarfield>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvStarfield>::GetEntitySize()
 T CEntityFactory<CEnvTonemapController>::Create(char const*)
 T CEntityFactory<CEnvTonemapController>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvTonemapController>::GetEntitySize()
 T CEntityFactory<CEnvTracer>::Create(char const*)
 T CEntityFactory<CEnvTracer>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvTracer>::GetEntitySize()
 T CEntityFactory<CEnvViewPunch>::Create(char const*)
 T CEntityFactory<CEnvViewPunch>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvViewPunch>::GetEntitySize()
 T CEntityFactory<CEnvWind>::Create(char const*)
 T CEntityFactory<CEnvWind>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvWind>::GetEntitySize()
 T CEntityFactory<CEnvZoom>::Create(char const*)
 T CEntityFactory<CEnvZoom>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvZoom>::GetEntitySize()
 T CEntityFactory<CEventQueueSaveLoadProxy>::Create(char const*)
 T CEntityFactory<CEventQueueSaveLoadProxy>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEventQueueSaveLoadProxy>::GetEntitySize()
 T CEntityFactory<CFastHeadcrab>::Create(char const*)
 T CEntityFactory<CFastHeadcrab>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFastHeadcrab>::GetEntitySize()
 T CEntityFactory<CFilterClass>::Create(char const*)
 T CEntityFactory<CFilterClass>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFilterClass>::GetEntitySize()
 T CEntityFactory<CFilterCombineBall>::Create(char const*)
 T CEntityFactory<CFilterCombineBall>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFilterCombineBall>::GetEntitySize()
 T CEntityFactory<CFilterEnemy>::Create(char const*)
 T CEntityFactory<CFilterEnemy>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFilterEnemy>::GetEntitySize()
 T CEntityFactory<CFilterMassGreater>::Create(char const*)
 T CEntityFactory<CFilterMassGreater>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFilterMassGreater>::GetEntitySize()
 T CEntityFactory<CFilterMultiple>::Create(char const*)
 T CEntityFactory<CFilterMultiple>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFilterMultiple>::GetEntitySize()
 T CEntityFactory<CFilterName>::Create(char const*)
 T CEntityFactory<CFilterName>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFilterName>::GetEntitySize()
 T CEntityFactory<CFire>::Create(char const*)
 T CEntityFactory<CFire>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFire>::GetEntitySize()
 T CEntityFactory<CFireSmoke>::Create(char const*)
 T CEntityFactory<CFireSmoke>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFireSmoke>::GetEntitySize()
 T CEntityFactory<CFireTrail>::Create(char const*)
 T CEntityFactory<CFireTrail>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFireTrail>::GetEntitySize()
 T CEntityFactory<CFish>::Create(char const*)
 T CEntityFactory<CFish>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFish>::GetEntitySize()
 T CEntityFactory<CFishPool>::Create(char const*)
 T CEntityFactory<CFishPool>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFishPool>::GetEntitySize()
 T CEntityFactory<CFlare>::Create(char const*)
 T CEntityFactory<CFlare>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFlare>::GetEntitySize()
 T CEntityFactory<CFlextalkActor>::Create(char const*)
 T CEntityFactory<CFlextalkActor>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFlextalkActor>::GetEntitySize()
 T CEntityFactory<CFogController>::Create(char const*)
 T CEntityFactory<CFogController>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFogController>::GetEntitySize()
 T CEntityFactory<CFuncAreaPortalWindow>::Create(char const*)
 T CEntityFactory<CFuncAreaPortalWindow>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncAreaPortalWindow>::GetEntitySize()
 T CEntityFactory<CFuncBrush>::Create(char const*)
 T CEntityFactory<CFuncBrush>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncBrush>::GetEntitySize()
 T CEntityFactory<CFuncCombineBallSpawner>::Create(char const*)
 T CEntityFactory<CFuncCombineBallSpawner>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncCombineBallSpawner>::GetEntitySize()
 T CEntityFactory<CFuncConveyor>::Create(char const*)
 T CEntityFactory<CFuncConveyor>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncConveyor>::GetEntitySize()
 T CEntityFactory<CFuncIllusionary>::Create(char const*)
 T CEntityFactory<CFuncIllusionary>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncIllusionary>::GetEntitySize()
 T CEntityFactory<CFuncLadder>::Create(char const*)
 T CEntityFactory<CFuncLadder>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncLadder>::GetEntitySize()
 T CEntityFactory<CFuncLadderEndPoint>::Create(char const*)
 T CEntityFactory<CFuncLadderEndPoint>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncLadderEndPoint>::GetEntitySize()
 T CEntityFactory<CFuncMonitor>::Create(char const*)
 T CEntityFactory<CFuncMonitor>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncMonitor>::GetEntitySize()
 T CEntityFactory<CFuncMoveLinear>::Create(char const*)
 T CEntityFactory<CFuncMoveLinear>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncMoveLinear>::GetEntitySize()
 T CEntityFactory<CFuncOccluder>::Create(char const*)
 T CEntityFactory<CFuncOccluder>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncOccluder>::GetEntitySize()
 T CEntityFactory<CFuncPlat>::Create(char const*)
 T CEntityFactory<CFuncPlat>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncPlat>::GetEntitySize()
 T CEntityFactory<CFuncPlatRot>::Create(char const*)
 T CEntityFactory<CFuncPlatRot>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncPlatRot>::GetEntitySize()
 T CEntityFactory<CFuncReflectiveGlass>::Create(char const*)
 T CEntityFactory<CFuncReflectiveGlass>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncReflectiveGlass>::GetEntitySize()
 T CEntityFactory<CFuncRotating>::Create(char const*)
 T CEntityFactory<CFuncRotating>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncRotating>::GetEntitySize()
 T CEntityFactory<CFuncSmokeVolume>::Create(char const*)
 T CEntityFactory<CFuncSmokeVolume>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncSmokeVolume>::GetEntitySize()
 T CEntityFactory<CFuncTankAPCRocket>::Create(char const*)
 T CEntityFactory<CFuncTankAPCRocket>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncTankAPCRocket>::GetEntitySize()
 T CEntityFactory<CFuncTankAirboatGun>::Create(char const*)
 T CEntityFactory<CFuncTankAirboatGun>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncTankAirboatGun>::GetEntitySize()
 T CEntityFactory<CFuncTankCombineCannon>::Create(char const*)
 T CEntityFactory<CFuncTankCombineCannon>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncTankCombineCannon>::GetEntitySize()
 T CEntityFactory<CFuncTankGun>::Create(char const*)
 T CEntityFactory<CFuncTankGun>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncTankGun>::GetEntitySize()
 T CEntityFactory<CFuncTankLaser>::Create(char const*)
 T CEntityFactory<CFuncTankLaser>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncTankLaser>::GetEntitySize()
 T CEntityFactory<CFuncTankMortar>::Create(char const*)
 T CEntityFactory<CFuncTankMortar>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncTankMortar>::GetEntitySize()
 T CEntityFactory<CFuncTankPhysCannister>::Create(char const*)
 T CEntityFactory<CFuncTankPhysCannister>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncTankPhysCannister>::GetEntitySize()
 T CEntityFactory<CFuncTankPulseLaser>::Create(char const*)
 T CEntityFactory<CFuncTankPulseLaser>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncTankPulseLaser>::GetEntitySize()
 T CEntityFactory<CFuncTankRocket>::Create(char const*)
 T CEntityFactory<CFuncTankRocket>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncTankRocket>::GetEntitySize()
 T CEntityFactory<CFuncTankTrain>::Create(char const*)
 T CEntityFactory<CFuncTankTrain>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncTankTrain>::GetEntitySize()
 T CEntityFactory<CFuncTrackAuto>::Create(char const*)
 T CEntityFactory<CFuncTrackAuto>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncTrackAuto>::GetEntitySize()
 T CEntityFactory<CFuncTrackChange>::Create(char const*)
 T CEntityFactory<CFuncTrackChange>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncTrackChange>::GetEntitySize()
 T CEntityFactory<CFuncTrackTrain>::Create(char const*)
 T CEntityFactory<CFuncTrackTrain>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncTrackTrain>::GetEntitySize()
 T CEntityFactory<CFuncTrain>::Create(char const*)
 T CEntityFactory<CFuncTrain>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncTrain>::GetEntitySize()
 T CEntityFactory<CFuncTrainControls>::Create(char const*)
 T CEntityFactory<CFuncTrainControls>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncTrainControls>::GetEntitySize()
 T CEntityFactory<CFuncVPhysicsClip>::Create(char const*)
 T CEntityFactory<CFuncVPhysicsClip>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncVPhysicsClip>::GetEntitySize()
 T CEntityFactory<CFuncVehicleClip>::Create(char const*)
 T CEntityFactory<CFuncVehicleClip>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncVehicleClip>::GetEntitySize()
 T CEntityFactory<CFuncWall>::Create(char const*)
 T CEntityFactory<CFuncWall>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncWall>::GetEntitySize()
 T CEntityFactory<CFuncWallToggle>::Create(char const*)
 T CEntityFactory<CFuncWallToggle>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncWallToggle>::GetEntitySize()
 T CEntityFactory<CFunc_DustCloud>::Create(char const*)
 T CEntityFactory<CFunc_DustCloud>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFunc_DustCloud>::GetEntitySize()
 T CEntityFactory<CFunc_DustMotes>::Create(char const*)
 T CEntityFactory<CFunc_DustMotes>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFunc_DustMotes>::GetEntitySize()
 T CEntityFactory<CFunc_LOD>::Create(char const*)
 T CEntityFactory<CFunc_LOD>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFunc_LOD>::GetEntitySize()
 T CEntityFactory<CGameEnd>::Create(char const*)
 T CEntityFactory<CGameEnd>::Destroy(IServerNetworkable*)
 T CEntityFactory<CGameEnd>::GetEntitySize()
 T CEntityFactory<CGameGibManager>::Create(char const*)
 T CEntityFactory<CGameGibManager>::Destroy(IServerNetworkable*)
 T CEntityFactory<CGameGibManager>::GetEntitySize()
 T CEntityFactory<CGamePlayerEquip>::Create(char const*)
 T CEntityFactory<CGamePlayerEquip>::Destroy(IServerNetworkable*)
 T CEntityFactory<CGamePlayerEquip>::GetEntitySize()
 T CEntityFactory<CGamePlayerTeam>::Create(char const*)
 T CEntityFactory<CGamePlayerTeam>::Destroy(IServerNetworkable*)
 T CEntityFactory<CGamePlayerTeam>::GetEntitySize()
 T CEntityFactory<CGamePlayerZone>::Create(char const*)
 T CEntityFactory<CGamePlayerZone>::Destroy(IServerNetworkable*)
 T CEntityFactory<CGamePlayerZone>::GetEntitySize()
 T CEntityFactory<CGameScore>::Create(char const*)
 T CEntityFactory<CGameScore>::Destroy(IServerNetworkable*)
 T CEntityFactory<CGameScore>::GetEntitySize()
 T CEntityFactory<CGameText>::Create(char const*)
 T CEntityFactory<CGameText>::Destroy(IServerNetworkable*)
 T CEntityFactory<CGameText>::GetEntitySize()
 T CEntityFactory<CGameUI>::Create(char const*)
 T CEntityFactory<CGameUI>::Destroy(IServerNetworkable*)
 T CEntityFactory<CGameUI>::GetEntitySize()
 T CEntityFactory<CGameWeaponManager>::Create(char const*)
 T CEntityFactory<CGameWeaponManager>::Destroy(IServerNetworkable*)
 T CEntityFactory<CGameWeaponManager>::GetEntitySize()
 T CEntityFactory<CGenericActor>::Create(char const*)
 T CEntityFactory<CGenericActor>::Destroy(IServerNetworkable*)
 T CEntityFactory<CGenericActor>::GetEntitySize()
 T CEntityFactory<CGenericCycler>::Create(char const*)
 T CEntityFactory<CGenericCycler>::Destroy(IServerNetworkable*)
 T CEntityFactory<CGenericCycler>::GetEntitySize()
 T CEntityFactory<CGenericFlexCycler>::Create(char const*)
 T CEntityFactory<CGenericFlexCycler>::Destroy(IServerNetworkable*)
 T CEntityFactory<CGenericFlexCycler>::GetEntitySize()
 T CEntityFactory<CGenericNPC>::Create(char const*)
 T CEntityFactory<CGenericNPC>::Destroy(IServerNetworkable*)
 T CEntityFactory<CGenericNPC>::GetEntitySize()
 T CEntityFactory<CGib>::Create(char const*)
 T CEntityFactory<CGib>::Destroy(IServerNetworkable*)
 T CEntityFactory<CGib>::GetEntitySize()
 T CEntityFactory<CGibShooter>::Create(char const*)
 T CEntityFactory<CGibShooter>::Destroy(IServerNetworkable*)
 T CEntityFactory<CGibShooter>::GetEntitySize()
 T CEntityFactory<CGrenadeAR2>::Create(char const*)
 T CEntityFactory<CGrenadeAR2>::Destroy(IServerNetworkable*)
 T CEntityFactory<CGrenadeAR2>::GetEntitySize()
 T CEntityFactory<CGrenadeBeam>::Create(char const*)
 T CEntityFactory<CGrenadeBeam>::Destroy(IServerNetworkable*)
 T CEntityFactory<CGrenadeBeam>::GetEntitySize()
 T CEntityFactory<CGrenadeBeamChaser>::Create(char const*)
 T CEntityFactory<CGrenadeBeamChaser>::Destroy(IServerNetworkable*)
 T CEntityFactory<CGrenadeBeamChaser>::GetEntitySize()
 T CEntityFactory<CGrenadeBugBait>::Create(char const*)
 T CEntityFactory<CGrenadeBugBait>::Destroy(IServerNetworkable*)
 T CEntityFactory<CGrenadeBugBait>::GetEntitySize()
 T CEntityFactory<CGrenadeFrag>::Create(char const*)
 T CEntityFactory<CGrenadeFrag>::Destroy(IServerNetworkable*)
 T CEntityFactory<CGrenadeFrag>::GetEntitySize()
 T CEntityFactory<CGrenadeHelicopter>::Create(char const*)
 T CEntityFactory<CGrenadeHelicopter>::Destroy(IServerNetworkable*)
 T CEntityFactory<CGrenadeHelicopter>::GetEntitySize()
 T CEntityFactory<CGrenadeHomer>::Create(char const*)
 T CEntityFactory<CGrenadeHomer>::Destroy(IServerNetworkable*)
 T CEntityFactory<CGrenadeHomer>::GetEntitySize()
 T CEntityFactory<CGrenadePathfollower>::Create(char const*)
 T CEntityFactory<CGrenadePathfollower>::Destroy(IServerNetworkable*)
 T CEntityFactory<CGrenadePathfollower>::GetEntitySize()
 T CEntityFactory<CGunTarget>::Create(char const*)
 T CEntityFactory<CGunTarget>::Destroy(IServerNetworkable*)
 T CEntityFactory<CGunTarget>::GetEntitySize()
 T CEntityFactory<CHL2MPGameRulesProxy>::Create(char const*)
 T CEntityFactory<CHL2MPGameRulesProxy>::Destroy(IServerNetworkable*)
 T CEntityFactory<CHL2MPGameRulesProxy>::GetEntitySize()
 T CEntityFactory<CHL2MPRagdoll>::Create(char const*)
 T CEntityFactory<CHL2MPRagdoll>::Destroy(IServerNetworkable*)
 T CEntityFactory<CHL2MPRagdoll>::GetEntitySize()
 T CEntityFactory<CHL2MP_Player>::Create(char const*)
 T CEntityFactory<CHL2MP_Player>::Destroy(IServerNetworkable*)
 T CEntityFactory<CHL2MP_Player>::GetEntitySize()
 T CEntityFactory<CHL2NetworkBuildHelper>::Create(char const*)
 T CEntityFactory<CHL2NetworkBuildHelper>::Destroy(IServerNetworkable*)
 T CEntityFactory<CHL2NetworkBuildHelper>::GetEntitySize()
 T CEntityFactory<CHalfLife2Proxy>::Create(char const*)
 T CEntityFactory<CHalfLife2Proxy>::Destroy(IServerNetworkable*)
 T CEntityFactory<CHalfLife2Proxy>::GetEntitySize()
 T CEntityFactory<CHandleDummy>::Create(char const*)
 T CEntityFactory<CHandleDummy>::Destroy(IServerNetworkable*)
 T CEntityFactory<CHandleDummy>::GetEntitySize()
 T CEntityFactory<CHandleTest>::Create(char const*)
 T CEntityFactory<CHandleTest>::Destroy(IServerNetworkable*)
 T CEntityFactory<CHandleTest>::GetEntitySize()
 T CEntityFactory<CHeadcrab>::Create(char const*)
 T CEntityFactory<CHeadcrab>::Destroy(IServerNetworkable*)
 T CEntityFactory<CHeadcrab>::GetEntitySize()
 T CEntityFactory<CHealthKit>::Create(char const*)
 T CEntityFactory<CHealthKit>::Destroy(IServerNetworkable*)
 T CEntityFactory<CHealthKit>::GetEntitySize()
 T CEntityFactory<CHealthVial>::Create(char const*)
 T CEntityFactory<CHealthVial>::Destroy(IServerNetworkable*)
 T CEntityFactory<CHealthVial>::GetEntitySize()
 T CEntityFactory<CHelicopterChunk>::Create(char const*)
 T CEntityFactory<CHelicopterChunk>::Destroy(IServerNetworkable*)
 T CEntityFactory<CHelicopterChunk>::GetEntitySize()
 T CEntityFactory<CInfoAPCMissileHint>::Create(char const*)
 T CEntityFactory<CInfoAPCMissileHint>::Destroy(IServerNetworkable*)
 T CEntityFactory<CInfoAPCMissileHint>::GetEntitySize()
 T CEntityFactory<CInfoCameraLink>::Create(char const*)
 T CEntityFactory<CInfoCameraLink>::Destroy(IServerNetworkable*)
 T CEntityFactory<CInfoCameraLink>::GetEntitySize()
 T CEntityFactory<CInfoIntermission>::Create(char const*)
 T CEntityFactory<CInfoIntermission>::Destroy(IServerNetworkable*)
 T CEntityFactory<CInfoIntermission>::GetEntitySize()
 T CEntityFactory<CInfoLadderDismount>::Create(char const*)
 T CEntityFactory<CInfoLadderDismount>::Destroy(IServerNetworkable*)
 T CEntityFactory<CInfoLadderDismount>::GetEntitySize()
 T CEntityFactory<CInfoLightingRelative>::Create(char const*)
 T CEntityFactory<CInfoLightingRelative>::Destroy(IServerNetworkable*)
 T CEntityFactory<CInfoLightingRelative>::GetEntitySize()
 T CEntityFactory<CInfoMassCenter>::Create(char const*)
 T CEntityFactory<CInfoMassCenter>::Destroy(IServerNetworkable*)
 T CEntityFactory<CInfoMassCenter>::GetEntitySize()
 T CEntityFactory<CInfoOverlayAccessor>::Create(char const*)
 T CEntityFactory<CInfoOverlayAccessor>::Destroy(IServerNetworkable*)
 T CEntityFactory<CInfoOverlayAccessor>::GetEntitySize()
 T CEntityFactory<CInfoTarget>::Create(char const*)
 T CEntityFactory<CInfoTarget>::Destroy(IServerNetworkable*)
 T CEntityFactory<CInfoTarget>::GetEntitySize()
 T CEntityFactory<CInfoTeleporterCountdown>::Create(char const*)
 T CEntityFactory<CInfoTeleporterCountdown>::Destroy(IServerNetworkable*)
 T CEntityFactory<CInfoTeleporterCountdown>::GetEntitySize()
 T CEntityFactory<CInstancedSceneEntity>::Create(char const*)
 T CEntityFactory<CInstancedSceneEntity>::Destroy(IServerNetworkable*)
 T CEntityFactory<CInstancedSceneEntity>::GetEntitySize()
 T CEntityFactory<CItemBattery>::Create(char const*)
 T CEntityFactory<CItemBattery>::Destroy(IServerNetworkable*)
 T CEntityFactory<CItemBattery>::GetEntitySize()
 T CEntityFactory<CItemSoda>::Create(char const*)
 T CEntityFactory<CItemSoda>::Destroy(IServerNetworkable*)
 T CEntityFactory<CItemSoda>::GetEntitySize()
 T CEntityFactory<CItemSuit>::Create(char const*)
 T CEntityFactory<CItemSuit>::Destroy(IServerNetworkable*)
 T CEntityFactory<CItemSuit>::GetEntitySize()
 T CEntityFactory<CItem_AR2AltFireRound>::Create(char const*)
 T CEntityFactory<CItem_AR2AltFireRound>::Destroy(IServerNetworkable*)
 T CEntityFactory<CItem_AR2AltFireRound>::GetEntitySize()
 T CEntityFactory<CItem_AR2_Grenade>::Create(char const*)
 T CEntityFactory<CItem_AR2_Grenade>::Destroy(IServerNetworkable*)
 T CEntityFactory<CItem_AR2_Grenade>::GetEntitySize()
 T CEntityFactory<CItem_AmmoCrate>::Create(char const*)
 T CEntityFactory<CItem_AmmoCrate>::Destroy(IServerNetworkable*)
 T CEntityFactory<CItem_AmmoCrate>::GetEntitySize()
 T CEntityFactory<CItem_Box357Rounds>::Create(char const*)
 T CEntityFactory<CItem_Box357Rounds>::Destroy(IServerNetworkable*)
 T CEntityFactory<CItem_Box357Rounds>::GetEntitySize()
 T CEntityFactory<CItem_BoxBuckshot>::Create(char const*)
 T CEntityFactory<CItem_BoxBuckshot>::Destroy(IServerNetworkable*)
 T CEntityFactory<CItem_BoxBuckshot>::GetEntitySize()
 T CEntityFactory<CItem_BoxFlareRounds>::Create(char const*)
 T CEntityFactory<CItem_BoxFlareRounds>::Destroy(IServerNetworkable*)
 T CEntityFactory<CItem_BoxFlareRounds>::GetEntitySize()
 T CEntityFactory<CItem_BoxLRounds>::Create(char const*)
 T CEntityFactory<CItem_BoxLRounds>::Destroy(IServerNetworkable*)
 T CEntityFactory<CItem_BoxLRounds>::GetEntitySize()
 T CEntityFactory<CItem_BoxMRounds>::Create(char const*)
 T CEntityFactory<CItem_BoxMRounds>::Destroy(IServerNetworkable*)
 T CEntityFactory<CItem_BoxMRounds>::GetEntitySize()
 T CEntityFactory<CItem_BoxSRounds>::Create(char const*)
 T CEntityFactory<CItem_BoxSRounds>::Destroy(IServerNetworkable*)
 T CEntityFactory<CItem_BoxSRounds>::GetEntitySize()
 T CEntityFactory<CItem_BoxSniperRounds>::Create(char const*)
 T CEntityFactory<CItem_BoxSniperRounds>::Destroy(IServerNetworkable*)
 T CEntityFactory<CItem_BoxSniperRounds>::GetEntitySize()
 T CEntityFactory<CItem_BoxXBowRounds>::Create(char const*)
 T CEntityFactory<CItem_BoxXBowRounds>::Destroy(IServerNetworkable*)
 T CEntityFactory<CItem_BoxXBowRounds>::GetEntitySize()
 T CEntityFactory<CItem_DynamicResupply>::Create(char const*)
 T CEntityFactory<CItem_DynamicResupply>::Destroy(IServerNetworkable*)
 T CEntityFactory<CItem_DynamicResupply>::GetEntitySize()
 T CEntityFactory<CItem_FlareRound>::Create(char const*)
 T CEntityFactory<CItem_FlareRound>::Destroy(IServerNetworkable*)
 T CEntityFactory<CItem_FlareRound>::GetEntitySize()
 T CEntityFactory<CItem_ItemCrate>::Create(char const*)
 T CEntityFactory<CItem_ItemCrate>::Destroy(IServerNetworkable*)
 T CEntityFactory<CItem_ItemCrate>::GetEntitySize()
 T CEntityFactory<CItem_LargeBox357Rounds>::Create(char const*)
 T CEntityFactory<CItem_LargeBox357Rounds>::Destroy(IServerNetworkable*)
 T CEntityFactory<CItem_LargeBox357Rounds>::GetEntitySize()
 T CEntityFactory<CItem_LargeBoxLRounds>::Create(char const*)
 T CEntityFactory<CItem_LargeBoxLRounds>::Destroy(IServerNetworkable*)
 T CEntityFactory<CItem_LargeBoxLRounds>::GetEntitySize()
 T CEntityFactory<CItem_LargeBoxMRounds>::Create(char const*)
 T CEntityFactory<CItem_LargeBoxMRounds>::Destroy(IServerNetworkable*)
 T CEntityFactory<CItem_LargeBoxMRounds>::GetEntitySize()
 T CEntityFactory<CItem_LargeBoxSRounds>::Create(char const*)
 T CEntityFactory<CItem_LargeBoxSRounds>::Destroy(IServerNetworkable*)
 T CEntityFactory<CItem_LargeBoxSRounds>::GetEntitySize()
 T CEntityFactory<CItem_RPG_Round>::Create(char const*)
 T CEntityFactory<CItem_RPG_Round>::Destroy(IServerNetworkable*)
 T CEntityFactory<CItem_RPG_Round>::GetEntitySize()
 T CEntityFactory<CKeepUpright>::Create(char const*)
 T CEntityFactory<CKeepUpright>::Destroy(IServerNetworkable*)
 T CEntityFactory<CKeepUpright>::GetEntitySize()
 T CEntityFactory<CLaserDot>::Create(char const*)
 T CEntityFactory<CLaserDot>::Destroy(IServerNetworkable*)
 T CEntityFactory<CLaserDot>::GetEntitySize()
 T CEntityFactory<CLight>::Create(char const*)
 T CEntityFactory<CLight>::Destroy(IServerNetworkable*)
 T CEntityFactory<CLight>::GetEntitySize()
 T CEntityFactory<CLightGlow>::Create(char const*)
 T CEntityFactory<CLightGlow>::Destroy(IServerNetworkable*)
 T CEntityFactory<CLightGlow>::GetEntitySize()
 T CEntityFactory<CLogicActiveAutosave>::Create(char const*)
 T CEntityFactory<CLogicActiveAutosave>::Destroy(IServerNetworkable*)
 T CEntityFactory<CLogicActiveAutosave>::GetEntitySize()
 T CEntityFactory<CLogicAuto>::Create(char const*)
 T CEntityFactory<CLogicAuto>::Destroy(IServerNetworkable*)
 T CEntityFactory<CLogicAuto>::GetEntitySize()
 T CEntityFactory<CLogicAutosave>::Create(char const*)
 T CEntityFactory<CLogicAutosave>::Destroy(IServerNetworkable*)
 T CEntityFactory<CLogicAutosave>::GetEntitySize()
 T CEntityFactory<CLogicBranch>::Create(char const*)
 T CEntityFactory<CLogicBranch>::Destroy(IServerNetworkable*)
 T CEntityFactory<CLogicBranch>::GetEntitySize()
 T CEntityFactory<CLogicBranchList>::Create(char const*)
 T CEntityFactory<CLogicBranchList>::Destroy(IServerNetworkable*)
 T CEntityFactory<CLogicBranchList>::GetEntitySize()
 T CEntityFactory<CLogicCase>::Create(char const*)
 T CEntityFactory<CLogicCase>::Destroy(IServerNetworkable*)
 T CEntityFactory<CLogicCase>::GetEntitySize()
 T CEntityFactory<CLogicCollisionPair>::Create(char const*)
 T CEntityFactory<CLogicCollisionPair>::Destroy(IServerNetworkable*)
 T CEntityFactory<CLogicCollisionPair>::GetEntitySize()
 T CEntityFactory<CLogicCompare>::Create(char const*)
 T CEntityFactory<CLogicCompare>::Destroy(IServerNetworkable*)
 T CEntityFactory<CLogicCompare>::GetEntitySize()
 T CEntityFactory<CLogicCompareInteger>::Create(char const*)
 T CEntityFactory<CLogicCompareInteger>::Destroy(IServerNetworkable*)
 T CEntityFactory<CLogicCompareInteger>::GetEntitySize()
 T CEntityFactory<CLogicLineToEntity>::Create(char const*)
 T CEntityFactory<CLogicLineToEntity>::Destroy(IServerNetworkable*)
 T CEntityFactory<CLogicLineToEntity>::GetEntitySize()
 T CEntityFactory<CLogicMeasureMovement>::Create(char const*)
 T CEntityFactory<CLogicMeasureMovement>::Destroy(IServerNetworkable*)
 T CEntityFactory<CLogicMeasureMovement>::GetEntitySize()
 T CEntityFactory<CLogicNavigation>::Create(char const*)
 T CEntityFactory<CLogicNavigation>::Destroy(IServerNetworkable*)
 T CEntityFactory<CLogicNavigation>::GetEntitySize()
 T CEntityFactory<CLogicPlayerProxy>::Create(char const*)
 T CEntityFactory<CLogicPlayerProxy>::Destroy(IServerNetworkable*)
 T CEntityFactory<CLogicPlayerProxy>::GetEntitySize()
 T CEntityFactory<CLogicRelay>::Create(char const*)
 T CEntityFactory<CLogicRelay>::Destroy(IServerNetworkable*)
 T CEntityFactory<CLogicRelay>::GetEntitySize()
 T CEntityFactory<CLookDoor>::Create(char const*)
 T CEntityFactory<CLookDoor>::Destroy(IServerNetworkable*)
 T CEntityFactory<CLookDoor>::GetEntitySize()
 T CEntityFactory<CLookDoorThinker>::Create(char const*)
 T CEntityFactory<CLookDoorThinker>::Destroy(IServerNetworkable*)
 T CEntityFactory<CLookDoorThinker>::GetEntitySize()
 T CEntityFactory<CMaterialModifyControl>::Create(char const*)
 T CEntityFactory<CMaterialModifyControl>::Destroy(IServerNetworkable*)
 T CEntityFactory<CMaterialModifyControl>::GetEntitySize()
 T CEntityFactory<CMathColorBlend>::Create(char const*)
 T CEntityFactory<CMathColorBlend>::Destroy(IServerNetworkable*)
 T CEntityFactory<CMathColorBlend>::GetEntitySize()
 T CEntityFactory<CMathCounter>::Create(char const*)
 T CEntityFactory<CMathCounter>::Destroy(IServerNetworkable*)
 T CEntityFactory<CMathCounter>::GetEntitySize()
 T CEntityFactory<CMathRemap>::Create(char const*)
 T CEntityFactory<CMathRemap>::Destroy(IServerNetworkable*)
 T CEntityFactory<CMathRemap>::GetEntitySize()
 T CEntityFactory<CMessage>::Create(char const*)
 T CEntityFactory<CMessage>::Destroy(IServerNetworkable*)
 T CEntityFactory<CMessage>::GetEntitySize()
 T CEntityFactory<CMessageEntity>::Create(char const*)
 T CEntityFactory<CMessageEntity>::Destroy(IServerNetworkable*)
 T CEntityFactory<CMessageEntity>::GetEntitySize()
 T CEntityFactory<CMissile>::Create(char const*)
 T CEntityFactory<CMissile>::Destroy(IServerNetworkable*)
 T CEntityFactory<CMissile>::GetEntitySize()
 T CEntityFactory<CMomentaryRotButton>::Create(char const*)
 T CEntityFactory<CMomentaryRotButton>::Destroy(IServerNetworkable*)
 T CEntityFactory<CMomentaryRotButton>::GetEntitySize()
 T CEntityFactory<CMortarShell>::Create(char const*)
 T CEntityFactory<CMortarShell>::Destroy(IServerNetworkable*)
 T CEntityFactory<CMortarShell>::GetEntitySize()
 T CEntityFactory<CMovementSpeedMod>::Create(char const*)
 T CEntityFactory<CMovementSpeedMod>::Destroy(IServerNetworkable*)
 T CEntityFactory<CMovementSpeedMod>::GetEntitySize()
 T CEntityFactory<CMultiSource>::Create(char const*)
 T CEntityFactory<CMultiSource>::Destroy(IServerNetworkable*)
 T CEntityFactory<CMultiSource>::GetEntitySize()
 T CEntityFactory<CNPCMaker>::Create(char const*)
 T CEntityFactory<CNPCMaker>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNPCMaker>::GetEntitySize()
 T CEntityFactory<CNPCSpawnDestination>::Create(char const*)
 T CEntityFactory<CNPCSpawnDestination>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNPCSpawnDestination>::GetEntitySize()
 T CEntityFactory<CNPC_APCDriver>::Create(char const*)
 T CEntityFactory<CNPC_APCDriver>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNPC_APCDriver>::GetEntitySize()
 T CEntityFactory<CNPC_Alyx>::Create(char const*)
 T CEntityFactory<CNPC_Alyx>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNPC_Alyx>::GetEntitySize()
 T CEntityFactory<CNPC_Antlion>::Create(char const*)
 T CEntityFactory<CNPC_Antlion>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNPC_Antlion>::GetEntitySize()
 T CEntityFactory<CNPC_AntlionGuard>::Create(char const*)
 T CEntityFactory<CNPC_AntlionGuard>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNPC_AntlionGuard>::GetEntitySize()
 T CEntityFactory<CNPC_AttackHelicopter>::Create(char const*)
 T CEntityFactory<CNPC_AttackHelicopter>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNPC_AttackHelicopter>::GetEntitySize()
 T CEntityFactory<CNPC_Barnacle>::Create(char const*)
 T CEntityFactory<CNPC_Barnacle>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNPC_Barnacle>::GetEntitySize()
 T CEntityFactory<CNPC_Barney>::Create(char const*)
 T CEntityFactory<CNPC_Barney>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNPC_Barney>::GetEntitySize()
 T CEntityFactory<CNPC_Breen>::Create(char const*)
 T CEntityFactory<CNPC_Breen>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNPC_Breen>::GetEntitySize()
 T CEntityFactory<CNPC_Bullseye>::Create(char const*)
 T CEntityFactory<CNPC_Bullseye>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNPC_Bullseye>::GetEntitySize()
 T CEntityFactory<CNPC_CScanner>::Create(char const*)
 T CEntityFactory<CNPC_CScanner>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNPC_CScanner>::GetEntitySize()
 T CEntityFactory<CNPC_CeilingTurret>::Create(char const*)
 T CEntityFactory<CNPC_CeilingTurret>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNPC_CeilingTurret>::GetEntitySize()
 T CEntityFactory<CNPC_Citizen>::Create(char const*)
 T CEntityFactory<CNPC_Citizen>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNPC_Citizen>::GetEntitySize()
 T CEntityFactory<CNPC_ClawScanner>::Create(char const*)
 T CEntityFactory<CNPC_ClawScanner>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNPC_ClawScanner>::GetEntitySize()
 T CEntityFactory<CNPC_Combine>::Create(char const*)
 T CEntityFactory<CNPC_Combine>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNPC_Combine>::GetEntitySize()
 T CEntityFactory<CNPC_CombineCamera>::Create(char const*)
 T CEntityFactory<CNPC_CombineCamera>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNPC_CombineCamera>::GetEntitySize()
 T CEntityFactory<CNPC_CombineDropship>::Create(char const*)
 T CEntityFactory<CNPC_CombineDropship>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNPC_CombineDropship>::GetEntitySize()
 T CEntityFactory<CNPC_CombineGunship>::Create(char const*)
 T CEntityFactory<CNPC_CombineGunship>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNPC_CombineGunship>::GetEntitySize()
 T CEntityFactory<CNPC_CombineS>::Create(char const*)
 T CEntityFactory<CNPC_CombineS>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNPC_CombineS>::GetEntitySize()
 T CEntityFactory<CNPC_CraneDriver>::Create(char const*)
 T CEntityFactory<CNPC_CraneDriver>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNPC_CraneDriver>::GetEntitySize()
 T CEntityFactory<CNPC_Crow>::Create(char const*)
 T CEntityFactory<CNPC_Crow>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNPC_Crow>::GetEntitySize()
 T CEntityFactory<CNPC_Dog>::Create(char const*)
 T CEntityFactory<CNPC_Dog>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNPC_Dog>::GetEntitySize()
 T CEntityFactory<CNPC_Eli>::Create(char const*)
 T CEntityFactory<CNPC_Eli>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNPC_Eli>::GetEntitySize()
 T CEntityFactory<CNPC_EnemyFinder>::Create(char const*)
 T CEntityFactory<CNPC_EnemyFinder>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNPC_EnemyFinder>::GetEntitySize()
 T CEntityFactory<CNPC_EnemyFinderCombineCannon>::Create(char const*)
 T CEntityFactory<CNPC_EnemyFinderCombineCannon>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNPC_EnemyFinderCombineCannon>::GetEntitySize()
 T CEntityFactory<CNPC_Fisherman>::Create(char const*)
 T CEntityFactory<CNPC_Fisherman>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNPC_Fisherman>::GetEntitySize()
 T CEntityFactory<CNPC_FloorTurret>::Create(char const*)
 T CEntityFactory<CNPC_FloorTurret>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNPC_FloorTurret>::GetEntitySize()
 T CEntityFactory<CNPC_Furniture>::Create(char const*)
 T CEntityFactory<CNPC_Furniture>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNPC_Furniture>::GetEntitySize()
 T CEntityFactory<CNPC_GMan>::Create(char const*)
 T CEntityFactory<CNPC_GMan>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNPC_GMan>::GetEntitySize()
 T CEntityFactory<CNPC_GroundTurret>::Create(char const*)
 T CEntityFactory<CNPC_GroundTurret>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNPC_GroundTurret>::GetEntitySize()
 T CEntityFactory<CNPC_Ichthyosaur>::Create(char const*)
 T CEntityFactory<CNPC_Ichthyosaur>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNPC_Ichthyosaur>::GetEntitySize()
 T CEntityFactory<CNPC_Kleiner>::Create(char const*)
 T CEntityFactory<CNPC_Kleiner>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNPC_Kleiner>::GetEntitySize()
 T CEntityFactory<CNPC_Launcher>::Create(char const*)
 T CEntityFactory<CNPC_Launcher>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNPC_Launcher>::GetEntitySize()
 T CEntityFactory<CNPC_Manhack>::Create(char const*)
 T CEntityFactory<CNPC_Manhack>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNPC_Manhack>::GetEntitySize()
 T CEntityFactory<CNPC_MetroPolice>::Create(char const*)
 T CEntityFactory<CNPC_MetroPolice>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNPC_MetroPolice>::GetEntitySize()
 T CEntityFactory<CNPC_MissileDefense>::Create(char const*)
 T CEntityFactory<CNPC_MissileDefense>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNPC_MissileDefense>::GetEntitySize()
 T CEntityFactory<CNPC_Monk>::Create(char const*)
 T CEntityFactory<CNPC_Monk>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNPC_Monk>::GetEntitySize()
 T CEntityFactory<CNPC_Mossman>::Create(char const*)
 T CEntityFactory<CNPC_Mossman>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNPC_Mossman>::GetEntitySize()
 T CEntityFactory<CNPC_Pigeon>::Create(char const*)
 T CEntityFactory<CNPC_Pigeon>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNPC_Pigeon>::GetEntitySize()
 T CEntityFactory<CNPC_PoisonZombie>::Create(char const*)
 T CEntityFactory<CNPC_PoisonZombie>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNPC_PoisonZombie>::GetEntitySize()
 T CEntityFactory<CNPC_RollerMine>::Create(char const*)
 T CEntityFactory<CNPC_RollerMine>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNPC_RollerMine>::GetEntitySize()
 T CEntityFactory<CNPC_Seagull>::Create(char const*)
 T CEntityFactory<CNPC_Seagull>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNPC_Seagull>::GetEntitySize()
 T CEntityFactory<CNPC_Stalker>::Create(char const*)
 T CEntityFactory<CNPC_Stalker>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNPC_Stalker>::GetEntitySize()
 T CEntityFactory<CNPC_Strider>::Create(char const*)
 T CEntityFactory<CNPC_Strider>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNPC_Strider>::GetEntitySize()
 T CEntityFactory<CNPC_VehicleDriver>::Create(char const*)
 T CEntityFactory<CNPC_VehicleDriver>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNPC_VehicleDriver>::GetEntitySize()
 T CEntityFactory<CNPC_Vortigaunt>::Create(char const*)
 T CEntityFactory<CNPC_Vortigaunt>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNPC_Vortigaunt>::GetEntitySize()
 T CEntityFactory<CNewNPC>::Create(char const*)
 T CEntityFactory<CNewNPC>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNewNPC>::GetEntitySize()
 T CEntityFactory<CNewRecharge>::Create(char const*)
 T CEntityFactory<CNewRecharge>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNewRecharge>::GetEntitySize()
 T CEntityFactory<CNewWallHealth>::Create(char const*)
 T CEntityFactory<CNewWallHealth>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNewWallHealth>::GetEntitySize()
 T CEntityFactory<CNodeEnt>::Create(char const*)
 T CEntityFactory<CNodeEnt>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNodeEnt>::GetEntitySize()
 T CEntityFactory<CNullEntity>::Create(char const*)
 T CEntityFactory<CNullEntity>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNullEntity>::GetEntitySize()
 T CEntityFactory<COrnamentProp>::Create(char const*)
 T CEntityFactory<COrnamentProp>::Destroy(IServerNetworkable*)
 T CEntityFactory<COrnamentProp>::GetEntitySize()
 T CEntityFactory<CParticleFire>::Create(char const*)
 T CEntityFactory<CParticleFire>::Destroy(IServerNetworkable*)
 T CEntityFactory<CParticleFire>::GetEntitySize()
 T CEntityFactory<CParticleLight>::Create(char const*)
 T CEntityFactory<CParticleLight>::Destroy(IServerNetworkable*)
 T CEntityFactory<CParticleLight>::GetEntitySize()
 T CEntityFactory<CParticlePerformanceMonitor>::Create(char const*)
 T CEntityFactory<CParticlePerformanceMonitor>::Destroy(IServerNetworkable*)
 T CEntityFactory<CParticlePerformanceMonitor>::GetEntitySize()
 T CEntityFactory<CParticleSystem>::Create(char const*)
 T CEntityFactory<CParticleSystem>::Destroy(IServerNetworkable*)
 T CEntityFactory<CParticleSystem>::GetEntitySize()
 T CEntityFactory<CPathCorner>::Create(char const*)
 T CEntityFactory<CPathCorner>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPathCorner>::GetEntitySize()
 T CEntityFactory<CPathCornerCrash>::Create(char const*)
 T CEntityFactory<CPathCornerCrash>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPathCornerCrash>::GetEntitySize()
 T CEntityFactory<CPathKeyFrame>::Create(char const*)
 T CEntityFactory<CPathKeyFrame>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPathKeyFrame>::GetEntitySize()
 T CEntityFactory<CPathTrack>::Create(char const*)
 T CEntityFactory<CPathTrack>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPathTrack>::GetEntitySize()
 T CEntityFactory<CPhysBallSocket>::Create(char const*)
 T CEntityFactory<CPhysBallSocket>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysBallSocket>::GetEntitySize()
 T CEntityFactory<CPhysBox>::Create(char const*)
 T CEntityFactory<CPhysBox>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysBox>::GetEntitySize()
 T CEntityFactory<CPhysBoxMultiplayer>::Create(char const*)
 T CEntityFactory<CPhysBoxMultiplayer>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysBoxMultiplayer>::GetEntitySize()
 T CEntityFactory<CPhysConstraintSystem>::Create(char const*)
 T CEntityFactory<CPhysConstraintSystem>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysConstraintSystem>::GetEntitySize()
 T CEntityFactory<CPhysConvert>::Create(char const*)
 T CEntityFactory<CPhysConvert>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysConvert>::GetEntitySize()
 T CEntityFactory<CPhysExplosion>::Create(char const*)
 T CEntityFactory<CPhysExplosion>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysExplosion>::GetEntitySize()
 T CEntityFactory<CPhysFixed>::Create(char const*)
 T CEntityFactory<CPhysFixed>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysFixed>::GetEntitySize()
 T CEntityFactory<CPhysHinge>::Create(char const*)
 T CEntityFactory<CPhysHinge>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysHinge>::GetEntitySize()
 T CEntityFactory<CPhysImpact>::Create(char const*)
 T CEntityFactory<CPhysImpact>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysImpact>::GetEntitySize()
 T CEntityFactory<CPhysLength>::Create(char const*)
 T CEntityFactory<CPhysLength>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysLength>::GetEntitySize()
 T CEntityFactory<CPhysMagnet>::Create(char const*)
 T CEntityFactory<CPhysMagnet>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysMagnet>::GetEntitySize()
 T CEntityFactory<CPhysMotor>::Create(char const*)
 T CEntityFactory<CPhysMotor>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysMotor>::GetEntitySize()
 T CEntityFactory<CPhysPulley>::Create(char const*)
 T CEntityFactory<CPhysPulley>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysPulley>::GetEntitySize()
 T CEntityFactory<CPhysSlideConstraint>::Create(char const*)
 T CEntityFactory<CPhysSlideConstraint>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysSlideConstraint>::GetEntitySize()
 T CEntityFactory<CPhysSphere>::Create(char const*)
 T CEntityFactory<CPhysSphere>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysSphere>::GetEntitySize()
 T CEntityFactory<CPhysThruster>::Create(char const*)
 T CEntityFactory<CPhysThruster>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysThruster>::GetEntitySize()
 T CEntityFactory<CPhysTorque>::Create(char const*)
 T CEntityFactory<CPhysTorque>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysTorque>::GetEntitySize()
 T CEntityFactory<CPhysicsCannister>::Create(char const*)
 T CEntityFactory<CPhysicsCannister>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysicsCannister>::GetEntitySize()
 T CEntityFactory<CPhysicsEntitySolver>::Create(char const*)
 T CEntityFactory<CPhysicsEntitySolver>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysicsEntitySolver>::GetEntitySize()
 T CEntityFactory<CPhysicsNPCSolver>::Create(char const*)
 T CEntityFactory<CPhysicsNPCSolver>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysicsNPCSolver>::GetEntitySize()
 T CEntityFactory<CPhysicsProp>::Create(char const*)
 T CEntityFactory<CPhysicsProp>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysicsProp>::GetEntitySize()
 T CEntityFactory<CPhysicsPropMultiplayer>::Create(char const*)
 T CEntityFactory<CPhysicsPropMultiplayer>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysicsPropMultiplayer>::GetEntitySize()
 T CEntityFactory<CPhysicsPropRespawnable>::Create(char const*)
 T CEntityFactory<CPhysicsPropRespawnable>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysicsPropRespawnable>::GetEntitySize()
 T CEntityFactory<CPhysicsSpring>::Create(char const*)
 T CEntityFactory<CPhysicsSpring>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysicsSpring>::GetEntitySize()
 T CEntityFactory<CPhysicsWire>::Create(char const*)
 T CEntityFactory<CPhysicsWire>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysicsWire>::GetEntitySize()
 T CEntityFactory<CPlasma>::Create(char const*)
 T CEntityFactory<CPlasma>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPlasma>::GetEntitySize()
 T CEntityFactory<CPlayerPickupController>::Create(char const*)
 T CEntityFactory<CPlayerPickupController>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPlayerPickupController>::GetEntitySize()
 T CEntityFactory<CPlayerResource>::Create(char const*)
 T CEntityFactory<CPlayerResource>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPlayerResource>::GetEntitySize()
 T CEntityFactory<CPointAngleSensor>::Create(char const*)
 T CEntityFactory<CPointAngleSensor>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointAngleSensor>::GetEntitySize()
 T CEntityFactory<CPointAngularVelocitySensor>::Create(char const*)
 T CEntityFactory<CPointAngularVelocitySensor>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointAngularVelocitySensor>::GetEntitySize()
 T CEntityFactory<CPointBonusMapsAccessor>::Create(char const*)
 T CEntityFactory<CPointBonusMapsAccessor>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointBonusMapsAccessor>::GetEntitySize()
 T CEntityFactory<CPointCamera>::Create(char const*)
 T CEntityFactory<CPointCamera>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointCamera>::GetEntitySize()
 T CEntityFactory<CPointClientCommand>::Create(char const*)
 T CEntityFactory<CPointClientCommand>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointClientCommand>::GetEntitySize()
 T CEntityFactory<CPointCombineBallLauncher>::Create(char const*)
 T CEntityFactory<CPointCombineBallLauncher>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointCombineBallLauncher>::GetEntitySize()
 T CEntityFactory<CPointCommentaryNode>::Create(char const*)
 T CEntityFactory<CPointCommentaryNode>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointCommentaryNode>::GetEntitySize()
 T CEntityFactory<CPointDevShotCamera>::Create(char const*)
 T CEntityFactory<CPointDevShotCamera>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointDevShotCamera>::GetEntitySize()
 T CEntityFactory<CPointEntity>::Create(char const*)
 T CEntityFactory<CPointEntity>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointEntity>::GetEntitySize()
 T CEntityFactory<CPointGamestatsCounter>::Create(char const*)
 T CEntityFactory<CPointGamestatsCounter>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointGamestatsCounter>::GetEntitySize()
 T CEntityFactory<CPointHurt>::Create(char const*)
 T CEntityFactory<CPointHurt>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointHurt>::GetEntitySize()
 T CEntityFactory<CPointPlayerMoveConstraint>::Create(char const*)
 T CEntityFactory<CPointPlayerMoveConstraint>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointPlayerMoveConstraint>::GetEntitySize()
 T CEntityFactory<CPointProximitySensor>::Create(char const*)
 T CEntityFactory<CPointProximitySensor>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointProximitySensor>::GetEntitySize()
 T CEntityFactory<CPointPush>::Create(char const*)
 T CEntityFactory<CPointPush>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointPush>::GetEntitySize()
 T CEntityFactory<CPointServerCommand>::Create(char const*)
 T CEntityFactory<CPointServerCommand>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointServerCommand>::GetEntitySize()
 T CEntityFactory<CPointSpotlight>::Create(char const*)
 T CEntityFactory<CPointSpotlight>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointSpotlight>::GetEntitySize()
 T CEntityFactory<CPointTeleport>::Create(char const*)
 T CEntityFactory<CPointTeleport>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointTeleport>::GetEntitySize()
 T CEntityFactory<CPointTemplate>::Create(char const*)
 T CEntityFactory<CPointTemplate>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointTemplate>::GetEntitySize()
 T CEntityFactory<CPointVelocitySensor>::Create(char const*)
 T CEntityFactory<CPointVelocitySensor>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointVelocitySensor>::GetEntitySize()
 T CEntityFactory<CPoseController>::Create(char const*)
 T CEntityFactory<CPoseController>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPoseController>::GetEntitySize()
 T CEntityFactory<CPrecipitation>::Create(char const*)
 T CEntityFactory<CPrecipitation>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPrecipitation>::GetEntitySize()
 T CEntityFactory<CPredictedViewModel>::Create(char const*)
 T CEntityFactory<CPredictedViewModel>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPredictedViewModel>::GetEntitySize()
 T CEntityFactory<CProjectedDecal>::Create(char const*)
 T CEntityFactory<CProjectedDecal>::Destroy(IServerNetworkable*)
 T CEntityFactory<CProjectedDecal>::GetEntitySize()
 T CEntityFactory<CPropAPC>::Create(char const*)
 T CEntityFactory<CPropAPC>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPropAPC>::GetEntitySize()
 T CEntityFactory<CPropAirboat>::Create(char const*)
 T CEntityFactory<CPropAirboat>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPropAirboat>::GetEntitySize()
 T CEntityFactory<CPropCombineBall>::Create(char const*)
 T CEntityFactory<CPropCombineBall>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPropCombineBall>::GetEntitySize()
 T CEntityFactory<CPropCrane>::Create(char const*)
 T CEntityFactory<CPropCrane>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPropCrane>::GetEntitySize()
 T CEntityFactory<CPropDoorRotating>::Create(char const*)
 T CEntityFactory<CPropDoorRotating>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPropDoorRotating>::GetEntitySize()
 T CEntityFactory<CPropThumper>::Create(char const*)
 T CEntityFactory<CPropThumper>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPropThumper>::GetEntitySize()
 T CEntityFactory<CPropVehicle>::Create(char const*)
 T CEntityFactory<CPropVehicle>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPropVehicle>::GetEntitySize()
 T CEntityFactory<CPropVehicleDriveable>::Create(char const*)
 T CEntityFactory<CPropVehicleDriveable>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPropVehicleDriveable>::GetEntitySize()
 T CEntityFactory<CPropVehiclePrisonerPod>::Create(char const*)
 T CEntityFactory<CPropVehiclePrisonerPod>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPropVehiclePrisonerPod>::GetEntitySize()
 T CEntityFactory<CPropVehicleViewController>::Create(char const*)
 T CEntityFactory<CPropVehicleViewController>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPropVehicleViewController>::GetEntitySize()
 T CEntityFactory<CProtoSniper>::Create(char const*)
 T CEntityFactory<CProtoSniper>::Destroy(IServerNetworkable*)
 T CEntityFactory<CProtoSniper>::GetEntitySize()
 T CEntityFactory<CPushable>::Create(char const*)
 T CEntityFactory<CPushable>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPushable>::GetEntitySize()
 T CEntityFactory<CRagGib>::Create(char const*)
 T CEntityFactory<CRagGib>::Destroy(IServerNetworkable*)
 T CEntityFactory<CRagGib>::GetEntitySize()
 T CEntityFactory<CRagdollBoogie>::Create(char const*)
 T CEntityFactory<CRagdollBoogie>::Destroy(IServerNetworkable*)
 T CEntityFactory<CRagdollBoogie>::GetEntitySize()
 T CEntityFactory<CRagdollConstraint>::Create(char const*)
 T CEntityFactory<CRagdollConstraint>::Destroy(IServerNetworkable*)
 T CEntityFactory<CRagdollConstraint>::GetEntitySize()
 T CEntityFactory<CRagdollMagnet>::Create(char const*)
 T CEntityFactory<CRagdollMagnet>::Destroy(IServerNetworkable*)
 T CEntityFactory<CRagdollMagnet>::GetEntitySize()
 T CEntityFactory<CRagdollManager>::Create(char const*)
 T CEntityFactory<CRagdollManager>::Destroy(IServerNetworkable*)
 T CEntityFactory<CRagdollManager>::GetEntitySize()
 T CEntityFactory<CRagdollProp>::Create(char const*)
 T CEntityFactory<CRagdollProp>::Destroy(IServerNetworkable*)
 T CEntityFactory<CRagdollProp>::GetEntitySize()
 T CEntityFactory<CRagdollPropAttached>::Create(char const*)
 T CEntityFactory<CRagdollPropAttached>::Destroy(IServerNetworkable*)
 T CEntityFactory<CRagdollPropAttached>::GetEntitySize()
 T CEntityFactory<CRallyPoint>::Create(char const*)
 T CEntityFactory<CRallyPoint>::Destroy(IServerNetworkable*)
 T CEntityFactory<CRallyPoint>::GetEntitySize()
 T CEntityFactory<CRecharge>::Create(char const*)
 T CEntityFactory<CRecharge>::Destroy(IServerNetworkable*)
 T CEntityFactory<CRecharge>::GetEntitySize()
 T CEntityFactory<CReservePlayerSpot>::Create(char const*)
 T CEntityFactory<CReservePlayerSpot>::Destroy(IServerNetworkable*)
 T CEntityFactory<CReservePlayerSpot>::GetEntitySize()
 T CEntityFactory<CRevertSaved>::Create(char const*)
 T CEntityFactory<CRevertSaved>::Destroy(IServerNetworkable*)
 T CEntityFactory<CRevertSaved>::GetEntitySize()
 T CEntityFactory<CRopeAnchor>::Create(char const*)
 T CEntityFactory<CRopeAnchor>::Destroy(IServerNetworkable*)
 T CEntityFactory<CRopeAnchor>::GetEntitySize()
 T CEntityFactory<CRopeKeyframe>::Create(char const*)
 T CEntityFactory<CRopeKeyframe>::Destroy(IServerNetworkable*)
 T CEntityFactory<CRopeKeyframe>::GetEntitySize()
 T CEntityFactory<CRotButton>::Create(char const*)
 T CEntityFactory<CRotButton>::Destroy(IServerNetworkable*)
 T CEntityFactory<CRotButton>::GetEntitySize()
 T CEntityFactory<CRotDoor>::Create(char const*)
 T CEntityFactory<CRotDoor>::Destroy(IServerNetworkable*)
 T CEntityFactory<CRotDoor>::GetEntitySize()
 T CEntityFactory<CRotorWashEmitter>::Create(char const*)
 T CEntityFactory<CRotorWashEmitter>::Destroy(IServerNetworkable*)
 T CEntityFactory<CRotorWashEmitter>::GetEntitySize()
 T CEntityFactory<CRotorWashShooter>::Create(char const*)
 T CEntityFactory<CRotorWashShooter>::Destroy(IServerNetworkable*)
 T CEntityFactory<CRotorWashShooter>::GetEntitySize()
 T CEntityFactory<CSatchelCharge>::Create(char const*)
 T CEntityFactory<CSatchelCharge>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSatchelCharge>::GetEntitySize()
 T CEntityFactory<CSceneEntity>::Create(char const*)
 T CEntityFactory<CSceneEntity>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSceneEntity>::GetEntitySize()
 T CEntityFactory<CSceneListManager>::Create(char const*)
 T CEntityFactory<CSceneListManager>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSceneListManager>::GetEntitySize()
 T CEntityFactory<CSceneManager>::Create(char const*)
 T CEntityFactory<CSceneManager>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSceneManager>::GetEntitySize()
 T CEntityFactory<CScriptIntro>::Create(char const*)
 T CEntityFactory<CScriptIntro>::Destroy(IServerNetworkable*)
 T CEntityFactory<CScriptIntro>::GetEntitySize()
 T CEntityFactory<CScriptedTarget>::Create(char const*)
 T CEntityFactory<CScriptedTarget>::Destroy(IServerNetworkable*)
 T CEntityFactory<CScriptedTarget>::GetEntitySize()
 T CEntityFactory<CServerRagdollTrigger>::Create(char const*)
 T CEntityFactory<CServerRagdollTrigger>::Destroy(IServerNetworkable*)
 T CEntityFactory<CServerRagdollTrigger>::GetEntitySize()
 T CEntityFactory<CShadowControl>::Create(char const*)
 T CEntityFactory<CShadowControl>::Destroy(IServerNetworkable*)
 T CEntityFactory<CShadowControl>::GetEntitySize()
 T CEntityFactory<CShower>::Create(char const*)
 T CEntityFactory<CShower>::Destroy(IServerNetworkable*)
 T CEntityFactory<CShower>::GetEntitySize()
 T CEntityFactory<CSimplePhysicsBrush>::Create(char const*)
 T CEntityFactory<CSimplePhysicsBrush>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSimplePhysicsBrush>::GetEntitySize()
 T CEntityFactory<CSimplePhysicsProp>::Create(char const*)
 T CEntityFactory<CSimplePhysicsProp>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSimplePhysicsProp>::GetEntitySize()
 T CEntityFactory<CSkyCamera>::Create(char const*)
 T CEntityFactory<CSkyCamera>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSkyCamera>::GetEntitySize()
 T CEntityFactory<CSlideshowDisplay>::Create(char const*)
 T CEntityFactory<CSlideshowDisplay>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSlideshowDisplay>::GetEntitySize()
 T CEntityFactory<CSmokeStack>::Create(char const*)
 T CEntityFactory<CSmokeStack>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSmokeStack>::GetEntitySize()
 T CEntityFactory<CSniperBullet>::Create(char const*)
 T CEntityFactory<CSniperBullet>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSniperBullet>::GetEntitySize()
 T CEntityFactory<CSniperTarget>::Create(char const*)
 T CEntityFactory<CSniperTarget>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSniperTarget>::GetEntitySize()
 T CEntityFactory<CSoundEnt>::Create(char const*)
 T CEntityFactory<CSoundEnt>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSoundEnt>::GetEntitySize()
 T CEntityFactory<CSparkTrail>::Create(char const*)
 T CEntityFactory<CSparkTrail>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSparkTrail>::GetEntitySize()
 T CEntityFactory<CSpeaker>::Create(char const*)
 T CEntityFactory<CSpeaker>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSpeaker>::GetEntitySize()
 T CEntityFactory<CSpotlightEnd>::Create(char const*)
 T CEntityFactory<CSpotlightEnd>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSpotlightEnd>::GetEntitySize()
 T CEntityFactory<CSprayCan>::Create(char const*)
 T CEntityFactory<CSprayCan>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSprayCan>::GetEntitySize()
 T CEntityFactory<CSprite>::Create(char const*)
 T CEntityFactory<CSprite>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSprite>::GetEntitySize()
 T CEntityFactory<CSpriteOriented>::Create(char const*)
 T CEntityFactory<CSpriteOriented>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSpriteOriented>::GetEntitySize()
 T CEntityFactory<CSpriteTrail>::Create(char const*)
 T CEntityFactory<CSpriteTrail>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSpriteTrail>::GetEntitySize()
 T CEntityFactory<CSquadInsignia>::Create(char const*)
 T CEntityFactory<CSquadInsignia>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSquadInsignia>::GetEntitySize()
 T CEntityFactory<CSteamJet>::Create(char const*)
 T CEntityFactory<CSteamJet>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSteamJet>::GetEntitySize()
 T CEntityFactory<CStripWeapons>::Create(char const*)
 T CEntityFactory<CStripWeapons>::Destroy(IServerNetworkable*)
 T CEntityFactory<CStripWeapons>::GetEntitySize()
 T CEntityFactory<CSun>::Create(char const*)
 T CEntityFactory<CSun>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSun>::GetEntitySize()
 T CEntityFactory<CTankTargetChange>::Create(char const*)
 T CEntityFactory<CTankTargetChange>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTankTargetChange>::GetEntitySize()
 T CEntityFactory<CTankTrainAI>::Create(char const*)
 T CEntityFactory<CTankTrainAI>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTankTrainAI>::GetEntitySize()
 T CEntityFactory<CTargetCDAudioRep>::Create(char const*)
 T CEntityFactory<CTargetCDAudioRep>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTargetCDAudioRep>::GetEntitySize()
 T CEntityFactory<CTargetChangeGravity>::Create(char const*)
 T CEntityFactory<CTargetChangeGravity>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTargetChangeGravity>::GetEntitySize()
 T CEntityFactory<CTargetGunshipCrash>::Create(char const*)
 T CEntityFactory<CTargetGunshipCrash>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTargetGunshipCrash>::GetEntitySize()
 T CEntityFactory<CTeam>::Create(char const*)
 T CEntityFactory<CTeam>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTeam>::GetEntitySize()
 T CEntityFactory<CTeamControlPoint>::Create(char const*)
 T CEntityFactory<CTeamControlPoint>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTeamControlPoint>::GetEntitySize()
 T CEntityFactory<CTeamControlPointMaster>::Create(char const*)
 T CEntityFactory<CTeamControlPointMaster>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTeamControlPointMaster>::GetEntitySize()
 T CEntityFactory<CTeamControlPointRound>::Create(char const*)
 T CEntityFactory<CTeamControlPointRound>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTeamControlPointRound>::GetEntitySize()
 T CEntityFactory<CTeamRoundTimer>::Create(char const*)
 T CEntityFactory<CTeamRoundTimer>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTeamRoundTimer>::GetEntitySize()
 T CEntityFactory<CTeamSpawnPoint>::Create(char const*)
 T CEntityFactory<CTeamSpawnPoint>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTeamSpawnPoint>::GetEntitySize()
 T CEntityFactory<CTeamTrainWatcher>::Create(char const*)
 T CEntityFactory<CTeamTrainWatcher>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTeamTrainWatcher>::GetEntitySize()
 T CEntityFactory<CTeamVehicleSpawnPoint>::Create(char const*)
 T CEntityFactory<CTeamVehicleSpawnPoint>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTeamVehicleSpawnPoint>::GetEntitySize()
 T CEntityFactory<CTempEntTester>::Create(char const*)
 T CEntityFactory<CTempEntTester>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTempEntTester>::GetEntitySize()
 T CEntityFactory<CTemplateNPCMaker>::Create(char const*)
 T CEntityFactory<CTemplateNPCMaker>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTemplateNPCMaker>::GetEntitySize()
 T CEntityFactory<CTesla>::Create(char const*)
 T CEntityFactory<CTesla>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTesla>::GetEntitySize()
 T CEntityFactory<CTestEffect>::Create(char const*)
 T CEntityFactory<CTestEffect>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTestEffect>::GetEntitySize()
 T CEntityFactory<CTestTraceline>::Create(char const*)
 T CEntityFactory<CTestTraceline>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTestTraceline>::GetEntitySize()
 T CEntityFactory<CTest_ProxyToggle_Networkable>::Create(char const*)
 T CEntityFactory<CTest_ProxyToggle_Networkable>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTest_ProxyToggle_Networkable>::GetEntitySize()
 T CEntityFactory<CTextureToggle>::Create(char const*)
 T CEntityFactory<CTextureToggle>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTextureToggle>::GetEntitySize()
 T CEntityFactory<CTimerEntity>::Create(char const*)
 T CEntityFactory<CTimerEntity>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTimerEntity>::GetEntitySize()
 T CEntityFactory<CTriggerApplyImpulse>::Create(char const*)
 T CEntityFactory<CTriggerApplyImpulse>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerApplyImpulse>::GetEntitySize()
 T CEntityFactory<CTriggerAreaCapture>::Create(char const*)
 T CEntityFactory<CTriggerAreaCapture>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerAreaCapture>::GetEntitySize()
 T CEntityFactory<CTriggerBrush>::Create(char const*)
 T CEntityFactory<CTriggerBrush>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerBrush>::GetEntitySize()
 T CEntityFactory<CTriggerCDAudio>::Create(char const*)
 T CEntityFactory<CTriggerCDAudio>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerCDAudio>::GetEntitySize()
 T CEntityFactory<CTriggerCamera>::Create(char const*)
 T CEntityFactory<CTriggerCamera>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerCamera>::GetEntitySize()
 T CEntityFactory<CTriggerGravity>::Create(char const*)
 T CEntityFactory<CTriggerGravity>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerGravity>::GetEntitySize()
 T CEntityFactory<CTriggerHurt>::Create(char const*)
 T CEntityFactory<CTriggerHurt>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerHurt>::GetEntitySize()
 T CEntityFactory<CTriggerImpact>::Create(char const*)
 T CEntityFactory<CTriggerImpact>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerImpact>::GetEntitySize()
 T CEntityFactory<CTriggerLook>::Create(char const*)
 T CEntityFactory<CTriggerLook>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerLook>::GetEntitySize()
 T CEntityFactory<CTriggerMultiple>::Create(char const*)
 T CEntityFactory<CTriggerMultiple>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerMultiple>::GetEntitySize()
 T CEntityFactory<CTriggerOnce>::Create(char const*)
 T CEntityFactory<CTriggerOnce>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerOnce>::GetEntitySize()
 T CEntityFactory<CTriggerPhysicsTrap>::Create(char const*)
 T CEntityFactory<CTriggerPhysicsTrap>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerPhysicsTrap>::GetEntitySize()
 T CEntityFactory<CTriggerPlayerMovement>::Create(char const*)
 T CEntityFactory<CTriggerPlayerMovement>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerPlayerMovement>::GetEntitySize()
 T CEntityFactory<CTriggerProximity>::Create(char const*)
 T CEntityFactory<CTriggerProximity>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerProximity>::GetEntitySize()
 T CEntityFactory<CTriggerPush>::Create(char const*)
 T CEntityFactory<CTriggerPush>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerPush>::GetEntitySize()
 T CEntityFactory<CTriggerRPGFire>::Create(char const*)
 T CEntityFactory<CTriggerRPGFire>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerRPGFire>::GetEntitySize()
 T CEntityFactory<CTriggerRemove>::Create(char const*)
 T CEntityFactory<CTriggerRemove>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerRemove>::GetEntitySize()
 T CEntityFactory<CTriggerSave>::Create(char const*)
 T CEntityFactory<CTriggerSave>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerSave>::GetEntitySize()
 T CEntityFactory<CTriggerSoundscape>::Create(char const*)
 T CEntityFactory<CTriggerSoundscape>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerSoundscape>::GetEntitySize()
 T CEntityFactory<CTriggerTeleport>::Create(char const*)
 T CEntityFactory<CTriggerTeleport>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerTeleport>::GetEntitySize()
 T CEntityFactory<CTriggerTeleportRelative>::Create(char const*)
 T CEntityFactory<CTriggerTeleportRelative>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerTeleportRelative>::GetEntitySize()
 T CEntityFactory<CTriggerToggleSave>::Create(char const*)
 T CEntityFactory<CTriggerToggleSave>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerToggleSave>::GetEntitySize()
 T CEntityFactory<CTriggerVPhysicsMotion>::Create(char const*)
 T CEntityFactory<CTriggerVPhysicsMotion>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerVPhysicsMotion>::GetEntitySize()
 T CEntityFactory<CTriggerVolume>::Create(char const*)
 T CEntityFactory<CTriggerVolume>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerVolume>::GetEntitySize()
 T CEntityFactory<CTriggerWateryDeath>::Create(char const*)
 T CEntityFactory<CTriggerWateryDeath>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerWateryDeath>::GetEntitySize()
 T CEntityFactory<CTriggerWeaponDissolve>::Create(char const*)
 T CEntityFactory<CTriggerWeaponDissolve>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerWeaponDissolve>::GetEntitySize()
 T CEntityFactory<CTriggerWeaponStrip>::Create(char const*)
 T CEntityFactory<CTriggerWeaponStrip>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerWeaponStrip>::GetEntitySize()
 T CEntityFactory<CTriggerWind>::Create(char const*)
 T CEntityFactory<CTriggerWind>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerWind>::GetEntitySize()
 T CEntityFactory<CTripmineGrenade>::Create(char const*)
 T CEntityFactory<CTripmineGrenade>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTripmineGrenade>::GetEntitySize()
 T CEntityFactory<CTurretTipController>::Create(char const*)
 T CEntityFactory<CTurretTipController>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTurretTipController>::GetEntitySize()
 T CEntityFactory<CVGuiScreen>::Create(char const*)
 T CEntityFactory<CVGuiScreen>::Destroy(IServerNetworkable*)
 T CEntityFactory<CVGuiScreen>::GetEntitySize()
 T CEntityFactory<CVortigauntChargeToken>::Create(char const*)
 T CEntityFactory<CVortigauntChargeToken>::Destroy(IServerNetworkable*)
 T CEntityFactory<CVortigauntChargeToken>::GetEntitySize()
 T CEntityFactory<CVortigauntEffectDispel>::Create(char const*)
 T CEntityFactory<CVortigauntEffectDispel>::Destroy(IServerNetworkable*)
 T CEntityFactory<CVortigauntEffectDispel>::GetEntitySize()
 T CEntityFactory<CVoteController>::Create(char const*)
 T CEntityFactory<CVoteController>::Destroy(IServerNetworkable*)
 T CEntityFactory<CVoteController>::GetEntitySize()
 T CEntityFactory<CWC_UpdateIgnoreList>::Create(char const*)
 T CEntityFactory<CWC_UpdateIgnoreList>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWC_UpdateIgnoreList>::GetEntitySize()
 T CEntityFactory<CWallHealth>::Create(char const*)
 T CEntityFactory<CWallHealth>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWallHealth>::GetEntitySize()
 T CEntityFactory<CWaterBullet>::Create(char const*)
 T CEntityFactory<CWaterBullet>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWaterBullet>::GetEntitySize()
 T CEntityFactory<CWaterLODControl>::Create(char const*)
 T CEntityFactory<CWaterLODControl>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWaterLODControl>::GetEntitySize()
 T CEntityFactory<CWateryDeathLeech>::Create(char const*)
 T CEntityFactory<CWateryDeathLeech>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWateryDeathLeech>::GetEntitySize()
 T CEntityFactory<CWeapon357>::Create(char const*)
 T CEntityFactory<CWeapon357>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWeapon357>::GetEntitySize()
 T CEntityFactory<CWeaponAR2>::Create(char const*)
 T CEntityFactory<CWeaponAR2>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWeaponAR2>::GetEntitySize()
 T CEntityFactory<CWeaponAnnabelle>::Create(char const*)
 T CEntityFactory<CWeaponAnnabelle>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWeaponAnnabelle>::GetEntitySize()
 T CEntityFactory<CWeaponBugBait>::Create(char const*)
 T CEntityFactory<CWeaponBugBait>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWeaponBugBait>::GetEntitySize()
 T CEntityFactory<CWeaponCrossbow>::Create(char const*)
 T CEntityFactory<CWeaponCrossbow>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWeaponCrossbow>::GetEntitySize()
 T CEntityFactory<CWeaponCrowbar>::Create(char const*)
 T CEntityFactory<CWeaponCrowbar>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWeaponCrowbar>::GetEntitySize()
 T CEntityFactory<CWeaponCubemap>::Create(char const*)
 T CEntityFactory<CWeaponCubemap>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWeaponCubemap>::GetEntitySize()
 T CEntityFactory<CWeaponCycler>::Create(char const*)
 T CEntityFactory<CWeaponCycler>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWeaponCycler>::GetEntitySize()
 T CEntityFactory<CWeaponFrag>::Create(char const*)
 T CEntityFactory<CWeaponFrag>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWeaponFrag>::GetEntitySize()
 T CEntityFactory<CWeaponHL2MPBase>::Create(char const*)
 T CEntityFactory<CWeaponHL2MPBase>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWeaponHL2MPBase>::GetEntitySize()
 T CEntityFactory<CWeaponPhysCannon>::Create(char const*)
 T CEntityFactory<CWeaponPhysCannon>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWeaponPhysCannon>::GetEntitySize()
 T CEntityFactory<CWeaponPistol>::Create(char const*)
 T CEntityFactory<CWeaponPistol>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWeaponPistol>::GetEntitySize()
 T CEntityFactory<CWeaponRPG>::Create(char const*)
 T CEntityFactory<CWeaponRPG>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWeaponRPG>::GetEntitySize()
 T CEntityFactory<CWeaponSMG1>::Create(char const*)
 T CEntityFactory<CWeaponSMG1>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWeaponSMG1>::GetEntitySize()
 T CEntityFactory<CWeaponShotgun>::Create(char const*)
 T CEntityFactory<CWeaponShotgun>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWeaponShotgun>::GetEntitySize()
 T CEntityFactory<CWeaponStunStick>::Create(char const*)
 T CEntityFactory<CWeaponStunStick>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWeaponStunStick>::GetEntitySize()
 T CEntityFactory<CWeapon_SLAM>::Create(char const*)
 T CEntityFactory<CWeapon_SLAM>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWeapon_SLAM>::GetEntitySize()
 T CEntityFactory<CWeightButton>::Create(char const*)
 T CEntityFactory<CWeightButton>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWeightButton>::GetEntitySize()
 T CEntityFactory<CWindowPane>::Create(char const*)
 T CEntityFactory<CWindowPane>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWindowPane>::GetEntitySize()
 T CEntityFactory<CWorld>::Create(char const*)
 T CEntityFactory<CWorld>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWorld>::GetEntitySize()
 T CEntityFactory<CWorldItem>::Create(char const*)
 T CEntityFactory<CWorldItem>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWorldItem>::GetEntitySize()
 T CEntityFactory<CWreckage>::Create(char const*)
 T CEntityFactory<CWreckage>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWreckage>::GetEntitySize()
 T CEntityFactory<CZombie>::Create(char const*)
 T CEntityFactory<CZombie>::Destroy(IServerNetworkable*)
 T CEntityFactory<CZombie>::GetEntitySize()
 T CEntityFactory<DustTrail>::Create(char const*)
 T CEntityFactory<DustTrail>::Destroy(IServerNetworkable*)
 T CEntityFactory<DustTrail>::GetEntitySize()
 T CEntityFactory<FilterDamageType>::Create(char const*)
 T CEntityFactory<FilterDamageType>::Destroy(IServerNetworkable*)
 T CEntityFactory<FilterDamageType>::GetEntitySize()
 T CEntityFactory<FilterTeam>::Create(char const*)
 T CEntityFactory<FilterTeam>::Destroy(IServerNetworkable*)
 T CEntityFactory<FilterTeam>::GetEntitySize()
 T CEntityFactory<MovieExplosion>::Create(char const*)
 T CEntityFactory<MovieExplosion>::Destroy(IServerNetworkable*)
 T CEntityFactory<MovieExplosion>::GetEntitySize()
 T CEntityFactory<ParticleSmokeGrenade>::Create(char const*)
 T CEntityFactory<ParticleSmokeGrenade>::Destroy(IServerNetworkable*)
 T CEntityFactory<ParticleSmokeGrenade>::GetEntitySize()
 T CEntityFactory<RocketTrail>::Create(char const*)
 T CEntityFactory<RocketTrail>::Destroy(IServerNetworkable*)
 T CEntityFactory<RocketTrail>::GetEntitySize()
 T CEntityFactory<SmokeTrail>::Create(char const*)
 T CEntityFactory<SmokeTrail>::Destroy(IServerNetworkable*)
 T CEntityFactory<SmokeTrail>::GetEntitySize()
 T CEntityFactory<SporeExplosion>::Create(char const*)
 T CEntityFactory<SporeExplosion>::Destroy(IServerNetworkable*)
 T CEntityFactory<SporeExplosion>::GetEntitySize()
 T CEntityFactory<SporeTrail>::Create(char const*)
 T CEntityFactory<SporeTrail>::Destroy(IServerNetworkable*)
 T CEntityFactory<SporeTrail>::GetEntitySize()
 T CEntityFactoryDictionary::Create(char const*)
 T CEntityFactoryDictionary::Destroy(char const*, IServerNetworkable*)
 T CEntityFactoryDictionary::FindFactory(char const*)
 T CEntityFactoryDictionary::GetCannonicalName(char const*)
 T CEntityFactoryDictionary::InstallFactory(IEntityFactory*, char const*)
 T CEntityFactoryDictionary::~CEntityFactoryDictionary()
 T CEntityFlame::AttachToEntity(CBaseEntity*)
 T CEntityFlame::CEntityFlame()
 T CEntityFlame::Create(CBaseEntity*, bool)
 T CEntityFlame::FlameThink()
 T CEntityFlame::GetDataDescMap()
 T CEntityFlame::GetHitboxFireScale()
 T CEntityFlame::GetNumHitboxFires()
 T CEntityFlame::GetRemainingLife()
 T CEntityFlame::GetServerClass()
 T CEntityFlame::InputIgnite(inputdata_t&)
 T CEntityFlame::Precache()
 T CEntityFlame::SetHitboxFireScale(float)
 T CEntityFlame::SetLifetime(float)
 T CEntityFlame::SetNumHitboxFires(int)
 T CEntityFlame::SetUseHitboxes(bool)
 T CEntityFlame::UpdateOnRemove()
 T CEntityFlame::YouForgotToImplementOrDeclareServerClass()
 T CEntityFlame::~CEntityFlame()
 T CEntityList::AddEntity(CBaseEntity*)
 T CEntityList::CEntityList()
 T CEntityList::DeleteEntity(CBaseEntity*)
 T CEntityList::~CEntityList()
 T CEntityListSystem::FrameUpdatePostEntityThink()
 T CEntityListSystem::LevelInitPreEntity()
 T CEntityListSystem::LevelShutdownPostEntity()
 T CEntityListSystem::LevelShutdownPreEntity()
 T CEntityListSystem::~CEntityListSystem()
 T CEntityMapData::CurrentBufferPosition()
 T CEntityMapData::ExtractValue(char const*, char*)
 T CEntityMapData::GetFirstKey(char*, char*)
 T CEntityMapData::GetNextKey(char*, char*)
 T CEntityMapData::SetValue(char const*, char*, int)
 T CEntityParticleTrail* _CreateEntityTemplate<CEntityParticleTrail>(CEntityParticleTrail*, char const*)
 T CEntityParticleTrail::Create(CBaseEntity*, EntityParticleTrailInfo_t const&, CBaseEntity*)
 T CEntityParticleTrail::Destroy(CBaseEntity*, EntityParticleTrailInfo_t const&)
 T CEntityParticleTrail::GetDataDescMap()
 T CEntityParticleTrail::GetServerClass()
 T CEntityParticleTrail::NetworkVar_m_Info::NetworkStateChanged()
 T CEntityParticleTrail::NetworkVar_m_Info::NetworkStateChanged(void*)
 T CEntityParticleTrail::NotifySystemEvent(CBaseEntity*, notify_system_event_t, notify_system_event_params_t const&)
 T CEntityParticleTrail::SetTransmit(CCheckTransmitInfo*, bool)
 T CEntityParticleTrail::Spawn()
 T CEntityParticleTrail::UpdateOnRemove()
 T CEntityParticleTrail::YouForgotToImplementOrDeclareServerClass()
 T CEntityParticleTrail::~CEntityParticleTrail()
 T CEntitySaveRestoreBlockHandler::DoRestoreEntity(CBaseEntity*, IRestore*)
 T CEntitySaveRestoreBlockHandler::FindGlobalEntity(string_t, string_t)
 T CEntitySaveRestoreBlockHandler::GetBlockName()
 T CEntitySaveRestoreBlockHandler::PostRestore()
 T CEntitySaveRestoreBlockHandler::PostSave()
 T CEntitySaveRestoreBlockHandler::PreRestore()
 T CEntitySaveRestoreBlockHandler::PreSave(CSaveRestoreData*)
 T CEntitySaveRestoreBlockHandler::ReadRestoreHeaders(IRestore*)
 T CEntitySaveRestoreBlockHandler::Restore(IRestore*, bool)
 T CEntitySaveRestoreBlockHandler::RestoreEntity(CBaseEntity*, IRestore*, entitytable_t*)
 T CEntitySaveRestoreBlockHandler::RestoreGlobalEntity(CBaseEntity*, CSaveRestoreData*, entitytable_t*)
 T CEntitySaveRestoreBlockHandler::Save(ISave*)
 T CEntitySaveRestoreBlockHandler::SaveInitEntities(CSaveRestoreData*)
 T CEntitySaveRestoreBlockHandler::WriteSaveHeaders(ISave*)
 T CEntitySaveUtils::AddLevelTransitionSaveDependency(CBaseEntity*, CBaseEntity*)
 T CEntitySaveUtils::GetEntityDependencies(CBaseEntity*, int, CBaseEntity**)
 T CEntitySaveUtils::GetEntityDependencyCount(CBaseEntity*)
 T CEntitySphereQuery::CEntitySphereQuery(Vector const&, float, int)
 T CEntitySphereQuery::GetCurrentEntity()
 T CEntityTouchManager::FrameUpdatePostEntityThink()
 T CEntityTouchManager::LevelInitPreEntity()
 T CEntityTouchManager::OnEntityCreated(CBaseEntity*)
 T CEntityTouchManager::OnEntityDeleted(CBaseEntity*)
 T CEntityTouchManager::~CEntityTouchManager()
 T CEnvAR2Explosion::GetDataDescMap()
 T CEnvAR2Explosion::InputExplode(inputdata_t&)
 T CEnvAR2Explosion::Spawn()
 T CEnvAR2Explosion::~CEnvAR2Explosion()
 T CEnvBeam::Activate()
 T CEnvBeam::BeamUpdateVars()
 T CEnvBeam::GetDataDescMap()
 T CEnvBeam::GetDecalName()
 T CEnvBeam::InputStrikeOnce(inputdata_t&)
 T CEnvBeam::InputToggle(inputdata_t&)
 T CEnvBeam::InputTurnOff(inputdata_t&)
 T CEnvBeam::InputTurnOn(inputdata_t&)
 T CEnvBeam::PassesTouchFilters(CBaseEntity*)
 T CEnvBeam::Precache()
 T CEnvBeam::RandomArea()
 T CEnvBeam::RandomPoint(Vector const&)
 T CEnvBeam::Spawn()
 T CEnvBeam::Strike()
 T CEnvBeam::StrikeThink()
 T CEnvBeam::TurnOn()
 T CEnvBeam::UpdateThink()
 T CEnvBeam::Zap(Vector const&, Vector const&)
 T CEnvBeam::~CEnvBeam()
 T CEnvBeverage::GetDataDescMap()
 T CEnvBeverage::InputActivate(inputdata_t&)
 T CEnvBeverage::KeyValue(char const*, char const*)
 T CEnvBeverage::Precache()
 T CEnvBeverage::Spawn()
 T CEnvBeverage::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CEnvBeverage::~CEnvBeverage()
 T CEnvDetailController::GetServerClass()
 T CEnvDetailController::KeyValue(char const*, char const*)
 T CEnvDetailController::UpdateTransmitState()
 T CEnvDetailController::YouForgotToImplementOrDeclareServerClass()
 T CEnvDetailController::~CEnvDetailController()
 T CEnvDustPuff::GetDataDescMap()
 T CEnvDustPuff::InputSpawnDust(inputdata_t&)
 T CEnvDustPuff::~CEnvDustPuff()
 T CEnvEffectsScript::GetDataDescMap()
 T CEnvEffectsScript::HandleAnimEvent(animevent_t*)
 T CEnvEffectsScript::InputSetSequence(inputdata_t&)
 T CEnvEffectsScript::ParseNewEffect()
 T CEnvEffectsScript::ParseScriptFile()
 T CEnvEffectsScript::Precache()
 T CEnvEffectsScript::Spawn()
 T CEnvEffectsScript::SpriteEffectEvent(CEffectScriptElement*)
 T CEnvEffectsScript::Think()
 T CEnvEffectsScript::TrailEffectEvent(CEffectScriptElement*)
 T CEnvEffectsScript::UpdateTransmitState()
 T CEnvEffectsScript::~CEnvEffectsScript()
 T CEnvEntityMaker::Activate()
 T CEnvEntityMaker::CheckSpawnThink()
 T CEnvEntityMaker::GetDataDescMap()
 T CEnvEntityMaker::HasRoomToSpawn()
 T CEnvEntityMaker::InputForceSpawn(inputdata_t&)
 T CEnvEntityMaker::InputForceSpawnAtEntityOrigin(inputdata_t&)
 T CEnvEntityMaker::IsPlayerLooking()
 T CEnvEntityMaker::Spawn()
 T CEnvEntityMaker::SpawnEntity(Vector, QAngle)
 T CEnvEntityMaker::~CEnvEntityMaker()
 T CEnvExplosion::DrawDebugTextOverlays()
 T CEnvExplosion::GetDataDescMap()
 T CEnvExplosion::InputExplode(inputdata_t&)
 T CEnvExplosion::KeyValue(char const*, char const*)
 T CEnvExplosion::Precache()
 T CEnvExplosion::Smoke()
 T CEnvExplosion::Spawn()
 T CEnvExplosion::~CEnvExplosion()
 T CEnvFade::DrawDebugTextOverlays()
 T CEnvFade::GetDataDescMap()
 T CEnvFade::InputFade(inputdata_t&)
 T CEnvFade::Spawn()
 T CEnvFade::~CEnvFade()
 T CEnvFireSensor::GetDataDescMap()
 T CEnvFireSensor::InputDisable(inputdata_t&)
 T CEnvFireSensor::InputEnable(inputdata_t&)
 T CEnvFireSensor::Spawn()
 T CEnvFireSensor::Think()
 T CEnvFireSensor::~CEnvFireSensor()
 T CEnvFireSource::GetDataDescMap()
 T CEnvFireSource::InputDisable(inputdata_t&)
 T CEnvFireSource::InputEnable(inputdata_t&)
 T CEnvFireSource::Spawn()
 T CEnvFireSource::Think()
 T CEnvFireSource::~CEnvFireSource()
 T CEnvFunnel::GetDataDescMap()
 T CEnvFunnel::Precache()
 T CEnvFunnel::Spawn()
 T CEnvFunnel::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CEnvFunnel::~CEnvFunnel()
 T CEnvGlobal::DrawDebugTextOverlays()
 T CEnvGlobal::GetDataDescMap()
 T CEnvGlobal::InputAddToCounter(inputdata_t&)
 T CEnvGlobal::InputGetCounter(inputdata_t&)
 T CEnvGlobal::InputRemove(inputdata_t&)
 T CEnvGlobal::InputSetCounter(inputdata_t&)
 T CEnvGlobal::InputToggle(inputdata_t&)
 T CEnvGlobal::InputTurnOff(inputdata_t&)
 T CEnvGlobal::InputTurnOn(inputdata_t&)
 T CEnvGlobal::Spawn()
 T CEnvGlobal::~CEnvGlobal()
 T CEnvGunfire::Activate()
 T CEnvGunfire::GetDataDescMap()
 T CEnvGunfire::InputDisable(inputdata_t&)
 T CEnvGunfire::InputEnable(inputdata_t&)
 T CEnvGunfire::Precache()
 T CEnvGunfire::ShootThink()
 T CEnvGunfire::Spawn()
 T CEnvGunfire::UpdateTarget()
 T CEnvGunfire::~CEnvGunfire()
 T CEnvHeadcrabCanister::CanisterFinishedOpening()
 T CEnvHeadcrabCanister::ComputeWorldEntryPoint(Vector*, QAngle*, Vector*)
 T CEnvHeadcrabCanister::Detonate()
 T CEnvHeadcrabCanister::GetDataDescMap()
 T CEnvHeadcrabCanister::GetServerClass()
 T CEnvHeadcrabCanister::HeadcrabCanisterSkyboxOnlyThink()
 T CEnvHeadcrabCanister::HeadcrabCanisterSkyboxRestartThink()
 T CEnvHeadcrabCanister::HeadcrabCanisterSkyboxThink()
 T CEnvHeadcrabCanister::HeadcrabCanisterSpawnHeadcrabThink()
 T CEnvHeadcrabCanister::HeadcrabCanisterWorldThink()
 T CEnvHeadcrabCanister::InputFireCanister(inputdata_t&)
 T CEnvHeadcrabCanister::InputOpenCanister(inputdata_t&)
 T CEnvHeadcrabCanister::InputSpawnHeadcrabs(inputdata_t&)
 T CEnvHeadcrabCanister::InputStopSmoke(inputdata_t&)
 T CEnvHeadcrabCanister::Landed()
 T CEnvHeadcrabCanister::NetworkVar_m_Shared::NetworkStateChanged()
 T CEnvHeadcrabCanister::NetworkVar_m_Shared::NetworkStateChanged(void*)
 T CEnvHeadcrabCanister::OpenCanister()
 T CEnvHeadcrabCanister::PlaceCanisterInWorld()
 T CEnvHeadcrabCanister::Precache()
 T CEnvHeadcrabCanister::SetLanded()
 T CEnvHeadcrabCanister::SetTransmit(CCheckTransmitInfo*, bool)
 T CEnvHeadcrabCanister::Spawn()
 T CEnvHeadcrabCanister::TestForCollisionsAgainstEntities(Vector const&)
 T CEnvHeadcrabCanister::TestForCollisionsAgainstWorld(Vector const&)
 T CEnvHeadcrabCanister::UpdateOnRemove()
 T CEnvHeadcrabCanister::WaitForOpenSequenceThink()
 T CEnvHeadcrabCanister::YouForgotToImplementOrDeclareServerClass()
 T CEnvHeadcrabCanister::~CEnvHeadcrabCanister()
 T CEnvHeadcrabCanisterShared::CEnvHeadcrabCanisterShared()
 T CEnvHeadcrabCanisterShared::ConvertFromSkyboxToWorld()
 T CEnvHeadcrabCanisterShared::DidImpact(float) const
 T CEnvHeadcrabCanisterShared::GetEnterWorldTime() const
 T CEnvHeadcrabCanisterShared::GetPositionAtTime(float, Vector&, QAngle&)
 T CEnvHeadcrabCanisterShared::InitInSkybox(float, Vector const&, QAngle const&, Vector const&, Vector const&, Vector const&, float)
 T CEnvHeadcrabCanisterShared::InitInWorld(float, Vector const&, QAngle const&, Vector const&, Vector const&, bool)
 T CEnvHeadcrabCanisterShared::IsInSkybox()
 T CEnvHeadcrabCanisterShared::NetworkStateChanged()
 T CEnvHeadcrabCanisterShared::NetworkStateChanged(void*)
 T CEnvHudHint::GetDataDescMap()
 T CEnvHudHint::InputHideHudHint(inputdata_t&)
 T CEnvHudHint::InputShowHudHint(inputdata_t&)
 T CEnvHudHint::Precache()
 T CEnvHudHint::Spawn()
 T CEnvHudHint::~CEnvHudHint()
 T CEnvLaser::FireAtPoint(CGameTrace&)
 T CEnvLaser::GetDataDescMap()
 T CEnvLaser::InputToggle(inputdata_t&)
 T CEnvLaser::InputTurnOff(inputdata_t&)
 T CEnvLaser::InputTurnOn(inputdata_t&)
 T CEnvLaser::KeyValue(char const*, char const*)
 T CEnvLaser::Precache()
 T CEnvLaser::Spawn()
 T CEnvLaser::StrikeThink()
 T CEnvLaser::TurnOff()
 T CEnvLaser::TurnOn()
 T CEnvLaser::~CEnvLaser()
 T CEnvLight::KeyValue(char const*, char const*)
 T CEnvLight::Spawn()
 T CEnvLight::~CEnvLight()
 T CEnvMicrophone::Activate()
 T CEnvMicrophone::ActivateSpeaker()
 T CEnvMicrophone::CanHearSound(CSound*, float&)
 T CEnvMicrophone::CanHearSound(int, soundlevel_t, float&, Vector const*)
 T CEnvMicrophone::GetDataDescMap()
 T CEnvMicrophone::InputDisable(inputdata_t&)
 T CEnvMicrophone::InputEnable(inputdata_t&)
 T CEnvMicrophone::InputSetSpeakerName(inputdata_t&)
 T CEnvMicrophone::OnRestore()
 T CEnvMicrophone::OnSoundPlayed(int, char const*, soundlevel_t, float, int, int, Vector const*, float, CUtlVector<Vector, CUtlMemory<Vector, int> >&)
 T CEnvMicrophone::SoundPlayed(int, char const*, soundlevel_t, float, int, int, Vector const*, float, CUtlVector<Vector, CUtlMemory<Vector, int> >&)
 T CEnvMicrophone::Spawn()
 T CEnvMicrophone::Think()
 T CEnvMicrophone::~CEnvMicrophone()
 T CEnvMuzzleFlash::GetDataDescMap()
 T CEnvMuzzleFlash::InputFire(inputdata_t&)
 T CEnvMuzzleFlash::Spawn()
 T CEnvMuzzleFlash::~CEnvMuzzleFlash()
 T CEnvParticleScript::Activate()
 T CEnvParticleScript::GetDataDescMap()
 T CEnvParticleScript::GetServerClass()
 T CEnvParticleScript::InputSetSequence(inputdata_t&)
 T CEnvParticleScript::Precache()
 T CEnvParticleScript::PrecacheAnimationEventMaterials()
 T CEnvParticleScript::Spawn()
 T CEnvParticleScript::UpdateTransmitState()
 T CEnvParticleScript::YouForgotToImplementOrDeclareServerClass()
 T CEnvParticleScript::~CEnvParticleScript()
 T CEnvPlayerSurfaceTrigger::GetDataDescMap()
 T CEnvPlayerSurfaceTrigger::InputDisable(inputdata_t&)
 T CEnvPlayerSurfaceTrigger::InputEnable(inputdata_t&)
 T CEnvPlayerSurfaceTrigger::OnRestore()
 T CEnvPlayerSurfaceTrigger::PlayerSurfaceChanged(CBasePlayer*, char)
 T CEnvPlayerSurfaceTrigger::SetPlayerSurface(CBasePlayer*, char)
 T CEnvPlayerSurfaceTrigger::Spawn()
 T CEnvPlayerSurfaceTrigger::UpdateMaterialThink()
 T CEnvPlayerSurfaceTrigger::~CEnvPlayerSurfaceTrigger()
 T CEnvProjectedTexture::Activate()
 T CEnvProjectedTexture::CEnvProjectedTexture()
 T CEnvProjectedTexture::GetDataDescMap()
 T CEnvProjectedTexture::GetServerClass()
 T CEnvProjectedTexture::InitialThink()
 T CEnvProjectedTexture::InputSetAmbient(inputdata_t&)
 T CEnvProjectedTexture::InputSetCameraSpace(inputdata_t&)
 T CEnvProjectedTexture::InputSetEnableShadows(inputdata_t&)
 T CEnvProjectedTexture::InputSetFOV(inputdata_t&)
 T CEnvProjectedTexture::InputSetLightOnlyTarget(inputdata_t&)
 T CEnvProjectedTexture::InputSetLightWorld(inputdata_t&)
 T CEnvProjectedTexture::InputSetSpotlightTexture(inputdata_t&)
 T CEnvProjectedTexture::InputSetTarget(inputdata_t&)
 T CEnvProjectedTexture::InputTurnOff(inputdata_t&)
 T CEnvProjectedTexture::InputTurnOn(inputdata_t&)
 T CEnvProjectedTexture::KeyValue(char const*, char const*)
 T CEnvProjectedTexture::UpdateTransmitState()
 T CEnvProjectedTexture::YouForgotToImplementOrDeclareServerClass()
 T CEnvProjectedTexture::~CEnvProjectedTexture()
 T CEnvQuadraticBeam::GetDataDescMap()
 T CEnvQuadraticBeam::GetServerClass()
 T CEnvQuadraticBeam::Spawn()
 T CEnvQuadraticBeam::YouForgotToImplementOrDeclareServerClass()
 T CEnvQuadraticBeam::~CEnvQuadraticBeam()
 T CEnvScreenEffect::GetDataDescMap()
 T CEnvScreenEffect::GetServerClass()
 T CEnvScreenEffect::InputStartEffect(inputdata_t&)
 T CEnvScreenEffect::InputStopEffect(inputdata_t&)
 T CEnvScreenEffect::Precache()
 T CEnvScreenEffect::Spawn()
 T CEnvScreenEffect::UpdateTransmitState()
 T CEnvScreenEffect::YouForgotToImplementOrDeclareServerClass()
 T CEnvScreenEffect::~CEnvScreenEffect()
 T CEnvScreenOverlay::CEnvScreenOverlay()
 T CEnvScreenOverlay::GetDataDescMap()
 T CEnvScreenOverlay::GetServerClass()
 T CEnvScreenOverlay::InputStartOverlay(inputdata_t&)
 T CEnvScreenOverlay::InputStopOverlay(inputdata_t&)
 T CEnvScreenOverlay::InputSwitchOverlay(inputdata_t&)
 T CEnvScreenOverlay::Precache()
 T CEnvScreenOverlay::Spawn()
 T CEnvScreenOverlay::UpdateTransmitState()
 T CEnvScreenOverlay::YouForgotToImplementOrDeclareServerClass()
 T CEnvScreenOverlay::~CEnvScreenOverlay()
 T CEnvShake::ApplyShake(ShakeCommand_t)
 T CEnvShake::DrawDebugTextOverlays()
 T CEnvShake::GetDataDescMap()
 T CEnvShake::InputAmplitude(inputdata_t&)
 T CEnvShake::InputFrequency(inputdata_t&)
 T CEnvShake::InputStartShake(inputdata_t&)
 T CEnvShake::InputStopShake(inputdata_t&)
 T CEnvShake::OnRestore()
 T CEnvShake::Spawn()
 T CEnvShake::Think()
 T CEnvShake::~CEnvShake()
 T CEnvShooter::CreateGib()
 T CEnvShooter::GetDataDescMap()
 T CEnvShooter::KeyValue(char const*, char const*)
 T CEnvShooter::Precache()
 T CEnvShooter::~CEnvShooter()
 T CEnvSoundscape::DrawDebugGeometryOverlays()
 T CEnvSoundscape::GetDataDescMap()
 T CEnvSoundscape::InRangeOfPlayer(CBasePlayer*)
 T CEnvSoundscape::InputDisable(inputdata_t&)
 T CEnvSoundscape::InputEnable(inputdata_t&)
 T CEnvSoundscape::InputToggleEnabled(inputdata_t&)
 T CEnvSoundscape::KeyValue(char const*, char const*)
 T CEnvSoundscape::Precache()
 T CEnvSoundscape::Spawn()
 T CEnvSoundscape::UpdateForPlayer(ss_update_t&)
 T CEnvSoundscape::UpdateTransmitState()
 T CEnvSoundscape::WriteAudioParamsTo(audioparams_t&)
 T CEnvSoundscape::~CEnvSoundscape()
 T CEnvSoundscapeProxy::Activate()
 T CEnvSoundscapeProxy::GetDataDescMap()
 T CEnvSoundscapeProxy::Precache()
 T CEnvSoundscapeProxy::~CEnvSoundscapeProxy()
 T CEnvSoundscapeTriggerable::DelegateEndTouch(CBaseEntity*)
 T CEnvSoundscapeTriggerable::DelegateStartTouch(CBaseEntity*)
 T CEnvSoundscapeTriggerable::GetDataDescMap()
 T CEnvSoundscapeTriggerable::Think()
 T CEnvSoundscapeTriggerable::~CEnvSoundscapeTriggerable()
 T CEnvSpark::GetDataDescMap()
 T CEnvSpark::InputSparkOnce(inputdata_t&)
 T CEnvSpark::InputStartSpark(inputdata_t&)
 T CEnvSpark::InputStopSpark(inputdata_t&)
 T CEnvSpark::InputToggleSpark(inputdata_t&)
 T CEnvSpark::Precache()
 T CEnvSpark::SparkThink()
 T CEnvSpark::Spawn()
 T CEnvSpark::StartSpark()
 T CEnvSpark::StopSpark()
 T CEnvSpark::~CEnvSpark()
 T CEnvSplash::GetDataDescMap()
 T CEnvSplash::InputSplash(inputdata_t&)
 T CEnvSplash::~CEnvSplash()
 T CEnvStarfield::GetDataDescMap()
 T CEnvStarfield::GetServerClass()
 T CEnvStarfield::InputSetDensity(inputdata_t&)
 T CEnvStarfield::InputTurnOff(inputdata_t&)
 T CEnvStarfield::InputTurnOn(inputdata_t&)
 T CEnvStarfield::Precache()
 T CEnvStarfield::Spawn()
 T CEnvStarfield::UpdateTransmitState()
 T CEnvStarfield::YouForgotToImplementOrDeclareServerClass()
 T CEnvStarfield::~CEnvStarfield()
 T CEnvTonemapController::GetDataDescMap()
 T CEnvTonemapController::GetServerClass()
 T CEnvTonemapController::InputBlendTonemapScale(inputdata_t&)
 T CEnvTonemapController::InputSetAutoExposureMax(inputdata_t&)
 T CEnvTonemapController::InputSetAutoExposureMin(inputdata_t&)
 T CEnvTonemapController::InputSetBloomScale(inputdata_t&)
 T CEnvTonemapController::InputSetBloomScaleRange(inputdata_t&)
 T CEnvTonemapController::InputSetTonemapRate(inputdata_t&)
 T CEnvTonemapController::InputSetTonemapScale(inputdata_t&)
 T CEnvTonemapController::InputUseDefaultAutoExposure(inputdata_t&)
 T CEnvTonemapController::InputUseDefaultBloomScale(inputdata_t&)
 T CEnvTonemapController::Spawn()
 T CEnvTonemapController::UpdateTonemapScaleBlend()
 T CEnvTonemapController::UpdateTransmitState()
 T CEnvTonemapController::YouForgotToImplementOrDeclareServerClass()
 T CEnvTonemapController::~CEnvTonemapController()
 T CEnvTracer::Activate()
 T CEnvTracer::GetDataDescMap()
 T CEnvTracer::Spawn()
 T CEnvTracer::TracerThink()
 T CEnvTracer::~CEnvTracer()
 T CEnvViewPunch::GetDataDescMap()
 T CEnvViewPunch::InputViewPunch(inputdata_t&)
 T CEnvViewPunch::Spawn()
 T CEnvViewPunch::~CEnvViewPunch()
 T CEnvWind::GetDataDescMap()
 T CEnvWind::GetServerClass()
 T CEnvWind::Precache()
 T CEnvWind::Spawn()
 T CEnvWind::UpdateTransmitState()
 T CEnvWind::WindThink()
 T CEnvWind::YouForgotToImplementOrDeclareServerClass()
 T CEnvWind::~CEnvWind()
 T CEnvWindShared::CEnvWindShared()
 T CEnvWindShared::Init(int, int, float, int, float)
 T CEnvWindShared::NetworkStateChanged()
 T CEnvWindShared::NetworkStateChanged(void*)
 T CEnvWindShared::WindThink(float)
 T CEnvWindShared::~CEnvWindShared()
 T CEnvZoom::GetDataDescMap()
 T CEnvZoom::InputUnZoom(inputdata_t&)
 T CEnvZoom::InputZoom(inputdata_t&)
 T CEnvZoom::~CEnvZoom()
 T CEventAbsoluteTag::CEventAbsoluteTag(CEventAbsoluteTag const&)
 T CEventAbsoluteTag::GetPercentage()
 T CEventAbsoluteTag::SetLinear(bool)
 T CEventAbsoluteTag::SetPercentage(float)
 T CEventAction::CEventAction(char const*)
 T CEventLog::CEventLog()
 T CEventLog::FireGameEvent(IGameEvent*)
 T CEventLog::Init()
 T CEventLog::PrintEvent(IGameEvent*)
 T CEventLog::PrintGameEvent(IGameEvent*)
 T CEventLog::PrintOtherEvent(IGameEvent*)
 T CEventLog::PrintPlayerEvent(IGameEvent*)
 T CEventLog::PrintTeamEvent(IGameEvent*)
 T CEventLog::Shutdown()
 T CEventLog::~CEventLog()
 T CEventQueue::AddEvent(CBaseEntity*, char const*, float, CBaseEntity*, CBaseEntity*, int)
 T CEventQueue::AddEvent(CBaseEntity*, char const*, variant_t, float, CBaseEntity*, CBaseEntity*, int)
 T CEventQueue::AddEvent(char const*, char const*, variant_t, float, CBaseEntity*, CBaseEntity*, int)
 T CEventQueue::CancelEventOn(CBaseEntity*, char const*)
 T CEventQueue::CancelEvents(CBaseEntity*)
 T CEventQueue::Clear()
 T CEventQueue::Dump()
 T CEventQueue::HasEventPending(CBaseEntity*, char const*)
 T CEventQueue::Init()
 T CEventQueue::Restore(IRestore&)
 T CEventQueue::ServiceEvents()
 T CEventQueue::~CEventQueue()
 T CEventQueueSaveLoadProxy::Restore(IRestore&)
 T CEventQueueSaveLoadProxy::Save(ISave&)
 T CEventQueueSaveLoadProxy::~CEventQueueSaveLoadProxy()
 T CEventQueue_SaveRestoreBlockHandler::GetBlockName()
 T CEventQueue_SaveRestoreBlockHandler::ReadRestoreHeaders(IRestore*)
 T CEventQueue_SaveRestoreBlockHandler::Restore(IRestore*, bool)
 T CEventQueue_SaveRestoreBlockHandler::Save(ISave*)
 T CEventQueue_SaveRestoreBlockHandler::WriteSaveHeaders(ISave*)
 T CEventRegister::CEventRegister()
 T CEventRegister::Init(CTimedEventMgr*, IEventRegisterCallback*)
 T CEventRegister::Reregister()
 T CEventRegister::~CEventRegister()
 T CEventsSaveDataOps::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CEventsSaveDataOps::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CEventsSaveDataOps::Parse(SaveRestoreFieldInfo_t const&, char const*)
 T CEventsSaveDataOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CEventsSaveDataOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CFastHeadcrab::AlertSound()
 T CFastHeadcrab::AttackSound()
 T CFastHeadcrab::BiteSound()
 T CFastHeadcrab::DeathSound(CTakeDamageInfo const&)
 T CFastHeadcrab::GetClassScheduleIdSpace()
 T CFastHeadcrab::GetDataDescMap()
 T CFastHeadcrab::GetSchedulingErrorName()
 T CFastHeadcrab::IdleSound()
 T CFastHeadcrab::InitCustomSchedules()
 T CFastHeadcrab::LoadedSchedules()
 T CFastHeadcrab::MaxYawSpeed()
 T CFastHeadcrab::PainSound(CTakeDamageInfo const&)
 T CFastHeadcrab::Precache()
 T CFastHeadcrab::PrescheduleThink()
 T CFastHeadcrab::QuerySeeEntity(CBaseEntity*, bool)
 T CFastHeadcrab::RunTask(Task_t const*)
 T CFastHeadcrab::SelectSchedule()
 T CFastHeadcrab::Spawn()
 T CFastHeadcrab::SquadSlotName(int)
 T CFastHeadcrab::StartTask(Task_t const*)
 T CFastHeadcrab::TranslateSchedule(int)
 T CFastHeadcrab::~CFastHeadcrab()
 T CFilterClass::GetDataDescMap()
 T CFilterClass::PassesFilterImpl(CBaseEntity*, CBaseEntity*)
 T CFilterClass::~CFilterClass()
 T CFilterCombineBall::GetDataDescMap()
 T CFilterCombineBall::PassesFilterImpl(CBaseEntity*, CBaseEntity*)
 T CFilterCombineBall::~CFilterCombineBall()
 T CFilterEnemy::GetDataDescMap()
 T CFilterEnemy::PassesDamageFilterImpl(CTakeDamageInfo const&)
 T CFilterEnemy::PassesFilterImpl(CBaseEntity*, CBaseEntity*)
 T CFilterEnemy::PassesMobbedFilter(CBaseEntity*, CBaseEntity*)
 T CFilterEnemy::PassesProximityFilter(CBaseEntity*, CBaseEntity*)
 T CFilterEnemy::~CFilterEnemy()
 T CFilterMassGreater::GetDataDescMap()
 T CFilterMassGreater::PassesFilterImpl(CBaseEntity*, CBaseEntity*)
 T CFilterMassGreater::~CFilterMassGreater()
 T CFilterMultiple::Activate()
 T CFilterMultiple::GetDataDescMap()
 T CFilterMultiple::PassesDamageFilterImpl(CTakeDamageInfo const&)
 T CFilterMultiple::PassesFilterImpl(CBaseEntity*, CBaseEntity*)
 T CFilterMultiple::~CFilterMultiple()
 T CFilterName::GetDataDescMap()
 T CFilterName::PassesFilterImpl(CBaseEntity*, CBaseEntity*)
 T CFilterName::~CFilterName()
 T CFire* _CreateEntityTemplate<CFire>(CFire*, char const*)
 T CFire::Activate()
 T CFire::AddHeat(float, bool)
 T CFire::BurnThink()
 T CFire::DrawDebugGeometryOverlays()
 T CFire::DrawDebugTextOverlays()
 T CFire::GetDataDescMap()
 T CFire::GoOut()
 T CFire::GoOutThink()
 T CFire::Init(Vector const&, float, float, float, int, int)
 T CFire::InputDisable(inputdata_t&)
 T CFire::InputEnable(inputdata_t&)
 T CFire::InputExtinguish(inputdata_t&)
 T CFire::InputExtinguishTemporary(inputdata_t&)
 T CFire::InputStartFire(inputdata_t&)
 T CFire::OnTakeDamage(CTakeDamageInfo const&)
 T CFire::Precache()
 T CFire::Spawn()
 T CFire::SpawnEffect(fireType_e, float)
 T CFire::Start()
 T CFire::StartFire()
 T CFire::Update(float)
 T CFire::UpdateOnRemove()
 T CFire::UpdateTransmitState()
 T CFire::~CFire()
 T CFireSmoke::CFireSmoke()
 T CFireSmoke::EnableGlow(int)
 T CFireSmoke::EnableSmoke(int)
 T CFireSmoke::EnableVisibleFromAbove(int)
 T CFireSmoke::GetDataDescMap()
 T CFireSmoke::GetServerClass()
 T CFireSmoke::Precache()
 T CFireSmoke::Spawn()
 T CFireSmoke::YouForgotToImplementOrDeclareServerClass()
 T CFireSmoke::~CFireSmoke()
 T CFireSphere::EnumElement(IHandleEntity*)
 T CFireTrail::CreateFireTrail()
 T CFireTrail::FollowEntity(CBaseEntity*, char const*)
 T CFireTrail::GetDataDescMap()
 T CFireTrail::GetServerClass()
 T CFireTrail::Precache()
 T CFireTrail::YouForgotToImplementOrDeclareServerClass()
 T CFireTrail::~CFireTrail()
 T CFish* _CreateEntityTemplate<CFish>(CFish*, char const*)
 T CFish::Avoid()
 T CFish::Event_Killed(CTakeDamageInfo const&)
 T CFish::FlockTo(CFish*, float)
 T CFish::GetDataDescMap()
 T CFish::GetServerClass()
 T CFish::Initialize(CFishPool*, unsigned int)
 T CFish::Spawn()
 T CFish::Touch(CBaseEntity*)
 T CFish::Update(float)
 T CFish::YouForgotToImplementOrDeclareServerClass()
 T CFish::~CFish()
 T CFishPool::CFishPool()
 T CFishPool::FireGameEvent(IGameEvent*)
 T CFishPool::GetDataDescMap()
 T CFishPool::KeyValue(char const*, char const*)
 T CFishPool::Spawn()
 T CFishPool::Update()
 T CFishPool::~CFishPool()
 T CFixedBitVecBase<255>::FindNextSetBit(int) const
 T CFlaggedEntitiesEnum::CFlaggedEntitiesEnum(CBaseEntity**, int, int)
 T CFlaggedEntitiesEnum::EnumElement(IHandleEntity*)
 T CFlare::Activate()
 T CFlare::CFlare()
 T CFlare::Classify()
 T CFlare::FlareBurnTouch(CBaseEntity*)
 T CFlare::FlareThink()
 T CFlare::FlareTouch(CBaseEntity*)
 T CFlare::GetDataDescMap()
 T CFlare::GetServerClass()
 T CFlare::InputDie(inputdata_t&)
 T CFlare::InputLaunch(inputdata_t&)
 T CFlare::InputStart(inputdata_t&)
 T CFlare::PhysicsSolidMaskForEntity() const
 T CFlare::Precache()
 T CFlare::Restore(IRestore&)
 T CFlare::Spawn()
 T CFlare::Start(float)
 T CFlare::StartBurnSound()
 T CFlare::YouForgotToImplementOrDeclareServerClass()
 T CFlare::~CFlare()
 T CFlexAnimationTrack::GetBoundedSample(int, bool&, int)
 T CFlexAnimationTrack::GetFlexControllerName()
 T CFlexAnimationTrack::GetFracIntensity(float, int)
 T CFlexAnimationTrack::GetIntensity(float, int)
 T CFlexAnimationTrack::GetIntensityInternal(float, int)
 T CFlexAnimationTrack::GetRawFlexControllerIndex(int)
 T CFlexAnimationTrack::IsComboType()
 T CFlexAnimationTrack::IsServerSide() const
 T CFlexAnimationTrack::IsTrackActive()
 T CFlexAnimationTrack::Resort(int)
 T CFlexAnimationTrack::SetFlexControllerIndex(LocalFlexController_t, int, int)
 T CFlexAnimationTrack::SetServerSide(bool)
 T CFlexAnimationTrack::~CFlexAnimationTrack()
 T CFlexCycler::GenericCyclerSpawn(char*, Vector, Vector)
 T CFlexCycler::GetDataDescMap()
 T CFlexCycler::IsAlive()
 T CFlexCycler::ObjectCaps()
 T CFlexCycler::OnTakeDamage(CTakeDamageInfo const&)
 T CFlexCycler::ProcessSceneEvents()
 T CFlexCycler::SetFlexTarget(LocalFlexController_t)
 T CFlexCycler::Spawn()
 T CFlexCycler::Think()
 T CFlexSceneFileManager::FindSceneFile(CBaseFlex*, char const*, bool)
 T CFlexSceneFileManager::Init()
 T CFlexSceneFileManager::Shutdown()
 T CFlexSceneFileManager::~CFlexSceneFileManager()
 T CFlextalkActor::GetDataDescMap()
 T CFlextalkActor::ProcessSceneEvents()
 T CFlextalkActor::SetFlexTarget(LocalFlexController_t, float)
 T CFlextalkActor::~CFlextalkActor()
 T CFmtStrN<1024, false>::CFmtStrN(char const*, ...)
 T CFmtStrN<1024, false>::InitQuietTruncation()
 T CFmtStrN<128, false>::CFmtStrN(char const*, ...)
 T CFmtStrN<128, false>::InitQuietTruncation()
 T CFmtStrN<256, false>::CFmtStrN(char const*, ...)
 T CFmtStrN<256, false>::InitQuietTruncation()
 T CFmtStrN<256, false>::sprintf(char const*, ...)
 T CFmtStrN<512, false>::CFmtStrN(char const*, ...)
 T CFmtStrN<512, false>::InitQuietTruncation()
 T CFogController::Activate()
 T CFogController::CFogController()
 T CFogController::DrawDebugTextOverlays()
 T CFogController::GetDataDescMap()
 T CFogController::GetServerClass()
 T CFogController::InputSetAngles(inputdata_t&)
 T CFogController::InputSetColor(inputdata_t&)
 T CFogController::InputSetColorLerpTo(inputdata_t&)
 T CFogController::InputSetColorSecondary(inputdata_t&)
 T CFogController::InputSetColorSecondaryLerpTo(inputdata_t&)
 T CFogController::InputSetEndDist(inputdata_t&)
 T CFogController::InputSetEndDistLerpTo(inputdata_t&)
 T CFogController::InputSetFarZ(inputdata_t&)
 T CFogController::InputSetMaxDensity(inputdata_t&)
 T CFogController::InputSetStartDist(inputdata_t&)
 T CFogController::InputSetStartDistLerpTo(inputdata_t&)
 T CFogController::InputStartFogTransition(inputdata_t&)
 T CFogController::InputTurnOff(inputdata_t&)
 T CFogController::InputTurnOn(inputdata_t&)
 T CFogController::NetworkVar_m_fog::NetworkStateChanged()
 T CFogController::NetworkVar_m_fog::NetworkStateChanged(void*)
 T CFogController::SetLerpValues()
 T CFogController::Spawn()
 T CFogController::UpdateTransmitState()
 T CFogController::YouForgotToImplementOrDeclareServerClass()
 T CFogController::~CFogController()
 T CFogSystem::LevelInitPostEntity()
 T CFogSystem::LevelInitPreEntity()
 T CFogSystem::~CFogSystem()
 T CFourWheelServerVehicle::CFourWheelServerVehicle()
 T CFourWheelServerVehicle::GetFourWheelVehicle()
 T CFourWheelServerVehicle::GetVehicleController()
 T CFourWheelServerVehicle::GetVehicleParams()
 T CFourWheelServerVehicle::GetVehicleViewPosition(int, Vector*, QAngle*, float*)
 T CFourWheelServerVehicle::IsPassengerEntering()
 T CFourWheelServerVehicle::IsPassengerExiting()
 T CFourWheelServerVehicle::IsVehicleBodyInWater()
 T CFourWheelServerVehicle::IsVehicleUpright()
 T CFourWheelServerVehicle::NPC_DriveVehicle()
 T CFourWheelServerVehicle::NPC_SetDriver(CNPC_VehicleDriver*)
 T CFourWheelServerVehicle::SetVehicle(CBaseEntity*)
 T CFourWheelServerVehicle::~CFourWheelServerVehicle()
 T CFourWheelVehiclePhysics::CFourWheelVehiclePhysics(CBaseAnimating*)
 T CFourWheelVehiclePhysics::CalcWheelData(vehicleparams_t&)
 T CFourWheelVehiclePhysics::DrawDebugGeometryOverlays()
 T CFourWheelVehiclePhysics::DrawDebugTextOverlays(int)
 T CFourWheelVehiclePhysics::GetDataDescMap()
 T CFourWheelVehiclePhysics::GetHLSpeed() const
 T CFourWheelVehiclePhysics::GetSteering() const
 T CFourWheelVehiclePhysics::Initialize(char const*, unsigned int)
 T CFourWheelVehiclePhysics::InitializePoseParameters()
 T CFourWheelVehiclePhysics::ParseVehicleScript(char const*, solid_t&, vehicleparams_t&)
 T CFourWheelVehiclePhysics::PlaceWheelDust(int, bool)
 T CFourWheelVehiclePhysics::ReleaseHandbrake()
 T CFourWheelVehiclePhysics::SetAction(float)
 T CFourWheelVehiclePhysics::SetDisableEngine(bool)
 T CFourWheelVehiclePhysics::SetHandbrake(bool)
 T CFourWheelVehiclePhysics::SetHasBrakePedal(bool)
 T CFourWheelVehiclePhysics::SetSteering(float, float)
 T CFourWheelVehiclePhysics::SetThrottle(float)
 T CFourWheelVehiclePhysics::Spawn()
 T CFourWheelVehiclePhysics::SteeringTurn(float, vehicleparams_t const&, bool, bool, bool)
 T CFourWheelVehiclePhysics::Teleport(matrix3x4_t&)
 T CFourWheelVehiclePhysics::Think()
 T CFourWheelVehiclePhysics::TurnOff()
 T CFourWheelVehiclePhysics::TurnOn()
 T CFourWheelVehiclePhysics::UpdateDriverControls(CUserCmd*, float)
 T CFourWheelVehiclePhysics::VPhysicsGetObjectList(IPhysicsObject**, int)
 T CFourWheelVehiclePhysics::VPhysicsUpdate(IPhysicsObject*)
 T CFourWheelVehiclePhysics::~CFourWheelVehiclePhysics()
 T CFuncAreaPortalBase::CFuncAreaPortalBase()
 T CFuncAreaPortalBase::GetDataDescMap()
 T CFuncAreaPortalBase::ObjectCaps()
 T CFuncAreaPortalBase::UpdateVisibility(Vector const&, float, bool&)
 T CFuncAreaPortalBase::~CFuncAreaPortalBase()
 T CFuncAreaPortalWindow::Activate()
 T CFuncAreaPortalWindow::CFuncAreaPortalWindow()
 T CFuncAreaPortalWindow::GetDataDescMap()
 T CFuncAreaPortalWindow::GetServerClass()
 T CFuncAreaPortalWindow::InputSetFadeEndDistance(inputdata_t&)
 T CFuncAreaPortalWindow::InputSetFadeStartDistance(inputdata_t&)
 T CFuncAreaPortalWindow::Spawn()
 T CFuncAreaPortalWindow::UpdateVisibility(Vector const&, float, bool&)
 T CFuncAreaPortalWindow::YouForgotToImplementOrDeclareServerClass()
 T CFuncAreaPortalWindow::~CFuncAreaPortalWindow()
 T CFuncBrush::CreateVPhysics()
 T CFuncBrush::DrawDebugTextOverlays()
 T CFuncBrush::GetDataDescMap()
 T CFuncBrush::InputSetExcluded(inputdata_t&)
 T CFuncBrush::InputSetInvert(inputdata_t&)
 T CFuncBrush::InputToggle(inputdata_t&)
 T CFuncBrush::InputTurnOff(inputdata_t&)
 T CFuncBrush::InputTurnOn(inputdata_t&)
 T CFuncBrush::IsOn() const
 T CFuncBrush::ObjectCaps()
 T CFuncBrush::Spawn()
 T CFuncBrush::TurnOff()
 T CFuncBrush::TurnOn()
 T CFuncBrush::~CFuncBrush()
 T CFuncCombineBallSpawner::BallGrabbed(CBaseEntity*)
 T CFuncCombineBallSpawner::BallThink()
 T CFuncCombineBallSpawner::ChoosePointInBox(Vector*)
 T CFuncCombineBallSpawner::GetDataDescMap()
 T CFuncCombineBallSpawner::GrabBallTouch(CBaseEntity*)
 T CFuncCombineBallSpawner::InputDisable(inputdata_t&)
 T CFuncCombineBallSpawner::InputEnable(inputdata_t&)
 T CFuncCombineBallSpawner::Precache()
 T CFuncCombineBallSpawner::RespawnBallPostExplosion()
 T CFuncCombineBallSpawner::Spawn()
 T CFuncCombineBallSpawner::SpawnBall()
 T CFuncCombineBallSpawner::~CFuncCombineBallSpawner()
 T CFuncConveyor::CFuncConveyor()
 T CFuncConveyor::GetDataDescMap()
 T CFuncConveyor::GetGroundVelocityToApply(Vector&)
 T CFuncConveyor::GetServerClass()
 T CFuncConveyor::InputSetSpeed(inputdata_t&)
 T CFuncConveyor::InputToggleDirection(inputdata_t&)
 T CFuncConveyor::Spawn()
 T CFuncConveyor::UpdateSpeed(float)
 T CFuncConveyor::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CFuncConveyor::YouForgotToImplementOrDeclareServerClass()
 T CFuncConveyor::~CFuncConveyor()
 T CFuncIllusionary::Spawn()
 T CFuncIllusionary::~CFuncIllusionary()
 T CFuncLadder::Activate()
 T CFuncLadder::CFuncLadder()
 T CFuncLadder::ComputeLadderDir(Vector&)
 T CFuncLadder::DontGetOnLadder() const
 T CFuncLadder::DrawDebugGeometryOverlays()
 T CFuncLadder::FindNearbyDismountPoints(Vector const&, float, CUtlVector<CHandle<CInfoLadderDismount>, CUtlMemory<CHandle<CInfoLadderDismount>, int> >&)
 T CFuncLadder::GetBottomPosition(Vector&)
 T CFuncLadder::GetDataDescMap()
 T CFuncLadder::GetDismount(int)
 T CFuncLadder::GetDismountCount() const
 T CFuncLadder::GetLadder(int)
 T CFuncLadder::GetLadderCount()
 T CFuncLadder::GetServerClass()
 T CFuncLadder::GetTopPosition(Vector&)
 T CFuncLadder::InputDisable(inputdata_t&)
 T CFuncLadder::InputEnable(inputdata_t&)
 T CFuncLadder::PlayerGotOff(CBasePlayer*)
 T CFuncLadder::PlayerGotOn(CBasePlayer*)
 T CFuncLadder::SearchForDismountPoints()
 T CFuncLadder::SetEndPoints(Vector const&, Vector const&)
 T CFuncLadder::Spawn()
 T CFuncLadder::UpdateTransmitState()
 T CFuncLadder::YouForgotToImplementOrDeclareServerClass()
 T CFuncLadder::~CFuncLadder()
 T CFuncLadderEndPoint::Activate()
 T CFuncLadderEndPoint::Validate()
 T CFuncLadderEndPoint::~CFuncLadderEndPoint()
 T CFuncMonitor::Activate()
 T CFuncMonitor::GetDataDescMap()
 T CFuncMonitor::GetServerClass()
 T CFuncMonitor::InputSetCamera(inputdata_t&)
 T CFuncMonitor::SetCameraByName(char const*)
 T CFuncMonitor::UpdateOnRemove()
 T CFuncMonitor::YouForgotToImplementOrDeclareServerClass()
 T CFuncMonitor::~CFuncMonitor()
 T CFuncMoveLinear::Blocked(CBaseEntity*)
 T CFuncMoveLinear::CreateVPhysics()
 T CFuncMoveLinear::DrawDebugTextOverlays()
 T CFuncMoveLinear::GetDataDescMap()
 T CFuncMoveLinear::InputClose(inputdata_t&)
 T CFuncMoveLinear::InputOpen(inputdata_t&)
 T CFuncMoveLinear::InputSetPosition(inputdata_t&)
 T CFuncMoveLinear::InputSetSpeed(inputdata_t&)
 T CFuncMoveLinear::MoveDone()
 T CFuncMoveLinear::MoveTo(Vector, float)
 T CFuncMoveLinear::Precache()
 T CFuncMoveLinear::SetPosition(float)
 T CFuncMoveLinear::ShouldSavePhysics()
 T CFuncMoveLinear::Spawn()
 T CFuncMoveLinear::StopMoveSound()
 T CFuncMoveLinear::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CFuncMoveLinear::~CFuncMoveLinear()
 T CFuncOccluder::CFuncOccluder()
 T CFuncOccluder::GetDataDescMap()
 T CFuncOccluder::GetServerClass()
 T CFuncOccluder::InputActivate(inputdata_t&)
 T CFuncOccluder::InputDeactivate(inputdata_t&)
 T CFuncOccluder::InputToggle(inputdata_t&)
 T CFuncOccluder::Spawn()
 T CFuncOccluder::UpdateTransmitState()
 T CFuncOccluder::YouForgotToImplementOrDeclareServerClass()
 T CFuncOccluder::~CFuncOccluder()
 T CFuncPlat::Blocked(CBaseEntity*)
 T CFuncPlat::CallGoDown()
 T CFuncPlat::CallHitBottom()
 T CFuncPlat::CallHitTop()
 T CFuncPlat::CreateVPhysics()
 T CFuncPlat::GetDataDescMap()
 T CFuncPlat::GoDown()
 T CFuncPlat::GoUp()
 T CFuncPlat::HitBottom()
 T CFuncPlat::HitTop()
 T CFuncPlat::InputGoDown(inputdata_t&)
 T CFuncPlat::InputGoUp(inputdata_t&)
 T CFuncPlat::InputToggle(inputdata_t&)
 T CFuncPlat::PlatUse(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CFuncPlat::Precache()
 T CFuncPlat::Setup()
 T CFuncPlat::Spawn()
 T CFuncPlat::~CFuncPlat()
 T CFuncPlatRot::GetDataDescMap()
 T CFuncPlatRot::GoDown()
 T CFuncPlatRot::GoUp()
 T CFuncPlatRot::HitBottom()
 T CFuncPlatRot::HitTop()
 T CFuncPlatRot::RotMove(QAngle&, float)
 T CFuncPlatRot::SetupRotation()
 T CFuncPlatRot::Spawn()
 T CFuncPlatRot::~CFuncPlatRot()
 T CFuncReflectiveGlass::GetDataDescMap()
 T CFuncReflectiveGlass::GetServerClass()
 T CFuncReflectiveGlass::YouForgotToImplementOrDeclareServerClass()
 T CFuncReflectiveGlass::~CFuncReflectiveGlass()
 T CFuncRotating::Blocked(CBaseEntity*)
 T CFuncRotating::CreateVPhysics()
 T CFuncRotating::DrawDebugTextOverlays()
 T CFuncRotating::GetDataDescMap()
 T CFuncRotating::GetServerClass()
 T CFuncRotating::HurtTouch(CBaseEntity*)
 T CFuncRotating::InputReverse(inputdata_t&)
 T CFuncRotating::InputSetSpeed(inputdata_t&)
 T CFuncRotating::InputStart(inputdata_t&)
 T CFuncRotating::InputStartBackward(inputdata_t&)
 T CFuncRotating::InputStartForward(inputdata_t&)
 T CFuncRotating::InputStop(inputdata_t&)
 T CFuncRotating::InputStopAtStartPos(inputdata_t&)
 T CFuncRotating::InputToggle(inputdata_t&)
 T CFuncRotating::KeyValue(char const*, char const*)
 T CFuncRotating::Precache()
 T CFuncRotating::RampPitchVol()
 T CFuncRotating::ReverseMove()
 T CFuncRotating::RotateMove()
 T CFuncRotating::RotatingUse(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CFuncRotating::SetTargetSpeed(float)
 T CFuncRotating::Spawn()
 T CFuncRotating::SpinDownMove()
 T CFuncRotating::SpinUpMove()
 T CFuncRotating::UpdateSpeed(float)
 T CFuncRotating::YouForgotToImplementOrDeclareServerClass()
 T CFuncRotating::~CFuncRotating()
 T CFuncSmokeVolume::Activate()
 T CFuncSmokeVolume::CFuncSmokeVolume()
 T CFuncSmokeVolume::GetDataDescMap()
 T CFuncSmokeVolume::GetServerClass()
 T CFuncSmokeVolume::Spawn()
 T CFuncSmokeVolume::YouForgotToImplementOrDeclareServerClass()
 T CFuncSmokeVolume::~CFuncSmokeVolume()
 T CFuncTank::Activate()
 T CFuncTank::AimBarrelAt(Vector const&)
 T CFuncTank::AimFuncTankAtTarget()
 T CFuncTank::CalcNPCEnemyTarget(Vector*)
 T CFuncTank::CalcPlayerCrosshairTarget(Vector*)
 T CFuncTank::ComputeLeadingPosition(Vector const&, CBaseEntity*, Vector*)
 T CFuncTank::ControllerPostFrame()
 T CFuncTank::CreateVPhysics()
 T CFuncTank::DoMuzzleFlash()
 T CFuncTank::DrawDebugGeometryOverlays()
 T CFuncTank::DrawDebugTextOverlays()
 T CFuncTank::Fire(int, Vector const&, Vector const&, CBaseEntity*, bool)
 T CFuncTank::FiringSequence(Vector const&, Vector const&, CBaseEntity*)
 T CFuncTank::FuncTankPostThink()
 T CFuncTank::FuncTankPreThink()
 T CFuncTank::GetController()
 T CFuncTank::GetDataDescMap()
 T CFuncTank::GetShotSpeed()
 T CFuncTank::GetTracerType()
 T CFuncTank::HasLOSTo(CBaseEntity*)
 T CFuncTank::InputActivate(inputdata_t&)
 T CFuncTank::InputClearTargetEntity(inputdata_t&)
 T CFuncTank::InputDeactivate(inputdata_t&)
 T CFuncTank::InputFindNPCToManTank(inputdata_t&)
 T CFuncTank::InputForceNPCOff(inputdata_t&)
 T CFuncTank::InputSetDamage(inputdata_t&)
 T CFuncTank::InputSetFireRate(inputdata_t&)
 T CFuncTank::InputSetMaxRange(inputdata_t&)
 T CFuncTank::InputSetTargetDir(inputdata_t&)
 T CFuncTank::InputSetTargetEntity(inputdata_t&)
 T CFuncTank::InputSetTargetEntityName(inputdata_t&)
 T CFuncTank::InputSetTargetPosition(inputdata_t&)
 T CFuncTank::InputStartFindingNPCs(inputdata_t&)
 T CFuncTank::InputStopFindingNPCs(inputdata_t&)
 T CFuncTank::IsEntityInViewCone(CBaseEntity*)
 T CFuncTank::KeyValue(char const*, char const*)
 T CFuncTank::NPC_FindController()
 T CFuncTank::NPC_FindManPoint(Vector&)
 T CFuncTank::NPC_Fire()
 T CFuncTank::NPC_HasEnemy()
 T CFuncTank::NPC_InterruptController()
 T CFuncTank::NPC_InterruptRoute()
 T CFuncTank::NPC_JustSawPlayer(CBaseEntity*)
 T CFuncTank::ObjectCaps()
 T CFuncTank::OnControls(CBaseEntity*)
 T CFuncTank::OnStartControlled()
 T CFuncTank::OnStopControlled()
 T CFuncTank::PhysicsSimulate()
 T CFuncTank::Precache()
 T CFuncTank::RotateTankToAngles(QAngle const&, float*, float*)
 T CFuncTank::SetNextAttack(float)
 T CFuncTank::Spawn()
 T CFuncTank::StartControl(CBaseCombatCharacter*)
 T CFuncTank::StartRotSound()
 T CFuncTank::StopControl()
 T CFuncTank::StopRotSound()
 T CFuncTank::TankActivate()
 T CFuncTank::TankDeactivate()
 T CFuncTank::TankTrace(Vector const&, Vector const&, Vector const&, CGameTrace&)
 T CFuncTank::Think()
 T CFuncTank::TrackTarget()
 T CFuncTank::UpdateOnRemove()
 T CFuncTank::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CFuncTank::WorldBarrelPosition()
 T CFuncTank::~CFuncTank()
 T CFuncTankAPCRocket::Fire(int, Vector const&, Vector const&, CBaseEntity*, bool)
 T CFuncTankAPCRocket::FireDying(Vector const&)
 T CFuncTankAPCRocket::GetDataDescMap()
 T CFuncTankAPCRocket::GetShotSpeed()
 T CFuncTankAPCRocket::InputDeathVolley(inputdata_t&)
 T CFuncTankAPCRocket::Precache()
 T CFuncTankAPCRocket::Spawn()
 T CFuncTankAPCRocket::Think()
 T CFuncTankAPCRocket::UpdateOnRemove()
 T CFuncTankAPCRocket::~CFuncTankAPCRocket()
 T CFuncTankAirboatGun::Activate()
 T CFuncTankAirboatGun::ControllerPostFrame()
 T CFuncTankAirboatGun::CreateSounds()
 T CFuncTankAirboatGun::DoImpactEffect(CGameTrace&, int)
 T CFuncTankAirboatGun::DoMuzzleFlash()
 T CFuncTankAirboatGun::Fire(int, Vector const&, Vector const&, CBaseEntity*, bool)
 T CFuncTankAirboatGun::GetDataDescMap()
 T CFuncTankAirboatGun::GetTracerType()
 T CFuncTankAirboatGun::OnStopControlled()
 T CFuncTankAirboatGun::Precache()
 T CFuncTankAirboatGun::Spawn()
 T CFuncTankAirboatGun::WorldBarrelPosition()
 T CFuncTankAirboatGun::~CFuncTankAirboatGun()
 T CFuncTankCombineCannon::CreateBeam()
 T CFuncTankCombineCannon::Fire(int, Vector const&, Vector const&, CBaseEntity*, bool)
 T CFuncTankCombineCannon::FuncTankPostThink()
 T CFuncTankCombineCannon::GetDataDescMap()
 T CFuncTankCombineCannon::InputClearTargetEntity(inputdata_t&)
 T CFuncTankCombineCannon::InputDisableHarrass(inputdata_t&)
 T CFuncTankCombineCannon::InputEnableHarrass(inputdata_t&)
 T CFuncTankCombineCannon::InputSetTargetEntity(inputdata_t&)
 T CFuncTankCombineCannon::MakeTracer(Vector const&, CGameTrace const&, int)
 T CFuncTankCombineCannon::Precache()
 T CFuncTankCombineCannon::Spawn()
 T CFuncTankCombineCannon::TankDeactivate()
 T CFuncTankCombineCannon::UpdateBeamThink()
 T CFuncTankCombineCannon::~CFuncTankCombineCannon()
 T CFuncTankGun::Fire(int, Vector const&, Vector const&, CBaseEntity*, bool)
 T CFuncTankGun::~CFuncTankGun()
 T CFuncTankLaser::Activate()
 T CFuncTankLaser::Fire(int, Vector const&, Vector const&, CBaseEntity*, bool)
 T CFuncTankLaser::GetDataDescMap()
 T CFuncTankLaser::GetLaser()
 T CFuncTankLaser::Think()
 T CFuncTankLaser::~CFuncTankLaser()
 T CFuncTankMortar::Fire(int, Vector const&, Vector const&, CBaseEntity*, bool)
 T CFuncTankMortar::FiringSequence(Vector const&, Vector const&, CBaseEntity*)
 T CFuncTankMortar::GetDataDescMap()
 T CFuncTankMortar::InputFireAtWill(inputdata_t&)
 T CFuncTankMortar::InputShootGun(inputdata_t&)
 T CFuncTankMortar::Precache()
 T CFuncTankMortar::SetNextAttack(float)
 T CFuncTankMortar::ShootGun()
 T CFuncTankMortar::Spawn()
 T CFuncTankMortar::~CFuncTankMortar()
 T CFuncTankPhysCannister::Fire(int, Vector const&, Vector const&, CBaseEntity*, bool)
 T CFuncTankPhysCannister::GetDataDescMap()
 T CFuncTankPhysCannister::~CFuncTankPhysCannister()
 T CFuncTankPulseLaser::Fire(int, Vector const&, Vector const&, CBaseEntity*, bool)
 T CFuncTankPulseLaser::GetDataDescMap()
 T CFuncTankPulseLaser::Precache()
 T CFuncTankPulseLaser::~CFuncTankPulseLaser()
 T CFuncTankRocket::Fire(int, Vector const&, Vector const&, CBaseEntity*, bool)
 T CFuncTankRocket::GetDataDescMap()
 T CFuncTankRocket::GetShotSpeed()
 T CFuncTankRocket::Precache()
 T CFuncTankRocket::~CFuncTankRocket()
 T CFuncTankTrain::Blocked(CBaseEntity*)
 T CFuncTankTrain::Event_Killed(CTakeDamageInfo const&)
 T CFuncTankTrain::GetDataDescMap()
 T CFuncTankTrain::OnTakeDamage(CTakeDamageInfo const&)
 T CFuncTankTrain::Spawn()
 T CFuncTankTrain::~CFuncTankTrain()
 T CFuncTrackAuto::GetDataDescMap()
 T CFuncTrackAuto::TriggerTrackChange(inputdata_t&)
 T CFuncTrackAuto::UpdateAutoTargets(int)
 T CFuncTrackAuto::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CFuncTrackAuto::~CFuncTrackAuto()
 T CFuncTrackChange::EvaluateTrain(CPathTrack*)
 T CFuncTrackChange::Find()
 T CFuncTrackChange::GetDataDescMap()
 T CFuncTrackChange::GoDown()
 T CFuncTrackChange::GoUp()
 T CFuncTrackChange::HitBottom()
 T CFuncTrackChange::HitTop()
 T CFuncTrackChange::IsTogglePlat()
 T CFuncTrackChange::Precache()
 T CFuncTrackChange::Spawn()
 T CFuncTrackChange::Touch(CBaseEntity*)
 T CFuncTrackChange::UpdateAutoTargets(int)
 T CFuncTrackChange::UpdateTrain(QAngle&)
 T CFuncTrackChange::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CFuncTrackChange::~CFuncTrackChange()
 T CFuncTrackTrain* _CreateEntityTemplate<CFuncTrackTrain>(CFuncTrackTrain*, char const*)
 T CFuncTrackTrain::ArriveAtNode(CPathTrack*)
 T CFuncTrackTrain::Blocked(CBaseEntity*)
 T CFuncTrackTrain::CFuncTrackTrain()
 T CFuncTrackTrain::CreateVPhysics()
 T CFuncTrackTrain::DeadEnd()
 T CFuncTrackTrain::DoUpdateOrientation(QAngle const&, QAngle const&, float)
 T CFuncTrackTrain::DrawDebugGeometryOverlays()
 T CFuncTrackTrain::DrawDebugTextOverlays()
 T CFuncTrackTrain::Find()
 T CFuncTrackTrain::GetDataDescMap()
 T CFuncTrackTrain::GetServerClass()
 T CFuncTrackTrain::InputResume(inputdata_t&)
 T CFuncTrackTrain::InputReverse(inputdata_t&)
 T CFuncTrackTrain::InputSetSpeed(inputdata_t&)
 T CFuncTrackTrain::InputSetSpeedDir(inputdata_t&)
 T CFuncTrackTrain::InputSetSpeedDirAccel(inputdata_t&)
 T CFuncTrackTrain::InputSetSpeedForwardModifier(inputdata_t&)
 T CFuncTrackTrain::InputSetSpeedReal(inputdata_t&)
 T CFuncTrackTrain::InputStartBackward(inputdata_t&)
 T CFuncTrackTrain::InputStartForward(inputdata_t&)
 T CFuncTrackTrain::InputStop(inputdata_t&)
 T CFuncTrackTrain::InputTeleportToPathTrack(inputdata_t&)
 T CFuncTrackTrain::InputToggle(inputdata_t&)
 T CFuncTrackTrain::IsBaseTrain() const
 T CFuncTrackTrain::KeyValue(char const*, char const*)
 T CFuncTrackTrain::MoveDone()
 T CFuncTrackTrain::NearestPath()
 T CFuncTrackTrain::Next()
 T CFuncTrackTrain::ObjectCaps()
 T CFuncTrackTrain::OnControls(CBaseEntity*)
 T CFuncTrackTrain::OnRestore()
 T CFuncTrackTrain::OnTakeDamage(CTakeDamageInfo const&)
 T CFuncTrackTrain::Precache()
 T CFuncTrackTrain::SetDirForward(bool)
 T CFuncTrackTrain::SetSpeed(float, bool)
 T CFuncTrackTrain::SetSpeedDirAccel(float)
 T CFuncTrackTrain::SetSpeedForwardModifier(float)
 T CFuncTrackTrain::SoundStop()
 T CFuncTrackTrain::SoundUpdate()
 T CFuncTrackTrain::Spawn()
 T CFuncTrackTrain::TeleportToPathTrack(CPathTrack*)
 T CFuncTrackTrain::UpdateOnRemove()
 T CFuncTrackTrain::UpdateOrientationAtPathTracks(CPathTrack*, CPathTrack*, Vector const&, float)
 T CFuncTrackTrain::UpdateOrientationBlend(TrainOrientationType_t, CPathTrack*, CPathTrack*, Vector const&, float)
 T CFuncTrackTrain::UpdateTrainVelocity(CPathTrack*, CPathTrack*, Vector const&, float)
 T CFuncTrackTrain::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CFuncTrackTrain::YouForgotToImplementOrDeclareServerClass()
 T CFuncTrackTrain::~CFuncTrackTrain()
 T CFuncTrain::Activate()
 T CFuncTrain::Blocked(CBaseEntity*)
 T CFuncTrain::GetDataDescMap()
 T CFuncTrain::InputStart(inputdata_t&)
 T CFuncTrain::InputStop(inputdata_t&)
 T CFuncTrain::InputToggle(inputdata_t&)
 T CFuncTrain::Next()
 T CFuncTrain::OnRestore()
 T CFuncTrain::Precache()
 T CFuncTrain::SetupTarget()
 T CFuncTrain::Spawn()
 T CFuncTrain::Start()
 T CFuncTrain::Stop()
 T CFuncTrain::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CFuncTrain::Wait()
 T CFuncTrain::~CFuncTrain()
 T CFuncTrainControls::Find()
 T CFuncTrainControls::GetDataDescMap()
 T CFuncTrainControls::Spawn()
 T CFuncTrainControls::~CFuncTrainControls()
 T CFuncVPhysicsClip::Activate()
 T CFuncVPhysicsClip::CreateVPhysics()
 T CFuncVPhysicsClip::ForceVPhysicsCollide(CBaseEntity*)
 T CFuncVPhysicsClip::GetDataDescMap()
 T CFuncVPhysicsClip::InputDisable(inputdata_t&)
 T CFuncVPhysicsClip::InputEnable(inputdata_t&)
 T CFuncVPhysicsClip::Spawn()
 T CFuncVPhysicsClip::~CFuncVPhysicsClip()
 T CFuncVehicleClip::CreateVPhysics()
 T CFuncVehicleClip::GetDataDescMap()
 T CFuncVehicleClip::InputDisable(inputdata_t&)
 T CFuncVehicleClip::InputEnable(inputdata_t&)
 T CFuncVehicleClip::Spawn()
 T CFuncVehicleClip::~CFuncVehicleClip()
 T CFuncWall::CreateVPhysics()
 T CFuncWall::GetDataDescMap()
 T CFuncWall::Spawn()
 T CFuncWall::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CFuncWall::~CFuncWall()
 T CFuncWallToggle::GetDataDescMap()
 T CFuncWallToggle::InputToggle(inputdata_t&)
 T CFuncWallToggle::Spawn()
 T CFuncWallToggle::TurnOn()
 T CFuncWallToggle::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CFuncWallToggle::~CFuncWallToggle()
 T CFunc_Dust::Activate()
 T CFunc_Dust::CFunc_Dust()
 T CFunc_Dust::GetDataDescMap()
 T CFunc_Dust::GetServerClass()
 T CFunc_Dust::InputTurnOff(inputdata_t&)
 T CFunc_Dust::InputTurnOn(inputdata_t&)
 T CFunc_Dust::KeyValue(char const*, char const*)
 T CFunc_Dust::Precache()
 T CFunc_Dust::Spawn()
 T CFunc_Dust::YouForgotToImplementOrDeclareServerClass()
 T CFunc_Dust::~CFunc_Dust()
 T CFunc_DustCloud::~CFunc_DustCloud()
 T CFunc_DustMotes* _CreateEntityTemplate<CFunc_DustMotes>(CFunc_DustMotes*, char const*)
 T CFunc_DustMotes::~CFunc_DustMotes()
 T CFunc_LOD::Activate()
 T CFunc_LOD::CreateVPhysics()
 T CFunc_LOD::GetDataDescMap()
 T CFunc_LOD::GetServerClass()
 T CFunc_LOD::KeyValue(char const*, char const*)
 T CFunc_LOD::Spawn()
 T CFunc_LOD::YouForgotToImplementOrDeclareServerClass()
 T CFunc_LOD::~CFunc_LOD()
 T CFunctor2<void (*)(CFunctor**, unsigned int), CFunctor**, int, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >::operator()()
 T CFunctor2<void (*)(CFunctor**, unsigned int), CFunctor**, int, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >::~CFunctor2()
 T CFunctor2<void (*)(IPhysicsObject*, Vector const&), IPhysicsObject*, Vector, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >::operator()()
 T CFunctor2<void (*)(IPhysicsObject*, Vector const&), IPhysicsObject*, Vector, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >::~CFunctor2()
 T CFunctor3<void (*)(IPhysicsObject*, Vector const&, Vector const&), IPhysicsObject*, Vector, Vector, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >::operator()()
 T CFunctor3<void (*)(IPhysicsObject*, Vector const&, Vector const&), IPhysicsObject*, Vector, Vector, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >::~CFunctor3()
 T CFunctor4<CBaseEntity* (*)(CBaseEntity*, CBaseEntity*, bool, float), CBaseEntity*, CBaseEntity*, bool, float, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >::operator()()
 T CFunctor4<CBaseEntity* (*)(CBaseEntity*, CBaseEntity*, bool, float), CBaseEntity*, CBaseEntity*, bool, float, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >::~CFunctor4()
 T CGameDLL_ConVarAccessor::RegisterConCommandBase(ConCommandBase*)
 T CGameEnd::GetDataDescMap()
 T CGameEnd::InputGameEnd(inputdata_t&)
 T CGameEnd::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CGameEnd::~CGameEnd()
 T CGameEventListener::~CGameEventListener()
 T CGameGibManager::Activate()
 T CGameGibManager::GetDataDescMap()
 T CGameGibManager::InputSetMaxPieces(inputdata_t&)
 T CGameGibManager::InputSetMaxPiecesDX8(inputdata_t&)
 T CGameGibManager::~CGameGibManager()
 T CGameMovement::Accelerate(Vector&, float, float)
 T CGameMovement::AddGravity()
 T CGameMovement::AirAccelerate(Vector&, float, float)
 T CGameMovement::AirMove()
 T CGameMovement::CGameMovement()
 T CGameMovement::CalcRoll(QAngle const&, Vector const&, float, float)
 T CGameMovement::CanAccelerate()
 T CGameMovement::CanUnDuckJump(CGameTrace&)
 T CGameMovement::CanUnduck()
 T CGameMovement::CategorizePosition()
 T CGameMovement::CheckFalling()
 T CGameMovement::CheckJumpButton()
 T CGameMovement::CheckParameters()
 T CGameMovement::CheckStuck()
 T CGameMovement::CheckVelocity()
 T CGameMovement::CheckWater()
 T CGameMovement::CheckWaterJump()
 T CGameMovement::ClimbSpeed() const
 T CGameMovement::ComputeConstraintSpeedFactor()
 T CGameMovement::DecayPunchAngle()
 T CGameMovement::DiffPrint(char const*, ...)
 T CGameMovement::Duck()
 T CGameMovement::FinishDuck()
 T CGameMovement::FinishTrackPredictionErrors(CBasePlayer*)
 T CGameMovement::FinishUnDuck()
 T CGameMovement::FinishUnDuckJump(CGameTrace&)
 T CGameMovement::Friction()
 T CGameMovement::FullLadderMove()
 T CGameMovement::FullNoClipMove(float, float)
 T CGameMovement::FullObserverMove()
 T CGameMovement::FullTossMove()
 T CGameMovement::FullWalkMove()
 T CGameMovement::GameHasLadders() const
 T CGameMovement::GetAirSpeedCap()
 T CGameMovement::GetCheckInterval(CGameMovement::IntervalType_t)
 T CGameMovement::GetPlayerMaxs() const
 T CGameMovement::GetPlayerMaxs(bool) const
 T CGameMovement::GetPlayerMins() const
 T CGameMovement::GetPlayerMins(bool) const
 T CGameMovement::GetPlayerViewOffset(bool) const
 T CGameMovement::GetPointContentsCached(Vector const&, int)
 T CGameMovement::HandleDuckingSpeedCrop()
 T CGameMovement::LadderDistance() const
 T CGameMovement::LadderLateralMultiplier() const
 T CGameMovement::LadderMask() const
 T CGameMovement::LadderMove()
 T CGameMovement::OnJump(float)
 T CGameMovement::OnLadder(CGameTrace&)
 T CGameMovement::OnLand(float)
 T CGameMovement::OnTryPlayerMoveCollision(CGameTrace&)
 T CGameMovement::PerformFlyCollisionResolution(CGameTrace&, Vector&)
 T CGameMovement::PlayerMove()
 T CGameMovement::PlayerRoughLandingEffects(float)
 T CGameMovement::PlayerSolidMask(bool)
 T CGameMovement::ProcessMovement(CBasePlayer*, CMoveData*)
 T CGameMovement::ReduceTimers()
 T CGameMovement::SetGroundEntity(CGameTrace*)
 T CGameMovement::StartGravity()
 T CGameMovement::StartTrackPredictionErrors(CBasePlayer*)
 T CGameMovement::StartUnDuckJump()
 T CGameMovement::StayOnGround()
 T CGameMovement::StepMove(Vector&, CGameTrace&)
 T CGameMovement::TestPlayerPosition(Vector const&, int, CGameTrace&)
 T CGameMovement::TracePlayerBBox(Vector const&, Vector const&, unsigned int, int, CGameTrace&)
 T CGameMovement::TryPlayerMove(Vector*, CGameTrace*)
 T CGameMovement::TryTouchGround(Vector const&, Vector const&, Vector const&, Vector const&, unsigned int, int, CGameTrace&)
 T CGameMovement::TryTouchGroundInQuadrants(Vector const&, Vector const&, unsigned int, int, CGameTrace&)
 T CGameMovement::UpdateDuckJumpEyeOffset()
 T CGameMovement::WalkMove()
 T CGameMovement::WaterMove()
 T CGameMovement::~CGameMovement()
 T CGamePlayerEquip::GetDataDescMap()
 T CGamePlayerEquip::KeyValue(char const*, char const*)
 T CGamePlayerEquip::Touch(CBaseEntity*)
 T CGamePlayerEquip::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CGamePlayerEquip::~CGamePlayerEquip()
 T CGamePlayerTeam::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CGamePlayerTeam::~CGamePlayerTeam()
 T CGamePlayerZone::GetDataDescMap()
 T CGamePlayerZone::InputCountPlayersInZone(inputdata_t&)
 T CGamePlayerZone::~CGamePlayerZone()
 T CGameRules::AIClassText(int)
 T CGameRules::AdjustPlayerDamageInflicted(float)
 T CGameRules::AdjustPlayerDamageTaken(CTakeDamageInfo*)
 T CGameRules::AllowAutoTargetCrosshair()
 T CGameRules::AllowThirdPersonCamera()
 T CGameRules::CGameRules()
 T CGameRules::CanEntityBeUsePushed(CBaseEntity*)
 T CGameRules::CanHaveAmmo(CBaseCombatCharacter*, char const*)
 T CGameRules::CanHaveAmmo(CBaseCombatCharacter*, int)
 T CGameRules::CanHavePlayerItem(CBasePlayer*, CBaseCombatWeapon*)
 T CGameRules::ChangePlayerTeam(CBasePlayer*, char const*, bool, bool)
 T CGameRules::CheckChatText(CBasePlayer*, char*)
 T CGameRules::CheckHaptics(CBasePlayer*)
 T CGameRules::ClientCommand(CBaseEntity*, CCommand const&)
 T CGameRules::ClientCommandKeyValues(edict_t*, KeyValues*)
 T CGameRules::ClientSettingsChanged(CBasePlayer*)
 T CGameRules::ClientSpawned(edict_t*)
 T CGameRules::CreateCustomNetworkStringTables()
 T CGameRules::CreateStandardEntities()
 T CGameRules::DefaultFOV()
 T CGameRules::EndGameFrame()
 T CGameRules::EndMultiplayerGame()
 T CGameRules::FPlayerCanTakeDamage(CBasePlayer*, CBaseEntity*, CTakeDamageInfo const&)
 T CGameRules::FlHEVChargerRechargeTime()
 T CGameRules::FlPlayerFallDeathDoesScreenFade(CBasePlayer*)
 T CGameRules::FrameUpdatePostEntityThink()
 T CGameRules::GetAmmoDamage(CBaseEntity*, CBaseEntity*, int)
 T CGameRules::GetAmmoQuantityScale(int)
 T CGameRules::GetAutoAimMode()
 T CGameRules::GetAutoAimScale(CBasePlayer*)
 T CGameRules::GetChatFormat(bool, CBasePlayer*)
 T CGameRules::GetChatLocation(bool, CBasePlayer*)
 T CGameRules::GetChatPrefix(bool, CBasePlayer*)
 T CGameRules::GetDamageCustomString(CTakeDamageInfo const&)
 T CGameRules::GetDamageMultiplier()
 T CGameRules::GetEncryptionKey()
 T CGameRules::GetGameDescription()
 T CGameRules::GetGameType()
 T CGameRules::GetGameTypeName()
 T CGameRules::GetIndexedTeamName(int)
 T CGameRules::GetNextBestWeapon(CBaseCombatCharacter*, CBaseCombatWeapon*)
 T CGameRules::GetPlayerSpawnSpot(CBasePlayer*)
 T CGameRules::GetSkillLevel()
 T CGameRules::GetTaggedConVarList(KeyValues*)
 T CGameRules::GetTeamIndex(char const*)
 T CGameRules::GetViewVectors() const
 T CGameRules::InRoundRestart()
 T CGameRules::InitDefaultAIRelationships()
 T CGameRules::IsConnectedUserInfoChangeAllowed(CBasePlayer*)
 T CGameRules::IsHolidayActive(int) const
 T CGameRules::IsManualMapChangeOkay(char const**)
 T CGameRules::IsSkillLevel(int)
 T CGameRules::IsSpawnPointValid(CBaseEntity*, CBasePlayer*)
 T CGameRules::IsTeamplay()
 T CGameRules::IsValidTeam(char const*)
 T CGameRules::LevelShutdown()
 T CGameRules::MarkAchievement(IRecipientFilter&, char const*)
 T CGameRules::Name()
 T CGameRules::OnFileReceived(char const*, unsigned int)
 T CGameRules::OnNavMeshLoad()
 T CGameRules::OnSkillLevelChanged(int)
 T CGameRules::PlayFootstepSounds(CBasePlayer*)
 T CGameRules::PlayTextureSounds()
 T CGameRules::Precache()
 T CGameRules::ProcessVerboseLogOutput()
 T CGameRules::RadiusDamage(CTakeDamageInfo const&, Vector const&, float, int, CBaseEntity*)
 T CGameRules::RefreshSkillData(bool)
 T CGameRules::ResetMapCycleTimeStamp()
 T CGameRules::SetDefaultPlayerTeam(CBasePlayer*)
 T CGameRules::SetSkillLevel(int)
 T CGameRules::ShouldAutoAim(CBasePlayer*, edict_t*)
 T CGameRules::ShouldBurningPropsEmitLight()
 T CGameRules::ShouldCollide(int, int)
 T CGameRules::ShouldDrawHeadLabels()
 T CGameRules::ShouldUseRobustRadiusDamage(CBaseEntity*)
 T CGameRules::Status(void (*)(char const*, ...))
 T CGameRules::SwitchToNextBestWeapon(CBaseCombatCharacter*, CBaseCombatWeapon*)
 T CGameRules::TacticalMissionManagerFactory()
 T CGameRules::Think()
 T CGameRules::UpdateClientData(CBasePlayer*)
 T CGameRules::WeaponTraceEntity(CBaseEntity*, Vector const&, Vector const&, unsigned int, CGameTrace*)
 T CGameRules::~CGameRules()
 T CGameRulesProxy::CGameRulesProxy()
 T CGameRulesProxy::GetServerClass()
 T CGameRulesProxy::NotifyNetworkStateChanged()
 T CGameRulesProxy::ObjectCaps()
 T CGameRulesProxy::UpdateTransmitState()
 T CGameRulesProxy::YouForgotToImplementOrDeclareServerClass()
 T CGameRulesProxy::~CGameRulesProxy()
 T CGameRulesRegister::CGameRulesRegister(char const*, void (*)())
 T CGameSaveRestoreInfo::GetEntityIndex(CBaseEntity const*)
 T CGameScore::GetDataDescMap()
 T CGameScore::InputApplyScore(inputdata_t&)
 T CGameScore::KeyValue(char const*, char const*)
 T CGameScore::Spawn()
 T CGameScore::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CGameScore::~CGameScore()
 T CGameStringPool::Allocate(char const*)
 T CGameStringPool::Dump()
 T CGameStringPool::Dump()::_Local::F(char const* const*, char const* const*)
 T CGameStringPool::FreeAll()
 T CGameStringPool::LevelShutdownPostEntity()
 T CGameStringPool::Name()
 T CGameStringPool::~CGameStringPool()
 T CGameText::Display(CBaseEntity*)
 T CGameText::GetDataDescMap()
 T CGameText::InputDisplay(inputdata_t&)
 T CGameText::KeyValue(char const*, char const*)
 T CGameText::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CGameText::~CGameText()
 T CGameTrace::DidHitNonWorldEntity() const
 T CGameTrace::DidHitWorld() const
 T CGameTrace::GetEntityIndex() const
 T CGameUI::Deactivate(CBaseEntity*)
 T CGameUI::GetDataDescMap()
 T CGameUI::InputActivate(inputdata_t&)
 T CGameUI::InputDeactivate(inputdata_t&)
 T CGameUI::Think()
 T CGameUI::~CGameUI()
 T CGameWeaponManager::GetDataDescMap()
 T CGameWeaponManager::InputSetAmmoModifier(inputdata_t&)
 T CGameWeaponManager::InputSetMaxPieces(inputdata_t&)
 T CGameWeaponManager::Spawn()
 T CGameWeaponManager::Think()
 T CGameWeaponManager::~CGameWeaponManager()
 T CGenericActor* _CreateEntityTemplate<CGenericActor>(CGenericActor*, char const*)
 T CGenericActor::Classify()
 T CGenericActor::GetDataDescMap()
 T CGenericActor::GetSoundInterests()
 T CGenericActor::HandleAnimEvent(animevent_t*)
 T CGenericActor::MaxYawSpeed()
 T CGenericActor::Precache()
 T CGenericActor::Spawn()
 T CGenericActor::~CGenericActor()
 T CGenericCycler::Spawn()
 T CGenericCycler::~CGenericCycler()
 T CGenericFlexCycler* _CreateEntityTemplate<CGenericFlexCycler>(CGenericFlexCycler*, char const*)
 T CGenericFlexCycler::Spawn()
 T CGenericFlexCycler::~CGenericFlexCycler()
 T CGenericNPC::Classify()
 T CGenericNPC::GetSoundInterests()
 T CGenericNPC::HandleAnimEvent(animevent_t*)
 T CGenericNPC::MaxYawSpeed()
 T CGenericNPC::Precache()
 T CGenericNPC::Spawn()
 T CGenericNPC::TempGunEffect()
 T CGenericNPC::~CGenericNPC()
 T CGib::BounceGibTouch(CBaseEntity*)
 T CGib::DieThink()
 T CGib::GetDataDescMap()
 T CGib::HasPhysicsAttacker(float)
 T CGib::InitGib(CBaseEntity*, float, float)
 T CGib::ObjectCaps()
 T CGib::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T CGib::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CGib::SUB_AllowedToFade()
 T CGib::SetBloodColor(int)
 T CGib::Spawn(char const*)
 T CGib::SpawnHeadGib(CBaseEntity*)
 T CGib::SpawnRandomGibs(CBaseEntity*, int, GibType_e)
 T CGib::SpawnSpecificGibs(CBaseEntity*, int, float, float, char const*, float)
 T CGib::StickyGibTouch(CBaseEntity*)
 T CGib::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CGib::WaitTillLand()
 T CGib::~CGib()
 T CGibShooter::CreateGib()
 T CGibShooter::GetDataDescMap()
 T CGibShooter::InitPointGib(CGib*, Vector const&, float)
 T CGibShooter::InputShoot(inputdata_t&)
 T CGibShooter::Precache()
 T CGibShooter::ShootThink()
 T CGibShooter::Spawn()
 T CGibShooter::SpawnGib(Vector const&, float)
 T CGibShooter::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CGibShooter::~CGibShooter()
 T CGlobalEntityList::AddListenerEntity(IEntityListener*)
 T CGlobalEntityList::AddToDeleteList(IServerNetworkable*)
 T CGlobalEntityList::CleanupDeleteList()
 T CGlobalEntityList::Clear()
 T CGlobalEntityList::FindEntityByClassname(CBaseEntity*, char const*)
 T CGlobalEntityList::FindEntityByClassnameNearest(char const*, Vector const&, float)
 T CGlobalEntityList::FindEntityByClassnameWithin(CBaseEntity*, char const*, Vector const&, Vector const&)
 T CGlobalEntityList::FindEntityByClassnameWithin(CBaseEntity*, char const*, Vector const&, float)
 T CGlobalEntityList::FindEntityByModel(CBaseEntity*, char const*)
 T CGlobalEntityList::FindEntityByName(CBaseEntity*, char const*, CBaseEntity*, CBaseEntity*, CBaseEntity*, IEntityFindFilter*)
 T CGlobalEntityList::FindEntityByNameNearest(char const*, Vector const&, float, CBaseEntity*, CBaseEntity*, CBaseEntity*)
 T CGlobalEntityList::FindEntityByNameWithin(CBaseEntity*, char const*, Vector const&, float, CBaseEntity*, CBaseEntity*, CBaseEntity*)
 T CGlobalEntityList::FindEntityByTarget(CBaseEntity*, char const*)
 T CGlobalEntityList::FindEntityClassNearestFacing(Vector const&, Vector const&, float, char*)
 T CGlobalEntityList::FindEntityGeneric(CBaseEntity*, char const*, CBaseEntity*, CBaseEntity*, CBaseEntity*)
 T CGlobalEntityList::FindEntityGenericNearest(char const*, Vector const&, float, CBaseEntity*, CBaseEntity*, CBaseEntity*)
 T CGlobalEntityList::FindEntityGenericWithin(CBaseEntity*, char const*, Vector const&, float, CBaseEntity*, CBaseEntity*, CBaseEntity*)
 T CGlobalEntityList::FindEntityInSphere(CBaseEntity*, Vector const&, float)
 T CGlobalEntityList::FindEntityNearestFacing(Vector const&, Vector const&, float)
 T CGlobalEntityList::FindEntityProcedural(char const*, CBaseEntity*, CBaseEntity*, CBaseEntity*)
 T CGlobalEntityList::IsEntityPtr(void*)
 T CGlobalEntityList::NextEnt(CBaseEntity*)
 T CGlobalEntityList::NotifyCreateEntity(CBaseEntity*)
 T CGlobalEntityList::NotifyRemoveEntity(CBaseHandle)
 T CGlobalEntityList::NotifySpawn(CBaseEntity*)
 T CGlobalEntityList::NumberOfEdicts()
 T CGlobalEntityList::NumberOfEntities()
 T CGlobalEntityList::OnAddEntity(IHandleEntity*, CBaseHandle)
 T CGlobalEntityList::OnRemoveEntity(IHandleEntity*, CBaseHandle)
 T CGlobalEntityList::RemoveListenerEntity(IEntityListener*)
 T CGlobalEntityList::ReportEntityFlagsChanged(CBaseEntity*, unsigned int, unsigned int)
 T CGlobalEntityList::ResetDeleteList()
 T CGlobalEntityList::~CGlobalEntityList()
 T CGlobalState::AddEntity(char const*, char const*, GLOBALESTATE)
 T CGlobalState::DumpGlobals()
 T CGlobalState::LevelShutdownPostEntity()
 T CGlobalState::LevelShutdownPreEntity()
 T CGlobalState::~CGlobalState()
 T CGrabController::AttachEntity(CBasePlayer*, CBaseEntity*, IPhysicsObject*, bool, Vector const&, bool)
 T CGrabController::ComputeError()
 T CGrabController::DetachEntity(bool)
 T CGrabController::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)
 T CGrabController::UpdateObject(CBasePlayer*, float)
 T CGrenadeAR2::Detonate()
 T CGrenadeAR2::Event_Killed(CTakeDamageInfo const&)
 T CGrenadeAR2::GetDataDescMap()
 T CGrenadeAR2::GrenadeAR2Think()
 T CGrenadeAR2::GrenadeAR2Touch(CBaseEntity*)
 T CGrenadeAR2::Precache()
 T CGrenadeAR2::Spawn()
 T CGrenadeAR2::~CGrenadeAR2()
 T CGrenadeBeam::Create(CBaseEntity*, Vector const&)
 T CGrenadeBeam::CreateBeams()
 T CGrenadeBeam::Format(color32_s, float)
 T CGrenadeBeam::GetDataDescMap()
 T CGrenadeBeam::GetNextTargetPos(Vector*)
 T CGrenadeBeam::GrenadeBeamTouch(CBaseEntity*)
 T CGrenadeBeam::KillBeam()
 T CGrenadeBeam::Precache()
 T CGrenadeBeam::Shoot(Vector, float, float, float, float)
 T CGrenadeBeam::Spawn()
 T CGrenadeBeam::UpdateBeams()
 T CGrenadeBeam::UpdateTransmitState()
 T CGrenadeBeam::~CGrenadeBeam()
 T CGrenadeBeamChaser::ChaserThink()
 T CGrenadeBeamChaser::GetDataDescMap()
 T CGrenadeBeamChaser::Spawn()
 T CGrenadeBeamChaser::~CGrenadeBeamChaser()
 T CGrenadeBugBait::ActivateBugbaitTargets(CBaseEntity*, Vector, bool)
 T CGrenadeBugBait::BugBaitTouch(CBaseEntity*)
 T CGrenadeBugBait::GetDataDescMap()
 T CGrenadeBugBait::Precache()
 T CGrenadeBugBait::SetGracePeriod(float)
 T CGrenadeBugBait::Spawn()
 T CGrenadeBugBait::ThinkBecomeSolid()
 T CGrenadeBugBait::~CGrenadeBugBait()
 T CGrenadeFrag::CreateEffects()
 T CGrenadeFrag::CreateVPhysics()
 T CGrenadeFrag::DelayThink()
 T CGrenadeFrag::GetDataDescMap()
 T CGrenadeFrag::InputSetTimer(inputdata_t&)
 T CGrenadeFrag::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CGrenadeFrag::OnRestore()
 T CGrenadeFrag::OnTakeDamage(CTakeDamageInfo const&)
 T CGrenadeFrag::Precache()
 T CGrenadeFrag::Spawn()
 T CGrenadeFrag::VPhysicsUpdate(IPhysicsObject*)
 T CGrenadeFrag::~CGrenadeFrag()
 T CGrenadeHelicopter::AnimateThink()
 T CGrenadeHelicopter::BecomeActive()
 T CGrenadeHelicopter::DoExplosion(Vector const&, Vector const&)
 T CGrenadeHelicopter::ExplodeConcussion(CBaseEntity*)
 T CGrenadeHelicopter::ExplodeThink()
 T CGrenadeHelicopter::GetDataDescMap()
 T CGrenadeHelicopter::GetShakeAmplitude()
 T CGrenadeHelicopter::GetShakeRadius()
 T CGrenadeHelicopter::HasPreferredCarryAnglesForPlayer(CBasePlayer*)
 T CGrenadeHelicopter::OnEntityEvent(EntityEvent_t, void*)
 T CGrenadeHelicopter::OnTakeDamage(CTakeDamageInfo const&)
 T CGrenadeHelicopter::PhysicsSimulate()
 T CGrenadeHelicopter::Precache()
 T CGrenadeHelicopter::PreferredCarryAngles()
 T CGrenadeHelicopter::RampSoundThink()
 T CGrenadeHelicopter::ResolveFlyCollisionCustom(CGameTrace&, Vector&)
 T CGrenadeHelicopter::Spawn()
 T CGrenadeHelicopter::UpdateOnRemove()
 T CGrenadeHelicopter::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CGrenadeHelicopter::WarningBlinkerThink()
 T CGrenadeHelicopter::~CGrenadeHelicopter()
 T CGrenadeHomer::AimThink()
 T CGrenadeHomer::CreateGrenadeHomer(string_t, string_t, Vector const&, QAngle const&, edict_t*)
 T CGrenadeHomer::Detonate()
 T CGrenadeHomer::Event_Killed(CTakeDamageInfo const&)
 T CGrenadeHomer::GetDataDescMap()
 T CGrenadeHomer::GrenadeHomerTouch(CBaseEntity*)
 T CGrenadeHomer::Launch(CBaseEntity*, CBaseEntity*, Vector const&, float, float, int)
 T CGrenadeHomer::OnTakeDamage(CTakeDamageInfo const&)
 T CGrenadeHomer::PlayFlySound()
 T CGrenadeHomer::Precache()
 T CGrenadeHomer::SetHoming(float, float, float, float, float)
 T CGrenadeHomer::SetSpin(float, float)
 T CGrenadeHomer::Spawn()
 T CGrenadeHomer::StartRocketTrail()
 T CGrenadeHomer::StopRocketTrail()
 T CGrenadeHomer::UpdateRocketTrail(float)
 T CGrenadeHomer::~CGrenadeHomer()
 T CGrenadePathfollower::AimThink()
 T CGrenadePathfollower::Classify()
 T CGrenadePathfollower::CreateGrenadePathfollower(string_t, string_t, Vector const&, QAngle const&, edict_t*)
 T CGrenadePathfollower::Detonate()
 T CGrenadePathfollower::Event_Killed(CTakeDamageInfo const&)
 T CGrenadePathfollower::GetDataDescMap()
 T CGrenadePathfollower::GrenadeTouch(CBaseEntity*)
 T CGrenadePathfollower::Launch(float, string_t)
 T CGrenadePathfollower::PlayFlySound()
 T CGrenadePathfollower::Precache()
 T CGrenadePathfollower::Spawn()
 T CGrenadePathfollower::~CGrenadePathfollower()
 T CGunTarget::Activate()
 T CGunTarget::BloodColor()
 T CGunTarget::BodyTarget(Vector const&, bool)
 T CGunTarget::Classify()
 T CGunTarget::CreateVPhysics()
 T CGunTarget::GetDataDescMap()
 T CGunTarget::InputStart(inputdata_t&)
 T CGunTarget::InputStop(inputdata_t&)
 T CGunTarget::InputToggle(inputdata_t&)
 T CGunTarget::Next()
 T CGunTarget::OnTakeDamage(CTakeDamageInfo const&)
 T CGunTarget::Spawn()
 T CGunTarget::Start()
 T CGunTarget::Wait()
 T CGunTarget::~CGunTarget()
 T CGunshipRagdollMotion::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)
 T CHL2EventLog::Name()
 T CHL2EventLog::PrintEvent(IGameEvent*)
 T CHL2EventLog::~CHL2EventLog()
 T CHL2GameMovement::CanAccelerate()
 T CHL2GameMovement::CheckLadderAutoMountCone(CFuncLadder*, Vector const&, float, float)
 T CHL2GameMovement::CheckLadderAutoMountEndPoint(CFuncLadder*, Vector const&)
 T CHL2GameMovement::ContinueForcedMove()
 T CHL2GameMovement::ExitLadderViaDismountNode(CFuncLadder*, bool, bool)
 T CHL2GameMovement::Findladder(float, CFuncLadder**, Vector&, CFuncLadder const*)
 T CHL2GameMovement::FullLadderMove()
 T CHL2GameMovement::GetCheckInterval(CGameMovement::IntervalType_t)
 T CHL2GameMovement::GetSortedDismountNodeList(Vector const&, float, CFuncLadder*, CUtlRBTree<NearbyDismount_t, int, bool (*)(NearbyDismount_t const&, NearbyDismount_t const&), CUtlMemory<UtlRBTreeNode_t<NearbyDismount_t, int>, int> >&)
 T CHL2GameMovement::LadderMove()
 T CHL2GameMovement::LookingAtLadder(CFuncLadder*)
 T CHL2GameMovement::OnLadder(CGameTrace&)
 T CHL2GameMovement::SetGroundEntity(CGameTrace*)
 T CHL2GameMovement::StartForcedMove(bool, float, Vector const&, CFuncLadder*)
 T CHL2GameMovement::~CHL2GameMovement()
 T CHL2MPGameRulesProxy::GetServerClass()
 T CHL2MPGameRulesProxy::YouForgotToImplementOrDeclareServerClass()
 T CHL2MPGameRulesProxy::~CHL2MPGameRulesProxy()
 T CHL2MPMachineGun::CHL2MPMachineGun()
 T CHL2MPMachineGun::Deploy()
 T CHL2MPMachineGun::DoMachineGunKick(CBasePlayer*, float, float, float, float)
 T CHL2MPMachineGun::FireBullets(FireBulletsInfo_t const&)
 T CHL2MPMachineGun::GetBulletSpread()
 T CHL2MPMachineGun::GetDataDescMap()
 T CHL2MPMachineGun::GetServerClass()
 T CHL2MPMachineGun::ItemPostFrame()
 T CHL2MPMachineGun::PrimaryAttack()
 T CHL2MPMachineGun::YouForgotToImplementOrDeclareServerClass()
 T CHL2MPMachineGun::~CHL2MPMachineGun()
 T CHL2MPRagdoll::GetServerClass()
 T CHL2MPRagdoll::UpdateTransmitState()
 T CHL2MPRagdoll::YouForgotToImplementOrDeclareServerClass()
 T CHL2MPRagdoll::~CHL2MPRagdoll()
 T CHL2MPRules::AddLevelDesignerPlacedObject(CBaseEntity*)
 T CHL2MPRules::CHL2MPRules()
 T CHL2MPRules::CanHavePlayerItem(CBasePlayer*, CBaseCombatWeapon*)
 T CHL2MPRules::CheckChatForReadySignal(CHL2MP_Player*, char const*)
 T CHL2MPRules::CheckRestartGame()
 T CHL2MPRules::CleanUpMap()
 T CHL2MPRules::ClientCommand(CBaseEntity*, CCommand const&)
 T CHL2MPRules::ClientDisconnected(edict_t*)
 T CHL2MPRules::ClientSettingsChanged(CBasePlayer*)
 T CHL2MPRules::CreateStandardEntities()
 T CHL2MPRules::DeathNotice(CBasePlayer*, CTakeDamageInfo const&)
 T CHL2MPRules::FShouldSwitchWeapon(CBasePlayer*, CBaseCombatWeapon*)
 T CHL2MPRules::FlItemRespawnTime(CItem*)
 T CHL2MPRules::FlWeaponRespawnTime(CBaseCombatWeapon*)
 T CHL2MPRules::FlWeaponTryRespawn(CBaseCombatWeapon*)
 T CHL2MPRules::GetChatFormat(bool, CBasePlayer*)
 T CHL2MPRules::GetEncryptionKey()
 T CHL2MPRules::GetGameDescription()
 T CHL2MPRules::GetHL2MPViewVectors() const
 T CHL2MPRules::GetMapRemainingTime()
 T CHL2MPRules::GetViewVectors() const
 T CHL2MPRules::GoToIntermission()
 T CHL2MPRules::IsConnectedUserInfoChangeAllowed(CBasePlayer*)
 T CHL2MPRules::IsIntermission()
 T CHL2MPRules::IsTeamplay()
 T CHL2MPRules::ManageObjectRelocation()
 T CHL2MPRules::PlayerKilled(CBasePlayer*, CTakeDamageInfo const&)
 T CHL2MPRules::PlayerRelationship(CBaseEntity*, CBaseEntity*)
 T CHL2MPRules::Precache()
 T CHL2MPRules::RemoveLevelDesignerPlacedObject(CBaseEntity*)
 T CHL2MPRules::RestartGame()
 T CHL2MPRules::ShouldCollide(int, int)
 T CHL2MPRules::Think()
 T CHL2MPRules::VecItemRespawnAngles(CItem*)
 T CHL2MPRules::VecItemRespawnSpot(CItem*)
 T CHL2MPRules::VecWeaponRespawnSpot(CBaseCombatWeapon*)
 T CHL2MPRules::WeaponShouldRespawn(CBaseCombatWeapon*)
 T CHL2MPRules::~CHL2MPRules()
 T CHL2MPSWeaponInfo::Parse(KeyValues*, char const*)
 T CHL2MP_Player::BecomeRagdollOnClient(Vector const&)
 T CHL2MP_Player::BumpWeapon(CBaseCombatWeapon*)
 T CHL2MP_Player::CHL2MP_Player()
 T CHL2MP_Player::CanHearAndReadChatFrom(CBasePlayer*)
 T CHL2MP_Player::ChangeTeam(int)
 T CHL2MP_Player::CheatImpulseCommands(int)
 T CHL2MP_Player::CheckChatText(char*, int)
 T CHL2MP_Player::ClientCommand(CCommand const&)
 T CHL2MP_Player::CreateRagdollEntity()
 T CHL2MP_Player::CreateViewModel(int)
 T CHL2MP_Player::DeathSound(CTakeDamageInfo const&)
 T CHL2MP_Player::DetonateTripmines()
 T CHL2MP_Player::EntSelectSpawnPoint()
 T CHL2MP_Player::Event_Killed(CTakeDamageInfo const&)
 T CHL2MP_Player::FireBullets(FireBulletsInfo_t const&)
 T CHL2MP_Player::FlashlightIsOn()
 T CHL2MP_Player::FlashlightTurnOff()
 T CHL2MP_Player::FlashlightTurnOn()
 T CHL2MP_Player::GetAttackSpread(CBaseCombatWeapon*, CBaseEntity*)
 T CHL2MP_Player::GetDataDescMap()
 T CHL2MP_Player::GetPlayerModelSoundPrefix()
 T CHL2MP_Player::GetServerClass()
 T CHL2MP_Player::GiveAllItems()
 T CHL2MP_Player::GiveDefaultItems()
 T CHL2MP_Player::HandleCommand_JoinTeam(int)
 T CHL2MP_Player::IsReady()
 T CHL2MP_Player::OnTakeDamage(CTakeDamageInfo const&)
 T CHL2MP_Player::PickDefaultSpawnTeam()
 T CHL2MP_Player::PickupObject(CBaseEntity*, bool)
 T CHL2MP_Player::PlayStepSound(Vector&, surfacedata_t*, float, bool)
 T CHL2MP_Player::PlayerDeathThink()
 T CHL2MP_Player::PostThink()
 T CHL2MP_Player::PreThink()
 T CHL2MP_Player::Precache()
 T CHL2MP_Player::PrecacheFootStepSounds()
 T CHL2MP_Player::Reset()
 T CHL2MP_Player::ResetAnimation()
 T CHL2MP_Player::SetAnimation(PLAYER_ANIM)
 T CHL2MP_Player::SetPlayerModel()
 T CHL2MP_Player::SetPlayerTeamModel()
 T CHL2MP_Player::SetReady(bool)
 T CHL2MP_Player::SetupPlayerSoundsByModel(char const*)
 T CHL2MP_Player::ShouldRunRateLimitedCommand(CCommand const&)
 T CHL2MP_Player::Spawn()
 T CHL2MP_Player::StartObserverMode(int)
 T CHL2MP_Player::State_Enter_ACTIVE()
 T CHL2MP_Player::State_Enter_OBSERVER_MODE()
 T CHL2MP_Player::State_PreThink_ACTIVE()
 T CHL2MP_Player::State_PreThink_OBSERVER_MODE()
 T CHL2MP_Player::StopObserverMode()
 T CHL2MP_Player::UpdateOnRemove()
 T CHL2MP_Player::WantsLagCompensationOnEntity(CBasePlayer const*, CUserCmd const*, CBitVec<2048> const*) const
 T CHL2MP_Player::Weapon_Drop(CBaseCombatWeapon*, Vector const*, Vector const*)
 T CHL2MP_Player::Weapon_Switch(CBaseCombatWeapon*, int)
 T CHL2MP_Player::YouForgotToImplementOrDeclareServerClass()
 T CHL2MP_Player::~CHL2MP_Player()
 T CHL2NetworkBuildHelper::PostInitNodePosition(CAI_Network*, CAI_Node*)
 T CHL2NetworkBuildHelper::~CHL2NetworkBuildHelper()
 T CHL2PlayerLocalData::CHL2PlayerLocalData()
 T CHL2PlayerLocalData::NetworkStateChanged()
 T CHL2PlayerLocalData::NetworkStateChanged(void*)
 T CHL2_Player::Activate()
 T CHL2_Player::ApplyBattery(float)
 T CHL2_Player::BumpWeapon(CBaseCombatWeapon*)
 T CHL2_Player::CHL2_Player()
 T CHL2_Player::CalcWeaponProficiency(CBaseCombatWeapon*)
 T CHL2_Player::CanBreatheUnderwater() const
 T CHL2_Player::CheatImpulseCommands(int)
 T CHL2_Player::CheckSuitZoom()
 T CHL2_Player::Classify()
 T CHL2_Player::ClientCommand(CCommand const&)
 T CHL2_Player::CombineBallSocketed(CPropCombineBall*)
 T CHL2_Player::CommanderExecute(CHL2_Player::CommanderCommand_t)
 T CHL2_Player::CommanderFindGoal(commandgoal_t*)
 T CHL2_Player::CommanderMode()
 T CHL2_Player::CommanderUpdate()
 T CHL2_Player::CreateCorpse()
 T CHL2_Player::DisplayLadderHudHint()
 T CHL2_Player::DrawDebugGeometryOverlays()
 T CHL2_Player::EnableSprint(bool)
 T CHL2_Player::EquipSuit(bool)
 T CHL2_Player::Event_Killed(CTakeDamageInfo const&)
 T CHL2_Player::Event_KilledOther(CBaseEntity*, CTakeDamageInfo const&)
 T CHL2_Player::ExitLadder()
 T CHL2_Player::EyeDirection2D()
 T CHL2_Player::EyeDirection3D()
 T CHL2_Player::FlashlightIsOn()
 T CHL2_Player::FlashlightTurnOff()
 T CHL2_Player::FlashlightTurnOn()
 T CHL2_Player::ForceDropOfCarriedPhysObjects(CBaseEntity*)
 T CHL2_Player::GetAutoaimVector(autoaim_params_t&)
 T CHL2_Player::GetDataDescMap()
 T CHL2_Player::GetHeldObjectMass(IPhysicsObject*)
 T CHL2_Player::GetIdleTime() const
 T CHL2_Player::GetLadderSurface(Vector const&)
 T CHL2_Player::GetLastDamageTime() const
 T CHL2_Player::GetMoveTime() const
 T CHL2_Player::GetPhysicsImpactDamageTable()
 T CHL2_Player::GetPlayerProxy()
 T CHL2_Player::GetServerClass()
 T CHL2_Player::GiveAmmo(int, int, bool)
 T CHL2_Player::HandleAdmireGlovesAnimation()
 T CHL2_Player::HandleInteraction(int, void*, CBaseCombatCharacter*)
 T CHL2_Player::HandleSpeedChanges()
 T CHL2_Player::InitVCollision(Vector const&, Vector const&)
 T CHL2_Player::InputDisableFlashlight(inputdata_t&)
 T CHL2_Player::InputEnableFlashlight(inputdata_t&)
 T CHL2_Player::InputForceDropPhysObjects(inputdata_t&)
 T CHL2_Player::InputIgnoreFallDamage(inputdata_t&)
 T CHL2_Player::InputIgnoreFallDamageWithoutReset(inputdata_t&)
 T CHL2_Player::IsDucking() const
 T CHL2_Player::IsFollowingPhysics()
 T CHL2_Player::IsHoldingEntity(CBaseEntity*)
 T CHL2_Player::IsIlluminatedByFlashlight(CBaseEntity*, float*)
 T CHL2_Player::ItemPostFrame()
 T CHL2_Player::MissedAR2AltFire()
 T CHL2_Player::ModifyOrAppendPlayerCriteria(AI_CriteriaSet&)
 T CHL2_Player::NetworkStateChanged_m_fIsWalking()
 T CHL2_Player::NetworkStateChanged_m_fIsWalking(void*)
 T CHL2_Player::NetworkVar_m_HL2Local::NetworkStateChanged()
 T CHL2_Player::NetworkVar_m_HL2Local::NetworkStateChanged(void*)
 T CHL2_Player::NotifyFriendsOfDamage(CBaseEntity*)
 T CHL2_Player::NotifyScriptsOfDeath()
 T CHL2_Player::OnDamagedByExplosion(CTakeDamageInfo const&)
 T CHL2_Player::OnRestore()
 T CHL2_Player::OnSquadMemberKilled(inputdata_t&)
 T CHL2_Player::OnTakeDamage(CTakeDamageInfo const&)
 T CHL2_Player::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CHL2_Player::PassesDamageFilter(CTakeDamageInfo const&)
 T CHL2_Player::PickupObject(CBaseEntity*, bool)
 T CHL2_Player::PlayUseDenySound()
 T CHL2_Player::PlayerRunCommand(CUserCmd*, IMoveHelper*)
 T CHL2_Player::PlayerUse()
 T CHL2_Player::PostThink()
 T CHL2_Player::PreThink()
 T CHL2_Player::Precache()
 T CHL2_Player::RemoveSuit()
 T CHL2_Player::SetFlashlightEnabled(bool)
 T CHL2_Player::SetPlayerUnderwater(bool)
 T CHL2_Player::SetupVisibility(CBaseEntity*, unsigned char*, int)
 T CHL2_Player::ShouldShootMissTarget(CBaseCombatCharacter*)
 T CHL2_Player::Spawn()
 T CHL2_Player::Splash()
 T CHL2_Player::StartAdmireGlovesAnimation()
 T CHL2_Player::StartSprinting()
 T CHL2_Player::StartWaterDeathSounds()
 T CHL2_Player::StopLoopingSounds()
 T CHL2_Player::StopSprinting()
 T CHL2_Player::StopWaterDeathSounds()
 T CHL2_Player::StopZooming()
 T CHL2_Player::SuitPower_AddDevice(CSuitPowerDevice const&)
 T CHL2_Player::SuitPower_RemoveDevice(CSuitPowerDevice const&)
 T CHL2_Player::SuitPower_Update()
 T CHL2_Player::SuspendUse(float)
 T CHL2_Player::TestHitboxes(Ray_t const&, unsigned int, CGameTrace&)
 T CHL2_Player::ToggleZoom()
 T CHL2_Player::UpdateClientData()
 T CHL2_Player::UpdateWeaponPosture()
 T CHL2_Player::Weapon_CanSwitchTo(CBaseCombatWeapon*)
 T CHL2_Player::Weapon_CanUse(CBaseCombatWeapon*)
 T CHL2_Player::Weapon_Equip(CBaseCombatWeapon*)
 T CHL2_Player::Weapon_Lower()
 T CHL2_Player::Weapon_Ready()
 T CHL2_Player::Weapon_Switch(CBaseCombatWeapon*, int)
 T CHL2_Player::YouForgotToImplementOrDeclareServerClass()
 T CHL2_Player::~CHL2_Player()
 T CHLMachineGun::PrimaryAttack()
 T CHLPlayerMove::FinishMove(CBasePlayer*, CUserCmd*, CMoveData*)
 T CHLPlayerMove::SetupMove(CBasePlayer*, CUserCmd*, IMoveHelper*, CMoveData*)
 T CHLPlayerMove::~CHLPlayerMove()
 T CHLSelectFireMachineGun::BurstThink()
 T CHLTVDirector::AnalyzeCameras()
 T CHLTVDirector::AnalyzePlayers()
 T CHLTVDirector::BuildActivePlayerList()
 T CHLTVDirector::BuildCameraList()
 T CHLTVDirector::CreateShotFromEvent(CHLTVGameEvent*)
 T CHLTVDirector::FindBestGameEvent()
 T CHLTVDirector::FinishCameraManShot()
 T CHLTVDirector::FireGameEvent(IGameEvent*)
 T CHLTVDirector::FrameUpdatePostEntityThink()
 T CHLTVDirector::GetDelay()
 T CHLTVDirector::GetDirectorTick()
 T CHLTVDirector::GetFixedCameraEntityName()
 T CHLTVDirector::GetHLTVServer()
 T CHLTVDirector::GetModEvents()
 T CHLTVDirector::GetPVSEntity()
 T CHLTVDirector::GetPVSOrigin()
 T CHLTVDirector::Init()
 T CHLTVDirector::IsActive()
 T CHLTVDirector::LevelInitPostEntity()
 T CHLTVDirector::Name()
 T CHLTVDirector::RemoveEventsFromHistory(int)
 T CHLTVDirector::SetCameraMan(int)
 T CHLTVDirector::SetHLTVServer(IHLTVServer*)
 T CHLTVDirector::Shutdown()
 T CHLTVDirector::StartBestFixedCameraShot(bool)
 T CHLTVDirector::StartBestPlayerCameraShot()
 T CHLTVDirector::StartCameraManShot()
 T CHLTVDirector::StartChaseCameraShot(int, int, int, int, int, bool)
 T CHLTVDirector::StartDelayMessage()
 T CHLTVDirector::StartFixedCameraShot(int, int)
 T CHLTVDirector::StartInstantBroadcastShot()
 T CHLTVDirector::StartNewShot()
 T CHLTVDirector::StartRandomShot()
 T CHLTVDirector::UpdateSettings()
 T CHLTVDirector::~CHLTVDirector()
 T CHalfLife2::AIClassText(int)
 T CHalfLife2::AdjustPlayerDamageInflicted(float)
 T CHalfLife2::AdjustPlayerDamageTaken(CTakeDamageInfo*)
 T CHalfLife2::AllowDamage(CBaseEntity*, CTakeDamageInfo const&)
 T CHalfLife2::ClientCommand(CBaseEntity*, CCommand const&)
 T CHalfLife2::Damage_GetTimeBased()
 T CHalfLife2::Damage_IsTimeBased(int)
 T CHalfLife2::DefaultFOV()
 T CHalfLife2::GetAmmoDamage(CBaseEntity*, CBaseEntity*, int)
 T CHalfLife2::GetAmmoQuantityScale(int)
 T CHalfLife2::GetAutoAimScale(CBasePlayer*)
 T CHalfLife2::GetGameDescription()
 T CHalfLife2::InitDefaultAIRelationships()
 T CHalfLife2::IsAlyxInDarknessMode()
 T CHalfLife2::LevelInitPreEntity()
 T CHalfLife2::NPC_DroppedGrenade()
 T CHalfLife2::NPC_DroppedHealth()
 T CHalfLife2::NPC_ShouldDropGrenade(CBasePlayer*)
 T CHalfLife2::NPC_ShouldDropHealth(CBasePlayer*)
 T CHalfLife2::PlayerSpawn(CBasePlayer*)
 T CHalfLife2::PlayerThink(CBasePlayer*)
 T CHalfLife2::ShouldAutoAim(CBasePlayer*, edict_t*)
 T CHalfLife2::ShouldBurningPropsEmitLight()
 T CHalfLife2::ShouldCollide(int, int)
 T CHalfLife2::ShouldUseRobustRadiusDamage(CBaseEntity*)
 T CHalfLife2::Think()
 T CHalfLife2::~CHalfLife2()
 T CHalfLife2Proxy::GetServerClass()
 T CHalfLife2Proxy::YouForgotToImplementOrDeclareServerClass()
 T CHalfLife2Proxy::~CHalfLife2Proxy()
 T CHandleDummy::~CHandleDummy()
 T CHandleTest::GetServerClass()
 T CHandleTest::SetTransmit(CCheckTransmitInfo*, bool)
 T CHandleTest::UpdateTransmitState()
 T CHandleTest::YouForgotToImplementOrDeclareServerClass()
 T CHandleTest::~CHandleTest()
 T CHangRope::ApplyConstraints(CSimplePhysics::CNode*, int)
 T CHangRope::GetNodeForces(CSimplePhysics::CNode*, int, Vector*)
 T CHeadcrab::AlertSound()
 T CHeadcrab::AttackSound()
 T CHeadcrab::BiteSound()
 T CHeadcrab::DeathSound(CTakeDamageInfo const&)
 T CHeadcrab::IdleSound()
 T CHeadcrab::MaxYawSpeed()
 T CHeadcrab::NPC_TranslateActivity(Activity)
 T CHeadcrab::PainSound(CTakeDamageInfo const&)
 T CHeadcrab::Precache()
 T CHeadcrab::Spawn()
 T CHeadcrab::TelegraphSound()
 T CHeadcrab::~CHeadcrab()
 T CHealthKit::MyTouch(CBasePlayer*)
 T CHealthKit::Precache()
 T CHealthKit::Spawn()
 T CHealthKit::~CHealthKit()
 T CHealthVial::MyTouch(CBasePlayer*)
 T CHealthVial::Precache()
 T CHealthVial::Spawn()
 T CHealthVial::~CHealthVial()
 T CHelicopterChunk::CollisionCallback(CHelicopterChunk*)
 T CHelicopterChunk::CreateHelicopterChunk(Vector const&, QAngle const&, Vector const&, char const*, int)
 T CHelicopterChunk::FallThink()
 T CHelicopterChunk::GetDataDescMap()
 T CHelicopterChunk::Spawn()
 T CHelicopterChunk::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CHelicopterChunk::~CHelicopterChunk()
 T CHintCriteria::AddExcludePosition(Vector const&, float)
 T CHintCriteria::AddHintType(int)
 T CHintCriteria::AddIncludePosition(Vector const&, float)
 T CHintCriteria::CHintCriteria()
 T CHintCriteria::SetFlag(int)
 T CHintCriteria::SetGroup(string_t)
 T CHintCriteria::SetHintType(int)
 T CHintCriteria::~CHintCriteria()
 T CHintMessage::CHintMessage(char const*, CUtlVector<char const*, CUtlMemory<char const*, int> >*, float)
 T CHintMessage::Send(CBasePlayer*)
 T CHintMessageQueue::AddMessage(char const*, float, CUtlVector<char const*, CUtlMemory<char const*, int> >*)
 T CHintMessageQueue::Reset()
 T CHintMessageQueue::Update()
 T CHintMessageTimers::AddTimer(int, float, float, CUtlVector<char const*, CUtlMemory<char const*, int> >*)
 T CHintMessageTimers::Reset()
 T CHintMessageTimers::Update()
 T CHintSystem::HintMessage(int, bool, bool)
 T CHintSystem::ResetHintTimers()
 T CHintSystem::ResetHints()
 T CHintSystem::TimerShouldFire(int)
 T CHintSystem::Update()
 T CIKContext::AddAutoplayLocks(Vector*, Quaternion*)
 T CIKContext::AddDependencies(mstudioseqdesc_t&, int, float, float const*, float)
 T CIKContext::AddSequenceLocks(mstudioseqdesc_t&, Vector*, Quaternion*)
 T CIKContext::AutoIKRelease()
 T CIKContext::CIKContext()
 T CIKContext::ClearTargets()
 T CIKContext::Init(CStudioHdr const*, QAngle const&, Vector const&, float, int, int)
 T CIKContext::SolveAutoplayLocks(Vector*, Quaternion*)
 T CIKContext::SolveDependencies(Vector*, Quaternion*, matrix3x4_t*, CBoneBitList&)
 T CIKContext::SolveLock(mstudioiklock_t const*, int, Vector*, Quaternion*, matrix3x4_t*, CBoneBitList&)
 T CIKContext::SolveSequenceLocks(mstudioseqdesc_t&, Vector*, Quaternion*)
 T CIKContext::UpdateTargets(Vector*, Quaternion*, matrix3x4_t*, CBoneBitList&)
 T CIKSaveRestoreOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CIKSaveRestoreOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CIKSolver::solve(float, float, float const*, float const*, float*)
 T CIKTarget::IsActive()
 T CIKTarget::SetAngles(QAngle const&)
 T CIKTarget::SetNormal(Vector const&)
 T CIKTarget::SetPos(Vector const&)
 T CIKTarget::SetPosWithNormalOffset(Vector const&, Vector const&)
 T CInfoAPCMissileHint::Activate()
 T CInfoAPCMissileHint::FindAimTarget(CBaseEntity*, char const*, Vector const&, Vector const&)
 T CInfoAPCMissileHint::GetDataDescMap()
 T CInfoAPCMissileHint::Spawn()
 T CInfoAPCMissileHint::UpdateOnRemove()
 T CInfoAPCMissileHint::~CInfoAPCMissileHint()
 T CInfoCameraLink::Activate()
 T CInfoCameraLink::CInfoCameraLink()
 T CInfoCameraLink::GetDataDescMap()
 T CInfoCameraLink::InputSetCamera(inputdata_t&)
 T CInfoCameraLink::SetCameraByName(char const*)
 T CInfoCameraLink::~CInfoCameraLink()
 T CInfoIntermission::Spawn()
 T CInfoIntermission::Think()
 T CInfoIntermission::~CInfoIntermission()
 T CInfoLadderDismount::DrawDebugGeometryOverlays()
 T CInfoLadderDismount::GetServerClass()
 T CInfoLadderDismount::YouForgotToImplementOrDeclareServerClass()
 T CInfoLadderDismount::~CInfoLadderDismount()
 T CInfoLightingRelative::Activate()
 T CInfoLightingRelative::GetDataDescMap()
 T CInfoLightingRelative::GetServerClass()
 T CInfoLightingRelative::SetTransmit(CCheckTransmitInfo*, bool)
 T CInfoLightingRelative::UpdateTransmitState()
 T CInfoLightingRelative::YouForgotToImplementOrDeclareServerClass()
 T CInfoLightingRelative::~CInfoLightingRelative()
 T CInfoMassCenter::Spawn()
 T CInfoMassCenter::~CInfoMassCenter()
 T CInfoOverlayAccessor::GetDataDescMap()
 T CInfoOverlayAccessor::GetServerClass()
 T CInfoOverlayAccessor::UpdateTransmitState()
 T CInfoOverlayAccessor::YouForgotToImplementOrDeclareServerClass()
 T CInfoOverlayAccessor::~CInfoOverlayAccessor()
 T CInfoTarget::Spawn()
 T CInfoTarget::~CInfoTarget()
 T CInfoTeleporterCountdown::GetDataDescMap()
 T CInfoTeleporterCountdown::GetServerClass()
 T CInfoTeleporterCountdown::InputDisable(inputdata_t&)
 T CInfoTeleporterCountdown::InputEnable(inputdata_t&)
 T CInfoTeleporterCountdown::InputStartCountdown(inputdata_t&)
 T CInfoTeleporterCountdown::InputStopCountdown(inputdata_t&)
 T CInfoTeleporterCountdown::UpdateTransmitState()
 T CInfoTeleporterCountdown::YouForgotToImplementOrDeclareServerClass()
 T CInfoTeleporterCountdown::~CInfoTeleporterCountdown()
 T CInstancedResponseSystem::CInstancedResponseSystem(char const*)
 T CInstancedResponseSystem::GetScriptFile()
 T CInstancedResponseSystem::Init()
 T CInstancedResponseSystem::LevelInitPostEntity()
 T CInstancedResponseSystem::Release()
 T CInstancedResponseSystem::~CInstancedResponseSystem()
 T CInstancedSceneEntity::DispatchEndFace(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CInstancedSceneEntity::DispatchEndMoveTo(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CInstancedSceneEntity::DispatchEndSequence(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CInstancedSceneEntity::DispatchPauseScene(CChoreoScene*, char const*)
 T CInstancedSceneEntity::DispatchStartFace(CChoreoScene*, CBaseFlex*, CBaseEntity*, CChoreoEvent*)
 T CInstancedSceneEntity::DispatchStartMoveTo(CChoreoScene*, CBaseFlex*, CBaseEntity*, CChoreoEvent*)
 T CInstancedSceneEntity::DispatchStartSequence(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CInstancedSceneEntity::DoThink(float)
 T CInstancedSceneEntity::EstimateLength()
 T CInstancedSceneEntity::FindNamedActor(char const*)
 T CInstancedSceneEntity::FindNamedEntity(char const*)
 T CInstancedSceneEntity::GetDataDescMap()
 T CInstancedSceneEntity::GetPostSpeakDelay()
 T CInstancedSceneEntity::GetPreDelay()
 T CInstancedSceneEntity::OnLoaded()
 T CInstancedSceneEntity::OnRestore()
 T CInstancedSceneEntity::SetPostSpeakDelay(float)
 T CInstancedSceneEntity::SetPreDelay(float)
 T CInstancedSceneEntity::StartPlayback()
 T CInstancedSceneEntity::~CInstancedSceneEntity()
 T CItem::ActivateWhenAtRest(float)
 T CItem::CItem()
 T CItem::ComeToRest()
 T CItem::CreateItemVPhysicsObject()
 T CItem::FallThink()
 T CItem::GetDataDescMap()
 T CItem::ItemCanBeTouchedByPlayer(CBasePlayer*)
 T CItem::ItemTouch(CBaseEntity*)
 T CItem::Materialize()
 T CItem::MyTouch(CBasePlayer*)
 T CItem::ObjectCaps()
 T CItem::OnEntityEvent(EntityEvent_t, void*)
 T CItem::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T CItem::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CItem::PhysicsSolidMaskForEntity() const
 T CItem::Precache()
 T CItem::Respawn()
 T CItem::Spawn()
 T CItem::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CItem::~CItem()
 T CItemBattery::MyTouch(CBasePlayer*)
 T CItemBattery::Precache()
 T CItemBattery::Spawn()
 T CItemBattery::~CItemBattery()
 T CItemSoda::CanThink()
 T CItemSoda::CanTouch(CBaseEntity*)
 T CItemSoda::GetDataDescMap()
 T CItemSoda::Precache()
 T CItemSoda::Spawn()
 T CItemSoda::~CItemSoda()
 T CItemSuit::MyTouch(CBasePlayer*)
 T CItemSuit::Precache()
 T CItemSuit::Spawn()
 T CItemSuit::~CItemSuit()
 T CItem_AR2AltFireRound::MyTouch(CBasePlayer*)
 T CItem_AR2AltFireRound::Precache()
 T CItem_AR2AltFireRound::Spawn()
 T CItem_AR2AltFireRound::~CItem_AR2AltFireRound()
 T CItem_AR2_Grenade::MyTouch(CBasePlayer*)
 T CItem_AR2_Grenade::Precache()
 T CItem_AR2_Grenade::Spawn()
 T CItem_AR2_Grenade::~CItem_AR2_Grenade()
 T CItem_AmmoCrate::CrateThink()
 T CItem_AmmoCrate::CreateVPhysics()
 T CItem_AmmoCrate::GetDataDescMap()
 T CItem_AmmoCrate::HandleAnimEvent(animevent_t*)
 T CItem_AmmoCrate::InputKill(inputdata_t&)
 T CItem_AmmoCrate::ObjectCaps()
 T CItem_AmmoCrate::OnRestore()
 T CItem_AmmoCrate::OnTakeDamage(CTakeDamageInfo const&)
 T CItem_AmmoCrate::Precache()
 T CItem_AmmoCrate::Spawn()
 T CItem_AmmoCrate::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CItem_AmmoCrate::~CItem_AmmoCrate()
 T CItem_Box357Rounds::MyTouch(CBasePlayer*)
 T CItem_Box357Rounds::Precache()
 T CItem_Box357Rounds::Spawn()
 T CItem_Box357Rounds::~CItem_Box357Rounds()
 T CItem_BoxBuckshot::MyTouch(CBasePlayer*)
 T CItem_BoxBuckshot::Precache()
 T CItem_BoxBuckshot::Spawn()
 T CItem_BoxBuckshot::~CItem_BoxBuckshot()
 T CItem_BoxFlareRounds::MyTouch(CBasePlayer*)
 T CItem_BoxFlareRounds::Precache()
 T CItem_BoxFlareRounds::Spawn()
 T CItem_BoxFlareRounds::~CItem_BoxFlareRounds()
 T CItem_BoxLRounds::MyTouch(CBasePlayer*)
 T CItem_BoxLRounds::Precache()
 T CItem_BoxLRounds::Spawn()
 T CItem_BoxLRounds::~CItem_BoxLRounds()
 T CItem_BoxMRounds::MyTouch(CBasePlayer*)
 T CItem_BoxMRounds::Precache()
 T CItem_BoxMRounds::Spawn()
 T CItem_BoxMRounds::~CItem_BoxMRounds()
 T CItem_BoxSRounds::MyTouch(CBasePlayer*)
 T CItem_BoxSRounds::Precache()
 T CItem_BoxSRounds::Spawn()
 T CItem_BoxSRounds::~CItem_BoxSRounds()
 T CItem_BoxSniperRounds::MyTouch(CBasePlayer*)
 T CItem_BoxSniperRounds::Precache()
 T CItem_BoxSniperRounds::Spawn()
 T CItem_BoxSniperRounds::~CItem_BoxSniperRounds()
 T CItem_BoxXBowRounds::MyTouch(CBasePlayer*)
 T CItem_BoxXBowRounds::Precache()
 T CItem_BoxXBowRounds::Spawn()
 T CItem_BoxXBowRounds::~CItem_BoxXBowRounds()
 T CItem_DynamicResupply::Activate()
 T CItem_DynamicResupply::CItem_DynamicResupply()
 T CItem_DynamicResupply::CheckPVSThink()
 T CItem_DynamicResupply::ComputeAmmoRatios(CItem_DynamicResupply*, CBasePlayer*, int, SpawnInfo_t*)
 T CItem_DynamicResupply::ComputeHealthRatios(CItem_DynamicResupply*, CBasePlayer*, int, SpawnInfo_t*)
 T CItem_DynamicResupply::FindPotentialItems(int, DynamicResupplyItems_t*, int, SpawnInfo_t*)
 T CItem_DynamicResupply::GetDataDescMap()
 T CItem_DynamicResupply::InputBecomeMaster(inputdata_t&)
 T CItem_DynamicResupply::InputCalculateType(inputdata_t&)
 T CItem_DynamicResupply::InputKill(inputdata_t&)
 T CItem_DynamicResupply::Precache()
 T CItem_DynamicResupply::Spawn()
 T CItem_DynamicResupply::SpawnDynamicItem(CBasePlayer*)
 T CItem_DynamicResupply::SpawnFullItem(CItem_DynamicResupply*, CBasePlayer*, int)
 T CItem_DynamicResupply::SpawnItemFromRatio(int, DynamicResupplyItems_t*, int, SpawnInfo_t*, Vector*)
 T CItem_DynamicResupply::~CItem_DynamicResupply()
 T CItem_FlareRound::MyTouch(CBasePlayer*)
 T CItem_FlareRound::Precache()
 T CItem_FlareRound::Spawn()
 T CItem_FlareRound::~CItem_FlareRound()
 T CItem_ItemCrate::GetDataDescMap()
 T CItem_ItemCrate::InputKill(inputdata_t&)
 T CItem_ItemCrate::ObjectCaps()
 T CItem_ItemCrate::OnBreak(Vector const&, Vector const&, CBaseEntity*)
 T CItem_ItemCrate::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CItem_ItemCrate::OnTakeDamage(CTakeDamageInfo const&)
 T CItem_ItemCrate::Precache()
 T CItem_ItemCrate::Spawn()
 T CItem_ItemCrate::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CItem_ItemCrate::~CItem_ItemCrate()
 T CItem_LargeBox357Rounds::MyTouch(CBasePlayer*)
 T CItem_LargeBox357Rounds::Precache()
 T CItem_LargeBox357Rounds::Spawn()
 T CItem_LargeBox357Rounds::~CItem_LargeBox357Rounds()
 T CItem_LargeBoxLRounds::MyTouch(CBasePlayer*)
 T CItem_LargeBoxLRounds::Precache()
 T CItem_LargeBoxLRounds::Spawn()
 T CItem_LargeBoxLRounds::~CItem_LargeBoxLRounds()
 T CItem_LargeBoxMRounds::MyTouch(CBasePlayer*)
 T CItem_LargeBoxMRounds::Precache()
 T CItem_LargeBoxMRounds::Spawn()
 T CItem_LargeBoxMRounds::~CItem_LargeBoxMRounds()
 T CItem_LargeBoxSRounds::MyTouch(CBasePlayer*)
 T CItem_LargeBoxSRounds::Precache()
 T CItem_LargeBoxSRounds::Spawn()
 T CItem_LargeBoxSRounds::~CItem_LargeBoxSRounds()
 T CItem_RPG_Round::MyTouch(CBasePlayer*)
 T CItem_RPG_Round::Precache()
 T CItem_RPG_Round::Spawn()
 T CItem_RPG_Round::~CItem_RPG_Round()
 T CKeepUpright::Activate()
 T CKeepUpright::GetDataDescMap()
 T CKeepUpright::InputSetAngularLimit(inputdata_t&)
 T CKeepUpright::InputTurnOff(inputdata_t&)
 T CKeepUpright::InputTurnOn(inputdata_t&)
 T CKeepUpright::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)
 T CKeepUpright::Spawn()
 T CKeepUpright::~CKeepUpright()
 T CKeyValuesErrorStack::ReportError(char const*)
 T CLagCompensationManager::BacktrackPlayer(CBasePlayer*, float)
 T CLagCompensationManager::CLagCompensationManager(char const*)
 T CLagCompensationManager::FinishLagCompensation(CBasePlayer*)
 T CLagCompensationManager::FrameUpdatePostEntityThink()
 T CLagCompensationManager::IsCurrentlyDoingLagCompensation() const
 T CLagCompensationManager::LevelShutdownPostEntity()
 T CLagCompensationManager::Shutdown()
 T CLagCompensationManager::StartLagCompensation(CBasePlayer*, CUserCmd*)
 T CLagCompensationManager::~CLagCompensationManager()
 T CLaserDot::Create(Vector const&, CBaseEntity*, bool)
 T CLaserDot::GetDataDescMap()
 T CLaserDot::GetServerClass()
 T CLaserDot::ObjectCaps()
 T CLaserDot::YouForgotToImplementOrDeclareServerClass()
 T CLaserDot::~CLaserDot()
 T CLight::FadeThink()
 T CLight::GetDataDescMap()
 T CLight::InputFadeToPattern(inputdata_t&)
 T CLight::InputSetPattern(inputdata_t&)
 T CLight::InputToggle(inputdata_t&)
 T CLight::InputTurnOff(inputdata_t&)
 T CLight::InputTurnOn(inputdata_t&)
 T CLight::KeyValue(char const*, char const*)
 T CLight::Spawn()
 T CLight::TurnOff()
 T CLight::TurnOn()
 T CLight::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CLight::~CLight()
 T CLightGlow::Activate()
 T CLightGlow::CLightGlow()
 T CLightGlow::GetDataDescMap()
 T CLightGlow::GetServerClass()
 T CLightGlow::InputColor(inputdata_t&)
 T CLightGlow::Spawn()
 T CLightGlow::UpdateTransmitState()
 T CLightGlow::YouForgotToImplementOrDeclareServerClass()
 T CLightGlow::~CLightGlow()
 T CListMissions::Inspect(CTacticalMission const&)
 T CLogicActiveAutosave::GetDataDescMap()
 T CLogicActiveAutosave::InputDisable(inputdata_t&)
 T CLogicActiveAutosave::InputEnable(inputdata_t&)
 T CLogicActiveAutosave::SaveThink()
 T CLogicActiveAutosave::~CLogicActiveAutosave()
 T CLogicAuto::Activate()
 T CLogicAuto::GetDataDescMap()
 T CLogicAuto::ObjectCaps()
 T CLogicAuto::Think()
 T CLogicAuto::~CLogicAuto()
 T CLogicAutosave::GetDataDescMap()
 T CLogicAutosave::InputSave(inputdata_t&)
 T CLogicAutosave::InputSaveDangerous(inputdata_t&)
 T CLogicAutosave::InputSetMinHitpointsThreshold(inputdata_t&)
 T CLogicAutosave::~CLogicAutosave()
 T CLogicBranch::AddLogicBranchListener(CBaseEntity*)
 T CLogicBranch::DrawDebugTextOverlays()
 T CLogicBranch::GetDataDescMap()
 T CLogicBranch::InputSetValue(inputdata_t&)
 T CLogicBranch::InputSetValueTest(inputdata_t&)
 T CLogicBranch::InputTest(inputdata_t&)
 T CLogicBranch::InputToggle(inputdata_t&)
 T CLogicBranch::InputToggleTest(inputdata_t&)
 T CLogicBranch::UpdateOnRemove()
 T CLogicBranch::UpdateValue(bool, CBaseEntity*, CLogicBranch::LogicBranchFire_t)
 T CLogicBranch::~CLogicBranch()
 T CLogicBranchList::Activate()
 T CLogicBranchList::DoTest(CBaseEntity*)
 T CLogicBranchList::DrawDebugTextOverlays()
 T CLogicBranchList::GetDataDescMap()
 T CLogicBranchList::InputTest(inputdata_t&)
 T CLogicBranchList::Input_OnLogicBranchChanged(inputdata_t&)
 T CLogicBranchList::Input_OnLogicBranchRemoved(inputdata_t&)
 T CLogicBranchList::Spawn()
 T CLogicBranchList::~CLogicBranchList()
 T CLogicCase::GetDataDescMap()
 T CLogicCase::InputPickRandom(inputdata_t&)
 T CLogicCase::InputPickRandomShuffle(inputdata_t&)
 T CLogicCase::InputValue(inputdata_t&)
 T CLogicCase::Spawn()
 T CLogicCase::~CLogicCase()
 T CLogicCollisionPair::Activate()
 T CLogicCollisionPair::EnableCollisions(bool)
 T CLogicCollisionPair::GetDataDescMap()
 T CLogicCollisionPair::InputDisableCollisions(inputdata_t&)
 T CLogicCollisionPair::InputEnableCollisions(inputdata_t&)
 T CLogicCollisionPair::~CLogicCollisionPair()
 T CLogicCompare::DoCompare(CBaseEntity*, float)
 T CLogicCompare::DrawDebugTextOverlays()
 T CLogicCompare::GetDataDescMap()
 T CLogicCompare::InputCompare(inputdata_t&)
 T CLogicCompare::InputSetCompareValue(inputdata_t&)
 T CLogicCompare::InputSetValue(inputdata_t&)
 T CLogicCompare::InputSetValueCompare(inputdata_t&)
 T CLogicCompare::~CLogicCompare()
 T CLogicCompareInteger::GetDataDescMap()
 T CLogicCompareInteger::InputCompareValues(inputdata_t&)
 T CLogicCompareInteger::InputValue(inputdata_t&)
 T CLogicCompareInteger::~CLogicCompareInteger()
 T CLogicLineToEntity::Activate()
 T CLogicLineToEntity::GetDataDescMap()
 T CLogicLineToEntity::Spawn()
 T CLogicLineToEntity::Think()
 T CLogicLineToEntity::~CLogicLineToEntity()
 T CLogicMeasureMovement::Activate()
 T CLogicMeasureMovement::GetDataDescMap()
 T CLogicMeasureMovement::InputDisable(inputdata_t&)
 T CLogicMeasureMovement::InputEnable(inputdata_t&)
 T CLogicMeasureMovement::InputSetMeasureReference(inputdata_t&)
 T CLogicMeasureMovement::InputSetMeasureTarget(inputdata_t&)
 T CLogicMeasureMovement::InputSetTarget(inputdata_t&)
 T CLogicMeasureMovement::InputSetTargetReference(inputdata_t&)
 T CLogicMeasureMovement::InputSetTargetScale(inputdata_t&)
 T CLogicMeasureMovement::MeasureThink()
 T CLogicMeasureMovement::SetMeasureTarget(char const*)
 T CLogicMeasureMovement::~CLogicMeasureMovement()
 T CLogicNavigation::Activate()
 T CLogicNavigation::GetDataDescMap()
 T CLogicNavigation::InputToggle(inputdata_t&)
 T CLogicNavigation::InputTurnOff(inputdata_t&)
 T CLogicNavigation::InputTurnOn(inputdata_t&)
 T CLogicNavigation::KeyValue(char const*, char const*)
 T CLogicNavigation::OnEntitySpawned(CBaseEntity*)
 T CLogicNavigation::UpdateOnRemove()
 T CLogicNavigation::UpdateProperty()
 T CLogicNavigation::~CLogicNavigation()
 T CLogicPlayerProxy::Activate()
 T CLogicPlayerProxy::GetDataDescMap()
 T CLogicPlayerProxy::InputDisableCappedPhysicsDamage(inputdata_t&)
 T CLogicPlayerProxy::InputEnableCappedPhysicsDamage(inputdata_t&)
 T CLogicPlayerProxy::InputLowerWeapon(inputdata_t&)
 T CLogicPlayerProxy::InputRequestAmmoState(inputdata_t&)
 T CLogicPlayerProxy::InputRequestPlayerHealth(inputdata_t&)
 T CLogicPlayerProxy::InputSetFlashlightNormalDrain(inputdata_t&)
 T CLogicPlayerProxy::InputSetFlashlightSlowDrain(inputdata_t&)
 T CLogicPlayerProxy::InputSetLocatorTargetEntity(inputdata_t&)
 T CLogicPlayerProxy::InputSetPlayerHealth(inputdata_t&)
 T CLogicPlayerProxy::PassesDamageFilter(CTakeDamageInfo const&)
 T CLogicPlayerProxy::~CLogicPlayerProxy()
 T CLogicRelay::Activate()
 T CLogicRelay::GetDataDescMap()
 T CLogicRelay::InputCancelPending(inputdata_t&)
 T CLogicRelay::InputDisable(inputdata_t&)
 T CLogicRelay::InputEnable(inputdata_t&)
 T CLogicRelay::InputEnableRefire(inputdata_t&)
 T CLogicRelay::InputToggle(inputdata_t&)
 T CLogicRelay::InputTrigger(inputdata_t&)
 T CLogicRelay::Think()
 T CLogicRelay::~CLogicRelay()
 T CLogicalEntity::KeyValue(char const*, char const*)
 T CLookDoor::GetDataDescMap()
 T CLookDoor::InputInvertOff(inputdata_t&)
 T CLookDoor::InputInvertOn(inputdata_t&)
 T CLookDoor::MoveThink()
 T CLookDoor::Spawn()
 T CLookDoor::~CLookDoor()
 T CLookDoorThinker::GetDataDescMap()
 T CLookDoorThinker::LookThink()
 T CLookDoorThinker::~CLookDoorThinker()
 T CMapLoadEntityFilter::CreateNextEntity(char const*)
 T CMapLoadEntityFilter::ShouldCreateEntity(char const*)
 T CMaterialModifyControl::CMaterialModifyControl()
 T CMaterialModifyControl::GetDataDescMap()
 T CMaterialModifyControl::GetServerClass()
 T CMaterialModifyControl::InputStartAnimSequence(inputdata_t&)
 T CMaterialModifyControl::InputStartFloatLerp(inputdata_t&)
 T CMaterialModifyControl::KeyValue(char const*, char const*)
 T CMaterialModifyControl::ObjectCaps()
 T CMaterialModifyControl::SetMaterialVar(inputdata_t&)
 T CMaterialModifyControl::SetMaterialVarToCurrentTime(inputdata_t&)
 T CMaterialModifyControl::ShouldTransmit(CCheckTransmitInfo const*)
 T CMaterialModifyControl::Spawn()
 T CMaterialModifyControl::UpdateTransmitState()
 T CMaterialModifyControl::YouForgotToImplementOrDeclareServerClass()
 T CMaterialModifyControl::~CMaterialModifyControl()
 T CMaterialReference::CMaterialReference(char const*, char const*, bool)
 T CMaterialReference::Init(char const*, char const*, bool)
 T CMaterialReference::~CMaterialReference()
 T CMathColorBlend::GetDataDescMap()
 T CMathColorBlend::InputValue(inputdata_t&)
 T CMathColorBlend::Spawn()
 T CMathColorBlend::~CMathColorBlend()
 T CMathCounter::DrawDebugTextOverlays()
 T CMathCounter::GetDataDescMap()
 T CMathCounter::InputAdd(inputdata_t&)
 T CMathCounter::InputDisable(inputdata_t&)
 T CMathCounter::InputDivide(inputdata_t&)
 T CMathCounter::InputEnable(inputdata_t&)
 T CMathCounter::InputGetValue(inputdata_t&)
 T CMathCounter::InputMultiply(inputdata_t&)
 T CMathCounter::InputSetHitMax(inputdata_t&)
 T CMathCounter::InputSetHitMin(inputdata_t&)
 T CMathCounter::InputSetValue(inputdata_t&)
 T CMathCounter::InputSetValueNoFire(inputdata_t&)
 T CMathCounter::InputSubtract(inputdata_t&)
 T CMathCounter::KeyValue(char const*, char const*)
 T CMathCounter::Spawn()
 T CMathCounter::UpdateOutValue(CBaseEntity*, float)
 T CMathCounter::~CMathCounter()
 T CMathRemap::GetDataDescMap()
 T CMathRemap::InputDisable(inputdata_t&)
 T CMathRemap::InputEnable(inputdata_t&)
 T CMathRemap::InputValue(inputdata_t&)
 T CMathRemap::Spawn()
 T CMathRemap::~CMathRemap()
 T CMattsPipe::GetWorldModel() const
 T CMattsPipe::SetPickupTouch()
 T CMattsPipe::~CMattsPipe()
 T CMemberFunctor0<CParallelProcessor<QueryCacheUpdateRecord_t, CFuncJobItemProcessor<QueryCacheUpdateRecord_t> >*, void (CParallelProcessor<QueryCacheUpdateRecord_t, CFuncJobItemProcessor<QueryCacheUpdateRecord_t> >::*)(), CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>::operator()()
 T CMemberFunctor0<CParallelProcessor<QueryCacheUpdateRecord_t, CFuncJobItemProcessor<QueryCacheUpdateRecord_t> >*, void (CParallelProcessor<QueryCacheUpdateRecord_t, CFuncJobItemProcessor<QueryCacheUpdateRecord_t> >::*)(), CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>::~CMemberFunctor0()
 T CMemberFunctor0<CPropCombineBall*, void (CPropCombineBall::*)(), CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>::operator()()
 T CMemberFunctor0<CPropCombineBall*, void (CPropCombineBall::*)(), CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>::~CMemberFunctor0()
 T CMemberFunctor1<CAI_Navigator*, bool (CAI_Navigator::*)(Vector const&), Vector, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>::operator()()
 T CMemberFunctor1<CAI_Navigator*, bool (CAI_Navigator::*)(Vector const&), Vector, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>::~CMemberFunctor1()
 T CMemberFunctor1<CNPC_RollerMine*, void (CNPC_RollerMine::*)(CBaseEntity*), CBaseEntity*, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>::operator()()
 T CMemberFunctor1<CNPC_RollerMine*, void (CNPC_RollerMine::*)(CBaseEntity*), CBaseEntity*, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>::~CMemberFunctor1()
 T CMemberFunctor2<CAI_Navigator*, bool (CAI_Navigator::*)(AI_NavGoal_t const&, unsigned int), AI_NavGoal_t, unsigned int, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>::operator()()
 T CMemberFunctor2<CAI_Navigator*, bool (CAI_Navigator::*)(AI_NavGoal_t const&, unsigned int), AI_NavGoal_t, unsigned int, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>::~CMemberFunctor2()
 T CMemberFunctor3<CBreakableProp*, void (CBreakableProp::*)(Vector const&, Vector const&, QAngle const&), Vector, Vector, QAngle, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>::operator()()
 T CMemberFunctor3<CBreakableProp*, void (CBreakableProp::*)(Vector const&, Vector const&, QAngle const&), Vector, Vector, QAngle, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>::~CMemberFunctor3()
 T CMemoryStack::CMemoryStack()
 T CMemoryStack::CommitTo(unsigned char*)
 T CMemoryStack::FreeAll(bool)
 T CMemoryStack::Init(unsigned int, unsigned int, unsigned int, unsigned int)
 T CMemoryStack::~CMemoryStack()
 T CMessage::GetDataDescMap()
 T CMessage::InputShowMessage(inputdata_t&)
 T CMessage::Precache()
 T CMessage::Spawn()
 T CMessage::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CMessage::~CMessage()
 T CMessageEntity::Activate()
 T CMessageEntity::GetDataDescMap()
 T CMessageEntity::InputDisable(inputdata_t&)
 T CMessageEntity::InputEnable(inputdata_t&)
 T CMessageEntity::Spawn()
 T CMessageEntity::Think()
 T CMessageEntity::UpdateOnRemove()
 T CMessageEntity::~CMessageEntity()
 T CMissile::AccelerateThink()
 T CMissile::AugerHealth()
 T CMissile::AugerThink()
 T CMissile::Classify()
 T CMissile::ComputeActualDotPosition(CLaserDot*, Vector*, float*)
 T CMissile::Create(Vector const&, QAngle const&, edict_t*)
 T CMissile::CreateSmokeTrail()
 T CMissile::DoExplosion()
 T CMissile::DumbFire()
 T CMissile::Event_Killed(CTakeDamageInfo const&)
 T CMissile::Explode()
 T CMissile::GetDamage()
 T CMissile::GetDataDescMap()
 T CMissile::GetShootPosition(CLaserDot*, Vector*)
 T CMissile::IgniteThink()
 T CMissile::MissileTouch(CBaseEntity*)
 T CMissile::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CMissile::PhysicsSolidMaskForEntity() const
 T CMissile::Precache()
 T CMissile::SeekThink()
 T CMissile::SetDamage(float)
 T CMissile::ShotDown()
 T CMissile::Spawn()
 T CMissile::~CMissile()
 T CModelSoundsCache::BuildAnimationEventSoundList(CStudioHdr*, CUtlVector<unsigned short, CUtlMemory<unsigned short, int> >&)
 T CModelSoundsCache::CModelSoundsCache()
 T CModelSoundsCache::FindOrAddScriptSound(CUtlVector<unsigned short, CUtlMemory<unsigned short, int> >&, char const*)
 T CModelSoundsCache::PrecacheSoundList()
 T CModelSoundsCache::Rebuild(char const*)
 T CModelSoundsCache::Restore(CUtlBuffer&)
 T CModelSoundsCache::Save(CUtlBuffer&)
 T CModelSoundsCacheSaver::LevelInitPostEntity()
 T CModelSoundsCacheSaver::LevelShutdownPostEntity()
 T CModelSoundsCacheSaver::~CModelSoundsCacheSaver()
 T CMomentaryRotButton::CreateVPhysics()
 T CMomentaryRotButton::Disable()
 T CMomentaryRotButton::DrawDebugTextOverlays()
 T CMomentaryRotButton::Enable()
 T CMomentaryRotButton::GetDataDescMap()
 T CMomentaryRotButton::InputDisable(inputdata_t&)
 T CMomentaryRotButton::InputDisableUpdateTarget(inputdata_t&)
 T CMomentaryRotButton::InputEnable(inputdata_t&)
 T CMomentaryRotButton::InputEnableUpdateTarget(inputdata_t&)
 T CMomentaryRotButton::InputSetPosition(inputdata_t&)
 T CMomentaryRotButton::InputSetPositionImmediately(inputdata_t&)
 T CMomentaryRotButton::Lock()
 T CMomentaryRotButton::ObjectCaps()
 T CMomentaryRotButton::PlaySound()
 T CMomentaryRotButton::ReturnMoveDone()
 T CMomentaryRotButton::SetPositionMoveDone()
 T CMomentaryRotButton::Spawn()
 T CMomentaryRotButton::Unlock()
 T CMomentaryRotButton::UpdateSelf(float, bool)
 T CMomentaryRotButton::UpdateThink()
 T CMomentaryRotButton::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CMomentaryRotButton::UseMoveDone()
 T CMomentaryRotButton::~CMomentaryRotButton()
 T CMortarShell::Create(Vector const&, Vector const&, Vector const&, float, float, string_t)
 T CMortarShell::FadeThink()
 T CMortarShell::FixUpImpactPoint(Vector const&, Vector const&, Vector*, Vector*)
 T CMortarShell::FlyThink()
 T CMortarShell::GetDataDescMap()
 T CMortarShell::GetServerClass()
 T CMortarShell::Impact()
 T CMortarShell::Precache()
 T CMortarShell::Spawn()
 T CMortarShell::UpdateTransmitState()
 T CMortarShell::Warn()
 T CMortarShell::YouForgotToImplementOrDeclareServerClass()
 T CMortarShell::~CMortarShell()
 T CMotorController::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)
 T CMoveHelperServer::AddToTouched(CGameTrace const&, Vector const&)
 T CMoveHelperServer::Con_NPrintf(int, char const*, ...)
 T CMoveHelperServer::GetName(CBaseHandle) const
 T CMoveHelperServer::GetSurfaceProps()
 T CMoveHelperServer::IsWorldEntity(CBaseHandle const&)
 T CMoveHelperServer::PlaybackEventFull(int, int, unsigned short, float, Vector&, Vector&, float, float, int, int, int, int)
 T CMoveHelperServer::PlayerFallingDamage()
 T CMoveHelperServer::PlayerSetAnimation(PLAYER_ANIM)
 T CMoveHelperServer::ProcessImpacts()
 T CMoveHelperServer::ResetTouchList()
 T CMoveHelperServer::SetHost(CBasePlayer*)
 T CMoveHelperServer::StartSound(Vector const&, char const*)
 T CMoveHelperServer::StartSound(Vector const&, int, char const*, float, soundlevel_t, int, int)
 T CMoveHelperServer::~CMoveHelperServer()
 T CMovementSpeedMod::GetDataDescMap()
 T CMovementSpeedMod::InputSpeedMod(inputdata_t&)
 T CMovementSpeedMod::~CMovementSpeedMod()
 T CMultiInputVar::AddValue(variant_t, int)
 T CMultiInputVar::~CMultiInputVar()
 T CMultiSource::GetDataDescMap()
 T CMultiSource::IsTriggered(CBaseEntity*)
 T CMultiSource::KeyValue(char const*, char const*)
 T CMultiSource::ObjectCaps()
 T CMultiSource::Register()
 T CMultiSource::Spawn()
 T CMultiSource::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CMultiSource::~CMultiSource()
 T CMultiplayRules::AllowAutoTargetCrosshair()
 T CMultiplayRules::AllowDamage(CBaseEntity*, CTakeDamageInfo const&)
 T CMultiplayRules::CMultiplayRules()
 T CMultiplayRules::CanHaveItem(CBasePlayer*, CItem*)
 T CMultiplayRules::CanHavePlayerItem(CBasePlayer*, CBaseCombatWeapon*)
 T CMultiplayRules::ChangeLevel()
 T CMultiplayRules::ClientCommand(CBaseEntity*, CCommand const&)
 T CMultiplayRules::ClientCommandKeyValues(edict_t*, KeyValues*)
 T CMultiplayRules::ClientConnected(edict_t*, char const*, char const*, char*, int)
 T CMultiplayRules::ClientDisconnected(edict_t*)
 T CMultiplayRules::ClientSettingsChanged(CBasePlayer*)
 T CMultiplayRules::Damage_GetNoPhysicsForce()
 T CMultiplayRules::Damage_GetShouldGibCorpse()
 T CMultiplayRules::Damage_GetShouldNotBleed()
 T CMultiplayRules::Damage_GetShowOnHud()
 T CMultiplayRules::Damage_GetTimeBased()
 T CMultiplayRules::Damage_IsTimeBased(int)
 T CMultiplayRules::Damage_NoPhysicsForce(int)
 T CMultiplayRules::Damage_ShouldGibCorpse(int)
 T CMultiplayRules::Damage_ShouldNotBleed(int)
 T CMultiplayRules::Damage_ShowOnHUD(int)
 T CMultiplayRules::DeadPlayerAmmo(CBasePlayer*)
 T CMultiplayRules::DeadPlayerWeapons(CBasePlayer*)
 T CMultiplayRules::DeathNotice(CBasePlayer*, CTakeDamageInfo const&)
 T CMultiplayRules::DetermineMapCycleFilename(char*, int, bool)
 T CMultiplayRules::EndMultiplayerGame()
 T CMultiplayRules::FAllowFlashlight()
 T CMultiplayRules::FAllowNPCs()
 T CMultiplayRules::FPlayerCanRespawn(CBasePlayer*)
 T CMultiplayRules::FPlayerCanTakeDamage(CBasePlayer*, CBaseEntity*, CTakeDamageInfo const&)
 T CMultiplayRules::FShouldSwitchWeapon(CBasePlayer*, CBaseCombatWeapon*)
 T CMultiplayRules::FlHEVChargerRechargeTime()
 T CMultiplayRules::FlHealthChargerRechargeTime()
 T CMultiplayRules::FlItemRespawnTime(CItem*)
 T CMultiplayRules::FlPlayerFallDamage(CBasePlayer*)
 T CMultiplayRules::FlPlayerSpawnTime(CBasePlayer*)
 T CMultiplayRules::FlWeaponRespawnTime(CBaseCombatWeapon*)
 T CMultiplayRules::FlWeaponTryRespawn(CBaseCombatWeapon*)
 T CMultiplayRules::FrameUpdatePostEntityThink()
 T CMultiplayRules::GetDeathScorer(CBaseEntity*, CBaseEntity*)
 T CMultiplayRules::GetDeathScorer(CBaseEntity*, CBaseEntity*, CBaseEntity*)
 T CMultiplayRules::GetLastMajorEventTime()
 T CMultiplayRules::GetNextBestWeapon(CBaseCombatCharacter*, CBaseCombatWeapon*)
 T CMultiplayRules::GetNextLevelName(char*, int, bool)
 T CMultiplayRules::GetPlayerSpawnSpot(CBasePlayer*)
 T CMultiplayRules::GetTaggedConVarList(KeyValues*)
 T CMultiplayRules::GetTeamID(CBaseEntity*)
 T CMultiplayRules::GoToIntermission()
 T CMultiplayRules::HandleTimeLimitChange()
 T CMultiplayRules::HaveAllPlayersSpeakConceptIfAllowed(int, int, char const*)
 T CMultiplayRules::IPointsForKill(CBasePlayer*, CBasePlayer*)
 T CMultiplayRules::Init()
 T CMultiplayRules::InitCustomResponseRulesDicts()
 T CMultiplayRules::InitHUD(CBasePlayer*)
 T CMultiplayRules::IsAllowedToSpawn(CBaseEntity*)
 T CMultiplayRules::IsCoOp()
 T CMultiplayRules::IsDeathmatch()
 T CMultiplayRules::IsLoadingBugBaitReport()
 T CMultiplayRules::IsManualMapChangeOkay(char const**)
 T CMultiplayRules::IsMultiplayer()
 T CMultiplayRules::ItemShouldRespawn(CItem*)
 T CMultiplayRules::LoadMapCycleFile()
 T CMultiplayRules::LoadMapCycleFileIntoVector(char const*, CUtlVector<char*, CUtlMemory<char*, int> >&)
 T CMultiplayRules::LoadVoiceCommandScript()
 T CMultiplayRules::PlayFootstepSounds(CBasePlayer*)
 T CMultiplayRules::PlayTextureSounds()
 T CMultiplayRules::PlayerCanHearChat(CBasePlayer*, CBasePlayer*)
 T CMultiplayRules::PlayerGotAmmo(CBaseCombatCharacter*, char*, int)
 T CMultiplayRules::PlayerGotItem(CBasePlayer*, CItem*)
 T CMultiplayRules::PlayerKilled(CBasePlayer*, CTakeDamageInfo const&)
 T CMultiplayRules::PlayerRelationship(CBaseEntity*, CBaseEntity*)
 T CMultiplayRules::PlayerSpawn(CBasePlayer*)
 T CMultiplayRules::PlayerThink(CBasePlayer*)
 T CMultiplayRules::RawLoadMapCycleFileIntoVector(char const*, CUtlVector<char*, CUtlMemory<char*, int> >&)
 T CMultiplayRules::RefreshSkillData(bool)
 T CMultiplayRules::ResetMapCycleTimeStamp()
 T CMultiplayRules::ShouldDrawHeadLabels()
 T CMultiplayRules::ShutdownCustomResponseRulesDicts()
 T CMultiplayRules::SkipNextMapInCycle()
 T CMultiplayRules::SwitchToNextBestWeapon(CBaseCombatCharacter*, CBaseCombatWeapon*)
 T CMultiplayRules::Think()
 T CMultiplayRules::UseSuicidePenalty()
 T CMultiplayRules::VecItemRespawnAngles(CItem*)
 T CMultiplayRules::VecItemRespawnSpot(CItem*)
 T CMultiplayRules::VecWeaponRespawnSpot(CBaseCombatWeapon*)
 T CMultiplayRules::VoiceCommand(CBaseMultiplayerPlayer*, int, int)
 T CMultiplayRules::WeaponShouldRespawn(CBaseCombatWeapon*)
 T CMultiplayRules::~CMultiplayRules()
 T CMultiplayer_Expresser::AllowMultipleScenes()
 T CMultiplayer_Expresser::DisallowMultipleScenes()
 T CNPCBaseInteractive<CAI_BaseNPC>::AlyxFinishedInteraction()
 T CNPCBaseInteractive<CAI_BaseNPC>::AlyxStartedInteraction()
 T CNPCBaseInteractive<CAI_BaseNPC>::CanInteractWith(CAI_BaseNPC*)
 T CNPCBaseInteractive<CAI_BaseNPC>::HasBeenInteractedWith()
 T CNPCBaseInteractive<CAI_BaseNPC>::InputPowerdown(inputdata_t&)
 T CNPCBaseInteractive<CAI_BaseNPC>::NotifyInteraction(CAI_BaseNPC*)
 T CNPCBaseInteractive<CAI_BaseNPC>::~CNPCBaseInteractive()
 T CNPCBaseInteractive<CAI_BasePhysicsFlyingBot>::AlyxFinishedInteraction()
 T CNPCBaseInteractive<CAI_BasePhysicsFlyingBot>::AlyxStartedInteraction()
 T CNPCBaseInteractive<CAI_BasePhysicsFlyingBot>::CanInteractWith(CAI_BaseNPC*)
 T CNPCBaseInteractive<CAI_BasePhysicsFlyingBot>::HasBeenInteractedWith()
 T CNPCBaseInteractive<CAI_BasePhysicsFlyingBot>::InputPowerdown(inputdata_t&)
 T CNPCBaseInteractive<CAI_BasePhysicsFlyingBot>::NotifyInteraction(CAI_BaseNPC*)
 T CNPCBaseInteractive<CAI_BasePhysicsFlyingBot>::~CNPCBaseInteractive()
 T CNPCMaker* _CreateEntityTemplate<CNPCMaker>(CNPCMaker*, char const*)
 T CNPCMaker::GetDataDescMap()
 T CNPCMaker::MakeNPC()
 T CNPCMaker::Precache()
 T CNPCMaker::~CNPCMaker()
 T CNPCSpawnDestination::GetDataDescMap()
 T CNPCSpawnDestination::~CNPCSpawnDestination()
 T CNPC_APCDriver::Activate()
 T CNPC_APCDriver::Classify()
 T CNPC_APCDriver::FVisible(CBaseEntity*, int, CBaseEntity**)
 T CNPC_APCDriver::GetClassScheduleIdSpace()
 T CNPC_APCDriver::GetDataDescMap()
 T CNPC_APCDriver::GetSchedulingErrorName()
 T CNPC_APCDriver::IRelationType(CBaseEntity*)
 T CNPC_APCDriver::InputDisableFiring(inputdata_t&)
 T CNPC_APCDriver::InputEnableFiring(inputdata_t&)
 T CNPC_APCDriver::LoadedSchedules()
 T CNPC_APCDriver::PrescheduleThink()
 T CNPC_APCDriver::RangeAttack1Conditions(float, float)
 T CNPC_APCDriver::RangeAttack2Conditions(float, float)
 T CNPC_APCDriver::Spawn()
 T CNPC_APCDriver::SquadSlotName(int)
 T CNPC_APCDriver::WeaponLOSCondition(Vector const&, Vector const&, bool)
 T CNPC_APCDriver::~CNPC_APCDriver()
 T CNPC_Alyx::Classify()
 T CNPC_Alyx::CreateBehaviors()
 T CNPC_Alyx::CreateEmpTool()
 T CNPC_Alyx::DeathSound(CTakeDamageInfo const&)
 T CNPC_Alyx::GetClassScheduleIdSpace()
 T CNPC_Alyx::GetDataDescMap()
 T CNPC_Alyx::GetSchedulingErrorName()
 T CNPC_Alyx::HandleAnimEvent(animevent_t*)
 T CNPC_Alyx::InitCustomSchedules()
 T CNPC_Alyx::IsReadinessCapable()
 T CNPC_Alyx::LoadedSchedules()
 T CNPC_Alyx::NPC_TranslateActivity(Activity)
 T CNPC_Alyx::Precache()
 T CNPC_Alyx::PrescheduleThink()
 T CNPC_Alyx::SelectModel()
 T CNPC_Alyx::SetupAlyxWithoutParent()
 T CNPC_Alyx::ShouldLookForBetterWeapon()
 T CNPC_Alyx::Spawn()
 T CNPC_Alyx::SquadSlotName(int)
 T CNPC_Alyx::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
 T CNPC_Alyx::~CNPC_Alyx()
 T CNPC_Antlion::Activate()
 T CNPC_Antlion::AllowedToBePushed()
 T CNPC_Antlion::BodyTarget(Vector const&, bool)
 T CNPC_Antlion::BuildScheduleTestBits()
 T CNPC_Antlion::Burrow()
 T CNPC_Antlion::BurrowUse(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CNPC_Antlion::CNPC_Antlion()
 T CNPC_Antlion::CanBecomeRagdoll()
 T CNPC_Antlion::CanRunAScriptedNPCInteraction(bool)
 T CNPC_Antlion::CascadePush(Vector const&)
 T CNPC_Antlion::CheckLanding()
 T CNPC_Antlion::ChooseMoveSchedule()
 T CNPC_Antlion::Classify()
 T CNPC_Antlion::ClearBurrowPoint(Vector const&)
 T CNPC_Antlion::CorpseGib(CTakeDamageInfo const&)
 T CNPC_Antlion::CreateBehaviors()
 T CNPC_Antlion::CreateDust(bool)
 T CNPC_Antlion::CreateVPhysics()
 T CNPC_Antlion::Event_Killed(CTakeDamageInfo const&)
 T CNPC_Antlion::FCanCheckAttacks()
 T CNPC_Antlion::FInViewCone(CBaseEntity*)
 T CNPC_Antlion::FInViewCone(Vector const&)
 T CNPC_Antlion::FValidateHintType(CAI_Hint*)
 T CNPC_Antlion::FindBurrow(Vector const&, float, int, bool)
 T CNPC_Antlion::FindChasePosition(Vector const&, Vector&)
 T CNPC_Antlion::Flip(bool)
 T CNPC_Antlion::GatherConditions()
 T CNPC_Antlion::GatherEnemyConditions(CBaseEntity*)
 T CNPC_Antlion::GetAutoAimRadius()
 T CNPC_Antlion::GetClassScheduleIdSpace()
 T CNPC_Antlion::GetDataDescMap()
 T CNPC_Antlion::GetGroundPosition(Vector const&, Vector&)
 T CNPC_Antlion::GetIdealAccel() const
 T CNPC_Antlion::GetMaxJumpSpeed() const
 T CNPC_Antlion::GetPathToSoundFleePoint(int)
 T CNPC_Antlion::GetSchedulingErrorName()
 T CNPC_Antlion::GetSoundInterests()
 T CNPC_Antlion::GetSpitVector(Vector const&, Vector const&, Vector*)
 T CNPC_Antlion::HandleAnimEvent(animevent_t*)
 T CNPC_Antlion::HandleInteraction(int, void*, CBaseCombatCharacter*)
 T CNPC_Antlion::IdleSound()
 T CNPC_Antlion::Ignite(float, bool, float, bool)
 T CNPC_Antlion::InitCustomSchedules()
 T CNPC_Antlion::InnateRange1MaxRange()
 T CNPC_Antlion::InnateRange1MinRange()
 T CNPC_Antlion::InnateWeaponLOSCondition(Vector const&, Vector const&, bool)
 T CNPC_Antlion::InputBurrow(inputdata_t&)
 T CNPC_Antlion::InputBurrowAway(inputdata_t&)
 T CNPC_Antlion::InputDisableJump(inputdata_t&)
 T CNPC_Antlion::InputEnableJump(inputdata_t&)
 T CNPC_Antlion::InputFightToPosition(inputdata_t&)
 T CNPC_Antlion::InputHearBugbait(inputdata_t&)
 T CNPC_Antlion::InputIgnoreBugbait(inputdata_t&)
 T CNPC_Antlion::InputJumpAtTarget(inputdata_t&)
 T CNPC_Antlion::InputStopFightToPosition(inputdata_t&)
 T CNPC_Antlion::InputUnburrow(inputdata_t&)
 T CNPC_Antlion::IsFirmlyOnGround()
 T CNPC_Antlion::IsHeavyDamage(CTakeDamageInfo const&)
 T CNPC_Antlion::IsJumpLegal(Vector const&, Vector const&, Vector const&) const
 T CNPC_Antlion::IsLightDamage(CTakeDamageInfo const&)
 T CNPC_Antlion::IsUnusableNode(int, CAI_Hint*)
 T CNPC_Antlion::IsValidEnemy(CBaseEntity*)
 T CNPC_Antlion::LoadedSchedules()
 T CNPC_Antlion::MaxYawSpeed()
 T CNPC_Antlion::MeleeAttack(float, float, QAngle&, Vector&)
 T CNPC_Antlion::MeleeAttack1Conditions(float, float)
 T CNPC_Antlion::MeleeAttack2Conditions(float, float)
 T CNPC_Antlion::NPC_TranslateActivity(Activity)
 T CNPC_Antlion::NotifyDeadFriend(CBaseEntity*)
 T CNPC_Antlion::OnObstructionPreSteer(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T CNPC_Antlion::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CNPC_Antlion::OverrideMoveFacing(AILocalMoveGoal_t const&, float)
 T CNPC_Antlion::PainSound(CTakeDamageInfo const&)
 T CNPC_Antlion::PopulatePoseParameters()
 T CNPC_Antlion::Precache()
 T CNPC_Antlion::PrescheduleThink()
 T CNPC_Antlion::QueryHearSound(CSound*)
 T CNPC_Antlion::QuerySeeEntity(CBaseEntity*, bool)
 T CNPC_Antlion::RangeAttack1Conditions(float, float)
 T CNPC_Antlion::RunTask(Task_t const*)
 T CNPC_Antlion::SelectFailSchedule(int, int, int)
 T CNPC_Antlion::SelectSchedule()
 T CNPC_Antlion::SetFightTarget(CBaseEntity*)
 T CNPC_Antlion::SetFollowTarget(CBaseEntity*)
 T CNPC_Antlion::SetMoveState(AntlionMoveState_e)
 T CNPC_Antlion::SetWings(bool)
 T CNPC_Antlion::ShouldGib(CTakeDamageInfo const&)
 T CNPC_Antlion::ShouldJump()
 T CNPC_Antlion::ShouldPlayIdleSound()
 T CNPC_Antlion::ShouldResumeFollow()
 T CNPC_Antlion::Spawn()
 T CNPC_Antlion::SquadSlotName(int)
 T CNPC_Antlion::StartTask(Task_t const*)
 T CNPC_Antlion::StopLoopingSounds()
 T CNPC_Antlion::Touch(CBaseEntity*)
 T CNPC_Antlion::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
 T CNPC_Antlion::TranslateSchedule(int)
 T CNPC_Antlion::Unburrow()
 T CNPC_Antlion::UpdateHead()
 T CNPC_Antlion::ValidBurrowPoint(Vector const&)
 T CNPC_Antlion::ZapThink()
 T CNPC_Antlion::~CNPC_Antlion()
 T CNPC_AntlionGuard::Activate()
 T CNPC_AntlionGuard::BecomeRagdollOnClient(Vector const&)
 T CNPC_AntlionGuard::BuildScheduleTestBits()
 T CNPC_AntlionGuard::CNPC_AntlionGuard()
 T CNPC_AntlionGuard::CanBecomeRagdoll()
 T CNPC_AntlionGuard::CanStandAtPoint(Vector const&, Vector*)
 T CNPC_AntlionGuard::CanStandAtShoveTarget(CBaseEntity*, CBaseEntity*, Vector*)
 T CNPC_AntlionGuard::ChargeDamage(CBaseEntity*)
 T CNPC_AntlionGuard::ChargeLookAhead()
 T CNPC_AntlionGuard::ChargeSteer()
 T CNPC_AntlionGuard::Classify()
 T CNPC_AntlionGuard::CreateGlow(CSprite**, char const*)
 T CNPC_AntlionGuard::DeathSound(CTakeDamageInfo const&)
 T CNPC_AntlionGuard::EnemyIsRightInFrontOfMe(CBaseEntity**)
 T CNPC_AntlionGuard::Event_Killed(CTakeDamageInfo const&)
 T CNPC_AntlionGuard::FindPhysicsObjectTarget(PhysicsObjectCriteria_t const&)
 T CNPC_AntlionGuard::GatherConditions()
 T CNPC_AntlionGuard::GetAutoAimRadius()
 T CNPC_AntlionGuard::GetClassScheduleIdSpace()
 T CNPC_AntlionGuard::GetDataDescMap()
 T CNPC_AntlionGuard::GetPhysicsHitPosition(CBaseEntity*, CBaseEntity*, Vector*, float*)
 T CNPC_AntlionGuard::GetPhysicsImpactDamageTable()
 T CNPC_AntlionGuard::GetPhysicsShoveDir(CBaseEntity*, float, Vector*)
 T CNPC_AntlionGuard::GetSchedulingErrorName()
 T CNPC_AntlionGuard::GetServerClass()
 T CNPC_AntlionGuard::GetSoundInterests()
 T CNPC_AntlionGuard::HandleAnimEvent(animevent_t*)
 T CNPC_AntlionGuard::HandleChargeImpact(Vector, CBaseEntity*)
 T CNPC_AntlionGuard::HandleInteraction(int, void*, CBaseCombatCharacter*)
 T CNPC_AntlionGuard::ImpactShock(Vector const&, float, float, CBaseEntity*)
 T CNPC_AntlionGuard::InitCustomSchedules()
 T CNPC_AntlionGuard::InputClearChargeTarget(inputdata_t&)
 T CNPC_AntlionGuard::InputDisableBark(inputdata_t&)
 T CNPC_AntlionGuard::InputDisablePreferPhysicsAttack(inputdata_t&)
 T CNPC_AntlionGuard::InputEnableBark(inputdata_t&)
 T CNPC_AntlionGuard::InputEnablePreferPhysicsAttack(inputdata_t&)
 T CNPC_AntlionGuard::InputRagdoll(inputdata_t&)
 T CNPC_AntlionGuard::InputSetChargeTarget(inputdata_t&)
 T CNPC_AntlionGuard::InputSetShoveTarget(inputdata_t&)
 T CNPC_AntlionGuard::InputSummonedAntlionDied(inputdata_t&)
 T CNPC_AntlionGuard::InputUnburrow(inputdata_t&)
 T CNPC_AntlionGuard::IsHeavyDamage(CTakeDamageInfo const&)
 T CNPC_AntlionGuard::IsLightDamage(CTakeDamageInfo const&)
 T CNPC_AntlionGuard::IsUnreachable(CBaseEntity*)
 T CNPC_AntlionGuard::LoadedSchedules()
 T CNPC_AntlionGuard::MaintainPhysicsTarget()
 T CNPC_AntlionGuard::MaxYawSpeed()
 T CNPC_AntlionGuard::MeleeAttack1Conditions(float, float)
 T CNPC_AntlionGuard::NPC_TranslateActivity(Activity)
 T CNPC_AntlionGuard::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CNPC_AntlionGuard::OverrideMove(float)
 T CNPC_AntlionGuard::OverrideMoveFacing(AILocalMoveGoal_t const&, float)
 T CNPC_AntlionGuard::PopulatePoseParameters()
 T CNPC_AntlionGuard::Precache()
 T CNPC_AntlionGuard::PrescheduleThink()
 T CNPC_AntlionGuard::QueryHearSound(CSound*)
 T CNPC_AntlionGuard::RememberFailedPhysicsTarget(CBaseEntity*)
 T CNPC_AntlionGuard::RunTask(Task_t const*)
 T CNPC_AntlionGuard::SelectCombatSchedule()
 T CNPC_AntlionGuard::SelectFailSchedule(int, int, int)
 T CNPC_AntlionGuard::SelectSchedule()
 T CNPC_AntlionGuard::SelectUnreachableSchedule()
 T CNPC_AntlionGuard::SetHeavyDamageAnim(Vector const&)
 T CNPC_AntlionGuard::ShouldCharge(Vector const&, Vector const&, bool, bool)
 T CNPC_AntlionGuard::ShouldProbeCollideAgainstEntity(CBaseEntity*)
 T CNPC_AntlionGuard::Shove()
 T CNPC_AntlionGuard::Spawn()
 T CNPC_AntlionGuard::SquadSlotName(int)
 T CNPC_AntlionGuard::StartSounds()
 T CNPC_AntlionGuard::StartTask(Task_t const*)
 T CNPC_AntlionGuard::StopLoopingSounds()
 T CNPC_AntlionGuard::SummonAntlions()
 T CNPC_AntlionGuard::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
 T CNPC_AntlionGuard::TranslateSchedule(int)
 T CNPC_AntlionGuard::UpdateEfficiency(bool)
 T CNPC_AntlionGuard::UpdateHead()
 T CNPC_AntlionGuard::UpdateOnRemove()
 T CNPC_AntlionGuard::UpdatePhysicsTarget(bool, float)
 T CNPC_AntlionGuard::YouForgotToImplementOrDeclareServerClass()
 T CNPC_AntlionGuard::~CNPC_AntlionGuard()
 T CNPC_AttackHelicopter::Activate()
 T CNPC_AttackHelicopter::AddSmokeTrail(Vector const&)
 T CNPC_AttackHelicopter::AimCloseToTargetButMiss(CBaseEntity*, float, float, Vector const&, Vector*)
 T CNPC_AttackHelicopter::BlinkLightsThink()
 T CNPC_AttackHelicopter::BloodColor()
 T CNPC_AttackHelicopter::BuildMissTargetList(int, CBaseEntity**)
 T CNPC_AttackHelicopter::BullrushBombs()
 T CNPC_AttackHelicopter::CNPC_AttackHelicopter()
 T CNPC_AttackHelicopter::Classify()
 T CNPC_AttackHelicopter::ComputeAngularVelocity(Vector const&, Vector const&)
 T CNPC_AttackHelicopter::ComputeBullrushLeadingDistance(float, float, bool)
 T CNPC_AttackHelicopter::ComputeVelocity(Vector const&, float, float, float, Vector*)
 T CNPC_AttackHelicopter::CreateBomb(bool, Vector*, bool)
 T CNPC_AttackHelicopter::CreateComponents()
 T CNPC_AttackHelicopter::DoGunCharging()
 T CNPC_AttackHelicopter::DoGunFiring(Vector const&, Vector const&, Vector const&)
 T CNPC_AttackHelicopter::DoGunIdle(Vector const&, Vector const&)
 T CNPC_AttackHelicopter::DoImpactEffect(CGameTrace&, int)
 T CNPC_AttackHelicopter::DoMuzzleFlash()
 T CNPC_AttackHelicopter::DropBombs()
 T CNPC_AttackHelicopter::DropCorpse(int)
 T CNPC_AttackHelicopter::EnemySearchDistance()
 T CNPC_AttackHelicopter::Event_Killed(CTakeDamageInfo const&)
 T CNPC_AttackHelicopter::ExplodeAndThrowChunk(Vector const&)
 T CNPC_AttackHelicopter::FVisible(CBaseEntity*, int, CBaseEntity**)
 T CNPC_AttackHelicopter::FindTrackBlocker(Vector const&, Vector const&)
 T CNPC_AttackHelicopter::FireBullets(FireBulletsInfo_t const&)
 T CNPC_AttackHelicopter::FireElectricityGun()
 T CNPC_AttackHelicopter::FireGun()
 T CNPC_AttackHelicopter::Flight()
 T CNPC_AttackHelicopter::GetAttackSpread(CBaseCombatWeapon*, CBaseEntity*)
 T CNPC_AttackHelicopter::GetClassScheduleIdSpace()
 T CNPC_AttackHelicopter::GetDataDescMap()
 T CNPC_AttackHelicopter::GetMaxSpeed()
 T CNPC_AttackHelicopter::GetMaxSpeedFiring()
 T CNPC_AttackHelicopter::GetSchedulingErrorName()
 T CNPC_AttackHelicopter::GetTracerType()
 T CNPC_AttackHelicopter::Hunt()
 T CNPC_AttackHelicopter::InitCustomSchedules()
 T CNPC_AttackHelicopter::InitializeRotorSound()
 T CNPC_AttackHelicopter::InputBecomeIndestructible(inputdata_t&)
 T CNPC_AttackHelicopter::InputDisableAlwaysTransition(inputdata_t&)
 T CNPC_AttackHelicopter::InputDisableDeadlyShooting(inputdata_t&)
 T CNPC_AttackHelicopter::InputDisablePathVisibilityTests(inputdata_t&)
 T CNPC_AttackHelicopter::InputDropBomb(inputdata_t&)
 T CNPC_AttackHelicopter::InputDropBombAtTarget(inputdata_t&)
 T CNPC_AttackHelicopter::InputDropBombAtTargetAlways(inputdata_t&)
 T CNPC_AttackHelicopter::InputDropBombAtTargetInternal(inputdata_t&, bool)
 T CNPC_AttackHelicopter::InputDropBombDelay(inputdata_t&)
 T CNPC_AttackHelicopter::InputDropBombStraightDown(inputdata_t&)
 T CNPC_AttackHelicopter::InputEnableAlwaysTransition(inputdata_t&)
 T CNPC_AttackHelicopter::InputEnableDeadlyShooting(inputdata_t&)
 T CNPC_AttackHelicopter::InputEnablePathVisibilityTests(inputdata_t&)
 T CNPC_AttackHelicopter::InputGunOff(inputdata_t&)
 T CNPC_AttackHelicopter::InputOutsideTransition(inputdata_t&)
 T CNPC_AttackHelicopter::InputResetIdleTime(inputdata_t&)
 T CNPC_AttackHelicopter::InputSelfDestruct(inputdata_t&)
 T CNPC_AttackHelicopter::InputSetHealthFraction(inputdata_t&)
 T CNPC_AttackHelicopter::InputSetOutsideTransitionTarget(inputdata_t&)
 T CNPC_AttackHelicopter::InputStartAlwaysLeadingVehicle(inputdata_t&)
 T CNPC_AttackHelicopter::InputStartBombExplodeOnContact(inputdata_t&)
 T CNPC_AttackHelicopter::InputStartBombingVehicle(inputdata_t&)
 T CNPC_AttackHelicopter::InputStartBullrushBehavior(inputdata_t&)
 T CNPC_AttackHelicopter::InputStartCarpetBombing(inputdata_t&)
 T CNPC_AttackHelicopter::InputStartContinuousShooting(inputdata_t&)
 T CNPC_AttackHelicopter::InputStartDefaultBehavior(inputdata_t&)
 T CNPC_AttackHelicopter::InputStartFastShooting(inputdata_t&)
 T CNPC_AttackHelicopter::InputStartLongCycleShooting(inputdata_t&)
 T CNPC_AttackHelicopter::InputStartNormalShooting(inputdata_t&)
 T CNPC_AttackHelicopter::InputStartTrailingVehicle(inputdata_t&)
 T CNPC_AttackHelicopter::InputStopBombExplodeOnContact(inputdata_t&)
 T CNPC_AttackHelicopter::InputStopCarpetBombing(inputdata_t&)
 T CNPC_AttackHelicopter::IsBombDropFair(Vector const&, Vector const&)
 T CNPC_AttackHelicopter::IsDeadlyShooting()
 T CNPC_AttackHelicopter::IsValidZapTarget(CBaseEntity*)
 T CNPC_AttackHelicopter::LoadedSchedules()
 T CNPC_AttackHelicopter::ObjectCaps()
 T CNPC_AttackHelicopter::OnTakeDamage(CTakeDamageInfo const&)
 T CNPC_AttackHelicopter::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CNPC_AttackHelicopter::PickDirectionToCircleOfDeath(Vector const&, Vector const&, Vector*)
 T CNPC_AttackHelicopter::PopulatePoseParameters()
 T CNPC_AttackHelicopter::PoseGunTowardTargetDirection(Vector const&)
 T CNPC_AttackHelicopter::Precache()
 T CNPC_AttackHelicopter::PrescheduleThink()
 T CNPC_AttackHelicopter::SetTransmit(CCheckTransmitInfo*, bool)
 T CNPC_AttackHelicopter::ShootAtFacingDirection(Vector const&, Vector const&, bool)
 T CNPC_AttackHelicopter::ShootAtPlayer(Vector const&, Vector const&)
 T CNPC_AttackHelicopter::ShootAtVehicle(Vector const&, Vector const&)
 T CNPC_AttackHelicopter::ShootInsideCircleOfDeath(Vector const&, Vector const&)
 T CNPC_AttackHelicopter::ShouldDropBombs()
 T CNPC_AttackHelicopter::ShouldUseFixedPatrolLogic()
 T CNPC_AttackHelicopter::Spawn()
 T CNPC_AttackHelicopter::SpotlightThink()
 T CNPC_AttackHelicopter::SquadSlotName(int)
 T CNPC_AttackHelicopter::Startup()
 T CNPC_AttackHelicopter::StopLoopingSounds()
 T CNPC_AttackHelicopter::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
 T CNPC_AttackHelicopter::UpdateBullrushState()
 T CNPC_AttackHelicopter::UpdateEnemyLeading()
 T CNPC_AttackHelicopter::UpdateFacingDirection(Vector const&)
 T CNPC_AttackHelicopter::UpdateOnRemove()
 T CNPC_AttackHelicopter::UpdatePerpPathDistance(float)
 T CNPC_AttackHelicopter::UpdateTargetHittability()
 T CNPC_AttackHelicopter::~CNPC_AttackHelicopter()
 T CNPC_Barnacle::Activate()
 T CNPC_Barnacle::AttachRagdollToTongue(CBaseAnimating*)
 T CNPC_Barnacle::AttachTongueToTarget(CBaseEntity*, Vector)
 T CNPC_Barnacle::BarnacleThink()
 T CNPC_Barnacle::BitePrey()
 T CNPC_Barnacle::CNPC_Barnacle()
 T CNPC_Barnacle::Classify()
 T CNPC_Barnacle::ComputeWorldSpaceSurroundingBox(Vector*, Vector*)
 T CNPC_Barnacle::DropTongue()
 T CNPC_Barnacle::Event_Killed(CTakeDamageInfo const&)
 T CNPC_Barnacle::GetClassScheduleIdSpace()
 T CNPC_Barnacle::GetDataDescMap()
 T CNPC_Barnacle::GetSchedulingErrorName()
 T CNPC_Barnacle::GetServerClass()
 T CNPC_Barnacle::HandleAnimEvent(animevent_t*)
 T CNPC_Barnacle::InitCustomSchedules()
 T CNPC_Barnacle::InitTonguePosition()
 T CNPC_Barnacle::InputDropTongue(inputdata_t&)
 T CNPC_Barnacle::InputSetDropTongueSpeed(inputdata_t&)
 T CNPC_Barnacle::LiftNPC(float)
 T CNPC_Barnacle::LiftPhysicsObject(float)
 T CNPC_Barnacle::LiftPlayer(float)
 T CNPC_Barnacle::LiftPrey()
 T CNPC_Barnacle::LiftRagdoll(float)
 T CNPC_Barnacle::LoadedSchedules()
 T CNPC_Barnacle::LostPrey(bool)
 T CNPC_Barnacle::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CNPC_Barnacle::OnTongueTipUpdated()
 T CNPC_Barnacle::PlayerHasIlluminatedNPC(CBasePlayer*, float)
 T CNPC_Barnacle::Precache()
 T CNPC_Barnacle::PullEnemyTorwardsMouth(bool)
 T CNPC_Barnacle::RemoveRagdoll(bool)
 T CNPC_Barnacle::SetAltitude(float)
 T CNPC_Barnacle::Spawn()
 T CNPC_Barnacle::SpawnDeathGibs()
 T CNPC_Barnacle::SpitPrey()
 T CNPC_Barnacle::SprayBlood()
 T CNPC_Barnacle::SquadSlotName(int)
 T CNPC_Barnacle::SwallowPrey()
 T CNPC_Barnacle::TongueTouchEnt(float*)
 T CNPC_Barnacle::UpdatePlayerConstraint()
 T CNPC_Barnacle::WaitForRagdollToSettle(float)
 T CNPC_Barnacle::WaitTillDead()
 T CNPC_Barnacle::YouForgotToImplementOrDeclareServerClass()
 T CNPC_Barnacle::~CNPC_Barnacle()
 T CNPC_Barney::Classify()
 T CNPC_Barney::CreateBehaviors()
 T CNPC_Barney::DeathSound(CTakeDamageInfo const&)
 T CNPC_Barney::GatherConditions()
 T CNPC_Barney::GetClassScheduleIdSpace()
 T CNPC_Barney::GetDataDescMap()
 T CNPC_Barney::GetSchedulingErrorName()
 T CNPC_Barney::GetServerClass()
 T CNPC_Barney::HandleAnimEvent(animevent_t*)
 T CNPC_Barney::LoadedSchedules()
 T CNPC_Barney::OnChangeRunningBehavior(CAI_BehaviorBase*, CAI_BehaviorBase*)
 T CNPC_Barney::Precache()
 T CNPC_Barney::SelectModel()
 T CNPC_Barney::ShouldLookForBetterWeapon()
 T CNPC_Barney::Spawn()
 T CNPC_Barney::SquadSlotName(int)
 T CNPC_Barney::UseFunc(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CNPC_Barney::Weapon_Equip(CBaseCombatWeapon*)
 T CNPC_Barney::YouForgotToImplementOrDeclareServerClass()
 T CNPC_Barney::~CNPC_Barney()
 T CNPC_BaseScanner::AdjustScannerVelocity()
 T CNPC_BaseScanner::AlertSound()
 T CNPC_BaseScanner::AttackDivebomb()
 T CNPC_BaseScanner::AttackDivebombCollide(float)
 T CNPC_BaseScanner::BlendPhyscannonLaunchSpeed()
 T CNPC_BaseScanner::CNPC_BaseScanner()
 T CNPC_BaseScanner::CanBecomeServerRagdoll()
 T CNPC_BaseScanner::ClampMotorForces(Vector&, Vector&)
 T CNPC_BaseScanner::Classify()
 T CNPC_BaseScanner::DeathSound(CTakeDamageInfo const&)
 T CNPC_BaseScanner::DiveBombSoundThink()
 T CNPC_BaseScanner::DrawDebugTextOverlays()
 T CNPC_BaseScanner::Event_Killed(CTakeDamageInfo const&)
 T CNPC_BaseScanner::GetAutoAimRadius()
 T CNPC_BaseScanner::GetClassScheduleIdSpace()
 T CNPC_BaseScanner::GetDataDescMap()
 T CNPC_BaseScanner::GetEngineSound()
 T CNPC_BaseScanner::GetGoalDirection(Vector*)
 T CNPC_BaseScanner::GetGoalDistance()
 T CNPC_BaseScanner::GetHeadTurnRate()
 T CNPC_BaseScanner::GetMaxSpeed()
 T CNPC_BaseScanner::GetScannerSoundPrefix()
 T CNPC_BaseScanner::GetSchedulingErrorName()
 T CNPC_BaseScanner::Gib()
 T CNPC_BaseScanner::HasPhysicsAttacker(float)
 T CNPC_BaseScanner::IdealGoalForMovement(Vector const&, Vector const&, float, float)
 T CNPC_BaseScanner::IdleSound()
 T CNPC_BaseScanner::InitCustomSchedules()
 T CNPC_BaseScanner::InputSetDistanceOverride(inputdata_t&)
 T CNPC_BaseScanner::InputSetFlightSpeed(inputdata_t&)
 T CNPC_BaseScanner::IsEnemyPlayerInSuit()
 T CNPC_BaseScanner::IsHeldByPhyscannon()
 T CNPC_BaseScanner::LoadSchedules()
 T CNPC_BaseScanner::LoadedSchedules()
 T CNPC_BaseScanner::MeleeAttack1Conditions(float, float)
 T CNPC_BaseScanner::MinGroundDist()
 T CNPC_BaseScanner::MoveExecute_Alive(float)
 T CNPC_BaseScanner::MoveToAttack(float)
 T CNPC_BaseScanner::MoveToDivebomb(float)
 T CNPC_BaseScanner::MoveToTarget(float, Vector const&)
 T CNPC_BaseScanner::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T CNPC_BaseScanner::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CNPC_BaseScanner::OnScheduleChange()
 T CNPC_BaseScanner::OnStateChange(NPC_STATE, NPC_STATE)
 T CNPC_BaseScanner::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CNPC_BaseScanner::OnTakeDamage_Dying(CTakeDamageInfo const&)
 T CNPC_BaseScanner::OverrideMove(float)
 T CNPC_BaseScanner::OverridePathMove(CBaseEntity*, float)
 T CNPC_BaseScanner::PainSound(CTakeDamageInfo const&)
 T CNPC_BaseScanner::PlayFlySound()
 T CNPC_BaseScanner::PostRunStopMoving()
 T CNPC_BaseScanner::ScannerEmitSound(char const*)
 T CNPC_BaseScanner::SelectSchedule()
 T CNPC_BaseScanner::ShouldPlayIdleSound()
 T CNPC_BaseScanner::Spawn()
 T CNPC_BaseScanner::SpeakSentence(int)
 T CNPC_BaseScanner::SquadSlotName(int)
 T CNPC_BaseScanner::StartSmokeTrail()
 T CNPC_BaseScanner::StartTask(Task_t const*)
 T CNPC_BaseScanner::StopLoopingSounds()
 T CNPC_BaseScanner::TakeDamageFromPhyscannon(CBasePlayer*)
 T CNPC_BaseScanner::TakeDamageFromPhysicsImpact(int, gamevcollisionevent_t*)
 T CNPC_BaseScanner::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
 T CNPC_BaseScanner::UpdateEfficiency(bool)
 T CNPC_BaseScanner::UpdateHead(float)
 T CNPC_BaseScanner::UpdateOnRemove()
 T CNPC_BaseScanner::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CNPC_BaseScanner::~CNPC_BaseScanner()
 T CNPC_BaseZombie::AllowedToIgnite()
 T CNPC_BaseZombie::BecomeRagdoll(CTakeDamageInfo const&, Vector const&)
 T CNPC_BaseZombie::BecomeTorso(Vector const&, Vector const&)
 T CNPC_BaseZombie::BodyTarget(Vector const&, bool)
 T CNPC_BaseZombie::BuildScheduleTestBits()
 T CNPC_BaseZombie::CNPC_BaseZombie()
 T CNPC_BaseZombie::CanBecomeLiveTorso()
 T CNPC_BaseZombie::CanPlayMoanSound()
 T CNPC_BaseZombie::CanSwatPhysicsObjects()
 T CNPC_BaseZombie::Classify()
 T CNPC_BaseZombie::ClawAttack(float, int, QAngle&, Vector&, int)
 T CNPC_BaseZombie::CreateBehaviors()
 T CNPC_BaseZombie::DieChopped(CTakeDamageInfo const&)
 T CNPC_BaseZombie::Event_Killed(CTakeDamageInfo const&)
 T CNPC_BaseZombie::FindNearestPhysicsObject(int)
 T CNPC_BaseZombie::GatherConditions()
 T CNPC_BaseZombie::GetAutoAimRadius()
 T CNPC_BaseZombie::GetClassScheduleIdSpace()
 T CNPC_BaseZombie::GetClawAttackRange() const
 T CNPC_BaseZombie::GetDataDescMap()
 T CNPC_BaseZombie::GetHitgroupDamageMultiplier(int, CTakeDamageInfo const&)
 T CNPC_BaseZombie::GetReactionDelay(CBaseEntity*)
 T CNPC_BaseZombie::GetSchedulingErrorName()
 T CNPC_BaseZombie::GetSwatActivity()
 T CNPC_BaseZombie::HandleAnimEvent(animevent_t*)
 T CNPC_BaseZombie::HeadTarget(Vector const&)
 T CNPC_BaseZombie::HeadcrabFits(CBaseAnimating*)
 T CNPC_BaseZombie::IRelationType(CBaseEntity*)
 T CNPC_BaseZombie::Ignite(float, bool, float, bool)
 T CNPC_BaseZombie::InitCustomSchedules()
 T CNPC_BaseZombie::IsChopped(CTakeDamageInfo const&)
 T CNPC_BaseZombie::IsSlumped()
 T CNPC_BaseZombie::IsSquashed(CTakeDamageInfo const&)
 T CNPC_BaseZombie::LoadSchedules()
 T CNPC_BaseZombie::LoadedSchedules()
 T CNPC_BaseZombie::MakeAISpookySound(float, float)
 T CNPC_BaseZombie::MaxYawSpeed()
 T CNPC_BaseZombie::MeleeAttack1Conditions(float, float)
 T CNPC_BaseZombie::MoanSound(envelopePoint_t*, int)
 T CNPC_BaseZombie::MustCloseToAttack()
 T CNPC_BaseZombie::NPC_TranslateActivity(Activity)
 T CNPC_BaseZombie::OnInsufficientStopDist(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T CNPC_BaseZombie::OnScheduleChange()
 T CNPC_BaseZombie::OnStateChange(NPC_STATE, NPC_STATE)
 T CNPC_BaseZombie::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CNPC_BaseZombie::OverrideMoveFacing(AILocalMoveGoal_t const&, float)
 T CNPC_BaseZombie::PoundSound()
 T CNPC_BaseZombie::Precache()
 T CNPC_BaseZombie::PrescheduleThink()
 T CNPC_BaseZombie::RangeAttack1Conditions(float, float)
 T CNPC_BaseZombie::ReleaseHeadcrab(Vector const&, Vector const&, bool, bool, bool)
 T CNPC_BaseZombie::RunTask(Task_t const*)
 T CNPC_BaseZombie::SelectFailSchedule(int, int, int)
 T CNPC_BaseZombie::SelectSchedule()
 T CNPC_BaseZombie::SetHeadcrabSpawnLocation(int, CBaseAnimating*)
 T CNPC_BaseZombie::SetZombieModel()
 T CNPC_BaseZombie::ShouldBecomeTorso(CTakeDamageInfo const&, float)
 T CNPC_BaseZombie::ShouldPlayFootstepMoan()
 T CNPC_BaseZombie::ShouldPlayIdleSound()
 T CNPC_BaseZombie::ShouldReleaseHeadcrab(CTakeDamageInfo const&, float)
 T CNPC_BaseZombie::Spawn()
 T CNPC_BaseZombie::SquadSlotName(int)
 T CNPC_BaseZombie::StartTask(Task_t const*)
 T CNPC_BaseZombie::StartTouch(CBaseEntity*)
 T CNPC_BaseZombie::StopLoopingSounds()
 T CNPC_BaseZombie::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
 T CNPC_BaseZombie::TranslateNavGoal(CBaseEntity*, Vector&)
 T CNPC_BaseZombie::TranslateSchedule(int)
 T CNPC_BaseZombie::~CNPC_BaseZombie()
 T CNPC_Breen* _CreateEntityTemplate<CNPC_Breen>(CNPC_Breen*, char const*)
 T CNPC_Breen::Classify()
 T CNPC_Breen::GetSoundInterests()
 T CNPC_Breen::HandleAnimEvent(animevent_t*)
 T CNPC_Breen::Precache()
 T CNPC_Breen::Spawn()
 T CNPC_Breen::UseSemaphore()
 T CNPC_Breen::~CNPC_Breen()
 T CNPC_Bullseye::Activate()
 T CNPC_Bullseye::BullseyeThink()
 T CNPC_Bullseye::CNPC_Bullseye()
 T CNPC_Bullseye::CanBeAnEnemyOf(CBaseEntity*)
 T CNPC_Bullseye::CanBecomeRagdoll()
 T CNPC_Bullseye::CanBecomeServerRagdoll()
 T CNPC_Bullseye::Classify()
 T CNPC_Bullseye::DecalTrace(CGameTrace*, char const*)
 T CNPC_Bullseye::Event_Killed(CTakeDamageInfo const&)
 T CNPC_Bullseye::GetAutoAimRadius()
 T CNPC_Bullseye::GetDataDescMap()
 T CNPC_Bullseye::ImpactTrace(CGameTrace*, int, char const*)
 T CNPC_Bullseye::InputReleased(inputdata_t&)
 T CNPC_Bullseye::InputTargeted(inputdata_t&)
 T CNPC_Bullseye::IsLightDamage(CTakeDamageInfo const&)
 T CNPC_Bullseye::OnRestore()
 T CNPC_Bullseye::OnTakeDamage(CTakeDamageInfo const&)
 T CNPC_Bullseye::Precache()
 T CNPC_Bullseye::Spawn()
 T CNPC_Bullseye::TestHitboxes(Ray_t const&, unsigned int, CGameTrace&)
 T CNPC_Bullseye::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
 T CNPC_Bullseye::~CNPC_Bullseye()
 T CNPC_CScanner::Activate()
 T CNPC_CScanner::AdjustScannerVelocity()
 T CNPC_CScanner::AttackDivebomb()
 T CNPC_CScanner::AttackFlash()
 T CNPC_CScanner::AttackFlashBlind()
 T CNPC_CScanner::AttackPreFlash()
 T CNPC_CScanner::BestInspectTarget()
 T CNPC_CScanner::BlindFlashTarget(CBaseEntity*)
 T CNPC_CScanner::CNPC_CScanner()
 T CNPC_CScanner::DeployMine()
 T CNPC_CScanner::Event_Killed(CTakeDamageInfo const&)
 T CNPC_CScanner::FValidateHintType(CAI_Hint*)
 T CNPC_CScanner::GatherConditions()
 T CNPC_CScanner::GetClassScheduleIdSpace()
 T CNPC_CScanner::GetDataDescMap()
 T CNPC_CScanner::GetEngineSound()
 T CNPC_CScanner::GetGoalDistance()
 T CNPC_CScanner::GetHeadTurnRate()
 T CNPC_CScanner::GetMaxSpeed()
 T CNPC_CScanner::GetScannerSoundPrefix()
 T CNPC_CScanner::GetSchedulingErrorName()
 T CNPC_CScanner::GetSoundInterests()
 T CNPC_CScanner::Gib()
 T CNPC_CScanner::HandleAnimEvent(animevent_t*)
 T CNPC_CScanner::HandleInteraction(int, void*, CBaseCombatCharacter*)
 T CNPC_CScanner::IRelationType(CBaseEntity*)
 T CNPC_CScanner::InitCustomSchedules()
 T CNPC_CScanner::InputClearFollowTarget(inputdata_t&)
 T CNPC_CScanner::InputDeployMine(inputdata_t&)
 T CNPC_CScanner::InputDisableSpotlight(inputdata_t&)
 T CNPC_CScanner::InputEquipMine(inputdata_t&)
 T CNPC_CScanner::InputInspectTargetPhoto(inputdata_t&)
 T CNPC_CScanner::InputInspectTargetSpotlight(inputdata_t&)
 T CNPC_CScanner::InputSetFollowTarget(inputdata_t&)
 T CNPC_CScanner::InputShouldInspect(inputdata_t&)
 T CNPC_CScanner::InspectTarget(inputdata_t&, ScannerFlyMode_t)
 T CNPC_CScanner::InspectTargetPosition()
 T CNPC_CScanner::IsValidInspectTarget(CBaseEntity*)
 T CNPC_CScanner::LoadedSchedules()
 T CNPC_CScanner::MinGroundDist()
 T CNPC_CScanner::MoveToPhotograph(float)
 T CNPC_CScanner::MoveToSpotlight(float)
 T CNPC_CScanner::MoveToTarget(float, Vector const&)
 T CNPC_CScanner::NPCThink()
 T CNPC_CScanner::NPC_TranslateActivity(Activity)
 T CNPC_CScanner::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CNPC_CScanner::OverrideMove(float)
 T CNPC_CScanner::Precache()
 T CNPC_CScanner::PrescheduleThink()
 T CNPC_CScanner::RequestInspectSupport()
 T CNPC_CScanner::RunTask(Task_t const*)
 T CNPC_CScanner::SelectSchedule()
 T CNPC_CScanner::SetInspectTargetToHint(CAI_Hint*, float)
 T CNPC_CScanner::Spawn()
 T CNPC_CScanner::SpotlightCreate()
 T CNPC_CScanner::SpotlightCurrentPos()
 T CNPC_CScanner::SpotlightTargetPos()
 T CNPC_CScanner::SpotlightUpdate()
 T CNPC_CScanner::SquadSlotName(int)
 T CNPC_CScanner::StartTask(Task_t const*)
 T CNPC_CScanner::TakePhoto()
 T CNPC_CScanner::TranslateSchedule(int)
 T CNPC_CScanner::UpdateOnRemove()
 T CNPC_CScanner::~CNPC_CScanner()
 T CNPC_CeilingTurret* _CreateEntityTemplate<CNPC_CeilingTurret>(CNPC_CeilingTurret*, char const*)
 T CNPC_CeilingTurret::ActiveThink()
 T CNPC_CeilingTurret::AutoSearchThink()
 T CNPC_CeilingTurret::CanBeAnEnemyOf(CBaseEntity*)
 T CNPC_CeilingTurret::Classify()
 T CNPC_CeilingTurret::DeathThink()
 T CNPC_CeilingTurret::Deploy()
 T CNPC_CeilingTurret::EyeOffset(Activity)
 T CNPC_CeilingTurret::EyePosition()
 T CNPC_CeilingTurret::FVisible(CBaseEntity*, int, CBaseEntity**)
 T CNPC_CeilingTurret::GetAttackSpread(CBaseCombatWeapon*, CBaseEntity*)
 T CNPC_CeilingTurret::GetDataDescMap()
 T CNPC_CeilingTurret::InputDisable(inputdata_t&)
 T CNPC_CeilingTurret::InputEnable(inputdata_t&)
 T CNPC_CeilingTurret::InputToggle(inputdata_t&)
 T CNPC_CeilingTurret::MaxYawSpeed()
 T CNPC_CeilingTurret::OnTakeDamage(CTakeDamageInfo const&)
 T CNPC_CeilingTurret::Precache()
 T CNPC_CeilingTurret::Retire()
 T CNPC_CeilingTurret::SearchThink()
 T CNPC_CeilingTurret::SetEyeState(eyeState_t)
 T CNPC_CeilingTurret::SetHeight(float)
 T CNPC_CeilingTurret::Shoot(Vector const&, Vector const&)
 T CNPC_CeilingTurret::Spawn()
 T CNPC_CeilingTurret::Toggle()
 T CNPC_CeilingTurret::UpdateFacing()
 T CNPC_CeilingTurret::~CNPC_CeilingTurret()
 T CNPC_Citizen::Activate()
 T CNPC_Citizen::AddToPlayerSquad()
 T CNPC_Citizen::BuildScheduleTestBits()
 T CNPC_Citizen::CNPC_Citizen()
 T CNPC_Citizen::CanJoinPlayerSquad()
 T CNPC_Citizen::Classify()
 T CNPC_Citizen::CommanderUse(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CNPC_Citizen::CreateBehaviors()
 T CNPC_Citizen::DeathSound(CTakeDamageInfo const&)
 T CNPC_Citizen::DrawDebugTextOverlays()
 T CNPC_Citizen::FInViewCone(CBaseEntity*)
 T CNPC_Citizen::FValidateHintType(CAI_Hint*)
 T CNPC_Citizen::FearSound()
 T CNPC_Citizen::FixupMattWeapon()
 T CNPC_Citizen::FixupPlayerSquad()
 T CNPC_Citizen::GatherConditions()
 T CNPC_Citizen::GetActualShootPosition(Vector const&)
 T CNPC_Citizen::GetClassScheduleIdSpace()
 T CNPC_Citizen::GetDataDescMap()
 T CNPC_Citizen::GetModelName() const
 T CNPC_Citizen::GetSchedulingErrorName()
 T CNPC_Citizen::GetSquadCommandRepresentative()
 T CNPC_Citizen::HandleAnimEvent(animevent_t*)
 T CNPC_Citizen::HandleInteraction(int, void*, CBaseCombatCharacter*)
 T CNPC_Citizen::Heal()
 T CNPC_Citizen::IgnorePlayerPushing()
 T CNPC_Citizen::InitCustomSchedules()
 T CNPC_Citizen::InputRemoveFromPlayerSquad(inputdata_t&)
 T CNPC_Citizen::InputSetAmmoResupplierOff(inputdata_t&)
 T CNPC_Citizen::InputSetAmmoResupplierOn(inputdata_t&)
 T CNPC_Citizen::InputSetCommandable(inputdata_t&)
 T CNPC_Citizen::InputSetMedicOff(inputdata_t&)
 T CNPC_Citizen::InputSetMedicOn(inputdata_t&)
 T CNPC_Citizen::InputSpeakIdleResponse(inputdata_t&)
 T CNPC_Citizen::InputStartPatrolling(inputdata_t&)
 T CNPC_Citizen::InputStopPatrolling(inputdata_t&)
 T CNPC_Citizen::IsCommandMoving()
 T CNPC_Citizen::IsCommandable()
 T CNPC_Citizen::IsMedic()
 T CNPC_Citizen::IsPlayerAlly(CBasePlayer*)
 T CNPC_Citizen::IsValidCommandTarget(CBaseEntity*)
 T CNPC_Citizen::LoadedSchedules()
 T CNPC_Citizen::LocateEnemySound()
 T CNPC_Citizen::MoveOrder(Vector const&, CAI_BaseNPC**, int)
 T CNPC_Citizen::NPC_TranslateActivity(Activity)
 T CNPC_Citizen::OnBeginMoveAndShoot()
 T CNPC_Citizen::OnChangeActiveWeapon(CBaseCombatWeapon*, CBaseCombatWeapon*)
 T CNPC_Citizen::OnChangeRunningBehavior(CAI_BehaviorBase*, CAI_BehaviorBase*)
 T CNPC_Citizen::OnClearGoal(CAI_BehaviorBase*, CAI_GoalEntity*)
 T CNPC_Citizen::OnEndMoveAndShoot()
 T CNPC_Citizen::OnGivenWeapon(CBaseCombatWeapon*)
 T CNPC_Citizen::OnMoveOrder()
 T CNPC_Citizen::OnMoveToCommandGoalFailed()
 T CNPC_Citizen::OnRestore()
 T CNPC_Citizen::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CNPC_Citizen::PickupItem(CBaseEntity*)
 T CNPC_Citizen::PlayerSquadCandidateSortFunc(SquadCandidate_t const*, SquadCandidate_t const*)
 T CNPC_Citizen::PostNPCInit()
 T CNPC_Citizen::Precache()
 T CNPC_Citizen::PrecacheAllOfType(CitizenType_t)
 T CNPC_Citizen::PredictPlayerPush()
 T CNPC_Citizen::PrescheduleThink()
 T CNPC_Citizen::RemoveFromPlayerSquad()
 T CNPC_Citizen::RemoveInsignia()
 T CNPC_Citizen::RunTask(Task_t const*)
 T CNPC_Citizen::SelectFailSchedule(int, int, int)
 T CNPC_Citizen::SelectModel()
 T CNPC_Citizen::SelectRandomExpressionForState(NPC_STATE)
 T CNPC_Citizen::SelectSchedule()
 T CNPC_Citizen::SelectScheduleCombat()
 T CNPC_Citizen::SelectScheduleHeal()
 T CNPC_Citizen::SelectScheduleManhackCombat()
 T CNPC_Citizen::SelectScheduleNonCombat()
 T CNPC_Citizen::SelectSchedulePriorityAction()
 T CNPC_Citizen::SelectScheduleRetrieveItem()
 T CNPC_Citizen::SetSquad(CAI_Squad*)
 T CNPC_Citizen::ShouldAcceptGoal(CAI_BehaviorBase*, CAI_GoalEntity*)
 T CNPC_Citizen::ShouldAlwaysThink()
 T CNPC_Citizen::ShouldAutoSummon()
 T CNPC_Citizen::ShouldBehaviorSelectSchedule(CAI_BehaviorBase*)
 T CNPC_Citizen::ShouldDeferToFollowBehavior()
 T CNPC_Citizen::ShouldHealTarget(CBaseEntity*, bool)
 T CNPC_Citizen::ShouldLookForBetterWeapon()
 T CNPC_Citizen::ShouldLookForHealthItem()
 T CNPC_Citizen::SimpleUse(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CNPC_Citizen::Spawn()
 T CNPC_Citizen::SpeakCommandResponse(char const*, char const*)
 T CNPC_Citizen::SquadSlotName(int)
 T CNPC_Citizen::StartTask(Task_t const*)
 T CNPC_Citizen::TargetOrder(CBaseEntity*, CAI_BaseNPC**, int)
 T CNPC_Citizen::TaskFail(int)
 T CNPC_Citizen::TogglePlayerSquadState()
 T CNPC_Citizen::TranslateSchedule(int)
 T CNPC_Citizen::UpdateFollowCommandPoint()
 T CNPC_Citizen::UpdatePlayerSquad()
 T CNPC_Citizen::UseAttackSquadSlots()
 T CNPC_Citizen::UseSemaphore()
 T CNPC_Citizen::WasInPlayerSquad()
 T CNPC_Citizen::~CNPC_Citizen()
 T CNPC_ClawScanner::GetDataDescMap()
 T CNPC_ClawScanner::~CNPC_ClawScanner()
 T CNPC_Combine::Activate()
 T CNPC_Combine::AlertSound()
 T CNPC_Combine::AnnounceAssault()
 T CNPC_Combine::BeginRappel()
 T CNPC_Combine::BodyTarget(Vector const&, bool)
 T CNPC_Combine::BuildScheduleTestBits()
 T CNPC_Combine::CCombineStandoffBehavior::SelectScheduleAttack()
 T CNPC_Combine::CCombineStandoffBehavior::~CCombineStandoffBehavior()
 T CNPC_Combine::CNPC_Combine()
 T CNPC_Combine::CalcWeaponProficiency(CBaseCombatWeapon*)
 T CNPC_Combine::CanAltFireEnemy(bool)
 T CNPC_Combine::CanGrenadeEnemy(bool)
 T CNPC_Combine::CanThrowGrenade(Vector const&)
 T CNPC_Combine::CheckCanThrowGrenade(Vector const&)
 T CNPC_Combine::Classify()
 T CNPC_Combine::CreateBehaviors()
 T CNPC_Combine::CreateComponents()
 T CNPC_Combine::DelaySquadAltFireAttack(float)
 T CNPC_Combine::Event_Killed(CTakeDamageInfo const&)
 T CNPC_Combine::EyeOffset(Activity)
 T CNPC_Combine::EyePosition()
 T CNPC_Combine::FVisible(CBaseEntity*, int, CBaseEntity**)
 T CNPC_Combine::FoundEnemySound()
 T CNPC_Combine::GatherConditions()
 T CNPC_Combine::GetClassScheduleIdSpace()
 T CNPC_Combine::GetCrouchEyeOffset()
 T CNPC_Combine::GetDataDescMap()
 T CNPC_Combine::GetJumpGravity() const
 T CNPC_Combine::GetSchedulingErrorName()
 T CNPC_Combine::GetSoundInterests()
 T CNPC_Combine::GetSquadSlotDebugName(int)
 T CNPC_Combine::HandleAnimEvent(animevent_t*)
 T CNPC_Combine::HandleInteraction(int, void*, CBaseCombatCharacter*)
 T CNPC_Combine::HearingSensitivity()
 T CNPC_Combine::IdleSound()
 T CNPC_Combine::InitCustomSchedules()
 T CNPC_Combine::InputAssault(inputdata_t&)
 T CNPC_Combine::InputHitByBugbait(inputdata_t&)
 T CNPC_Combine::InputLookOff(inputdata_t&)
 T CNPC_Combine::InputLookOn(inputdata_t&)
 T CNPC_Combine::InputStartPatrolling(inputdata_t&)
 T CNPC_Combine::InputStopPatrolling(inputdata_t&)
 T CNPC_Combine::InputThrowGrenadeAtTarget(inputdata_t&)
 T CNPC_Combine::IsCurTaskContinuousMove()
 T CNPC_Combine::IsWaitingToRappel()
 T CNPC_Combine::LoadedSchedules()
 T CNPC_Combine::LostEnemySound()
 T CNPC_Combine::MaxYawSpeed()
 T CNPC_Combine::MeleeAttack1Conditions(float, float)
 T CNPC_Combine::NPC_TranslateActivity(Activity)
 T CNPC_Combine::NotifyDeadFriend(CBaseEntity*)
 T CNPC_Combine::OnBeginMoveAndShoot()
 T CNPC_Combine::OnEndMoveAndShoot()
 T CNPC_Combine::OnStartSchedule(int)
 T CNPC_Combine::OverrideMoveFacing(AILocalMoveGoal_t const&, float)
 T CNPC_Combine::PostNPCInit()
 T CNPC_Combine::Precache()
 T CNPC_Combine::PrescheduleThink()
 T CNPC_Combine::QueryHearSound(CSound*)
 T CNPC_Combine::RangeAttack2Conditions(float, float)
 T CNPC_Combine::RunTask(Task_t const*)
 T CNPC_Combine::RunTaskChaseEnemyContinuously(Task_t const*)
 T CNPC_Combine::SelectCombatSchedule()
 T CNPC_Combine::SelectFailSchedule(int, int, int)
 T CNPC_Combine::SelectIdealState()
 T CNPC_Combine::SelectSchedule()
 T CNPC_Combine::SelectScheduleAttack()
 T CNPC_Combine::SetActivity(Activity)
 T CNPC_Combine::ShouldMoveAndShoot()
 T CNPC_Combine::ShouldPickADeathPose()
 T CNPC_Combine::Spawn()
 T CNPC_Combine::SpeakSentence(int)
 T CNPC_Combine::SquadSlotName(int)
 T CNPC_Combine::StartTask(Task_t const*)
 T CNPC_Combine::StartTaskChaseEnemyContinuously(Task_t const*)
 T CNPC_Combine::TranslateSchedule(int)
 T CNPC_Combine::UpdateEnemyMemory(CBaseEntity*, Vector const&, CBaseEntity*)
 T CNPC_Combine::Weapon_ShootPosition()
 T CNPC_Combine::~CNPC_Combine()
 T CNPC_CombineCamera::ActiveThink()
 T CNPC_CombineCamera::Classify()
 T CNPC_CombineCamera::DeathThink()
 T CNPC_CombineCamera::Deploy()
 T CNPC_CombineCamera::DrawDebugGeometryOverlays()
 T CNPC_CombineCamera::DrawDebugTextOverlays()
 T CNPC_CombineCamera::EyeOffset(Activity)
 T CNPC_CombineCamera::EyePosition()
 T CNPC_CombineCamera::FVisible(CBaseEntity*, int, CBaseEntity**)
 T CNPC_CombineCamera::GetDataDescMap()
 T CNPC_CombineCamera::HeadDirection2D()
 T CNPC_CombineCamera::InputDisable(inputdata_t&)
 T CNPC_CombineCamera::InputEnable(inputdata_t&)
 T CNPC_CombineCamera::InputSetAngry(inputdata_t&)
 T CNPC_CombineCamera::InputSetIdle(inputdata_t&)
 T CNPC_CombineCamera::InputToggle(inputdata_t&)
 T CNPC_CombineCamera::IsValidEnemy(CBaseEntity*)
 T CNPC_CombineCamera::MaintainEnemy()
 T CNPC_CombineCamera::MaintainEye()
 T CNPC_CombineCamera::MaxYawSpeed()
 T CNPC_CombineCamera::OnTakeDamage(CTakeDamageInfo const&)
 T CNPC_CombineCamera::Precache()
 T CNPC_CombineCamera::SearchThink()
 T CNPC_CombineCamera::SetEyeState(eyeState_t)
 T CNPC_CombineCamera::SetHeight(float)
 T CNPC_CombineCamera::Spawn()
 T CNPC_CombineCamera::TrackTarget(CBaseEntity*)
 T CNPC_CombineCamera::UpdateFacing()
 T CNPC_CombineCamera::~CNPC_CombineCamera()
 T CNPC_CombineDropship::Activate()
 T CNPC_CombineDropship::Classify()
 T CNPC_CombineDropship::DoCombatStuff()
 T CNPC_CombineDropship::DoImpactEffect(CGameTrace&, int)
 T CNPC_CombineDropship::DropSoldierContainer()
 T CNPC_CombineDropship::FireCannonRound()
 T CNPC_CombineDropship::Flight()
 T CNPC_CombineDropship::GatherEnemyConditions(CBaseEntity*)
 T CNPC_CombineDropship::GetClassScheduleIdSpace()
 T CNPC_CombineDropship::GetDataDescMap()
 T CNPC_CombineDropship::GetDropoffFinishPosition(Vector, CAI_BaseNPC*, Vector, Vector)
 T CNPC_CombineDropship::GetSchedulingErrorName()
 T CNPC_CombineDropship::Hunt()
 T CNPC_CombineDropship::InitCustomSchedules()
 T CNPC_CombineDropship::InitializeRotorSound()
 T CNPC_CombineDropship::InputDropAPC(inputdata_t&)
 T CNPC_CombineDropship::InputDropMines(inputdata_t&)
 T CNPC_CombineDropship::InputDropStrider(inputdata_t&)
 T CNPC_CombineDropship::InputFlyToPathTrack(inputdata_t&)
 T CNPC_CombineDropship::InputHover(inputdata_t&)
 T CNPC_CombineDropship::InputLandLeave(inputdata_t&)
 T CNPC_CombineDropship::InputLandTake(inputdata_t&)
 T CNPC_CombineDropship::InputNPCFinishDustoff(inputdata_t&)
 T CNPC_CombineDropship::InputPickup(inputdata_t&)
 T CNPC_CombineDropship::InputSetGunRange(inputdata_t&)
 T CNPC_CombineDropship::InputSetLandTarget(inputdata_t&)
 T CNPC_CombineDropship::InputStopWaitingForDropoff(inputdata_t&)
 T CNPC_CombineDropship::LandCommon(bool)
 T CNPC_CombineDropship::LoadedSchedules()
 T CNPC_CombineDropship::MakeTracer(Vector const&, CGameTrace const&, int)
 T CNPC_CombineDropship::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CNPC_CombineDropship::PopulatePoseParameters()
 T CNPC_CombineDropship::Precache()
 T CNPC_CombineDropship::PrescheduleThink()
 T CNPC_CombineDropship::Spawn()
 T CNPC_CombineDropship::SpawnTroop()
 T CNPC_CombineDropship::SquadSlotName(int)
 T CNPC_CombineDropship::StopLoopingSounds()
 T CNPC_CombineDropship::UpdateContainerGunFacing(Vector&, Vector&, Vector&, float*)
 T CNPC_CombineDropship::UpdateFacingDirection()
 T CNPC_CombineDropship::UpdatePickupNavigation()
 T CNPC_CombineDropship::UpdateRotorSoundPitch(int)
 T CNPC_CombineDropship::UpdateRotorWashVolume()
 T CNPC_CombineDropship::~CNPC_CombineDropship()
 T CNPC_CombineGunship::ApplyGeneralDrag()
 T CNPC_CombineGunship::ApplySidewaysDrag(Vector const&)
 T CNPC_CombineGunship::BeginCrash()
 T CNPC_CombineGunship::BeginDestruct()
 T CNPC_CombineGunship::BloodColor()
 T CNPC_CombineGunship::CNPC_CombineGunship()
 T CNPC_CombineGunship::ChooseEnemy()
 T CNPC_CombineGunship::Classify()
 T CNPC_CombineGunship::CreateBellyBlastEnergyCore()
 T CNPC_CombineGunship::CreateSmokeTrail()
 T CNPC_CombineGunship::DoBellyBlastDamage(CGameTrace&, Vector, Vector)
 T CNPC_CombineGunship::DoCombat()
 T CNPC_CombineGunship::DoGroundAttackExplosion()
 T CNPC_CombineGunship::DoImpactEffect(CGameTrace&, int)
 T CNPC_CombineGunship::DoMuzzleFlash()
 T CNPC_CombineGunship::DrawRotorWash(float, Vector const&)
 T CNPC_CombineGunship::Event_Killed(CTakeDamageInfo const&)
 T CNPC_CombineGunship::FVisible(CBaseEntity*, int, CBaseEntity**)
 T CNPC_CombineGunship::FindNearestGunshipCrash()
 T CNPC_CombineGunship::FireCannonRound()
 T CNPC_CombineGunship::FireDamageOutputsUpto(int)
 T CNPC_CombineGunship::FireGun()
 T CNPC_CombineGunship::Flight()
 T CNPC_CombineGunship::GatherEnemyConditions(CBaseEntity*)
 T CNPC_CombineGunship::GetAcceleration()
 T CNPC_CombineGunship::GetAutoAimRadius()
 T CNPC_CombineGunship::GetClassScheduleIdSpace()
 T CNPC_CombineGunship::GetDataDescMap()
 T CNPC_CombineGunship::GetGroundAttackHitPosition()
 T CNPC_CombineGunship::GetSchedulingErrorName()
 T CNPC_CombineGunship::GetServerClass()
 T CNPC_CombineGunship::HelicopterPostThink()
 T CNPC_CombineGunship::InitCustomSchedules()
 T CNPC_CombineGunship::InitializeRotorSound()
 T CNPC_CombineGunship::InputBlindfireOff(inputdata_t&)
 T CNPC_CombineGunship::InputBlindfireOn(inputdata_t&)
 T CNPC_CombineGunship::InputDisableGroundAttack(inputdata_t&)
 T CNPC_CombineGunship::InputDoGroundAttack(inputdata_t&)
 T CNPC_CombineGunship::InputEnableGroundAttack(inputdata_t&)
 T CNPC_CombineGunship::InputOmniscientOff(inputdata_t&)
 T CNPC_CombineGunship::InputOmniscientOn(inputdata_t&)
 T CNPC_CombineGunship::InputSelfDestruct(inputdata_t&)
 T CNPC_CombineGunship::InputSetDockingBBox(inputdata_t&)
 T CNPC_CombineGunship::InputSetNormalBBox(inputdata_t&)
 T CNPC_CombineGunship::InputSetPenetrationDepth(inputdata_t&)
 T CNPC_CombineGunship::IsValidEnemy(CBaseEntity*)
 T CNPC_CombineGunship::LoadedSchedules()
 T CNPC_CombineGunship::MakeTracer(Vector const&, CGameTrace const&, int)
 T CNPC_CombineGunship::ManageWarningBeam()
 T CNPC_CombineGunship::MoveHead()
 T CNPC_CombineGunship::OnRestore()
 T CNPC_CombineGunship::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CNPC_CombineGunship::Ping()
 T CNPC_CombineGunship::PopulatePoseParameters()
 T CNPC_CombineGunship::PoseGunTowardTargetDirection(Vector const&)
 T CNPC_CombineGunship::Precache()
 T CNPC_CombineGunship::PrescheduleThink()
 T CNPC_CombineGunship::SelfDestruct()
 T CNPC_CombineGunship::Spawn()
 T CNPC_CombineGunship::SquadSlotName(int)
 T CNPC_CombineGunship::StartCannonBurst(int)
 T CNPC_CombineGunship::StartGroundAttack()
 T CNPC_CombineGunship::StopCannonBurst()
 T CNPC_CombineGunship::StopGroundAttack(bool)
 T CNPC_CombineGunship::StopLoopingSounds()
 T CNPC_CombineGunship::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
 T CNPC_CombineGunship::UpdateDesiredPosition()
 T CNPC_CombineGunship::UpdateEnemyTarget()
 T CNPC_CombineGunship::UpdateFacingDirection()
 T CNPC_CombineGunship::UpdateRotorSoundPitch(int)
 T CNPC_CombineGunship::YouForgotToImplementOrDeclareServerClass()
 T CNPC_CombineGunship::~CNPC_CombineGunship()
 T CNPC_CombineS::AllowedToIgnite()
 T CNPC_CombineS::BuildScheduleTestBits()
 T CNPC_CombineS::ClearAttackConditions()
 T CNPC_CombineS::DeathSound(CTakeDamageInfo const&)
 T CNPC_CombineS::Event_Killed(CTakeDamageInfo const&)
 T CNPC_CombineS::GetHitgroupDamageMultiplier(int, CTakeDamageInfo const&)
 T CNPC_CombineS::HandleAnimEvent(animevent_t*)
 T CNPC_CombineS::IsHeavyDamage(CTakeDamageInfo const&)
 T CNPC_CombineS::IsLightDamage(CTakeDamageInfo const&)
 T CNPC_CombineS::OnChangeActivity(Activity)
 T CNPC_CombineS::OnListened()
 T CNPC_CombineS::Precache()
 T CNPC_CombineS::PrescheduleThink()
 T CNPC_CombineS::SelectSchedule()
 T CNPC_CombineS::Spawn()
 T CNPC_CombineS::~CNPC_CombineS()
 T CNPC_CraneDriver::Activate()
 T CNPC_CraneDriver::DriveVehicle()
 T CNPC_CraneDriver::GetClassScheduleIdSpace()
 T CNPC_CraneDriver::GetDataDescMap()
 T CNPC_CraneDriver::GetSchedulingErrorName()
 T CNPC_CraneDriver::InitCustomSchedules()
 T CNPC_CraneDriver::InputForceDrop(inputdata_t&)
 T CNPC_CraneDriver::InputForcePickup(inputdata_t&)
 T CNPC_CraneDriver::LoadedSchedules()
 T CNPC_CraneDriver::OverrideMove(float)
 T CNPC_CraneDriver::RangeAttack1Conditions(float, float)
 T CNPC_CraneDriver::RunTask(Task_t const*)
 T CNPC_CraneDriver::SelectSchedule()
 T CNPC_CraneDriver::Spawn()
 T CNPC_CraneDriver::SquadSlotName(int)
 T CNPC_CraneDriver::StartTask(Task_t const*)
 T CNPC_CraneDriver::TranslateSchedule(int)
 T CNPC_CraneDriver::~CNPC_CraneDriver()
 T CNPC_Crow::AlertSound()
 T CNPC_Crow::BecomeRagdollOnClient(Vector const&)
 T CNPC_Crow::BodyTarget(Vector const&, bool)
 T CNPC_Crow::Classify()
 T CNPC_Crow::CorpseGib(CTakeDamageInfo const&)
 T CNPC_Crow::DeathSound(CTakeDamageInfo const&)
 T CNPC_Crow::DrawDebugTextOverlays()
 T CNPC_Crow::FValidateHintType(CAI_Hint*)
 T CNPC_Crow::GatherEnemyConditions(CBaseEntity*)
 T CNPC_Crow::GetClassScheduleIdSpace()
 T CNPC_Crow::GetDataDescMap()
 T CNPC_Crow::GetHintActivity(short, Activity)
 T CNPC_Crow::GetSchedulingErrorName()
 T CNPC_Crow::GetSoundInterests()
 T CNPC_Crow::HandleAnimEvent(animevent_t*)
 T CNPC_Crow::HandleInteraction(int, void*, CBaseCombatCharacter*)
 T CNPC_Crow::IdleSound()
 T CNPC_Crow::InitCustomSchedules()
 T CNPC_Crow::InputFlyAway(inputdata_t&)
 T CNPC_Crow::LoadedSchedules()
 T CNPC_Crow::MaxYawSpeed()
 T CNPC_Crow::MoveCrowFly(float)
 T CNPC_Crow::NPC_TranslateActivity(Activity)
 T CNPC_Crow::OnChangeActivity(Activity)
 T CNPC_Crow::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CNPC_Crow::OverrideMove(float)
 T CNPC_Crow::PainSound(CTakeDamageInfo const&)
 T CNPC_Crow::Precache()
 T CNPC_Crow::Probe(Vector const&, float, Vector&)
 T CNPC_Crow::QueryHearSound(CSound*)
 T CNPC_Crow::RunTask(Task_t const*)
 T CNPC_Crow::SelectSchedule()
 T CNPC_Crow::SetFlyingState(FlyState_t)
 T CNPC_Crow::Spawn()
 T CNPC_Crow::SquadSlotName(int)
 T CNPC_Crow::StartTargetHandling(CBaseEntity*)
 T CNPC_Crow::StartTask(Task_t const*)
 T CNPC_Crow::StopLoopingSounds()
 T CNPC_Crow::Takeoff(Vector const&)
 T CNPC_Crow::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
 T CNPC_Crow::UpdateEfficiency(bool)
 T CNPC_Crow::~CNPC_Crow()
 T CNPC_Dog::CNPC_Dog()
 T CNPC_Dog::CanTargetSeeMe()
 T CNPC_Dog::Classify()
 T CNPC_Dog::CleanCatchAndThrow(bool)
 T CNPC_Dog::ClearBeams()
 T CNPC_Dog::ClearSprites()
 T CNPC_Dog::CreateBeams()
 T CNPC_Dog::CreateBehaviors()
 T CNPC_Dog::CreateSprites()
 T CNPC_Dog::CreateVPhysics()
 T CNPC_Dog::Event_Killed(CTakeDamageInfo const&)
 T CNPC_Dog::FacingPosition()
 T CNPC_Dog::FindPhysicsObject(char const*, CBaseEntity*)
 T CNPC_Dog::GatherConditions()
 T CNPC_Dog::GetClassScheduleIdSpace()
 T CNPC_Dog::GetDataDescMap()
 T CNPC_Dog::GetHeadDebounce()
 T CNPC_Dog::GetSchedulingErrorName()
 T CNPC_Dog::HandleAnimEvent(animevent_t*)
 T CNPC_Dog::IRelationType(CBaseEntity*)
 T CNPC_Dog::InitCustomSchedules()
 T CNPC_Dog::InputPlayerPickupObject(inputdata_t&)
 T CNPC_Dog::InputSetPickupTarget(inputdata_t&)
 T CNPC_Dog::InputSetThrowArcModifier(inputdata_t&)
 T CNPC_Dog::InputSetThrowTarget(inputdata_t&)
 T CNPC_Dog::InputStartCatchThrowBehavior(inputdata_t&)
 T CNPC_Dog::InputStartWaitAndCatch(inputdata_t&)
 T CNPC_Dog::InputStopCatchThrowBehavior(inputdata_t&)
 T CNPC_Dog::InputStopWaitAndCatch(inputdata_t&)
 T CNPC_Dog::InputTurnBoneFollowersOff(inputdata_t&)
 T CNPC_Dog::InputTurnBoneFollowersOn(inputdata_t&)
 T CNPC_Dog::LoadedSchedules()
 T CNPC_Dog::MantainBoneFollowerCollisionGroups(int)
 T CNPC_Dog::NPCThink()
 T CNPC_Dog::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CNPC_Dog::PickupOrCatchObject(char const*)
 T CNPC_Dog::Precache()
 T CNPC_Dog::PrescheduleThink()
 T CNPC_Dog::PullObject(bool)
 T CNPC_Dog::RunTask(Task_t const*)
 T CNPC_Dog::SelectSchedule()
 T CNPC_Dog::SetPlayerAvoidState()
 T CNPC_Dog::SetTurnActivity()
 T CNPC_Dog::SetupThrowTarget()
 T CNPC_Dog::Spawn()
 T CNPC_Dog::SquadSlotName(int)
 T CNPC_Dog::StartTask(Task_t const*)
 T CNPC_Dog::ThrowObject(char const*)
 T CNPC_Dog::UpdateOnRemove()
 T CNPC_Dog::~CNPC_Dog()
 T CNPC_Eli* _CreateEntityTemplate<CNPC_Eli>(CNPC_Eli*, char const*)
 T CNPC_Eli::Classify()
 T CNPC_Eli::GetSoundInterests()
 T CNPC_Eli::HandleAnimEvent(animevent_t*)
 T CNPC_Eli::Precache()
 T CNPC_Eli::PrescheduleThink()
 T CNPC_Eli::Spawn()
 T CNPC_Eli::~CNPC_Eli()
 T CNPC_EnemyFinder::CNPC_EnemyFinder()
 T CNPC_EnemyFinder::CanBeAnEnemyOf(CBaseEntity*)
 T CNPC_EnemyFinder::CanBeSeenBy(CAI_BaseNPC*)
 T CNPC_EnemyFinder::Classify()
 T CNPC_EnemyFinder::DrawDebugGeometryOverlays()
 T CNPC_EnemyFinder::FVisible(CBaseEntity*, int, CBaseEntity**)
 T CNPC_EnemyFinder::GatherConditions()
 T CNPC_EnemyFinder::GetClassScheduleIdSpace()
 T CNPC_EnemyFinder::GetDataDescMap()
 T CNPC_EnemyFinder::GetSchedulingErrorName()
 T CNPC_EnemyFinder::InitCustomSchedules()
 T CNPC_EnemyFinder::InputTurnOff(inputdata_t&)
 T CNPC_EnemyFinder::InputTurnOn(inputdata_t&)
 T CNPC_EnemyFinder::IsValidEnemy(CBaseEntity*)
 T CNPC_EnemyFinder::LoadedSchedules()
 T CNPC_EnemyFinder::Precache()
 T CNPC_EnemyFinder::PrescheduleThink()
 T CNPC_EnemyFinder::SelectSchedule()
 T CNPC_EnemyFinder::ShouldAlwaysThink()
 T CNPC_EnemyFinder::ShouldChooseNewEnemy()
 T CNPC_EnemyFinder::Spawn()
 T CNPC_EnemyFinder::SquadSlotName(int)
 T CNPC_EnemyFinder::StartNPC()
 T CNPC_EnemyFinder::UpdateEfficiency(bool)
 T CNPC_EnemyFinder::Wake(bool)
 T CNPC_EnemyFinder::~CNPC_EnemyFinder()
 T CNPC_EnemyFinderCombineCannon::Activate()
 T CNPC_EnemyFinderCombineCannon::FVisible(CBaseEntity*, int, CBaseEntity**)
 T CNPC_EnemyFinderCombineCannon::GatherConditions()
 T CNPC_EnemyFinderCombineCannon::GetDataDescMap()
 T CNPC_EnemyFinderCombineCannon::InputSetWideFOVForSeconds(inputdata_t&)
 T CNPC_EnemyFinderCombineCannon::IsValidEnemy(CBaseEntity*)
 T CNPC_EnemyFinderCombineCannon::Spawn()
 T CNPC_EnemyFinderCombineCannon::UpdateOnRemove()
 T CNPC_EnemyFinderCombineCannon::~CNPC_EnemyFinderCombineCannon()
 T CNPC_Fisherman::Activate()
 T CNPC_Fisherman::Classify()
 T CNPC_Fisherman::DeathSound(CTakeDamageInfo const&)
 T CNPC_Fisherman::GetClassScheduleIdSpace()
 T CNPC_Fisherman::GetDataDescMap()
 T CNPC_Fisherman::GetSchedulingErrorName()
 T CNPC_Fisherman::HandleAnimEvent(animevent_t*)
 T CNPC_Fisherman::IgnorePlayerPushing()
 T CNPC_Fisherman::InitCustomSchedules()
 T CNPC_Fisherman::LoadedSchedules()
 T CNPC_Fisherman::Precache()
 T CNPC_Fisherman::SelectModel()
 T CNPC_Fisherman::ShouldLookForBetterWeapon()
 T CNPC_Fisherman::Spawn()
 T CNPC_Fisherman::SquadSlotName(int)
 T CNPC_Fisherman::~CNPC_Fisherman()
 T CNPC_FloorTurret::Activate()
 T CNPC_FloorTurret::ActiveThink()
 T CNPC_FloorTurret::AutoSearchThink()
 T CNPC_FloorTurret::BloodColor()
 T CNPC_FloorTurret::BreakThink()
 T CNPC_FloorTurret::CNPC_FloorTurret()
 T CNPC_FloorTurret::CanBeAnEnemyOf(CBaseEntity*)
 T CNPC_FloorTurret::CanBecomeServerRagdoll()
 T CNPC_FloorTurret::CanInteractWith(CAI_BaseNPC*)
 T CNPC_FloorTurret::Classify()
 T CNPC_FloorTurret::CreateVPhysics()
 T CNPC_FloorTurret::Deploy()
 T CNPC_FloorTurret::Disable()
 T CNPC_FloorTurret::DisabledThink()
 T CNPC_FloorTurret::DrawDebugTextOverlays()
 T CNPC_FloorTurret::EyeOffset(Activity)
 T CNPC_FloorTurret::EyePosition()
 T CNPC_FloorTurret::GetAttackDamageScale(CBaseEntity*)
 T CNPC_FloorTurret::GetAttackSpread(CBaseCombatWeapon*, CBaseEntity*)
 T CNPC_FloorTurret::GetClassScheduleIdSpace()
 T CNPC_FloorTurret::GetDataDescMap()
 T CNPC_FloorTurret::GetSchedulingErrorName()
 T CNPC_FloorTurret::GetTracerType()
 T CNPC_FloorTurret::HackFindEnemy()
 T CNPC_FloorTurret::HandleInteraction(int, void*, CBaseCombatCharacter*)
 T CNPC_FloorTurret::HasBeenInteractedWith()
 T CNPC_FloorTurret::HasPhysicsAttacker(float)
 T CNPC_FloorTurret::HasPreferredCarryAnglesForPlayer(CBasePlayer*)
 T CNPC_FloorTurret::InactiveThink()
 T CNPC_FloorTurret::InitCustomSchedules()
 T CNPC_FloorTurret::InputDepleteAmmo(inputdata_t&)
 T CNPC_FloorTurret::InputDisable(inputdata_t&)
 T CNPC_FloorTurret::InputEnable(inputdata_t&)
 T CNPC_FloorTurret::InputRestoreAmmo(inputdata_t&)
 T CNPC_FloorTurret::InputSelfDestruct(inputdata_t&)
 T CNPC_FloorTurret::InputToggle(inputdata_t&)
 T CNPC_FloorTurret::IsValidEnemy(CBaseEntity*)
 T CNPC_FloorTurret::LoadedSchedules()
 T CNPC_FloorTurret::MaxYawSpeed()
 T CNPC_FloorTurret::NotifyInteraction(CAI_BaseNPC*)
 T CNPC_FloorTurret::ObjectCaps()
 T CNPC_FloorTurret::OnAttemptPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CNPC_FloorTurret::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T CNPC_FloorTurret::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CNPC_FloorTurret::OnSide()
 T CNPC_FloorTurret::OnTakeDamage(CTakeDamageInfo const&)
 T CNPC_FloorTurret::PlayerPenetratingVPhysics()
 T CNPC_FloorTurret::PreThink(turretState_e)
 T CNPC_FloorTurret::Precache()
 T CNPC_FloorTurret::PreferredCarryAngles()
 T CNPC_FloorTurret::Retire()
 T CNPC_FloorTurret::ReturnToLife()
 T CNPC_FloorTurret::SearchThink()
 T CNPC_FloorTurret::SelfDestructThink()
 T CNPC_FloorTurret::SetEyeState(eyeState_t)
 T CNPC_FloorTurret::Shoot(Vector const&, Vector const&, bool)
 T CNPC_FloorTurret::ShouldSavePhysics()
 T CNPC_FloorTurret::Spawn()
 T CNPC_FloorTurret::SquadSlotName(int)
 T CNPC_FloorTurret::SuppressThink()
 T CNPC_FloorTurret::TippedThink()
 T CNPC_FloorTurret::Toggle()
 T CNPC_FloorTurret::ToggleUse(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CNPC_FloorTurret::UpdateFacing()
 T CNPC_FloorTurret::UpdateOnRemove()
 T CNPC_FloorTurret::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CNPC_FloorTurret::VPhysicsTakeDamage(CTakeDamageInfo const&)
 T CNPC_FloorTurret::~CNPC_FloorTurret()
 T CNPC_Furniture::Classify()
 T CNPC_Furniture::CreateVPhysics()
 T CNPC_Furniture::DrawDebugGeometryOverlays()
 T CNPC_Furniture::GetDataDescMap()
 T CNPC_Furniture::InputDisablePlayerCollision(inputdata_t&)
 T CNPC_Furniture::InputEnablePlayerCollision(inputdata_t&)
 T CNPC_Furniture::MaxYawSpeed()
 T CNPC_Furniture::NPCThink()
 T CNPC_Furniture::ObjectCaps()
 T CNPC_Furniture::OnRestore()
 T CNPC_Furniture::OnTakeDamage(CTakeDamageInfo const&)
 T CNPC_Furniture::Precache()
 T CNPC_Furniture::SelectSchedule()
 T CNPC_Furniture::SetPlayerAvoidState()
 T CNPC_Furniture::Spawn()
 T CNPC_Furniture::UpdateBoneFollowerState()
 T CNPC_Furniture::UpdateEfficiency(bool)
 T CNPC_Furniture::UpdateOnRemove()
 T CNPC_Furniture::~CNPC_Furniture()
 T CNPC_GMan::Classify()
 T CNPC_GMan::CreateBehaviors()
 T CNPC_GMan::GetDataDescMap()
 T CNPC_GMan::GetSoundInterests()
 T CNPC_GMan::HandleAnimEvent(animevent_t*)
 T CNPC_GMan::IRelationType(CBaseEntity*)
 T CNPC_GMan::Precache()
 T CNPC_GMan::SelectSchedule()
 T CNPC_GMan::Spawn()
 T CNPC_GMan::~CNPC_GMan()
 T CNPC_GroundTurret::CanBecomeRagdoll()
 T CNPC_GroundTurret::Classify()
 T CNPC_GroundTurret::CreateVPhysics()
 T CNPC_GroundTurret::DeathEffects()
 T CNPC_GroundTurret::DeathSound(CTakeDamageInfo const&)
 T CNPC_GroundTurret::Event_Killed(CTakeDamageInfo const&)
 T CNPC_GroundTurret::EyePosition()
 T CNPC_GroundTurret::FVisible(CBaseEntity*, int, CBaseEntity**)
 T CNPC_GroundTurret::GatherConditions()
 T CNPC_GroundTurret::GetAttackSpread(CBaseCombatWeapon*, CBaseEntity*)
 T CNPC_GroundTurret::GetClassScheduleIdSpace()
 T CNPC_GroundTurret::GetDataDescMap()
 T CNPC_GroundTurret::GetSchedulingErrorName()
 T CNPC_GroundTurret::InitCustomSchedules()
 T CNPC_GroundTurret::InputDisable(inputdata_t&)
 T CNPC_GroundTurret::InputEnable(inputdata_t&)
 T CNPC_GroundTurret::LoadedSchedules()
 T CNPC_GroundTurret::MakeTracer(Vector const&, CGameTrace const&, int)
 T CNPC_GroundTurret::NPC_TranslateActivity(Activity)
 T CNPC_GroundTurret::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CNPC_GroundTurret::PostNPCInit()
 T CNPC_GroundTurret::Precache()
 T CNPC_GroundTurret::PrescheduleThink()
 T CNPC_GroundTurret::ProjectBeam(Vector const&, Vector const&, int, int, float)
 T CNPC_GroundTurret::QuerySeeEntity(CBaseEntity*, bool)
 T CNPC_GroundTurret::RunTask(Task_t const*)
 T CNPC_GroundTurret::Scan()
 T CNPC_GroundTurret::SelectSchedule()
 T CNPC_GroundTurret::Shoot()
 T CNPC_GroundTurret::Spawn()
 T CNPC_GroundTurret::SquadSlotName(int)
 T CNPC_GroundTurret::StartTask(Task_t const*)
 T CNPC_GroundTurret::TranslateSchedule(int)
 T CNPC_GroundTurret::~CNPC_GroundTurret()
 T CNPC_Ichthyosaur::Beached()
 T CNPC_Ichthyosaur::Bite()
 T CNPC_Ichthyosaur::ClampSteer(Vector&, Vector&, Vector&, Vector&, Vector&)
 T CNPC_Ichthyosaur::Classify()
 T CNPC_Ichthyosaur::DoMovement(float, Vector const&, int)
 T CNPC_Ichthyosaur::DragVictim(float)
 T CNPC_Ichthyosaur::FVisible(CBaseEntity*, int, CBaseEntity**)
 T CNPC_Ichthyosaur::GetClassScheduleIdSpace()
 T CNPC_Ichthyosaur::GetDataDescMap()
 T CNPC_Ichthyosaur::GetDefaultNavGoalTolerance()
 T CNPC_Ichthyosaur::GetSchedulingErrorName()
 T CNPC_Ichthyosaur::HandleAnimEvent(animevent_t*)
 T CNPC_Ichthyosaur::InitCustomSchedules()
 T CNPC_Ichthyosaur::LoadedSchedules()
 T CNPC_Ichthyosaur::MaxYawSpeed()
 T CNPC_Ichthyosaur::MeleeAttack1Conditions(float, float)
 T CNPC_Ichthyosaur::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CNPC_Ichthyosaur::OverrideMove(float)
 T CNPC_Ichthyosaur::Precache()
 T CNPC_Ichthyosaur::PrescheduleThink()
 T CNPC_Ichthyosaur::RunTask(Task_t const*)
 T CNPC_Ichthyosaur::SelectSchedule()
 T CNPC_Ichthyosaur::SetPoses(Vector, float)
 T CNPC_Ichthyosaur::Spawn()
 T CNPC_Ichthyosaur::SquadSlotName(int)
 T CNPC_Ichthyosaur::StartTask(Task_t const*)
 T CNPC_Ichthyosaur::SteerAvoidObstacles(Vector&, Vector const&, Vector const&, Vector const&, Vector const&)
 T CNPC_Ichthyosaur::SteerSeek(Vector&, Vector const&)
 T CNPC_Ichthyosaur::TranslateNavGoal(CBaseEntity*, Vector&)
 T CNPC_Ichthyosaur::TranslateSchedule(int)
 T CNPC_Ichthyosaur::~CNPC_Ichthyosaur()
 T CNPC_Kleiner* _CreateEntityTemplate<CNPC_Kleiner>(CNPC_Kleiner*, char const*)
 T CNPC_Kleiner::Classify()
 T CNPC_Kleiner::GetSoundInterests()
 T CNPC_Kleiner::HandleAnimEvent(animevent_t*)
 T CNPC_Kleiner::Precache()
 T CNPC_Kleiner::Spawn()
 T CNPC_Kleiner::~CNPC_Kleiner()
 T CNPC_Launcher::Classify()
 T CNPC_Launcher::DrawDebugTextOverlays()
 T CNPC_Launcher::FInViewCone(CBaseEntity*)
 T CNPC_Launcher::GetDataDescMap()
 T CNPC_Launcher::InputClearEnemy(inputdata_t&)
 T CNPC_Launcher::InputFireOnce(inputdata_t&)
 T CNPC_Launcher::InputLOSCheckOn(inputdata_t&)
 T CNPC_Launcher::InputSetEnemy(inputdata_t&)
 T CNPC_Launcher::InputTurnOff(inputdata_t&)
 T CNPC_Launcher::InputTurnOn(inputdata_t&)
 T CNPC_Launcher::IsValidEnemy(CBaseEntity*)
 T CNPC_Launcher::LaunchGrenade(CBaseEntity*)
 T CNPC_Launcher::LauncherThink()
 T CNPC_Launcher::LauncherTurnOn()
 T CNPC_Launcher::Precache()
 T CNPC_Launcher::Spawn()
 T CNPC_Launcher::~CNPC_Launcher()
 T CNPC_Manhack::Activate()
 T CNPC_Manhack::BodyTarget(Vector const&, bool)
 T CNPC_Manhack::Bump(CBaseEntity*, float, CGameTrace&)
 T CNPC_Manhack::CNPC_Manhack()
 T CNPC_Manhack::CanInteractWith(CAI_BaseNPC*)
 T CNPC_Manhack::CheckCollisions(float)
 T CNPC_Manhack::ClampMotorForces(Vector&, Vector&)
 T CNPC_Manhack::Classify()
 T CNPC_Manhack::ComputeSliceBounceVelocity(CBaseEntity*, CGameTrace&)
 T CNPC_Manhack::CorpseGib(CTakeDamageInfo const&)
 T CNPC_Manhack::CrashTouch(CBaseEntity*)
 T CNPC_Manhack::CreateSmokeTrail()
 T CNPC_Manhack::CreateVPhysics()
 T CNPC_Manhack::DeathSound(CTakeDamageInfo const&)
 T CNPC_Manhack::Event_Dying()
 T CNPC_Manhack::Event_Killed(CTakeDamageInfo const&)
 T CNPC_Manhack::GatherConditions()
 T CNPC_Manhack::GatherEnemyConditions(CBaseEntity*)
 T CNPC_Manhack::GetClassScheduleIdSpace()
 T CNPC_Manhack::GetDataDescMap()
 T CNPC_Manhack::GetDefaultNavGoalTolerance()
 T CNPC_Manhack::GetHeadTurnRate()
 T CNPC_Manhack::GetSchedulingErrorName()
 T CNPC_Manhack::GetServerClass()
 T CNPC_Manhack::HandleAnimEvent(animevent_t*)
 T CNPC_Manhack::HandleInteraction(int, void*, CBaseCombatCharacter*)
 T CNPC_Manhack::HasBeenInteractedWith()
 T CNPC_Manhack::HasPhysicsAttacker(float)
 T CNPC_Manhack::HitPhysicsObject(CBaseEntity*)
 T CNPC_Manhack::Ignite(float, bool, float, bool)
 T CNPC_Manhack::InitCustomSchedules()
 T CNPC_Manhack::InputDisableSwarm(inputdata_t&)
 T CNPC_Manhack::InputPowerdown(inputdata_t&)
 T CNPC_Manhack::InputUnpack(inputdata_t&)
 T CNPC_Manhack::IsInEffectiveTargetZone(CBaseEntity*)
 T CNPC_Manhack::KillSprites(float)
 T CNPC_Manhack::LoadedSchedules()
 T CNPC_Manhack::Loiter()
 T CNPC_Manhack::MaintainGroundHeight()
 T CNPC_Manhack::MeleeAttack1Conditions(float, float)
 T CNPC_Manhack::MoveExecute_Alive(float)
 T CNPC_Manhack::MoveExecute_Dead(float)
 T CNPC_Manhack::MoveToTarget(float, Vector const&)
 T CNPC_Manhack::NPC_TranslateActivity(Activity)
 T CNPC_Manhack::NotifyInteraction(CAI_BaseNPC*)
 T CNPC_Manhack::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T CNPC_Manhack::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CNPC_Manhack::OnStateChange(NPC_STATE, NPC_STATE)
 T CNPC_Manhack::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CNPC_Manhack::OnTakeDamage_Dying(CTakeDamageInfo const&)
 T CNPC_Manhack::OverrideMove(float)
 T CNPC_Manhack::PhysicsSolidMaskForEntity() const
 T CNPC_Manhack::PlayFlySound()
 T CNPC_Manhack::PostNPCInit()
 T CNPC_Manhack::Precache()
 T CNPC_Manhack::PrescheduleThink()
 T CNPC_Manhack::RunTask(Task_t const*)
 T CNPC_Manhack::SetEyeState(int)
 T CNPC_Manhack::ShouldGib(CTakeDamageInfo const&)
 T CNPC_Manhack::Slice(CBaseEntity*, float, CGameTrace&)
 T CNPC_Manhack::Spawn()
 T CNPC_Manhack::SpinBlades(float)
 T CNPC_Manhack::Splash(Vector const&)
 T CNPC_Manhack::SquadSlotName(int)
 T CNPC_Manhack::StartEngine(bool)
 T CNPC_Manhack::StartEye()
 T CNPC_Manhack::StartTask(Task_t const*)
 T CNPC_Manhack::StopLoopingSounds()
 T CNPC_Manhack::TakeDamageFromPhyscannon(CBasePlayer*)
 T CNPC_Manhack::TakeDamageFromPhysicsImpact(int, gamevcollisionevent_t*)
 T CNPC_Manhack::TakeDamageFromVehicle(int, gamevcollisionevent_t*)
 T CNPC_Manhack::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
 T CNPC_Manhack::TranslateNavGoal(CBaseEntity*, Vector&)
 T CNPC_Manhack::TranslateSchedule(int)
 T CNPC_Manhack::UpdateOnRemove()
 T CNPC_Manhack::UpdatePanels()
 T CNPC_Manhack::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CNPC_Manhack::VPhysicsShadowCollision(int, gamevcollisionevent_t*)
 T CNPC_Manhack::YouForgotToImplementOrDeclareServerClass()
 T CNPC_Manhack::~CNPC_Manhack()
 T CNPC_MetroPolice::AdministerJustice()
 T CNPC_MetroPolice::AimBurstAlongSideOfEnemy(float)
 T CNPC_MetroPolice::AimBurstAtEnemy(float)
 T CNPC_MetroPolice::AimBurstAtReactionTime(float, float, float)
 T CNPC_MetroPolice::AimBurstAtSetupHitCount(float, float)
 T CNPC_MetroPolice::AimBurstBehindEnemy(float)
 T CNPC_MetroPolice::AimBurstInFrontOfEnemy(float)
 T CNPC_MetroPolice::AimBurstTightGrouping(float)
 T CNPC_MetroPolice::AimCloseToTargetButMiss(CBaseEntity*, Vector const&)
 T CNPC_MetroPolice::AlertSound()
 T CNPC_MetroPolice::AllowedToIgnite()
 T CNPC_MetroPolice::AnnounceEnemyType(CBaseEntity*)
 T CNPC_MetroPolice::AnnounceTakeCoverFromDanger(CSound*)
 T CNPC_MetroPolice::BatonActive()
 T CNPC_MetroPolice::BeginRappel()
 T CNPC_MetroPolice::BuildScheduleTestBits()
 T CNPC_MetroPolice::CNPC_MetroPolice()
 T CNPC_MetroPolice::CalcWeaponProficiency(CBaseCombatWeapon*)
 T CNPC_MetroPolice::CheckTraceHullAttack(Vector const&, Vector const&, Vector const&, Vector const&, int, int, float, bool)
 T CNPC_MetroPolice::CheckTraceHullAttack(float, Vector const&, Vector const&, int, int, float, bool)
 T CNPC_MetroPolice::Classify()
 T CNPC_MetroPolice::ComputeBurstTrajectory(Vector const&)
 T CNPC_MetroPolice::ComputeTightBurstTrajectory(Vector const&)
 T CNPC_MetroPolice::CreateBehaviors()
 T CNPC_MetroPolice::CreateComponents()
 T CNPC_MetroPolice::DeathSound(CTakeDamageInfo const&)
 T CNPC_MetroPolice::EnemyResistingArrest()
 T CNPC_MetroPolice::Event_Killed(CTakeDamageInfo const&)
 T CNPC_MetroPolice::EyeDirection3D()
 T CNPC_MetroPolice::FireBullets(FireBulletsInfo_t const&)
 T CNPC_MetroPolice::FoundEnemySound()
 T CNPC_MetroPolice::GatherConditions()
 T CNPC_MetroPolice::GetActualShootTrajectory(Vector const&)
 T CNPC_MetroPolice::GetClassScheduleIdSpace()
 T CNPC_MetroPolice::GetDataDescMap()
 T CNPC_MetroPolice::GetFlinchActivity(bool, bool)
 T CNPC_MetroPolice::GetIdealAccel() const
 T CNPC_MetroPolice::GetSchedulingErrorName()
 T CNPC_MetroPolice::GetSoundInterests()
 T CNPC_MetroPolice::HandleAnimEvent(animevent_t*)
 T CNPC_MetroPolice::HandleInteraction(int, void*, CBaseCombatCharacter*)
 T CNPC_MetroPolice::IRelationType(CBaseEntity*)
 T CNPC_MetroPolice::IdleSound()
 T CNPC_MetroPolice::IncrementPlayerCriminalStatus()
 T CNPC_MetroPolice::InitCustomSchedules()
 T CNPC_MetroPolice::InputActivateBaton(inputdata_t&)
 T CNPC_MetroPolice::InputEnableManhackToss(inputdata_t&)
 T CNPC_MetroPolice::InputSetPoliceGoal(inputdata_t&)
 T CNPC_MetroPolice::IsHeavyDamage(CTakeDamageInfo const&)
 T CNPC_MetroPolice::IsWaitingToRappel()
 T CNPC_MetroPolice::LoadedSchedules()
 T CNPC_MetroPolice::LostEnemySound()
 T CNPC_MetroPolice::MaxYawSpeed()
 T CNPC_MetroPolice::NPC_TranslateActivity(Activity)
 T CNPC_MetroPolice::NotifyDeadFriend(CBaseEntity*)
 T CNPC_MetroPolice::ObjectCaps()
 T CNPC_MetroPolice::OnAnimEventDeployManhack(animevent_t*)
 T CNPC_MetroPolice::OnAnimEventShove()
 T CNPC_MetroPolice::OnAnimEventStartDeployManhack()
 T CNPC_MetroPolice::OnBeginMoveAndShoot()
 T CNPC_MetroPolice::OnEndMoveAndShoot()
 T CNPC_MetroPolice::OnObstructionPreSteer(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T CNPC_MetroPolice::OnScheduleChange()
 T CNPC_MetroPolice::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CNPC_MetroPolice::OnUpdateShotRegulator()
 T CNPC_MetroPolice::OverrideMoveFacing(AILocalMoveGoal_t const&, float)
 T CNPC_MetroPolice::PainSound(CTakeDamageInfo const&)
 T CNPC_MetroPolice::PlayFlinchGesture()
 T CNPC_MetroPolice::Precache()
 T CNPC_MetroPolice::PrecriminalUse(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CNPC_MetroPolice::PredictShootTargetPosition(float, float, float, Vector*, Vector*)
 T CNPC_MetroPolice::PredictShootTargetVelocity(float, Vector*)
 T CNPC_MetroPolice::PrescheduleThink()
 T CNPC_MetroPolice::QueryHearSound(CSound*)
 T CNPC_MetroPolice::RandomDirectionBetweenVectors(Vector const&, Vector const&, Vector*)
 T CNPC_MetroPolice::ReleaseManhack()
 T CNPC_MetroPolice::RunTask(Task_t const*)
 T CNPC_MetroPolice::SelectAirboatCombatSchedule()
 T CNPC_MetroPolice::SelectAirboatRangeAttackSchedule()
 T CNPC_MetroPolice::SelectCombatSchedule()
 T CNPC_MetroPolice::SelectFailSchedule(int, int, int)
 T CNPC_MetroPolice::SelectMoveToLedgeSchedule()
 T CNPC_MetroPolice::SelectRangeAttackSchedule()
 T CNPC_MetroPolice::SelectSchedule()
 T CNPC_MetroPolice::SelectScheduleInvestigateSound()
 T CNPC_MetroPolice::SelectScheduleNewEnemy()
 T CNPC_MetroPolice::SelectScheduleNoDirectEnemy()
 T CNPC_MetroPolice::SelectStitchSchedule()
 T CNPC_MetroPolice::SetBatonState(bool)
 T CNPC_MetroPolice::SetBurstMode(bool)
 T CNPC_MetroPolice::ShouldAttemptToStitch()
 T CNPC_MetroPolice::ShouldBruteForceFailedNav()
 T CNPC_MetroPolice::ShouldMoveAndShoot()
 T CNPC_MetroPolice::ShouldPlayIdleSound()
 T CNPC_MetroPolice::Spawn()
 T CNPC_MetroPolice::SpeakAssaultSentence(int)
 T CNPC_MetroPolice::SpeakSentence(int)
 T CNPC_MetroPolice::SpeakStandoffSentence(int)
 T CNPC_MetroPolice::SquadArrestCount()
 T CNPC_MetroPolice::SquadSlotName(int)
 T CNPC_MetroPolice::StartTask(Task_t const*)
 T CNPC_MetroPolice::SteerBurstTowardTarget()
 T CNPC_MetroPolice::SteerBurstWithinLineOfDeath()
 T CNPC_MetroPolice::StitchAimTarget(Vector const&, bool)
 T CNPC_MetroPolice::StitchAlongSideWeight(float, float, float)
 T CNPC_MetroPolice::StitchAtWeight(float, float, float, float, Vector const&)
 T CNPC_MetroPolice::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
 T CNPC_MetroPolice::TranslateSchedule(int)
 T CNPC_MetroPolice::UseAttackSquadSlots()
 T CNPC_MetroPolice::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CNPC_MetroPolice::Weapon_Equip(CBaseCombatWeapon*)
 T CNPC_MetroPolice::~CNPC_MetroPolice()
 T CNPC_MissileDefense::AimGun()
 T CNPC_MissileDefense::Classify()
 T CNPC_MissileDefense::EnemyShootPosition(CBaseEntity*, Vector*)
 T CNPC_MissileDefense::Event_Killed(CTakeDamageInfo const&)
 T CNPC_MissileDefense::FireCannons()
 T CNPC_MissileDefense::GetDataDescMap()
 T CNPC_MissileDefense::GetSoundInterests()
 T CNPC_MissileDefense::Gib()
 T CNPC_MissileDefense::MaxYawSpeed()
 T CNPC_MissileDefense::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CNPC_MissileDefense::Precache()
 T CNPC_MissileDefense::RunAI()
 T CNPC_MissileDefense::Spawn()
 T CNPC_MissileDefense::~CNPC_MissileDefense()
 T CNPC_Monk::BuildScheduleTestBits()
 T CNPC_Monk::CNPC_Monk()
 T CNPC_Monk::CalcWeaponProficiency(CBaseCombatWeapon*)
 T CNPC_Monk::Classify()
 T CNPC_Monk::CreateBehaviors()
 T CNPC_Monk::DeathSound(CTakeDamageInfo const&)
 T CNPC_Monk::GatherConditions()
 T CNPC_Monk::GetActualShootPosition(Vector const&)
 T CNPC_Monk::GetActualShootTrajectory(Vector const&)
 T CNPC_Monk::GetClassScheduleIdSpace()
 T CNPC_Monk::GetDataDescMap()
 T CNPC_Monk::GetSchedulingErrorName()
 T CNPC_Monk::GetSoundInterests()
 T CNPC_Monk::HandleAnimEvent(animevent_t*)
 T CNPC_Monk::InitCustomSchedules()
 T CNPC_Monk::InputPerfectAccuracyOff(inputdata_t&)
 T CNPC_Monk::InputPerfectAccuracyOn(inputdata_t&)
 T CNPC_Monk::IsJumpLegal(Vector const&, Vector const&, Vector const&) const
 T CNPC_Monk::IsValidEnemy(CBaseEntity*)
 T CNPC_Monk::LoadedSchedules()
 T CNPC_Monk::NPC_TranslateActivity(Activity)
 T CNPC_Monk::OnKilledNPC(CBaseCombatCharacter*)
 T CNPC_Monk::PainSound(CTakeDamageInfo const&)
 T CNPC_Monk::PassesDamageFilter(CTakeDamageInfo const&)
 T CNPC_Monk::Precache()
 T CNPC_Monk::PrescheduleThink()
 T CNPC_Monk::RunTask(Task_t const*)
 T CNPC_Monk::SelectFailSchedule(int, int, int)
 T CNPC_Monk::SelectSchedule()
 T CNPC_Monk::ShouldBackAway()
 T CNPC_Monk::Spawn()
 T CNPC_Monk::SquadSlotName(int)
 T CNPC_Monk::StartTask(Task_t const*)
 T CNPC_Monk::TranslateSchedule(int)
 T CNPC_Monk::~CNPC_Monk()
 T CNPC_Mossman::Classify()
 T CNPC_Mossman::CreateBehaviors()
 T CNPC_Mossman::GetDataDescMap()
 T CNPC_Mossman::GetSoundInterests()
 T CNPC_Mossman::HandleAnimEvent(animevent_t*)
 T CNPC_Mossman::Precache()
 T CNPC_Mossman::SelectSchedule()
 T CNPC_Mossman::Spawn()
 T CNPC_Mossman::~CNPC_Mossman()
 T CNPC_Pigeon::IdleSound()
 T CNPC_Pigeon::Spawn()
 T CNPC_Pigeon::~CNPC_Pigeon()
 T CNPC_PlayerCompanion::Activate()
 T CNPC_PlayerCompanion::AimGun()
 T CNPC_PlayerCompanion::BuildScheduleTestBits()
 T CNPC_PlayerCompanion::CNPC_PlayerCompanion()
 T CNPC_PlayerCompanion::CScheduleLoader::CScheduleLoader()
 T CNPC_PlayerCompanion::CalcWeaponProficiency(CBaseCombatWeapon*)
 T CNPC_PlayerCompanion::CanReload()
 T CNPC_PlayerCompanion::CreateBehaviors()
 T CNPC_PlayerCompanion::DecalTrace(CGameTrace*, char const*)
 T CNPC_PlayerCompanion::DoCustomSpeechAI()
 T CNPC_PlayerCompanion::FCanCheckAttacks()
 T CNPC_PlayerCompanion::FValidateHintType(CAI_Hint*)
 T CNPC_PlayerCompanion::FindCoverPos(CBaseEntity*, Vector*)
 T CNPC_PlayerCompanion::FindCoverPos(CSound*, Vector*)
 T CNPC_PlayerCompanion::FindCoverPosInRadius(CBaseEntity*, Vector const&, float, Vector*)
 T CNPC_PlayerCompanion::FindNewAimTarget()
 T CNPC_PlayerCompanion::GatherConditions()
 T CNPC_PlayerCompanion::GetActualShootPosition(Vector const&)
 T CNPC_PlayerCompanion::GetAlternateMoveShootTarget()
 T CNPC_PlayerCompanion::GetBestSound(int)
 T CNPC_PlayerCompanion::GetClassScheduleIdSpace()
 T CNPC_PlayerCompanion::GetDataDescMap()
 T CNPC_PlayerCompanion::GetExpresser()
 T CNPC_PlayerCompanion::GetFollowBehavior()
 T CNPC_PlayerCompanion::GetIdealAccel() const
 T CNPC_PlayerCompanion::GetIdealSpeed() const
 T CNPC_PlayerCompanion::GetReadinessDecay()
 T CNPC_PlayerCompanion::GetReadinessLevel()
 T CNPC_PlayerCompanion::GetSchedulingErrorName()
 T CNPC_PlayerCompanion::GetSoundInterests()
 T CNPC_PlayerCompanion::HandleAnimEvent(animevent_t*)
 T CNPC_PlayerCompanion::HandleInteraction(int, void*, CBaseCombatCharacter*)
 T CNPC_PlayerCompanion::HasAimLOS(CBaseEntity*)
 T CNPC_PlayerCompanion::IRelationType(CBaseEntity*)
 T CNPC_PlayerCompanion::IgnorePlayerPushing()
 T CNPC_PlayerCompanion::InitCustomSchedules()
 T CNPC_PlayerCompanion::InputDisableAlwaysTransition(inputdata_t&)
 T CNPC_PlayerCompanion::InputDisableWeaponPickup(inputdata_t&)
 T CNPC_PlayerCompanion::InputEnableAlwaysTransition(inputdata_t&)
 T CNPC_PlayerCompanion::InputEnableWeaponPickup(inputdata_t&)
 T CNPC_PlayerCompanion::InputGiveWeapon(inputdata_t&)
 T CNPC_PlayerCompanion::InputLockReadiness(inputdata_t&)
 T CNPC_PlayerCompanion::InputOutsideTransition(inputdata_t&)
 T CNPC_PlayerCompanion::InputSetReadinessHigh(inputdata_t&)
 T CNPC_PlayerCompanion::InputSetReadinessLow(inputdata_t&)
 T CNPC_PlayerCompanion::InputSetReadinessMedium(inputdata_t&)
 T CNPC_PlayerCompanion::InputSetReadinessPanic(inputdata_t&)
 T CNPC_PlayerCompanion::InputSetReadinessStealth(inputdata_t&)
 T CNPC_PlayerCompanion::IsAllowedToAim()
 T CNPC_PlayerCompanion::IsCoverPosition(Vector const&, Vector const&)
 T CNPC_PlayerCompanion::IsMortar(CBaseEntity*)
 T CNPC_PlayerCompanion::IsNavigationUrgent()
 T CNPC_PlayerCompanion::IsReadinessCapable()
 T CNPC_PlayerCompanion::IsSilentSquadMember() const
 T CNPC_PlayerCompanion::IsSniper(CBaseEntity*)
 T CNPC_PlayerCompanion::IsValidEnemy(CBaseEntity*)
 T CNPC_PlayerCompanion::IsValidMoveAwayDest(Vector const&)
 T CNPC_PlayerCompanion::IsValidReasonableFacing(Vector const&, float)
 T CNPC_PlayerCompanion::LoadSchedules()
 T CNPC_PlayerCompanion::LoadedSchedules()
 T CNPC_PlayerCompanion::LocateEnemySound()
 T CNPC_PlayerCompanion::ModifyOrAppendCriteria(AI_CriteriaSet&)
 T CNPC_PlayerCompanion::MovementCost(int, Vector const&, Vector const&, float*)
 T CNPC_PlayerCompanion::NPC_TranslateActivity(Activity)
 T CNPC_PlayerCompanion::ObjectCaps()
 T CNPC_PlayerCompanion::OnFriendDamaged(CBaseCombatCharacter*, CBaseEntity*)
 T CNPC_PlayerCompanion::OnNewLookTarget()
 T CNPC_PlayerCompanion::OnObstructionPreSteer(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T CNPC_PlayerCompanion::OnPlayerKilledOther(CBaseEntity*, CTakeDamageInfo const&)
 T CNPC_PlayerCompanion::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CNPC_PlayerCompanion::OnUpdateShotRegulator()
 T CNPC_PlayerCompanion::OverrideMove(float)
 T CNPC_PlayerCompanion::PickTacticalLookTarget(AILookTargetArgs_t*)
 T CNPC_PlayerCompanion::PickupWeapon(CBaseCombatWeapon*)
 T CNPC_PlayerCompanion::Precache()
 T CNPC_PlayerCompanion::PredictPlayerPush()
 T CNPC_PlayerCompanion::PrepareReadinessRemap()
 T CNPC_PlayerCompanion::QueryHearSound(CSound*)
 T CNPC_PlayerCompanion::QuerySeeEntity(CBaseEntity*, bool)
 T CNPC_PlayerCompanion::ReadinessLevelChanged(int)
 T CNPC_PlayerCompanion::Restore(IRestore&)
 T CNPC_PlayerCompanion::RunTask(Task_t const*)
 T CNPC_PlayerCompanion::SelectModel()
 T CNPC_PlayerCompanion::SelectSchedule()
 T CNPC_PlayerCompanion::SelectScheduleCombat()
 T CNPC_PlayerCompanion::SelectScheduleDanger()
 T CNPC_PlayerCompanion::SelectScheduleNonCombat()
 T CNPC_PlayerCompanion::SelectSchedulePriorityAction()
 T CNPC_PlayerCompanion::SetReadinessLevel(int, bool, bool)
 T CNPC_PlayerCompanion::SetReadinessValue(float)
 T CNPC_PlayerCompanion::SetupCoverSearch(CBaseEntity*)
 T CNPC_PlayerCompanion::ShouldAlwaysThink()
 T CNPC_PlayerCompanion::ShouldDeferToFollowBehavior()
 T CNPC_PlayerCompanion::ShouldIgnoreSound(CSound*)
 T CNPC_PlayerCompanion::ShouldLookForBetterWeapon()
 T CNPC_PlayerCompanion::ShouldMoveAndShoot()
 T CNPC_PlayerCompanion::Spawn()
 T CNPC_PlayerCompanion::SquadSlotName(int)
 T CNPC_PlayerCompanion::StartTask(Task_t const*)
 T CNPC_PlayerCompanion::Touch(CBaseEntity*)
 T CNPC_PlayerCompanion::TranslateActivityReadiness(Activity)
 T CNPC_PlayerCompanion::TranslateSchedule(int)
 T CNPC_PlayerCompanion::UpdateReadiness()
 T CNPC_PlayerCompanion::ValidateNavGoal()
 T CNPC_PlayerCompanion::Weapon_CanUse(CBaseCombatWeapon*)
 T CNPC_PlayerCompanion::Weapon_Equip(CBaseCombatWeapon*)
 T CNPC_PlayerCompanion::~CNPC_PlayerCompanion()
 T CNPC_PoisonZombie::AlertSound()
 T CNPC_PoisonZombie::AttackHitSound()
 T CNPC_PoisonZombie::AttackMissSound()
 T CNPC_PoisonZombie::AttackSound()
 T CNPC_PoisonZombie::BuildScheduleTestBits()
 T CNPC_PoisonZombie::Classify()
 T CNPC_PoisonZombie::EvacuateNest(bool, float, CBaseEntity*)
 T CNPC_PoisonZombie::Event_Killed(CTakeDamageInfo const&)
 T CNPC_PoisonZombie::FootscuffSound(bool)
 T CNPC_PoisonZombie::FootstepSound(bool)
 T CNPC_PoisonZombie::GetClassScheduleIdSpace()
 T CNPC_PoisonZombie::GetClawAttackRange() const
 T CNPC_PoisonZombie::GetDataDescMap()
 T CNPC_PoisonZombie::GetHeadcrabClassname()
 T CNPC_PoisonZombie::GetHeadcrabModel()
 T CNPC_PoisonZombie::GetLegsModel()
 T CNPC_PoisonZombie::GetMoanSound(int)
 T CNPC_PoisonZombie::GetSchedulingErrorName()
 T CNPC_PoisonZombie::GetTorsoModel()
 T CNPC_PoisonZombie::HandleAnimEvent(animevent_t*)
 T CNPC_PoisonZombie::HeadTarget(Vector const&)
 T CNPC_PoisonZombie::IdleSound()
 T CNPC_PoisonZombie::InitCustomSchedules()
 T CNPC_PoisonZombie::IsChopped(CTakeDamageInfo const&)
 T CNPC_PoisonZombie::LoadedSchedules()
 T CNPC_PoisonZombie::MaxYawSpeed()
 T CNPC_PoisonZombie::MoanSound(envelopePoint_t*, int)
 T CNPC_PoisonZombie::MustCloseToAttack()
 T CNPC_PoisonZombie::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CNPC_PoisonZombie::PainSound(CTakeDamageInfo const&)
 T CNPC_PoisonZombie::Precache()
 T CNPC_PoisonZombie::PrescheduleThink()
 T CNPC_PoisonZombie::RangeAttack1Conditions(float, float)
 T CNPC_PoisonZombie::RangeAttack2Conditions(float, float)
 T CNPC_PoisonZombie::SelectFailSchedule(int, int, int)
 T CNPC_PoisonZombie::SelectSchedule()
 T CNPC_PoisonZombie::SetZombieModel()
 T CNPC_PoisonZombie::ShouldBecomeTorso(CTakeDamageInfo const&, float)
 T CNPC_PoisonZombie::ShouldPlayIdleSound()
 T CNPC_PoisonZombie::Spawn()
 T CNPC_PoisonZombie::SquadSlotName(int)
 T CNPC_PoisonZombie::StopLoopingSounds()
 T CNPC_PoisonZombie::TranslateSchedule(int)
 T CNPC_PoisonZombie::~CNPC_PoisonZombie()
 T CNPC_RollerMine::AnnounceArrivalToOthers(CBaseEntity*)
 T CNPC_RollerMine::BecomePhysical()
 T CNPC_RollerMine::Bury(CGameTrace*)
 T CNPC_RollerMine::CNPC_RollerMine()
 T CNPC_RollerMine::CanInteractWith(CAI_BaseNPC*)
 T CNPC_RollerMine::Classify()
 T CNPC_RollerMine::Close()
 T CNPC_RollerMine::CloseTouch(CBaseEntity*)
 T CNPC_RollerMine::CountRollersOnMyVehicle(CUtlVector<CNPC_RollerMine*, CUtlMemory<CNPC_RollerMine*, int> >*)
 T CNPC_RollerMine::CreateVPhysics()
 T CNPC_RollerMine::DrawDebugGeometryOverlays()
 T CNPC_RollerMine::EmbedTouch(CBaseEntity*)
 T CNPC_RollerMine::Explode()
 T CNPC_RollerMine::EyePosition()
 T CNPC_RollerMine::GetAttackDamageScale(CBaseEntity*)
 T CNPC_RollerMine::GetClassScheduleIdSpace()
 T CNPC_RollerMine::GetDataDescMap()
 T CNPC_RollerMine::GetHackedIdleSchedule()
 T CNPC_RollerMine::GetSchedulingErrorName()
 T CNPC_RollerMine::GetServerClass()
 T CNPC_RollerMine::HasBeenInteractedWith()
 T CNPC_RollerMine::Hop(float)
 T CNPC_RollerMine::InitCustomSchedules()
 T CNPC_RollerMine::InputConstraintBroken(inputdata_t&)
 T CNPC_RollerMine::InputJoltVehicle(inputdata_t&)
 T CNPC_RollerMine::InputPowerdown(inputdata_t&)
 T CNPC_RollerMine::InputRespondToChirp(inputdata_t&)
 T CNPC_RollerMine::InputRespondToExplodeChirp(inputdata_t&)
 T CNPC_RollerMine::InputTurnOff(inputdata_t&)
 T CNPC_RollerMine::InputTurnOn(inputdata_t&)
 T CNPC_RollerMine::IsValidEnemy(CBaseEntity*)
 T CNPC_RollerMine::LoadedSchedules()
 T CNPC_RollerMine::NotifyInteraction(CAI_BaseNPC*)
 T CNPC_RollerMine::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T CNPC_RollerMine::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CNPC_RollerMine::OnRestore()
 T CNPC_RollerMine::OnStateChange(NPC_STATE, NPC_STATE)
 T CNPC_RollerMine::OnTakeDamage(CTakeDamageInfo const&)
 T CNPC_RollerMine::Open()
 T CNPC_RollerMine::OverrideMove(float)
 T CNPC_RollerMine::PhysicsSolidMaskForEntity() const
 T CNPC_RollerMine::PreDetonate()
 T CNPC_RollerMine::Precache()
 T CNPC_RollerMine::PrescheduleThink()
 T CNPC_RollerMine::QuerySeeEntity(CBaseEntity*, bool)
 T CNPC_RollerMine::RangeAttack1Conditions(float, float)
 T CNPC_RollerMine::RollingSpeed()
 T CNPC_RollerMine::RunAI()
 T CNPC_RollerMine::RunTask(Task_t const*)
 T CNPC_RollerMine::SelectIdealState()
 T CNPC_RollerMine::SelectSchedule()
 T CNPC_RollerMine::SetRollerSkin()
 T CNPC_RollerMine::ShockTarget(CBaseEntity*)
 T CNPC_RollerMine::ShockTouch(CBaseEntity*)
 T CNPC_RollerMine::ShouldGoToIdleState()
 T CNPC_RollerMine::ShouldSavePhysics()
 T CNPC_RollerMine::Spawn()
 T CNPC_RollerMine::SpikeTouch(CBaseEntity*)
 T CNPC_RollerMine::SquadSlotName(int)
 T CNPC_RollerMine::StartTask(Task_t const*)
 T CNPC_RollerMine::StickToVehicle(CBaseEntity*)
 T CNPC_RollerMine::StopLoopingSounds()
 T CNPC_RollerMine::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
 T CNPC_RollerMine::TranslateSchedule(int)
 T CNPC_RollerMine::UpdateEfficiency(bool)
 T CNPC_RollerMine::UpdatePingSound()
 T CNPC_RollerMine::UpdateRollingSound()
 T CNPC_RollerMine::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CNPC_RollerMine::VehicleHeading(CBaseEntity*)
 T CNPC_RollerMine::WakeNeighbors()
 T CNPC_RollerMine::YouForgotToImplementOrDeclareServerClass()
 T CNPC_RollerMine::~CNPC_RollerMine()
 T CNPC_Seagull::DeathSound(CTakeDamageInfo const&)
 T CNPC_Seagull::IdleSound()
 T CNPC_Seagull::PainSound(CTakeDamageInfo const&)
 T CNPC_Seagull::Spawn()
 T CNPC_Seagull::~CNPC_Seagull()
 T CNPC_Stalker::AddZigZagToPath()
 T CNPC_Stalker::CNPC_Stalker()
 T CNPC_Stalker::CalcBeamPosition()
 T CNPC_Stalker::Classify()
 T CNPC_Stalker::CreateBehaviors()
 T CNPC_Stalker::DeathSound(CTakeDamageInfo const&)
 T CNPC_Stalker::DrawAttackBeam()
 T CNPC_Stalker::Event_Killed(CTakeDamageInfo const&)
 T CNPC_Stalker::FValidateHintType(CAI_Hint*)
 T CNPC_Stalker::GetClassScheduleIdSpace()
 T CNPC_Stalker::GetDataDescMap()
 T CNPC_Stalker::GetHintActivity(short, Activity)
 T CNPC_Stalker::GetHintDelay(short)
 T CNPC_Stalker::GetSchedulingErrorName()
 T CNPC_Stalker::HandleAnimEvent(animevent_t*)
 T CNPC_Stalker::IdleSound()
 T CNPC_Stalker::InitCustomSchedules()
 T CNPC_Stalker::InnateWeaponLOSCondition(Vector const&, Vector const&, bool)
 T CNPC_Stalker::IsValidEnemy(CBaseEntity*)
 T CNPC_Stalker::KillAttackBeam()
 T CNPC_Stalker::LoadedSchedules()
 T CNPC_Stalker::MaxYawSpeed()
 T CNPC_Stalker::MeleeAttack1Conditions(float, float)
 T CNPC_Stalker::NotifyDeadFriend(CBaseEntity*)
 T CNPC_Stalker::OnScheduleChange()
 T CNPC_Stalker::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CNPC_Stalker::PainSound(CTakeDamageInfo const&)
 T CNPC_Stalker::Precache()
 T CNPC_Stalker::PrescheduleThink()
 T CNPC_Stalker::RangeAttack1Conditions(float, float)
 T CNPC_Stalker::RunTask(Task_t const*)
 T CNPC_Stalker::SelectSchedule()
 T CNPC_Stalker::Spawn()
 T CNPC_Stalker::SquadSlotName(int)
 T CNPC_Stalker::StalkerThink()
 T CNPC_Stalker::StartAttackBeam()
 T CNPC_Stalker::StartTask(Task_t const*)
 T CNPC_Stalker::TranslateSchedule(int)
 T CNPC_Stalker::UpdateAttackBeam()
 T CNPC_Stalker::~CNPC_Stalker()
 T CNPC_Strider::Activate()
 T CNPC_Strider::AddEntityRelationship(CBaseEntity*, Disposition_t, int)
 T CNPC_Strider::AimCannonAt(CBaseEntity*, float)
 T CNPC_Strider::AlertSound()
 T CNPC_Strider::BackFootHit(float)
 T CNPC_Strider::BecomeRagdoll(CTakeDamageInfo const&, Vector const&)
 T CNPC_Strider::BodyTarget(Vector const&, bool)
 T CNPC_Strider::BuildScheduleTestBits()
 T CNPC_Strider::CNPC_Strider()
 T CNPC_Strider::CNavigator::DoFindPathToPos()
 T CNPC_Strider::CNavigator::GetStoppingPath(CAI_WaypointList*)
 T CNPC_Strider::CNavigator::MoveCalcBaseGoal(AILocalMoveGoal_t*)
 T CNPC_Strider::CNavigator::MoveUpdateWaypoint(AIMoveResult_t*)
 T CNPC_Strider::CNavigator::ShouldOptimizeInitialPathSegment(AI_Waypoint_t*)
 T CNPC_Strider::CNavigator::~CNavigator()
 T CNPC_Strider::CPathfinder::CanUseLocalNavigation()
 T CNPC_Strider::CPathfinder::~CPathfinder()
 T CNPC_Strider::CalculateIKLocks(float)
 T CNPC_Strider::CanBecomeServerRagdoll()
 T CNPC_Strider::CanShootThrough(CGameTrace const&, Vector const&)
 T CNPC_Strider::CannonHitThink()
 T CNPC_Strider::CarriedThink()
 T CNPC_Strider::CheckFlinches()
 T CNPC_Strider::Classify()
 T CNPC_Strider::CreateFocus()
 T CNPC_Strider::CreateNavigator()
 T CNPC_Strider::CreatePathfinder()
 T CNPC_Strider::CreateVPhysics()
 T CNPC_Strider::CurrentWeaponLOSCondition(Vector const&, bool)
 T CNPC_Strider::DeathSound(CTakeDamageInfo const&)
 T CNPC_Strider::DoImpactEffect(CGameTrace&, int)
 T CNPC_Strider::DoMuzzleFlash()
 T CNPC_Strider::DrawDebugTextOverlays()
 T CNPC_Strider::Event_Killed(CTakeDamageInfo const&)
 T CNPC_Strider::Explode()
 T CNPC_Strider::EyePosition()
 T CNPC_Strider::FCanCheckAttacks()
 T CNPC_Strider::FVisible(CBaseEntity*, int, CBaseEntity**)
 T CNPC_Strider::FireCannon()
 T CNPC_Strider::FootFX(Vector const&)
 T CNPC_Strider::GatherConditions()
 T CNPC_Strider::GatherHeightConditions(Vector const&, CBaseEntity*)
 T CNPC_Strider::GetAutoAimRadius()
 T CNPC_Strider::GetClassScheduleIdSpace()
 T CNPC_Strider::GetDataDescMap()
 T CNPC_Strider::GetDefaultNavGoalTolerance()
 T CNPC_Strider::GetEntity()
 T CNPC_Strider::GetIdealAccel() const
 T CNPC_Strider::GetMinigunOnTargetTime()
 T CNPC_Strider::GetMinigunRateOfFire()
 T CNPC_Strider::GetMinigunShootDowntime()
 T CNPC_Strider::GetMinigunShootDuration()
 T CNPC_Strider::GetMinigunShootVariation()
 T CNPC_Strider::GetNodeViewOffset()
 T CNPC_Strider::GetSchedulingErrorName()
 T CNPC_Strider::GetSequenceGroundSpeed(CStudioHdr*, int)
 T CNPC_Strider::GetServerClass()
 T CNPC_Strider::GetViewCone(StriderMinigunViewcone_t&)
 T CNPC_Strider::GetWeaponLosZ(Vector const&, float, float, float, CBaseEntity*, float*)
 T CNPC_Strider::HandleAnimEvent(animevent_t*)
 T CNPC_Strider::HandleInteraction(int, void*, CBaseCombatCharacter*)
 T CNPC_Strider::IRelationType(CBaseEntity*)
 T CNPC_Strider::InitBoneControllers()
 T CNPC_Strider::InitCustomSchedules()
 T CNPC_Strider::InputClearTargetPath(inputdata_t&)
 T CNPC_Strider::InputCrouch(inputdata_t&)
 T CNPC_Strider::InputCrouchInstantly(inputdata_t&)
 T CNPC_Strider::InputDisableAggressiveBehavior(inputdata_t&)
 T CNPC_Strider::InputDisableCollisionWith(inputdata_t&)
 T CNPC_Strider::InputDisableCrouch(inputdata_t&)
 T CNPC_Strider::InputDisableCrouchWalk(inputdata_t&)
 T CNPC_Strider::InputDisableMinigun(inputdata_t&)
 T CNPC_Strider::InputDisableMoveToLOS(inputdata_t&)
 T CNPC_Strider::InputEnableAggressiveBehavior(inputdata_t&)
 T CNPC_Strider::InputEnableCollisionWith(inputdata_t&)
 T CNPC_Strider::InputEnableCrouchWalk(inputdata_t&)
 T CNPC_Strider::InputEnableMinigun(inputdata_t&)
 T CNPC_Strider::InputExplode(inputdata_t&)
 T CNPC_Strider::InputFlickRagdoll(inputdata_t&)
 T CNPC_Strider::InputScaleGroundSpeed(inputdata_t&)
 T CNPC_Strider::InputSetCannonTarget(inputdata_t&)
 T CNPC_Strider::InputSetHeight(inputdata_t&)
 T CNPC_Strider::InputSetMinigunTarget(inputdata_t&)
 T CNPC_Strider::InputSetMinigunTime(inputdata_t&)
 T CNPC_Strider::InputSetTargetPath(inputdata_t&)
 T CNPC_Strider::InputStand(inputdata_t&)
 T CNPC_Strider::InputStopShootingMinigunForSeconds(inputdata_t&)
 T CNPC_Strider::IsUnusableNode(int, CAI_Hint*)
 T CNPC_Strider::IsValidEnemy(CBaseEntity*)
 T CNPC_Strider::IsValidShootPosition(Vector const&, CAI_Node*, CAI_Hint const*)
 T CNPC_Strider::LeftFootHit(float)
 T CNPC_Strider::LoadedSchedules()
 T CNPC_Strider::MaintainTurnActivity()
 T CNPC_Strider::MakeTracer(Vector const&, CGameTrace const&, int)
 T CNPC_Strider::MaxYawSpeed()
 T CNPC_Strider::MeleeAttack1Conditions(float, float)
 T CNPC_Strider::MeleeAttack2Conditions(float, float)
 T CNPC_Strider::NPCThink()
 T CNPC_Strider::NewTarget()
 T CNPC_Strider::OnMinigunStartShooting(CBaseEntity*)
 T CNPC_Strider::OnMinigunStopShooting(CBaseEntity*)
 T CNPC_Strider::OnMovementComplete()
 T CNPC_Strider::OnRestore()
 T CNPC_Strider::OnStateChange(NPC_STATE, NPC_STATE)
 T CNPC_Strider::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CNPC_Strider::OverrideMove(float)
 T CNPC_Strider::PainSound(CTakeDamageInfo const&)
 T CNPC_Strider::PopulatePoseParameters()
 T CNPC_Strider::PostNPCInit()
 T CNPC_Strider::Precache()
 T CNPC_Strider::PrescheduleThink()
 T CNPC_Strider::RagdollDeathEffect(CRagdollProp*, float)
 T CNPC_Strider::RangeAttack2Conditions(float, float)
 T CNPC_Strider::RightFootHit(float)
 T CNPC_Strider::RunTask(Task_t const*)
 T CNPC_Strider::ScheduledFollowPath(int, CBaseEntity*, Activity)
 T CNPC_Strider::ScheduledMoveToGoalEntity(int, CBaseEntity*, Activity)
 T CNPC_Strider::SelectSchedule()
 T CNPC_Strider::SetTargetPath()
 T CNPC_Strider::SetupGlobalModelData()
 T CNPC_Strider::ShootMinigun(Vector const*, float, Vector const&)
 T CNPC_Strider::ShouldAttractAutoAim(CBaseEntity*)
 T CNPC_Strider::ShouldExplodeFromDamage(CTakeDamageInfo const&)
 T CNPC_Strider::ShouldProbeCollideAgainstEntity(CBaseEntity*)
 T CNPC_Strider::Spawn()
 T CNPC_Strider::SquadSlotName(int)
 T CNPC_Strider::StartSmoking()
 T CNPC_Strider::StartTask(Task_t const*)
 T CNPC_Strider::StompHit(int)
 T CNPC_Strider::StriderEnemyDistance(CBaseEntity*)
 T CNPC_Strider::TakeDamageFromCombineBall(CTakeDamageInfo const&)
 T CNPC_Strider::TestCollision(Ray_t const&, unsigned int, CGameTrace&)
 T CNPC_Strider::TestShootPosition(Vector const&, Vector const&)
 T CNPC_Strider::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
 T CNPC_Strider::TranslateNavGoal(CBaseEntity*, Vector&)
 T CNPC_Strider::TranslateSchedule(int)
 T CNPC_Strider::UpdateEfficiency(bool)
 T CNPC_Strider::UpdateEnemyMemory(CBaseEntity*, Vector const&, CBaseEntity*)
 T CNPC_Strider::UpdateMinigunControls(float&, float&)
 T CNPC_Strider::UpdateOnRemove()
 T CNPC_Strider::VPhysicsShadowCollision(int, gamevcollisionevent_t*)
 T CNPC_Strider::WeaponLOSCondition(Vector const&, Vector const&, bool)
 T CNPC_Strider::Weapon_ShootPosition()
 T CNPC_Strider::YouForgotToImplementOrDeclareServerClass()
 T CNPC_Strider::~CNPC_Strider()
 T CNPC_VehicleDriver::Activate()
 T CNPC_VehicleDriver::BloodColor()
 T CNPC_VehicleDriver::CNPC_VehicleDriver()
 T CNPC_VehicleDriver::CheckForTeleport()
 T CNPC_VehicleDriver::Classify()
 T CNPC_VehicleDriver::DriveVehicle()
 T CNPC_VehicleDriver::GatherEnemyConditions(CBaseEntity*)
 T CNPC_VehicleDriver::GetClassScheduleIdSpace()
 T CNPC_VehicleDriver::GetDataDescMap()
 T CNPC_VehicleDriver::GetDefaultNavGoalTolerance()
 T CNPC_VehicleDriver::GetSchedulingErrorName()
 T CNPC_VehicleDriver::IRelationType(CBaseEntity*)
 T CNPC_VehicleDriver::InitCustomSchedules()
 T CNPC_VehicleDriver::InputGotoPathCorner(inputdata_t&)
 T CNPC_VehicleDriver::InputSetDriversMaxSpeed(inputdata_t&)
 T CNPC_VehicleDriver::InputSetDriversMinSpeed(inputdata_t&)
 T CNPC_VehicleDriver::InputStartFiring(inputdata_t&)
 T CNPC_VehicleDriver::InputStartForward(inputdata_t&)
 T CNPC_VehicleDriver::InputStop(inputdata_t&)
 T CNPC_VehicleDriver::InputStopFiring(inputdata_t&)
 T CNPC_VehicleDriver::LoadSchedules()
 T CNPC_VehicleDriver::LoadedSchedules()
 T CNPC_VehicleDriver::OnRestore()
 T CNPC_VehicleDriver::OverrideMove(float)
 T CNPC_VehicleDriver::OverridePathMove(float)
 T CNPC_VehicleDriver::Precache()
 T CNPC_VehicleDriver::PrescheduleThink()
 T CNPC_VehicleDriver::RangeAttack1Conditions(float, float)
 T CNPC_VehicleDriver::RangeAttack2Conditions(float, float)
 T CNPC_VehicleDriver::RunTask(Task_t const*)
 T CNPC_VehicleDriver::SelectSchedule()
 T CNPC_VehicleDriver::Spawn()
 T CNPC_VehicleDriver::SquadSlotName(int)
 T CNPC_VehicleDriver::StartTask(Task_t const*)
 T CNPC_VehicleDriver::TranslateSchedule(int)
 T CNPC_VehicleDriver::UpdateEfficiency(bool)
 T CNPC_VehicleDriver::UpdateOnRemove()
 T CNPC_VehicleDriver::WaypointReached()
 T CNPC_VehicleDriver::~CNPC_VehicleDriver()
 T CNPC_Vortigaunt::AimGun()
 T CNPC_Vortigaunt::AlertSound()
 T CNPC_Vortigaunt::ArmBeam(int, int)
 T CNPC_Vortigaunt::BodyTarget(Vector const&, bool)
 T CNPC_Vortigaunt::BuildScheduleTestBits()
 T CNPC_Vortigaunt::CNPC_Vortigaunt()
 T CNPC_Vortigaunt::CanBeUsedAsAFriend()
 T CNPC_Vortigaunt::CanFlinch()
 T CNPC_Vortigaunt::CanRunAScriptedNPCInteraction(bool)
 T CNPC_Vortigaunt::Classify()
 T CNPC_Vortigaunt::ClearSchedule(char const*)
 T CNPC_Vortigaunt::CreateBeamBlast(Vector const&)
 T CNPC_Vortigaunt::DeathSound(CTakeDamageInfo const&)
 T CNPC_Vortigaunt::DeclineFollowing()
 T CNPC_Vortigaunt::DispelAntlions(Vector const&, float, bool)
 T CNPC_Vortigaunt::EndHandGlow(int)
 T CNPC_Vortigaunt::Event_Killed(CTakeDamageInfo const&)
 T CNPC_Vortigaunt::FInViewCone(CBaseEntity*)
 T CNPC_Vortigaunt::FacingPosition()
 T CNPC_Vortigaunt::GatherConditions()
 T CNPC_Vortigaunt::GatherHealConditions()
 T CNPC_Vortigaunt::GetClassScheduleIdSpace()
 T CNPC_Vortigaunt::GetDataDescMap()
 T CNPC_Vortigaunt::GetHeadDebounce()
 T CNPC_Vortigaunt::GetReadinessDecay()
 T CNPC_Vortigaunt::GetSchedulingErrorName()
 T CNPC_Vortigaunt::GetServerClass()
 T CNPC_Vortigaunt::HandleAnimEvent(animevent_t*)
 T CNPC_Vortigaunt::HealBehaviorAvailable()
 T CNPC_Vortigaunt::HealGestureHasLOS()
 T CNPC_Vortigaunt::IRelationPriority(CBaseEntity*)
 T CNPC_Vortigaunt::IRelationType(CBaseEntity*)
 T CNPC_Vortigaunt::InitCustomSchedules()
 T CNPC_Vortigaunt::InnateRange1MaxRange()
 T CNPC_Vortigaunt::InnateRange1MinRange()
 T CNPC_Vortigaunt::InnateWeaponLOSCondition(Vector const&, Vector const&, bool)
 T CNPC_Vortigaunt::InputBeginCarryNPC(inputdata_t&)
 T CNPC_Vortigaunt::InputChargeTarget(inputdata_t&)
 T CNPC_Vortigaunt::InputDisableArmorRecharge(inputdata_t&)
 T CNPC_Vortigaunt::InputDisableHealthRegeneration(inputdata_t&)
 T CNPC_Vortigaunt::InputDispel(inputdata_t&)
 T CNPC_Vortigaunt::InputEnableArmorRecharge(inputdata_t&)
 T CNPC_Vortigaunt::InputEnableHealthRegeneration(inputdata_t&)
 T CNPC_Vortigaunt::InputEndCarryNPC(inputdata_t&)
 T CNPC_Vortigaunt::InputExtractBugbait(inputdata_t&)
 T CNPC_Vortigaunt::InputTurnBlack(inputdata_t&)
 T CNPC_Vortigaunt::InputTurnBlue(inputdata_t&)
 T CNPC_Vortigaunt::IsInterruptable()
 T CNPC_Vortigaunt::IsPlayerAlly()
 T CNPC_Vortigaunt::IsReadinessCapable()
 T CNPC_Vortigaunt::IsValidEnemy(CBaseEntity*)
 T CNPC_Vortigaunt::LoadedSchedules()
 T CNPC_Vortigaunt::MaintainHealSchedule()
 T CNPC_Vortigaunt::MaxYawSpeed()
 T CNPC_Vortigaunt::MeleeAttack1Conditions(float, float)
 T CNPC_Vortigaunt::NPC_TranslateActivity(Activity)
 T CNPC_Vortigaunt::NumAntlionsInRadius(float)
 T CNPC_Vortigaunt::OnRestore()
 T CNPC_Vortigaunt::OnScheduleChange()
 T CNPC_Vortigaunt::OnStartScene()
 T CNPC_Vortigaunt::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CNPC_Vortigaunt::OnUpdateShotRegulator()
 T CNPC_Vortigaunt::OverrideMoveFacing(AILocalMoveGoal_t const&, float)
 T CNPC_Vortigaunt::PainSound(CTakeDamageInfo const&)
 T CNPC_Vortigaunt::Precache()
 T CNPC_Vortigaunt::PrescheduleThink()
 T CNPC_Vortigaunt::RangeAttack1Conditions(float, float)
 T CNPC_Vortigaunt::RangeAttack2Conditions(float, float)
 T CNPC_Vortigaunt::RunTask(Task_t const*)
 T CNPC_Vortigaunt::SelectFailSchedule(int, int, int)
 T CNPC_Vortigaunt::SelectHealSchedule()
 T CNPC_Vortigaunt::SelectSchedule()
 T CNPC_Vortigaunt::SetScriptedScheduleIgnoreConditions(Interruptability_t)
 T CNPC_Vortigaunt::ShouldHealTarget(CBaseEntity*)
 T CNPC_Vortigaunt::ShouldMoveAndShoot()
 T CNPC_Vortigaunt::ShouldRegenerateHealth()
 T CNPC_Vortigaunt::Spawn()
 T CNPC_Vortigaunt::SpeakSentence(int)
 T CNPC_Vortigaunt::SquadSlotName(int)
 T CNPC_Vortigaunt::StartHandGlow(int, int)
 T CNPC_Vortigaunt::StartTask(Task_t const*)
 T CNPC_Vortigaunt::StopHealing(bool)
 T CNPC_Vortigaunt::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
 T CNPC_Vortigaunt::TranslateSchedule(int)
 T CNPC_Vortigaunt::UpdateOnRemove()
 T CNPC_Vortigaunt::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CNPC_Vortigaunt::YouForgotToImplementOrDeclareServerClass()
 T CNPC_Vortigaunt::ZapBeam(int)
 T CNPC_Vortigaunt::~CNPC_Vortigaunt()
 T CNetworkColor32Base<color32_s, CBaseEntity::NetworkVar_m_clrRender>::Init(unsigned char, unsigned char, unsigned char)
 T CNetworkColor32Base<color32_s, CBaseEntity::NetworkVar_m_clrRender>::Init(unsigned char, unsigned char, unsigned char, unsigned char)
 T CNetworkColor32Base<color32_s, CShadowControl::NetworkVar_m_shadowColor>::Init(unsigned char, unsigned char, unsigned char, unsigned char)
 T CNetworkHandleBase<CBaseEntity, CBasePlayer::NetworkVar_m_hVehicle>::operator=(CBaseEntity const*)
 T CNetworkHandleBase<CBaseEntity, CBasePlayer::NetworkVar_m_hZoomOwner>::operator=(CBaseEntity const*)
 T CNetworkHandleBase<CBaseEntity, CHL2MP_Player::NetworkVar_m_hRagdoll>::operator=(CBaseEntity const*)
 T CNetworkHandleBase<CBaseEntity, CSprite::NetworkVar_m_hAttachedToEntity>::operator=(CBaseEntity const*)
 T CNetworkHandleBase<CBaseEntity, CWeaponPhysCannon::NetworkVar_m_hAttachedObject>::operator=(CBaseEntity const*)
 T CNetworkVarBase<Vector, CPropCrane::NetworkVar_m_vecEyeExitEndpoint>::NetworkStateChanged()
 T CNetworkVarBase<Vector, CPropVehicleDriveable::NetworkVar_m_vecEyeExitEndpoint>::NetworkStateChanged()
 T CNetworkVarBase<Vector, CPropVehiclePrisonerPod::NetworkVar_m_vecEyeExitEndpoint>::NetworkStateChanged()
 T CNetworkVarBase<bool, CPropCrane::NetworkVar_m_bEnterAnimOn>::NetworkStateChanged()
 T CNetworkVarBase<bool, CPropCrane::NetworkVar_m_bExitAnimOn>::NetworkStateChanged()
 T CNetworkVarBase<bool, CPropVehicleDriveable::NetworkVar_m_bEnterAnimOn>::NetworkStateChanged()
 T CNetworkVarBase<bool, CPropVehicleDriveable::NetworkVar_m_bExitAnimOn>::NetworkStateChanged()
 T CNetworkVarBase<bool, CPropVehiclePrisonerPod::NetworkVar_m_bExitAnimOn>::NetworkStateChanged()
 T CNetworkVarBase<float, CColorCorrection::NetworkVar_m_flCurWeight>::Set(float const&)
 T CNetworkVarBase<float, CSpriteTrail::NetworkVar_m_flStartWidthVariance>::Set(float const&)
 T CNetworkVarBase<int, CPhysicsPropMultiplayer::NetworkVar_m_iPhysicsMode>::NetworkStateChanged()
 T CNetworkVarBase<int, CRopeKeyframe::NetworkVar_m_fLockedPoints>::Set(int const&)
 T CNetworkVarBase<int, CVGuiScreen::NetworkVar_m_fScreenFlags>::Set(int const&)
 T CNetworkVectorBase<QAngle, CHL2MP_Player::NetworkVar_m_angEyeAngles>::Init(float, float, float)
 T CNetworkVectorBase<Vector, CEnvProjectedTexture::NetworkVar_m_LinearFloatLightColor>::Init(float, float, float)
 T CNetworkVectorBase<Vector, CPropVehicleDriveable::NetworkVar_m_vecEyeExitEndpoint>::Init(float, float, float)
 T CNetworkVectorBase<Vector, CPropVehicleDriveable::NetworkVar_m_vecGunCrosshair>::Init(float, float, float)
 T CNetworkVectorBase<Vector, CShadowControl::NetworkVar_m_shadowDirection>::Init(float, float, float)
 T CNetworkVectorBase<Vector, CSpriteTrail::NetworkVar_m_vecSkyboxOrigin>::Init(float, float, float)
 T CNetworkVectorBase<Vector, CSun::NetworkVar_m_vDirection>::Init(float, float, float)
 T CNetworkVectorBase<Vector, RocketTrail::NetworkVar_m_EndColor>::Init(float, float, float)
 T CNetworkVectorBase<Vector, RocketTrail::NetworkVar_m_StartColor>::Init(float, float, float)
 T CNetworkVectorBase<Vector, SmokeTrail::NetworkVar_m_EndColor>::Init(float, float, float)
 T CNetworkVectorBase<Vector, SmokeTrail::NetworkVar_m_StartColor>::Init(float, float, float)
 T CNewNPC::Classify()
 T CNewNPC::GetClassScheduleIdSpace()
 T CNewNPC::GetDataDescMap()
 T CNewNPC::GetSchedulingErrorName()
 T CNewNPC::InitCustomSchedules()
 T CNewNPC::LoadedSchedules()
 T CNewNPC::Precache()
 T CNewNPC::Spawn()
 T CNewNPC::SquadSlotName(int)
 T CNewNPC::~CNewNPC()
 T CNewRecharge* _CreateEntityTemplate<CNewRecharge>(CNewRecharge*, char const*)
 T CNewRecharge::CreateVPhysics()
 T CNewRecharge::DrawDebugTextOverlays()
 T CNewRecharge::GetDataDescMap()
 T CNewRecharge::InputRecharge(inputdata_t&)
 T CNewRecharge::InputSetCharge(inputdata_t&)
 T CNewRecharge::KeyValue(char const*, char const*)
 T CNewRecharge::ObjectCaps()
 T CNewRecharge::Off()
 T CNewRecharge::Precache()
 T CNewRecharge::Recharge()
 T CNewRecharge::Spawn()
 T CNewRecharge::StudioFrameAdvance()
 T CNewRecharge::UpdateJuice(int)
 T CNewRecharge::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CNewRecharge::~CNewRecharge()
 T CNewWallHealth::CreateVPhysics()
 T CNewWallHealth::DrawDebugTextOverlays()
 T CNewWallHealth::GetDataDescMap()
 T CNewWallHealth::KeyValue(char const*, char const*)
 T CNewWallHealth::ObjectCaps()
 T CNewWallHealth::Off()
 T CNewWallHealth::Precache()
 T CNewWallHealth::Recharge()
 T CNewWallHealth::Spawn()
 T CNewWallHealth::StudioFrameAdvance()
 T CNewWallHealth::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CNewWallHealth::~CNewWallHealth()
 T CNodeEnt::GetDataDescMap()
 T CNodeEnt::SetOwnerEntity(CBaseEntity*)
 T CNodeEnt::Spawn()
 T CNodeEnt::Spawn(char const*)
 T CNodeEnt::~CNodeEnt()
 T CNodeFilter::NodeDistanceSqr(CAI_Node&)
 T CNodeFilter::NodeIsValid(CAI_Node&)
 T CNodeList::IsLowerPriority(AI_NearNode_t const&, AI_NearNode_t const&)
 T CNodeList::RevIsLowerPriority(AI_NearNode_t const&, AI_NearNode_t const&)
 T CNonModifiedPointerProxy::CNonModifiedPointerProxy(void* (*)(SendProp const*, void const*, void const*, CSendProxyRecipients*, int))
 T CNotifyList::AddEntity(CBaseEntity*, CBaseEntity*)
 T CNotifyList::ClearEntity(CBaseEntity*)
 T CNotifyList::OnEntityCreated(CBaseEntity*)
 T CNotifyList::OnEntityDeleted(CBaseEntity*)
 T CNotifyList::RemoveEntity(CBaseEntity*, CBaseEntity*)
 T CNotifyList::ReportNamedEvent(CBaseEntity*, char const*)
 T CNotifyList::ReportSystemEvent(CBaseEntity*, notify_system_event_t, notify_system_event_params_t const&)
 T CNotifyList::~CNotifyList()
 T CNullEntity::Spawn()
 T CNullEntity::~CNullEntity()
 T COrnamentProp::Activate()
 T COrnamentProp::AttachTo(char const*, CBaseEntity*, CBaseEntity*)
 T COrnamentProp::GetDataDescMap()
 T COrnamentProp::InputDetach(inputdata_t&)
 T COrnamentProp::InputSetAttached(inputdata_t&)
 T COrnamentProp::Spawn()
 T COrnamentProp::~COrnamentProp()
 T COutputEvent::FireOutput(CBaseEntity*, CBaseEntity*, float)
 T COverrideMoveCache::FindTargetsInRadius(CBaseEntity*, Vector const&, float)
 T COverrideMoveCache::ForceRepopulateList()
 T COverrideMoveCache::OnEntityDeleted(CBaseEntity*)
 T COverrideMoveCache::OnEntitySpawned(CBaseEntity*)
 T COverrideMoveCache::~COverrideMoveCache()
 T CPASAttenuationFilter::CPASAttenuationFilter(CBaseEntity*, char const*)
 T CPASAttenuationFilter::CPASAttenuationFilter(CBaseEntity*, char const*, short&)
 T CPASAttenuationFilter::CPASAttenuationFilter(CBaseEntity*, float)
 T CPASAttenuationFilter::CPASAttenuationFilter(CBaseEntity*, soundlevel_t)
 T CPASAttenuationFilter::CPASAttenuationFilter(Vector const&, soundlevel_t)
 T CPASAttenuationFilter::Filter(Vector const&, float)
 T CPASAttenuationFilter::~CPASAttenuationFilter()
 T CPASFilter::~CPASFilter()
 T CPVSFilter::~CPVSFilter()
 T CParallelProcessor<QueryCacheUpdateRecord_t, CFuncJobItemProcessor<QueryCacheUpdateRecord_t> >::DoExecute()
 T CParallelProcessor<QueryCacheUpdateRecord_t, CFuncJobItemProcessor<QueryCacheUpdateRecord_t> >::Run(QueryCacheUpdateRecord_t*, unsigned int, int, IThreadPool*)
 T CParticleFire::GetDataDescMap()
 T CParticleFire::GetServerClass()
 T CParticleFire::YouForgotToImplementOrDeclareServerClass()
 T CParticleFire::~CParticleFire()
 T CParticleLight::GetDataDescMap()
 T CParticleLight::~CParticleLight()
 T CParticlePerformanceMonitor::GetDataDescMap()
 T CParticlePerformanceMonitor::GetServerClass()
 T CParticlePerformanceMonitor::InputStartMeasuring(inputdata_t&)
 T CParticlePerformanceMonitor::InputStopMeasuring(inputdata_t&)
 T CParticlePerformanceMonitor::InputTurnOffDisplay(inputdata_t&)
 T CParticlePerformanceMonitor::InputTurnOnDisplay(inputdata_t&)
 T CParticlePerformanceMonitor::Spawn()
 T CParticlePerformanceMonitor::UpdateTransmitState()
 T CParticlePerformanceMonitor::YouForgotToImplementOrDeclareServerClass()
 T CParticlePerformanceMonitor::~CParticlePerformanceMonitor()
 T CParticleSystem::Activate()
 T CParticleSystem::GetDataDescMap()
 T CParticleSystem::GetServerClass()
 T CParticleSystem::InputStart(inputdata_t&)
 T CParticleSystem::InputStop(inputdata_t&)
 T CParticleSystem::Precache()
 T CParticleSystem::ReadControlPointEnts()
 T CParticleSystem::Spawn()
 T CParticleSystem::StartParticleSystem()
 T CParticleSystem::StartParticleSystemThink()
 T CParticleSystem::StopParticleSystem()
 T CParticleSystem::UpdateTransmitState()
 T CParticleSystem::YouForgotToImplementOrDeclareServerClass()
 T CParticleSystem::~CParticleSystem()
 T CParticleSystemDefinition::ParseChildren(CDmxElement*)
 T CParticleSystemDefinition::ParseOperators(char const*, ParticleFunctionType_t, CDmxElement*, CUtlVector<CParticleOperatorInstance*, CUtlMemory<CParticleOperatorInstance*, int> >&)
 T CParticleSystemDefinition::Precache()
 T CParticleSystemDefinition::Read(CDmxElement*)
 T CParticleSystemDefinition::SetupContextData()
 T CParticleSystemDefinition::ShouldAlwaysPrecache() const
 T CParticleSystemDefinition::~CParticleSystemDefinition()
 T CParticleSystemDictionary::AddParticleSystem(CDmxElement*)
 T CParticleSystemDictionary::DestroyExistingElement(CDmxElement*)
 T CParticleSystemDictionary::~CParticleSystemDictionary()
 T CParticleSystemMgr::CParticleSystemMgr()
 T CParticleSystemMgr::DecommitTempMemory()
 T CParticleSystemMgr::FindParticleSystem(char const*)
 T CParticleSystemMgr::GetParticleSystemCount()
 T CParticleSystemMgr::GetParticleSystemNameFromIndex(int)
 T CParticleSystemMgr::Init(IParticleSystemQuery*)
 T CParticleSystemMgr::ReadParticleConfigFile(CUtlBuffer&, bool, bool, char const*)
 T CParticleSystemMgr::ReadParticleConfigFile(char const*, bool, bool)
 T CParticleSystemMgr::ReadParticleDefinitions(CUtlBuffer&, char const*, bool, bool)
 T CParticleSystemMgr::ShouldLoadSheets(bool)
 T CParticleSystemMgr::~CParticleSystemMgr()
 T CParticleSystemQuery::GetCollisionGroupFromName(char const*)
 T CParticleSystemQuery::GetControllingObjectHitBoxInfo(CParticleCollection*, int, int, ModelHitBoxInfo_t*)
 T CParticleSystemQuery::GetLightingAtPoint(Vector const&, Color&)
 T CParticleSystemQuery::GetLocalPlayerEyeVectors(Vector*, Vector*, Vector*)
 T CParticleSystemQuery::GetLocalPlayerPos()
 T CParticleSystemQuery::GetPixelVisibility(int*, Vector const&, float)
 T CParticleSystemQuery::GetRandomPointsOnControllingObjectHitBox(CParticleCollection*, int, int, float, int, Vector*, Vector, Vector*, int*)
 T CParticleSystemQuery::IsPointInControllingObjectHitBox(CParticleCollection*, int, Vector, bool)
 T CParticleSystemQuery::MovePointInsideControllingObject(CParticleCollection*, void*, Vector*)
 T CParticleSystemQuery::SetUpLightingEnvironment(Vector const&)
 T CParticleSystemQuery::TraceLine(Vector const&, Vector const&, unsigned int, IHandleEntity const*, int, CBaseTrace*)
 T CPathCorner::DrawDebugGeometryOverlays()
 T CPathCorner::DrawDebugTextOverlays()
 T CPathCorner::GetDataDescMap()
 T CPathCorner::GetDelay()
 T CPathCorner::InputInPass(inputdata_t&)
 T CPathCorner::InputSetNextPathCorner(inputdata_t&)
 T CPathCorner::Spawn()
 T CPathCorner::~CPathCorner()
 T CPathCornerCrash::~CPathCornerCrash()
 T CPathKeyFrame::Activate()
 T CPathKeyFrame::CalculateFrameDuration()
 T CPathKeyFrame::GetDataDescMap()
 T CPathKeyFrame::Spawn()
 T CPathKeyFrame::~CPathKeyFrame()
 T CPathTrack::Activate()
 T CPathTrack::BeginIteration()
 T CPathTrack::DisableAlternatePath()
 T CPathTrack::DisablePath()
 T CPathTrack::DrawDebugGeometryOverlays()
 T CPathTrack::EnableAlternatePath()
 T CPathTrack::EnablePath()
 T CPathTrack::EndIteration()
 T CPathTrack::GetDataDescMap()
 T CPathTrack::GetNext()
 T CPathTrack::GetNextInDir(bool)
 T CPathTrack::GetOrientation(bool)
 T CPathTrack::GetOrientationType()
 T CPathTrack::GetPrevious()
 T CPathTrack::HasBeenVisited() const
 T CPathTrack::InputDisableAlternatePath(inputdata_t&)
 T CPathTrack::InputDisablePath(inputdata_t&)
 T CPathTrack::InputEnableAlternatePath(inputdata_t&)
 T CPathTrack::InputEnablePath(inputdata_t&)
 T CPathTrack::InputPass(inputdata_t&)
 T CPathTrack::InputTeleport(inputdata_t&)
 T CPathTrack::InputToggleAlternatePath(inputdata_t&)
 T CPathTrack::InputTogglePath(inputdata_t&)
 T CPathTrack::Link()
 T CPathTrack::LookAhead(Vector&, float, int, CPathTrack**)
 T CPathTrack::Nearest(Vector const&)
 T CPathTrack::Spawn()
 T CPathTrack::ValidPath(CPathTrack*, int)
 T CPathTrack::Visit()
 T CPathTrack::~CPathTrack()
 T CPathfindNearestNodeFilter::IsValid(CAI_Node*)
 T CPathfindNearestNodeFilter::ShouldContinue()
 T CPhysBallSocket::CreateConstraint(IPhysicsConstraintGroup*, hl_constraint_info_t const&)
 T CPhysBallSocket::~CPhysBallSocket()
 T CPhysBox::CreateVPhysics()
 T CPhysBox::DrawDebugTextOverlays()
 T CPhysBox::GetDataDescMap()
 T CPhysBox::GetServerClass()
 T CPhysBox::HasPreferredCarryAnglesForPlayer(CBasePlayer*)
 T CPhysBox::InputDisableFloating(inputdata_t&)
 T CPhysBox::InputDisableMotion(inputdata_t&)
 T CPhysBox::InputEnableMotion(inputdata_t&)
 T CPhysBox::InputForceDrop(inputdata_t&)
 T CPhysBox::InputSleep(inputdata_t&)
 T CPhysBox::InputWake(inputdata_t&)
 T CPhysBox::ObjectCaps()
 T CPhysBox::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T CPhysBox::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CPhysBox::OnTakeDamage(CTakeDamageInfo const&)
 T CPhysBox::PreferredCarryAngles()
 T CPhysBox::Spawn()
 T CPhysBox::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CPhysBox::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CPhysBox::VPhysicsUpdate(IPhysicsObject*)
 T CPhysBox::YouForgotToImplementOrDeclareServerClass()
 T CPhysBox::~CPhysBox()
 T CPhysBoxMultiplayer::Activate()
 T CPhysBoxMultiplayer::GetDataDescMap()
 T CPhysBoxMultiplayer::GetMass()
 T CPhysBoxMultiplayer::GetMultiplayerPhysicsMode()
 T CPhysBoxMultiplayer::GetServerClass()
 T CPhysBoxMultiplayer::IsAsleep()
 T CPhysBoxMultiplayer::YouForgotToImplementOrDeclareServerClass()
 T CPhysBoxMultiplayer::~CPhysBoxMultiplayer()
 T CPhysConstraint::Activate()
 T CPhysConstraint::ActivateConstraint()
 T CPhysConstraint::Deactivate()
 T CPhysConstraint::DrawDebugGeometryOverlays()
 T CPhysConstraint::DrawDebugTextOverlays()
 T CPhysConstraint::GetConstraintObjects(hl_constraint_info_t&)
 T CPhysConstraint::GetDataDescMap()
 T CPhysConstraint::InputBreak(inputdata_t&)
 T CPhysConstraint::InputOnBreak(inputdata_t&)
 T CPhysConstraint::InputTurnOff(inputdata_t&)
 T CPhysConstraint::InputTurnOn(inputdata_t&)
 T CPhysConstraint::NotifySystemEvent(CBaseEntity*, notify_system_event_t, notify_system_event_params_t const&)
 T CPhysConstraint::OnBreak()
 T CPhysConstraint::OnConstraintSetup(hl_constraint_info_t&)
 T CPhysConstraint::Precache()
 T CPhysConstraint::Spawn()
 T CPhysConstraint::~CPhysConstraint()
 T CPhysConstraintEvents::ConstraintBroken(IPhysicsConstraint*)
 T CPhysConstraintSystem::GetDataDescMap()
 T CPhysConstraintSystem::Spawn()
 T CPhysConstraintSystem::~CPhysConstraintSystem()
 T CPhysConvert::GetDataDescMap()
 T CPhysConvert::InputConvertTarget(inputdata_t&)
 T CPhysConvert::~CPhysConvert()
 T CPhysExplosion::DrawDebugTextOverlays()
 T CPhysExplosion::Explode(CBaseEntity*, CBaseEntity*)
 T CPhysExplosion::FindEntity(CBaseEntity*, CBaseEntity*, CBaseEntity*)
 T CPhysExplosion::GetDataDescMap()
 T CPhysExplosion::InputExplode(inputdata_t&)
 T CPhysExplosion::Spawn()
 T CPhysExplosion::~CPhysExplosion()
 T CPhysFixed::CreateConstraint(IPhysicsConstraintGroup*, hl_constraint_info_t const&)
 T CPhysFixed::DrawDebugGeometryOverlays()
 T CPhysFixed::DrawDebugTextOverlays()
 T CPhysFixed::MoveToRefPosition()
 T CPhysFixed::~CPhysFixed()
 T CPhysForce::Activate()
 T CPhysForce::ActivateForce()
 T CPhysForce::ForceOff()
 T CPhysForce::GetDataDescMap()
 T CPhysForce::InputActivate(inputdata_t&)
 T CPhysForce::InputDeactivate(inputdata_t&)
 T CPhysForce::InputForceScale(inputdata_t&)
 T CPhysForce::OnActivate()
 T CPhysForce::OnRestore()
 T CPhysForce::Spawn()
 T CPhysForce::~CPhysForce()
 T CPhysHinge::CreateConstraint(IPhysicsConstraintGroup*, hl_constraint_info_t const&)
 T CPhysHinge::Deactivate()
 T CPhysHinge::DrawDebugGeometryOverlays()
 T CPhysHinge::GetDataDescMap()
 T CPhysHinge::InputSetHingeFriction(inputdata_t&)
 T CPhysHinge::InputSetVelocity(inputdata_t&)
 T CPhysHinge::IsWorldHinge(hl_constraint_info_t const&, int*)
 T CPhysHinge::NotifyVPhysicsStateChanged(IPhysicsObject*, CBaseEntity*, bool)
 T CPhysHinge::Spawn()
 T CPhysHinge::~CPhysHinge()
 T CPhysImpact::Activate()
 T CPhysImpact::GetDataDescMap()
 T CPhysImpact::InputImpact(inputdata_t&)
 T CPhysImpact::PointAtEntity()
 T CPhysImpact::Spawn()
 T CPhysImpact::~CPhysImpact()
 T CPhysLength::CreateConstraint(IPhysicsConstraintGroup*, hl_constraint_info_t const&)
 T CPhysLength::DrawDebugGeometryOverlays()
 T CPhysLength::GetDataDescMap()
 T CPhysLength::~CPhysLength()
 T CPhysMagnet::ConstraintBroken(IPhysicsConstraint*)
 T CPhysMagnet::DetachAll()
 T CPhysMagnet::DoMagnetSuck(CBaseEntity*)
 T CPhysMagnet::GetDataDescMap()
 T CPhysMagnet::GetServerClass()
 T CPhysMagnet::GetTotalMassAttachedObjects()
 T CPhysMagnet::InputToggle(inputdata_t&)
 T CPhysMagnet::InputTurnOff(inputdata_t&)
 T CPhysMagnet::InputTurnOn(inputdata_t&)
 T CPhysMagnet::Precache()
 T CPhysMagnet::SetConstraintGroup(IPhysicsConstraintGroup*)
 T CPhysMagnet::Spawn()
 T CPhysMagnet::Touch(CBaseEntity*)
 T CPhysMagnet::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CPhysMagnet::YouForgotToImplementOrDeclareServerClass()
 T CPhysMagnet::~CPhysMagnet()
 T CPhysMotor::Activate()
 T CPhysMotor::GetDataDescMap()
 T CPhysMotor::InputSetTargetSpeed(inputdata_t&)
 T CPhysMotor::InputTurnOff(inputdata_t&)
 T CPhysMotor::InputTurnOn(inputdata_t&)
 T CPhysMotor::OnRestore()
 T CPhysMotor::Spawn()
 T CPhysMotor::Think()
 T CPhysMotor::~CPhysMotor()
 T CPhysObjSaveRestoreOps::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CPhysObjSaveRestoreOps::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CPhysObjSaveRestoreOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CPhysObjSaveRestoreOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CPhysPulley::CreateConstraint(IPhysicsConstraintGroup*, hl_constraint_info_t const&)
 T CPhysPulley::DrawDebugGeometryOverlays()
 T CPhysPulley::GetDataDescMap()
 T CPhysPulley::~CPhysPulley()
 T CPhysSaveRestoreBlockHandler::AssociateModel(IPhysicsObject*, CPhysCollide const*)
 T CPhysSaveRestoreBlockHandler::AssociateModel(IPhysicsObject*, int)
 T CPhysSaveRestoreBlockHandler::CEntityRestoreSet::Add(CBaseEntity*, typedescription_t*, void**, PhysInterfaceId_t)
 T CPhysSaveRestoreBlockHandler::ForgetAllModels()
 T CPhysSaveRestoreBlockHandler::ForgetModel(IPhysicsObject*)
 T CPhysSaveRestoreBlockHandler::GetBlockName()
 T CPhysSaveRestoreBlockHandler::NoteBBox(Vector const&, Vector const&, CPhysCollide*)
 T CPhysSaveRestoreBlockHandler::OnEntityCreated(CBaseEntity*)
 T CPhysSaveRestoreBlockHandler::OnEntityDeleted(CBaseEntity*)
 T CPhysSaveRestoreBlockHandler::PostRestore()
 T CPhysSaveRestoreBlockHandler::PostSave()
 T CPhysSaveRestoreBlockHandler::PreRestore()
 T CPhysSaveRestoreBlockHandler::PreSave(CSaveRestoreData*)
 T CPhysSaveRestoreBlockHandler::QueueRestore(CBaseEntity*, typedescription_t*, void**, PhysInterfaceId_t)
 T CPhysSaveRestoreBlockHandler::QueueSave(CBaseEntity*, typedescription_t*, void**, PhysInterfaceId_t)
 T CPhysSaveRestoreBlockHandler::ReadRestoreHeaders(IRestore*)
 T CPhysSaveRestoreBlockHandler::Restore(IRestore*, bool)
 T CPhysSaveRestoreBlockHandler::RestoreBlock(IRestore*, PhysObjectHeader_t const&)
 T CPhysSaveRestoreBlockHandler::RestorePhysicsObjectAndModel(IRestore*, PhysObjectHeader_t const&, CPhysSaveRestoreBlockHandler::QueuedItem_t*, int)
 T CPhysSaveRestoreBlockHandler::Save(ISave*)
 T CPhysSaveRestoreBlockHandler::SaveQueueFunc(CPhysSaveRestoreBlockHandler::QueuedItem_t const&, CPhysSaveRestoreBlockHandler::QueuedItem_t const&)
 T CPhysSaveRestoreBlockHandler::WriteSaveHeaders(ISave*)
 T CPhysSaveRestoreBlockHandler::~CPhysSaveRestoreBlockHandler()
 T CPhysSlideConstraint::CreateConstraint(IPhysicsConstraintGroup*, hl_constraint_info_t const&)
 T CPhysSlideConstraint::DrawDebugGeometryOverlays()
 T CPhysSlideConstraint::GetDataDescMap()
 T CPhysSlideConstraint::InputSetVelocity(inputdata_t&)
 T CPhysSlideConstraint::NotifyVPhysicsStateChanged(IPhysicsObject*, CBaseEntity*, bool)
 T CPhysSlideConstraint::~CPhysSlideConstraint()
 T CPhysSphere::CreateVPhysics()
 T CPhysSphere::OverridePropdata()
 T CPhysSphere::~CPhysSphere()
 T CPhysThruster::GetDataDescMap()
 T CPhysThruster::OnActivate()
 T CPhysThruster::SetupForces(IPhysicsObject*, Vector&, Vector&)
 T CPhysThruster::~CPhysThruster()
 T CPhysTorque::GetDataDescMap()
 T CPhysTorque::SetupForces(IPhysicsObject*, Vector&, Vector&)
 T CPhysTorque::Spawn()
 T CPhysTorque::~CPhysTorque()
 T CPhysicsCannister::BeginShutdownThink()
 T CPhysicsCannister::CannisterActivate(CBaseEntity*, Vector const&)
 T CPhysicsCannister::CannisterFire(CBaseEntity*)
 T CPhysicsCannister::CreateVPhysics()
 T CPhysicsCannister::Deactivate()
 T CPhysicsCannister::Explode(CBaseEntity*)
 T CPhysicsCannister::ExplodeTouch(CBaseEntity*)
 T CPhysicsCannister::GetDataDescMap()
 T CPhysicsCannister::HasPhysicsAttacker(float)
 T CPhysicsCannister::HasPreferredCarryAnglesForPlayer(CBasePlayer*)
 T CPhysicsCannister::InputActivate(inputdata_t&)
 T CPhysicsCannister::InputDeactivate(inputdata_t&)
 T CPhysicsCannister::InputExplode(inputdata_t&)
 T CPhysicsCannister::InputWake(inputdata_t&)
 T CPhysicsCannister::IsAlive()
 T CPhysicsCannister::ObjectCaps()
 T CPhysicsCannister::OnAttemptPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CPhysicsCannister::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T CPhysicsCannister::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CPhysicsCannister::OnRestore()
 T CPhysicsCannister::OnTakeDamage(CTakeDamageInfo const&)
 T CPhysicsCannister::PhysGunLaunchAngularImpulse()
 T CPhysicsCannister::PhysGunLaunchVelocity(Vector const&, float)
 T CPhysicsCannister::Precache()
 T CPhysicsCannister::PreferredCarryAngles()
 T CPhysicsCannister::ShouldPuntUseLaunchForces(PhysGunForce_t)
 T CPhysicsCannister::ShutdownJet()
 T CPhysicsCannister::Spawn()
 T CPhysicsCannister::TestCollision(Ray_t const&, unsigned int, CGameTrace&)
 T CPhysicsCannister::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
 T CPhysicsCannister::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CPhysicsCannister::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CPhysicsCannister::VPhysicsUpdate(IPhysicsObject*)
 T CPhysicsCannister::~CPhysicsCannister()
 T CPhysicsEntitySolver::GetDataDescMap()
 T CPhysicsEntitySolver::Spawn()
 T CPhysicsEntitySolver::Think()
 T CPhysicsEntitySolver::UpdateOnRemove()
 T CPhysicsEntitySolver::~CPhysicsEntitySolver()
 T CPhysicsGameTrace::VehiclePointInWater(Vector const&)
 T CPhysicsGameTrace::VehicleTraceRay(Ray_t const&, void*, CGameTrace*)
 T CPhysicsGameTrace::VehicleTraceRayWithWater(Ray_t const&, void*, CGameTrace*)
 T CPhysicsHook::FindOrAddVehicleScript(char const*, vehicleparams_t*, vehiclesounds_t*)
 T CPhysicsHook::FrameUpdatePostEntityThink()
 T CPhysicsHook::Init()
 T CPhysicsHook::LevelInitPostEntity()
 T CPhysicsHook::LevelInitPreEntity()
 T CPhysicsHook::LevelShutdownPostEntity()
 T CPhysicsHook::LevelShutdownPreEntity()
 T CPhysicsHook::Name()
 T CPhysicsHook::PreClientUpdate()
 T CPhysicsHook::~CPhysicsHook()
 T CPhysicsNPCSolver::BecomePenetrationSolver()
 T CPhysicsNPCSolver::CheckTouching()
 T CPhysicsNPCSolver::GetDataDescMap()
 T CPhysicsNPCSolver::IsContactOnNPCHead(IPhysicsFrictionSnapshot*, IPhysicsObject*, CAI_BaseNPC*)
 T CPhysicsNPCSolver::IsIntersecting()
 T CPhysicsNPCSolver::OnRestore()
 T CPhysicsNPCSolver::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)
 T CPhysicsNPCSolver::Spawn()
 T CPhysicsNPCSolver::Think()
 T CPhysicsNPCSolver::UpdateOnRemove()
 T CPhysicsNPCSolver::~CPhysicsNPCSolver()
 T CPhysicsPlayerCallback::ShouldMoveTo(IPhysicsObject*, Vector const&)
 T CPhysicsProp::CPhysicsProp()
 T CPhysicsProp::ClearFlagsThink()
 T CPhysicsProp::ComputeEnablingImpulse(int, gamevcollisionevent_t*)
 T CPhysicsProp::CreateVPhysics()
 T CPhysicsProp::DrawDebugTextOverlays()
 T CPhysicsProp::EnableMotion()
 T CPhysicsProp::GetDataDescMap()
 T CPhysicsProp::GetMass() const
 T CPhysicsProp::GetMassCenter(Vector*)
 T CPhysicsProp::GetPropDataAngles(char const*, QAngle&)
 T CPhysicsProp::GetServerClass()
 T CPhysicsProp::HandleAnyCollisionInteractions(int, gamevcollisionevent_t*)
 T CPhysicsProp::InputDisableFloating(inputdata_t&)
 T CPhysicsProp::InputDisableMotion(inputdata_t&)
 T CPhysicsProp::InputEnableMotion(inputdata_t&)
 T CPhysicsProp::InputSleep(inputdata_t&)
 T CPhysicsProp::InputWake(inputdata_t&)
 T CPhysicsProp::ObjectCaps()
 T CPhysicsProp::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T CPhysicsProp::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CPhysicsProp::OnTakeDamage(CTakeDamageInfo const&)
 T CPhysicsProp::OverridePropdata()
 T CPhysicsProp::Precache()
 T CPhysicsProp::Spawn()
 T CPhysicsProp::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CPhysicsProp::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CPhysicsProp::VPhysicsUpdate(IPhysicsObject*)
 T CPhysicsProp::YouForgotToImplementOrDeclareServerClass()
 T CPhysicsProp::~CPhysicsProp()
 T CPhysicsPropMultiplayer::CPhysicsPropMultiplayer()
 T CPhysicsPropMultiplayer::ComputeWorldSpaceSurroundingBox(Vector*, Vector*)
 T CPhysicsPropMultiplayer::GetDataDescMap()
 T CPhysicsPropMultiplayer::GetMass()
 T CPhysicsPropMultiplayer::GetMultiplayerPhysicsMode()
 T CPhysicsPropMultiplayer::GetPhysicsMode()
 T CPhysicsPropMultiplayer::GetServerClass()
 T CPhysicsPropMultiplayer::IsAsleep()
 T CPhysicsPropMultiplayer::SetPhysicsMode(int)
 T CPhysicsPropMultiplayer::Spawn()
 T CPhysicsPropMultiplayer::VPhysicsUpdate(IPhysicsObject*)
 T CPhysicsPropMultiplayer::YouForgotToImplementOrDeclareServerClass()
 T CPhysicsPropMultiplayer::~CPhysicsPropMultiplayer()
 T CPhysicsPropRespawnable::Event_Killed(CTakeDamageInfo const&)
 T CPhysicsPropRespawnable::GetDataDescMap()
 T CPhysicsPropRespawnable::Materialize()
 T CPhysicsPropRespawnable::Spawn()
 T CPhysicsPropRespawnable::~CPhysicsPropRespawnable()
 T CPhysicsPushedEntities::AddEntity(CBaseEntity*)
 T CPhysicsPushedEntities::ComputeRotationalPushDirection(CBaseEntity*, CPhysicsPushedEntities::RotatingPushMove_t const&, Vector*, CBaseEntity*)
 T CPhysicsPushedEntities::FinishPush(bool, CPhysicsPushedEntities::RotatingPushMove_t const*)
 T CPhysicsPushedEntities::FinishRotPushedEntity(CBaseEntity*, CPhysicsPushedEntities::RotatingPushMove_t const&)
 T CPhysicsPushedEntities::GenerateBlockingEntityList()
 T CPhysicsPushedEntities::GenerateBlockingEntityListAddBox(Vector const&)
 T CPhysicsPushedEntities::IsPushedPositionValid(CBaseEntity*)
 T CPhysicsPushedEntities::LinearlyMoveRootEntity(CBaseEntity*, float, Vector*)
 T CPhysicsPushedEntities::PerformLinearPush(CBaseEntity*, float)
 T CPhysicsPushedEntities::PerformRotatePush(CBaseEntity*, float)
 T CPhysicsPushedEntities::RotateRootEntity(CBaseEntity*, float, CPhysicsPushedEntities::RotatingPushMove_t&)
 T CPhysicsPushedEntities::SetupAllInHierarchy(CBaseEntity*)
 T CPhysicsPushedEntities::SpeculativelyCheckLinearPush(Vector const&)
 T CPhysicsPushedEntities::SpeculativelyCheckPush(CPhysicsPushedEntities::PhysicsPushedInfo_t&, Vector const&, bool)
 T CPhysicsPushedEntities::SpeculativelyCheckRotPush(CPhysicsPushedEntities::RotatingPushMove_t const&, CBaseEntity*)
 T CPhysicsPushedEntities::StoreMovedEntities(physicspushlist_t&)
 T CPhysicsPushedEntities::~CPhysicsPushedEntities()
 T CPhysicsShake::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)
 T CPhysicsSpring::Activate()
 T CPhysicsSpring::DrawDebugGeometryOverlays()
 T CPhysicsSpring::DrawDebugTextOverlays()
 T CPhysicsSpring::GetDataDescMap()
 T CPhysicsSpring::GetSpringObjectConnections(string_t, string_t, IPhysicsObject**, IPhysicsObject**)
 T CPhysicsSpring::InputSetSpringConstant(inputdata_t&)
 T CPhysicsSpring::InputSetSpringDamping(inputdata_t&)
 T CPhysicsSpring::InputSetSpringLength(inputdata_t&)
 T CPhysicsSpring::NotifySystemEvent(CBaseEntity*, notify_system_event_t, notify_system_event_params_t const&)
 T CPhysicsSpring::Spawn()
 T CPhysicsSpring::~CPhysicsSpring()
 T CPhysicsWind::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)
 T CPhysicsWire::GetDataDescMap()
 T CPhysicsWire::Precache()
 T CPhysicsWire::Spawn()
 T CPhysicsWire::~CPhysicsWire()
 T CPlane::CPlane()
 T CPlane::InitializePlane(Vector const&, Vector const&)
 T CPlane::PointDist(Vector const&)
 T CPlane::PointInFront(Vector const&)
 T CPlasma::CPlasma()
 T CPlasma::EnableSmoke(int)
 T CPlasma::GetDataDescMap()
 T CPlasma::GetServerClass()
 T CPlasma::Precache()
 T CPlasma::YouForgotToImplementOrDeclareServerClass()
 T CPlasma::~CPlasma()
 T CPlatTrigger::ObjectCaps()
 T CPlatTrigger::SpawnInsideTrigger(CFuncPlat*)
 T CPlatTrigger::Touch(CBaseEntity*)
 T CPlatTrigger::~CPlatTrigger()
 T CPlayerAnimState::CPlayerAnimState(CHL2MP_Player*)
 T CPlayerAnimState::ComputePlaybackRate()
 T CPlayerAnimState::ComputePoseParam_BodyLookYaw()
 T CPlayerAnimState::ComputePoseParam_BodyYaw()
 T CPlayerAnimState::EstimateYaw()
 T CPlayerAnimState::Update()
 T CPlayerInfo::ChangeTeam(int)
 T CPlayerInfo::GetAbsAngles()
 T CPlayerInfo::GetAbsOrigin()
 T CPlayerInfo::GetArmorValue()
 T CPlayerInfo::GetDeathCount()
 T CPlayerInfo::GetFragCount()
 T CPlayerInfo::GetHealth()
 T CPlayerInfo::GetLastUserCommand()
 T CPlayerInfo::GetLocalAngles()
 T CPlayerInfo::GetLocalOrigin()
 T CPlayerInfo::GetMaxHealth()
 T CPlayerInfo::GetModelName()
 T CPlayerInfo::GetName()
 T CPlayerInfo::GetNetworkIDString()
 T CPlayerInfo::GetPlayerMaxs()
 T CPlayerInfo::GetPlayerMins()
 T CPlayerInfo::GetTeamIndex()
 T CPlayerInfo::GetUserID()
 T CPlayerInfo::GetWeaponName()
 T CPlayerInfo::IsConnected()
 T CPlayerInfo::IsDead()
 T CPlayerInfo::IsEFlagSet(int)
 T CPlayerInfo::IsFakeClient()
 T CPlayerInfo::IsHLTV()
 T CPlayerInfo::IsInAVehicle()
 T CPlayerInfo::IsObserver()
 T CPlayerInfo::IsPlayer()
 T CPlayerInfo::IsReplay()
 T CPlayerInfo::RemoveAllItems(bool)
 T CPlayerInfo::RunPlayerMove(CBotCmd*)
 T CPlayerInfo::SetAbsAngles(QAngle&)
 T CPlayerInfo::SetAbsOrigin(Vector&)
 T CPlayerInfo::SetActiveWeapon(char const*)
 T CPlayerInfo::SetLastUserCommand(CBotCmd const&)
 T CPlayerInfo::SetLocalAngles(QAngle const&)
 T CPlayerInfo::SetLocalOrigin(Vector const&)
 T CPlayerInfoManager::GetGlobalVars()
 T CPlayerInfoManager::GetPlayerInfo(edict_t*)
 T CPlayerLocalData::CPlayerLocalData()
 T CPlayerLocalData::NetworkStateChanged()
 T CPlayerLocalData::NetworkStateChanged(void*)
 T CPlayerLocalData::NetworkVar_m_PlayerFog::NetworkStateChanged()
 T CPlayerLocalData::NetworkVar_m_PlayerFog::NetworkStateChanged(void*)
 T CPlayerLocalData::NetworkVar_m_audio::NetworkStateChanged()
 T CPlayerLocalData::NetworkVar_m_audio::NetworkStateChanged(void*)
 T CPlayerLocalData::NetworkVar_m_skybox3d::NetworkStateChanged()
 T CPlayerLocalData::NetworkVar_m_skybox3d::NetworkStateChanged(void*)
 T CPlayerLocalData::UpdateAreaBits(CBasePlayer*, unsigned char*)
 T CPlayerMove::CPlayerMove()
 T CPlayerMove::CheckMovingGround(CBasePlayer*, double)
 T CPlayerMove::FinishCommand(CBasePlayer*)
 T CPlayerMove::FinishMove(CBasePlayer*, CUserCmd*, CMoveData*)
 T CPlayerMove::RunCommand(CBasePlayer*, CUserCmd*, IMoveHelper*)
 T CPlayerMove::RunPostThink(CBasePlayer*)
 T CPlayerMove::RunPreThink(CBasePlayer*)
 T CPlayerMove::RunThink(CBasePlayer*, double)
 T CPlayerMove::SetupMove(CBasePlayer*, CUserCmd*, IMoveHelper*, CMoveData*)
 T CPlayerMove::StartCommand(CBasePlayer*, CUserCmd*)
 T CPlayerMove::~CPlayerMove()
 T CPlayerPickupController* _CreateEntityTemplate<CPlayerPickupController>(CPlayerPickupController*, char const*)
 T CPlayerPickupController::Init(CBasePlayer*, CBaseEntity*)
 T CPlayerPickupController::OnControls(CBaseEntity*)
 T CPlayerPickupController::OnRestore()
 T CPlayerPickupController::Shutdown(bool)
 T CPlayerPickupController::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CPlayerPickupController::VPhysicsShadowUpdate(IPhysicsObject*)
 T CPlayerPickupController::VPhysicsUpdate(IPhysicsObject*)
 T CPlayerPickupController::~CPlayerPickupController()
 T CPlayerResource::GetDataDescMap()
 T CPlayerResource::GetServerClass()
 T CPlayerResource::ObjectCaps()
 T CPlayerResource::ResourceThink()
 T CPlayerResource::Spawn()
 T CPlayerResource::UpdatePlayerData()
 T CPlayerResource::UpdateTransmitState()
 T CPlayerResource::YouForgotToImplementOrDeclareServerClass()
 T CPlayerResource::~CPlayerResource()
 T CPluginBotManager::CreateBot(char const*)
 T CPluginBotManager::GetBotController(edict_t*)
 T CPluginHelpersCheck::CreateMessage(char const*, edict_t*, DIALOG_TYPE, KeyValues*)
 T CPointAngleSensor* _CreateEntityTemplate<CPointAngleSensor>(CPointAngleSensor*, char const*)
 T CPointAngleSensor::Activate()
 T CPointAngleSensor::DrawDebugTextOverlays()
 T CPointAngleSensor::GetDataDescMap()
 T CPointAngleSensor::InputDisable(inputdata_t&)
 T CPointAngleSensor::InputEnable(inputdata_t&)
 T CPointAngleSensor::InputSetTargetEntity(inputdata_t&)
 T CPointAngleSensor::InputTest(inputdata_t&)
 T CPointAngleSensor::InputToggle(inputdata_t&)
 T CPointAngleSensor::IsFacingWithinTolerance(CBaseEntity*, CBaseEntity*, float, float*)
 T CPointAngleSensor::KeyValue(char const*, char const*)
 T CPointAngleSensor::Spawn()
 T CPointAngleSensor::Think()
 T CPointAngleSensor::~CPointAngleSensor()
 T CPointAngularVelocitySensor::Activate()
 T CPointAngularVelocitySensor::CompareToThreshold(CBaseEntity*, float, bool)
 T CPointAngularVelocitySensor::DrawDebugLines()
 T CPointAngularVelocitySensor::FireCompareOutput(int, CBaseEntity*)
 T CPointAngularVelocitySensor::GetDataDescMap()
 T CPointAngularVelocitySensor::InputTest(inputdata_t&)
 T CPointAngularVelocitySensor::InputTestWithInterval(inputdata_t&)
 T CPointAngularVelocitySensor::SampleAngularVelocity(CBaseEntity*)
 T CPointAngularVelocitySensor::Spawn()
 T CPointAngularVelocitySensor::Think()
 T CPointAngularVelocitySensor::~CPointAngularVelocitySensor()
 T CPointBonusMapsAccessor::Activate()
 T CPointBonusMapsAccessor::GetDataDescMap()
 T CPointBonusMapsAccessor::InputComplete(inputdata_t&)
 T CPointBonusMapsAccessor::InputSave(inputdata_t&)
 T CPointBonusMapsAccessor::InputUnlock(inputdata_t&)
 T CPointBonusMapsAccessor::~CPointBonusMapsAccessor()
 T CPointCamera::ChangeFOVThink()
 T CPointCamera::GetDataDescMap()
 T CPointCamera::GetServerClass()
 T CPointCamera::InputChangeFOV(inputdata_t&)
 T CPointCamera::InputSetOff(inputdata_t&)
 T CPointCamera::InputSetOn(inputdata_t&)
 T CPointCamera::InputSetOnAndTurnOthersOff(inputdata_t&)
 T CPointCamera::SetActive(bool)
 T CPointCamera::Spawn()
 T CPointCamera::UpdateTransmitState()
 T CPointCamera::YouForgotToImplementOrDeclareServerClass()
 T CPointCamera::~CPointCamera()
 T CPointClientCommand::GetDataDescMap()
 T CPointClientCommand::InputCommand(inputdata_t&)
 T CPointClientCommand::~CPointClientCommand()
 T CPointCombineBallLauncher::GetDataDescMap()
 T CPointCombineBallLauncher::InputLaunchBall(inputdata_t&)
 T CPointCombineBallLauncher::Spawn()
 T CPointCombineBallLauncher::SpawnBall()
 T CPointCombineBallLauncher::~CPointCombineBallLauncher()
 T CPointCommentaryNode::Activate()
 T CPointCommentaryNode::CleanupPostCommentary()
 T CPointCommentaryNode::FinishCommentary(bool)
 T CPointCommentaryNode::GetDataDescMap()
 T CPointCommentaryNode::GetServerClass()
 T CPointCommentaryNode::InputDisable(inputdata_t&)
 T CPointCommentaryNode::InputEnable(inputdata_t&)
 T CPointCommentaryNode::InputStartCommentary(inputdata_t&)
 T CPointCommentaryNode::InputStartUnstoppableCommentary(inputdata_t&)
 T CPointCommentaryNode::Precache()
 T CPointCommentaryNode::SetDisabled(bool)
 T CPointCommentaryNode::SetTransmit(CCheckTransmitInfo*, bool)
 T CPointCommentaryNode::SetUnderCrosshair(bool)
 T CPointCommentaryNode::Spawn()
 T CPointCommentaryNode::SpinThink()
 T CPointCommentaryNode::StartCommentary()
 T CPointCommentaryNode::TeleportTo(CBasePlayer*)
 T CPointCommentaryNode::TestCollision(Ray_t const&, unsigned int, CGameTrace&)
 T CPointCommentaryNode::UpdateTransmitState()
 T CPointCommentaryNode::UpdateViewPostThink()
 T CPointCommentaryNode::UpdateViewThink()
 T CPointCommentaryNode::YouForgotToImplementOrDeclareServerClass()
 T CPointCommentaryNode::~CPointCommentaryNode()
 T CPointDevShotCamera::DevShotThink_PostShot()
 T CPointDevShotCamera::DevShotThink_Setup()
 T CPointDevShotCamera::DevShotThink_TakeShot()
 T CPointDevShotCamera::GetDataDescMap()
 T CPointDevShotCamera::Spawn()
 T CPointDevShotCamera::UpdateTransmitState()
 T CPointDevShotCamera::~CPointDevShotCamera()
 T CPointEntity::KeyValue(char const*, char const*)
 T CPointEntity::ObjectCaps()
 T CPointEntity::Spawn()
 T CPointEntity::~CPointEntity()
 T CPointGamestatsCounter::GetDataDescMap()
 T CPointGamestatsCounter::InputDisable(inputdata_t&)
 T CPointGamestatsCounter::InputEnable(inputdata_t&)
 T CPointGamestatsCounter::InputIncrement(inputdata_t&)
 T CPointGamestatsCounter::InputSetName(inputdata_t&)
 T CPointGamestatsCounter::~CPointGamestatsCounter()
 T CPointHurt::GetDataDescMap()
 T CPointHurt::HurtThink()
 T CPointHurt::InputHurt(inputdata_t&)
 T CPointHurt::InputToggle(inputdata_t&)
 T CPointHurt::InputTurnOff(inputdata_t&)
 T CPointHurt::InputTurnOn(inputdata_t&)
 T CPointHurt::Precache()
 T CPointHurt::Spawn()
 T CPointHurt::~CPointHurt()
 T CPointPlayerMoveConstraint::Activate()
 T CPointPlayerMoveConstraint::ConstraintThink()
 T CPointPlayerMoveConstraint::GetDataDescMap()
 T CPointPlayerMoveConstraint::InputTurnOff(inputdata_t&)
 T CPointPlayerMoveConstraint::InputTurnOn(inputdata_t&)
 T CPointPlayerMoveConstraint::UpdateTransmitState()
 T CPointPlayerMoveConstraint::~CPointPlayerMoveConstraint()
 T CPointProximitySensor::Activate()
 T CPointProximitySensor::GetDataDescMap()
 T CPointProximitySensor::InputDisable(inputdata_t&)
 T CPointProximitySensor::InputEnable(inputdata_t&)
 T CPointProximitySensor::InputSetTargetEntity(inputdata_t&)
 T CPointProximitySensor::InputToggle(inputdata_t&)
 T CPointProximitySensor::Think()
 T CPointProximitySensor::~CPointProximitySensor()
 T CPointPush::Activate()
 T CPointPush::GetDataDescMap()
 T CPointPush::InputDisable(inputdata_t&)
 T CPointPush::InputEnable(inputdata_t&)
 T CPointPush::PushEntity(CBaseEntity*)
 T CPointPush::PushThink()
 T CPointPush::~CPointPush()
 T CPointServerCommand::GetDataDescMap()
 T CPointServerCommand::InputCommand(inputdata_t&)
 T CPointServerCommand::~CPointServerCommand()
 T CPointSpotlight::Activate()
 T CPointSpotlight::ComputeRenderInfo()
 T CPointSpotlight::CreateEfficientSpotlight()
 T CPointSpotlight::GetDataDescMap()
 T CPointSpotlight::InputLightOff(inputdata_t&)
 T CPointSpotlight::InputLightOn(inputdata_t&)
 T CPointSpotlight::OnEntityEvent(EntityEvent_t, void*)
 T CPointSpotlight::Precache()
 T CPointSpotlight::Spawn()
 T CPointSpotlight::SpotlightCreate()
 T CPointSpotlight::SpotlightCurrentPos()
 T CPointSpotlight::SpotlightDestroy()
 T CPointSpotlight::SpotlightThink()
 T CPointSpotlight::SpotlightUpdate()
 T CPointSpotlight::UpdateTransmitState()
 T CPointSpotlight::~CPointSpotlight()
 T CPointTeleport::Activate()
 T CPointTeleport::GetDataDescMap()
 T CPointTeleport::InputTeleport(inputdata_t&)
 T CPointTeleport::~CPointTeleport()
 T CPointTemplate::AddTemplate(CBaseEntity*, char const*, int)
 T CPointTemplate::AllowNameFixup()
 T CPointTemplate::CreateInstance(Vector const&, QAngle const&, CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >*)
 T CPointTemplate::FinishBuildingTemplates()
 T CPointTemplate::GetDataDescMap()
 T CPointTemplate::GetNumTemplateEntities()
 T CPointTemplate::GetNumTemplates()
 T CPointTemplate::GetTemplateEntity(int)
 T CPointTemplate::GetTemplateIndexForTemplate(int)
 T CPointTemplate::InputForceSpawn(inputdata_t&)
 T CPointTemplate::PerformPrecache()
 T CPointTemplate::Precache()
 T CPointTemplate::ShouldRemoveTemplateEntities()
 T CPointTemplate::Spawn()
 T CPointTemplate::StartBuildingTemplates()
 T CPointTemplate::~CPointTemplate()
 T CPointTemplatePrecacher::LevelInitPreEntity()
 T CPointTemplatePrecacher::Shutdown()
 T CPointTemplatePrecacher::~CPointTemplatePrecacher()
 T CPointVelocitySensor::Activate()
 T CPointVelocitySensor::GetDataDescMap()
 T CPointVelocitySensor::InputDisable(inputdata_t&)
 T CPointVelocitySensor::InputEnable(inputdata_t&)
 T CPointVelocitySensor::SampleVelocity()
 T CPointVelocitySensor::Spawn()
 T CPointVelocitySensor::Think()
 T CPointVelocitySensor::~CPointVelocitySensor()
 T CPoseController::BuildPoseIndexList()
 T CPoseController::BuildPropList()
 T CPoseController::GetDataDescMap()
 T CPoseController::GetServerClass()
 T CPoseController::InputGetFMod(inputdata_t&)
 T CPoseController::InputRandomizeFMod(inputdata_t&)
 T CPoseController::InputSetCycleFrequency(inputdata_t&)
 T CPoseController::InputSetFModAmplitude(inputdata_t&)
 T CPoseController::InputSetFModRate(inputdata_t&)
 T CPoseController::InputSetFModTimeOffset(inputdata_t&)
 T CPoseController::InputSetFModType(inputdata_t&)
 T CPoseController::InputSetInterpolationTime(inputdata_t&)
 T CPoseController::InputSetPoseParameterName(inputdata_t&)
 T CPoseController::InputSetPoseValue(inputdata_t&)
 T CPoseController::NetworkVar_m_hProps::Set(int, CHandle<CBaseEntity> const&)
 T CPoseController::SetCurrentPose(float)
 T CPoseController::SetCycleFrequency(float)
 T CPoseController::SetFModAmplitude(float)
 T CPoseController::SetFModRate(float)
 T CPoseController::SetFModTimeOffset(float)
 T CPoseController::SetFModType(int)
 T CPoseController::SetInterpolationTime(float)
 T CPoseController::SetPoseIndex(int, int)
 T CPoseController::SetPoseValue(float)
 T CPoseController::Spawn()
 T CPoseController::Think()
 T CPoseController::YouForgotToImplementOrDeclareServerClass()
 T CPoseController::~CPoseController()
 T CPostFrameNavigationHook::EnqueueEntityNavigationQuery(CAI_BaseNPC*, CFunctor*)
 T CPostFrameNavigationHook::FrameUpdatePostEntityThink()
 T CPostFrameNavigationHook::FrameUpdatePreEntityThink()
 T CPostFrameNavigationHook::Init()
 T CPostFrameNavigationHook::Name()
 T CPostFrameNavigationHook::~CPostFrameNavigationHook()
 T CPrecacheOtherList::LevelInitPreEntity()
 T CPrecacheOtherList::LevelShutdownPostEntity()
 T CPrecacheOtherList::~CPrecacheOtherList()
 T CPrecacheRegister::CPrecacheRegister(void (*)(void*), void const*)
 T CPrecacheRegister::Precache()
 T CPrecacheRegister::PrecacheFn_Other(void*)
 T CPrecipitation::CPrecipitation()
 T CPrecipitation::GetDataDescMap()
 T CPrecipitation::GetServerClass()
 T CPrecipitation::Spawn()
 T CPrecipitation::YouForgotToImplementOrDeclareServerClass()
 T CPrecipitation::~CPrecipitation()
 T CPredictableId::CPredictableId()
 T CPredictableId::GetPlayer() const
 T CPredictableId::GetRaw() const
 T CPredictableId::IsActive() const
 T CPredictableId::ResetInstanceCounters()
 T CPredictedViewModel::CalcViewModelLag(Vector&, QAngle&, QAngle&)
 T CPredictedViewModel::GetServerClass()
 T CPredictedViewModel::YouForgotToImplementOrDeclareServerClass()
 T CPredictedViewModel::~CPredictedViewModel()
 T CPrisonerPodServerVehicle::GetVehicleViewPosition(int, Vector*, QAngle*, float*)
 T CPrisonerPodServerVehicle::IsPassengerEntering()
 T CPrisonerPodServerVehicle::IsPassengerExiting()
 T CPrisonerPodServerVehicle::ItemPostFrame(CBasePlayer*)
 T CProjectedDecal::Activate()
 T CProjectedDecal::GetDataDescMap()
 T CProjectedDecal::InputActivate(inputdata_t&)
 T CProjectedDecal::KeyValue(char const*, char const*)
 T CProjectedDecal::Spawn()
 T CProjectedDecal::StaticDecal()
 T CProjectedDecal::TriggerDecal(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CProjectedDecal::~CProjectedDecal()
 T CPropAPC* _CreateEntityTemplate<CPropAPC>(CPropAPC*, char const*)
 T CPropAPC::Activate()
 T CPropAPC::AddSmokeTrail(Vector const&)
 T CPropAPC::AimPrimaryWeapon(Vector const&)
 T CPropAPC::AimSecondaryWeaponAt(CBaseEntity*)
 T CPropAPC::BodyTarget(Vector const&, bool)
 T CPropAPC::ClassifyPassenger(CBaseCombatCharacter*, Class_T)
 T CPropAPC::CreateCorpse()
 T CPropAPC::CreateServerVehicle()
 T CPropAPC::DoImpactEffect(CGameTrace&, int)
 T CPropAPC::DriveVehicle(float, CUserCmd*, int, int)
 T CPropAPC::Event_Killed(CTakeDamageInfo const&)
 T CPropAPC::ExplodeAndThrowChunk(Vector const&)
 T CPropAPC::EyePosition()
 T CPropAPC::FireDying()
 T CPropAPC::FireMachineGun()
 T CPropAPC::FireRocket()
 T CPropAPC::GetDataDescMap()
 T CPropAPC::GetTracerType()
 T CPropAPC::InputDestroy(inputdata_t&)
 T CPropAPC::InputFireMissileAt(inputdata_t&)
 T CPropAPC::MaxAttackRange() const
 T CPropAPC::OnRestore()
 T CPropAPC::OnTakeDamage(CTakeDamageInfo const&)
 T CPropAPC::PassengerDamageModifier(CTakeDamageInfo const&)
 T CPropAPC::Precache()
 T CPropAPC::ProcessMovement(CBasePlayer*, CMoveData*)
 T CPropAPC::ShouldAttractAutoAim(CBaseEntity*)
 T CPropAPC::Spawn()
 T CPropAPC::Think()
 T CPropAPC::UpdateOnRemove()
 T CPropAPC::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CPropAPC::~CPropAPC()
 T CPropAirboat::Activate()
 T CPropAirboat::AimGunAt(Vector const&, float)
 T CPropAirboat::AllowBlockedExit(CBaseCombatCharacter*, int)
 T CPropAirboat::ApplyStressDamage(IPhysicsObject*)
 T CPropAirboat::BodyTarget(Vector const&, bool)
 T CPropAirboat::ComputeAimPoint(Vector*)
 T CPropAirboat::CreateDangerSounds()
 T CPropAirboat::CreateSounds()
 T CPropAirboat::DampenEyePosition(Vector&, QAngle&)
 T CPropAirboat::DampenForwardMotion(Vector&, QAngle&, float)
 T CPropAirboat::DoImpactEffect(CGameTrace&, int)
 T CPropAirboat::DoMuzzleFlash()
 T CPropAirboat::DriveVehicle(float, CUserCmd*, int, int)
 T CPropAirboat::EnterVehicle(CBaseCombatCharacter*)
 T CPropAirboat::ExitVehicle(int)
 T CPropAirboat::FireGun()
 T CPropAirboat::GetDataDescMap()
 T CPropAirboat::GetServerClass()
 T CPropAirboat::GetSmoothedVelocity()
 T CPropAirboat::GetTracerType()
 T CPropAirboat::HeadlightTurnOff()
 T CPropAirboat::HeadlightTurnOn()
 T CPropAirboat::InputEnableGun(inputdata_t&)
 T CPropAirboat::InputExitVehicle(inputdata_t&)
 T CPropAirboat::InputStartRotorWashForces(inputdata_t&)
 T CPropAirboat::InputStopRotorWashForces(inputdata_t&)
 T CPropAirboat::InputWake(inputdata_t&)
 T CPropAirboat::NetworkStateChanged_m_nWaterLevel()
 T CPropAirboat::NetworkStateChanged_m_nWaterLevel(void*)
 T CPropAirboat::ObjectCaps()
 T CPropAirboat::OnRestore()
 T CPropAirboat::OnTakeDamage(CTakeDamageInfo const&)
 T CPropAirboat::PassengerShouldReceiveDamage(CTakeDamageInfo&)
 T CPropAirboat::PreExitVehicle(CBaseCombatCharacter*, int)
 T CPropAirboat::Precache()
 T CPropAirboat::ProcessMovement(CBasePlayer*, CMoveData*)
 T CPropAirboat::RechargeAmmo()
 T CPropAirboat::RemoveAmmo(float)
 T CPropAirboat::ShouldDrawWaterImpacts()
 T CPropAirboat::ShouldThink()
 T CPropAirboat::Spawn()
 T CPropAirboat::StopLoopingSounds()
 T CPropAirboat::Think()
 T CPropAirboat::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
 T CPropAirboat::UpdateEngineSound(CSoundEnvelopeController&, float)
 T CPropAirboat::UpdateGauge()
 T CPropAirboat::UpdateGunState(CUserCmd*)
 T CPropAirboat::UpdateOnRemove()
 T CPropAirboat::UpdatePropeller()
 T CPropAirboat::UpdateSound()
 T CPropAirboat::UpdateWaterSound(CSoundEnvelopeController&, float)
 T CPropAirboat::VPhysicsFriction(IPhysicsObject*, float, int, int)
 T CPropAirboat::VPhysicsUpdate(IPhysicsObject*)
 T CPropAirboat::YouForgotToImplementOrDeclareServerClass()
 T CPropAirboat::~CPropAirboat()
 T CPropCombineBall::AnimThink()
 T CPropCombineBall::BounceInSpawner(float, int, gamevcollisionevent_t*)
 T CPropCombineBall::CaptureBySpawner()
 T CPropCombineBall::CreateVPhysics()
 T CPropCombineBall::DeflectTowardEnemy(float, int, gamevcollisionevent_t*)
 T CPropCombineBall::DieThink()
 T CPropCombineBall::DissolveEntity(CBaseEntity*)
 T CPropCombineBall::DissolveRampSoundThink()
 T CPropCombineBall::DissolveThink()
 T CPropCombineBall::DoExplosion()
 T CPropCombineBall::DoImpactEffect(Vector const&, int, gamevcollisionevent_t*)
 T CPropCombineBall::ExplodeThink()
 T CPropCombineBall::FadeOut(float)
 T CPropCombineBall::GetDataDescMap()
 T CPropCombineBall::GetServerClass()
 T CPropCombineBall::HasPhysicsAttacker(float)
 T CPropCombineBall::InputExplode(inputdata_t&)
 T CPropCombineBall::InputFadeAndRespawn(inputdata_t&)
 T CPropCombineBall::InputKill(inputdata_t&)
 T CPropCombineBall::InputSocketed(inputdata_t&)
 T CPropCombineBall::IsAttractiveTarget(CBaseEntity*)
 T CPropCombineBall::OnHitEntity(CBaseEntity*, float, int, gamevcollisionevent_t*)
 T CPropCombineBall::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T CPropCombineBall::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CPropCombineBall::OverridePropdata()
 T CPropCombineBall::Precache()
 T CPropCombineBall::ReplaceInSpawner(float)
 T CPropCombineBall::SetBallAsLaunched()
 T CPropCombineBall::SetPlayerLaunched(CBasePlayer*)
 T CPropCombineBall::SetRadius(float)
 T CPropCombineBall::ShouldPuntUseLaunchForces(PhysGunForce_t)
 T CPropCombineBall::Spawn()
 T CPropCombineBall::StartAnimating()
 T CPropCombineBall::StopLoopingSounds()
 T CPropCombineBall::UpdateOnRemove()
 T CPropCombineBall::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CPropCombineBall::WhizSoundThink()
 T CPropCombineBall::YouForgotToImplementOrDeclareServerClass()
 T CPropCombineBall::~CPropCombineBall()
 T CPropCrane::Activate()
 T CPropCrane::AllowBlockedExit(CBaseCombatCharacter*, int)
 T CPropCrane::AllowMidairExit(CBaseCombatCharacter*, int)
 T CPropCrane::BodyTarget(Vector const&, bool)
 T CPropCrane::CPropCrane()
 T CPropCrane::CanEnterVehicle(CBaseEntity*)
 T CPropCrane::CanExitVehicle(CBaseEntity*)
 T CPropCrane::CreateVPhysics()
 T CPropCrane::DrawDebugGeometryOverlays()
 T CPropCrane::DriveCrane(int, int, float)
 T CPropCrane::EnterVehicle(CBaseCombatCharacter*)
 T CPropCrane::ExitVehicle(int)
 T CPropCrane::FinishMove(CBasePlayer*, CUserCmd*, CMoveData*)
 T CPropCrane::GetCraneTipPosition()
 T CPropCrane::GetDataDescMap()
 T CPropCrane::GetDriver()
 T CPropCrane::GetServerClass()
 T CPropCrane::GetServerVehicle()
 T CPropCrane::GetVectors(Vector*, Vector*, Vector*) const
 T CPropCrane::GetVehicleScriptName()
 T CPropCrane::InputForcePlayerIn(inputdata_t&)
 T CPropCrane::InputLock(inputdata_t&)
 T CPropCrane::InputUnlock(inputdata_t&)
 T CPropCrane::ItemPostFrame(CBasePlayer*)
 T CPropCrane::ObjectCaps()
 T CPropCrane::OnTakeDamage(CTakeDamageInfo const&)
 T CPropCrane::PassengerShouldReceiveDamage(CTakeDamageInfo&)
 T CPropCrane::PreExitVehicle(CBaseCombatCharacter*, int)
 T CPropCrane::Precache()
 T CPropCrane::ProcessMovement(CBasePlayer*, CMoveData*)
 T CPropCrane::RecalculateCraneTip()
 T CPropCrane::RunCraneMovement(float)
 T CPropCrane::SetVehicleEntryAnim(bool)
 T CPropCrane::SetVehicleExitAnim(bool, Vector)
 T CPropCrane::SetupMove(CBasePlayer*, CUserCmd*, IMoveHelper*, CMoveData*)
 T CPropCrane::Spawn()
 T CPropCrane::Think()
 T CPropCrane::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
 T CPropCrane::TurnMagnetOff()
 T CPropCrane::TurnMagnetOn()
 T CPropCrane::UpdateOnRemove()
 T CPropCrane::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CPropCrane::YouForgotToImplementOrDeclareServerClass()
 T CPropCrane::~CPropCrane()
 T CPropData::GetRandomChunkModel(char const*, int)
 T CPropData::LevelInitPreEntity()
 T CPropData::LevelShutdownPostEntity()
 T CPropData::ParsePropDataFile()
 T CPropData::ParsePropFromBase(CBaseEntity*, char const*)
 T CPropData::ParsePropFromKV(CBaseEntity*, KeyValues*, KeyValues*)
 T CPropData::~CPropData()
 T CPropDoorRotating::AngularMove(QAngle const&, float)
 T CPropDoorRotating::BeginClosing()
 T CPropDoorRotating::BeginOpening(CBaseEntity*)
 T CPropDoorRotating::CalculateDoorVolume(QAngle, QAngle, Vector*, Vector*)
 T CPropDoorRotating::CheckDoorClear(doorCheck_e)
 T CPropDoorRotating::DoorCanClose(bool)
 T CPropDoorRotating::DoorResume()
 T CPropDoorRotating::DoorStop()
 T CPropDoorRotating::DoorTeleportToSpawnPosition()
 T CPropDoorRotating::DrawDebugTextOverlays()
 T CPropDoorRotating::GetDataDescMap()
 T CPropDoorRotating::GetNPCOpenData(CAI_BaseNPC*, opendata_t&)
 T CPropDoorRotating::GetOpenInterval()
 T CPropDoorRotating::InputSetRotationDistance(inputdata_t&)
 T CPropDoorRotating::InputSetSpeed(inputdata_t&)
 T CPropDoorRotating::IsHingeOnLeft()
 T CPropDoorRotating::MoveDone()
 T CPropDoorRotating::OnDoorClosed()
 T CPropDoorRotating::OnDoorOpened()
 T CPropDoorRotating::OnRestore()
 T CPropDoorRotating::OverridePropdata()
 T CPropDoorRotating::Spawn()
 T CPropDoorRotating::~CPropDoorRotating()
 T CPropThumper::GetDataDescMap()
 T CPropThumper::HandleAnimEvent(animevent_t*)
 T CPropThumper::HandleState()
 T CPropThumper::InitMotorSound()
 T CPropThumper::InputDisable(inputdata_t&)
 T CPropThumper::InputEnable(inputdata_t&)
 T CPropThumper::Precache()
 T CPropThumper::Spawn()
 T CPropThumper::StopLoopingSounds()
 T CPropThumper::Think()
 T CPropThumper::Thump()
 T CPropThumper::~CPropThumper()
 T CPropVehicle::DampenEyePosition(Vector&, QAngle&)
 T CPropVehicle::DrawDebugGeometryOverlays()
 T CPropVehicle::DrawDebugTextOverlays()
 T CPropVehicle::GetDataDescMap()
 T CPropVehicle::GetSmoothedVelocity()
 T CPropVehicle::GetUprightStrength()
 T CPropVehicle::GetUprightTime()
 T CPropVehicle::HasPhysicsAttacker(float)
 T CPropVehicle::InputAction(inputdata_t&)
 T CPropVehicle::InputHandBrakeOff(inputdata_t&)
 T CPropVehicle::InputHandBrakeOn(inputdata_t&)
 T CPropVehicle::InputSteering(inputdata_t&)
 T CPropVehicle::InputThrottle(inputdata_t&)
 T CPropVehicle::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CPropVehicle::Restore(IRestore&)
 T CPropVehicle::Spawn()
 T CPropVehicle::Teleport(Vector const*, QAngle const*, Vector const*)
 T CPropVehicle::Think()
 T CPropVehicle::VPhysicsUpdate(IPhysicsObject*)
 T CPropVehicle::~CPropVehicle()
 T CPropVehicleDriveable::AllowBlockedExit(CBaseCombatCharacter*, int)
 T CPropVehicleDriveable::AllowMidairExit(CBaseCombatCharacter*, int)
 T CPropVehicleDriveable::CPropVehicleDriveable()
 T CPropVehicleDriveable::CanEnterVehicle(CBaseEntity*)
 T CPropVehicleDriveable::CanExitVehicle(CBaseEntity*)
 T CPropVehicleDriveable::CreateServerVehicle()
 T CPropVehicleDriveable::DriveVehicle(float, CUserCmd*, int, int)
 T CPropVehicleDriveable::EnterVehicle(CBaseCombatCharacter*)
 T CPropVehicleDriveable::Event_KilledOther(CBaseEntity*, CTakeDamageInfo const&)
 T CPropVehicleDriveable::ExitVehicle(int)
 T CPropVehicleDriveable::FinishMove(CBasePlayer*, CUserCmd*, CMoveData*)
 T CPropVehicleDriveable::GetDataDescMap()
 T CPropVehicleDriveable::GetDriver()
 T CPropVehicleDriveable::GetServerClass()
 T CPropVehicleDriveable::GetServerVehicle()
 T CPropVehicleDriveable::GetVectors(Vector*, Vector*, Vector*) const
 T CPropVehicleDriveable::GetVehicleScriptName()
 T CPropVehicleDriveable::InputLock(inputdata_t&)
 T CPropVehicleDriveable::InputTurnOff(inputdata_t&)
 T CPropVehicleDriveable::InputTurnOn(inputdata_t&)
 T CPropVehicleDriveable::InputUnlock(inputdata_t&)
 T CPropVehicleDriveable::IsOverturned()
 T CPropVehicleDriveable::IsVehicleBodyInWater()
 T CPropVehicleDriveable::ItemPostFrame(CBasePlayer*)
 T CPropVehicleDriveable::NPC_AddPassenger(CAI_BaseNPC*, string_t, int)
 T CPropVehicleDriveable::NPC_CanEnterVehicle(CAI_BaseNPC*, bool)
 T CPropVehicleDriveable::NPC_CanExitVehicle(CAI_BaseNPC*, bool)
 T CPropVehicleDriveable::NPC_FinishedEnterVehicle(CAI_BaseNPC*, bool)
 T CPropVehicleDriveable::NPC_FinishedExitVehicle(CAI_BaseNPC*, bool)
 T CPropVehicleDriveable::NPC_RemovePassenger(CAI_BaseNPC*)
 T CPropVehicleDriveable::ObjectCaps()
 T CPropVehicleDriveable::OnRestore()
 T CPropVehicleDriveable::PassengerShouldReceiveDamage(CTakeDamageInfo&)
 T CPropVehicleDriveable::PreExitVehicle(CBaseCombatCharacter*, int)
 T CPropVehicleDriveable::Precache()
 T CPropVehicleDriveable::ProcessMovement(CBasePlayer*, CMoveData*)
 T CPropVehicleDriveable::ResetUseKey(CBasePlayer*)
 T CPropVehicleDriveable::Restore(IRestore&)
 T CPropVehicleDriveable::SetVehicleEntryAnim(bool)
 T CPropVehicleDriveable::SetVehicleExitAnim(bool, Vector)
 T CPropVehicleDriveable::SetupMove(CBasePlayer*, CUserCmd*, IMoveHelper*, CMoveData*)
 T CPropVehicleDriveable::ShouldThink()
 T CPropVehicleDriveable::Spawn()
 T CPropVehicleDriveable::Think()
 T CPropVehicleDriveable::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
 T CPropVehicleDriveable::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CPropVehicleDriveable::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CPropVehicleDriveable::VPhysicsGetObjectList(IPhysicsObject**, int)
 T CPropVehicleDriveable::VehicleAngleVectors(QAngle const&, Vector*, Vector*, Vector*)
 T CPropVehicleDriveable::YouForgotToImplementOrDeclareServerClass()
 T CPropVehicleDriveable::~CPropVehicleDriveable()
 T CPropVehiclePrisonerPod::AllowBlockedExit(CBaseCombatCharacter*, int)
 T CPropVehiclePrisonerPod::AllowMidairExit(CBaseCombatCharacter*, int)
 T CPropVehiclePrisonerPod::BodyTarget(Vector const&, bool)
 T CPropVehiclePrisonerPod::CPropVehiclePrisonerPod()
 T CPropVehiclePrisonerPod::CanEnterVehicle(CBaseEntity*)
 T CPropVehiclePrisonerPod::CanExitVehicle(CBaseEntity*)
 T CPropVehiclePrisonerPod::DrawDebugGeometryOverlays()
 T CPropVehiclePrisonerPod::EnterVehicle(CBaseCombatCharacter*)
 T CPropVehiclePrisonerPod::ExitVehicle(int)
 T CPropVehiclePrisonerPod::FinishMove(CBasePlayer*, CUserCmd*, CMoveData*)
 T CPropVehiclePrisonerPod::GetDataDescMap()
 T CPropVehiclePrisonerPod::GetDriver()
 T CPropVehiclePrisonerPod::GetServerClass()
 T CPropVehiclePrisonerPod::GetServerVehicle()
 T CPropVehiclePrisonerPod::GetVectors(Vector*, Vector*, Vector*) const
 T CPropVehiclePrisonerPod::GetVehicleScriptName()
 T CPropVehiclePrisonerPod::HandleAnimEvent(animevent_t*)
 T CPropVehiclePrisonerPod::InputClose(inputdata_t&)
 T CPropVehiclePrisonerPod::InputEnterVehicle(inputdata_t&)
 T CPropVehiclePrisonerPod::InputEnterVehicleImmediate(inputdata_t&)
 T CPropVehiclePrisonerPod::InputExitVehicle(inputdata_t&)
 T CPropVehiclePrisonerPod::InputLock(inputdata_t&)
 T CPropVehiclePrisonerPod::InputOpen(inputdata_t&)
 T CPropVehiclePrisonerPod::InputUnlock(inputdata_t&)
 T CPropVehiclePrisonerPod::ItemPostFrame(CBasePlayer*)
 T CPropVehiclePrisonerPod::ObjectCaps()
 T CPropVehiclePrisonerPod::OnTakeDamage(CTakeDamageInfo const&)
 T CPropVehiclePrisonerPod::OverridePropdata()
 T CPropVehiclePrisonerPod::PassengerShouldReceiveDamage(CTakeDamageInfo&)
 T CPropVehiclePrisonerPod::PreExitVehicle(CBaseCombatCharacter*, int)
 T CPropVehiclePrisonerPod::Precache()
 T CPropVehiclePrisonerPod::ProcessMovement(CBasePlayer*, CMoveData*)
 T CPropVehiclePrisonerPod::SetVehicleEntryAnim(bool)
 T CPropVehiclePrisonerPod::SetVehicleExitAnim(bool, Vector)
 T CPropVehiclePrisonerPod::SetupMove(CBasePlayer*, CUserCmd*, IMoveHelper*, CMoveData*)
 T CPropVehiclePrisonerPod::Spawn()
 T CPropVehiclePrisonerPod::Think()
 T CPropVehiclePrisonerPod::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
 T CPropVehiclePrisonerPod::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CPropVehiclePrisonerPod::YouForgotToImplementOrDeclareServerClass()
 T CPropVehiclePrisonerPod::~CPropVehiclePrisonerPod()
 T CPropVehicleViewController::EnterVehicle(CBasePlayer*)
 T CPropVehicleViewController::ExitVehicle(int)
 T CPropVehicleViewController::GetDataDescMap()
 T CPropVehicleViewController::InputForcePlayerIn(inputdata_t&)
 T CPropVehicleViewController::InputForcePlayerOut(inputdata_t&)
 T CPropVehicleViewController::SetupMove(CBasePlayer*, CUserCmd*, IMoveHelper*, CMoveData*)
 T CPropVehicleViewController::Spawn()
 T CPropVehicleViewController::Think()
 T CPropVehicleViewController::~CPropVehicleViewController()
 T CProtoSniper::CProtoSniper()
 T CProtoSniper::Classify()
 T CProtoSniper::DesiredBodyTarget(CBaseEntity*)
 T CProtoSniper::DrawDebugTextOverlays()
 T CProtoSniper::Event_Killed(CTakeDamageInfo const&)
 T CProtoSniper::Event_KilledOther(CBaseEntity*, CTakeDamageInfo const&)
 T CProtoSniper::EyePosition()
 T CProtoSniper::FCanCheckAttacks()
 T CProtoSniper::FInViewCone(CBaseEntity*)
 T CProtoSniper::FVisible(CBaseEntity*, int, CBaseEntity**)
 T CProtoSniper::FindDecoyObject()
 T CProtoSniper::FindFrustratedShot(float)
 T CProtoSniper::FireBullet(Vector const&, bool)
 T CProtoSniper::GetClassScheduleIdSpace()
 T CProtoSniper::GetDataDescMap()
 T CProtoSniper::GetPaintAim(Vector const&, Vector const&, float, Vector*)
 T CProtoSniper::GetSchedulingErrorName()
 T CProtoSniper::GetSoundInterests()
 T CProtoSniper::IRelationPriority(CBaseEntity*)
 T CProtoSniper::InitCustomSchedules()
 T CProtoSniper::InputDisableSniper(inputdata_t&)
 T CProtoSniper::InputEnableSniper(inputdata_t&)
 T CProtoSniper::InputProtectTarget(inputdata_t&)
 T CProtoSniper::InputSetDecoyRadius(inputdata_t&)
 T CProtoSniper::InputStopSweeping(inputdata_t&)
 T CProtoSniper::InputSweepGroupRandomly(inputdata_t&)
 T CProtoSniper::InputSweepTarget(inputdata_t&)
 T CProtoSniper::InputSweepTargetHighestPriority(inputdata_t&)
 T CProtoSniper::KeyValue(char const*, char const*)
 T CProtoSniper::LaserOn(Vector const&, Vector const&)
 T CProtoSniper::LeadTarget(CBaseEntity*)
 T CProtoSniper::LoadedSchedules()
 T CProtoSniper::MaxYawSpeed()
 T CProtoSniper::OnListened()
 T CProtoSniper::OnScheduleChange()
 T CProtoSniper::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CProtoSniper::PaintTarget(Vector const&, float)
 T CProtoSniper::PickDeadPlayerTarget()
 T CProtoSniper::Precache()
 T CProtoSniper::PrescheduleThink()
 T CProtoSniper::QuerySeeEntity(CBaseEntity*, bool)
 T CProtoSniper::RangeAttack1Conditions(float, float)
 T CProtoSniper::Restore(IRestore&)
 T CProtoSniper::RunTask(Task_t const*)
 T CProtoSniper::SelectSchedule()
 T CProtoSniper::ShouldNotDistanceCull()
 T CProtoSniper::Spawn()
 T CProtoSniper::SquadSlotName(int)
 T CProtoSniper::StartTask(Task_t const*)
 T CProtoSniper::TranslateSchedule(int)
 T CProtoSniper::UpdateEfficiency(bool)
 T CProtoSniper::UpdateOnRemove()
 T CProtoSniper::VerifyShot(CBaseEntity*)
 T CProtoSniper::WeaponLOSCondition(Vector const&, Vector const&, bool)
 T CProtoSniper::~CProtoSniper()
 T CPushBlockerEnum::CPushBlockerEnum(CPhysicsPushedEntities*)
 T CPushBlockerEnum::EnumElement(IHandleEntity*)
 T CPushBlockerEnum::GetPushableEntity(IHandleEntity*)
 T CPushBlockerEnum::IntersectsPushers(CBaseEntity*)
 T CPushable::CreateVPhysics()
 T CPushable::ObjectCaps()
 T CPushable::OnTakeDamage(CTakeDamageInfo const&)
 T CPushable::PhysicsSolidMaskForEntity() const
 T CPushable::Spawn()
 T CPushable::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CPushable::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CPushable::~CPushable()
 T CRC32_Final(unsigned int*)
 T CRC32_Init(unsigned int*)
 T CRC32_ProcessBuffer(unsigned int*, void const*, int)
 T CRagGib::Spawn(char const*, Vector const&, Vector const&, float)
 T CRagGib::~CRagGib()
 T CRagdollAnimatedFriction::ParseKeyValue(void*, char const*, char const*)
 T CRagdollAnimatedFriction::SetDefaults(void*)
 T CRagdollBoogie::AttachToEntity(CBaseEntity*)
 T CRagdollBoogie::BoogieThink()
 T CRagdollBoogie::Create(CBaseEntity*, float, float, float, int)
 T CRagdollBoogie::DecrementSuppressionCount(CBaseEntity*)
 T CRagdollBoogie::GetDataDescMap()
 T CRagdollBoogie::IncrementSuppressionCount(CBaseEntity*)
 T CRagdollBoogie::Spawn()
 T CRagdollBoogie::ZapThink()
 T CRagdollBoogie::~CRagdollBoogie()
 T CRagdollCollisionRules::ParseKeyValue(void*, char const*, char const*)
 T CRagdollCollisionRules::SetDefaults(void*)
 T CRagdollConstraint::CreateConstraint(IPhysicsConstraintGroup*, hl_constraint_info_t const&)
 T CRagdollConstraint::GetDataDescMap()
 T CRagdollConstraint::~CRagdollConstraint()
 T CRagdollLRURetirement::FrameUpdatePostEntityThink()
 T CRagdollLRURetirement::LevelInitPreEntity()
 T CRagdollLRURetirement::MoveToTopOfLRU(CBaseAnimating*, bool)
 T CRagdollLRURetirement::Update(float)
 T CRagdollLRURetirement::~CRagdollLRURetirement()
 T CRagdollLowViolenceManager::SetLowViolence(char const*)
 T CRagdollMagnet::DistToPoint(Vector const&)
 T CRagdollMagnet::FindBestMagnet(CBaseEntity*)
 T CRagdollMagnet::GetDataDescMap()
 T CRagdollMagnet::GetForceVector(CBaseEntity*)
 T CRagdollMagnet::InputDisable(inputdata_t&)
 T CRagdollMagnet::InputEnable(inputdata_t&)
 T CRagdollMagnet::~CRagdollMagnet()
 T CRagdollManager::Activate()
 T CRagdollManager::CRagdollManager()
 T CRagdollManager::DrawDebugTextOverlays()
 T CRagdollManager::GetDataDescMap()
 T CRagdollManager::GetServerClass()
 T CRagdollManager::InputSetMaxRagdollCount(inputdata_t&)
 T CRagdollManager::InputSetMaxRagdollCountDX8(inputdata_t&)
 T CRagdollManager::UpdateCurrentMaxRagDollCount()
 T CRagdollManager::UpdateTransmitState()
 T CRagdollManager::YouForgotToImplementOrDeclareServerClass()
 T CRagdollManager::~CRagdollManager()
 T CRagdollProp::CRagdollProp()
 T CRagdollProp::ClearFlagsThink()
 T CRagdollProp::DisableAutoFade()
 T CRagdollProp::DrawDebugGeometryOverlays()
 T CRagdollProp::DrawDebugTextOverlays()
 T CRagdollProp::FadeOut(float, float)
 T CRagdollProp::FadeOutThink()
 T CRagdollProp::GetAngleOverrideFromCurrentState(char*, int)
 T CRagdollProp::GetDataDescMap()
 T CRagdollProp::GetResponseSystem()
 T CRagdollProp::GetServerClass()
 T CRagdollProp::HandleFirstCollisionInteractions(int, gamevcollisionevent_t*)
 T CRagdollProp::HasPhysgunInteraction(char const*, char const*)
 T CRagdollProp::HasPhysicsAttacker(float)
 T CRagdollProp::InitRagdoll(Vector const&, int, Vector const&, matrix3x4_t*, matrix3x4_t*, float, int, bool, bool)
 T CRagdollProp::InitRagdollAnimation()
 T CRagdollProp::InputDisableMotion(inputdata_t&)
 T CRagdollProp::InputEnableMotion(inputdata_t&)
 T CRagdollProp::InputFadeAndRemove(inputdata_t&)
 T CRagdollProp::InputStartRadgollBoogie(inputdata_t&)
 T CRagdollProp::InputTurnOff(inputdata_t&)
 T CRagdollProp::InputTurnOn(inputdata_t&)
 T CRagdollProp::IsAlive()
 T CRagdollProp::IsFading()
 T CRagdollProp::IsRagdoll()
 T CRagdollProp::ModifyOrAppendCriteria(AI_CriteriaSet&)
 T CRagdollProp::ObjectCaps()
 T CRagdollProp::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T CRagdollProp::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CRagdollProp::OnRestore()
 T CRagdollProp::OnSave(IEntitySaveUtils*)
 T CRagdollProp::OnTakeDamage(CTakeDamageInfo const&)
 T CRagdollProp::PhysGunLaunchAngularImpulse()
 T CRagdollProp::Precache()
 T CRagdollProp::RecheckCollisionFilter()
 T CRagdollProp::SetBlendWeight(float)
 T CRagdollProp::SetDamageEntity(CBaseEntity*)
 T CRagdollProp::SetDebrisThink()
 T CRagdollProp::SetOverlaySequence(Activity)
 T CRagdollProp::SetupBones(matrix3x4_t*, int)
 T CRagdollProp::Spawn()
 T CRagdollProp::Teleport(Vector const*, QAngle const*, Vector const*)
 T CRagdollProp::TestCollision(Ray_t const&, unsigned int, CGameTrace&)
 T CRagdollProp::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
 T CRagdollProp::UpdateNetworkDataFromVPhysics(IPhysicsObject*, int)
 T CRagdollProp::UpdateOnRemove()
 T CRagdollProp::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CRagdollProp::VPhysicsGetObjectList(IPhysicsObject**, int)
 T CRagdollProp::VPhysicsUpdate(IPhysicsObject*)
 T CRagdollProp::YouForgotToImplementOrDeclareServerClass()
 T CRagdollProp::~CRagdollProp()
 T CRagdollPropAttached::Detach()
 T CRagdollPropAttached::GetDataDescMap()
 T CRagdollPropAttached::GetServerClass()
 T CRagdollPropAttached::InitRagdollAttached(IPhysicsObject*, Vector const&, int, matrix3x4_t*, matrix3x4_t*, float, int, CBaseAnimating*, int, Vector const&, int, Vector const&)
 T CRagdollPropAttached::VPhysicsUpdate(IPhysicsObject*)
 T CRagdollPropAttached::YouForgotToImplementOrDeclareServerClass()
 T CRagdollPropAttached::~CRagdollPropAttached()
 T CRallyPoint::DrawDebugTextOverlays()
 T CRallyPoint::GetDataDescMap()
 T CRallyPoint::~CRallyPoint()
 T CRecharge* _CreateEntityTemplate<CRecharge>(CRecharge*, char const*)
 T CRecharge::CreateVPhysics()
 T CRecharge::DrawDebugTextOverlays()
 T CRecharge::GetDataDescMap()
 T CRecharge::InputRecharge(inputdata_t&)
 T CRecharge::KeyValue(char const*, char const*)
 T CRecharge::ObjectCaps()
 T CRecharge::Off()
 T CRecharge::Recharge()
 T CRecharge::Spawn()
 T CRecharge::UpdateJuice(int)
 T CRecharge::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CRecharge::~CRecharge()
 T CRecipientFilter::AddAllPlayers()
 T CRecipientFilter::AddRecipient(CBasePlayer const*)
 T CRecipientFilter::AddRecipientsByPAS(Vector const&)
 T CRecipientFilter::AddRecipientsByPVS(Vector const&)
 T CRecipientFilter::CRecipientFilter()
 T CRecipientFilter::CopyFrom(CRecipientFilter const&)
 T CRecipientFilter::GetRecipientCount() const
 T CRecipientFilter::GetRecipientIndex(int) const
 T CRecipientFilter::IgnorePredictionCull() const
 T CRecipientFilter::IsInitMessage() const
 T CRecipientFilter::IsReliable() const
 T CRecipientFilter::MakeInitMessage()
 T CRecipientFilter::MakeReliable()
 T CRecipientFilter::RemovePlayersFromBitMask(CBitVec<255>&)
 T CRecipientFilter::RemoveRecipient(CBasePlayer*)
 T CRecipientFilter::RemoveRecipientByPlayerIndex(int)
 T CRecipientFilter::RemoveRecipientsByPVS(Vector const&)
 T CRecipientFilter::RemoveRecipientsNotOnTeam(CTeam*)
 T CRecipientFilter::SetIgnorePredictionCull(bool)
 T CRecipientFilter::UsePredictionRules()
 T CRecipientFilter::~CRecipientFilter()
 T CRefCountServiceBase<true, CRefMT>::OnFinalRelease()
 T CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >::AddRef()
 T CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >::Release()
 T CReliableBroadcastRecipientFilter::~CReliableBroadcastRecipientFilter()
 T CReservePlayerSpot::ReserveSpot(CBasePlayer*, Vector const&, Vector const&, Vector const&, bool&)
 T CReservePlayerSpot::Spawn()
 T CReservePlayerSpot::~CReservePlayerSpot()
 T CRespawnEntitiesFilter::CreateNextEntity(char const*)
 T CRespawnEntitiesFilter::ShouldCreateEntity(char const*)
 T CResponseSystem::Clear()
 T CResponseSystem::CompareUsingMatcher(char const*, Matcher&, bool)
 T CResponseSystem::ComputeMatcher(Criteria*, Matcher&)
 T CResponseSystem::DebugPrint(int, char const*, ...)
 T CResponseSystem::DescribeResponseGroup(ResponseGroup*, int, int)
 T CResponseSystem::DumpRules()
 T CResponseSystem::FindBestMatchingRule(AI_CriteriaSet const&, bool)
 T CResponseSystem::FindBestResponse(AI_CriteriaSet const&, AI_Response&, IResponseFilter*)
 T CResponseSystem::GetAllResponses(CUtlVector<AI_Response*, CUtlMemory<AI_Response*, int> >*)
 T CResponseSystem::GetBestResponse(CResponseSystem::ResponseSearchResult&, Rule*, bool, IResponseFilter*)
 T CResponseSystem::IsRootCommand()
 T CResponseSystem::LoadFromBuffer(char const*, char const*, CStringPool&)
 T CResponseSystem::LoadRuleSet(char const*)
 T CResponseSystem::ParseEnumeration()
 T CResponseSystem::ParseInclude(CStringPool&)
 T CResponseSystem::ParseOneCriterion(char const*)
 T CResponseSystem::ParseOneResponse(char const*, ResponseGroup&)
 T CResponseSystem::ParseResponse()
 T CResponseSystem::ParseRule()
 T CResponseSystem::Precache()
 T CResponseSystem::PrecacheResponses(bool)
 T CResponseSystem::RecursiveScoreSubcriteriaAgainstRule(AI_CriteriaSet const&, Criteria*, bool&, bool)
 T CResponseSystem::ResolveResponse(CResponseSystem::ResponseSearchResult&, int, char const*, bool, IResponseFilter*)
 T CResponseSystem::ResolveToken(Matcher&, char*, unsigned long, char const*)
 T CResponseSystem::ResponseWarning(char const*, ...)
 T CResponseSystem::ScoreCriteriaAgainstRule(AI_CriteriaSet const&, int, bool)
 T CResponseSystem::ScoreCriteriaAgainstRuleCriteria(AI_CriteriaSet const&, int, bool&, bool)
 T CResponseSystem::SelectWeightedResponseFromResponseGroup(ResponseGroup*, IResponseFilter*)
 T CResponseSystem::~CResponseSystem()
 T CResponseSystemSaveRestoreOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CResponseSystemSaveRestoreOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CRestore::CRestore(CSaveRestoreData*)
 T CRestore::DoReadAll(void*, datamap_t*, datamap_t*)
 T CRestore::EmptyFields(void*, typedescription_t*, int)
 T CRestore::EndBlock()
 T CRestore::GetGameSaveRestoreInfo()
 T CRestore::GetPrecacheMode()
 T CRestore::GetReadPos() const
 T CRestore::ReadAll(void*, datamap_t*)
 T CRestore::ReadBasicField(SaveRestoreRecordHeader_t const&, void*, datamap_t*, typedescription_t*)
 T CRestore::ReadBool(bool*, int, int)
 T CRestore::ReadData(char*, int, int)
 T CRestore::ReadEHandle(CHandle<CBaseEntity>*, int, int)
 T CRestore::ReadEdictPtr(edict_t**, int, int)
 T CRestore::ReadEntityPtr(CBaseEntity**, int, int)
 T CRestore::ReadFields(char const*, void*, datamap_t*, typedescription_t*, int)
 T CRestore::ReadFloat(float*, int, int)
 T CRestore::ReadFunction(datamap_t*, void (CBaseEntity::***)(inputdata_t&), int, int)
 T CRestore::ReadGameField(SaveRestoreRecordHeader_t const&, void*, datamap_t*, typedescription_t*)
 T CRestore::ReadHeader(SaveRestoreRecordHeader_t*)
 T CRestore::ReadInt()
 T CRestore::ReadInt(int*, int, int)
 T CRestore::ReadMatrix3x4Worldspace(matrix3x4_t*, int, int)
 T CRestore::ReadPositionVector(Vector*)
 T CRestore::ReadPositionVector(Vector*, int, int)
 T CRestore::ReadQuaternion(Quaternion*)
 T CRestore::ReadQuaternion(Quaternion*, int, int)
 T CRestore::ReadShort()
 T CRestore::ReadShort(short*, int, int)
 T CRestore::ReadString(char*, int, int)
 T CRestore::ReadString(string_t*, int, int)
 T CRestore::ReadTick(int*, int, int)
 T CRestore::ReadTime(float*, int, int)
 T CRestore::ReadVMatrix(VMatrix*, int, int)
 T CRestore::ReadVMatrixWorldspace(VMatrix*, int, int)
 T CRestore::ReadVector(Vector*)
 T CRestore::ReadVector(Vector*, int, int)
 T CRestore::SetReadPos(int)
 T CRestore::SkipHeader()
 T CRestore::StartBlock()
 T CRestore::StartBlock(SaveRestoreRecordHeader_t*)
 T CRestore::StartBlock(char*)
 T CRestore::StringFromHeaderSymbol(int)
 T CRestore::~CRestore()
 T CRevertSaved::GetDataDescMap()
 T CRevertSaved::InputReload(inputdata_t&)
 T CRevertSaved::LoadThink()
 T CRevertSaved::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CRevertSaved::~CRevertSaved()
 T CRollerController::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)
 T CRopeAnchor::FallThink()
 T CRopeAnchor::GetDataDescMap()
 T CRopeAnchor::RemoveThink()
 T CRopeAnchor::Spawn()
 T CRopeAnchor::~CRopeAnchor()
 T CRopeKeyframe::Activate()
 T CRopeKeyframe::Break()
 T CRopeKeyframe::CRopeKeyframe()
 T CRopeKeyframe::Create(CBaseEntity*, CBaseEntity*, int, int, int, char const*, int)
 T CRopeKeyframe::CreateWithSecondPointDetached(CBaseEntity*, int, int, int, char const*, int, bool)
 T CRopeKeyframe::EnableWind(bool)
 T CRopeKeyframe::EndpointsChanged()
 T CRopeKeyframe::GetDataDescMap()
 T CRopeKeyframe::GetEndPointPos(int, Vector&)
 T CRopeKeyframe::GetServerClass()
 T CRopeKeyframe::Init()
 T CRopeKeyframe::InputBreak(inputdata_t&)
 T CRopeKeyframe::InputSetForce(inputdata_t&)
 T CRopeKeyframe::InputSetScrollSpeed(inputdata_t&)
 T CRopeKeyframe::KeyValue(char const*, char const*)
 T CRopeKeyframe::NotifyPositionChanged(CBaseEntity*)
 T CRopeKeyframe::ObjectCaps()
 T CRopeKeyframe::OnTakeDamage(CTakeDamageInfo const&)
 T CRopeKeyframe::Precache()
 T CRopeKeyframe::PropagateForce(CBaseEntity*, CBaseEntity*, CBaseEntity*, float, float, float)
 T CRopeKeyframe::RecalculateLength()
 T CRopeKeyframe::SetAttachmentPoint(CBaseHandle&, short&, CBaseEntity*, int)
 T CRopeKeyframe::SetEndPoint(CBaseEntity*, int)
 T CRopeKeyframe::SetParent(CBaseEntity*, int)
 T CRopeKeyframe::SetStartPoint(CBaseEntity*, int)
 T CRopeKeyframe::SetTransmit(CCheckTransmitInfo*, bool)
 T CRopeKeyframe::SetupHangDistance(float)
 T CRopeKeyframe::ShakeRopes(Vector const&, float, float)
 T CRopeKeyframe::UpdateBBox(bool)
 T CRopeKeyframe::UpdateTransmitState()
 T CRopeKeyframe::YouForgotToImplementOrDeclareServerClass()
 T CRopeKeyframe::~CRopeKeyframe()
 T CRotButton* _CreateEntityTemplate<CRotButton>(CRotButton*, char const*)
 T CRotButton::CreateVPhysics()
 T CRotButton::Spawn()
 T CRotButton::~CRotButton()
 T CRotDoor::CreateVPhysics()
 T CRotDoor::GetDataDescMap()
 T CRotDoor::IsRotatingDoor()
 T CRotDoor::SetToggleState(int)
 T CRotDoor::Spawn()
 T CRotDoor::~CRotDoor()
 T CRotorWashEmitter::GetDataDescMap()
 T CRotorWashEmitter::GetServerClass()
 T CRotorWashEmitter::Precache()
 T CRotorWashEmitter::ShouldTransmit(CCheckTransmitInfo const*)
 T CRotorWashEmitter::Spawn()
 T CRotorWashEmitter::UpdateTransmitState()
 T CRotorWashEmitter::YouForgotToImplementOrDeclareServerClass()
 T CRotorWashEmitter::~CRotorWashEmitter()
 T CRotorWashShooter::DoWashPush(float, Vector const&)
 T CRotorWashShooter::GetDataDescMap()
 T CRotorWashShooter::Spawn()
 T CRotorWashShooter::~CRotorWashShooter()
 T CRuleBrushEntity::Spawn()
 T CRulePointEntity::GetDataDescMap()
 T CRulePointEntity::Spawn()
 T CSatchelCharge::BounceSound()
 T CSatchelCharge::CreateEffects()
 T CSatchelCharge::GetDataDescMap()
 T CSatchelCharge::InputExplode(inputdata_t&)
 T CSatchelCharge::Precache()
 T CSatchelCharge::SatchelThink()
 T CSatchelCharge::Spawn()
 T CSatchelCharge::~CSatchelCharge()
 T CSave::CSave(CSaveRestoreData*)
 T CSave::DoWriteAll(void const*, datamap_t*, datamap_t*)
 T CSave::EndBlock()
 T CSave::EndLogging()
 T CSave::EntityFlagsSet(int, int)
 T CSave::EntityIndex(CBaseEntity const*)
 T CSave::GetGameSaveRestoreInfo()
 T CSave::GetWritePos() const
 T CSave::IsAsync()
 T CSave::SetWritePos(int)
 T CSave::ShouldSaveField(void const*, typedescription_t*)
 T CSave::StartBlock()
 T CSave::StartBlock(char const*)
 T CSave::StartLogging(char const*)
 T CSave::WriteAll(void const*, datamap_t*)
 T CSave::WriteBasicField(char const*, void*, datamap_t*, typedescription_t*)
 T CSave::WriteBool(bool const*, int)
 T CSave::WriteBool(char const*, bool const*, int)
 T CSave::WriteData(char const*, int)
 T CSave::WriteData(char const*, int, char const*)
 T CSave::WriteEHandle(CHandle<CBaseEntity> const*, int)
 T CSave::WriteEHandle(char const*, CHandle<CBaseEntity> const*, int)
 T CSave::WriteEdictPtr(char const*, edict_t**, int)
 T CSave::WriteEdictPtr(edict_t**, int)
 T CSave::WriteEntityPtr(CBaseEntity**, int)
 T CSave::WriteEntityPtr(char const*, CBaseEntity**, int)
 T CSave::WriteFields(char const*, void const*, datamap_t*, typedescription_t*, int)
 T CSave::WriteFloat(char const*, float const*, int)
 T CSave::WriteFloat(float const*, int)
 T CSave::WriteFunction(datamap_t*, char const*, void (CBaseEntity::***)(inputdata_t&), int)
 T CSave::WriteGameField(char const*, void*, datamap_t*, typedescription_t*)
 T CSave::WriteHeader(char const*, int)
 T CSave::WriteInt(char const*, int const*, int)
 T CSave::WriteInt(int const*, int)
 T CSave::WriteMatrix3x4Worldspace(matrix3x4_t const*, int)
 T CSave::WritePositionVector(Vector const&)
 T CSave::WritePositionVector(Vector const*, int)
 T CSave::WritePositionVector(char const*, Vector const&)
 T CSave::WritePositionVector(char const*, Vector const*, int)
 T CSave::WriteQuaternion(Quaternion const&)
 T CSave::WriteQuaternion(Quaternion const*, int)
 T CSave::WriteQuaternion(char const*, Quaternion const&)
 T CSave::WriteQuaternion(char const*, Quaternion const*, int)
 T CSave::WriteShort(char const*, short const*, int)
 T CSave::WriteShort(short const*, int)
 T CSave::WriteString(char const*)
 T CSave::WriteString(char const*, char const*)
 T CSave::WriteString(char const*, string_t const*, int)
 T CSave::WriteString(string_t const*, int)
 T CSave::WriteTick(char const*, int const*, int)
 T CSave::WriteTick(int const*, int)
 T CSave::WriteTime(char const*, float const*, int)
 T CSave::WriteTime(float const*, int)
 T CSave::WriteVMatrixWorldspace(VMatrix const*, int)
 T CSave::WriteVector(Vector const&)
 T CSave::WriteVector(Vector const*, int)
 T CSave::WriteVector(char const*, Vector const&)
 T CSave::WriteVector(char const*, Vector const*, int)
 T CSave::~CSave()
 T CSaveRestoreBlockSet::AddBlockHandler(ISaveRestoreBlockHandler*)
 T CSaveRestoreBlockSet::CSaveRestoreBlockSet(char const*)
 T CSaveRestoreBlockSet::CallBlockHandlerRestore(ISaveRestoreBlockHandler*, int, IRestore*, bool)
 T CSaveRestoreBlockSet::GetBlockName()
 T CSaveRestoreBlockSet::PostRestore()
 T CSaveRestoreBlockSet::PostSave()
 T CSaveRestoreBlockSet::PreRestore()
 T CSaveRestoreBlockSet::PreSave(CSaveRestoreData*)
 T CSaveRestoreBlockSet::ReadRestoreHeaders(IRestore*)
 T CSaveRestoreBlockSet::RemoveBlockHandler(ISaveRestoreBlockHandler*)
 T CSaveRestoreBlockSet::Restore(IRestore*, bool)
 T CSaveRestoreBlockSet::Save(ISave*)
 T CSaveRestoreBlockSet::WriteSaveHeaders(ISave*)
 T CSaveRestoreBlockSet::~CSaveRestoreBlockSet()
 T CSceneEntity::Activate()
 T CSceneEntity::AddListManager(CSceneListManager*)
 T CSceneEntity::BuildSortedSpeakEventSoundsPrefetchList(CChoreoScene*, CUtlSymbolTable&, CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, bool (*)(CSceneEntity::SpeakEventSound_t const&, CSceneEntity::SpeakEventSound_t const&), CUtlMemory<UtlRBTreeNode_t<CSceneEntity::SpeakEventSound_t, unsigned short>, unsigned short> >&, float)
 T CSceneEntity::CSceneEntity()
 T CSceneEntity::CancelPlayback()
 T CSceneEntity::CheckActors()
 T CSceneEntity::CheckEvent(float, CChoreoScene*, CChoreoEvent*)
 T CSceneEntity::CheckInterruptCompletion()
 T CSceneEntity::ClearActivatorTargets()
 T CSceneEntity::ClearInterrupt()
 T CSceneEntity::ClearSceneEvents(CChoreoScene*, bool)
 T CSceneEntity::ClearSchedules(CChoreoScene*)
 T CSceneEntity::DispatchEndExpression(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchEndFace(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchEndFlexAnimation(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchEndGeneric(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchEndGesture(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchEndInterrupt(CChoreoScene*, CChoreoEvent*)
 T CSceneEntity::DispatchEndLookAt(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchEndMoveTo(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchEndPermitResponses(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchEndSequence(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchEndSpeak(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchPauseScene(CChoreoScene*, char const*)
 T CSceneEntity::DispatchProcessLoop(CChoreoScene*, CChoreoEvent*)
 T CSceneEntity::DispatchStartExpression(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchStartFace(CChoreoScene*, CBaseFlex*, CBaseEntity*, CChoreoEvent*)
 T CSceneEntity::DispatchStartFlexAnimation(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchStartGeneric(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchStartGesture(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchStartInterrupt(CChoreoScene*, CChoreoEvent*)
 T CSceneEntity::DispatchStartLookAt(CChoreoScene*, CBaseFlex*, CBaseEntity*, CChoreoEvent*)
 T CSceneEntity::DispatchStartMoveTo(CChoreoScene*, CBaseFlex*, CBaseEntity*, CChoreoEvent*)
 T CSceneEntity::DispatchStartPermitResponses(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchStartSequence(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchStartSpeak(CChoreoScene*, CBaseFlex*, CChoreoEvent*, soundlevel_t)
 T CSceneEntity::DispatchStartSubScene(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchStopPoint(CChoreoScene*, char const*)
 T CSceneEntity::DoThink(float)
 T CSceneEntity::EndEvent(float, CChoreoScene*, CChoreoEvent*)
 T CSceneEntity::EstimateLength()
 T CSceneEntity::FindNamedActor(CChoreoActor*)
 T CSceneEntity::FindNamedActor(char const*)
 T CSceneEntity::FindNamedActor(int)
 T CSceneEntity::FindNamedEntity(char const*, CBaseEntity*, bool, bool)
 T CSceneEntity::FindNamedEntityClosest(char const*, CBaseEntity*, bool, bool, char const*)
 T CSceneEntity::FindNamedTarget(string_t, bool)
 T CSceneEntity::GenerateSceneForSound(CBaseFlex*, char const*)
 T CSceneEntity::GetDataDescMap()
 T CSceneEntity::GetPostSpeakDelay()
 T CSceneEntity::GetServerClass()
 T CSceneEntity::GetSoundNameForPlayer(CChoreoEvent*, CBasePlayer*, char*, unsigned long, CBaseEntity*)
 T CSceneEntity::InputCancelAtNextInterrupt(inputdata_t&)
 T CSceneEntity::InputCancelPlayback(inputdata_t&)
 T CSceneEntity::InputInterjectResponse(inputdata_t&)
 T CSceneEntity::InputPausePlayback(inputdata_t&)
 T CSceneEntity::InputPitchShiftPlayback(inputdata_t&)
 T CSceneEntity::InputResumePlayback(inputdata_t&)
 T CSceneEntity::InputScriptPlayerDeath(inputdata_t&)
 T CSceneEntity::InputStartPlayback(inputdata_t&)
 T CSceneEntity::InputStopWaitingForActor(inputdata_t&)
 T CSceneEntity::InputTriggerEvent(inputdata_t&)
 T CSceneEntity::InterruptThisScene(CSceneEntity*)
 T CSceneEntity::LoadScene(char const*, IChoreoEventCallback*)
 T CSceneEntity::NotifyOfCompletion(CSceneEntity*)
 T CSceneEntity::OnLoaded()
 T CSceneEntity::OnRestore()
 T CSceneEntity::OnSceneFinished(bool, bool)
 T CSceneEntity::PausePlayback()
 T CSceneEntity::PauseThink()
 T CSceneEntity::PitchShiftPlayback(float)
 T CSceneEntity::Precache()
 T CSceneEntity::PrefetchAnimBlocks(CChoreoScene*)
 T CSceneEntity::ProcessEvent(float, CChoreoScene*, CChoreoEvent*)
 T CSceneEntity::QueueResumePlayback()
 T CSceneEntity::RequestCompletionNotification(CSceneEntity*)
 T CSceneEntity::ResumePlayback()
 T CSceneEntity::SetCurrentTime(float, bool)
 T CSceneEntity::ShouldNetwork() const
 T CSceneEntity::ShouldTransmit(CCheckTransmitInfo const*)
 T CSceneEntity::Spawn()
 T CSceneEntity::SpeakEventSoundLessFunc(CSceneEntity::SpeakEventSound_t const&, CSceneEntity::SpeakEventSound_t const&)
 T CSceneEntity::StartEvent(float, CChoreoScene*, CChoreoEvent*)
 T CSceneEntity::StartPlayback()
 T CSceneEntity::Think()
 T CSceneEntity::UnloadScene()
 T CSceneEntity::UpdateOnRemove()
 T CSceneEntity::UpdateTransmitState()
 T CSceneEntity::YouForgotToImplementOrDeclareServerClass()
 T CSceneEntity::~CSceneEntity()
 T CSceneEventInfo::InitWeight(CBaseFlex*)
 T CSceneEventInfo::UpdateWeight(CBaseFlex*)
 T CSceneFindMarkFilter::GetFilterResult()
 T CSceneFindMarkFilter::ShouldFindEntity(CBaseEntity*)
 T CSceneFindNearestMarkFilter::CSceneFindNearestMarkFilter(CBaseEntity const*, Vector const&, float)
 T CSceneFindNearestMarkFilter::GetFilterResult()
 T CSceneFindNearestMarkFilter::ShouldFindEntity(CBaseEntity*)
 T CSceneListManager::Activate()
 T CSceneListManager::AddListManager(CSceneListManager*)
 T CSceneListManager::GetDataDescMap()
 T CSceneListManager::InputShutdown(inputdata_t&)
 T CSceneListManager::RemoveScene(int)
 T CSceneListManager::SceneStarted(CBaseEntity*)
 T CSceneListManager::~CSceneListManager()
 T CSceneManager::AddSceneEntity(CSceneEntity*)
 T CSceneManager::GetDataDescMap()
 T CSceneManager::IsInInterruptableScenes(CBaseFlex*)
 T CSceneManager::IsRunningScriptedScene(CBaseFlex*, bool)
 T CSceneManager::IsRunningScriptedSceneAndNotPaused(CBaseFlex*, bool)
 T CSceneManager::IsRunningScriptedSceneWithSpeech(CBaseFlex*, bool)
 T CSceneManager::IsRunningScriptedSceneWithSpeechAndNotPaused(CBaseFlex*, bool)
 T CSceneManager::ObjectCaps()
 T CSceneManager::OnClientActive(CBasePlayer*)
 T CSceneManager::PauseActorsScenes(CBaseFlex*, bool)
 T CSceneManager::QueueActorsScenesToResume(CBaseFlex*, bool)
 T CSceneManager::QueueRestoredSound(CBaseFlex*, char const*, soundlevel_t, float)
 T CSceneManager::RemoveActorFromScenes(CBaseFlex*, bool, bool, char const*)
 T CSceneManager::RemoveSceneEntity(CSceneEntity*)
 T CSceneManager::ResumeActorsScenes(CBaseFlex*, bool)
 T CSceneManager::Spawn()
 T CSceneManager::Think()
 T CSceneManager::~CSceneManager()
 T CSceneTokenProcessor::CurrentToken()
 T CSceneTokenProcessor::Error(char const*, ...)
 T CSceneTokenProcessor::GetToken(bool)
 T CSceneTokenProcessor::TokenAvailable()
 T CScriptIntro::Activate()
 T CScriptIntro::BlendComplete()
 T CScriptIntro::GetDataDescMap()
 T CScriptIntro::GetIncludedPVSOrigin(Vector*, CBaseEntity**)
 T CScriptIntro::GetServerClass()
 T CScriptIntro::InputActivate(inputdata_t&)
 T CScriptIntro::InputDeactivate(inputdata_t&)
 T CScriptIntro::InputFadeTo(inputdata_t&)
 T CScriptIntro::InputSetBlendMode(inputdata_t&)
 T CScriptIntro::InputSetCameraViewEntity(inputdata_t&)
 T CScriptIntro::InputSetFOV(inputdata_t&)
 T CScriptIntro::InputSetFOVBlendTime(inputdata_t&)
 T CScriptIntro::InputSetFadeColor(inputdata_t&)
 T CScriptIntro::InputSetNextBlendMode(inputdata_t&)
 T CScriptIntro::InputSetNextBlendTime(inputdata_t&)
 T CScriptIntro::InputSetNextFOV(inputdata_t&)
 T CScriptIntro::Precache()
 T CScriptIntro::Spawn()
 T CScriptIntro::UpdateTransmitState()
 T CScriptIntro::YouForgotToImplementOrDeclareServerClass()
 T CScriptIntro::~CScriptIntro()
 T CScriptedTarget::DrawDebugGeometryOverlays()
 T CScriptedTarget::DrawDebugTextOverlays()
 T CScriptedTarget::FindEntity()
 T CScriptedTarget::GetDataDescMap()
 T CScriptedTarget::InputDisable(inputdata_t&)
 T CScriptedTarget::InputEnable(inputdata_t&)
 T CScriptedTarget::ObjectCaps()
 T CScriptedTarget::ScriptThink()
 T CScriptedTarget::Spawn()
 T CScriptedTarget::~CScriptedTarget()
 T CServerBenchmark::CServerBenchmark()
 T CServerBenchmark::CalculateBenchmarkCRC()
 T CServerBenchmark::EndBenchmark()
 T CServerBenchmark::GetTickOffset()
 T CServerBenchmark::InternalStartBenchmark(int, float)
 T CServerBenchmark::IsBenchmarkRunning()
 T CServerBenchmark::IsLocalBenchmarkPlayer(CBasePlayer*)
 T CServerBenchmark::OutputResults()
 T CServerBenchmark::RandomFloat(float, float)
 T CServerBenchmark::RandomInt(int, int)
 T CServerBenchmark::StartBenchmark()
 T CServerBenchmark::UpdateBenchmark()
 T CServerBenchmark::UpdateVPhysicsObjects()
 T CServerBenchmark::~CServerBenchmark()
 T CServerChoreoTools::GetEntIndex(void*)
 T CServerChoreoTools::GetSceneFile(void*)
 T CServerChoreoTools::NextChoreoEntity(void*)
 T CServerChoreoTools::ReloadSceneFromDisk(int)
 T CServerChoreoTools::~CServerChoreoTools()
 T CServerDLLSharedAppSystems::CServerDLLSharedAppSystems()
 T CServerDLLSharedAppSystems::Count()
 T CServerDLLSharedAppSystems::GetDllName(int)
 T CServerDLLSharedAppSystems::GetInterfaceName(int)
 T CServerDLLSharedAppSystems::~CServerDLLSharedAppSystems()
 T CServerGameClients::ClientActive(edict_t*, bool)
 T CServerGameClients::ClientCommand(edict_t*, CCommand const&)
 T CServerGameClients::ClientCommandKeyValues(edict_t*, KeyValues*)
 T CServerGameClients::ClientConnect(edict_t*, char const*, char const*, char*, int)
 T CServerGameClients::ClientDisconnect(edict_t*)
 T CServerGameClients::ClientEarPosition(edict_t*, Vector*)
 T CServerGameClients::ClientPutInServer(edict_t*, char const*)
 T CServerGameClients::ClientSettingsChanged(edict_t*)
 T CServerGameClients::ClientSetupVisibility(edict_t*, edict_t*, unsigned char*, int)
 T CServerGameClients::ClientSpawned(edict_t*)
 T CServerGameClients::GetBugReportInfo(char*, int)
 T CServerGameClients::GetPlayerLimits(int&, int&, int&) const
 T CServerGameClients::GetPlayerState(edict_t*)
 T CServerGameClients::GetReplayDelay(edict_t*, int&)
 T CServerGameClients::NetworkIDValidated(char const*, char const*)
 T CServerGameClients::PostClientMessagesSent_DEPRECIATED()
 T CServerGameClients::ProcessUsercmds(edict_t*, bf_read*, int, int, int, bool, bool)
 T CServerGameClients::SetCommandClient(int)
 T CServerGameDLL::AsyncPrepareLevelResources(char*, unsigned long, char*, unsigned long, float*)
 T CServerGameDLL::BuildAdjacentMapList()
 T CServerGameDLL::CanProvideLevel(char*, int)
 T CServerGameDLL::CreateEntityTransitionList(CSaveRestoreData*, int)
 T CServerGameDLL::CreateNetworkStringTables()
 T CServerGameDLL::DLLInit(void* (*)(char const*, int*), void* (*)(char const*, int*), void* (*)(char const*, int*), CGlobalVars*)
 T CServerGameDLL::DLLShutdown()
 T CServerGameDLL::GameFrame(bool)
 T CServerGameDLL::GameInit()
 T CServerGameDLL::GameServerSteamAPIActivated()
 T CServerGameDLL::GameServerSteamAPIShutdown()
 T CServerGameDLL::GameShutdown()
 T CServerGameDLL::GetAllServerClasses()
 T CServerGameDLL::GetGameDescription()
 T CServerGameDLL::GetSaveComment(char*, int, float, float, bool)
 T CServerGameDLL::GetServerBrowserGameData()
 T CServerGameDLL::GetServerBrowserMapOverride()
 T CServerGameDLL::GetServerGCLobby()
 T CServerGameDLL::GetStandardSendProxies()
 T CServerGameDLL::GetTickInterval() const
 T CServerGameDLL::GetUserMessageInfo(int, char*, int, int&)
 T CServerGameDLL::InvalidateMdlCache()
 T CServerGameDLL::IsManualMapChangeOkay(char const**)
 T CServerGameDLL::IsRestoring()
 T CServerGameDLL::LevelInit(char const*, char const*, char const*, char const*, bool, bool)
 T CServerGameDLL::LevelInit_ParseAllEntities(char const*)
 T CServerGameDLL::LevelShutdown()
 T CServerGameDLL::LoadSpecificMOTDMsg(ConVar const&, char const*)
 T CServerGameDLL::OnQueryCvarValueFinished(int, edict_t*, EQueryCvarValueStatus, char const*, char const*)
 T CServerGameDLL::PostInit()
 T CServerGameDLL::PreClientUpdate(bool)
 T CServerGameDLL::PreSave(CSaveRestoreData*)
 T CServerGameDLL::PreSaveGameLoaded(char const*, bool)
 T CServerGameDLL::PrepareLevelResources(char*, unsigned long, char*, unsigned long)
 T CServerGameDLL::ReadRestoreHeaders(CSaveRestoreData*)
 T CServerGameDLL::ReplayInit(void* (*)(char const*, int*))
 T CServerGameDLL::Restore(CSaveRestoreData*, bool)
 T CServerGameDLL::RestoreGlobalState(CSaveRestoreData*)
 T CServerGameDLL::Save(CSaveRestoreData*)
 T CServerGameDLL::SaveGlobalState(CSaveRestoreData*)
 T CServerGameDLL::SaveInit(int)
 T CServerGameDLL::SaveReadFields(CSaveRestoreData*, char const*, void*, datamap_t*, typedescription_t*, int)
 T CServerGameDLL::SaveWriteFields(CSaveRestoreData*, char const*, void*, datamap_t*, typedescription_t*, int)
 T CServerGameDLL::ServerActivate(edict_t*, int, int)
 T CServerGameDLL::SetServerHibernation(bool)
 T CServerGameDLL::ShouldHideServer()
 T CServerGameDLL::Status(void (*)(char const*, ...))
 T CServerGameDLL::Think(bool)
 T CServerGameDLL::WriteSaveHeaders(CSaveRestoreData*)
 T CServerGameEnts::BaseEntityToEdict(CBaseEntity*)
 T CServerGameEnts::CheckTransmit(CCheckTransmitInfo*, unsigned short const*, int)
 T CServerGameEnts::EdictToBaseEntity(edict_t*)
 T CServerGameEnts::FreeContainingEntity(edict_t*)
 T CServerGameEnts::MarkEntitiesAsTouching(edict_t*, edict_t*)
 T CServerGameEnts::SetDebugEdictBase(edict_t*)
 T CServerGameEnts::~CServerGameEnts()
 T CServerGameTags::GetTaggedConVarList(KeyValues*)
 T CServerNetworkProperty::AreaNum() const
 T CServerNetworkProperty::AttachEdict(edict_t*)
 T CServerNetworkProperty::CServerNetworkProperty()
 T CServerNetworkProperty::FireEvent()
 T CServerNetworkProperty::GetBaseEntity()
 T CServerNetworkProperty::GetBaseNetworkable()
 T CServerNetworkProperty::GetClassName() const
 T CServerNetworkProperty::GetDataDescMap()
 T CServerNetworkProperty::GetEdict() const
 T CServerNetworkProperty::GetEntityHandle()
 T CServerNetworkProperty::GetNetworkParent()
 T CServerNetworkProperty::GetPVSInfo()
 T CServerNetworkProperty::GetServerClass()
 T CServerNetworkProperty::Init(CBaseEntity*)
 T CServerNetworkProperty::IsInPVS(CCheckTransmitInfo const*)
 T CServerNetworkProperty::IsInPVS(edict_t const*, void const*, int)
 T CServerNetworkProperty::IsMarkedForDeletion() const
 T CServerNetworkProperty::MarkForDeletion()
 T CServerNetworkProperty::RecomputePVSInformation()
 T CServerNetworkProperty::Release()
 T CServerNetworkProperty::~CServerNetworkProperty()
 T CServerOnlyEntity::ObjectCaps()
 T CServerOnlyPointEntity::KeyValue(char const*, char const*)
 T CServerRagdollTrigger::EndTouch(CBaseEntity*)
 T CServerRagdollTrigger::Spawn()
 T CServerRagdollTrigger::StartTouch(CBaseEntity*)
 T CServerRagdollTrigger::~CServerRagdollTrigger()
 T CServerTools::AddMultiDamage(CTakeDamageInfo const&, CBaseEntity*)
 T CServerTools::AddOriginToPVS(Vector const&)
 T CServerTools::ApplyMultiDamage()
 T CServerTools::ClearMultiDamage()
 T CServerTools::CreateEntityByName(char const*)
 T CServerTools::DestroyEntityByHammerId(int)
 T CServerTools::DispatchSpawn(CBaseEntity*)
 T CServerTools::FindEntityByClassname(CBaseEntity*, char const*)
 T CServerTools::FindEntityByClassnameNearest(char const*, Vector const&, float)
 T CServerTools::FindEntityByClassnameWithin(CBaseEntity*, char const*, Vector const&, Vector const&)
 T CServerTools::FindEntityByClassnameWithin(CBaseEntity*, char const*, Vector const&, float)
 T CServerTools::FindEntityByHammerID(int)
 T CServerTools::FindEntityByModel(CBaseEntity*, char const*)
 T CServerTools::FindEntityByName(CBaseEntity*, char const*, CBaseEntity*, CBaseEntity*, CBaseEntity*, IEntityFindFilter*)
 T CServerTools::FindEntityByNameNearest(char const*, Vector const&, float, CBaseEntity*, CBaseEntity*, CBaseEntity*)
 T CServerTools::FindEntityByNameWithin(CBaseEntity*, char const*, Vector const&, float, CBaseEntity*, CBaseEntity*, CBaseEntity*)
 T CServerTools::FindEntityByTarget(CBaseEntity*, char const*)
 T CServerTools::FindEntityClassNearestFacing(Vector const&, Vector const&, float, char*)
 T CServerTools::FindEntityGeneric(CBaseEntity*, char const*, CBaseEntity*, CBaseEntity*, CBaseEntity*)
 T CServerTools::FindEntityGenericNearest(char const*, Vector const&, float, CBaseEntity*, CBaseEntity*, CBaseEntity*)
 T CServerTools::FindEntityGenericWithin(CBaseEntity*, char const*, Vector const&, float, CBaseEntity*, CBaseEntity*, CBaseEntity*)
 T CServerTools::FindEntityInSphere(CBaseEntity*, Vector const&, float)
 T CServerTools::FindEntityNearestFacing(Vector const&, Vector const&, float)
 T CServerTools::FindEntityProcedural(char const*, CBaseEntity*, CBaseEntity*, CBaseEntity*)
 T CServerTools::FirstEntity()
 T CServerTools::GetBaseEntityByEntIndex(int)
 T CServerTools::GetEntityFactoryDictionary()
 T CServerTools::GetEntityList()
 T CServerTools::GetIServerEntity(IClientEntity*)
 T CServerTools::GetKeyValue(CBaseEntity*, char const*, char*, int)
 T CServerTools::GetPlayerFOV(IClientEntity*)
 T CServerTools::GetPlayerPosition(Vector&, QAngle&, IClientEntity*)
 T CServerTools::GetTempEntList()
 T CServerTools::GetTempEntsSystem()
 T CServerTools::IsEntityPtr(void*)
 T CServerTools::IsInNoClipMode(IClientEntity*)
 T CServerTools::MoveEngineViewTo(Vector const&, QAngle const&)
 T CServerTools::NextEntity(CBaseEntity*)
 T CServerTools::RadiusDamage(CTakeDamageInfo const&, Vector const&, float, int, CBaseEntity*)
 T CServerTools::ReloadParticleDefintions(char const*, void const*, int)
 T CServerTools::RemoveEntity(CBaseEntity*)
 T CServerTools::RemoveEntityImmediate(CBaseEntity*)
 T CServerTools::ResetSequence(CBaseAnimating*, int)
 T CServerTools::ResetSequenceInfo(CBaseAnimating*)
 T CServerTools::SetKeyValue(CBaseEntity*, char const*, Vector const&)
 T CServerTools::SetKeyValue(CBaseEntity*, char const*, char const*)
 T CServerTools::SetKeyValue(CBaseEntity*, char const*, float)
 T CServerTools::SetMoveType(CBaseEntity*, int)
 T CServerTools::SetMoveType(CBaseEntity*, int, int)
 T CServerTools::SetPlayerFOV(int, IClientEntity*)
 T CServerTools::SnapPlayerToPosition(Vector const&, QAngle const&, IClientEntity*)
 T CServerTools::~CServerTools()
 T CShadowControl::CShadowControl()
 T CShadowControl::GetDataDescMap()
 T CShadowControl::GetServerClass()
 T CShadowControl::InputSetAngles(inputdata_t&)
 T CShadowControl::KeyValue(char const*, char const*)
 T CShadowControl::ObjectCaps()
 T CShadowControl::Spawn()
 T CShadowControl::UpdateTransmitState()
 T CShadowControl::YouForgotToImplementOrDeclareServerClass()
 T CShadowControl::~CShadowControl()
 T CSheet::~CSheet()
 T CShowZone::Inspect(CNavArea const*)
 T CShower::ObjectCaps()
 T CShower::Spawn()
 T CShower::Think()
 T CShower::Touch(CBaseEntity*)
 T CShower::~CShower()
 T CSimThinkManager::EntityChanged(CBaseEntity*)
 T CSimThinkManager::OnEntityCreated(CBaseEntity*)
 T CSimThinkManager::OnEntityDeleted(CBaseEntity*)
 T CSimThinkManager::~CSimThinkManager()
 T CSimplePhysics::CSimplePhysics()
 T CSimplePhysics::Init(float)
 T CSimplePhysics::Simulate(CSimplePhysics::CNode*, int, CSimplePhysics::IHelper*, float, float)
 T CSimplePhysicsBrush::Spawn()
 T CSimplePhysicsBrush::~CSimplePhysicsBrush()
 T CSimplePhysicsProp::ObjectCaps()
 T CSimplePhysicsProp::Spawn()
 T CSimplePhysicsProp::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CSimplePhysicsProp::~CSimplePhysicsProp()
 T CSingleUserRecipientFilter::~CSingleUserRecipientFilter()
 T CSingleplayRules::AllowAutoTargetCrosshair()
 T CSingleplayRules::AllowDamage(CBaseEntity*, CTakeDamageInfo const&)
 T CSingleplayRules::CSingleplayRules()
 T CSingleplayRules::CanHaveItem(CBasePlayer*, CItem*)
 T CSingleplayRules::ClientConnected(edict_t*, char const*, char const*, char*, int)
 T CSingleplayRules::ClientDisconnected(edict_t*)
 T CSingleplayRules::Damage_GetNoPhysicsForce()
 T CSingleplayRules::Damage_GetShouldGibCorpse()
 T CSingleplayRules::Damage_GetShouldNotBleed()
 T CSingleplayRules::Damage_GetShowOnHud()
 T CSingleplayRules::Damage_GetTimeBased()
 T CSingleplayRules::Damage_IsTimeBased(int)
 T CSingleplayRules::Damage_NoPhysicsForce(int)
 T CSingleplayRules::Damage_ShouldGibCorpse(int)
 T CSingleplayRules::Damage_ShouldNotBleed(int)
 T CSingleplayRules::Damage_ShowOnHUD(int)
 T CSingleplayRules::DeadPlayerAmmo(CBasePlayer*)
 T CSingleplayRules::DeadPlayerWeapons(CBasePlayer*)
 T CSingleplayRules::DeathNotice(CBasePlayer*, CTakeDamageInfo const&)
 T CSingleplayRules::FAllowFlashlight()
 T CSingleplayRules::FAllowNPCs()
 T CSingleplayRules::FPlayerCanRespawn(CBasePlayer*)
 T CSingleplayRules::FShouldSwitchWeapon(CBasePlayer*, CBaseCombatWeapon*)
 T CSingleplayRules::FlHealthChargerRechargeTime()
 T CSingleplayRules::FlItemRespawnTime(CItem*)
 T CSingleplayRules::FlPlayerFallDamage(CBasePlayer*)
 T CSingleplayRules::FlPlayerSpawnTime(CBasePlayer*)
 T CSingleplayRules::FlWeaponRespawnTime(CBaseCombatWeapon*)
 T CSingleplayRules::FlWeaponTryRespawn(CBaseCombatWeapon*)
 T CSingleplayRules::GetAutoAimMode()
 T CSingleplayRules::GetNextBestWeapon(CBaseCombatCharacter*, CBaseCombatWeapon*)
 T CSingleplayRules::GetTeamID(CBaseEntity*)
 T CSingleplayRules::IPointsForKill(CBasePlayer*, CBasePlayer*)
 T CSingleplayRules::InitHUD(CBasePlayer*)
 T CSingleplayRules::IsAllowedToSpawn(CBaseEntity*)
 T CSingleplayRules::IsCoOp()
 T CSingleplayRules::IsDeathmatch()
 T CSingleplayRules::IsMultiplayer()
 T CSingleplayRules::ItemShouldRespawn(CItem*)
 T CSingleplayRules::PlayerCanHearChat(CBasePlayer*, CBasePlayer*)
 T CSingleplayRules::PlayerGotAmmo(CBaseCombatCharacter*, char*, int)
 T CSingleplayRules::PlayerGotItem(CBasePlayer*, CItem*)
 T CSingleplayRules::PlayerKilled(CBasePlayer*, CTakeDamageInfo const&)
 T CSingleplayRules::PlayerRelationship(CBaseEntity*, CBaseEntity*)
 T CSingleplayRules::PlayerSpawn(CBasePlayer*)
 T CSingleplayRules::SwitchToNextBestWeapon(CBaseCombatCharacter*, CBaseCombatWeapon*)
 T CSingleplayRules::Think()
 T CSingleplayRules::VecItemRespawnAngles(CItem*)
 T CSingleplayRules::VecItemRespawnSpot(CItem*)
 T CSingleplayRules::VecWeaponRespawnSpot(CBaseCombatWeapon*)
 T CSingleplayRules::WeaponShouldRespawn(CBaseCombatWeapon*)
 T CSingleplayRules::~CSingleplayRules()
 T CSkipKeys::ParseKeyValue(void*, char const*, char const*)
 T CSkipKeys::SetDefaults(void*)
 T CSkyCamera::Activate()
 T CSkyCamera::GetDataDescMap()
 T CSkyCamera::Spawn()
 T CSkyCamera::~CSkyCamera()
 T CSlideshowDisplay::BuildSlideShowImagesList()
 T CSlideshowDisplay::Disable()
 T CSlideshowDisplay::Enable()
 T CSlideshowDisplay::GetDataDescMap()
 T CSlideshowDisplay::GetServerClass()
 T CSlideshowDisplay::InputAddSlides(inputdata_t&)
 T CSlideshowDisplay::InputDisable(inputdata_t&)
 T CSlideshowDisplay::InputEnable(inputdata_t&)
 T CSlideshowDisplay::InputRemoveAllSlides(inputdata_t&)
 T CSlideshowDisplay::InputSetCycleType(inputdata_t&)
 T CSlideshowDisplay::InputSetDisplayText(inputdata_t&)
 T CSlideshowDisplay::InputSetMaxSlideTime(inputdata_t&)
 T CSlideshowDisplay::InputSetMinSlideTime(inputdata_t&)
 T CSlideshowDisplay::InputSetNoListRepeats(inputdata_t&)
 T CSlideshowDisplay::KeyValue(char const*, char const*)
 T CSlideshowDisplay::OnRestore()
 T CSlideshowDisplay::Precache()
 T CSlideshowDisplay::RestoreControlPanels()
 T CSlideshowDisplay::ScreenVisible(bool)
 T CSlideshowDisplay::SetTransmit(CCheckTransmitInfo*, bool)
 T CSlideshowDisplay::Spawn()
 T CSlideshowDisplay::SpawnControlPanels()
 T CSlideshowDisplay::UpdateTransmitState()
 T CSlideshowDisplay::YouForgotToImplementOrDeclareServerClass()
 T CSlideshowDisplay::~CSlideshowDisplay()
 T CSmokeStack::Activate()
 T CSmokeStack::CSmokeStack()
 T CSmokeStack::GetDataDescMap()
 T CSmokeStack::GetServerClass()
 T CSmokeStack::InputToggle(inputdata_t&)
 T CSmokeStack::InputTurnOff(inputdata_t&)
 T CSmokeStack::InputTurnOn(inputdata_t&)
 T CSmokeStack::KeyValue(char const*, char const*)
 T CSmokeStack::Precache()
 T CSmokeStack::RecalcWindVector()
 T CSmokeStack::Spawn()
 T CSmokeStack::YouForgotToImplementOrDeclareServerClass()
 T CSmokeStack::~CSmokeStack()
 T CSniperBullet::BulletThink()
 T CSniperBullet::GetDataDescMap()
 T CSniperBullet::Precache()
 T CSniperBullet::Start(Vector const&, Vector const&, CBaseEntity*, bool)
 T CSniperBullet::~CSniperBullet()
 T CSniperTarget::GetDataDescMap()
 T CSniperTarget::KeyValue(char const*, char const*)
 T CSniperTarget::~CSniperTarget()
 T CSolidSetDefaults::ParseKeyValue(void*, char const*, char const*)
 T CSolidSetDefaults::SetDefaults(void*)
 T CSortedEntityList::ReportEntityList()
 T CSound::FIsScent()
 T CSound::FIsSound()
 T CSound::GetSoundReactOrigin()
 T CSound::Reset()
 T CSoundControllerImp::CheckLoopingSoundsForPlayer(CBasePlayer*)
 T CSoundControllerImp::CommandAdd(CSoundPatch*, float, soundcommands_t, float, float)
 T CSoundControllerImp::CommandClear(CSoundPatch*)
 T CSoundControllerImp::LevelShutdownPreEntity()
 T CSoundControllerImp::OnRestore()
 T CSoundControllerImp::Play(CSoundPatch*, float, float, float)
 T CSoundControllerImp::PreClientUpdate()
 T CSoundControllerImp::ProcessCommand(SoundCommand_t*)
 T CSoundControllerImp::RemoveFromList(CSoundPatch*)
 T CSoundControllerImp::RestoreSoundPatch(CSoundPatch**, IRestore*)
 T CSoundControllerImp::SaveSoundPatch(CSoundPatch*, ISave*)
 T CSoundControllerImp::Shutdown(CSoundPatch*)
 T CSoundControllerImp::SoundChangePitch(CSoundPatch*, float, float)
 T CSoundControllerImp::SoundChangeVolume(CSoundPatch*, float, float)
 T CSoundControllerImp::SoundCreate(IRecipientFilter&, int, EmitSound_t const&)
 T CSoundControllerImp::SoundCreate(IRecipientFilter&, int, char const*)
 T CSoundControllerImp::SoundCreate(IRecipientFilter&, int, int, char const*, float)
 T CSoundControllerImp::SoundCreate(IRecipientFilter&, int, int, char const*, soundlevel_t)
 T CSoundControllerImp::SoundDestroy(CSoundPatch*)
 T CSoundControllerImp::SoundFadeOut(CSoundPatch*, float, bool)
 T CSoundControllerImp::SoundGetName(CSoundPatch*)
 T CSoundControllerImp::SoundGetPitch(CSoundPatch*)
 T CSoundControllerImp::SoundGetVolume(CSoundPatch*)
 T CSoundControllerImp::SoundPlayEnvelope(CSoundPatch*, soundcommands_t, envelopeDescription_t*)
 T CSoundControllerImp::SoundPlayEnvelope(CSoundPatch*, soundcommands_t, envelopePoint_t*, int)
 T CSoundControllerImp::SoundSetCloseCaptionDuration(CSoundPatch*, float)
 T CSoundControllerImp::SystemReset()
 T CSoundControllerImp::SystemUpdate()
 T CSoundControllerImp::~CSoundControllerImp()
 T CSoundEmitterSystem::EmitAmbientSound(int, Vector const&, char const*, float, int, int, float, float*)
 T CSoundEmitterSystem::EmitAmbientSound(int, Vector const&, char const*, float, soundlevel_t, int, int, float, float*)
 T CSoundEmitterSystem::EmitCloseCaption(IRecipientFilter&, int, CSoundParameters const&, EmitSound_t const&)
 T CSoundEmitterSystem::EmitCloseCaption(IRecipientFilter&, int, bool, char const*, CUtlVector<Vector, CUtlMemory<Vector, int> >&, float, bool)
 T CSoundEmitterSystem::EmitSound(IRecipientFilter&, int, EmitSound_t const&)
 T CSoundEmitterSystem::EmitSoundByHandle(IRecipientFilter&, int, EmitSound_t const&, short&)
 T CSoundEmitterSystem::Init()
 T CSoundEmitterSystem::InternalPrecacheWaves(int)
 T CSoundEmitterSystem::LevelInitPostEntity()
 T CSoundEmitterSystem::LevelInitPreEntity()
 T CSoundEmitterSystem::LevelShutdownPostEntity()
 T CSoundEmitterSystem::LogPrecache(char const*)
 T CSoundEmitterSystem::Name()
 T CSoundEmitterSystem::PrecacheScriptSound(char const*)
 T CSoundEmitterSystem::PrefetchScriptSound(char const*)
 T CSoundEmitterSystem::Shutdown()
 T CSoundEmitterSystem::StopSound(int, int, char const*)
 T CSoundEmitterSystem::StopSoundByHandle(int, char const*, short&)
 T CSoundEmitterSystem::TraceEmitSound(char const*, ...)
 T CSoundEmitterSystem::~CSoundEmitterSystem()
 T CSoundEnt::ActiveList()
 T CSoundEnt::ClientSoundIndex(edict_t*)
 T CSoundEnt::GetDataDescMap()
 T CSoundEnt::GetLoudestSoundOfType(int, Vector const&)
 T CSoundEnt::InitSoundEnt()
 T CSoundEnt::Initialize()
 T CSoundEnt::InsertSound(int, Vector const&, int, float, CBaseEntity*, int, CBaseEntity*)
 T CSoundEnt::ObjectCaps()
 T CSoundEnt::OnRestore()
 T CSoundEnt::Precache()
 T CSoundEnt::ShutdownSoundEnt()
 T CSoundEnt::SoundPointerForIndex(int)
 T CSoundEnt::Spawn()
 T CSoundEnt::Think()
 T CSoundEnt::~CSoundEnt()
 T CSoundEnvelopeController::GetController()
 T CSoundPatch::AddPlayerPost(CBasePlayer*)
 T CSoundPatch::Init(IRecipientFilter*, CBaseEntity*, int, char const*, soundlevel_t)
 T CSoundPatch::ResumeSound()
 T CSoundPatch::StartSound(float)
 T CSoundPatch::Update(float, float)
 T CSoundPatchSaveRestoreOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CSoundPatchSaveRestoreOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CSoundscapeSystem::AddSoundscapeEntity(CEnvSoundscape*)
 T CSoundscapeSystem::AddSoundscapeFile(char const*)
 T CSoundscapeSystem::FrameUpdatePostEntityThink()
 T CSoundscapeSystem::GetSoundscapeIndex(char const*)
 T CSoundscapeSystem::Init()
 T CSoundscapeSystem::IsValidIndex(int)
 T CSoundscapeSystem::LevelInitPostEntity()
 T CSoundscapeSystem::LevelInitPreEntity()
 T CSoundscapeSystem::PrintDebugInfo()
 T CSoundscapeSystem::RemoveSoundscapeEntity(CEnvSoundscape*)
 T CSoundscapeSystem::Shutdown()
 T CSoundscapeSystem::~CSoundscapeSystem()
 T CSparkTrail::GetDataDescMap()
 T CSparkTrail::Precache()
 T CSparkTrail::SparkThink()
 T CSparkTrail::Spawn()
 T CSparkTrail::~CSparkTrail()
 T CSpeaker::GetDataDescMap()
 T CSpeaker::GetResponseSystem()
 T CSpeaker::InputToggle(inputdata_t&)
 T CSpeaker::InputTurnOff(inputdata_t&)
 T CSpeaker::InputTurnOn(inputdata_t&)
 T CSpeaker::ObjectCaps()
 T CSpeaker::Precache()
 T CSpeaker::Restore(IRestore&)
 T CSpeaker::Save(ISave&)
 T CSpeaker::Spawn()
 T CSpeaker::SpeakerThink()
 T CSpeaker::~CSpeaker()
 T CSpotlightEnd::GetDataDescMap()
 T CSpotlightEnd::GetServerClass()
 T CSpotlightEnd::ObjectCaps()
 T CSpotlightEnd::Spawn()
 T CSpotlightEnd::YouForgotToImplementOrDeclareServerClass()
 T CSpotlightEnd::~CSpotlightEnd()
 T CSprayCan::ObjectCaps()
 T CSprayCan::Precache()
 T CSprayCan::Think()
 T CSprayCan::~CSprayCan()
 T CSprite::Animate(float)
 T CSprite::AnimateThink()
 T CSprite::AnimateUntilDead()
 T CSprite::BeginFadeOutThink()
 T CSprite::CSprite()
 T CSprite::ComputeWorldSpaceSurroundingBox(Vector*, Vector*)
 T CSprite::ExpandThink()
 T CSprite::GetDataDescMap()
 T CSprite::GetServerClass()
 T CSprite::InputColorBlueValue(inputdata_t&)
 T CSprite::InputColorGreenValue(inputdata_t&)
 T CSprite::InputColorRedValue(inputdata_t&)
 T CSprite::InputHideSprite(inputdata_t&)
 T CSprite::InputShowSprite(inputdata_t&)
 T CSprite::InputToggleSprite(inputdata_t&)
 T CSprite::ObjectCaps()
 T CSprite::OnRestore()
 T CSprite::Precache()
 T CSprite::SetAttachment(CBaseEntity*, int)
 T CSprite::SetBrightness(int, float)
 T CSprite::SetModel(char const*)
 T CSprite::SetScale(float, float)
 T CSprite::SetSpriteScale(float)
 T CSprite::SetTransparency(int, int, int, int, int, int)
 T CSprite::ShouldTransmit(CCheckTransmitInfo const*)
 T CSprite::Spawn()
 T CSprite::SpriteCreate(char const*, Vector const&, bool)
 T CSprite::SpriteInit(char const*, Vector const&)
 T CSprite::TurnOff()
 T CSprite::TurnOn()
 T CSprite::UpdateTransmitState()
 T CSprite::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CSprite::YouForgotToImplementOrDeclareServerClass()
 T CSprite::~CSprite()
 T CSpriteOriented::GetServerClass()
 T CSpriteOriented::Spawn()
 T CSpriteOriented::YouForgotToImplementOrDeclareServerClass()
 T CSpriteOriented::~CSpriteOriented()
 T CSpriteTrail::CSpriteTrail()
 T CSpriteTrail::GetDataDescMap()
 T CSpriteTrail::GetServerClass()
 T CSpriteTrail::Precache()
 T CSpriteTrail::SetEndWidth(float)
 T CSpriteTrail::SetLifeTime(float)
 T CSpriteTrail::SetMinFadeLength(float)
 T CSpriteTrail::SetSkybox(Vector const&, float)
 T CSpriteTrail::SetStartWidth(float)
 T CSpriteTrail::SetStartWidthVariance(float)
 T CSpriteTrail::SetTextureResolution(float)
 T CSpriteTrail::ShouldTransmit(CCheckTransmitInfo const*)
 T CSpriteTrail::Spawn()
 T CSpriteTrail::SpriteTrailCreate(char const*, Vector const&, bool)
 T CSpriteTrail::YouForgotToImplementOrDeclareServerClass()
 T CSpriteTrail::~CSpriteTrail()
 T CSquadInsignia::Spawn()
 T CSquadInsignia::~CSquadInsignia()
 T CStdStringSaveRestoreOps::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CStdStringSaveRestoreOps::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CStdStringSaveRestoreOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CStdStringSaveRestoreOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CSteamAPIContext::Init()
 T CSteamID::SetFromSteam2String(char const*, EUniverse)
 T CSteamID::SetFromStringStrict(char const*, EUniverse)
 T CSteamJet::CSteamJet()
 T CSteamJet::GetDataDescMap()
 T CSteamJet::GetServerClass()
 T CSteamJet::InputToggle(inputdata_t&)
 T CSteamJet::InputTurnOff(inputdata_t&)
 T CSteamJet::InputTurnOn(inputdata_t&)
 T CSteamJet::Precache()
 T CSteamJet::Spawn()
 T CSteamJet::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CSteamJet::YouForgotToImplementOrDeclareServerClass()
 T CSteamJet::~CSteamJet()
 T CStriderMinigun::AimAtPoint(IStriderMinigunHost*, Vector const&, bool)
 T CStriderMinigun::CanStartShooting(IStriderMinigunHost*, CBaseEntity*)
 T CStriderMinigun::GetDataDescMap()
 T CStriderMinigun::SetTarget(IStriderMinigunHost*, CBaseEntity*, bool)
 T CStriderMinigun::ShootAtTarget(IStriderMinigunHost*, CBaseEntity*, float)
 T CStriderMinigun::ShouldFindTarget(IMinigunHost*)
 T CStriderMinigun::StartShooting(IStriderMinigunHost*, CBaseEntity*, float)
 T CStriderMinigun::Think(IStriderMinigunHost*, float)
 T CStringPool::Allocate(char const*)
 T CStringPool::CStringPool()
 T CStringPool::Find(char const*)
 T CStringPool::~CStringPool()
 T CStringRegistry::AddString(char const*, int)
 T CStringRegistry::CStringRegistry()
 T CStringRegistry::ClearStrings()
 T CStringRegistry::First() const
 T CStringRegistry::GetIDForKey(unsigned short)
 T CStringRegistry::GetStringForKey(unsigned short)
 T CStringRegistry::GetStringID(char const*)
 T CStringRegistry::GetStringText(int)
 T CStringRegistry::InvalidIndex() const
 T CStringRegistry::Next(unsigned short) const
 T CStringRegistry::~CStringRegistry()
 T CStringTableSaveRestoreOps::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CStringTableSaveRestoreOps::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CStringTableSaveRestoreOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CStringTableSaveRestoreOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CStripWeapons::GetDataDescMap()
 T CStripWeapons::InputStripWeapons(inputdata_t&)
 T CStripWeapons::InputStripWeaponsAndSuit(inputdata_t&)
 T CStripWeapons::~CStripWeapons()
 T CStudioHdr::CActivityToSequenceMapping::Initialize(CStudioHdr*)
 T CStudioHdr::CActivityToSequenceMapping::NumSequencesForActivity(int)
 T CStudioHdr::CActivityToSequenceMapping::Reinitialize(CStudioHdr*)
 T CStudioHdr::CActivityToSequenceMapping::SelectWeightedSequence(CStudioHdr*, int, int)
 T CStudioHdr::CActivityToSequenceMapping::ValidateAgainst(CStudioHdr const*)
 T CStudioHdr::CStudioHdr()
 T CStudioHdr::CStudioHdr(studiohdr_t const*, IMDLCache*)
 T CStudioHdr::EntryNode(int)
 T CStudioHdr::ExitNode(int)
 T CStudioHdr::GetActivityListVersion()
 T CStudioHdr::GetAttachmentBone(int)
 T CStudioHdr::GetNumAttachments() const
 T CStudioHdr::GetNumIKAutoplayLocks() const
 T CStudioHdr::GetNumPoseParameters() const
 T CStudioHdr::GetNumSeq() const
 T CStudioHdr::GetSharedPoseParameter(int, int) const
 T CStudioHdr::GetTransition(int, int) const
 T CStudioHdr::GroupStudioHdr(int)
 T CStudioHdr::Init(studiohdr_t const*, IMDLCache*)
 T CStudioHdr::RemapSeqBone(int, int) const
 T CStudioHdr::SequencesAvailable() const
 T CStudioHdr::SetActivityListVersion(int)
 T CStudioHdr::SetEventListVersion(int)
 T CStudioHdr::Term()
 T CStudioHdr::iRelativeAnim(int, int) const
 T CStudioHdr::iRelativeSeq(int, int) const
 T CStudioHdr::pAnimStudioHdr(int)
 T CStudioHdr::pAnimdesc(int)
 T CStudioHdr::pAttachment(int)
 T CStudioHdr::pIKAutoplayLock(int)
 T CStudioHdr::pPoseParameter(int)
 T CStudioHdr::pSeqStudioHdr(int)
 T CStudioHdr::pSeqdesc(int)
 T CStudioHdr::pszNodeName(int)
 T CStudioHdr::~CStudioHdr()
 T CSun::Activate()
 T CSun::CSun()
 T CSun::GetDataDescMap()
 T CSun::GetServerClass()
 T CSun::InputSetColor(inputdata_t&)
 T CSun::InputTurnOff(inputdata_t&)
 T CSun::InputTurnOn(inputdata_t&)
 T CSun::UpdateTransmitState()
 T CSun::YouForgotToImplementOrDeclareServerClass()
 T CSun::~CSun()
 T CTEAntlionDust::GetServerClass()
 T CTEAntlionDust::Test(Vector const&, QAngle const&)
 T CTEAntlionDust::YouForgotToImplementOrDeclareServerClass()
 T CTEAntlionDust::~CTEAntlionDust()
 T CTEArmorRicochet::GetServerClass()
 T CTEArmorRicochet::YouForgotToImplementOrDeclareServerClass()
 T CTEArmorRicochet::~CTEArmorRicochet()
 T CTEBSPDecal::GetServerClass()
 T CTEBSPDecal::Test(Vector const&, QAngle const&)
 T CTEBSPDecal::YouForgotToImplementOrDeclareServerClass()
 T CTEBSPDecal::~CTEBSPDecal()
 T CTEBaseBeam::CTEBaseBeam(char const*)
 T CTEBaseBeam::GetServerClass()
 T CTEBaseBeam::YouForgotToImplementOrDeclareServerClass()
 T CTEBaseBeam::~CTEBaseBeam()
 T CTEBeamEntPoint::GetServerClass()
 T CTEBeamEntPoint::Test(Vector const&, QAngle const&)
 T CTEBeamEntPoint::YouForgotToImplementOrDeclareServerClass()
 T CTEBeamEntPoint::~CTEBeamEntPoint()
 T CTEBeamEnts::GetServerClass()
 T CTEBeamEnts::Test(Vector const&, QAngle const&)
 T CTEBeamEnts::YouForgotToImplementOrDeclareServerClass()
 T CTEBeamEnts::~CTEBeamEnts()
 T CTEBeamFollow::GetServerClass()
 T CTEBeamFollow::Test(Vector const&, QAngle const&)
 T CTEBeamFollow::YouForgotToImplementOrDeclareServerClass()
 T CTEBeamFollow::~CTEBeamFollow()
 T CTEBeamLaser::GetServerClass()
 T CTEBeamLaser::Test(Vector const&, QAngle const&)
 T CTEBeamLaser::YouForgotToImplementOrDeclareServerClass()
 T CTEBeamLaser::~CTEBeamLaser()
 T CTEBeamPoints::GetServerClass()
 T CTEBeamPoints::Test(Vector const&, QAngle const&)
 T CTEBeamPoints::YouForgotToImplementOrDeclareServerClass()
 T CTEBeamPoints::~CTEBeamPoints()
 T CTEBeamRing::GetServerClass()
 T CTEBeamRing::Test(Vector const&, QAngle const&)
 T CTEBeamRing::YouForgotToImplementOrDeclareServerClass()
 T CTEBeamRing::~CTEBeamRing()
 T CTEBeamRingPoint::GetServerClass()
 T CTEBeamRingPoint::Test(Vector const&, QAngle const&)
 T CTEBeamRingPoint::YouForgotToImplementOrDeclareServerClass()
 T CTEBeamRingPoint::~CTEBeamRingPoint()
 T CTEBeamSpline::GetServerClass()
 T CTEBeamSpline::Test(Vector const&, QAngle const&)
 T CTEBeamSpline::YouForgotToImplementOrDeclareServerClass()
 T CTEBeamSpline::~CTEBeamSpline()
 T CTEBloodSprite::CTEBloodSprite(char const*)
 T CTEBloodSprite::GetServerClass()
 T CTEBloodSprite::Test(Vector const&, QAngle const&)
 T CTEBloodSprite::YouForgotToImplementOrDeclareServerClass()
 T CTEBloodSprite::~CTEBloodSprite()
 T CTEBloodStream::CTEBloodStream(char const*)
 T CTEBloodStream::GetServerClass()
 T CTEBloodStream::Test(Vector const&, QAngle const&)
 T CTEBloodStream::YouForgotToImplementOrDeclareServerClass()
 T CTEBloodStream::~CTEBloodStream()
 T CTEBreakModel::CTEBreakModel(char const*)
 T CTEBreakModel::GetServerClass()
 T CTEBreakModel::Precache()
 T CTEBreakModel::Test(Vector const&, QAngle const&)
 T CTEBreakModel::YouForgotToImplementOrDeclareServerClass()
 T CTEBreakModel::~CTEBreakModel()
 T CTEBubbleTrail::CTEBubbleTrail(char const*)
 T CTEBubbleTrail::GetServerClass()
 T CTEBubbleTrail::Test(Vector const&, QAngle const&)
 T CTEBubbleTrail::YouForgotToImplementOrDeclareServerClass()
 T CTEBubbleTrail::~CTEBubbleTrail()
 T CTEBubbles::CTEBubbles(char const*)
 T CTEBubbles::GetServerClass()
 T CTEBubbles::Test(Vector const&, QAngle const&)
 T CTEBubbles::YouForgotToImplementOrDeclareServerClass()
 T CTEBubbles::~CTEBubbles()
 T CTEClientProjectile::GetServerClass()
 T CTEClientProjectile::Test(Vector const&, QAngle const&)
 T CTEClientProjectile::YouForgotToImplementOrDeclareServerClass()
 T CTEClientProjectile::~CTEClientProjectile()
 T CTEConcussiveExplosion::CTEConcussiveExplosion(char const*)
 T CTEConcussiveExplosion::GetServerClass()
 T CTEConcussiveExplosion::YouForgotToImplementOrDeclareServerClass()
 T CTEConcussiveExplosion::~CTEConcussiveExplosion()
 T CTEDecal::GetServerClass()
 T CTEDecal::Test(Vector const&, QAngle const&)
 T CTEDecal::YouForgotToImplementOrDeclareServerClass()
 T CTEDecal::~CTEDecal()
 T CTEDust::GetServerClass()
 T CTEDust::Test(Vector const&, QAngle const&)
 T CTEDust::YouForgotToImplementOrDeclareServerClass()
 T CTEDust::~CTEDust()
 T CTEDynamicLight::CTEDynamicLight(char const*)
 T CTEDynamicLight::GetServerClass()
 T CTEDynamicLight::Test(Vector const&, QAngle const&)
 T CTEDynamicLight::YouForgotToImplementOrDeclareServerClass()
 T CTEDynamicLight::~CTEDynamicLight()
 T CTEEffectDispatch::GetServerClass()
 T CTEEffectDispatch::YouForgotToImplementOrDeclareServerClass()
 T CTEEffectDispatch::~CTEEffectDispatch()
 T CTEEnergySplash::GetServerClass()
 T CTEEnergySplash::Test(Vector const&, QAngle const&)
 T CTEEnergySplash::YouForgotToImplementOrDeclareServerClass()
 T CTEEnergySplash::~CTEEnergySplash()
 T CTEExplosion::CTEExplosion(char const*)
 T CTEExplosion::GetServerClass()
 T CTEExplosion::Test(Vector const&, QAngle const&)
 T CTEExplosion::YouForgotToImplementOrDeclareServerClass()
 T CTEExplosion::~CTEExplosion()
 T CTEFizz::CTEFizz(char const*)
 T CTEFizz::GetServerClass()
 T CTEFizz::Precache()
 T CTEFizz::Test(Vector const&, QAngle const&)
 T CTEFizz::YouForgotToImplementOrDeclareServerClass()
 T CTEFizz::~CTEFizz()
 T CTEFootprintDecal::GetServerClass()
 T CTEFootprintDecal::YouForgotToImplementOrDeclareServerClass()
 T CTEFootprintDecal::~CTEFootprintDecal()
 T CTEGaussExplosion::GetServerClass()
 T CTEGaussExplosion::Test(Vector const&, QAngle const&)
 T CTEGaussExplosion::YouForgotToImplementOrDeclareServerClass()
 T CTEGaussExplosion::~CTEGaussExplosion()
 T CTEGlowSprite::CTEGlowSprite(char const*)
 T CTEGlowSprite::GetServerClass()
 T CTEGlowSprite::Test(Vector const&, QAngle const&)
 T CTEGlowSprite::YouForgotToImplementOrDeclareServerClass()
 T CTEGlowSprite::~CTEGlowSprite()
 T CTEHL2MPFireBullets::GetServerClass()
 T CTEHL2MPFireBullets::YouForgotToImplementOrDeclareServerClass()
 T CTEHL2MPFireBullets::~CTEHL2MPFireBullets()
 T CTEImpact::GetServerClass()
 T CTEImpact::Precache()
 T CTEImpact::YouForgotToImplementOrDeclareServerClass()
 T CTEImpact::~CTEImpact()
 T CTEKillPlayerAttachments::GetServerClass()
 T CTEKillPlayerAttachments::Test(Vector const&, QAngle const&)
 T CTEKillPlayerAttachments::YouForgotToImplementOrDeclareServerClass()
 T CTEKillPlayerAttachments::~CTEKillPlayerAttachments()
 T CTELargeFunnel::GetServerClass()
 T CTELargeFunnel::Test(Vector const&, QAngle const&)
 T CTELargeFunnel::YouForgotToImplementOrDeclareServerClass()
 T CTELargeFunnel::~CTELargeFunnel()
 T CTEMetalSparks::GetServerClass()
 T CTEMetalSparks::Test(Vector const&, QAngle const&)
 T CTEMetalSparks::YouForgotToImplementOrDeclareServerClass()
 T CTEMetalSparks::~CTEMetalSparks()
 T CTEMuzzleFlash::GetServerClass()
 T CTEMuzzleFlash::Test(Vector const&, QAngle const&)
 T CTEMuzzleFlash::YouForgotToImplementOrDeclareServerClass()
 T CTEMuzzleFlash::~CTEMuzzleFlash()
 T CTEPhysicsProp::CTEPhysicsProp(char const*)
 T CTEPhysicsProp::GetServerClass()
 T CTEPhysicsProp::Precache()
 T CTEPhysicsProp::Test(Vector const&, QAngle const&)
 T CTEPhysicsProp::YouForgotToImplementOrDeclareServerClass()
 T CTEPhysicsProp::~CTEPhysicsProp()
 T CTEPlayerDecal::GetServerClass()
 T CTEPlayerDecal::Test(Vector const&, QAngle const&)
 T CTEPlayerDecal::YouForgotToImplementOrDeclareServerClass()
 T CTEPlayerDecal::~CTEPlayerDecal()
 T CTEProjectedDecal::GetServerClass()
 T CTEProjectedDecal::Test(Vector const&, QAngle const&)
 T CTEProjectedDecal::YouForgotToImplementOrDeclareServerClass()
 T CTEProjectedDecal::~CTEProjectedDecal()
 T CTEShatterSurface::CTEShatterSurface(char const*)
 T CTEShatterSurface::GetServerClass()
 T CTEShatterSurface::Test(Vector const&, QAngle const&)
 T CTEShatterSurface::YouForgotToImplementOrDeclareServerClass()
 T CTEShatterSurface::~CTEShatterSurface()
 T CTEShowLine::GetServerClass()
 T CTEShowLine::Test(Vector const&, QAngle const&)
 T CTEShowLine::YouForgotToImplementOrDeclareServerClass()
 T CTEShowLine::~CTEShowLine()
 T CTESmoke::CTESmoke(char const*)
 T CTESmoke::GetServerClass()
 T CTESmoke::Test(Vector const&, QAngle const&)
 T CTESmoke::YouForgotToImplementOrDeclareServerClass()
 T CTESmoke::~CTESmoke()
 T CTESparks::GetServerClass()
 T CTESparks::Test(Vector const&, QAngle const&)
 T CTESparks::YouForgotToImplementOrDeclareServerClass()
 T CTESparks::~CTESparks()
 T CTESprite::CTESprite(char const*)
 T CTESprite::GetServerClass()
 T CTESprite::Precache()
 T CTESprite::Test(Vector const&, QAngle const&)
 T CTESprite::YouForgotToImplementOrDeclareServerClass()
 T CTESprite::~CTESprite()
 T CTESpriteSpray::CTESpriteSpray(char const*)
 T CTESpriteSpray::GetServerClass()
 T CTESpriteSpray::Test(Vector const&, QAngle const&)
 T CTESpriteSpray::YouForgotToImplementOrDeclareServerClass()
 T CTESpriteSpray::~CTESpriteSpray()
 T CTEWorldDecal::GetServerClass()
 T CTEWorldDecal::Test(Vector const&, QAngle const&)
 T CTEWorldDecal::YouForgotToImplementOrDeclareServerClass()
 T CTEWorldDecal::~CTEWorldDecal()
 T CTSListWithFreeList<CBaseHandle>::Purge()
 T CTSListWithFreeList<CBaseHandle>::PushItem(CBaseHandle const&)
 T CTSListWithFreeList<CBaseHandle>::~CTSListWithFreeList()
 T CTSQueue<CFunctor*, false>::CTSQueue()
 T CTSQueue<CFunctor*, false>::Pop()
 T CTSQueue<CFunctor*, false>::Purge()
 T CTSQueue<CFunctor*, false>::Push(CTSQueue<CFunctor*, false>::Node_t*)
 T CTSQueue<CFunctor*, false>::~CTSQueue()
 T CTacticalMissionManager::CTacticalMissionManager()
 T CTacticalMissionManager::FireGameEvent(IGameEvent*)
 T CTacticalMissionManager::ForEachMission(CTacticalMissionManager::IForEachMission&)
 T CTacticalMissionManager::GetMission(char const*)
 T CTacticalMissionManager::OnRoundRestart()
 T CTacticalMissionManager::OnServerActivate()
 T CTacticalMissionManager::Register(CTacticalMission*)
 T CTacticalMissionManager::Unregister(CTacticalMission*)
 T CTacticalMissionManager::~CTacticalMissionManager()
 T CTakeDamageInfo::AdjustPlayerDamageInflictedForSkillLevel()
 T CTakeDamageInfo::AdjustPlayerDamageTakenForSkillLevel()
 T CTakeDamageInfo::CTakeDamageInfo()
 T CTakeDamageInfo::CTakeDamageInfo(CBaseEntity*, CBaseEntity*, Vector const&, Vector const&, float, int, int, Vector*)
 T CTakeDamageInfo::CTakeDamageInfo(CBaseEntity*, CBaseEntity*, float, int, int)
 T CTakeDamageInfo::DebugGetDamageTypeString(unsigned int, char*, int)
 T CTakeDamageInfo::GetAmmoName() const
 T CTakeDamageInfo::Init(CBaseEntity*, CBaseEntity*, CBaseEntity*, Vector const&, Vector const&, Vector const&, float, int, int)
 T CTakeDamageInfo::Set(CBaseEntity*, CBaseEntity*, Vector const&, Vector const&, float, int, int, Vector*)
 T CTakeDamageInfo::Set(CBaseEntity*, CBaseEntity*, float, int, int)
 T CTankTargetChange::GetDataDescMap()
 T CTankTargetChange::Precache()
 T CTankTargetChange::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CTankTargetChange::~CTankTargetChange()
 T CTankTrainAI::Activate()
 T CTankTrainAI::GetDataDescMap()
 T CTankTrainAI::InputTargetEntity(inputdata_t&)
 T CTankTrainAI::Precache()
 T CTankTrainAI::SoundEngineStart()
 T CTankTrainAI::Spawn()
 T CTankTrainAI::Think()
 T CTankTrainAI::~CTankTrainAI()
 T CTargetCDAudioRep::GetDataDescMap()
 T CTargetCDAudioRep::InputChangeCDTrack(inputdata_t&)
 T CTargetCDAudioRep::~CTargetCDAudioRep()
 T CTargetChangeGravity::GetDataDescMap()
 T CTargetChangeGravity::InputChangeGrav(inputdata_t&)
 T CTargetChangeGravity::InputResetGrav(inputdata_t&)
 T CTargetChangeGravity::~CTargetChangeGravity()
 T CTargetGunshipCrash::GetDataDescMap()
 T CTargetGunshipCrash::InputDisable(inputdata_t&)
 T CTargetGunshipCrash::InputEnable(inputdata_t&)
 T CTargetGunshipCrash::~CTargetGunshipCrash()
 T CTeam::AddPlayer(CBasePlayer*)
 T CTeam::AddScore(int)
 T CTeam::AddSpawnpoint(CTeamSpawnPoint*)
 T CTeam::CTeam()
 T CTeam::GetAliveMembers()
 T CTeam::GetName()
 T CTeam::GetNumPlayers()
 T CTeam::GetPlayer(int)
 T CTeam::GetRoundsWon()
 T CTeam::GetScore()
 T CTeam::GetServerClass()
 T CTeam::GetTeamNumber() const
 T CTeam::IncrementRoundsWon()
 T CTeam::Init(char const*, int)
 T CTeam::InitializePlayers()
 T CTeam::InitializeSpawnpoints()
 T CTeam::Precache()
 T CTeam::RemovePlayer(CBasePlayer*)
 T CTeam::RemoveSpawnpoint(CTeamSpawnPoint*)
 T CTeam::ResetScores()
 T CTeam::SetRoundsWon(int)
 T CTeam::SetScore(int)
 T CTeam::ShouldTransmitToPlayer(CBasePlayer*, CBaseEntity*)
 T CTeam::SpawnPlayer(CBasePlayer*)
 T CTeam::Think()
 T CTeam::UpdateClientData(CBasePlayer*)
 T CTeam::UpdateTransmitState()
 T CTeam::YouForgotToImplementOrDeclareServerClass()
 T CTeam::~CTeam()
 T CTeamControlPoint::AnimThink()
 T CTeamControlPoint::CTeamControlPoint()
 T CTeamControlPoint::CaptureBlocked(CBaseMultiplayerPlayer*, CBaseMultiplayerPlayer*)
 T CTeamControlPoint::CaptureEnd()
 T CTeamControlPoint::CaptureInterrupted(bool)
 T CTeamControlPoint::CaptureStart(int, int, int*)
 T CTeamControlPoint::DrawDebugTextOverlays()
 T CTeamControlPoint::ForceOwner(int)
 T CTeamControlPoint::GetCPGroup()
 T CTeamControlPoint::GetControlPointMasterName()
 T CTeamControlPoint::GetDataDescMap()
 T CTeamControlPoint::GetDefaultOwner() const
 T CTeamControlPoint::GetHudIconIndexForTeam(int)
 T CTeamControlPoint::GetHudOverlayIndexForTeam(int)
 T CTeamControlPoint::GetOwner() const
 T CTeamControlPoint::GetPreviousPointForTeam(int, int)
 T CTeamControlPoint::HandleScoring(int)
 T CTeamControlPoint::InputHideModel(inputdata_t&)
 T CTeamControlPoint::InputRoundActivate(inputdata_t&)
 T CTeamControlPoint::InputSetLocked(inputdata_t&)
 T CTeamControlPoint::InputSetOwner(inputdata_t&)
 T CTeamControlPoint::InputSetUnlockTime(inputdata_t&)
 T CTeamControlPoint::InputShowModel(inputdata_t&)
 T CTeamControlPoint::InternalSetLocked(bool)
 T CTeamControlPoint::InternalSetOwner(int, bool, int, int*)
 T CTeamControlPoint::KeyValue(char const*, char const*)
 T CTeamControlPoint::PlayerBlocked(CBaseMultiplayerPlayer*)
 T CTeamControlPoint::PlayerCapped(CBaseMultiplayerPlayer*)
 T CTeamControlPoint::Precache()
 T CTeamControlPoint::SendCapString(int, int, int*)
 T CTeamControlPoint::SetActive(bool)
 T CTeamControlPoint::SetCappersRequiredForTeam(int, int)
 T CTeamControlPoint::SetLastContestedAt(float)
 T CTeamControlPoint::SetOwner(int, bool, int, int*)
 T CTeamControlPoint::Spawn()
 T CTeamControlPoint::StopLoopingSounds()
 T CTeamControlPoint::UnlockThink()
 T CTeamControlPoint::UpdateCapPercentage()
 T CTeamControlPoint::~CTeamControlPoint()
 T CTeamControlPointMaster* _CreateEntityTemplate<CTeamControlPointMaster>(CTeamControlPointMaster*, char const*)
 T CTeamControlPointMaster::Activate()
 T CTeamControlPointMaster::CPMThink()
 T CTeamControlPointMaster::CheckWinConditions()
 T CTeamControlPointMaster::FindControlPointRounds()
 T CTeamControlPointMaster::FindControlPoints()
 T CTeamControlPointMaster::GetBaseControlPoint(int)
 T CTeamControlPointMaster::GetControlPointName()
 T CTeamControlPointMaster::GetControlPointRoundName()
 T CTeamControlPointMaster::GetControlPointRoundToPlay()
 T CTeamControlPointMaster::GetDataDescMap()
 T CTeamControlPointMaster::GetPartialCapturePointRate()
 T CTeamControlPointMaster::InputDisable(inputdata_t&)
 T CTeamControlPointMaster::InputEnable(inputdata_t&)
 T CTeamControlPointMaster::InputRoundActivate(inputdata_t&)
 T CTeamControlPointMaster::InputRoundSpawn(inputdata_t&)
 T CTeamControlPointMaster::InputSetCapLayout(inputdata_t&)
 T CTeamControlPointMaster::InputSetCapLayoutCustomPositionX(inputdata_t&)
 T CTeamControlPointMaster::InputSetCapLayoutCustomPositionY(inputdata_t&)
 T CTeamControlPointMaster::InputSetWinner(inputdata_t&)
 T CTeamControlPointMaster::InputSetWinnerAndForceCaps(inputdata_t&)
 T CTeamControlPointMaster::InternalSetWinner(int)
 T CTeamControlPointMaster::IsBaseControlPoint(int)
 T CTeamControlPointMaster::IsInRound(CTeamControlPoint*)
 T CTeamControlPointMaster::KeyValue(char const*, char const*)
 T CTeamControlPointMaster::NumPlayableControlPointRounds()
 T CTeamControlPointMaster::Precache()
 T CTeamControlPointMaster::RegisterRoundBeingPlayed()
 T CTeamControlPointMaster::SelectSpecificRound()
 T CTeamControlPointMaster::SetBaseControlPoints()
 T CTeamControlPointMaster::Spawn()
 T CTeamControlPointMaster::TeamOwnsAllPoints(CTeamControlPoint*, int)
 T CTeamControlPointMaster::UpdateOnRemove()
 T CTeamControlPointMaster::WouldNewCPOwnerWinGame(CTeamControlPoint*, int)
 T CTeamControlPointMaster::~CTeamControlPointMaster()
 T CTeamControlPointRound::Activate()
 T CTeamControlPointRound::CheckWinConditions()
 T CTeamControlPointRound::FindControlPoints()
 T CTeamControlPointRound::FireOnStartOutput()
 T CTeamControlPointRound::GetDataDescMap()
 T CTeamControlPointRound::InputDisable(inputdata_t&)
 T CTeamControlPointRound::InputEnable(inputdata_t&)
 T CTeamControlPointRound::InputRoundSpawn(inputdata_t&)
 T CTeamControlPointRound::IsControlPointInRound(CTeamControlPoint*)
 T CTeamControlPointRound::IsPlayable()
 T CTeamControlPointRound::MakePlayable()
 T CTeamControlPointRound::SelectedToPlay()
 T CTeamControlPointRound::Spawn()
 T CTeamControlPointRound::TeamOwnsAllPoints(CTeamControlPoint*, int)
 T CTeamControlPointRound::WouldNewCPOwnerWinGame(CTeamControlPoint*, int)
 T CTeamControlPointRound::~CTeamControlPointRound()
 T CTeamRecipientFilter::CTeamRecipientFilter(int, bool)
 T CTeamRecipientFilter::~CTeamRecipientFilter()
 T CTeamRoundTimer::Activate()
 T CTeamRoundTimer::AddTimerSeconds(int, int)
 T CTeamRoundTimer::CTeamRoundTimer()
 T CTeamRoundTimer::GetDataDescMap()
 T CTeamRoundTimer::GetServerClass()
 T CTeamRoundTimer::GetTimeRemaining()
 T CTeamRoundTimer::GetTimerMaxLength()
 T CTeamRoundTimer::InputAddTeamTime(inputdata_t&)
 T CTeamRoundTimer::InputAddTime(inputdata_t&)
 T CTeamRoundTimer::InputAutoCountdown(inputdata_t&)
 T CTeamRoundTimer::InputDisable(inputdata_t&)
 T CTeamRoundTimer::InputEnable(inputdata_t&)
 T CTeamRoundTimer::InputPause(inputdata_t&)
 T CTeamRoundTimer::InputRestart(inputdata_t&)
 T CTeamRoundTimer::InputResume(inputdata_t&)
 T CTeamRoundTimer::InputRoundSpawn(inputdata_t&)
 T CTeamRoundTimer::InputSetMaxTime(inputdata_t&)
 T CTeamRoundTimer::InputSetSetupTime(inputdata_t&)
 T CTeamRoundTimer::InputSetTime(inputdata_t&)
 T CTeamRoundTimer::InputShowInHUD(inputdata_t&)
 T CTeamRoundTimer::PauseTimer()
 T CTeamRoundTimer::Precache()
 T CTeamRoundTimer::ResumeTimer()
 T CTeamRoundTimer::RoundTimerSetupThink()
 T CTeamRoundTimer::RoundTimerThink()
 T CTeamRoundTimer::SetActiveTimer(CTeamRoundTimer*)
 T CTeamRoundTimer::SetAutoCountdown(bool)
 T CTeamRoundTimer::SetState(int, bool)
 T CTeamRoundTimer::SetStopWatchTimeStamp()
 T CTeamRoundTimer::SetTimeRemaining(int)
 T CTeamRoundTimer::ShowInHud()
 T CTeamRoundTimer::Spawn()
 T CTeamRoundTimer::StartPaused()
 T CTeamRoundTimer::UpdateTransmitState()
 T CTeamRoundTimer::YouForgotToImplementOrDeclareServerClass()
 T CTeamRoundTimer::~CTeamRoundTimer()
 T CTeamSpawnPoint::Activate()
 T CTeamSpawnPoint::GetDataDescMap()
 T CTeamSpawnPoint::InputDisable(inputdata_t&)
 T CTeamSpawnPoint::InputEnable(inputdata_t&)
 T CTeamSpawnPoint::IsValid(CBasePlayer*)
 T CTeamSpawnPoint::~CTeamSpawnPoint()
 T CTeamTrainWatcher::CTeamTrainWatcher()
 T CTeamTrainWatcher::FireGameEvent(IGameEvent*)
 T CTeamTrainWatcher::GetDataDescMap()
 T CTeamTrainWatcher::GetServerClass()
 T CTeamTrainWatcher::HandleSparks(bool)
 T CTeamTrainWatcher::HandleTrainMovement(bool)
 T CTeamTrainWatcher::InputDisable(inputdata_t&)
 T CTeamTrainWatcher::InputEnable(inputdata_t&)
 T CTeamTrainWatcher::InputOnStartOvertime(inputdata_t&)
 T CTeamTrainWatcher::InputRoundActivate(inputdata_t&)
 T CTeamTrainWatcher::InputSetNumTrainCappers(inputdata_t&)
 T CTeamTrainWatcher::InputSetSpeedForwardModifier(inputdata_t&)
 T CTeamTrainWatcher::InputSetTrainCanRecede(inputdata_t&)
 T CTeamTrainWatcher::InputSetTrainRecedeTime(inputdata_t&)
 T CTeamTrainWatcher::InputSetTrainRecedeTimeAndUpdate(inputdata_t&)
 T CTeamTrainWatcher::InternalSetNumTrainCappers(int, CBaseEntity*)
 T CTeamTrainWatcher::SetNumTrainCappers(int, CBaseEntity*)
 T CTeamTrainWatcher::StartCaptureAlarm(CTeamControlPoint*)
 T CTeamTrainWatcher::UpdateOnRemove()
 T CTeamTrainWatcher::UpdateTransmitState()
 T CTeamTrainWatcher::WatcherActivate()
 T CTeamTrainWatcher::WatcherAlarmThink()
 T CTeamTrainWatcher::WatcherThink()
 T CTeamTrainWatcher::YouForgotToImplementOrDeclareServerClass()
 T CTeamTrainWatcher::~CTeamTrainWatcher()
 T CTeamVehicleSpawnPoint::Activate()
 T CTeamVehicleSpawnPoint::GetDataDescMap()
 T CTeamVehicleSpawnPoint::~CTeamVehicleSpawnPoint()
 T CTeamplayRoundBasedRules::AddPlayedRound(string_t)
 T CTeamplayRoundBasedRules::AddTeamRespawnWaveTime(int, float)
 T CTeamplayRoundBasedRules::GetLastPlayedRound()
 T CTeamplayRoundBasedRules::IsInTournamentMode()
 T CTeamplayRoundBasedRules::IsPreviouslyPlayedRound(string_t)
 T CTeamplayRoundBasedRules::SetOvertime(bool)
 T CTeamplayRoundBasedRulesProxy::InputSetStalemateOnTimelimit(inputdata_t&)
 T CTeamplayRules::CTeamplayRules()
 T CTeamplayRules::ChangePlayerTeam(CBasePlayer*, char const*, bool, bool)
 T CTeamplayRules::ClientCommand(CBaseEntity*, CCommand const&)
 T CTeamplayRules::ClientDisconnected(edict_t*)
 T CTeamplayRules::ClientSettingsChanged(CBasePlayer*)
 T CTeamplayRules::DeathNotice(CBasePlayer*, CTakeDamageInfo const&)
 T CTeamplayRules::FPlayerCanTakeDamage(CBasePlayer*, CBaseEntity*, CTakeDamageInfo const&)
 T CTeamplayRules::GetCaptureValueForPlayer(CBasePlayer*)
 T CTeamplayRules::GetGameDescription()
 T CTeamplayRules::GetIndexedTeamName(int)
 T CTeamplayRules::GetTeamID(CBaseEntity*)
 T CTeamplayRules::GetTeamIndex(char const*)
 T CTeamplayRules::HandleScrambleTeams()
 T CTeamplayRules::HandleSwitchTeams()
 T CTeamplayRules::IPointsForKill(CBasePlayer*, CBasePlayer*)
 T CTeamplayRules::InitHUD(CBasePlayer*)
 T CTeamplayRules::IsTeamplay()
 T CTeamplayRules::IsValidTeam(char const*)
 T CTeamplayRules::PlayerCanHearChat(CBasePlayer*, CBasePlayer*)
 T CTeamplayRules::PlayerKilled(CBasePlayer*, CTakeDamageInfo const&)
 T CTeamplayRules::PlayerMayBlockPoint(CBasePlayer*, int, char*, int)
 T CTeamplayRules::PlayerMayCapturePoint(CBasePlayer*, int, char*, int)
 T CTeamplayRules::PlayerRelationship(CBaseEntity*, CBaseEntity*)
 T CTeamplayRules::PointsMayAlwaysBeBlocked()
 T CTeamplayRules::PointsMayBeCaptured()
 T CTeamplayRules::Precache()
 T CTeamplayRules::RecountTeams()
 T CTeamplayRules::SetDefaultPlayerTeam(CBasePlayer*)
 T CTeamplayRules::SetLastCapPointChanged(int)
 T CTeamplayRules::SetScrambleTeams(bool)
 T CTeamplayRules::SetStalemate(int, bool, bool)
 T CTeamplayRules::SetSwitchTeams(bool)
 T CTeamplayRules::SetWinningTeam(int, int, bool, bool, bool, bool)
 T CTeamplayRules::ShouldAutoAim(CBasePlayer*, edict_t*)
 T CTeamplayRules::ShouldScrambleTeams()
 T CTeamplayRules::ShouldSwitchTeams()
 T CTeamplayRules::TeamMayCapturePoint(int, int)
 T CTeamplayRules::Think()
 T CTeamplayRules::TimerMayExpire()
 T CTeamplayRules::~CTeamplayRules()
 T CTempEntTester::Create(Vector const&, QAngle const&, char const*, char const*)
 T CTempEntTester::Spawn()
 T CTempEntTester::Think()
 T CTempEntTester::~CTempEntTester()
 T CTempEntsSystem::ArmorRicochet(IRecipientFilter&, float, Vector const*, Vector const*)
 T CTempEntsSystem::BSPDecal(IRecipientFilter&, float, Vector const*, int, int)
 T CTempEntsSystem::BeamEntPoint(IRecipientFilter&, float, int, Vector const*, int, Vector const*, int, int, int, int, float, float, float, int, float, int, int, int, int, int)
 T CTempEntsSystem::BeamEnts(IRecipientFilter&, float, int, int, int, int, int, int, float, float, float, int, float, int, int, int, int, int)
 T CTempEntsSystem::BeamFollow(IRecipientFilter&, float, int, int, int, float, float, float, float, float, float, float, float)
 T CTempEntsSystem::BeamLaser(IRecipientFilter&, float, int, int, int, int, int, int, float, float, float, int, float, int, int, int, int, int)
 T CTempEntsSystem::BeamPoints(IRecipientFilter&, float, Vector const*, Vector const*, int, int, int, int, float, float, float, int, float, int, int, int, int, int)
 T CTempEntsSystem::BeamRing(IRecipientFilter&, float, int, int, int, int, int, int, float, float, int, float, int, int, int, int, int, int)
 T CTempEntsSystem::BeamRingPoint(IRecipientFilter&, float, Vector const&, float, float, int, int, int, int, float, float, int, float, int, int, int, int, int, int)
 T CTempEntsSystem::BeamSpline(IRecipientFilter&, float, int, Vector*)
 T CTempEntsSystem::BloodSprite(IRecipientFilter&, float, Vector const*, Vector const*, int, int, int, int, int)
 T CTempEntsSystem::BloodStream(IRecipientFilter&, float, Vector const*, Vector const*, int, int, int, int, int)
 T CTempEntsSystem::BreakModel(IRecipientFilter&, float, Vector const&, QAngle const&, Vector const&, Vector const&, int, int, int, float, int)
 T CTempEntsSystem::BubbleTrail(IRecipientFilter&, float, Vector const*, Vector const*, float, int, int, float)
 T CTempEntsSystem::Bubbles(IRecipientFilter&, float, Vector const*, Vector const*, float, int, int, float)
 T CTempEntsSystem::ClientProjectile(IRecipientFilter&, float, Vector const*, Vector const*, int, int, CBaseEntity*)
 T CTempEntsSystem::Decal(IRecipientFilter&, float, Vector const*, Vector const*, int, int, int)
 T CTempEntsSystem::DispatchEffect(IRecipientFilter&, float, Vector const&, char const*, CEffectData const&)
 T CTempEntsSystem::Dust(IRecipientFilter&, float, Vector const&, Vector const&, float, float)
 T CTempEntsSystem::DynamicLight(IRecipientFilter&, float, Vector const*, int, int, int, int, float, float, float)
 T CTempEntsSystem::EnergySplash(IRecipientFilter&, float, Vector const*, Vector const*, bool)
 T CTempEntsSystem::Explosion(IRecipientFilter&, float, Vector const*, int, float, int, int, int, int, Vector const*, unsigned char)
 T CTempEntsSystem::Fizz(IRecipientFilter&, float, CBaseEntity const*, int, int, int)
 T CTempEntsSystem::FootprintDecal(IRecipientFilter&, float, Vector const*, Vector const*, int, int, unsigned char)
 T CTempEntsSystem::GaussExplosion(IRecipientFilter&, float, Vector const&, Vector const&, int)
 T CTempEntsSystem::GlowSprite(IRecipientFilter&, float, Vector const*, int, float, float, int)
 T CTempEntsSystem::KillPlayerAttachments(IRecipientFilter&, float, int)
 T CTempEntsSystem::LargeFunnel(IRecipientFilter&, float, Vector const*, int, int)
 T CTempEntsSystem::MetalSparks(IRecipientFilter&, float, Vector const*, Vector const*)
 T CTempEntsSystem::MuzzleFlash(IRecipientFilter&, float, Vector const&, QAngle const&, float, int)
 T CTempEntsSystem::PhysicsProp(IRecipientFilter&, float, int, int, Vector const&, QAngle const&, Vector const&, int, int)
 T CTempEntsSystem::PlayerDecal(IRecipientFilter&, float, Vector const*, int, int)
 T CTempEntsSystem::ProjectDecal(IRecipientFilter&, float, Vector const*, QAngle const*, float, int)
 T CTempEntsSystem::ShatterSurface(IRecipientFilter&, float, Vector const*, QAngle const*, Vector const*, Vector const*, float, float, float, ShatterSurface_t, int, int, int, int, int, int)
 T CTempEntsSystem::ShowLine(IRecipientFilter&, float, Vector const*, Vector const*)
 T CTempEntsSystem::Smoke(IRecipientFilter&, float, Vector const*, int, float, int)
 T CTempEntsSystem::Sparks(IRecipientFilter&, float, Vector const*, int, int, Vector const*)
 T CTempEntsSystem::Sprite(IRecipientFilter&, float, Vector const*, int, float, int)
 T CTempEntsSystem::SpriteSpray(IRecipientFilter&, float, Vector const*, Vector const*, int, int, float, int)
 T CTempEntsSystem::TriggerTempEntity(KeyValues*)
 T CTempEntsSystem::WorldDecal(IRecipientFilter&, float, Vector const*, int)
 T CTempEntsSystem::~CTempEntsSystem()
 T CTemplateNPCMaker* _CreateEntityTemplate<CTemplateNPCMaker>(CTemplateNPCMaker*, char const*)
 T CTemplateNPCMaker::FindSpawnDestination()
 T CTemplateNPCMaker::GetDataDescMap()
 T CTemplateNPCMaker::InputChangeDestinationGroup(inputdata_t&)
 T CTemplateNPCMaker::InputSetMinimumSpawnDistance(inputdata_t&)
 T CTemplateNPCMaker::InputSpawnInLine(inputdata_t&)
 T CTemplateNPCMaker::InputSpawnInRadius(inputdata_t&)
 T CTemplateNPCMaker::InputSpawnMultiple(inputdata_t&)
 T CTemplateNPCMaker::MakeMultipleNPCS(int)
 T CTemplateNPCMaker::MakeNPC()
 T CTemplateNPCMaker::MakeNPCInLine()
 T CTemplateNPCMaker::MakeNPCInRadius()
 T CTemplateNPCMaker::PlaceNPCInLine(CAI_BaseNPC*)
 T CTemplateNPCMaker::Precache()
 T CTemplateNPCMaker::PrecacheTemplateEntity(CBaseEntity*)
 T CTemplateNPCMaker::~CTemplateNPCMaker()
 T CTemplate_SaveRestoreBlockHandler::GetBlockName()
 T CTemplate_SaveRestoreBlockHandler::ReadRestoreHeaders(IRestore*)
 T CTemplate_SaveRestoreBlockHandler::Restore(IRestore*, bool)
 T CTemplate_SaveRestoreBlockHandler::Save(ISave*)
 T CTemplate_SaveRestoreBlockHandler::WriteSaveHeaders(ISave*)
 T CTemplatesHook::LevelShutdownPostEntity()
 T CTemplatesHook::~CTemplatesHook()
 T CTesla::Activate()
 T CTesla::CTesla()
 T CTesla::DoSpark()
 T CTesla::GetDataDescMap()
 T CTesla::GetServerClass()
 T CTesla::InputDoSpark(inputdata_t&)
 T CTesla::InputTurnOff(inputdata_t&)
 T CTesla::InputTurnOn(inputdata_t&)
 T CTesla::Precache()
 T CTesla::ShootArcThink()
 T CTesla::Spawn()
 T CTesla::YouForgotToImplementOrDeclareServerClass()
 T CTesla::~CTesla()
 T CTestEffect::Precache()
 T CTestEffect::Spawn()
 T CTestEffect::Think()
 T CTestEffect::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CTestEffect::~CTestEffect()
 T CTestTraceline::GetDataDescMap()
 T CTestTraceline::GetServerClass()
 T CTestTraceline::Spawn()
 T CTestTraceline::Spin()
 T CTestTraceline::UpdateTransmitState()
 T CTestTraceline::YouForgotToImplementOrDeclareServerClass()
 T CTestTraceline::~CTestTraceline()
 T CTest_ProxyToggle_Networkable::GetServerClass()
 T CTest_ProxyToggle_Networkable::UpdateTransmitState()
 T CTest_ProxyToggle_Networkable::YouForgotToImplementOrDeclareServerClass()
 T CTest_ProxyToggle_Networkable::~CTest_ProxyToggle_Networkable()
 T CTextStat::~CTextStat()
 T CTextStatsMgr::GetStatsFilename()
 T CTextStatsMgr::SetStatsFilename(char*)
 T CTextStatsMgr::WriteFile(IFileSystem*, char const*)
 T CTextureToggle::GetDataDescMap()
 T CTextureToggle::InputIncrementBrushTexIndex(inputdata_t&)
 T CTextureToggle::InputSetBrushTexIndex(inputdata_t&)
 T CTextureToggle::~CTextureToggle()
 T CThinkContextsSaveDataOps::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CThinkContextsSaveDataOps::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CThinkContextsSaveDataOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CThinkContextsSaveDataOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CThinkSyncTester::EntityThinking(int, CBaseEntity*, float, int)
 T CThinkSyncTester::FindOrAddItem(CBaseEntity*, float)
 T CThinkSyncTester::Report()
 T CThinkSyncTester::ThinkLessFunc(ThinkSync const&, ThinkSync const&)
 T CThinkSyncTester::~CThinkSyncTester()
 T CThrustController::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)
 T CTimedEventMgr::CTimedEventMgr()
 T CTimedEventMgr::FireEvents()
 T CTimedEventMgr::~CTimedEventMgr()
 T CTimerEntity::DrawDebugTextOverlays()
 T CTimerEntity::FireTimer()
 T CTimerEntity::GetDataDescMap()
 T CTimerEntity::InputAddToTimer(inputdata_t&)
 T CTimerEntity::InputDisable(inputdata_t&)
 T CTimerEntity::InputEnable(inputdata_t&)
 T CTimerEntity::InputFireTimer(inputdata_t&)
 T CTimerEntity::InputRefireTime(inputdata_t&)
 T CTimerEntity::InputResetTimer(inputdata_t&)
 T CTimerEntity::InputSubtractFromTimer(inputdata_t&)
 T CTimerEntity::InputToggle(inputdata_t&)
 T CTimerEntity::Spawn()
 T CTimerEntity::Think()
 T CTimerEntity::~CTimerEntity()
 T CTongueEntitiesEnum::EnumElement(IHandleEntity*)
 T CToolFrameworkServer::FrameUpdatePostEntityThink()
 T CToolFrameworkServer::FrameUpdatePreEntityThink()
 T CToolFrameworkServer::Init()
 T CToolFrameworkServer::LevelInitPostEntity()
 T CToolFrameworkServer::LevelInitPreEntity()
 T CToolFrameworkServer::LevelShutdownPostEntity()
 T CToolFrameworkServer::LevelShutdownPreEntity()
 T CToolFrameworkServer::PreClientUpdate()
 T CToolFrameworkServer::PreSetupVisibility()
 T CToolFrameworkServer::~CToolFrameworkServer()
 T CTraceFilter::GetTraceType() const
 T CTraceFilterAgainstEntityList::GetTraceType() const
 T CTraceFilterAgainstEntityList::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterAntlion::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterCharge::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterChopper::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterCollisionGroupDelta::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterDoor::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterEntitiesOnly::GetTraceType() const
 T CTraceFilterEntity::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterEntityIgnoreOther::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterLOS::CTraceFilterLOS(IHandleEntity*, int, IHandleEntity*)
 T CTraceFilterLOS::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterMelee::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterMetroPolice::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterNav::CTraceFilterNav(CAI_BaseNPC*, bool, IServerEntity const*, int, bool)
 T CTraceFilterNav::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterNoCombatCharacters::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterNoOwnerTest::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterOnlyNPCsAndPlayer::GetTraceType() const
 T CTraceFilterOnlyNPCsAndPlayer::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterPlayersNPCs::GetTraceType() const
 T CTraceFilterPlayersNPCs::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterPlayersNPCsPhysicsProps::GetTraceType() const
 T CTraceFilterPlayersNPCsPhysicsProps::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterPushFinal::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterPushMove::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterSimple::CTraceFilterSimple(IHandleEntity const*, int, bool (*)(IHandleEntity*, int))
 T CTraceFilterSimple::SetCollisionGroup(int)
 T CTraceFilterSimple::SetPassEntity(IHandleEntity const*)
 T CTraceFilterSimple::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterSimpleList::AddEntityToIgnore(IHandleEntity*)
 T CTraceFilterSimpleList::CTraceFilterSimpleList(int)
 T CTraceFilterSimpleList::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterSimpleNPCExclude::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterSkipNPCs::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterSkipPhysics::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterSkipTwoEntities::CTraceFilterSkipTwoEntities(IHandleEntity const*, IHandleEntity const*, int)
 T CTraceFilterSkipTwoEntities::SetPassEntity2(IHandleEntity const*)
 T CTraceFilterSkipTwoEntities::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterWorldOnly::GetTraceType() const
 T CTraceFilterWorldOnly::ShouldHitEntity(IHandleEntity*, int)
 T CTraceListData::EnumElement(IHandleEntity*)
 T CTraceListData::~CTraceListData()
 T CTracePassFilter::ShouldHitEntity(IHandleEntity*, int)
 T CTriggerApplyImpulse::GetDataDescMap()
 T CTriggerApplyImpulse::InputApplyImpulse(inputdata_t&)
 T CTriggerApplyImpulse::Spawn()
 T CTriggerApplyImpulse::~CTriggerApplyImpulse()
 T CTriggerAreaCapture::AreaTouch(CBaseEntity*)
 T CTriggerAreaCapture::BreakCapture(bool)
 T CTriggerAreaCapture::CTriggerAreaCapture()
 T CTriggerAreaCapture::CaptureModeScalesWithPlayers() const
 T CTriggerAreaCapture::CaptureThink()
 T CTriggerAreaCapture::DisplayCapHintTo(CBaseMultiplayerPlayer*)
 T CTriggerAreaCapture::EndCapture(int)
 T CTriggerAreaCapture::EndTouch(CBaseEntity*)
 T CTriggerAreaCapture::ForceOwner(int)
 T CTriggerAreaCapture::GetDataDescMap()
 T CTriggerAreaCapture::GetNumCappingPlayers(int, int&, int*)
 T CTriggerAreaCapture::InputCaptureCurrentCP(inputdata_t&)
 T CTriggerAreaCapture::InputRoundSpawn(inputdata_t&)
 T CTriggerAreaCapture::InputSetControlPoint(inputdata_t&)
 T CTriggerAreaCapture::InputSetTeamCanCap(inputdata_t&)
 T CTriggerAreaCapture::KeyValue(char const*, char const*)
 T CTriggerAreaCapture::OnEndCapture(int)
 T CTriggerAreaCapture::OnStartCapture(int)
 T CTriggerAreaCapture::Precache()
 T CTriggerAreaCapture::SetCapTimeRemaining(float)
 T CTriggerAreaCapture::SetNumCappers(int, bool)
 T CTriggerAreaCapture::SetOwner(int)
 T CTriggerAreaCapture::Spawn()
 T CTriggerAreaCapture::StartCapture(int, int)
 T CTriggerAreaCapture::StartTouch(CBaseEntity*)
 T CTriggerAreaCapture::UpdateBlocked()
 T CTriggerAreaCapture::UpdateNumPlayers(bool)
 T CTriggerAreaCapture::~CTriggerAreaCapture()
 T CTriggerAreaCaptureShim::Touch(CBaseEntity*)
 T CTriggerAreaCaptureShim::~CTriggerAreaCaptureShim()
 T CTriggerBrush::EndTouch(CBaseEntity*)
 T CTriggerBrush::GetDataDescMap()
 T CTriggerBrush::InputDisable(inputdata_t&)
 T CTriggerBrush::InputEnable(inputdata_t&)
 T CTriggerBrush::Spawn()
 T CTriggerBrush::StartTouch(CBaseEntity*)
 T CTriggerBrush::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CTriggerBrush::~CTriggerBrush()
 T CTriggerCDAudio::Spawn()
 T CTriggerCDAudio::Touch(CBaseEntity*)
 T CTriggerCDAudio::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CTriggerCDAudio::~CTriggerCDAudio()
 T CTriggerCamera::Disable()
 T CTriggerCamera::Enable()
 T CTriggerCamera::FollowTarget()
 T CTriggerCamera::GetDataDescMap()
 T CTriggerCamera::InputDisable(inputdata_t&)
 T CTriggerCamera::InputEnable(inputdata_t&)
 T CTriggerCamera::KeyValue(char const*, char const*)
 T CTriggerCamera::Move()
 T CTriggerCamera::Spawn()
 T CTriggerCamera::UpdateTransmitState()
 T CTriggerCamera::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CTriggerCamera::~CTriggerCamera()
 T CTriggerGravity::GetDataDescMap()
 T CTriggerGravity::GravityTouch(CBaseEntity*)
 T CTriggerGravity::Spawn()
 T CTriggerGravity::~CTriggerGravity()
 T CTriggerHurt::CTriggerHurt()
 T CTriggerHurt::EndTouch(CBaseEntity*)
 T CTriggerHurt::GetDataDescMap()
 T CTriggerHurt::HurtAllTouchers(float)
 T CTriggerHurt::HurtEntity(CBaseEntity*, float)
 T CTriggerHurt::HurtThink()
 T CTriggerHurt::RadiationThink()
 T CTriggerHurt::Spawn()
 T CTriggerHurt::Touch(CBaseEntity*)
 T CTriggerHurt::~CTriggerHurt()
 T CTriggerHurtShim::HurtThinkShim()
 T CTriggerHurtShim::RadiationThinkShim()
 T CTriggerHurtShim::~CTriggerHurtShim()
 T CTriggerImpact::DrawDebugTextOverlays()
 T CTriggerImpact::GetDataDescMap()
 T CTriggerImpact::InputImpact(inputdata_t&)
 T CTriggerImpact::InputSetMagnitude(inputdata_t&)
 T CTriggerImpact::Spawn()
 T CTriggerImpact::StartTouch(CBaseEntity*)
 T CTriggerImpact::~CTriggerImpact()
 T CTriggerLook::DrawDebugTextOverlays()
 T CTriggerLook::EndTouch(CBaseEntity*)
 T CTriggerLook::GetDataDescMap()
 T CTriggerLook::Spawn()
 T CTriggerLook::StartTouch(CBaseEntity*)
 T CTriggerLook::TimeoutThink()
 T CTriggerLook::Touch(CBaseEntity*)
 T CTriggerLook::Trigger(CBaseEntity*, bool)
 T CTriggerLook::~CTriggerLook()
 T CTriggerMultiple::ActivateMultiTrigger(CBaseEntity*)
 T CTriggerMultiple::GetDataDescMap()
 T CTriggerMultiple::MultiTouch(CBaseEntity*)
 T CTriggerMultiple::MultiWaitOver()
 T CTriggerMultiple::Spawn()
 T CTriggerMultiple::~CTriggerMultiple()
 T CTriggerOnce::Spawn()
 T CTriggerOnce::~CTriggerOnce()
 T CTriggerPhysicsTrap::GetDataDescMap()
 T CTriggerPhysicsTrap::InputDisable(inputdata_t&)
 T CTriggerPhysicsTrap::InputEnable(inputdata_t&)
 T CTriggerPhysicsTrap::InputToggle(inputdata_t&)
 T CTriggerPhysicsTrap::Touch(CBaseEntity*)
 T CTriggerPhysicsTrap::~CTriggerPhysicsTrap()
 T CTriggerPlayerMovement::EndTouch(CBaseEntity*)
 T CTriggerPlayerMovement::GetDataDescMap()
 T CTriggerPlayerMovement::Spawn()
 T CTriggerPlayerMovement::StartTouch(CBaseEntity*)
 T CTriggerPlayerMovement::~CTriggerPlayerMovement()
 T CTriggerProximity::Activate()
 T CTriggerProximity::EndTouch(CBaseEntity*)
 T CTriggerProximity::GetDataDescMap()
 T CTriggerProximity::MeasureThink()
 T CTriggerProximity::Spawn()
 T CTriggerProximity::StartTouch(CBaseEntity*)
 T CTriggerProximity::~CTriggerProximity()
 T CTriggerPush::Activate()
 T CTriggerPush::GetDataDescMap()
 T CTriggerPush::Spawn()
 T CTriggerPush::Touch(CBaseEntity*)
 T CTriggerPush::~CTriggerPush()
 T CTriggerRPGFire::OnRestore()
 T CTriggerRPGFire::Spawn()
 T CTriggerRPGFire::~CTriggerRPGFire()
 T CTriggerRemove::GetDataDescMap()
 T CTriggerRemove::Spawn()
 T CTriggerRemove::Touch(CBaseEntity*)
 T CTriggerRemove::~CTriggerRemove()
 T CTriggerSave::GetDataDescMap()
 T CTriggerSave::Spawn()
 T CTriggerSave::Touch(CBaseEntity*)
 T CTriggerSave::~CTriggerSave()
 T CTriggerSoundscape::Activate()
 T CTriggerSoundscape::EndTouch(CBaseEntity*)
 T CTriggerSoundscape::GetDataDescMap()
 T CTriggerSoundscape::PlayerUpdateThink()
 T CTriggerSoundscape::Spawn()
 T CTriggerSoundscape::StartTouch(CBaseEntity*)
 T CTriggerSoundscape::~CTriggerSoundscape()
 T CTriggerTeleport::GetDataDescMap()
 T CTriggerTeleport::Spawn()
 T CTriggerTeleport::Touch(CBaseEntity*)
 T CTriggerTeleport::~CTriggerTeleport()
 T CTriggerTeleportRelative::GetDataDescMap()
 T CTriggerTeleportRelative::Spawn()
 T CTriggerTeleportRelative::Touch(CBaseEntity*)
 T CTriggerTeleportRelative::~CTriggerTeleportRelative()
 T CTriggerToggleSave::GetDataDescMap()
 T CTriggerToggleSave::InputDisable(inputdata_t&)
 T CTriggerToggleSave::InputEnable(inputdata_t&)
 T CTriggerToggleSave::Spawn()
 T CTriggerToggleSave::Touch(CBaseEntity*)
 T CTriggerToggleSave::~CTriggerToggleSave()
 T CTriggerTraceEnum::EnumEntity(IHandleEntity*)
 T CTriggerVPhysicsMotion* _CreateEntityTemplate<CTriggerVPhysicsMotion>(CTriggerVPhysicsMotion*, char const*)
 T CTriggerVPhysicsMotion::CreateVPhysics()
 T CTriggerVPhysicsMotion::EndTouch(CBaseEntity*)
 T CTriggerVPhysicsMotion::GetDataDescMap()
 T CTriggerVPhysicsMotion::InputSetVelocityLimitTime(inputdata_t&)
 T CTriggerVPhysicsMotion::OnRestore()
 T CTriggerVPhysicsMotion::Precache()
 T CTriggerVPhysicsMotion::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)
 T CTriggerVPhysicsMotion::Spawn()
 T CTriggerVPhysicsMotion::StartTouch(CBaseEntity*)
 T CTriggerVPhysicsMotion::UpdateOnRemove()
 T CTriggerVPhysicsMotion::~CTriggerVPhysicsMotion()
 T CTriggerVolume::Spawn()
 T CTriggerVolume::~CTriggerVolume()
 T CTriggerWateryDeath::EndTouch(CBaseEntity*)
 T CTriggerWateryDeath::GetDataDescMap()
 T CTriggerWateryDeath::PassesTriggerFilters(CBaseEntity*)
 T CTriggerWateryDeath::Precache()
 T CTriggerWateryDeath::Spawn()
 T CTriggerWateryDeath::SpawnLeeches(CBaseEntity*)
 T CTriggerWateryDeath::StartTouch(CBaseEntity*)
 T CTriggerWateryDeath::Touch(CBaseEntity*)
 T CTriggerWateryDeath::~CTriggerWateryDeath()
 T CTriggerWeaponDissolve::Activate()
 T CTriggerWeaponDissolve::AddWeapon(CBaseCombatWeapon*)
 T CTriggerWeaponDissolve::CreateBeam(Vector const&, CBaseEntity*, float)
 T CTriggerWeaponDissolve::DissolveThink()
 T CTriggerWeaponDissolve::GetConduitPoint(CBaseEntity*)
 T CTriggerWeaponDissolve::GetDataDescMap()
 T CTriggerWeaponDissolve::InputStopSound(inputdata_t&)
 T CTriggerWeaponDissolve::Precache()
 T CTriggerWeaponDissolve::Spawn()
 T CTriggerWeaponDissolve::StartTouch(CBaseEntity*)
 T CTriggerWeaponDissolve::~CTriggerWeaponDissolve()
 T CTriggerWeaponStrip::EndTouch(CBaseEntity*)
 T CTriggerWeaponStrip::GetDataDescMap()
 T CTriggerWeaponStrip::StartTouch(CBaseEntity*)
 T CTriggerWeaponStrip::~CTriggerWeaponStrip()
 T CTriggerWind::CreateVPhysics()
 T CTriggerWind::DrawDebugTextOverlays()
 T CTriggerWind::EndTouch(CBaseEntity*)
 T CTriggerWind::GetDataDescMap()
 T CTriggerWind::InputSetSpeed(inputdata_t&)
 T CTriggerWind::KeyValue(char const*, char const*)
 T CTriggerWind::OnRestore()
 T CTriggerWind::Spawn()
 T CTriggerWind::StartTouch(CBaseEntity*)
 T CTriggerWind::UpdateOnRemove()
 T CTriggerWind::WindThink()
 T CTriggerWind::~CTriggerWind()
 T CTripmineGrenade::BeamBreakThink()
 T CTripmineGrenade::DelayDeathThink()
 T CTripmineGrenade::Event_Killed(CTakeDamageInfo const&)
 T CTripmineGrenade::GetDataDescMap()
 T CTripmineGrenade::MakeBeam()
 T CTripmineGrenade::PowerupThink()
 T CTripmineGrenade::Precache()
 T CTripmineGrenade::Spawn()
 T CTripmineGrenade::WarningThink()
 T CTripmineGrenade::~CTripmineGrenade()
 T CTurretTipController::Activate()
 T CTurretTipController::GetDataDescMap()
 T CTurretTipController::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)
 T CTurretTipController::Spawn()
 T CTurretTipController::~CTurretTipController()
 T CUsePushFilter::ShouldHitEntity(IHandleEntity*, int)
 T CUserCmd::operator=(CUserCmd const&)
 T CUserCmd::~CUserCmd()
 T CUserMessages::GetUserMessageName(int)
 T CUserMessages::GetUserMessageSize(int)
 T CUserMessages::IsValidIndex(int)
 T CUserMessages::LookupUserMessage(char const*)
 T CUserMessages::Register(char const*, int)
 T CUserMessages::~CUserMessages()
 T CUtlBinaryBlock::CUtlBinaryBlock(CUtlBinaryBlock const&)
 T CUtlBinaryBlock::CUtlBinaryBlock(int, int)
 T CUtlBinaryBlock::SetLength(int)
 T CUtlBuffer::AddNullTermination()
 T CUtlBuffer::AssumeMemory(void*, int, int, int)
 T CUtlBuffer::CUtlBuffer(int, int, int)
 T CUtlBuffer::CUtlBuffer(void const*, int, int)
 T CUtlBuffer::CheckArbitraryPeekGet(int, int&)
 T CUtlBuffer::CheckGet(int)
 T CUtlBuffer::CheckPut(int)
 T CUtlBuffer::EatCPPComment()
 T CUtlBuffer::EatWhiteSpace()
 T CUtlBuffer::EnsureCapacity(int)
 T CUtlBuffer::Get(void*, int)
 T CUtlBuffer::GetDelimitedCharInternal(CUtlCharConversion*)
 T CUtlBuffer::GetDelimitedString(CUtlCharConversion*, char*, int)
 T CUtlBuffer::GetOverflow(int)
 T CUtlBuffer::GetStringInternal(char*, unsigned long)
 T CUtlBuffer::GetToken(char const*)
 T CUtlBuffer::ParseToken(char const*, char const*, char*, int)
 T CUtlBuffer::PeekDelimitedStringLength(CUtlCharConversion*, bool)
 T CUtlBuffer::PeekGet(int, int)
 T CUtlBuffer::PeekStringLength()
 T CUtlBuffer::PeekStringMatch(int, char const*, int)
 T CUtlBuffer::PeekWhiteSpace(int)
 T CUtlBuffer::Printf(char const*, ...)
 T CUtlBuffer::Put(void const*, int)
 T CUtlBuffer::PutOverflow(int)
 T CUtlBuffer::PutString(char const*)
 T CUtlBuffer::Scanf(char const*, ...)
 T CUtlBuffer::SeekGet(CUtlBuffer::SeekType_t, int)
 T CUtlBuffer::SeekPut(CUtlBuffer::SeekType_t, int)
 T CUtlBuffer::SetBufferType(bool, bool)
 T CUtlBuffer::SetExternalBuffer(void*, int, int, int)
 T CUtlBuffer::VaScanf(char const*, char*)
 T CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)
 T CUtlCStringConversion::FindConversion(char const*, int*)
 T CUtlCachedFileData<CModelSoundsCache>::CUtlCachedFileData(char const*, int, unsigned int (*)(), UtlCachedFileDataType_t, bool, bool, bool)
 T CUtlCachedFileData<CModelSoundsCache>::CheckDiskInfo(bool, long)
 T CUtlCachedFileData<CModelSoundsCache>::FileNameHandleLessFunc(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&, CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&)
 T CUtlCachedFileData<CModelSoundsCache>::Get(char const*)
 T CUtlCachedFileData<CModelSoundsCache>::GetIndex(char const*)
 T CUtlCachedFileData<CModelSoundsCache>::Init()
 T CUtlCachedFileData<CModelSoundsCache>::InitLargeBuffer(void*&, bool&)
 T CUtlCachedFileData<CModelSoundsCache>::InitSmallBuffer(void*&, int, bool&)
 T CUtlCachedFileData<CModelSoundsCache>::Save()
 T CUtlCachedFileData<CModelSoundsCache>::SaveManifest()
 T CUtlCachedFileData<CModelSoundsCache>::Shutdown()
 T CUtlCachedFileData<CModelSoundsCache>::~CUtlCachedFileData()
 T CUtlCharConversion::FindConversion(char const*, int*)
 T CUtlDict<BasicGameStatsRecord_t, unsigned short>::~CUtlDict()
 T CUtlDict<CActivityRemapCache, int>::~CUtlDict()
 T CUtlDict<CDecalEmitterSystem::DecalEntry, int>::~CUtlDict()
 T CUtlDict<CInstancedResponseSystem*, int>::~CUtlDict()
 T CUtlDict<CResponseSystem::Enumeration, short>::~CUtlDict()
 T CUtlDict<CUserMessage*, int>::~CUtlDict()
 T CUtlDict<ConceptHistory_t, int>::RemoveAt(int)
 T CUtlDict<ConceptHistory_t, int>::~CUtlDict()
 T CUtlDict<Criteria, short>::~CUtlDict()
 T CUtlDict<EventGroup, int>::~CUtlDict()
 T CUtlDict<FileWeaponInfo_t*, unsigned short>::~CUtlDict()
 T CUtlDict<IEntityFactory*, unsigned short>::~CUtlDict()
 T CUtlDict<ResponseGroup, short>::~CUtlDict()
 T CUtlDict<Rule, short>::~CUtlDict()
 T CUtlDict<float, int>::~CUtlDict()
 T CUtlDict<int, int>::~CUtlDict()
 T CUtlDict<int, unsigned short>::~CUtlDict()
 T CUtlFixedLinkedList<CInfoCameraLink*>::~CUtlFixedLinkedList()
 T CUtlHash<CEntityDataInstantiator<CWatcherList>::HashEntry, bool (*)(CEntityDataInstantiator<CWatcherList>::HashEntry const&, CEntityDataInstantiator<CWatcherList>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<CWatcherList>::HashEntry const&)>::Insert(CEntityDataInstantiator<CWatcherList>::HashEntry const&)
 T CUtlHash<CEntityDataInstantiator<CWatcherList>::HashEntry, bool (*)(CEntityDataInstantiator<CWatcherList>::HashEntry const&, CEntityDataInstantiator<CWatcherList>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<CWatcherList>::HashEntry const&)>::~CUtlHash()
 T CUtlHash<CEntityDataInstantiator<ModelScale>::HashEntry, bool (*)(CEntityDataInstantiator<ModelScale>::HashEntry const&, CEntityDataInstantiator<ModelScale>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<ModelScale>::HashEntry const&)>::Insert(CEntityDataInstantiator<ModelScale>::HashEntry const&)
 T CUtlHash<CEntityDataInstantiator<ModelScale>::HashEntry, bool (*)(CEntityDataInstantiator<ModelScale>::HashEntry const&, CEntityDataInstantiator<ModelScale>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<ModelScale>::HashEntry const&)>::~CUtlHash()
 T CUtlHash<CEntityDataInstantiator<StepSimulationData>::HashEntry, bool (*)(CEntityDataInstantiator<StepSimulationData>::HashEntry const&, CEntityDataInstantiator<StepSimulationData>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<StepSimulationData>::HashEntry const&)>::Insert(CEntityDataInstantiator<StepSimulationData>::HashEntry const&)
 T CUtlHash<CEntityDataInstantiator<StepSimulationData>::HashEntry, bool (*)(CEntityDataInstantiator<StepSimulationData>::HashEntry const&, CEntityDataInstantiator<StepSimulationData>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<StepSimulationData>::HashEntry const&)>::~CUtlHash()
 T CUtlHash<CEntityDataInstantiator<groundlink_t>::HashEntry, bool (*)(CEntityDataInstantiator<groundlink_t>::HashEntry const&, CEntityDataInstantiator<groundlink_t>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<groundlink_t>::HashEntry const&)>::Insert(CEntityDataInstantiator<groundlink_t>::HashEntry const&)
 T CUtlHash<CEntityDataInstantiator<groundlink_t>::HashEntry, bool (*)(CEntityDataInstantiator<groundlink_t>::HashEntry const&, CEntityDataInstantiator<groundlink_t>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<groundlink_t>::HashEntry const&)>::~CUtlHash()
 T CUtlHash<CEntityDataInstantiator<physicspushlist_t>::HashEntry, bool (*)(CEntityDataInstantiator<physicspushlist_t>::HashEntry const&, CEntityDataInstantiator<physicspushlist_t>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<physicspushlist_t>::HashEntry const&)>::Insert(CEntityDataInstantiator<physicspushlist_t>::HashEntry const&)
 T CUtlHash<CEntityDataInstantiator<physicspushlist_t>::HashEntry, bool (*)(CEntityDataInstantiator<physicspushlist_t>::HashEntry const&, CEntityDataInstantiator<physicspushlist_t>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<physicspushlist_t>::HashEntry const&)>::~CUtlHash()
 T CUtlHash<CEntityDataInstantiator<touchlink_t>::HashEntry, bool (*)(CEntityDataInstantiator<touchlink_t>::HashEntry const&, CEntityDataInstantiator<touchlink_t>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<touchlink_t>::HashEntry const&)>::Insert(CEntityDataInstantiator<touchlink_t>::HashEntry const&)
 T CUtlHash<CEntityDataInstantiator<touchlink_t>::HashEntry, bool (*)(CEntityDataInstantiator<touchlink_t>::HashEntry const&, CEntityDataInstantiator<touchlink_t>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<touchlink_t>::HashEntry const&)>::~CUtlHash()
 T CUtlHash<CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry, bool (*)(CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry const&, CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry const&)>::Insert(CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry const&)
 T CUtlHash<CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry, bool (*)(CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry const&, CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry const&)>::~CUtlHash()
 T CUtlHash<CGameSaveRestoreInfo::CHashElement, CGameSaveRestoreInfo::CHashFuncs, CGameSaveRestoreInfo::CHashFuncs>::Insert(CGameSaveRestoreInfo::CHashElement const&)
 T CUtlHash<CStudioHdr::CActivityToSequenceMapping::HashValueType, CStudioHdr::CActivityToSequenceMapping::HashValueType::HashFuncs, CStudioHdr::CActivityToSequenceMapping::HashValueType::HashFuncs>::Insert(CStudioHdr::CActivityToSequenceMapping::HashValueType const&)
 T CUtlHash<CStudioHdr::CActivityToSequenceMapping::HashValueType, CStudioHdr::CActivityToSequenceMapping::HashValueType::HashFuncs, CStudioHdr::CActivityToSequenceMapping::HashValueType::HashFuncs>::~CUtlHash()
 T CUtlHashtable<CBaseEntityModelLoadProxy, empty_t, PointerHashFunctor, PointerEqualFunctor, CBaseEntity*>::BumpEntry(unsigned int)
 T CUtlHashtable<CBaseEntityModelLoadProxy, empty_t, PointerHashFunctor, PointerEqualFunctor, CBaseEntity*>::DoInsertUnconstructed(unsigned int, bool)
 T CUtlHashtable<CBaseEntityModelLoadProxy, empty_t, PointerHashFunctor, PointerEqualFunctor, CBaseEntity*>::DoRealloc(int)
 T CUtlHashtable<CBaseEntityModelLoadProxy, empty_t, PointerHashFunctor, PointerEqualFunctor, CBaseEntity*>::RemoveAll()
 T CUtlHashtable<CBaseEntityModelLoadProxy, empty_t, PointerHashFunctor, PointerEqualFunctor, CBaseEntity*>::~CUtlHashtable()
 T CUtlHashtable<CUtlConstStringBase<char>, empty_t, DefaultHashFunctor<CUtlConstStringBase<char> >, DefaultEqualFunctor<CUtlConstStringBase<char> >, char const*>::BumpEntry(unsigned int)
 T CUtlHashtable<CUtlConstStringBase<char>, empty_t, DefaultHashFunctor<CUtlConstStringBase<char> >, DefaultEqualFunctor<CUtlConstStringBase<char> >, char const*>::DoInsertUnconstructed(unsigned int, bool)
 T CUtlHashtable<CUtlConstStringBase<char>, empty_t, DefaultHashFunctor<CUtlConstStringBase<char> >, DefaultEqualFunctor<CUtlConstStringBase<char> >, char const*>::DoRealloc(int)
 T CUtlLinkedList<AI_Follower_t, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<AI_Follower_t, int> > >::AllocInternal(bool)
 T CUtlLinkedList<AI_Follower_t, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<AI_Follower_t, int> > >::RemoveAll()
 T CUtlLinkedList<AI_Follower_t, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<AI_Follower_t, int> > >::Unlink(int)
 T CUtlLinkedList<CBaseCombatWeapon*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CBaseCombatWeapon*, unsigned short>, unsigned short> >::AllocInternal(bool)
 T CUtlLinkedList<CBaseCombatWeapon*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CBaseCombatWeapon*, unsigned short>, unsigned short> >::LinkBefore(unsigned short, unsigned short)
 T CUtlLinkedList<CBaseCombatWeapon*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CBaseCombatWeapon*, unsigned short>, unsigned short> >::Purge()
 T CUtlLinkedList<CFuncAreaPortalBase*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CFuncAreaPortalBase*, unsigned short>, unsigned short> >::AllocInternal(bool)
 T CUtlLinkedList<CFuncAreaPortalBase*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CFuncAreaPortalBase*, unsigned short>, unsigned short> >::LinkBefore(unsigned short, unsigned short)
 T CUtlLinkedList<CFuncAreaPortalBase*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CFuncAreaPortalBase*, unsigned short>, unsigned short> >::~CUtlLinkedList()
 T CUtlLinkedList<CHandle<CBaseAnimating>, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CHandle<CBaseAnimating>, unsigned short>, unsigned short> >::AllocInternal(bool)
 T CUtlLinkedList<CHandle<CBaseAnimating>, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CHandle<CBaseAnimating>, unsigned short>, unsigned short> >::LinkBefore(unsigned short, unsigned short)
 T CUtlLinkedList<CHandle<CBaseAnimating>, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CHandle<CBaseAnimating>, unsigned short>, unsigned short> >::Purge()
 T CUtlLinkedList<CHandle<CBaseEntity>, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CHandle<CBaseEntity>, unsigned short>, unsigned short> >::AllocInternal(bool)
 T CUtlLinkedList<CHandle<CBaseEntity>, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CHandle<CBaseEntity>, unsigned short>, unsigned short> >::FindAndRemove(CHandle<CBaseEntity> const&)
 T CUtlLinkedList<CHandle<CBaseEntity>, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CHandle<CBaseEntity>, unsigned short>, unsigned short> >::LinkBefore(unsigned short, unsigned short)
 T CUtlLinkedList<CHandle<CBaseEntity>, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CHandle<CBaseEntity>, unsigned short>, unsigned short> >::Purge()
 T CUtlLinkedList<CInfoCameraLink*, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<CInfoCameraLink*, int> > >::AllocInternal(bool)
 T CUtlLinkedList<CInfoCameraLink*, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<CInfoCameraLink*, int> > >::RemoveAll()
 T CUtlLinkedList<CInfoCameraLink*, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<CInfoCameraLink*, int> > >::Unlink(int)
 T CUtlLinkedList<CMapEntityRef, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CMapEntityRef, unsigned short>, unsigned short> >::AllocInternal(bool)
 T CUtlLinkedList<CMapEntityRef, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CMapEntityRef, unsigned short>, unsigned short> >::LinkBefore(unsigned short, unsigned short)
 T CUtlLinkedList<CMapEntityRef, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CMapEntityRef, unsigned short>, unsigned short> >::Purge()
 T CUtlLinkedList<CMapEntityRef, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CMapEntityRef, unsigned short>, unsigned short> >::~CUtlLinkedList()
 T CUtlLinkedList<CPlayerCmdInfo, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CPlayerCmdInfo, unsigned short>, unsigned short> >::AllocInternal(bool)
 T CUtlLinkedList<CPlayerCmdInfo, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CPlayerCmdInfo, unsigned short>, unsigned short> >::LinkBefore(unsigned short, unsigned short)
 T CUtlLinkedList<CPlayerSimInfo, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CPlayerSimInfo, unsigned short>, unsigned short> >::AllocInternal(bool)
 T CUtlLinkedList<CPlayerSimInfo, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CPlayerSimInfo, unsigned short>, unsigned short> >::LinkBefore(unsigned short, unsigned short)
 T CUtlLinkedList<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short>, unsigned short> >::AllocInternal(bool)
 T CUtlLinkedList<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short>, unsigned short> >::LinkBefore(unsigned short, unsigned short)
 T CUtlLinkedList<CUtlMultiList<watcher_t, unsigned short>::List_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<watcher_t, unsigned short>::List_t, unsigned short>, unsigned short> >::AllocInternal(bool)
 T CUtlLinkedList<CUtlMultiList<watcher_t, unsigned short>::List_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<watcher_t, unsigned short>::List_t, unsigned short>, unsigned short> >::LinkBefore(unsigned short, unsigned short)
 T CUtlLinkedList<LagRecord, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<LagRecord, int> > >::AllocInternal(bool)
 T CUtlLinkedList<LagRecord, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<LagRecord, int> > >::LinkAfter(int, int)
 T CUtlLinkedList<LagRecord, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<LagRecord, int> > >::RemoveAll()
 T CUtlLinkedList<LagRecord, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<LagRecord, int> > >::Unlink(int)
 T CUtlMap<char const*, CActivityRemapCache, int>::Find(char const* const&) const
 T CUtlMap<char const*, CActivityRemapCache, int>::Insert(char const* const&, CActivityRemapCache const&)
 T CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Find(char const* const&) const
 T CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Insert(char const* const&, CDecalEmitterSystem::DecalEntry const&)
 T CUtlMap<char const*, ConceptHistory_t, int>::Find(char const* const&) const
 T CUtlMap<char const*, ConceptHistory_t, int>::Insert(char const* const&, ConceptHistory_t const&)
 T CUtlMap<char const*, Criteria, short>::Find(char const* const&) const
 T CUtlMap<char const*, Criteria, short>::Insert(char const* const&, Criteria const&)
 T CUtlMap<char const*, EventGroup, int>::Find(char const* const&) const
 T CUtlMap<char const*, EventGroup, int>::Insert(char const* const&, EventGroup const&)
 T CUtlMap<char const*, ResponseGroup, short>::Find(char const* const&) const
 T CUtlMap<char const*, ResponseGroup, short>::Insert(char const* const&, ResponseGroup const&)
 T CUtlMap<int, CAIHintVector, unsigned short>::Find(int const&) const
 T CUtlMap<int, CAIHintVector, unsigned short>::Insert(int const&)
 T CUtlMap<int, CAIHintVector, unsigned short>::~CUtlMap()
 T CUtlMapDataOps<CUtlMap<string_t, CSimpleSimTimer, char>, 2, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlMapDataOps<CUtlMap<string_t, CSimpleSimTimer, char>, 2, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlMapDataOps<CUtlMap<string_t, CSimpleSimTimer, char>, 2, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlMapDataOps<CUtlMap<string_t, CSimpleSimTimer, char>, 2, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlMemory<AIRebalanceInfo_t, int>::Grow(int)
 T CUtlMemory<AISquadEnemyInfo_t, int>::Grow(int)
 T CUtlMemory<AI_EnemyInfo_t*, int>::Grow(int)
 T CUtlMemory<AI_FollowGroup_t*, int>::Grow(int)
 T CUtlMemory<AI_MoveSuggestion_t, int>::Grow(int)
 T CUtlMemory<AI_NearNode_t, int>::Grow(int)
 T CUtlMemory<AI_Response*, int>::Grow(int)
 T CUtlMemory<AI_Waypoint_t, int>::Grow(int)
 T CUtlMemory<Activity, int>::Grow(int)
 T CUtlMemory<AppSystemInfo_t, int>::Grow(int)
 T CUtlMemory<CAI_BaseNPC*, int>::Grow(int)
 T CUtlMemory<CAI_BehaviorBase*, int>::Grow(int)
 T CUtlMemory<CAI_BlendedMotor::AI_Movementscript_t, int>::Grow(int)
 T CUtlMemory<CAI_Hint*, int>::Grow(int)
 T CUtlMemory<CAI_InterestTarget_t, int>::Grow(int)
 T CUtlMemory<CAI_Link*, int>::Grow(int)
 T CUtlMemory<CAI_PlaneSolver::CircleObstacles_t, int>::Grow(int)
 T CUtlMemory<CAI_ScriptConditionsElement, int>::Grow(int)
 T CUtlMemory<CAI_StandoffBehavior::BattleLine_t, int>::Grow(int)
 T CUtlMemory<CActivityRemap, int>::Grow(int)
 T CUtlMemory<CAnimationLayer, int>::Grow(int)
 T CUtlMemory<CBaseEntity*, int>::Grow(int)
 T CUtlMemory<CBasePlayer*, int>::Grow(int)
 T CUtlMemory<CBaseServerVehicle::entryanim_t, int>::Grow(int)
 T CUtlMemory<CBaseServerVehicle::exitanim_t, int>::Grow(int)
 T CUtlMemory<CChoreoActor*, int>::Grow(int)
 T CUtlMemory<CChoreoChannel*, int>::Grow(int)
 T CUtlMemory<CChoreoEvent*, int>::Grow(int)
 T CUtlMemory<CChoreoScene*, int>::Grow(int)
 T CUtlMemory<CCommandContext, int>::Grow(int)
 T CUtlMemory<CCompanionActivityRemap, int>::Grow(int)
 T CUtlMemory<CConstraintFloodEntry, int>::Grow(int)
 T CUtlMemory<CDecalEmitterSystem::DecalListEntry, int>::Grow(int)
 T CUtlMemory<CDmxAttribute*, int>::Grow(int)
 T CUtlMemory<CDmxElement*, int>::Grow(int)
 T CUtlMemory<CDmxElementDictionary::AttributeInfo_t, int>::Grow(int)
 T CUtlMemory<CDmxElementDictionary::DictInfo_t, int>::Grow(int)
 T CUtlMemory<CEffectScriptElement, int>::Grow(int)
 T CUtlMemory<CEntityDataInstantiator<CWatcherList>::HashEntry, int>::Grow(int)
 T CUtlMemory<CEntityDataInstantiator<ModelScale>::HashEntry, int>::Grow(int)
 T CUtlMemory<CEntityDataInstantiator<StepSimulationData>::HashEntry, int>::Grow(int)
 T CUtlMemory<CEntityDataInstantiator<groundlink_t>::HashEntry, int>::Grow(int)
 T CUtlMemory<CEntityDataInstantiator<physicspushlist_t>::HashEntry, int>::Grow(int)
 T CUtlMemory<CEntityDataInstantiator<touchlink_t>::HashEntry, int>::Grow(int)
 T CUtlMemory<CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry, int>::Grow(int)
 T CUtlMemory<CEntityGroundContact, int>::Grow(int)
 T CUtlMemory<CEnvSoundscape*, int>::Grow(int)
 T CUtlMemory<CEventAbsoluteTag, int>::Grow(int)
 T CUtlMemory<CEventRegister*, int>::Grow(int)
 T CUtlMemory<CEventRelativeTag, int>::Grow(int)
 T CUtlMemory<CExpressionSample, int>::Grow(int)
 T CUtlMemory<CFish*, int>::Grow(int)
 T CUtlMemory<CFlexAnimationTrack*, int>::Grow(int)
 T CUtlMemory<CFlexSceneFile*, int>::Grow(int)
 T CUtlMemory<CFlexTimingTag, int>::Grow(int)
 T CUtlMemory<CFuncLadder*, int>::Grow(int)
 T CUtlMemory<CFunctor*, int>::Grow(int)
 T CUtlMemory<CGameSaveRestoreInfo::CHashElement, int>::Grow(int)
 T CUtlMemory<CGameWeaponManager*, int>::Grow(int)
 T CUtlMemory<CHandle<CAI_BaseNPC>, int>::Grow(int)
 T CUtlMemory<CHandle<CAI_DynamicLink>, int>::Grow(int)
 T CUtlMemory<CHandle<CAntlionRepellant>, int>::Grow(int)
 T CUtlMemory<CHandle<CAntlionTemplateMaker>, int>::Grow(int)
 T CUtlMemory<CHandle<CAvoidBox>, int>::Grow(int)
 T CUtlMemory<CHandle<CAvoidSphere>, int>::Grow(int)
 T CUtlMemory<CHandle<CBaseCombatWeapon>, int>::Grow(int)
 T CUtlMemory<CHandle<CBaseEntity>, int>::Grow(int)
 T CUtlMemory<CHandle<CBaseFlex>, int>::Grow(int)
 T CUtlMemory<CHandle<CBasePlayer>, int>::Grow(int)
 T CUtlMemory<CHandle<CBasePropDoor>, int>::Grow(int)
 T CUtlMemory<CHandle<CBombSuppressor>, int>::Grow(int)
 T CUtlMemory<CHandle<CEnvMicrophone>, int>::Grow(int)
 T CUtlMemory<CHandle<CEnvPlayerSurfaceTrigger>, int>::Grow(int)
 T CUtlMemory<CHandle<CEnvSpark>, int>::Grow(int)
 T CUtlMemory<CHandle<CFish>, int>::Grow(int)
 T CUtlMemory<CHandle<CInfoAPCMissileHint>, int>::Grow(int)
 T CUtlMemory<CHandle<CInfoLadderDismount>, int>::Grow(int)
 T CUtlMemory<CHandle<CMessageEntity>, int>::Grow(int)
 T CUtlMemory<CHandle<CNPC_Antlion>, int>::Grow(int)
 T CUtlMemory<CHandle<CPointTemplate>, int>::Grow(int)
 T CUtlMemory<CHandle<CSceneEntity>, int>::Grow(int)
 T CUtlMemory<CHandle<CSceneListManager>, int>::Grow(int)
 T CUtlMemory<CHandle<CTeamControlPoint>, int>::Grow(int)
 T CUtlMemory<CHandle<CTeamControlPointMaster>, int>::Grow(int)
 T CUtlMemory<CHandle<CTriggerMultiple>, int>::Grow(int)
 T CUtlMemory<CHandle<CVGuiScreen>, int>::Grow(int)
 T CUtlMemory<CHintCriteria::hintZone_t, int>::Grow(int)
 T CUtlMemory<CHintMessage*, int>::Grow(int)
 T CUtlMemory<CHintMessageTimers::hintmessagetime_t*, int>::Grow(int)
 T CUtlMemory<CModelSoundsCache*, int>::Grow(int)
 T CUtlMemory<CMoveHelperServer::touchlist_t, int>::Grow(int)
 T CUtlMemory<CNPC_Bullseye*, int>::Grow(int)
 T CUtlMemory<CNPC_RollerMine*, int>::Grow(int)
 T CUtlMemory<CParticleOperatorInstance*, int>::Grow(int)
 T CUtlMemory<CParticleSystemDefinition*, int>::Grow(int)
 T CUtlMemory<CPassengerInfo, int>::Grow(int)
 T CUtlMemory<CPassengerRole, int>::Grow(int)
 T CUtlMemory<CPassengerSeat, int>::Grow(int)
 T CUtlMemory<CPassengerSeatTransition, int>::Grow(int)
 T CUtlMemory<CPhysSaveRestoreBlockHandler::QueuedItem_t, int>::Grow(int)
 T CUtlMemory<CPhysicsPushedEntities::PhysicsPushedInfo_t, int>::Grow(int)
 T CUtlMemory<CPhysicsPushedEntities::PhysicsPusherInfo_t, int>::Grow(int)
 T CUtlMemory<CPropData::propdata_breakablechunk_t, int>::Grow(int)
 T CUtlMemory<CResponseSystem::ScriptEntry, int>::Grow(int)
 T CUtlMemory<CSceneEventInfo, int>::Grow(int)
 T CUtlMemory<CSceneManager::CRestoreSceneSound, int>::Grow(int)
 T CUtlMemory<CSoundPatch*, int>::Grow(int)
 T CUtlMemory<CStressEntityReg*, int>::Grow(int)
 T CUtlMemory<CStudioHdr::CActivityToSequenceMapping::HashValueType, int>::Grow(int)
 T CUtlMemory<CTacticalMission*, int>::Grow(int)
 T CUtlMemory<CTeam*, int>::Grow(int)
 T CUtlMemory<CTeamControlPoint::perteamdata_t, int>::Grow(int)
 T CUtlMemory<CTeamControlPointRound*, int>::Grow(int)
 T CUtlMemory<CTeamSpawnPoint*, int>::Grow(int)
 T CUtlMemory<CTriggerAreaCapture::blockers_t, int>::Grow(int)
 T CUtlMemory<CTriggerAreaCapture::perteamdata_t, int>::Grow(int)
 T CUtlMemory<CUserCmd, int>::Grow(int)
 T CUtlMemory<CUtlBinaryBlock, int>::Grow(int)
 T CUtlMemory<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::ListElem_t, int>::Grow(int)
 T CUtlMemory<CUtlMultiList<watcher_t, unsigned short>::ListElem_t, int>::Grow(int)
 T CUtlMemory<CUtlString, int>::Grow(int)
 T CUtlMemory<CUtlSymbolTable::StringPool_t*, int>::Grow(int)
 T CUtlMemory<CUtlVector<CEntityDataInstantiator<CWatcherList>::HashEntry, CUtlMemory<CEntityDataInstantiator<CWatcherList>::HashEntry, int> >, int>::Grow(int)
 T CUtlMemory<CUtlVector<CEntityDataInstantiator<ModelScale>::HashEntry, CUtlMemory<CEntityDataInstantiator<ModelScale>::HashEntry, int> >, int>::Grow(int)
 T CUtlMemory<CUtlVector<CEntityDataInstantiator<StepSimulationData>::HashEntry, CUtlMemory<CEntityDataInstantiator<StepSimulationData>::HashEntry, int> >, int>::Grow(int)
 T CUtlMemory<CUtlVector<CEntityDataInstantiator<groundlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<groundlink_t>::HashEntry, int> >, int>::Grow(int)
 T CUtlMemory<CUtlVector<CEntityDataInstantiator<physicspushlist_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<physicspushlist_t>::HashEntry, int> >, int>::Grow(int)
 T CUtlMemory<CUtlVector<CEntityDataInstantiator<touchlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<touchlink_t>::HashEntry, int> >, int>::Grow(int)
 T CUtlMemory<CUtlVector<CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry, int> >, int>::Grow(int)
 T CUtlMemory<CUtlVector<CGameSaveRestoreInfo::CHashElement, CUtlMemory<CGameSaveRestoreInfo::CHashElement, int> >, int>::Grow(int)
 T CUtlMemory<CUtlVector<CStudioHdr::CActivityToSequenceMapping::HashValueType, CUtlMemory<CStudioHdr::CActivityToSequenceMapping::HashValueType, int> >, int>::Grow(int)
 T CUtlMemory<CUtlVector<VoiceCommandMenuItem_t, CUtlMemory<VoiceCommandMenuItem_t, int> >, int>::Grow(int)
 T CUtlMemory<CUtlVector<ikcontextikrule_t, CUtlMemory<ikcontextikrule_t, int> >, int>::Grow(int)
 T CUtlMemory<CVarBitVec, int>::Grow(int)
 T CUtlMemory<Color, int>::Grow(int)
 T CUtlMemory<IBaseProjectileAutoList*, int>::Grow(int)
 T CUtlMemory<IEntityListener*, int>::Grow(int)
 T CUtlMemory<IGameSystem*, int>::Grow(int)
 T CUtlMemory<IGameSystemPerFrame*, int>::Grow(int)
 T CUtlMemory<IHandleEntity*, int>::Grow(int)
 T CUtlMemory<IParticleOperatorDefinition*, int>::Grow(int)
 T CUtlMemory<IPhysicsPropAutoList*, int>::Grow(int)
 T CUtlMemory<ISaveRestoreBlockHandler*, int>::Grow(int)
 T CUtlMemory<IServerNetworkable*, int>::Grow(int)
 T CUtlMemory<ITFTeamTrainWatcher*, int>::Grow(int)
 T CUtlMemory<ITriggerAreaCaptureAutoList*, int>::Grow(int)
 T CUtlMemory<ITriggerHurtAutoList*, int>::Grow(int)
 T CUtlMemory<KeyValues*, int>::Grow(int)
 T CUtlMemory<ParticleChildrenInfo_t, int>::Grow(int)
 T CUtlMemory<QAngle, int>::Grow(int)
 T CUtlMemory<Quaternion, int>::Grow(int)
 T CUtlMemory<Relationship_t, int>::Grow(int)
 T CUtlMemory<Response, int>::Grow(int)
 T CUtlMemory<ResponseContext_t, int>::Grow(int)
 T CUtlMemory<SaveRestoreBlockHeader_t, int>::Grow(int)
 T CUtlMemory<ScriptedNPCInteraction_t, int>::Grow(int)
 T CUtlMemory<SlideKeywordList_t*, int>::Grow(int)
 T CUtlMemory<SoundCommand_t*, int>::Grow(int)
 T CUtlMemory<TeleportListEntry_t, int>::Grow(int)
 T CUtlMemory<TemplateEntityData_t*, int>::Grow(int)
 T CUtlMemory<UniqueId_t, int>::Grow(int)
 T CUtlMemory<UnreachableEnt_t, int>::Grow(int)
 T CUtlMemory<UtlLinkedListElem_t<CBaseCombatWeapon*, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlLinkedListElem_t<CFuncAreaPortalBase*, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlLinkedListElem_t<CHandle<CBaseAnimating>, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlLinkedListElem_t<CHandle<CBaseEntity>, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlLinkedListElem_t<CMapEntityRef, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlLinkedListElem_t<CPlayerCmdInfo, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlLinkedListElem_t<CPlayerSimInfo, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<watcher_t, unsigned short>::List_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CAI_BaseNPC*, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CBaseEntity*, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CBaseFlex::FS_LocalToGlobal_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CBreakModelsPrecached::breakable_precache_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CChoreoScene::ActiveList, int>, int>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CHLTVGameEvent, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CSceneEntity::SpeakEventSound_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char>, unsigned char>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int>, int>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int>, int>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int>, int>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short>, short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUserMessage*, int>::Node_t, int>, int>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int>, int>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Criteria, short>::Node_t, short>, short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EventGroup, int>::Node_t, int>, int>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ResponseGroup, short>::Node_t, short>, short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Rule, short>::Node_t, short>, short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, float, int>::Node_t, int>, int>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CAIHintVector, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, int, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char>, char>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, Activity, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlString, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<NearbyDismount_t, int>, int>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<ThinkSync, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<VisibilityCacheEntry_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<int, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<VMatrix, int>::Grow(int)
 T CUtlMemory<Vector, int>::Grow(int)
 T CUtlMemory<Vector2D, int>::Grow(int)
 T CUtlMemory<Vector4D, int>::Grow(int)
 T CUtlMemory<VoiceCommandMenuItem_t, int>::Grow(int)
 T CUtlMemory<activitylist_t, int>::Grow(int)
 T CUtlMemory<bool, int>::Grow(int)
 T CUtlMemory<breakmodel_t, int>::Grow(int)
 T CUtlMemory<busyanim_t, int>::Grow(int)
 T CUtlMemory<busysafezone_t, int>::Grow(int)
 T CUtlMemory<char*, int>::Grow(int)
 T CUtlMemory<clusterSoundscapeList_t, int>::Grow(int)
 T CUtlMemory<constraint_anchor_t, int>::Grow(int)
 T CUtlMemory<damageevent_t, int>::Grow(int)
 T CUtlMemory<entitynotify_t, int>::Grow(int)
 T CUtlMemory<eventlist_t, int>::Grow(int)
 T CUtlMemory<float, int>::Grow(int)
 T CUtlMemory<fluidevent_t, int>::Grow(int)
 T CUtlMemory<globalentity_t, int>::Grow(int)
 T CUtlMemory<ikcontextikrule_t, int>::Grow(int)
 T CUtlMemory<inflictorstate_t, int>::Grow(int)
 T CUtlMemory<int, int>::Grow(int)
 T CUtlMemory<magnetted_objects_t, int>::Grow(int)
 T CUtlMemory<masscenteroverride_t, int>::Grow(int)
 T CUtlMemory<modifiedconvars_t, int>::Grow(int)
 T CUtlMemory<penetrateevent_t, int>::Grow(int)
 T CUtlMemory<physfollower_t, int>::Grow(int)
 T CUtlMemory<physicssound::breaksound_t, int>::Grow(int)
 T CUtlMemory<physicssound::impactsound_t, int>::Grow(int)
 T CUtlMemory<simthinkentry_t, int>::Grow(int)
 T CUtlMemory<string_t, int>::Grow(int)
 T CUtlMemory<studiohdr_t const*, int>::Grow(int)
 T CUtlMemory<template_t, int>::Grow(int)
 T CUtlMemory<thinkfunc_t, int>::Grow(int)
 T CUtlMemory<touchevent_t, int>::Grow(int)
 T CUtlMemory<unsigned char, int>::Grow(int)
 T CUtlMemory<unsigned long, int>::Grow(int)
 T CUtlMemory<unsigned short, int>::Grow(int)
 T CUtlMemory<vehicle_crashsound_t, int>::Grow(int)
 T CUtlMemory<vehicle_gear_t, int>::Grow(int)
 T CUtlMemory<vehiclescript_t, int>::Grow(int)
 T CUtlMemory<washentity_t, int>::Grow(int)
 T CUtlMemoryPool::AddNewBlob()
 T CUtlMemoryPool::Alloc(unsigned long)
 T CUtlMemoryPool::CUtlMemoryPool(int, int, int, char const*, int)
 T CUtlMemoryPool::Free(void*)
 T CUtlMemoryPool::~CUtlMemoryPool()
 T CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::Alloc()
 T CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::LinkBefore(unsigned short, unsigned short, unsigned short)
 T CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::~CUtlMultiList()
 T CUtlMultiList<watcher_t, unsigned short>::Alloc()
 T CUtlMultiList<watcher_t, unsigned short>::LinkBefore(unsigned short, unsigned short, unsigned short)
 T CUtlMultiList<watcher_t, unsigned short>::Remove(unsigned short, unsigned short)
 T CUtlMultiList<watcher_t, unsigned short>::~CUtlMultiList()
 T CUtlNoEscConversion::FindConversion(char const*, int*)
 T CUtlPriorityQueue<AI_NearNode_t>::Insert(AI_NearNode_t const&)
 T CUtlPriorityQueue<CEventRegister*>::Insert(CEventRegister* const&)
 T CUtlPriorityQueue<CEventRegister*>::RemoveAt(int)
 T CUtlPriorityQueue<CEventRegister*>::RemoveAtHead()
 T CUtlPriorityQueue<CPhysSaveRestoreBlockHandler::QueuedItem_t>::Insert(CPhysSaveRestoreBlockHandler::QueuedItem_t const&)
 T CUtlPriorityQueue<CPhysSaveRestoreBlockHandler::QueuedItem_t>::RemoveAtHead()
 T CUtlPriorityQueue<SoundCommand_t*>::Insert(SoundCommand_t* const&)
 T CUtlPriorityQueue<SoundCommand_t*>::RemoveAt(int)
 T CUtlPriorityQueue<SoundCommand_t*>::RemoveAtHead()
 T CUtlRBTree<AI_CriteriaSet::CritEntry_t, short, bool (*)(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&), CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short> >::CopyFrom(CUtlRBTree<AI_CriteriaSet::CritEntry_t, short, bool (*)(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&), CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short> > const&)
 T CUtlRBTree<AI_CriteriaSet::CritEntry_t, short, bool (*)(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&), CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short> >::Find(AI_CriteriaSet::CritEntry_t const&) const
 T CUtlRBTree<AI_CriteriaSet::CritEntry_t, short, bool (*)(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&), CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short> >::FindInsertionPosition(AI_CriteriaSet::CritEntry_t const&, short&, bool&)
 T CUtlRBTree<AI_CriteriaSet::CritEntry_t, short, bool (*)(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&), CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short> >::FirstInorder() const
 T CUtlRBTree<AI_CriteriaSet::CritEntry_t, short, bool (*)(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&), CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short> >::Insert(AI_CriteriaSet::CritEntry_t const&)
 T CUtlRBTree<AI_CriteriaSet::CritEntry_t, short, bool (*)(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&), CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short> >::InsertRebalance(short)
 T CUtlRBTree<AI_CriteriaSet::CritEntry_t, short, bool (*)(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&), CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short> >::IsLeftChild(short) const
 T CUtlRBTree<AI_CriteriaSet::CritEntry_t, short, bool (*)(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&), CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short> >::IsRightChild(short) const
 T CUtlRBTree<AI_CriteriaSet::CritEntry_t, short, bool (*)(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&), CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short> >::NewNode()
 T CUtlRBTree<AI_CriteriaSet::CritEntry_t, short, bool (*)(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&), CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short> >::NextInorder(short) const
 T CUtlRBTree<AI_CriteriaSet::CritEntry_t, short, bool (*)(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&), CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short> >::RemoveAll()
 T CUtlRBTree<AI_CriteriaSet::CritEntry_t, short, bool (*)(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&), CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short> >::RemoveRebalance(short)
 T CUtlRBTree<AI_CriteriaSet::CritEntry_t, short, bool (*)(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&), CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short> >::RotateLeft(short)
 T CUtlRBTree<AI_CriteriaSet::CritEntry_t, short, bool (*)(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&), CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short> >::RotateRight(short)
 T CUtlRBTree<AI_CriteriaSet::CritEntry_t, short, bool (*)(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&), CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short> >::Unlink(short)
 T CUtlRBTree<CAI_BaseNPC*, unsigned short, bool (*)(CAI_BaseNPC* const&, CAI_BaseNPC* const&), CUtlMemory<UtlRBTreeNode_t<CAI_BaseNPC*, unsigned short>, unsigned short> >::Find(CAI_BaseNPC* const&) const
 T CUtlRBTree<CAI_BaseNPC*, unsigned short, bool (*)(CAI_BaseNPC* const&, CAI_BaseNPC* const&), CUtlMemory<UtlRBTreeNode_t<CAI_BaseNPC*, unsigned short>, unsigned short> >::FindInsertionPosition(CAI_BaseNPC* const&, unsigned short&, bool&)
 T CUtlRBTree<CAI_BaseNPC*, unsigned short, bool (*)(CAI_BaseNPC* const&, CAI_BaseNPC* const&), CUtlMemory<UtlRBTreeNode_t<CAI_BaseNPC*, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CAI_BaseNPC*, unsigned short, bool (*)(CAI_BaseNPC* const&, CAI_BaseNPC* const&), CUtlMemory<UtlRBTreeNode_t<CAI_BaseNPC*, unsigned short>, unsigned short> >::Insert(CAI_BaseNPC* const&)
 T CUtlRBTree<CAI_BaseNPC*, unsigned short, bool (*)(CAI_BaseNPC* const&, CAI_BaseNPC* const&), CUtlMemory<UtlRBTreeNode_t<CAI_BaseNPC*, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CAI_BaseNPC*, unsigned short, bool (*)(CAI_BaseNPC* const&, CAI_BaseNPC* const&), CUtlMemory<UtlRBTreeNode_t<CAI_BaseNPC*, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CAI_BaseNPC*, unsigned short, bool (*)(CAI_BaseNPC* const&, CAI_BaseNPC* const&), CUtlMemory<UtlRBTreeNode_t<CAI_BaseNPC*, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CAI_BaseNPC*, unsigned short, bool (*)(CAI_BaseNPC* const&, CAI_BaseNPC* const&), CUtlMemory<UtlRBTreeNode_t<CAI_BaseNPC*, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CAI_BaseNPC*, unsigned short, bool (*)(CAI_BaseNPC* const&, CAI_BaseNPC* const&), CUtlMemory<UtlRBTreeNode_t<CAI_BaseNPC*, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CAI_BaseNPC*, unsigned short, bool (*)(CAI_BaseNPC* const&, CAI_BaseNPC* const&), CUtlMemory<UtlRBTreeNode_t<CAI_BaseNPC*, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CAI_BaseNPC*, unsigned short, bool (*)(CAI_BaseNPC* const&, CAI_BaseNPC* const&), CUtlMemory<UtlRBTreeNode_t<CAI_BaseNPC*, unsigned short>, unsigned short> >::RemoveRebalance(unsigned short)
 T CUtlRBTree<CAI_BaseNPC*, unsigned short, bool (*)(CAI_BaseNPC* const&, CAI_BaseNPC* const&), CUtlMemory<UtlRBTreeNode_t<CAI_BaseNPC*, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CAI_BaseNPC*, unsigned short, bool (*)(CAI_BaseNPC* const&, CAI_BaseNPC* const&), CUtlMemory<UtlRBTreeNode_t<CAI_BaseNPC*, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CAI_BaseNPC*, unsigned short, bool (*)(CAI_BaseNPC* const&, CAI_BaseNPC* const&), CUtlMemory<UtlRBTreeNode_t<CAI_BaseNPC*, unsigned short>, unsigned short> >::Unlink(unsigned short)
 T CUtlRBTree<CBaseEntity*, unsigned short, bool (*)(CBaseEntity* const&, CBaseEntity* const&), CUtlMemory<UtlRBTreeNode_t<CBaseEntity*, unsigned short>, unsigned short> >::Find(CBaseEntity* const&) const
 T CUtlRBTree<CBaseEntity*, unsigned short, bool (*)(CBaseEntity* const&, CBaseEntity* const&), CUtlMemory<UtlRBTreeNode_t<CBaseEntity*, unsigned short>, unsigned short> >::FindInsertionPosition(CBaseEntity* const&, unsigned short&, bool&)
 T CUtlRBTree<CBaseEntity*, unsigned short, bool (*)(CBaseEntity* const&, CBaseEntity* const&), CUtlMemory<UtlRBTreeNode_t<CBaseEntity*, unsigned short>, unsigned short> >::Insert(CBaseEntity* const&)
 T CUtlRBTree<CBaseEntity*, unsigned short, bool (*)(CBaseEntity* const&, CBaseEntity* const&), CUtlMemory<UtlRBTreeNode_t<CBaseEntity*, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CBaseEntity*, unsigned short, bool (*)(CBaseEntity* const&, CBaseEntity* const&), CUtlMemory<UtlRBTreeNode_t<CBaseEntity*, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CBaseEntity*, unsigned short, bool (*)(CBaseEntity* const&, CBaseEntity* const&), CUtlMemory<UtlRBTreeNode_t<CBaseEntity*, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CBaseEntity*, unsigned short, bool (*)(CBaseEntity* const&, CBaseEntity* const&), CUtlMemory<UtlRBTreeNode_t<CBaseEntity*, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CBaseEntity*, unsigned short, bool (*)(CBaseEntity* const&, CBaseEntity* const&), CUtlMemory<UtlRBTreeNode_t<CBaseEntity*, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CBaseEntity*, unsigned short, bool (*)(CBaseEntity* const&, CBaseEntity* const&), CUtlMemory<UtlRBTreeNode_t<CBaseEntity*, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CBaseEntity*, unsigned short, bool (*)(CBaseEntity* const&, CBaseEntity* const&), CUtlMemory<UtlRBTreeNode_t<CBaseEntity*, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CBaseFlex::FS_LocalToGlobal_t, unsigned short, bool (*)(CBaseFlex::FS_LocalToGlobal_t const&, CBaseFlex::FS_LocalToGlobal_t const&), CUtlMemory<UtlRBTreeNode_t<CBaseFlex::FS_LocalToGlobal_t, unsigned short>, unsigned short> >::Find(CBaseFlex::FS_LocalToGlobal_t const&) const
 T CUtlRBTree<CBaseFlex::FS_LocalToGlobal_t, unsigned short, bool (*)(CBaseFlex::FS_LocalToGlobal_t const&, CBaseFlex::FS_LocalToGlobal_t const&), CUtlMemory<UtlRBTreeNode_t<CBaseFlex::FS_LocalToGlobal_t, unsigned short>, unsigned short> >::FindInsertionPosition(CBaseFlex::FS_LocalToGlobal_t const&, unsigned short&, bool&)
 T CUtlRBTree<CBaseFlex::FS_LocalToGlobal_t, unsigned short, bool (*)(CBaseFlex::FS_LocalToGlobal_t const&, CBaseFlex::FS_LocalToGlobal_t const&), CUtlMemory<UtlRBTreeNode_t<CBaseFlex::FS_LocalToGlobal_t, unsigned short>, unsigned short> >::Insert(CBaseFlex::FS_LocalToGlobal_t const&)
 T CUtlRBTree<CBaseFlex::FS_LocalToGlobal_t, unsigned short, bool (*)(CBaseFlex::FS_LocalToGlobal_t const&, CBaseFlex::FS_LocalToGlobal_t const&), CUtlMemory<UtlRBTreeNode_t<CBaseFlex::FS_LocalToGlobal_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CBaseFlex::FS_LocalToGlobal_t, unsigned short, bool (*)(CBaseFlex::FS_LocalToGlobal_t const&, CBaseFlex::FS_LocalToGlobal_t const&), CUtlMemory<UtlRBTreeNode_t<CBaseFlex::FS_LocalToGlobal_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CBaseFlex::FS_LocalToGlobal_t, unsigned short, bool (*)(CBaseFlex::FS_LocalToGlobal_t const&, CBaseFlex::FS_LocalToGlobal_t const&), CUtlMemory<UtlRBTreeNode_t<CBaseFlex::FS_LocalToGlobal_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CBaseFlex::FS_LocalToGlobal_t, unsigned short, bool (*)(CBaseFlex::FS_LocalToGlobal_t const&, CBaseFlex::FS_LocalToGlobal_t const&), CUtlMemory<UtlRBTreeNode_t<CBaseFlex::FS_LocalToGlobal_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CBaseFlex::FS_LocalToGlobal_t, unsigned short, bool (*)(CBaseFlex::FS_LocalToGlobal_t const&, CBaseFlex::FS_LocalToGlobal_t const&), CUtlMemory<UtlRBTreeNode_t<CBaseFlex::FS_LocalToGlobal_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CBaseFlex::FS_LocalToGlobal_t, unsigned short, bool (*)(CBaseFlex::FS_LocalToGlobal_t const&, CBaseFlex::FS_LocalToGlobal_t const&), CUtlMemory<UtlRBTreeNode_t<CBaseFlex::FS_LocalToGlobal_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CBaseFlex::FS_LocalToGlobal_t, unsigned short, bool (*)(CBaseFlex::FS_LocalToGlobal_t const&, CBaseFlex::FS_LocalToGlobal_t const&), CUtlMemory<UtlRBTreeNode_t<CBaseFlex::FS_LocalToGlobal_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, bool (*)(CBreakModelsPrecached::breakable_precache_t const&, CBreakModelsPrecached::breakable_precache_t const&), CUtlMemory<UtlRBTreeNode_t<CBreakModelsPrecached::breakable_precache_t, unsigned short>, unsigned short> >::Find(CBreakModelsPrecached::breakable_precache_t const&) const
 T CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, bool (*)(CBreakModelsPrecached::breakable_precache_t const&, CBreakModelsPrecached::breakable_precache_t const&), CUtlMemory<UtlRBTreeNode_t<CBreakModelsPrecached::breakable_precache_t, unsigned short>, unsigned short> >::FindInsertionPosition(CBreakModelsPrecached::breakable_precache_t const&, unsigned short&, bool&)
 T CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, bool (*)(CBreakModelsPrecached::breakable_precache_t const&, CBreakModelsPrecached::breakable_precache_t const&), CUtlMemory<UtlRBTreeNode_t<CBreakModelsPrecached::breakable_precache_t, unsigned short>, unsigned short> >::Insert(CBreakModelsPrecached::breakable_precache_t const&)
 T CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, bool (*)(CBreakModelsPrecached::breakable_precache_t const&, CBreakModelsPrecached::breakable_precache_t const&), CUtlMemory<UtlRBTreeNode_t<CBreakModelsPrecached::breakable_precache_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, bool (*)(CBreakModelsPrecached::breakable_precache_t const&, CBreakModelsPrecached::breakable_precache_t const&), CUtlMemory<UtlRBTreeNode_t<CBreakModelsPrecached::breakable_precache_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, bool (*)(CBreakModelsPrecached::breakable_precache_t const&, CBreakModelsPrecached::breakable_precache_t const&), CUtlMemory<UtlRBTreeNode_t<CBreakModelsPrecached::breakable_precache_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, bool (*)(CBreakModelsPrecached::breakable_precache_t const&, CBreakModelsPrecached::breakable_precache_t const&), CUtlMemory<UtlRBTreeNode_t<CBreakModelsPrecached::breakable_precache_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, bool (*)(CBreakModelsPrecached::breakable_precache_t const&, CBreakModelsPrecached::breakable_precache_t const&), CUtlMemory<UtlRBTreeNode_t<CBreakModelsPrecached::breakable_precache_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, bool (*)(CBreakModelsPrecached::breakable_precache_t const&, CBreakModelsPrecached::breakable_precache_t const&), CUtlMemory<UtlRBTreeNode_t<CBreakModelsPrecached::breakable_precache_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, bool (*)(CBreakModelsPrecached::breakable_precache_t const&, CBreakModelsPrecached::breakable_precache_t const&), CUtlMemory<UtlRBTreeNode_t<CBreakModelsPrecached::breakable_precache_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CChoreoEvent*, unsigned short, bool (*)(CChoreoEvent* const&, CChoreoEvent* const&), CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short> >::FindInsertionPosition(CChoreoEvent* const&, unsigned short&, bool&)
 T CUtlRBTree<CChoreoEvent*, unsigned short, bool (*)(CChoreoEvent* const&, CChoreoEvent* const&), CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CChoreoEvent*, unsigned short, bool (*)(CChoreoEvent* const&, CChoreoEvent* const&), CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short> >::Insert(CChoreoEvent* const&)
 T CUtlRBTree<CChoreoEvent*, unsigned short, bool (*)(CChoreoEvent* const&, CChoreoEvent* const&), CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CChoreoEvent*, unsigned short, bool (*)(CChoreoEvent* const&, CChoreoEvent* const&), CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CChoreoEvent*, unsigned short, bool (*)(CChoreoEvent* const&, CChoreoEvent* const&), CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CChoreoEvent*, unsigned short, bool (*)(CChoreoEvent* const&, CChoreoEvent* const&), CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CChoreoEvent*, unsigned short, bool (*)(CChoreoEvent* const&, CChoreoEvent* const&), CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CChoreoEvent*, unsigned short, bool (*)(CChoreoEvent* const&, CChoreoEvent* const&), CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CChoreoEvent*, unsigned short, bool (*)(CChoreoEvent* const&, CChoreoEvent* const&), CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CChoreoEvent*, unsigned short, bool (*)(CChoreoEvent* const&, CChoreoEvent* const&), CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CChoreoScene::ActiveList, int, bool (*)(CChoreoScene::ActiveList const&, CChoreoScene::ActiveList const&), CUtlMemory<UtlRBTreeNode_t<CChoreoScene::ActiveList, int>, int> >::FindInsertionPosition(CChoreoScene::ActiveList const&, int&, bool&)
 T CUtlRBTree<CChoreoScene::ActiveList, int, bool (*)(CChoreoScene::ActiveList const&, CChoreoScene::ActiveList const&), CUtlMemory<UtlRBTreeNode_t<CChoreoScene::ActiveList, int>, int> >::FirstInorder() const
 T CUtlRBTree<CChoreoScene::ActiveList, int, bool (*)(CChoreoScene::ActiveList const&, CChoreoScene::ActiveList const&), CUtlMemory<UtlRBTreeNode_t<CChoreoScene::ActiveList, int>, int> >::InsertAt(int, bool)
 T CUtlRBTree<CChoreoScene::ActiveList, int, bool (*)(CChoreoScene::ActiveList const&, CChoreoScene::ActiveList const&), CUtlMemory<UtlRBTreeNode_t<CChoreoScene::ActiveList, int>, int> >::InsertRebalance(int)
 T CUtlRBTree<CChoreoScene::ActiveList, int, bool (*)(CChoreoScene::ActiveList const&, CChoreoScene::ActiveList const&), CUtlMemory<UtlRBTreeNode_t<CChoreoScene::ActiveList, int>, int> >::IsLeftChild(int) const
 T CUtlRBTree<CChoreoScene::ActiveList, int, bool (*)(CChoreoScene::ActiveList const&, CChoreoScene::ActiveList const&), CUtlMemory<UtlRBTreeNode_t<CChoreoScene::ActiveList, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CChoreoScene::ActiveList, int, bool (*)(CChoreoScene::ActiveList const&, CChoreoScene::ActiveList const&), CUtlMemory<UtlRBTreeNode_t<CChoreoScene::ActiveList, int>, int> >::NextInorder(int) const
 T CUtlRBTree<CChoreoScene::ActiveList, int, bool (*)(CChoreoScene::ActiveList const&, CChoreoScene::ActiveList const&), CUtlMemory<UtlRBTreeNode_t<CChoreoScene::ActiveList, int>, int> >::RemoveAll()
 T CUtlRBTree<CChoreoScene::ActiveList, int, bool (*)(CChoreoScene::ActiveList const&, CChoreoScene::ActiveList const&), CUtlMemory<UtlRBTreeNode_t<CChoreoScene::ActiveList, int>, int> >::RotateLeft(int)
 T CUtlRBTree<CChoreoScene::ActiveList, int, bool (*)(CChoreoScene::ActiveList const&, CChoreoScene::ActiveList const&), CUtlMemory<UtlRBTreeNode_t<CChoreoScene::ActiveList, int>, int> >::RotateRight(int)
 T CUtlRBTree<CCombatCharVisCache::VisCacheEntry_t, unsigned short, CCombatCharVisCache::CVisCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<CCombatCharVisCache::VisCacheEntry_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CCombatCharVisCache::VisCacheEntry_t, unsigned short, CCombatCharVisCache::CVisCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<CCombatCharVisCache::VisCacheEntry_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CCombatCharVisCache::VisCacheEntry_t, unsigned short, CCombatCharVisCache::CVisCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<CCombatCharVisCache::VisCacheEntry_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CCombatCharVisCache::VisCacheEntry_t, unsigned short, CCombatCharVisCache::CVisCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<CCombatCharVisCache::VisCacheEntry_t, unsigned short>, unsigned short> >::RemoveRebalance(unsigned short)
 T CUtlRBTree<CCombatCharVisCache::VisCacheEntry_t, unsigned short, CCombatCharVisCache::CVisCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<CCombatCharVisCache::VisCacheEntry_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CCombatCharVisCache::VisCacheEntry_t, unsigned short, CCombatCharVisCache::CVisCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<CCombatCharVisCache::VisCacheEntry_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CCombatCharVisCache::VisCacheEntry_t, unsigned short, CCombatCharVisCache::CVisCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<CCombatCharVisCache::VisCacheEntry_t, unsigned short>, unsigned short> >::Unlink(unsigned short)
 T CUtlRBTree<CHLTVGameEvent, unsigned short, bool (*)(CHLTVGameEvent const&, CHLTVGameEvent const&), CUtlMemory<UtlRBTreeNode_t<CHLTVGameEvent, unsigned short>, unsigned short> >::FindInsertionPosition(CHLTVGameEvent const&, unsigned short&, bool&)
 T CUtlRBTree<CHLTVGameEvent, unsigned short, bool (*)(CHLTVGameEvent const&, CHLTVGameEvent const&), CUtlMemory<UtlRBTreeNode_t<CHLTVGameEvent, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CHLTVGameEvent, unsigned short, bool (*)(CHLTVGameEvent const&, CHLTVGameEvent const&), CUtlMemory<UtlRBTreeNode_t<CHLTVGameEvent, unsigned short>, unsigned short> >::Insert(CHLTVGameEvent const&)
 T CUtlRBTree<CHLTVGameEvent, unsigned short, bool (*)(CHLTVGameEvent const&, CHLTVGameEvent const&), CUtlMemory<UtlRBTreeNode_t<CHLTVGameEvent, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CHLTVGameEvent, unsigned short, bool (*)(CHLTVGameEvent const&, CHLTVGameEvent const&), CUtlMemory<UtlRBTreeNode_t<CHLTVGameEvent, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CHLTVGameEvent, unsigned short, bool (*)(CHLTVGameEvent const&, CHLTVGameEvent const&), CUtlMemory<UtlRBTreeNode_t<CHLTVGameEvent, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CHLTVGameEvent, unsigned short, bool (*)(CHLTVGameEvent const&, CHLTVGameEvent const&), CUtlMemory<UtlRBTreeNode_t<CHLTVGameEvent, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CHLTVGameEvent, unsigned short, bool (*)(CHLTVGameEvent const&, CHLTVGameEvent const&), CUtlMemory<UtlRBTreeNode_t<CHLTVGameEvent, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CHLTVGameEvent, unsigned short, bool (*)(CHLTVGameEvent const&, CHLTVGameEvent const&), CUtlMemory<UtlRBTreeNode_t<CHLTVGameEvent, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CHLTVGameEvent, unsigned short, bool (*)(CHLTVGameEvent const&, CHLTVGameEvent const&), CUtlMemory<UtlRBTreeNode_t<CHLTVGameEvent, unsigned short>, unsigned short> >::RemoveRebalance(unsigned short)
 T CUtlRBTree<CHLTVGameEvent, unsigned short, bool (*)(CHLTVGameEvent const&, CHLTVGameEvent const&), CUtlMemory<UtlRBTreeNode_t<CHLTVGameEvent, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CHLTVGameEvent, unsigned short, bool (*)(CHLTVGameEvent const&, CHLTVGameEvent const&), CUtlMemory<UtlRBTreeNode_t<CHLTVGameEvent, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CHLTVGameEvent, unsigned short, bool (*)(CHLTVGameEvent const&, CHLTVGameEvent const&), CUtlMemory<UtlRBTreeNode_t<CHLTVGameEvent, unsigned short>, unsigned short> >::Unlink(unsigned short)
 T CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, bool (*)(CSceneEntity::SpeakEventSound_t const&, CSceneEntity::SpeakEventSound_t const&), CUtlMemory<UtlRBTreeNode_t<CSceneEntity::SpeakEventSound_t, unsigned short>, unsigned short> >::FindInsertionPosition(CSceneEntity::SpeakEventSound_t const&, unsigned short&, bool&)
 T CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, bool (*)(CSceneEntity::SpeakEventSound_t const&, CSceneEntity::SpeakEventSound_t const&), CUtlMemory<UtlRBTreeNode_t<CSceneEntity::SpeakEventSound_t, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, bool (*)(CSceneEntity::SpeakEventSound_t const&, CSceneEntity::SpeakEventSound_t const&), CUtlMemory<UtlRBTreeNode_t<CSceneEntity::SpeakEventSound_t, unsigned short>, unsigned short> >::Insert(CSceneEntity::SpeakEventSound_t const&)
 T CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, bool (*)(CSceneEntity::SpeakEventSound_t const&, CSceneEntity::SpeakEventSound_t const&), CUtlMemory<UtlRBTreeNode_t<CSceneEntity::SpeakEventSound_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, bool (*)(CSceneEntity::SpeakEventSound_t const&, CSceneEntity::SpeakEventSound_t const&), CUtlMemory<UtlRBTreeNode_t<CSceneEntity::SpeakEventSound_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, bool (*)(CSceneEntity::SpeakEventSound_t const&, CSceneEntity::SpeakEventSound_t const&), CUtlMemory<UtlRBTreeNode_t<CSceneEntity::SpeakEventSound_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, bool (*)(CSceneEntity::SpeakEventSound_t const&, CSceneEntity::SpeakEventSound_t const&), CUtlMemory<UtlRBTreeNode_t<CSceneEntity::SpeakEventSound_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, bool (*)(CSceneEntity::SpeakEventSound_t const&, CSceneEntity::SpeakEventSound_t const&), CUtlMemory<UtlRBTreeNode_t<CSceneEntity::SpeakEventSound_t, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, bool (*)(CSceneEntity::SpeakEventSound_t const&, CSceneEntity::SpeakEventSound_t const&), CUtlMemory<UtlRBTreeNode_t<CSceneEntity::SpeakEventSound_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, bool (*)(CSceneEntity::SpeakEventSound_t const&, CSceneEntity::SpeakEventSound_t const&), CUtlMemory<UtlRBTreeNode_t<CSceneEntity::SpeakEventSound_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, bool (*)(CSceneEntity::SpeakEventSound_t const&, CSceneEntity::SpeakEventSound_t const&), CUtlMemory<UtlRBTreeNode_t<CSceneEntity::SpeakEventSound_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short, bool (*)(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&, CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&), CUtlMemory<UtlRBTreeNode_t<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short>, unsigned short> >::Find(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&) const
 T CUtlRBTree<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short, bool (*)(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&, CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&), CUtlMemory<UtlRBTreeNode_t<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short, bool (*)(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&, CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&), CUtlMemory<UtlRBTreeNode_t<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short, bool (*)(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&, CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&), CUtlMemory<UtlRBTreeNode_t<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short>, unsigned short> >::Insert(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&)
 T CUtlRBTree<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short, bool (*)(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&, CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&), CUtlMemory<UtlRBTreeNode_t<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short, bool (*)(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&, CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&), CUtlMemory<UtlRBTreeNode_t<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short, bool (*)(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&, CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&), CUtlMemory<UtlRBTreeNode_t<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short, bool (*)(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&, CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&), CUtlMemory<UtlRBTreeNode_t<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short, bool (*)(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&, CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&), CUtlMemory<UtlRBTreeNode_t<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short, bool (*)(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&, CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&), CUtlMemory<UtlRBTreeNode_t<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short, bool (*)(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&, CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&), CUtlMemory<UtlRBTreeNode_t<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short, bool (*)(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&, CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&), CUtlMemory<UtlRBTreeNode_t<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char>, unsigned char> >::Find(CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t const&) const
 T CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char>, unsigned char> >::FindInsertionPosition(CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t const&, unsigned char&, bool&)
 T CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char>, unsigned char> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char>, unsigned char> >::Insert(CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t const&)
 T CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char>, unsigned char> >::InsertRebalance(unsigned char)
 T CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char>, unsigned char> >::IsLeftChild(unsigned char) const
 T CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char>, unsigned char> >::IsRightChild(unsigned char) const
 T CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char>, unsigned char> >::NewNode()
 T CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char>, unsigned char> >::NextInorder(unsigned char) const
 T CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char>, unsigned char> >::RemoveAll()
 T CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char>, unsigned char> >::RemoveRebalance(unsigned char)
 T CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char>, unsigned char> >::RotateLeft(unsigned char)
 T CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char>, unsigned char> >::RotateRight(unsigned char)
 T CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char>, unsigned char> >::Unlink(unsigned char)
 T CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Unlink(unsigned short)
 T CUtlRBTree<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<CBaseEntity*, int, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<CBaseEntity*, int, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<CBaseEntity*, int, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short, CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short, CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short, CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short, CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short, CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short, CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short, CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short, CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short, CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short, CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short, CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short, CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short, CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short, CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short, CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short, CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short, CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short, CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short, CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short, CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short, CUtlMap<CSteamID, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short, CUtlMap<CSteamID, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short, CUtlMap<CSteamID, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short, CUtlMap<CSteamID, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short, CUtlMap<CSteamID, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short, CUtlMap<CSteamID, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short, CUtlMap<CSteamID, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short, CUtlMap<CSteamID, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short, CUtlMap<CSteamID, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::Unlink(unsigned short)
 T CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Unlink(unsigned short)
 T CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Unlink(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int, CUtlMap<char const*, CActivityRemapCache, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int>, int> >::Find(CUtlMap<char const*, CActivityRemapCache, int>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int, CUtlMap<char const*, CActivityRemapCache, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int>, int> >::FindInsertionPosition(CUtlMap<char const*, CActivityRemapCache, int>::Node_t const&, int&, bool&)
 T CUtlRBTree<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int, CUtlMap<char const*, CActivityRemapCache, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int>, int> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int, CUtlMap<char const*, CActivityRemapCache, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int>, int> >::Insert(CUtlMap<char const*, CActivityRemapCache, int>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int, CUtlMap<char const*, CActivityRemapCache, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int>, int> >::InsertRebalance(int)
 T CUtlRBTree<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int, CUtlMap<char const*, CActivityRemapCache, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int>, int> >::IsLeftChild(int) const
 T CUtlRBTree<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int, CUtlMap<char const*, CActivityRemapCache, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int, CUtlMap<char const*, CActivityRemapCache, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int>, int> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int, CUtlMap<char const*, CActivityRemapCache, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int>, int> >::NextInorder(int) const
 T CUtlRBTree<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int, CUtlMap<char const*, CActivityRemapCache, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int>, int> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int, CUtlMap<char const*, CActivityRemapCache, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int>, int> >::RotateLeft(int)
 T CUtlRBTree<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int, CUtlMap<char const*, CActivityRemapCache, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int>, int> >::RotateRight(int)
 T CUtlRBTree<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int, CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int>, int> >::Find(CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int, CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int>, int> >::FindInsertionPosition(CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t const&, int&, bool&)
 T CUtlRBTree<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int, CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int>, int> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int, CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int>, int> >::Insert(CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int, CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int>, int> >::InsertRebalance(int)
 T CUtlRBTree<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int, CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int>, int> >::IsLeftChild(int) const
 T CUtlRBTree<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int, CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int, CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int>, int> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int, CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int>, int> >::NextInorder(int) const
 T CUtlRBTree<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int, CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int>, int> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int, CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int>, int> >::RotateLeft(int)
 T CUtlRBTree<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int, CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int>, int> >::RotateRight(int)
 T CUtlRBTree<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int, CUtlMap<char const*, CInstancedResponseSystem*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int>, int> >::Find(CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int, CUtlMap<char const*, CInstancedResponseSystem*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int>, int> >::FindInsertionPosition(CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t const&, int&, bool&)
 T CUtlRBTree<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int, CUtlMap<char const*, CInstancedResponseSystem*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int>, int> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int, CUtlMap<char const*, CInstancedResponseSystem*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int>, int> >::InsertAt(int, bool)
 T CUtlRBTree<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int, CUtlMap<char const*, CInstancedResponseSystem*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int>, int> >::InsertRebalance(int)
 T CUtlRBTree<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int, CUtlMap<char const*, CInstancedResponseSystem*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int>, int> >::IsLeftChild(int) const
 T CUtlRBTree<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int, CUtlMap<char const*, CInstancedResponseSystem*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int, CUtlMap<char const*, CInstancedResponseSystem*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int>, int> >::NextInorder(int) const
 T CUtlRBTree<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int, CUtlMap<char const*, CInstancedResponseSystem*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int>, int> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int, CUtlMap<char const*, CInstancedResponseSystem*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int>, int> >::RemoveRebalance(int)
 T CUtlRBTree<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int, CUtlMap<char const*, CInstancedResponseSystem*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int>, int> >::RotateLeft(int)
 T CUtlRBTree<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int, CUtlMap<char const*, CInstancedResponseSystem*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int>, int> >::RotateRight(int)
 T CUtlRBTree<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int, CUtlMap<char const*, CInstancedResponseSystem*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int>, int> >::Unlink(int)
 T CUtlRBTree<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short, CUtlMap<char const*, CResponseSystem::Enumeration, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short>, short> >::Find(CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short, CUtlMap<char const*, CResponseSystem::Enumeration, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short>, short> >::FindInsertionPosition(CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t const&, short&, bool&)
 T CUtlRBTree<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short, CUtlMap<char const*, CResponseSystem::Enumeration, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short>, short> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short, CUtlMap<char const*, CResponseSystem::Enumeration, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short>, short> >::Insert(CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short, CUtlMap<char const*, CResponseSystem::Enumeration, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short>, short> >::InsertRebalance(short)
 T CUtlRBTree<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short, CUtlMap<char const*, CResponseSystem::Enumeration, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short>, short> >::IsLeftChild(short) const
 T CUtlRBTree<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short, CUtlMap<char const*, CResponseSystem::Enumeration, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short>, short> >::IsRightChild(short) const
 T CUtlRBTree<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short, CUtlMap<char const*, CResponseSystem::Enumeration, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short>, short> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short, CUtlMap<char const*, CResponseSystem::Enumeration, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short>, short> >::NextInorder(short) const
 T CUtlRBTree<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short, CUtlMap<char const*, CResponseSystem::Enumeration, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short>, short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short, CUtlMap<char const*, CResponseSystem::Enumeration, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short>, short> >::RotateLeft(short)
 T CUtlRBTree<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short, CUtlMap<char const*, CResponseSystem::Enumeration, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short>, short> >::RotateRight(short)
 T CUtlRBTree<CUtlMap<char const*, CUserMessage*, int>::Node_t, int, CUtlMap<char const*, CUserMessage*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUserMessage*, int>::Node_t, int>, int> >::Find(CUtlMap<char const*, CUserMessage*, int>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, CUserMessage*, int>::Node_t, int, CUtlMap<char const*, CUserMessage*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUserMessage*, int>::Node_t, int>, int> >::FindInsertionPosition(CUtlMap<char const*, CUserMessage*, int>::Node_t const&, int&, bool&)
 T CUtlRBTree<CUtlMap<char const*, CUserMessage*, int>::Node_t, int, CUtlMap<char const*, CUserMessage*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUserMessage*, int>::Node_t, int>, int> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, CUserMessage*, int>::Node_t, int, CUtlMap<char const*, CUserMessage*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUserMessage*, int>::Node_t, int>, int> >::InsertAt(int, bool)
 T CUtlRBTree<CUtlMap<char const*, CUserMessage*, int>::Node_t, int, CUtlMap<char const*, CUserMessage*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUserMessage*, int>::Node_t, int>, int> >::InsertRebalance(int)
 T CUtlRBTree<CUtlMap<char const*, CUserMessage*, int>::Node_t, int, CUtlMap<char const*, CUserMessage*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUserMessage*, int>::Node_t, int>, int> >::IsLeftChild(int) const
 T CUtlRBTree<CUtlMap<char const*, CUserMessage*, int>::Node_t, int, CUtlMap<char const*, CUserMessage*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUserMessage*, int>::Node_t, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CUtlMap<char const*, CUserMessage*, int>::Node_t, int, CUtlMap<char const*, CUserMessage*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUserMessage*, int>::Node_t, int>, int> >::NextInorder(int) const
 T CUtlRBTree<CUtlMap<char const*, CUserMessage*, int>::Node_t, int, CUtlMap<char const*, CUserMessage*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUserMessage*, int>::Node_t, int>, int> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, CUserMessage*, int>::Node_t, int, CUtlMap<char const*, CUserMessage*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUserMessage*, int>::Node_t, int>, int> >::RotateLeft(int)
 T CUtlRBTree<CUtlMap<char const*, CUserMessage*, int>::Node_t, int, CUtlMap<char const*, CUserMessage*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUserMessage*, int>::Node_t, int>, int> >::RotateRight(int)
 T CUtlRBTree<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int, CUtlMap<char const*, ConceptHistory_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int>, int> >::Find(CUtlMap<char const*, ConceptHistory_t, int>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int, CUtlMap<char const*, ConceptHistory_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int>, int> >::FindInsertionPosition(CUtlMap<char const*, ConceptHistory_t, int>::Node_t const&, int&, bool&)
 T CUtlRBTree<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int, CUtlMap<char const*, ConceptHistory_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int>, int> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int, CUtlMap<char const*, ConceptHistory_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int>, int> >::Insert(CUtlMap<char const*, ConceptHistory_t, int>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int, CUtlMap<char const*, ConceptHistory_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int>, int> >::InsertRebalance(int)
 T CUtlRBTree<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int, CUtlMap<char const*, ConceptHistory_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int>, int> >::IsLeftChild(int) const
 T CUtlRBTree<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int, CUtlMap<char const*, ConceptHistory_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int, CUtlMap<char const*, ConceptHistory_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int>, int> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int, CUtlMap<char const*, ConceptHistory_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int>, int> >::NextInorder(int) const
 T CUtlRBTree<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int, CUtlMap<char const*, ConceptHistory_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int>, int> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int, CUtlMap<char const*, ConceptHistory_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int>, int> >::RemoveRebalance(int)
 T CUtlRBTree<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int, CUtlMap<char const*, ConceptHistory_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int>, int> >::RotateLeft(int)
 T CUtlRBTree<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int, CUtlMap<char const*, ConceptHistory_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int>, int> >::RotateRight(int)
 T CUtlRBTree<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int, CUtlMap<char const*, ConceptHistory_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int>, int> >::Unlink(int)
 T CUtlRBTree<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, ConceptInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, ConceptInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, ConceptInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, ConceptInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, ConceptInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, ConceptInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, ConceptInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, ConceptInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, ConceptInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, ConceptInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, Criteria, short>::Node_t, short, CUtlMap<char const*, Criteria, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Criteria, short>::Node_t, short>, short> >::Find(CUtlMap<char const*, Criteria, short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, Criteria, short>::Node_t, short, CUtlMap<char const*, Criteria, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Criteria, short>::Node_t, short>, short> >::FindInsertionPosition(CUtlMap<char const*, Criteria, short>::Node_t const&, short&, bool&)
 T CUtlRBTree<CUtlMap<char const*, Criteria, short>::Node_t, short, CUtlMap<char const*, Criteria, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Criteria, short>::Node_t, short>, short> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, Criteria, short>::Node_t, short, CUtlMap<char const*, Criteria, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Criteria, short>::Node_t, short>, short> >::Insert(CUtlMap<char const*, Criteria, short>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, Criteria, short>::Node_t, short, CUtlMap<char const*, Criteria, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Criteria, short>::Node_t, short>, short> >::InsertRebalance(short)
 T CUtlRBTree<CUtlMap<char const*, Criteria, short>::Node_t, short, CUtlMap<char const*, Criteria, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Criteria, short>::Node_t, short>, short> >::IsLeftChild(short) const
 T CUtlRBTree<CUtlMap<char const*, Criteria, short>::Node_t, short, CUtlMap<char const*, Criteria, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Criteria, short>::Node_t, short>, short> >::IsRightChild(short) const
 T CUtlRBTree<CUtlMap<char const*, Criteria, short>::Node_t, short, CUtlMap<char const*, Criteria, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Criteria, short>::Node_t, short>, short> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, Criteria, short>::Node_t, short, CUtlMap<char const*, Criteria, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Criteria, short>::Node_t, short>, short> >::NextInorder(short) const
 T CUtlRBTree<CUtlMap<char const*, Criteria, short>::Node_t, short, CUtlMap<char const*, Criteria, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Criteria, short>::Node_t, short>, short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, Criteria, short>::Node_t, short, CUtlMap<char const*, Criteria, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Criteria, short>::Node_t, short>, short> >::RotateLeft(short)
 T CUtlRBTree<CUtlMap<char const*, Criteria, short>::Node_t, short, CUtlMap<char const*, Criteria, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Criteria, short>::Node_t, short>, short> >::RotateRight(short)
 T CUtlRBTree<CUtlMap<char const*, EventGroup, int>::Node_t, int, CUtlMap<char const*, EventGroup, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EventGroup, int>::Node_t, int>, int> >::Find(CUtlMap<char const*, EventGroup, int>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, EventGroup, int>::Node_t, int, CUtlMap<char const*, EventGroup, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EventGroup, int>::Node_t, int>, int> >::FindInsertionPosition(CUtlMap<char const*, EventGroup, int>::Node_t const&, int&, bool&)
 T CUtlRBTree<CUtlMap<char const*, EventGroup, int>::Node_t, int, CUtlMap<char const*, EventGroup, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EventGroup, int>::Node_t, int>, int> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, EventGroup, int>::Node_t, int, CUtlMap<char const*, EventGroup, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EventGroup, int>::Node_t, int>, int> >::Insert(CUtlMap<char const*, EventGroup, int>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, EventGroup, int>::Node_t, int, CUtlMap<char const*, EventGroup, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EventGroup, int>::Node_t, int>, int> >::InsertRebalance(int)
 T CUtlRBTree<CUtlMap<char const*, EventGroup, int>::Node_t, int, CUtlMap<char const*, EventGroup, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EventGroup, int>::Node_t, int>, int> >::IsLeftChild(int) const
 T CUtlRBTree<CUtlMap<char const*, EventGroup, int>::Node_t, int, CUtlMap<char const*, EventGroup, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EventGroup, int>::Node_t, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CUtlMap<char const*, EventGroup, int>::Node_t, int, CUtlMap<char const*, EventGroup, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EventGroup, int>::Node_t, int>, int> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, EventGroup, int>::Node_t, int, CUtlMap<char const*, EventGroup, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EventGroup, int>::Node_t, int>, int> >::NextInorder(int) const
 T CUtlRBTree<CUtlMap<char const*, EventGroup, int>::Node_t, int, CUtlMap<char const*, EventGroup, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EventGroup, int>::Node_t, int>, int> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, EventGroup, int>::Node_t, int, CUtlMap<char const*, EventGroup, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EventGroup, int>::Node_t, int>, int> >::RotateLeft(int)
 T CUtlRBTree<CUtlMap<char const*, EventGroup, int>::Node_t, int, CUtlMap<char const*, EventGroup, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EventGroup, int>::Node_t, int>, int> >::RotateRight(int)
 T CUtlRBTree<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, IEntityFactory*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, IEntityFactory*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, IEntityFactory*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, IEntityFactory*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, IEntityFactory*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, IEntityFactory*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, IEntityFactory*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, IEntityFactory*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, IEntityFactory*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, IEntityFactory*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, IEntityFactory*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, IEntityFactory*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, ResponseGroup, short>::Node_t, short, CUtlMap<char const*, ResponseGroup, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ResponseGroup, short>::Node_t, short>, short> >::Find(CUtlMap<char const*, ResponseGroup, short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, ResponseGroup, short>::Node_t, short, CUtlMap<char const*, ResponseGroup, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ResponseGroup, short>::Node_t, short>, short> >::FindInsertionPosition(CUtlMap<char const*, ResponseGroup, short>::Node_t const&, short&, bool&)
 T CUtlRBTree<CUtlMap<char const*, ResponseGroup, short>::Node_t, short, CUtlMap<char const*, ResponseGroup, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ResponseGroup, short>::Node_t, short>, short> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, ResponseGroup, short>::Node_t, short, CUtlMap<char const*, ResponseGroup, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ResponseGroup, short>::Node_t, short>, short> >::Insert(CUtlMap<char const*, ResponseGroup, short>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, ResponseGroup, short>::Node_t, short, CUtlMap<char const*, ResponseGroup, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ResponseGroup, short>::Node_t, short>, short> >::InsertRebalance(short)
 T CUtlRBTree<CUtlMap<char const*, ResponseGroup, short>::Node_t, short, CUtlMap<char const*, ResponseGroup, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ResponseGroup, short>::Node_t, short>, short> >::IsLeftChild(short) const
 T CUtlRBTree<CUtlMap<char const*, ResponseGroup, short>::Node_t, short, CUtlMap<char const*, ResponseGroup, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ResponseGroup, short>::Node_t, short>, short> >::IsRightChild(short) const
 T CUtlRBTree<CUtlMap<char const*, ResponseGroup, short>::Node_t, short, CUtlMap<char const*, ResponseGroup, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ResponseGroup, short>::Node_t, short>, short> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, ResponseGroup, short>::Node_t, short, CUtlMap<char const*, ResponseGroup, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ResponseGroup, short>::Node_t, short>, short> >::NextInorder(short) const
 T CUtlRBTree<CUtlMap<char const*, ResponseGroup, short>::Node_t, short, CUtlMap<char const*, ResponseGroup, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ResponseGroup, short>::Node_t, short>, short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, ResponseGroup, short>::Node_t, short, CUtlMap<char const*, ResponseGroup, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ResponseGroup, short>::Node_t, short>, short> >::RotateLeft(short)
 T CUtlRBTree<CUtlMap<char const*, ResponseGroup, short>::Node_t, short, CUtlMap<char const*, ResponseGroup, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ResponseGroup, short>::Node_t, short>, short> >::RotateRight(short)
 T CUtlRBTree<CUtlMap<char const*, Rule, short>::Node_t, short, CUtlMap<char const*, Rule, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Rule, short>::Node_t, short>, short> >::FindInsertionPosition(CUtlMap<char const*, Rule, short>::Node_t const&, short&, bool&)
 T CUtlRBTree<CUtlMap<char const*, Rule, short>::Node_t, short, CUtlMap<char const*, Rule, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Rule, short>::Node_t, short>, short> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, Rule, short>::Node_t, short, CUtlMap<char const*, Rule, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Rule, short>::Node_t, short>, short> >::Insert(CUtlMap<char const*, Rule, short>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, Rule, short>::Node_t, short, CUtlMap<char const*, Rule, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Rule, short>::Node_t, short>, short> >::InsertRebalance(short)
 T CUtlRBTree<CUtlMap<char const*, Rule, short>::Node_t, short, CUtlMap<char const*, Rule, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Rule, short>::Node_t, short>, short> >::IsLeftChild(short) const
 T CUtlRBTree<CUtlMap<char const*, Rule, short>::Node_t, short, CUtlMap<char const*, Rule, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Rule, short>::Node_t, short>, short> >::IsRightChild(short) const
 T CUtlRBTree<CUtlMap<char const*, Rule, short>::Node_t, short, CUtlMap<char const*, Rule, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Rule, short>::Node_t, short>, short> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, Rule, short>::Node_t, short, CUtlMap<char const*, Rule, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Rule, short>::Node_t, short>, short> >::NextInorder(short) const
 T CUtlRBTree<CUtlMap<char const*, Rule, short>::Node_t, short, CUtlMap<char const*, Rule, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Rule, short>::Node_t, short>, short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, Rule, short>::Node_t, short, CUtlMap<char const*, Rule, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Rule, short>::Node_t, short>, short> >::RotateLeft(short)
 T CUtlRBTree<CUtlMap<char const*, Rule, short>::Node_t, short, CUtlMap<char const*, Rule, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Rule, short>::Node_t, short>, short> >::RotateRight(short)
 T CUtlRBTree<CUtlMap<char const*, float, int>::Node_t, int, CUtlMap<char const*, float, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, float, int>::Node_t, int>, int> >::Find(CUtlMap<char const*, float, int>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, float, int>::Node_t, int, CUtlMap<char const*, float, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, float, int>::Node_t, int>, int> >::FindInsertionPosition(CUtlMap<char const*, float, int>::Node_t const&, int&, bool&)
 T CUtlRBTree<CUtlMap<char const*, float, int>::Node_t, int, CUtlMap<char const*, float, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, float, int>::Node_t, int>, int> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, float, int>::Node_t, int, CUtlMap<char const*, float, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, float, int>::Node_t, int>, int> >::InsertAt(int, bool)
 T CUtlRBTree<CUtlMap<char const*, float, int>::Node_t, int, CUtlMap<char const*, float, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, float, int>::Node_t, int>, int> >::InsertRebalance(int)
 T CUtlRBTree<CUtlMap<char const*, float, int>::Node_t, int, CUtlMap<char const*, float, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, float, int>::Node_t, int>, int> >::IsLeftChild(int) const
 T CUtlRBTree<CUtlMap<char const*, float, int>::Node_t, int, CUtlMap<char const*, float, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, float, int>::Node_t, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CUtlMap<char const*, float, int>::Node_t, int, CUtlMap<char const*, float, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, float, int>::Node_t, int>, int> >::NextInorder(int) const
 T CUtlRBTree<CUtlMap<char const*, float, int>::Node_t, int, CUtlMap<char const*, float, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, float, int>::Node_t, int>, int> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, float, int>::Node_t, int, CUtlMap<char const*, float, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, float, int>::Node_t, int>, int> >::RotateLeft(int)
 T CUtlRBTree<CUtlMap<char const*, float, int>::Node_t, int, CUtlMap<char const*, float, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, float, int>::Node_t, int>, int> >::RotateRight(int)
 T CUtlRBTree<CUtlMap<char const*, int, int>::Node_t, int, CUtlMap<char const*, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int> >::Find(CUtlMap<char const*, int, int>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, int, int>::Node_t, int, CUtlMap<char const*, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int> >::FindInsertionPosition(CUtlMap<char const*, int, int>::Node_t const&, int&, bool&)
 T CUtlRBTree<CUtlMap<char const*, int, int>::Node_t, int, CUtlMap<char const*, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, int, int>::Node_t, int, CUtlMap<char const*, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int> >::InsertAt(int, bool)
 T CUtlRBTree<CUtlMap<char const*, int, int>::Node_t, int, CUtlMap<char const*, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int> >::InsertRebalance(int)
 T CUtlRBTree<CUtlMap<char const*, int, int>::Node_t, int, CUtlMap<char const*, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int> >::IsLeftChild(int) const
 T CUtlRBTree<CUtlMap<char const*, int, int>::Node_t, int, CUtlMap<char const*, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CUtlMap<char const*, int, int>::Node_t, int, CUtlMap<char const*, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int> >::NextInorder(int) const
 T CUtlRBTree<CUtlMap<char const*, int, int>::Node_t, int, CUtlMap<char const*, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, int, int>::Node_t, int, CUtlMap<char const*, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int> >::RotateLeft(int)
 T CUtlRBTree<CUtlMap<char const*, int, int>::Node_t, int, CUtlMap<char const*, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int> >::RotateRight(int)
 T CUtlRBTree<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<char const*, int, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<char const*, int, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<char const*, int, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<int, CAIHintVector, unsigned short>::Node_t, unsigned short, CUtlMap<int, CAIHintVector, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CAIHintVector, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<int, CAIHintVector, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<int, CAIHintVector, unsigned short>::Node_t, unsigned short, CUtlMap<int, CAIHintVector, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CAIHintVector, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<int, CAIHintVector, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<int, CAIHintVector, unsigned short>::Node_t, unsigned short, CUtlMap<int, CAIHintVector, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CAIHintVector, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<int, CAIHintVector, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<int, CAIHintVector, unsigned short>::Node_t, unsigned short, CUtlMap<int, CAIHintVector, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CAIHintVector, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<int, CAIHintVector, unsigned short>::Node_t, unsigned short, CUtlMap<int, CAIHintVector, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CAIHintVector, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<int, CAIHintVector, unsigned short>::Node_t, unsigned short, CUtlMap<int, CAIHintVector, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CAIHintVector, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<int, CAIHintVector, unsigned short>::Node_t, unsigned short, CUtlMap<int, CAIHintVector, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CAIHintVector, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<int, CAIHintVector, unsigned short>::Node_t, unsigned short, CUtlMap<int, CAIHintVector, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CAIHintVector, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<int, CAIHintVector, unsigned short>::Node_t, unsigned short, CUtlMap<int, CAIHintVector, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CAIHintVector, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<int, CAIHintVector, unsigned short>::Node_t, unsigned short, CUtlMap<int, CAIHintVector, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CAIHintVector, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<int, CBaseAchievement*, unsigned short>::Node_t, unsigned short, CUtlMap<int, CBaseAchievement*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CBaseAchievement*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<int, CBaseAchievement*, unsigned short>::Node_t, unsigned short, CUtlMap<int, CBaseAchievement*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CBaseAchievement*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<int, CBaseAchievement*, unsigned short>::Node_t, unsigned short, CUtlMap<int, CBaseAchievement*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CBaseAchievement*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t, unsigned short, CUtlMap<int, CTeamControlPoint*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t, unsigned short, CUtlMap<int, CTeamControlPoint*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t, unsigned short, CUtlMap<int, CTeamControlPoint*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t, unsigned short, CUtlMap<int, CTeamControlPoint*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t, unsigned short, CUtlMap<int, CTeamControlPoint*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t, unsigned short, CUtlMap<int, CTeamControlPoint*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t, unsigned short, CUtlMap<int, CTeamControlPoint*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t, unsigned short, CUtlMap<int, CTeamControlPoint*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t, unsigned short, CUtlMap<int, CTeamControlPoint*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t, unsigned short, CUtlMap<int, CTeamControlPoint*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<int, int, unsigned short>::Node_t, unsigned short, CUtlMap<int, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<int, int, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<int, int, unsigned short>::Node_t, unsigned short, CUtlMap<int, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<int, int, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<int, int, unsigned short>::Node_t, unsigned short, CUtlMap<int, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<int, int, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<int, int, unsigned short>::Node_t, unsigned short, CUtlMap<int, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<int, int, unsigned short>::Node_t, unsigned short, CUtlMap<int, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<int, int, unsigned short>::Node_t, unsigned short, CUtlMap<int, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<int, int, unsigned short>::Node_t, unsigned short, CUtlMap<int, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<int, int, unsigned short>::Node_t, unsigned short, CUtlMap<int, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<int, int, unsigned short>::Node_t, unsigned short, CUtlMap<int, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<int, int, unsigned short>::Node_t, unsigned short, CUtlMap<int, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char, CUtlMap<string_t, CSimpleSimTimer, char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char>, char> >::Find(CUtlMap<string_t, CSimpleSimTimer, char>::Node_t const&) const
 T CUtlRBTree<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char, CUtlMap<string_t, CSimpleSimTimer, char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char>, char> >::FindInsertionPosition(CUtlMap<string_t, CSimpleSimTimer, char>::Node_t const&, char&, bool&)
 T CUtlRBTree<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char, CUtlMap<string_t, CSimpleSimTimer, char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char>, char> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char, CUtlMap<string_t, CSimpleSimTimer, char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char>, char> >::Insert(CUtlMap<string_t, CSimpleSimTimer, char>::Node_t const&)
 T CUtlRBTree<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char, CUtlMap<string_t, CSimpleSimTimer, char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char>, char> >::InsertRebalance(char)
 T CUtlRBTree<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char, CUtlMap<string_t, CSimpleSimTimer, char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char>, char> >::IsLeftChild(char) const
 T CUtlRBTree<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char, CUtlMap<string_t, CSimpleSimTimer, char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char>, char> >::IsRightChild(char) const
 T CUtlRBTree<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char, CUtlMap<string_t, CSimpleSimTimer, char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char>, char> >::NewNode()
 T CUtlRBTree<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char, CUtlMap<string_t, CSimpleSimTimer, char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char>, char> >::NextInorder(char) const
 T CUtlRBTree<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char, CUtlMap<string_t, CSimpleSimTimer, char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char>, char> >::RemoveAll()
 T CUtlRBTree<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char, CUtlMap<string_t, CSimpleSimTimer, char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char>, char> >::RotateLeft(char)
 T CUtlRBTree<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char, CUtlMap<string_t, CSimpleSimTimer, char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char>, char> >::RotateRight(char)
 T CUtlRBTree<CUtlMap<unsigned int, Activity, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, Activity, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, Activity, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<unsigned int, Activity, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<unsigned int, Activity, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, Activity, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, Activity, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<unsigned int, Activity, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<unsigned int, Activity, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, Activity, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, Activity, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<unsigned int, Activity, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<unsigned int, Activity, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, Activity, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, Activity, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned int, Activity, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, Activity, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, Activity, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<unsigned int, Activity, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, Activity, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, Activity, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<unsigned int, Activity, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, Activity, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, Activity, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<unsigned int, Activity, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, Activity, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, Activity, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<unsigned int, Activity, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, Activity, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, Activity, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned int, Activity, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, Activity, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, Activity, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<unsigned long long, float, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<unsigned long long, float, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<unsigned long long, float, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::Unlink(unsigned short)
 T CUtlRBTree<CUtlString, unsigned short, bool (*)(CUtlString const&, CUtlString const&), CUtlMemory<UtlRBTreeNode_t<CUtlString, unsigned short>, unsigned short> >::Find(CUtlString const&) const
 T CUtlRBTree<CUtlString, unsigned short, bool (*)(CUtlString const&, CUtlString const&), CUtlMemory<UtlRBTreeNode_t<CUtlString, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlString const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlString, unsigned short, bool (*)(CUtlString const&, CUtlString const&), CUtlMemory<UtlRBTreeNode_t<CUtlString, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CUtlString, unsigned short, bool (*)(CUtlString const&, CUtlString const&), CUtlMemory<UtlRBTreeNode_t<CUtlString, unsigned short>, unsigned short> >::Insert(CUtlString const&)
 T CUtlRBTree<CUtlString, unsigned short, bool (*)(CUtlString const&, CUtlString const&), CUtlMemory<UtlRBTreeNode_t<CUtlString, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlString, unsigned short, bool (*)(CUtlString const&, CUtlString const&), CUtlMemory<UtlRBTreeNode_t<CUtlString, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlString, unsigned short, bool (*)(CUtlString const&, CUtlString const&), CUtlMemory<UtlRBTreeNode_t<CUtlString, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlString, unsigned short, bool (*)(CUtlString const&, CUtlString const&), CUtlMemory<UtlRBTreeNode_t<CUtlString, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlString, unsigned short, bool (*)(CUtlString const&, CUtlString const&), CUtlMemory<UtlRBTreeNode_t<CUtlString, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CUtlString, unsigned short, bool (*)(CUtlString const&, CUtlString const&), CUtlMemory<UtlRBTreeNode_t<CUtlString, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlString, unsigned short, bool (*)(CUtlString const&, CUtlString const&), CUtlMemory<UtlRBTreeNode_t<CUtlString, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlString, unsigned short, bool (*)(CUtlString const&, CUtlString const&), CUtlMemory<UtlRBTreeNode_t<CUtlString, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::Find(CUtlSymbolTable::CStringPoolIndex const&) const
 T CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlSymbolTable::CStringPoolIndex const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::Insert(CUtlSymbolTable::CStringPoolIndex const&)
 T CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<NearbyDismount_t, int, bool (*)(NearbyDismount_t const&, NearbyDismount_t const&), CUtlMemory<UtlRBTreeNode_t<NearbyDismount_t, int>, int> >::FindInsertionPosition(NearbyDismount_t const&, int&, bool&)
 T CUtlRBTree<NearbyDismount_t, int, bool (*)(NearbyDismount_t const&, NearbyDismount_t const&), CUtlMemory<UtlRBTreeNode_t<NearbyDismount_t, int>, int> >::FirstInorder() const
 T CUtlRBTree<NearbyDismount_t, int, bool (*)(NearbyDismount_t const&, NearbyDismount_t const&), CUtlMemory<UtlRBTreeNode_t<NearbyDismount_t, int>, int> >::InsertAt(int, bool)
 T CUtlRBTree<NearbyDismount_t, int, bool (*)(NearbyDismount_t const&, NearbyDismount_t const&), CUtlMemory<UtlRBTreeNode_t<NearbyDismount_t, int>, int> >::InsertRebalance(int)
 T CUtlRBTree<NearbyDismount_t, int, bool (*)(NearbyDismount_t const&, NearbyDismount_t const&), CUtlMemory<UtlRBTreeNode_t<NearbyDismount_t, int>, int> >::IsLeftChild(int) const
 T CUtlRBTree<NearbyDismount_t, int, bool (*)(NearbyDismount_t const&, NearbyDismount_t const&), CUtlMemory<UtlRBTreeNode_t<NearbyDismount_t, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<NearbyDismount_t, int, bool (*)(NearbyDismount_t const&, NearbyDismount_t const&), CUtlMemory<UtlRBTreeNode_t<NearbyDismount_t, int>, int> >::NextInorder(int) const
 T CUtlRBTree<NearbyDismount_t, int, bool (*)(NearbyDismount_t const&, NearbyDismount_t const&), CUtlMemory<UtlRBTreeNode_t<NearbyDismount_t, int>, int> >::RemoveAll()
 T CUtlRBTree<NearbyDismount_t, int, bool (*)(NearbyDismount_t const&, NearbyDismount_t const&), CUtlMemory<UtlRBTreeNode_t<NearbyDismount_t, int>, int> >::RotateLeft(int)
 T CUtlRBTree<NearbyDismount_t, int, bool (*)(NearbyDismount_t const&, NearbyDismount_t const&), CUtlMemory<UtlRBTreeNode_t<NearbyDismount_t, int>, int> >::RotateRight(int)
 T CUtlRBTree<ThinkSync, unsigned short, bool (*)(ThinkSync const&, ThinkSync const&), CUtlMemory<UtlRBTreeNode_t<ThinkSync, unsigned short>, unsigned short> >::Find(ThinkSync const&) const
 T CUtlRBTree<ThinkSync, unsigned short, bool (*)(ThinkSync const&, ThinkSync const&), CUtlMemory<UtlRBTreeNode_t<ThinkSync, unsigned short>, unsigned short> >::FindInsertionPosition(ThinkSync const&, unsigned short&, bool&)
 T CUtlRBTree<ThinkSync, unsigned short, bool (*)(ThinkSync const&, ThinkSync const&), CUtlMemory<UtlRBTreeNode_t<ThinkSync, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<ThinkSync, unsigned short, bool (*)(ThinkSync const&, ThinkSync const&), CUtlMemory<UtlRBTreeNode_t<ThinkSync, unsigned short>, unsigned short> >::Insert(ThinkSync const&)
 T CUtlRBTree<ThinkSync, unsigned short, bool (*)(ThinkSync const&, ThinkSync const&), CUtlMemory<UtlRBTreeNode_t<ThinkSync, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<ThinkSync, unsigned short, bool (*)(ThinkSync const&, ThinkSync const&), CUtlMemory<UtlRBTreeNode_t<ThinkSync, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<ThinkSync, unsigned short, bool (*)(ThinkSync const&, ThinkSync const&), CUtlMemory<UtlRBTreeNode_t<ThinkSync, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<ThinkSync, unsigned short, bool (*)(ThinkSync const&, ThinkSync const&), CUtlMemory<UtlRBTreeNode_t<ThinkSync, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<ThinkSync, unsigned short, bool (*)(ThinkSync const&, ThinkSync const&), CUtlMemory<UtlRBTreeNode_t<ThinkSync, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<ThinkSync, unsigned short, bool (*)(ThinkSync const&, ThinkSync const&), CUtlMemory<UtlRBTreeNode_t<ThinkSync, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<ThinkSync, unsigned short, bool (*)(ThinkSync const&, ThinkSync const&), CUtlMemory<UtlRBTreeNode_t<ThinkSync, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<ThinkSync, unsigned short, bool (*)(ThinkSync const&, ThinkSync const&), CUtlMemory<UtlRBTreeNode_t<ThinkSync, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<VisibilityCacheEntry_t, unsigned short, CVisibilityCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<VisibilityCacheEntry_t, unsigned short>, unsigned short> >::Find(VisibilityCacheEntry_t const&) const
 T CUtlRBTree<VisibilityCacheEntry_t, unsigned short, CVisibilityCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<VisibilityCacheEntry_t, unsigned short>, unsigned short> >::FindInsertionPosition(VisibilityCacheEntry_t const&, unsigned short&, bool&)
 T CUtlRBTree<VisibilityCacheEntry_t, unsigned short, CVisibilityCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<VisibilityCacheEntry_t, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<VisibilityCacheEntry_t, unsigned short, CVisibilityCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<VisibilityCacheEntry_t, unsigned short>, unsigned short> >::Insert(VisibilityCacheEntry_t const&)
 T CUtlRBTree<VisibilityCacheEntry_t, unsigned short, CVisibilityCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<VisibilityCacheEntry_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<VisibilityCacheEntry_t, unsigned short, CVisibilityCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<VisibilityCacheEntry_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<VisibilityCacheEntry_t, unsigned short, CVisibilityCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<VisibilityCacheEntry_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<VisibilityCacheEntry_t, unsigned short, CVisibilityCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<VisibilityCacheEntry_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<VisibilityCacheEntry_t, unsigned short, CVisibilityCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<VisibilityCacheEntry_t, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<VisibilityCacheEntry_t, unsigned short, CVisibilityCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<VisibilityCacheEntry_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<VisibilityCacheEntry_t, unsigned short, CVisibilityCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<VisibilityCacheEntry_t, unsigned short>, unsigned short> >::RemoveRebalance(unsigned short)
 T CUtlRBTree<VisibilityCacheEntry_t, unsigned short, CVisibilityCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<VisibilityCacheEntry_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<VisibilityCacheEntry_t, unsigned short, CVisibilityCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<VisibilityCacheEntry_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<VisibilityCacheEntry_t, unsigned short, CVisibilityCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<VisibilityCacheEntry_t, unsigned short>, unsigned short> >::Unlink(unsigned short)
 T CUtlRBTree<VisibilityCacheEntry_t, unsigned short, CVisibilityCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<VisibilityCacheEntry_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::Find(char const* const&) const
 T CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::FindInsertionPosition(char const* const&, unsigned short&, bool&)
 T CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::Insert(char const* const&)
 T CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<int, unsigned short, bool (*)(int const&, int const&), CUtlMemory<UtlRBTreeNode_t<int, unsigned short>, unsigned short> >::Find(int const&) const
 T CUtlRBTree<int, unsigned short, bool (*)(int const&, int const&), CUtlMemory<UtlRBTreeNode_t<int, unsigned short>, unsigned short> >::FindInsertionPosition(int const&, unsigned short&, bool&)
 T CUtlRBTree<int, unsigned short, bool (*)(int const&, int const&), CUtlMemory<UtlRBTreeNode_t<int, unsigned short>, unsigned short> >::Insert(int const&)
 T CUtlRBTree<int, unsigned short, bool (*)(int const&, int const&), CUtlMemory<UtlRBTreeNode_t<int, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<int, unsigned short, bool (*)(int const&, int const&), CUtlMemory<UtlRBTreeNode_t<int, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<int, unsigned short, bool (*)(int const&, int const&), CUtlMemory<UtlRBTreeNode_t<int, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<int, unsigned short, bool (*)(int const&, int const&), CUtlMemory<UtlRBTreeNode_t<int, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<int, unsigned short, bool (*)(int const&, int const&), CUtlMemory<UtlRBTreeNode_t<int, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<int, unsigned short, bool (*)(int const&, int const&), CUtlMemory<UtlRBTreeNode_t<int, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<int, unsigned short, bool (*)(int const&, int const&), CUtlMemory<UtlRBTreeNode_t<int, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlSortVector<CBaseEntity*, CSortedEntityList::CEntityReportLess, CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> > >::Insert(CBaseEntity* const&)
 T CUtlSortVector<CDmxAttribute*, CDmxAttributeLess, CUtlVector<CDmxAttribute*, CUtlMemory<CDmxAttribute*, int> > >::CompareHelper(CDmxAttribute* const*, CDmxAttribute* const*)
 T CUtlSortVector<CSortedCacheFile, CSortedCacheFile, CUtlVector<CSortedCacheFile, CUtlMemory<CSortedCacheFile, int> > >::CompareHelper(CSortedCacheFile const*, CSortedCacheFile const*)
 T CUtlSortVector<KeyValues*, CUtlSortVectorKeyValuesByName, CUtlVector<KeyValues*, CUtlMemory<KeyValues*, int> > >::CompareHelper(KeyValues* const*, KeyValues* const*)
 T CUtlString::Get() const
 T CUtlString::GetForModify()
 T CUtlString::Purge()
 T CUtlString::Set(char const*)
 T CUtlString::SetLength(int)
 T CUtlString::operator+=(char const*)
 T CUtlString::operator+=(char)
 T CUtlString::operator=(CUtlString const&)
 T CUtlString::operator=(char const*)
 T CUtlString::operator[](int) const
 T CUtlString::~CUtlString()
 T CUtlStringMap<CParticleSystemDefinition*>::operator[](char const*)
 T CUtlStringMap<CSheet*>::PurgeAndDeleteElements()
 T CUtlSymbol::CUtlSymbol(char const*)
 T CUtlSymbol::Initialize()
 T CUtlSymbol::String() const
 T CUtlSymbolDataOps::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlSymbolDataOps::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlSymbolDataOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlSymbolDataOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlSymbolTable::AddString(char const*)
 T CUtlSymbolTable::CLess::operator()(CUtlSymbolTable::CStringPoolIndex const&, CUtlSymbolTable::CStringPoolIndex const&) const
 T CUtlSymbolTable::CUtlSymbolTable(int, int, bool)
 T CUtlSymbolTable::Find(char const*) const
 T CUtlSymbolTable::RemoveAll()
 T CUtlSymbolTable::String(CUtlSymbol) const
 T CUtlSymbolTable::~CUtlSymbolTable()
 T CUtlSymbolTableMT::String(CUtlSymbol) const
 T CUtlSymbolTableMT::~CUtlSymbolTableMT()
 T CUtlVector<AIRebalanceInfo_t, CUtlMemory<AIRebalanceInfo_t, int> >::~CUtlVector()
 T CUtlVector<AI_EnemyInfo_t*, CUtlMemory<AI_EnemyInfo_t*, int> >::~CUtlVector()
 T CUtlVector<AI_MoveSuggestion_t, CUtlMemory<AI_MoveSuggestion_t, int> >::InsertMultipleBefore(int, int, AI_MoveSuggestion_t const*)
 T CUtlVector<AI_Waypoint_t, CUtlMemory<AI_Waypoint_t, int> >::SetCount(int)
 T CUtlVector<Activity, CUtlMemory<Activity, int> >::~CUtlVector()
 T CUtlVector<CActivityRemap, CUtlMemory<CActivityRemap, int> >::AddVectorToTail(CUtlVector<CActivityRemap, CUtlMemory<CActivityRemap, int> > const&)
 T CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer, int> >::InsertMultipleBefore(int, int, CAnimationLayer const*)
 T CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >::~CUtlVector()
 T CUtlVector<CCommandContext, CUtlMemory<CCommandContext, int> >::RemoveAll()
 T CUtlVector<CConstraintFloodEntry, CUtlMemory<CConstraintFloodEntry, int> >::Purge()
 T CUtlVector<CDmxElement*, CUtlMemory<CDmxElement*, int> >::~CUtlVector()
 T CUtlVector<CEventAbsoluteTag, CUtlMemory<CEventAbsoluteTag, int> >::~CUtlVector()
 T CUtlVector<CEventRelativeTag, CUtlMemory<CEventRelativeTag, int> >::InsertBefore(int, CEventRelativeTag const&)
 T CUtlVector<CEventRelativeTag, CUtlMemory<CEventRelativeTag, int> >::~CUtlVector()
 T CUtlVector<CFlexTimingTag, CUtlMemory<CFlexTimingTag, int> >::InsertBefore(int, CFlexTimingTag const&)
 T CUtlVector<CFlexTimingTag, CUtlMemory<CFlexTimingTag, int> >::~CUtlVector()
 T CUtlVector<CFuncLadder*, CUtlMemory<CFuncLadder*, int> >::~CUtlVector()
 T CUtlVector<CGameWeaponManager*, CUtlMemory<CGameWeaponManager*, int> >::~CUtlVector()
 T CUtlVector<CHandle<CAntlionRepellant>, CUtlMemory<CHandle<CAntlionRepellant>, int> >::~CUtlVector()
 T CUtlVector<CHandle<CAvoidBox>, CUtlMemory<CHandle<CAvoidBox>, int> >::~CUtlVector()
 T CUtlVector<CHandle<CAvoidSphere>, CUtlMemory<CHandle<CAvoidSphere>, int> >::~CUtlVector()
 T CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity>, int> >::~CUtlVector()
 T CUtlVector<CHandle<CBombSuppressor>, CUtlMemory<CHandle<CBombSuppressor>, int> >::~CUtlVector()
 T CUtlVector<CHandle<CEnvMicrophone>, CUtlMemory<CHandle<CEnvMicrophone>, int> >::~CUtlVector()
 T CUtlVector<CHandle<CEnvPlayerSurfaceTrigger>, CUtlMemory<CHandle<CEnvPlayerSurfaceTrigger>, int> >::~CUtlVector()
 T CUtlVector<CHandle<CInfoAPCMissileHint>, CUtlMemory<CHandle<CInfoAPCMissileHint>, int> >::~CUtlVector()
 T CUtlVector<CHandle<CMessageEntity>, CUtlMemory<CHandle<CMessageEntity>, int> >::~CUtlVector()
 T CUtlVector<CHandle<CTeamControlPointMaster>, CUtlMemory<CHandle<CTeamControlPointMaster>, int> >::~CUtlVector()
 T CUtlVector<CHandle<CTriggerMultiple>, CUtlMemory<CHandle<CTriggerMultiple>, int> >::~CUtlVector()
 T CUtlVector<CMultiplayRules::ResponseRules_t, CUtlMemory<CMultiplayRules::ResponseRules_t, int> >::Purge()
 T CUtlVector<CParticleSystemMgr::RenderCache_t, CUtlMemory<CParticleSystemMgr::RenderCache_t, int> >::Purge()
 T CUtlVector<CPassengerSeat, CUtlMemory<CPassengerSeat, int> >::~CUtlVector()
 T CUtlVector<CPropData::propdata_breakablechunk_t, CUtlMemory<CPropData::propdata_breakablechunk_t, int> >::Purge()
 T CUtlVector<CStressEntityReg*, CUtlMemory<CStressEntityReg*, int> >::~CUtlVector()
 T CUtlVector<CTeam*, CUtlMemory<CTeam*, int> >::~CUtlVector()
 T CUtlVector<CUtlBinaryBlock, CUtlMemory<CUtlBinaryBlock, int> >::~CUtlVector()
 T CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >::~CUtlVector()
 T CUtlVector<CUtlVector<CEntityDataInstantiator<CWatcherList>::HashEntry, CUtlMemory<CEntityDataInstantiator<CWatcherList>::HashEntry, int> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<CWatcherList>::HashEntry, CUtlMemory<CEntityDataInstantiator<CWatcherList>::HashEntry, int> >, int> >::Purge()
 T CUtlVector<CUtlVector<CEntityDataInstantiator<CWatcherList>::HashEntry, CUtlMemory<CEntityDataInstantiator<CWatcherList>::HashEntry, int> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<CWatcherList>::HashEntry, CUtlMemory<CEntityDataInstantiator<CWatcherList>::HashEntry, int> >, int> >::SetCount(int)
 T CUtlVector<CUtlVector<CEntityDataInstantiator<ModelScale>::HashEntry, CUtlMemory<CEntityDataInstantiator<ModelScale>::HashEntry, int> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<ModelScale>::HashEntry, CUtlMemory<CEntityDataInstantiator<ModelScale>::HashEntry, int> >, int> >::Purge()
 T CUtlVector<CUtlVector<CEntityDataInstantiator<ModelScale>::HashEntry, CUtlMemory<CEntityDataInstantiator<ModelScale>::HashEntry, int> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<ModelScale>::HashEntry, CUtlMemory<CEntityDataInstantiator<ModelScale>::HashEntry, int> >, int> >::SetCount(int)
 T CUtlVector<CUtlVector<CEntityDataInstantiator<StepSimulationData>::HashEntry, CUtlMemory<CEntityDataInstantiator<StepSimulationData>::HashEntry, int> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<StepSimulationData>::HashEntry, CUtlMemory<CEntityDataInstantiator<StepSimulationData>::HashEntry, int> >, int> >::Purge()
 T CUtlVector<CUtlVector<CEntityDataInstantiator<StepSimulationData>::HashEntry, CUtlMemory<CEntityDataInstantiator<StepSimulationData>::HashEntry, int> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<StepSimulationData>::HashEntry, CUtlMemory<CEntityDataInstantiator<StepSimulationData>::HashEntry, int> >, int> >::SetCount(int)
 T CUtlVector<CUtlVector<CEntityDataInstantiator<groundlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<groundlink_t>::HashEntry, int> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<groundlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<groundlink_t>::HashEntry, int> >, int> >::Purge()
 T CUtlVector<CUtlVector<CEntityDataInstantiator<groundlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<groundlink_t>::HashEntry, int> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<groundlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<groundlink_t>::HashEntry, int> >, int> >::SetCount(int)
 T CUtlVector<CUtlVector<CEntityDataInstantiator<physicspushlist_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<physicspushlist_t>::HashEntry, int> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<physicspushlist_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<physicspushlist_t>::HashEntry, int> >, int> >::Purge()
 T CUtlVector<CUtlVector<CEntityDataInstantiator<physicspushlist_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<physicspushlist_t>::HashEntry, int> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<physicspushlist_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<physicspushlist_t>::HashEntry, int> >, int> >::SetCount(int)
 T CUtlVector<CUtlVector<CEntityDataInstantiator<touchlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<touchlink_t>::HashEntry, int> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<touchlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<touchlink_t>::HashEntry, int> >, int> >::Purge()
 T CUtlVector<CUtlVector<CEntityDataInstantiator<touchlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<touchlink_t>::HashEntry, int> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<touchlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<touchlink_t>::HashEntry, int> >, int> >::SetCount(int)
 T CUtlVector<CUtlVector<CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry, int> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry, int> >, int> >::Purge()
 T CUtlVector<CUtlVector<CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry, int> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry, int> >, int> >::SetCount(int)
 T CUtlVector<CUtlVector<CGameSaveRestoreInfo::CHashElement, CUtlMemory<CGameSaveRestoreInfo::CHashElement, int> >, CUtlMemory<CUtlVector<CGameSaveRestoreInfo::CHashElement, CUtlMemory<CGameSaveRestoreInfo::CHashElement, int> >, int> >::SetCount(int)
 T CUtlVector<CUtlVector<CStudioHdr::CActivityToSequenceMapping::HashValueType, CUtlMemory<CStudioHdr::CActivityToSequenceMapping::HashValueType, int> >, CUtlMemory<CUtlVector<CStudioHdr::CActivityToSequenceMapping::HashValueType, CUtlMemory<CStudioHdr::CActivityToSequenceMapping::HashValueType, int> >, int> >::Purge()
 T CUtlVector<CUtlVector<CStudioHdr::CActivityToSequenceMapping::HashValueType, CUtlMemory<CStudioHdr::CActivityToSequenceMapping::HashValueType, int> >, CUtlMemory<CUtlVector<CStudioHdr::CActivityToSequenceMapping::HashValueType, CUtlMemory<CStudioHdr::CActivityToSequenceMapping::HashValueType, int> >, int> >::SetCount(int)
 T CUtlVector<CUtlVector<VoiceCommandMenuItem_t, CUtlMemory<VoiceCommandMenuItem_t, int> >, CUtlMemory<CUtlVector<VoiceCommandMenuItem_t, CUtlMemory<VoiceCommandMenuItem_t, int> >, int> >::Purge()
 T CUtlVector<CUtlVector<ikcontextikrule_t, CUtlMemory<ikcontextikrule_t, int> >, CUtlMemory<CUtlVector<ikcontextikrule_t, CUtlMemory<ikcontextikrule_t, int> >, int> >::Purge()
 T CUtlVector<CUtlVector<ikcontextikrule_t, CUtlMemory<ikcontextikrule_t, int> >, CUtlMemory<CUtlVector<ikcontextikrule_t, CUtlMemory<ikcontextikrule_t, int> >, int> >::SetCount(int)
 T CUtlVector<CVarBitVec, CUtlMemory<CVarBitVec, int> >::SetSize(int)
 T CUtlVector<IBaseProjectileAutoList*, CUtlMemory<IBaseProjectileAutoList*, int> >::~CUtlVector()
 T CUtlVector<IGameSystem*, CUtlMemory<IGameSystem*, int> >::~CUtlVector()
 T CUtlVector<IGameSystemPerFrame*, CUtlMemory<IGameSystemPerFrame*, int> >::~CUtlVector()
 T CUtlVector<IPhysicsPropAutoList*, CUtlMemory<IPhysicsPropAutoList*, int> >::~CUtlVector()
 T CUtlVector<IServerNetworkable*, CUtlMemory<IServerNetworkable*, int> >::~CUtlVector()
 T CUtlVector<ITFTeamTrainWatcher*, CUtlMemory<ITFTeamTrainWatcher*, int> >::~CUtlVector()
 T CUtlVector<ITriggerAreaCaptureAutoList*, CUtlMemory<ITriggerAreaCaptureAutoList*, int> >::~CUtlVector()
 T CUtlVector<ITriggerHurtAutoList*, CUtlMemory<ITriggerHurtAutoList*, int> >::~CUtlVector()
 T CUtlVector<ParticleChildrenInfo_t, CUtlMemory<ParticleChildrenInfo_t, int> >::~CUtlVector()
 T CUtlVector<Response, CUtlMemory<Response, int> >::AddToTail(Response const&)
 T CUtlVector<ScriptedNPCInteraction_t, CUtlMemory<ScriptedNPCInteraction_t, int> >::InsertBefore(int)
 T CUtlVector<ScriptedNPCInteraction_t, CUtlMemory<ScriptedNPCInteraction_t, int> >::InsertMultipleBefore(int, int, ScriptedNPCInteraction_t const*)
 T CUtlVector<TemplateEntityData_t*, CUtlMemory<TemplateEntityData_t*, int> >::~CUtlVector()
 T CUtlVector<activitylist_t, CUtlMemory<activitylist_t, int> >::~CUtlVector()
 T CUtlVector<char*, CUtlMemory<char*, int> >::~CUtlVector()
 T CUtlVector<eventlist_t, CUtlMemory<eventlist_t, int> >::~CUtlVector()
 T CUtlVector<vehiclescript_t, CUtlMemory<vehiclescript_t, int> >::~CUtlVector()
 T CUtlVectorDataOps<CAI_InterestTarget, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CAI_InterestTarget, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CAI_InterestTarget, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CAI_InterestTarget, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<AISquadEnemyInfo_t, CUtlMemory<AISquadEnemyInfo_t, int> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<AISquadEnemyInfo_t, CUtlMemory<AISquadEnemyInfo_t, int> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<AISquadEnemyInfo_t, CUtlMemory<AISquadEnemyInfo_t, int> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<AISquadEnemyInfo_t, CUtlMemory<AISquadEnemyInfo_t, int> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<AI_Waypoint_t, CUtlMemory<AI_Waypoint_t, int> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<AI_Waypoint_t, CUtlMemory<AI_Waypoint_t, int> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<AI_Waypoint_t, CUtlMemory<AI_Waypoint_t, int> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<AI_Waypoint_t, CUtlMemory<AI_Waypoint_t, int> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<CAI_ScriptConditionsElement, CUtlMemory<CAI_ScriptConditionsElement, int> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CAI_ScriptConditionsElement, CUtlMemory<CAI_ScriptConditionsElement, int> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CAI_ScriptConditionsElement, CUtlMemory<CAI_ScriptConditionsElement, int> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<CAI_ScriptConditionsElement, CUtlMemory<CAI_ScriptConditionsElement, int> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer, int> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer, int> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer, int> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer, int> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >, 12>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >, 12>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >, 12>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >, 12>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<CHandle<CAI_BaseNPC>, CUtlMemory<CHandle<CAI_BaseNPC>, int> >, 13>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CHandle<CAI_BaseNPC>, CUtlMemory<CHandle<CAI_BaseNPC>, int> >, 13>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CHandle<CAI_BaseNPC>, CUtlMemory<CHandle<CAI_BaseNPC>, int> >, 13>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<CHandle<CAI_BaseNPC>, CUtlMemory<CHandle<CAI_BaseNPC>, int> >, 13>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<CHandle<CBaseCombatWeapon>, CUtlMemory<CHandle<CBaseCombatWeapon>, int> >, 13>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CHandle<CBaseCombatWeapon>, CUtlMemory<CHandle<CBaseCombatWeapon>, int> >, 13>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CHandle<CBaseCombatWeapon>, CUtlMemory<CHandle<CBaseCombatWeapon>, int> >, 13>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<CHandle<CBaseCombatWeapon>, CUtlMemory<CHandle<CBaseCombatWeapon>, int> >, 13>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity>, int> >, 13>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity>, int> >, 13>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity>, int> >, 13>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity>, int> >, 13>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<CHandle<CBaseFlex>, CUtlMemory<CHandle<CBaseFlex>, int> >, 13>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CHandle<CBaseFlex>, CUtlMemory<CHandle<CBaseFlex>, int> >, 13>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CHandle<CBaseFlex>, CUtlMemory<CHandle<CBaseFlex>, int> >, 13>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<CHandle<CBaseFlex>, CUtlMemory<CHandle<CBaseFlex>, int> >, 13>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer>, int> >, 13>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer>, int> >, 13>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer>, int> >, 13>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer>, int> >, 13>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<CHandle<CFish>, CUtlMemory<CHandle<CFish>, int> >, 13>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CHandle<CFish>, CUtlMemory<CHandle<CFish>, int> >, 13>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CHandle<CFish>, CUtlMemory<CHandle<CFish>, int> >, 13>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<CHandle<CFish>, CUtlMemory<CHandle<CFish>, int> >, 13>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<CHandle<CNPC_Antlion>, CUtlMemory<CHandle<CNPC_Antlion>, int> >, 13>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CHandle<CNPC_Antlion>, CUtlMemory<CHandle<CNPC_Antlion>, int> >, 13>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CHandle<CNPC_Antlion>, CUtlMemory<CHandle<CNPC_Antlion>, int> >, 13>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<CHandle<CNPC_Antlion>, CUtlMemory<CHandle<CNPC_Antlion>, int> >, 13>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity>, int> >, 13>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity>, int> >, 13>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity>, int> >, 13>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity>, int> >, 13>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<CHandle<CSceneListManager>, CUtlMemory<CHandle<CSceneListManager>, int> >, 13>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CHandle<CSceneListManager>, CUtlMemory<CHandle<CSceneListManager>, int> >, 13>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CHandle<CSceneListManager>, CUtlMemory<CHandle<CSceneListManager>, int> >, 13>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<CHandle<CSceneListManager>, CUtlMemory<CHandle<CSceneListManager>, int> >, 13>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<CHandle<CVGuiScreen>, CUtlMemory<CHandle<CVGuiScreen>, int> >, 13>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CHandle<CVGuiScreen>, CUtlMemory<CHandle<CVGuiScreen>, int> >, 13>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CHandle<CVGuiScreen>, CUtlMemory<CHandle<CVGuiScreen>, int> >, 13>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<CHandle<CVGuiScreen>, CUtlMemory<CHandle<CVGuiScreen>, int> >, 13>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<CPassengerInfo, CUtlMemory<CPassengerInfo, int> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CPassengerInfo, CUtlMemory<CPassengerInfo, int> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CPassengerInfo, CUtlMemory<CPassengerInfo, int> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<CPassengerInfo, CUtlMemory<CPassengerInfo, int> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<Relationship_t, CUtlMemory<Relationship_t, int> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<Relationship_t, CUtlMemory<Relationship_t, int> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<Relationship_t, CUtlMemory<Relationship_t, int> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<Relationship_t, CUtlMemory<Relationship_t, int> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<ResponseContext_t, CUtlMemory<ResponseContext_t, int> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<ResponseContext_t, CUtlMemory<ResponseContext_t, int> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<ResponseContext_t, CUtlMemory<ResponseContext_t, int> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<ResponseContext_t, CUtlMemory<ResponseContext_t, int> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<SaveRestoreBlockHeader_t, CUtlMemory<SaveRestoreBlockHeader_t, int> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<SaveRestoreBlockHeader_t, CUtlMemory<SaveRestoreBlockHeader_t, int> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<SaveRestoreBlockHeader_t, CUtlMemory<SaveRestoreBlockHeader_t, int> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<SaveRestoreBlockHeader_t, CUtlMemory<SaveRestoreBlockHeader_t, int> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<ScriptedNPCInteraction_t, CUtlMemory<ScriptedNPCInteraction_t, int> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<ScriptedNPCInteraction_t, CUtlMemory<ScriptedNPCInteraction_t, int> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<ScriptedNPCInteraction_t, CUtlMemory<ScriptedNPCInteraction_t, int> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<ScriptedNPCInteraction_t, CUtlMemory<ScriptedNPCInteraction_t, int> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<UnreachableEnt_t, CUtlMemory<UnreachableEnt_t, int> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<UnreachableEnt_t, CUtlMemory<UnreachableEnt_t, int> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<UnreachableEnt_t, CUtlMemory<UnreachableEnt_t, int> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<UnreachableEnt_t, CUtlMemory<UnreachableEnt_t, int> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<float, CUtlMemory<float, int> >, 16>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<float, CUtlMemory<float, int> >, 16>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<float, CUtlMemory<float, int> >, 16>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<float, CUtlMemory<float, int> >, 16>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<globalentity_t, CUtlMemory<globalentity_t, int> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<globalentity_t, CUtlMemory<globalentity_t, int> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<globalentity_t, CUtlMemory<globalentity_t, int> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<globalentity_t, CUtlMemory<globalentity_t, int> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<int, CUtlMemory<int, int> >, 5>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<int, CUtlMemory<int, int> >, 5>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<int, CUtlMemory<int, int> >, 5>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<int, CUtlMemory<int, int> >, 5>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<magnetted_objects_t, CUtlMemory<magnetted_objects_t, int> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<magnetted_objects_t, CUtlMemory<magnetted_objects_t, int> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<magnetted_objects_t, CUtlMemory<magnetted_objects_t, int> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<magnetted_objects_t, CUtlMemory<magnetted_objects_t, int> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<modifiedconvars_t, CUtlMemory<modifiedconvars_t, int> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<modifiedconvars_t, CUtlMemory<modifiedconvars_t, int> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<modifiedconvars_t, CUtlMemory<modifiedconvars_t, int> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<modifiedconvars_t, CUtlMemory<modifiedconvars_t, int> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<physfollower_t, CUtlMemory<physfollower_t, int> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<physfollower_t, CUtlMemory<physfollower_t, int> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<physfollower_t, CUtlMemory<physfollower_t, int> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<physfollower_t, CUtlMemory<physfollower_t, int> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<template_t, CUtlMemory<template_t, int> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<template_t, CUtlMemory<template_t, int> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<template_t, CUtlMemory<template_t, int> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<template_t, CUtlMemory<template_t, int> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<thinkfunc_t, CUtlMemory<thinkfunc_t, int> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<thinkfunc_t, CUtlMemory<thinkfunc_t, int> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<thinkfunc_t, CUtlMemory<thinkfunc_t, int> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<thinkfunc_t, CUtlMemory<thinkfunc_t, int> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<vehicle_crashsound_t, CUtlMemory<vehicle_crashsound_t, int> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<vehicle_crashsound_t, CUtlMemory<vehicle_crashsound_t, int> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<vehicle_crashsound_t, CUtlMemory<vehicle_crashsound_t, int> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<vehicle_crashsound_t, CUtlMemory<vehicle_crashsound_t, int> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<vehicle_gear_t, CUtlMemory<vehicle_gear_t, int> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<vehicle_gear_t, CUtlMemory<vehicle_gear_t, int> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<vehicle_gear_t, CUtlMemory<vehicle_gear_t, int> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<vehicle_gear_t, CUtlMemory<vehicle_gear_t, int> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<washentity_t, CUtlMemory<washentity_t, int> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<washentity_t, CUtlMemory<washentity_t, int> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<washentity_t, CUtlMemory<washentity_t, int> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<washentity_t, CUtlMemory<washentity_t, int> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CVGuiScreen::Activate()
 T CVGuiScreen::CVGuiScreen()
 T CVGuiScreen::GetDataDescMap()
 T CVGuiScreen::GetPanelName() const
 T CVGuiScreen::GetServerClass()
 T CVGuiScreen::InputSetActive(inputdata_t&)
 T CVGuiScreen::InputSetInactive(inputdata_t&)
 T CVGuiScreen::KeyValue(char const*, char const*)
 T CVGuiScreen::MakeVisibleOnlyToTeammates(bool)
 T CVGuiScreen::OnRestore()
 T CVGuiScreen::Precache()
 T CVGuiScreen::SetActive(bool)
 T CVGuiScreen::SetActualSize(float, float)
 T CVGuiScreen::SetAttachmentIndex(int)
 T CVGuiScreen::SetOverlayMaterial(char const*)
 T CVGuiScreen::SetPanelName(char const*)
 T CVGuiScreen::SetTransparency(bool)
 T CVGuiScreen::ShouldTransmit(CCheckTransmitInfo const*)
 T CVGuiScreen::Spawn()
 T CVGuiScreen::UpdateTransmitState()
 T CVGuiScreen::YouForgotToImplementOrDeclareServerClass()
 T CVGuiScreen::~CVGuiScreen()
 T CV_GlobalChange_Commentary(IConVar*, char const*, float)
 T CVarBitVecBase<unsigned short>::ReallocInts(int)
 T CVarBitVecBase<unsigned short>::Resize(int, bool)
 T CVarBitVecSaveRestoreOps<CBitVec<32> >::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CVarBitVecSaveRestoreOps<CBitVec<32> >::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CVarBitVecSaveRestoreOps<CBitVec<32> >::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CVarBitVecSaveRestoreOps<CBitVec<32> >::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CVariantSaveDataOps::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CVariantSaveDataOps::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CVariantSaveDataOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CVariantSaveDataOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CVehicleSoundsParser::CVehicleSoundsParser()
 T CVehicleSoundsParser::ParseKeyValue(void*, char const*, char const*)
 T CVehicleSoundsParser::SetDefaults(void*)
 T CVehicleWaypoint::RecalculateSpline()
 T CVoiceGameMgr::ClientCommand(CBasePlayer*, CCommand const&)
 T CVoiceGameMgr::ClientConnected(edict_t*)
 T CVoiceGameMgr::Init(IVoiceGameMgrHelper*, int)
 T CVoiceGameMgr::IsPlayerIgnoringPlayer(int, int)
 T CVoiceGameMgr::Update(double)
 T CVoiceGameMgr::UpdateMasks()
 T CVoiceGameMgr::~CVoiceGameMgr()
 T CVoiceGameMgrHelper::CanPlayerHearPlayer(CBasePlayer*, CBasePlayer*, bool&)
 T CVoiceGameMgrHelper::~CVoiceGameMgrHelper()
 T CVortigauntChargeToken::CreateChargeToken(Vector const&, CBaseEntity*, CBaseEntity*)
 T CVortigauntChargeToken::FadeAndDie()
 T CVortigauntChargeToken::GetDataDescMap()
 T CVortigauntChargeToken::GetServerClass()
 T CVortigauntChargeToken::GetSteerVector(Vector const&)
 T CVortigauntChargeToken::PhysicsSolidMaskForEntity() const
 T CVortigauntChargeToken::Precache()
 T CVortigauntChargeToken::SeekThink()
 T CVortigauntChargeToken::SeekTouch(CBaseEntity*)
 T CVortigauntChargeToken::Spawn()
 T CVortigauntChargeToken::YouForgotToImplementOrDeclareServerClass()
 T CVortigauntChargeToken::~CVortigauntChargeToken()
 T CVortigauntEffectDispel::FadeAndDie()
 T CVortigauntEffectDispel::GetDataDescMap()
 T CVortigauntEffectDispel::GetServerClass()
 T CVortigauntEffectDispel::Spawn()
 T CVortigauntEffectDispel::YouForgotToImplementOrDeclareServerClass()
 T CVortigauntEffectDispel::~CVortigauntEffectDispel()
 T CVoteController* _CreateEntityTemplate<CVoteController>(CVoteController*, char const*)
 T CVoteController::CanEntityCallVote(CBasePlayer*, int&, vote_create_failed_t&)
 T CVoteController::CreateVote(int, char const*, char const*)
 T CVoteController::GetDataDescMap()
 T CVoteController::GetServerClass()
 T CVoteController::IsVoteSystemEnabled()
 T CVoteController::ResetData()
 T CVoteController::SendVoteCreationFailedMessage(vote_create_failed_t, CBasePlayer*, int)
 T CVoteController::SendVoteFailedToPassMessage(vote_create_failed_t)
 T CVoteController::SetupVote(int)
 T CVoteController::Spawn()
 T CVoteController::TrackVoteCaller(CBasePlayer*)
 T CVoteController::TryCastVote(int, char const*)
 T CVoteController::UpdateTransmitState()
 T CVoteController::VoteChoice_Increment(int)
 T CVoteController::VoteControllerThink()
 T CVoteController::YouForgotToImplementOrDeclareServerClass()
 T CVoteController::~CVoteController()
 T CVoteControllerSystem::FrameUpdatePostEntityThink()
 T CVoteControllerSystem::LevelInitPreEntity()
 T CVoteControllerSystem::~CVoteControllerSystem()
 T CWC_UpdateIgnoreList::GetDataDescMap()
 T CWC_UpdateIgnoreList::~CWC_UpdateIgnoreList()
 T CWallHealth::CreateVPhysics()
 T CWallHealth::DrawDebugTextOverlays()
 T CWallHealth::GetDataDescMap()
 T CWallHealth::KeyValue(char const*, char const*)
 T CWallHealth::ObjectCaps()
 T CWallHealth::Off()
 T CWallHealth::Precache()
 T CWallHealth::Recharge()
 T CWallHealth::Spawn()
 T CWallHealth::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CWallHealth::~CWallHealth()
 T CWatcherList::AddToList(CBaseEntity*)
 T CWatcherList::NotifyPositionChanged(CBaseEntity*)
 T CWatcherList::NotifyVPhysicsStateChanged(IPhysicsObject*, CBaseEntity*, bool)
 T CWatcherList::~CWatcherList()
 T CWaterBullet::BulletThink()
 T CWaterBullet::GetDataDescMap()
 T CWaterBullet::GetServerClass()
 T CWaterBullet::Precache()
 T CWaterBullet::Spawn(Vector const&, Vector const&)
 T CWaterBullet::Touch(CBaseEntity*)
 T CWaterBullet::YouForgotToImplementOrDeclareServerClass()
 T CWaterBullet::~CWaterBullet()
 T CWaterLODControl::CWaterLODControl()
 T CWaterLODControl::GetDataDescMap()
 T CWaterLODControl::GetServerClass()
 T CWaterLODControl::KeyValue(char const*, char const*)
 T CWaterLODControl::ObjectCaps()
 T CWaterLODControl::Spawn()
 T CWaterLODControl::UpdateTransmitState()
 T CWaterLODControl::YouForgotToImplementOrDeclareServerClass()
 T CWaterLODControl::~CWaterLODControl()
 T CWaterTraceFilter::ShouldHitEntity(IHandleEntity*, int)
 T CWateryDeathLeech::GetDataDescMap()
 T CWateryDeathLeech::LeechThink()
 T CWateryDeathLeech::Precache()
 T CWateryDeathLeech::Spawn()
 T CWateryDeathLeech::~CWateryDeathLeech()
 T CWeapon357::ActivityList(int&)
 T CWeapon357::GetServerClass()
 T CWeapon357::PrimaryAttack()
 T CWeapon357::YouForgotToImplementOrDeclareServerClass()
 T CWeapon357::~CWeapon357()
 T CWeaponAR2::ActivityList(int&)
 T CWeaponAR2::AddViewKick()
 T CWeaponAR2::DelayedAttack()
 T CWeaponAR2::Deploy()
 T CWeaponAR2::DoImpactEffect(CGameTrace&, int)
 T CWeaponAR2::GetBulletSpread()
 T CWeaponAR2::GetFireRate()
 T CWeaponAR2::GetMaxBurst()
 T CWeaponAR2::GetMinBurst()
 T CWeaponAR2::GetPrimaryAttackActivity()
 T CWeaponAR2::GetProficiencyValues()
 T CWeaponAR2::GetServerClass()
 T CWeaponAR2::GetTracerType()
 T CWeaponAR2::ItemPostFrame()
 T CWeaponAR2::Precache()
 T CWeaponAR2::Reload()
 T CWeaponAR2::SecondaryAttack()
 T CWeaponAR2::YouForgotToImplementOrDeclareServerClass()
 T CWeaponAR2::~CWeaponAR2()
 T CWeaponAnnabelle::ActivityList(int&)
 T CWeaponAnnabelle::CapabilitiesGet()
 T CWeaponAnnabelle::FillClip()
 T CWeaponAnnabelle::FinishReload()
 T CWeaponAnnabelle::GetBulletSpread()
 T CWeaponAnnabelle::GetDataDescMap()
 T CWeaponAnnabelle::GetFireRate()
 T CWeaponAnnabelle::GetMaxBurst()
 T CWeaponAnnabelle::GetMaxRestTime()
 T CWeaponAnnabelle::GetMinBurst()
 T CWeaponAnnabelle::GetMinRestTime()
 T CWeaponAnnabelle::GetServerClass()
 T CWeaponAnnabelle::ItemHolsterFrame()
 T CWeaponAnnabelle::Operator_HandleAnimEvent(animevent_t*, CBaseCombatCharacter*)
 T CWeaponAnnabelle::Precache()
 T CWeaponAnnabelle::Reload()
 T CWeaponAnnabelle::YouForgotToImplementOrDeclareServerClass()
 T CWeaponAnnabelle::~CWeaponAnnabelle()
 T CWeaponBugBait::BugbaitStickyTouch(CBaseEntity*)
 T CWeaponBugBait::CapabilitiesGet()
 T CWeaponBugBait::Deploy()
 T CWeaponBugBait::Drop(Vector const&)
 T CWeaponBugBait::FallInit()
 T CWeaponBugBait::GetDataDescMap()
 T CWeaponBugBait::GetServerClass()
 T CWeaponBugBait::HasAnyAmmo()
 T CWeaponBugBait::Holster(CBaseCombatWeapon*)
 T CWeaponBugBait::ItemPostFrame()
 T CWeaponBugBait::OnPickedUp(CBaseCombatCharacter*)
 T CWeaponBugBait::Operator_HandleAnimEvent(animevent_t*, CBaseCombatCharacter*)
 T CWeaponBugBait::Precache()
 T CWeaponBugBait::PrimaryAttack()
 T CWeaponBugBait::Reload()
 T CWeaponBugBait::SecondaryAttack()
 T CWeaponBugBait::Spawn()
 T CWeaponBugBait::ThrowGrenade(CBasePlayer*)
 T CWeaponBugBait::YouForgotToImplementOrDeclareServerClass()
 T CWeaponBugBait::~CWeaponBugBait()
 T CWeaponCrossbow::ActivityList(int&)
 T CWeaponCrossbow::CreateChargerEffects()
 T CWeaponCrossbow::Deploy()
 T CWeaponCrossbow::DoLoadEffect()
 T CWeaponCrossbow::FireBolt()
 T CWeaponCrossbow::GetServerClass()
 T CWeaponCrossbow::Holster(CBaseCombatWeapon*)
 T CWeaponCrossbow::ItemBusyFrame()
 T CWeaponCrossbow::ItemPostFrame()
 T CWeaponCrossbow::Operator_HandleAnimEvent(animevent_t*, CBaseCombatCharacter*)
 T CWeaponCrossbow::Precache()
 T CWeaponCrossbow::PrimaryAttack()
 T CWeaponCrossbow::Reload()
 T CWeaponCrossbow::SecondaryAttack()
 T CWeaponCrossbow::SendWeaponAnim(int)
 T CWeaponCrossbow::SetChargerState(CWeaponCrossbow::ChargerState_t)
 T CWeaponCrossbow::SetSkin(int)
 T CWeaponCrossbow::ToggleZoom()
 T CWeaponCrossbow::YouForgotToImplementOrDeclareServerClass()
 T CWeaponCrossbow::~CWeaponCrossbow()
 T CWeaponCrowbar::ActivityList(int&)
 T CWeaponCrowbar::AddViewKick()
 T CWeaponCrowbar::CWeaponCrowbar()
 T CWeaponCrowbar::Drop(Vector const&)
 T CWeaponCrowbar::GetDamageForActivity(Activity)
 T CWeaponCrowbar::GetFireRate()
 T CWeaponCrowbar::GetRange()
 T CWeaponCrowbar::GetServerClass()
 T CWeaponCrowbar::HandleAnimEventMeleeHit(animevent_t*, CBaseCombatCharacter*)
 T CWeaponCrowbar::Operator_HandleAnimEvent(animevent_t*, CBaseCombatCharacter*)
 T CWeaponCrowbar::SecondaryAttack()
 T CWeaponCrowbar::WeaponMeleeAttack1Condition(float, float)
 T CWeaponCrowbar::YouForgotToImplementOrDeclareServerClass()
 T CWeaponCrowbar::~CWeaponCrowbar()
 T CWeaponCubemap::GetServerClass()
 T CWeaponCubemap::HasAnyAmmo()
 T CWeaponCubemap::Precache()
 T CWeaponCubemap::Spawn()
 T CWeaponCubemap::YouForgotToImplementOrDeclareServerClass()
 T CWeaponCubemap::~CWeaponCubemap()
 T CWeaponCycler::Deploy()
 T CWeaponCycler::GetDataDescMap()
 T CWeaponCycler::GetServerClass()
 T CWeaponCycler::Holster(CBaseCombatWeapon*)
 T CWeaponCycler::PrimaryAttack()
 T CWeaponCycler::SecondaryAttack()
 T CWeaponCycler::Spawn()
 T CWeaponCycler::YouForgotToImplementOrDeclareServerClass()
 T CWeaponCycler::~CWeaponCycler()
 T CWeaponFrag::ActivityList(int&)
 T CWeaponFrag::CheckThrowPosition(CBasePlayer*, Vector const&, Vector&)
 T CWeaponFrag::Deploy()
 T CWeaponFrag::GetServerClass()
 T CWeaponFrag::Holster(CBaseCombatWeapon*)
 T CWeaponFrag::ItemPostFrame()
 T CWeaponFrag::LobGrenade(CBasePlayer*)
 T CWeaponFrag::Operator_HandleAnimEvent(animevent_t*, CBaseCombatCharacter*)
 T CWeaponFrag::Precache()
 T CWeaponFrag::PrimaryAttack()
 T CWeaponFrag::Reload()
 T CWeaponFrag::RollGrenade(CBasePlayer*)
 T CWeaponFrag::SecondaryAttack()
 T CWeaponFrag::ThrowGrenade(CBasePlayer*)
 T CWeaponFrag::YouForgotToImplementOrDeclareServerClass()
 T CWeaponFrag::~CWeaponFrag()
 T CWeaponHL2MPBase::CWeaponHL2MPBase()
 T CWeaponHL2MPBase::FallInit()
 T CWeaponHL2MPBase::FireBullets(FireBulletsInfo_t const&)
 T CWeaponHL2MPBase::GetDataDescMap()
 T CWeaponHL2MPBase::GetHL2MPWpnData() const
 T CWeaponHL2MPBase::GetPlayerOwner() const
 T CWeaponHL2MPBase::GetServerClass()
 T CWeaponHL2MPBase::IsPredicted() const
 T CWeaponHL2MPBase::Materialize()
 T CWeaponHL2MPBase::ObjectCaps()
 T CWeaponHL2MPBase::Spawn()
 T CWeaponHL2MPBase::WeaponSound(WeaponSound_t, float)
 T CWeaponHL2MPBase::YouForgotToImplementOrDeclareServerClass()
 T CWeaponHL2MPBase::~CWeaponHL2MPBase()
 T CWeaponLOSFilter::ShouldHitEntity(IHandleEntity*, int)
 T CWeaponList::LevelShutdownPostEntity()
 T CWeaponList::~CWeaponList()
 T CWeaponPhysCannon::ActivityList(int&)
 T CWeaponPhysCannon::ApplyVelocityBasedForce(CBaseEntity*, Vector const&)
 T CWeaponPhysCannon::AttachObject(CBaseEntity*, Vector const&)
 T CWeaponPhysCannon::CWeaponPhysCannon()
 T CWeaponPhysCannon::CanPickupObject(CBaseEntity*)
 T CWeaponPhysCannon::CheckForTarget()
 T CWeaponPhysCannon::CloseElements()
 T CWeaponPhysCannon::Deploy()
 T CWeaponPhysCannon::DetachObject(bool, bool)
 T CWeaponPhysCannon::DoEffect(int, Vector*)
 T CWeaponPhysCannon::DoEffectLaunch(Vector*)
 T CWeaponPhysCannon::Drop(Vector const&)
 T CWeaponPhysCannon::FindObject()
 T CWeaponPhysCannon::FindObjectInCone(Vector const&, Vector const&, float)
 T CWeaponPhysCannon::ForceDrop()
 T CWeaponPhysCannon::GetMotorSound()
 T CWeaponPhysCannon::GetServerClass()
 T CWeaponPhysCannon::GetShootSound(int) const
 T CWeaponPhysCannon::HasAnyAmmo()
 T CWeaponPhysCannon::Holster(CBaseCombatWeapon*)
 T CWeaponPhysCannon::ItemPostFrame()
 T CWeaponPhysCannon::ItemPreFrame()
 T CWeaponPhysCannon::LaunchObject(Vector const&, float)
 T CWeaponPhysCannon::OnRestore()
 T CWeaponPhysCannon::OpenElements()
 T CWeaponPhysCannon::Precache()
 T CWeaponPhysCannon::PrimaryAttack()
 T CWeaponPhysCannon::PrimaryFireEffect()
 T CWeaponPhysCannon::PuntNonVPhysics(CBaseEntity*, Vector const&, CGameTrace&)
 T CWeaponPhysCannon::PuntVPhysics(CBaseEntity*, Vector const&, CGameTrace&)
 T CWeaponPhysCannon::SecondaryAttack()
 T CWeaponPhysCannon::SetViewModel()
 T CWeaponPhysCannon::StopLoopingSounds()
 T CWeaponPhysCannon::UpdateOnRemove()
 T CWeaponPhysCannon::WeaponIdle()
 T CWeaponPhysCannon::YouForgotToImplementOrDeclareServerClass()
 T CWeaponPhysCannon::~CWeaponPhysCannon()
 T CWeaponPistol::ActivityList(int&)
 T CWeaponPistol::AddViewKick()
 T CWeaponPistol::CWeaponPistol()
 T CWeaponPistol::DryFire()
 T CWeaponPistol::GetBulletSpread()
 T CWeaponPistol::GetFireRate()
 T CWeaponPistol::GetMaxBurst()
 T CWeaponPistol::GetMinBurst()
 T CWeaponPistol::GetPrimaryAttackActivity()
 T CWeaponPistol::GetServerClass()
 T CWeaponPistol::ItemBusyFrame()
 T CWeaponPistol::ItemPostFrame()
 T CWeaponPistol::ItemPreFrame()
 T CWeaponPistol::Precache()
 T CWeaponPistol::PrimaryAttack()
 T CWeaponPistol::Reload()
 T CWeaponPistol::UpdatePenaltyTime()
 T CWeaponPistol::YouForgotToImplementOrDeclareServerClass()
 T CWeaponPistol::~CWeaponPistol()
 T CWeaponRPG::Activate()
 T CWeaponRPG::ActivityList(int&)
 T CWeaponRPG::CreateLaserPointer()
 T CWeaponRPG::Deploy()
 T CWeaponRPG::Drop(Vector const&)
 T CWeaponRPG::GetFireRate()
 T CWeaponRPG::GetMaxBurst()
 T CWeaponRPG::GetMaxRestTime()
 T CWeaponRPG::GetMinBurst()
 T CWeaponRPG::GetMinRestTime()
 T CWeaponRPG::GetNPCLaserPosition()
 T CWeaponRPG::GetServerClass()
 T CWeaponRPG::HasAnyAmmo()
 T CWeaponRPG::Holster(CBaseCombatWeapon*)
 T CWeaponRPG::IsGuiding()
 T CWeaponRPG::ItemPostFrame()
 T CWeaponRPG::Lower()
 T CWeaponRPG::NotifyRocketDied()
 T CWeaponRPG::Precache()
 T CWeaponRPG::PrimaryAttack()
 T CWeaponRPG::Reload()
 T CWeaponRPG::SetNPCLaserPosition(Vector const&)
 T CWeaponRPG::StartGuiding()
 T CWeaponRPG::StopGuiding()
 T CWeaponRPG::SuppressGuiding(bool)
 T CWeaponRPG::UpdateLaserPosition(Vector, Vector)
 T CWeaponRPG::UpdateNPCLaserPosition(Vector const&)
 T CWeaponRPG::WeaponShouldBeLowered()
 T CWeaponRPG::YouForgotToImplementOrDeclareServerClass()
 T CWeaponRPG::~CWeaponRPG()
 T CWeaponSMG1::ActivityList(int&)
 T CWeaponSMG1::AddViewKick()
 T CWeaponSMG1::Equip(CBaseCombatCharacter*)
 T CWeaponSMG1::GetBulletSpread()
 T CWeaponSMG1::GetFireRate()
 T CWeaponSMG1::GetMaxBurst()
 T CWeaponSMG1::GetMinBurst()
 T CWeaponSMG1::GetPrimaryAttackActivity()
 T CWeaponSMG1::GetProficiencyValues()
 T CWeaponSMG1::GetServerClass()
 T CWeaponSMG1::Precache()
 T CWeaponSMG1::Reload()
 T CWeaponSMG1::SecondaryAttack()
 T CWeaponSMG1::YouForgotToImplementOrDeclareServerClass()
 T CWeaponSMG1::~CWeaponSMG1()
 T CWeaponShotgun::ActivityList(int&)
 T CWeaponShotgun::CWeaponShotgun()
 T CWeaponShotgun::DryFire()
 T CWeaponShotgun::FillClip()
 T CWeaponShotgun::FinishReload()
 T CWeaponShotgun::GetBulletSpread()
 T CWeaponShotgun::GetFireRate()
 T CWeaponShotgun::GetMaxBurst()
 T CWeaponShotgun::GetMinBurst()
 T CWeaponShotgun::GetServerClass()
 T CWeaponShotgun::ItemHolsterFrame()
 T CWeaponShotgun::ItemPostFrame()
 T CWeaponShotgun::PrimaryAttack()
 T CWeaponShotgun::Pump()
 T CWeaponShotgun::Reload()
 T CWeaponShotgun::SecondaryAttack()
 T CWeaponShotgun::StartReload()
 T CWeaponShotgun::YouForgotToImplementOrDeclareServerClass()
 T CWeaponShotgun::~CWeaponShotgun()
 T CWeaponStunStick::ActivityList(int&)
 T CWeaponStunStick::Deploy()
 T CWeaponStunStick::Drop(Vector const&)
 T CWeaponStunStick::GetDamageForActivity(Activity)
 T CWeaponStunStick::GetFireRate()
 T CWeaponStunStick::GetRange()
 T CWeaponStunStick::GetServerClass()
 T CWeaponStunStick::Holster(CBaseCombatWeapon*)
 T CWeaponStunStick::ImpactEffect(CGameTrace&)
 T CWeaponStunStick::Operator_HandleAnimEvent(animevent_t*, CBaseCombatCharacter*)
 T CWeaponStunStick::Precache()
 T CWeaponStunStick::SecondaryAttack()
 T CWeaponStunStick::SetStunState(bool)
 T CWeaponStunStick::Spawn()
 T CWeaponStunStick::WeaponMeleeAttack1Condition(float, float)
 T CWeaponStunStick::YouForgotToImplementOrDeclareServerClass()
 T CWeaponStunStick::~CWeaponStunStick()
 T CWeapon_SLAM::ActivityList(int&)
 T CWeapon_SLAM::AnyUndetonatedCharges()
 T CWeapon_SLAM::CWeapon_SLAM()
 T CWeapon_SLAM::CanAttachSLAM()
 T CWeapon_SLAM::Deploy()
 T CWeapon_SLAM::GetDataDescMap()
 T CWeapon_SLAM::GetServerClass()
 T CWeapon_SLAM::Holster(CBaseCombatWeapon*)
 T CWeapon_SLAM::ItemPostFrame()
 T CWeapon_SLAM::Precache()
 T CWeapon_SLAM::PrimaryAttack()
 T CWeapon_SLAM::Reload()
 T CWeapon_SLAM::SLAMThink()
 T CWeapon_SLAM::SatchelAttach()
 T CWeapon_SLAM::SatchelDetonate()
 T CWeapon_SLAM::SatchelThrow()
 T CWeapon_SLAM::SecondaryAttack()
 T CWeapon_SLAM::SetPickupTouch()
 T CWeapon_SLAM::SlamTouch(CBaseEntity*)
 T CWeapon_SLAM::Spawn()
 T CWeapon_SLAM::StartSatchelAttach()
 T CWeapon_SLAM::StartSatchelDetonate()
 T CWeapon_SLAM::StartSatchelThrow()
 T CWeapon_SLAM::StartTripmineAttach()
 T CWeapon_SLAM::TripmineAttach()
 T CWeapon_SLAM::WeaponIdle()
 T CWeapon_SLAM::YouForgotToImplementOrDeclareServerClass()
 T CWeapon_SLAM::~CWeapon_SLAM()
 T CWeightButton::CreateVPhysics()
 T CWeightButton::GetDataDescMap()
 T CWeightButton::Spawn()
 T CWeightButton::TriggerThink()
 T CWeightButton::~CWeightButton()
 T CWindowPane::CreateWindowPane(Vector const&, QAngle const&)
 T CWindowPane::Die()
 T CWindowPane::GetDataDescMap()
 T CWindowPane::PaneTouch(CBaseEntity*)
 T CWindowPane::Precache()
 T CWindowPane::Spawn()
 T CWindowPane::~CWindowPane()
 T CWorkerThread::~CWorkerThread()
 T CWorld::CWorld()
 T CWorld::DecalTrace(CGameTrace*, char const*)
 T CWorld::GetDataDescMap()
 T CWorld::GetDisplayTitle() const
 T CWorld::GetServerClass()
 T CWorld::KeyValue(char const*, char const*)
 T CWorld::Precache()
 T CWorld::RequiredEdictIndex()
 T CWorld::SetDisplayTitle(bool)
 T CWorld::Spawn()
 T CWorld::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CWorld::VPhysicsFriction(IPhysicsObject*, float, int, int)
 T CWorld::YouForgotToImplementOrDeclareServerClass()
 T CWorld::~CWorld()
 T CWorldItem::GetDataDescMap()
 T CWorldItem::KeyValue(char const*, char const*)
 T CWorldItem::Spawn()
 T CWorldItem::~CWorldItem()
 T CWreckage::GetDataDescMap()
 T CWreckage::Precache()
 T CWreckage::Spawn()
 T CWreckage::Think()
 T CWreckage::~CWreckage()
 T CZombie::AlertSound()
 T CZombie::AttackHitSound()
 T CZombie::AttackMissSound()
 T CZombie::AttackSound()
 T CZombie::BuildScheduleTestBits()
 T CZombie::CanBecomeLiveTorso()
 T CZombie::CheckFlinches()
 T CZombie::DeathSound(CTakeDamageInfo const&)
 T CZombie::Extinguish()
 T CZombie::FootscuffSound(bool)
 T CZombie::FootstepSound(bool)
 T CZombie::GatherConditions()
 T CZombie::GetClassScheduleIdSpace()
 T CZombie::GetDataDescMap()
 T CZombie::GetHeadcrabClassname()
 T CZombie::GetHeadcrabModel()
 T CZombie::GetLegsModel()
 T CZombie::GetMoanSound(int)
 T CZombie::GetSchedulingErrorName()
 T CZombie::GetTorsoModel()
 T CZombie::IdleSound()
 T CZombie::Ignite(float, bool, float, bool)
 T CZombie::InitCustomSchedules()
 T CZombie::IsHeavyDamage(CTakeDamageInfo const&)
 T CZombie::IsSquashed(CTakeDamageInfo const&)
 T CZombie::LoadedSchedules()
 T CZombie::MoanSound(envelopePoint_t*, int)
 T CZombie::NPC_TranslateActivity(Activity)
 T CZombie::OnObstructingDoor(AILocalMoveGoal_t*, CBaseDoor*, float, AIMoveResult_t*)
 T CZombie::OnStateChange(NPC_STATE, NPC_STATE)
 T CZombie::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CZombie::PainSound(CTakeDamageInfo const&)
 T CZombie::Precache()
 T CZombie::PrescheduleThink()
 T CZombie::RunTask(Task_t const*)
 T CZombie::SelectFailSchedule(int, int, int)
 T CZombie::SelectSchedule()
 T CZombie::SetZombieModel()
 T CZombie::ShouldBecomeTorso(CTakeDamageInfo const&, float)
 T CZombie::Spawn()
 T CZombie::SquadSlotName(int)
 T CZombie::StartTask(Task_t const*)
 T CZombie::TranslateSchedule(int)
 T CZombie::~CZombie()
 T Calc3WayBlendIndices(int, int, float, float, mstudioseqdesc_t const&, int*, float*)
 T CalcBoneAdj(CStudioHdr const*, Vector*, Quaternion*, float const*, int)
 T CalcBoneDerivatives(Vector&, Vector&, matrix3x4_t const&, matrix3x4_t const&, float)
 T CalcBonePosition(int, float, Vector const&, Vector const&, mstudioanim_t const*, Vector&)
 T CalcBoneQuaternion(int, float, Quaternion const&, RadianEuler const&, Vector const&, int, Quaternion const&, mstudioanim_t const*, Quaternion&)
 T CalcClosestPointOnAABB(Vector const&, Vector const&, Vector const&, Vector&)
 T CalcClosestPointOnLine(Vector const&, Vector const&, Vector const&, Vector&, float*)
 T CalcClosestPointOnLine2D(Vector2D const&, Vector2D const&, Vector2D const&, Vector2D&, float*)
 T CalcClosestPointOnLineSegment(Vector const&, Vector const&, Vector const&, Vector&, float*)
 T CalcDistanceSqrToLine(Vector const&, Vector const&, Vector const&, float*)
 T CalcDistanceSqrToLine2D(Vector2D const&, Vector2D const&, Vector2D const&, float*)
 T CalcDistanceToLine(Vector const&, Vector const&, Vector const&, float*)
 T CalcDistanceToLine2D(Vector2D const&, Vector2D const&, Vector2D const&, float*)
 T CalcDistanceToLineSegment(Vector const&, Vector const&, Vector const&, float*)
 T CalcPoseSingle(CStudioHdr const*, Vector*, Quaternion*, mstudioseqdesc_t&, int, float, float const*, int, float)
 T CalcRopeStartingConditions(Vector const&, Vector const&, int, float, float*, float*)
 T CalcSqrDistanceToAABB(Vector const&, Vector const&, Vector const&)
 T CalculateBulletDamageForce(CTakeDamageInfo*, int, Vector const&, Vector const&, float)
 T CalculateDefaultPhysicsDamage(int, gamevcollisionevent_t*, float, bool, int&, string_t, bool)
 T CalculateExplosiveDamageForce(CTakeDamageInfo*, Vector const&, Vector const&, float)
 T CalculateMeleeDamageForce(CTakeDamageInfo*, Vector const&, Vector const&, float)
 T CalculateObjectStress(IPhysicsObject*, CBaseEntity*, vphysics_objectstress_t*)
 T CalculatePhysicsImpactDamage(int, gamevcollisionevent_t*, impactdamagetable_t const&, float, bool, int&, bool)
 T CanOverrideEnvZoomOwner(CBaseEntity*)
 T CaselessStringLessThan(char const* const&, char const* const&)
 T Catmull_Rom_Spline(Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
 T Catmull_Rom_Spline_Normalize(Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
 T Catmull_Rom_Spline_NormalizeX(Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
 T Catmull_Rom_Spline_Tangent(Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
 T CheckEmitReasonablePhysicsSpew()
 T CheckEntityVelocity(Vector&)
 T Chopper_BecomeChunks(CBaseEntity*)
 T Chopper_CreateChunk(CBaseEntity*, Vector const&, QAngle const&, char const*, bool)
 T Chopper_PrecacheChunks(CBaseEntity*)
 T CleanupDMX(CDmxElement*)
 T ClearModelSoundsCache()
 T ClearMultiDamage()
 T ClientActive(edict_t*, bool)
 T ClientCommand(CBasePlayer*, CCommand const&)
 T ClientData_Update(CBasePlayer*)
 T ClientGamePrecache()
 T ClientPrecache()
 T ClientPrint(CBasePlayer*, int, char const*, char const*, char const*, char const*, char const*)
 T ClientPutInServer(edict_t*, char const*)
 T Cmd_ShowtriggersToggle_f(CCommand const&)
 T CommandListIssues()
 T CommentarySystem_PePlayerRunCommand(CBasePlayer*, CUserCmd*)
 T ComputeRotSpeedToAlignAxes(Vector const&, Vector const&, Vector const&, float, float, float)
 T ComputeSeparatingPlane(Vector const&, QAngle const&, Vector const&, Vector const&, Vector const&, QAngle const&, Vector const&, Vector const&, float, cplane_t*)
 T ConCommand::AutoCompleteSuggest(char const*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >&)
 T ConCommand::CanAutoComplete()
 T ConCommand::ConCommand(char const*, ICommandCallback*, char const*, int, ICommandCompletionCallback*)
 T ConCommand::ConCommand(char const*, void (*)(), char const*, int, int (*)(char const*, char (*) [64]))
 T ConCommand::ConCommand(char const*, void (*)(CCommand const&), char const*, int, int (*)(char const*, char (*) [64]))
 T ConCommand::Dispatch(CCommand const&)
 T ConCommand::IsCommand() const
 T ConCommand::~ConCommand()
 T ConCommandBase::AddFlags(int)
 T ConCommandBase::CreateBase(char const*, char const*, int)
 T ConCommandBase::GetDLLIdentifier() const
 T ConCommandBase::GetHelpText() const
 T ConCommandBase::GetName() const
 T ConCommandBase::Init()
 T ConCommandBase::IsFlagSet(int) const
 T ConCommandBase::IsRegistered() const
 T ConVar::AddFlags(int)
 T ConVar::ChangeStringValue(char const*, float)
 T ConVar::ClampValue(float&)
 T ConVar::ConVar(char const*, char const*, int)
 T ConVar::ConVar(char const*, char const*, int, char const*)
 T ConVar::ConVar(char const*, char const*, int, char const*, bool, float, bool, float)
 T ConVar::ConVar(char const*, char const*, int, char const*, void (*)(IConVar*, char const*, float))
 T ConVar::Create(char const*, char const*, int, char const*, bool, float, bool, float, void (*)(IConVar*, char const*, float))
 T ConVar::GetDefault() const
 T ConVar::GetHelpText() const
 T ConVar::GetName() const
 T ConVar::Init()
 T ConVar::InternalSetFloatValue(float)
 T ConVar::InternalSetIntValue(int)
 T ConVar::InternalSetValue(char const*)
 T ConVar::IsCommand() const
 T ConVar::IsFlagSet(int) const
 T ConVar::IsRegistered() const
 T ConVar::SetValue(char const*)
 T ConVar::SetValue(float)
 T ConVar::SetValue(int)
 T ConVar::~ConVar()
 T ConVarRef::ConVarRef(IConVar*)
 T ConVarRef::ConVarRef(char const*)
 T ConVarRef::IsValid() const
 T ConVar_Register(int, IConCommandBaseAccessor*)
 T ConVar_Unregister()
 T ConcatTransforms(matrix3x4_t const&, matrix3x4_t const&, matrix3x4_t&)
 T ConceptHistory_t::operator=(ConceptHistory_t const&)
 T ConceptStringLessFunc(string_t const&, string_t const&)
 T ConnectTier1Libraries(void* (**)(char const*, int*), int)
 T ConnectTier2Libraries(void* (**)(char const*, int*), int)
 T ConnectTier3Libraries(void* (**)(char const*, int*), int)
 T ConsoleFireTargets(CBasePlayer*, char const*)
 T ConsoleKillTarget(CBasePlayer*, char const*)
 T ControlPointRoundSort(CTeamControlPointRound* const*, CTeamControlPointRound* const*)
 T CopySoundNameWithModifierToken(char*, char const*, int, char const*)
 T CopyToBodyQue(CBaseAnimating*)
 T CopyUniqueId(UniqueId_t const&, UniqueId_t*)
 T CountdownTimer::Now() const
 T CreateBoneFollowersFromRagdoll(CBaseAnimating*, CBoneFollowerManager*, vcollide_t*)
 T CreateCombineBall(Vector const&, Vector const&, float, float, float, CBaseEntity*)
 T CreateConcussiveBlast(Vector const&, Vector const&, CBaseEntity*, float)
 T CreateEntitiesInTransitionList(CSaveRestoreData*, int)
 T CreateEntityByName(char const*, int)
 T CreateEntityTransitionList(CSaveRestoreData*, int)
 T CreateGameRulesObject(char const*)
 T CreateHelicopterAvoidanceSphere(CBaseEntity*, int, float, bool)
 T CreateInfoCameraLink(CBaseEntity*, CPointCamera*)
 T CreateInterface
 T CreateKeepUpright(Vector const&, QAngle const&, CBaseEntity*, float, bool)
 T CreateLaserDot(Vector const&, CBaseEntity*, bool)
 T CreateNetworkStringTables_GameRules()
 T CreatePhysicsProp(char const*, Vector const&, Vector const&, IHandleEntity const*, bool, char const*)
 T CreatePlayerLoadSave(Vector, float, float, float)
 T CreateRagGib(char const*, Vector const&, QAngle const&, Vector const&, float, bool)
 T CreateRotorWashEmitter(Vector const&, QAngle const&, CBaseEntity*, float)
 T CreateServerRagdoll(CBaseAnimating*, int, CTakeDamageInfo const&, int, bool)
 T CreateServerRagdollAttached(CBaseAnimating*, Vector const&, int, int, IPhysicsObject*, CBaseAnimating*, int, Vector const&, int, Vector const&)
 T CreateServerRagdollSubmodel(CBaseAnimating*, char const*, Vector const&, QAngle const&, int)
 T CreateStuckTable()
 T CreateUniqueId(UniqueId_t*)
 T CreateVGuiScreen(char const*, char const*, CBaseEntity*, CBaseEntity*, int)
 T CreateWeaponInfo()
 T Criteria::Criteria(Criteria const&)
 T Criteria::operator=(Criteria const&)
 T CrossProduct(float const*, float const*, float*)
 T Cubic_Spline_NormalizeX(Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
 T DMXAlloc(unsigned long)
 T DebugConnectMsg(int, int, char const*, ...)
 T DebugConstraint(CBaseEntity*)
 T DebugDrawContactPoints(IPhysicsObject*)
 T DebugDrawLine(Vector const&, Vector const&, int, int, int, bool, float)
 T DecommitDMXMemory()
 T DefaultCompletionFunc(char const*, char (*) [64])
 T DeleteAll(AI_Waypoint_t*)
 T DeltaV(float, float, float)
 T DestroyVGuiScreen(CVGuiScreen*)
 T DetachAttachedRagdoll(CBaseEntity*)
 T DetachAttachedRagdollsForEntity(CBaseEntity*)
 T DevMsg(CAI_BaseNPC*, char const*, ...)
 T DevMsg(CAI_BaseNPC*, unsigned int, char const*, ...)
 T DisconnectTier1Libraries()
 T DisconnectTier2Libraries()
 T DisconnectTier3Libraries()
 T DispatchEffect(char const*, CEffectData const&)
 T DispatchEffect(char const*, CEffectData const&, CRecipientFilter&)
 T DispatchParticleEffect(char const*, ParticleAttachment_t, CBaseEntity*, int, bool)
 T DispatchParticleEffect(char const*, Vector, QAngle, CBaseEntity*)
 T DispatchParticleEffect(char const*, Vector, Vector, QAngle, CBaseEntity*)
 T DispatchSpawn(CBaseEntity*)
 T DmxElementUnpackStructure_t* DmxElementUnpackInit<CParticleSystemDefinition>(CParticleSystemDefinition*)
 T DoSpark(CBaseEntity*, Vector const&, int, int, bool, Vector const&)
 T DrawAllDebugOverlays()
 T DrawMessageEntities()
 T DropPrimedFragGrenade(CHL2MP_Player*, CBaseCombatWeapon*)
 T DumpEntityFactories_f()
 T DustTrail::DustTrail()
 T DustTrail::GetDataDescMap()
 T DustTrail::GetServerClass()
 T DustTrail::KeyValue(char const*, char const*)
 T DustTrail::YouForgotToImplementOrDeclareServerClass()
 T DustTrail::~DustTrail()
 T DynamicResupply_InitFromAlternateMaster(CBaseEntity*, string_t)
 T ENTINDEX(CBaseEntity*)
 T Editor_CheckVersion(char const*, int, bool)
 T Editor_CreateNode(char const*, int, float, float, float, bool)
 T Editor_CreateNodeLink(int, int, bool)
 T Editor_DeleteNode(int, bool)
 T Editor_DeleteNodeLink(int, int, bool)
 T Editor_RotateEntity(char const*, float, float, float, QAngle const&, bool)
 T Editor_SetKeyValue(char const*, float, float, float, char const*, char const*, bool)
 T EffectsPrecache(void*)
 T EmitSound_t::EmitSound_t(CSoundParameters const&)
 T EnableLaserDot(CBaseEntity*, bool)
 T EnableNoClip(CBasePlayer*)
 T EndDMXContext(bool)
 T EndRestoreEntities()
 T EntityFactoryDictionary()
 T EntityMatrix::InitFromEntity(CBaseEntity*, int)
 T EntityMatrix::InitFromEntityLocal(CBaseEntity*)
 T EntityMessageBegin(CBaseEntity*, bool)
 T EntityParticleTrailInfo_t::EntityParticleTrailInfo_t()
 T EntityParticleTrailInfo_t::NetworkStateChanged()
 T EntityParticleTrailInfo_t::NetworkStateChanged(void*)
 T EntityPhysics_CreateSolver(CBaseEntity*, CBaseEntity*, bool, float)
 T EntityTouch_Add(CBaseEntity*)
 T EvaluateConditional(char const*)
 T EventGroup::EventGroup(EventGroup const&)
 T EventList_AddEventEntry(char const*, int, bool, int)
 T EventList_Free()
 T EventList_GetEventType(int)
 T EventList_IndexForName(char const*)
 T EventList_Init()
 T EventList_NameForIndex(int)
 T EventList_RegisterPrivateEvent(char const*)
 T EventList_RegisterSharedEvents()
 T ExplosionCreate(Vector const&, QAngle const&, CBaseEntity*, int, int, bool, CHandle<CBaseEntity> const*, Class_T, float, bool, bool, int)
 T ExplosionCreate(Vector const&, QAngle const&, CBaseEntity*, int, int, bool, float, bool, bool, int)
 T ExplosionCreate(Vector const&, QAngle const&, CBaseEntity*, int, int, int, float, CBaseEntity*, int, CHandle<CBaseEntity> const*, Class_T)
 T ExtractAnimValue(int, mstudioanimvalue_t*, float, float&, float&)
 T ExtractBbox(CStudioHdr*, int, Vector&, Vector&)
 T ExtractKeyvalue(void*, typedescription_t*, int, char const*, char*, int)
 T FBoxVisible(CBaseEntity*, CBaseEntity*, Vector&, float)
 T FactoryList_Retrieve(factorylist_t&)
 T FactoryList_Store(factorylist_t const&)
 T FileWeaponInfo_t::FileWeaponInfo_t()
 T FileWeaponInfo_t::Parse(KeyValues*, char const*)
 T FilterDamageType::GetDataDescMap()
 T FilterDamageType::PassesDamageFilterImpl(CTakeDamageInfo const&)
 T FilterDamageType::PassesFilterImpl(CBaseEntity*, CBaseEntity*)
 T FilterDamageType::~FilterDamageType()
 T FilterTeam::GetDataDescMap()
 T FilterTeam::PassesFilterImpl(CBaseEntity*, CBaseEntity*)
 T FilterTeam::~FilterTeam()
 T FindAPCMissileInCone(Vector const&, Vector const&, float)
 T FindEntityForward(CBasePlayer*, bool)
 T FindHitboxSetByName(CStudioHdr*, char const*)
 T FindInList(char const**, char const*)
 T FindMaxContact(IPhysicsObject*, float, IPhysicsObject**, Vector*, Vector*)
 T FindPhysicsAnchor(string_t, hl_constraint_info_t&, int, CBaseEntity*)
 T FindPhysicsObjectByName(char const*, CBaseEntity*)
 T FindPickerAILink(CBasePlayer*)
 T FindPickerAINode(CBasePlayer*, NodeType_e)
 T FindPickerEntity(CBasePlayer*)
 T FindPooledString(char const*)
 T FindTransitionSequence(CStudioHdr*, int, int, int*)
 T FinishClientPutInServer(CHL2MP_Player*)
 T FireSystem_AddHeatInRadius(Vector const&, float, float)
 T FireSystem_GetFireDamageDimensions(CBaseEntity*, Vector*, Vector*)
 T FireTargets(char const*, CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T FixPlayerCrouchStuck(CBasePlayer*)
 T FixupAngles(QAngle&)
 T Flashlight_UseLegacyVersion()
 T FogSystem()
 T Fraggrenade_Create(Vector const&, QAngle const&, Vector const&, Vector const&, CBaseEntity*, float, bool)
 T Fraggrenade_WasCreatedByCombine(CBaseEntity const*)
 T Fraggrenade_WasPunted(CBaseEntity const*)
 T FreeContainingEntity(edict_t*)
 T FuncLadder_GetSurfaceprops(CBaseEntity*)
 T GameLogSystem()
 T GameStartFrame()
 T GameStringSystem()
 T Game_SetOneWayTransition()
 T GammaToLinear(float)
 T GetAISaveRestoreBlockHandler()
 T GetAchievementSaveRestoreBlockHandler()
 T GetAllChildren(CBaseEntity*, CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >&)
 T GetAllInHierarchy(CBaseEntity*, CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >&)
 T GetAmmoDef()
 T GetAnimationEvent(CStudioHdr*, int, animevent_t*, float, float, int)
 T GetAttachmentLocalSpace(CStudioHdr*, int, matrix3x4_t&)
 T GetAutoMultiplayerPhysicsMode(Vector, float)
 T GetBodygroup(CStudioHdr*, int, int)
 T GetBreakableDamage(CTakeDamageInfo const&, IBreakableWithPropData*)
 T GetCStringCharConversion()
 T GetCitizenResponse()
 T GetCommentarySaveRestoreBlockHandler()
 T GetConstraintAttachments(CBaseEntity*, CBaseEntity**, IPhysicsObject**)
 T GetCurrentGravity()
 T GetCurrentSkyCamera()
 T GetDeathPoseActivity(CBaseAnimating*, CTakeDamageInfo const&)
 T GetDefaultLightstyleString(int)
 T GetDefaultResponseSystemSaveRestoreBlockHandler()
 T GetEntitySaveRestoreBlockHandler()
 T GetEventQueueSaveRestoreBlockHandler()
 T GetEyePosition(CStudioHdr*, Vector&)
 T GetFileWeaponInfoFromHandle(unsigned short)
 T GetFloorZ(Vector const&)
 T GetFloorZ(Vector const&, float)
 T GetGameDescription()
 T GetGlobalTeam(int)
 T GetHintTypeDescription(CAI_Hint*)
 T GetInvalidWeaponInfoHandle()
 T GetLongFloorZ(Vector const&)
 T GetMPConceptIndexFromString(char const*)
 T GetMassEquivalent(float)
 T GetMaterialIndex(char const*)
 T GetMaterialNameFromIndex(int)
 T GetNextCommandEntity(CBasePlayer*, char const*, CBaseEntity*)
 T GetNoEscCharConversion()
 T GetNumberOfTeams()
 T GetObjectsOriginalParameters(CBaseEntity*, Vector&, QAngle&)
 T GetParticleManifest(CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >&)
 T GetParticleSystemIndex(char const*)
 T GetPhysObjSaveRestoreOps(PhysInterfaceId_t)
 T GetPhysSaveRestoreBlockHandler()
 T GetPointCameraList()
 T GetRecentNPCSpeech(recentNPCSpeech_t*)
 T GetRotorWashShooter(CBaseEntity*)
 T GetSceneDuration(char const*)
 T GetSceneFilename(CBaseEntity*)
 T GetSceneManager()
 T GetSequenceActivity(CStudioHdr*, int, int*)
 T GetSequenceActivityName(CStudioHdr*, int)
 T GetSequenceFlags(CStudioHdr*, int)
 T GetSequenceLinearMotion(CStudioHdr*, int, float const*, Vector*)
 T GetSequenceName(CStudioHdr*, int)
 T GetSkyCameraList()
 T GetSoundSaveRestoreOps()
 T GetSpringAttachments(CBaseEntity*, CBaseEntity**, IPhysicsObject**)
 T GetTemplateSaveRestoreBlockHandler()
 T GetUniverse()
 T GetVoiceGameMgr()
 T GetWeaponProficiencyName(WeaponProficiency_t)
 T GetWeaponSoundFromString(char const*)
 T GetWorldEntity()
 T GetZoomOwnerDesiredFOV(CBaseEntity*)
 T GlobalEntity_Add(char const*, char const*, GLOBALESTATE)
 T GlobalEntity_AddToCounter(int, int)
 T GlobalEntity_EnableStateUpdates(bool)
 T GlobalEntity_GetCounter(int)
 T GlobalEntity_GetIndex(char const*)
 T GlobalEntity_GetMap(int)
 T GlobalEntity_GetName(int)
 T GlobalEntity_GetNumGlobals()
 T GlobalEntity_GetState(int)
 T GlobalEntity_SetCounter(int, int)
 T GlobalEntity_SetMap(int, string_t)
 T GlobalEntity_SetState(int, GLOBALESTATE)
 T GotoSequence(CStudioHdr*, int, float, float, int, int&, float&, int&)
 T GuessDamageForce(CTakeDamageInfo*, Vector const&, Vector const&, float)
 T HLTVDirector()
 T HLTVDirectorSystem()
 T Hack_FixEscapeChars(char*)
 T Hash4(void const*)
 T HashInt(int)
 T HeadCandidate_t::Sort(HeadCandidate_t const*, HeadCandidate_t const*)
 T Hermite_Spline(Quaternion const&, Quaternion const&, Quaternion const&, float, Quaternion&)
 T Hermite_Spline(Vector const&, Vector const&, Vector const&, float, Vector&)
 T HintClear()
 T Host_Say(edict_t*, CCommand const&, bool)
 T IBaseProjectileAutoList::~IBaseProjectileAutoList()
 T IBoneSetup::AccumulatePose(Vector*, Quaternion*, int, float, float, float, CIKContext*)
 T IBoneSetup::CalcAutoplaySequences(Vector*, Quaternion*, float, CIKContext*)
 T IBoneSetup::CalcBoneAdj(Vector*, Quaternion*, float const*)
 T IBoneSetup::IBoneSetup(CStudioHdr const*, int, float const*, IPoseDebugger*)
 T IBoneSetup::InitPose(Vector*, Quaternion*)
 T IBoneSetup::~IBoneSetup()
 T IEntityListener::OnEntityCreated(CBaseEntity*)
 T IEntityListener::OnEntityDeleted(CBaseEntity*)
 T IEntityListener::OnEntitySpawned(CBaseEntity*)
 T IForEachNavArea::PostIteration(bool)
 T IGameSystem::Add(IGameSystem*)
 T IGameSystem::FrameUpdatePostEntityThinkAllSystems()
 T IGameSystem::FrameUpdatePreEntityThinkAllSystems()
 T IGameSystem::InitAllSystems()
 T IGameSystem::LevelInitPostEntityAllSystems()
 T IGameSystem::LevelInitPreEntityAllSystems(char const*)
 T IGameSystem::LevelShutdownPostEntityAllSystems()
 T IGameSystem::LevelShutdownPreClearSteamAPIContext()
 T IGameSystem::LevelShutdownPreClearSteamAPIContextAllSystems()
 T IGameSystem::LevelShutdownPreEntityAllSystems()
 T IGameSystem::OnRestoreAllSystems()
 T IGameSystem::OnSaveAllSystems()
 T IGameSystem::PostInitAllSystems()
 T IGameSystem::PreClientUpdateAllSystems()
 T IGameSystem::Remove(IGameSystem*)
 T IGameSystem::ShutdownAllSystems()
 T IGameSystem::~IGameSystem()
 T IGameSystemPerFrame::~IGameSystemPerFrame()
 T IParticleSystemQuery::GetCollisionGroupFromName(char const*)
 T IParticleSystemQuery::GetControllingObjectHitBoxInfo(CParticleCollection*, int, int, ModelHitBoxInfo_t*)
 T IParticleSystemQuery::GetLocalPlayerEyeVectors(Vector*, Vector*, Vector*)
 T IParticleSystemQuery::GetLocalPlayerPos()
 T IParticleSystemQuery::IsPointInControllingObjectHitBox(CParticleCollection*, int, Vector, bool)
 T IParticleSystemQuery::MovePointInsideControllingObject(CParticleCollection*, void*, Vector*)
 T IParticleSystemQuery::SetUpLightingEnvironment(Vector const&)
 T IPhysicsPropAutoList::IPhysicsPropAutoList(bool)
 T IPhysicsPropAutoList::~IPhysicsPropAutoList()
 T IPredictionSystem::~IPredictionSystem()
 T ITFTeamTrainWatcher::~ITFTeamTrainWatcher()
 T ITriggerAreaCaptureAutoList::~ITriggerAreaCaptureAutoList()
 T ITriggerHurtAutoList::~ITriggerHurtAutoList()
 T IceKey::IceKey(int)
 T IceKey::blockSize() const
 T IceKey::decrypt(unsigned char const*, unsigned char*) const
 T IceKey::scheduleBuild(unsigned short*, int, int const*)
 T IceKey::set(unsigned char const*)
 T IceKey::~IceKey()
 T ImpulseScale(float, float)
 T IndexModelSequences(CStudioHdr*)
 T InitBodyQue()
 T InitPose(CStudioHdr const*, Vector*, Quaternion*, int)
 T InitializeCvars()
 T InstallGameRules()
 T InstancedAutoGeneratedSoundScene(CBaseFlex*, char const*, CHandle<CBaseEntity>*)
 T InstancedScriptedScene(CBaseFlex*, char const*, CHandle<CBaseEntity>*, float, bool, AI_Response*, bool, IRecipientFilter*)
 T InterfaceReg::InterfaceReg(void* (*)(), char const*)
 T InternalSendPropArray(int, int, char const*, int (*)(void const*, int))
 T Interpolator_CurveInterpolate(int, Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
 T Interpolator_CurveInterpolatorsForType(int, int&, int&)
 T IntersectInfiniteRayWithSphere(Vector const&, Vector const&, Vector const&, float, float*, float*)
 T IntersectRayWithAACylinder(Ray_t const&, Vector const&, float, float, CBaseTrace*)
 T IntersectRayWithAAPlane(Vector const&, Vector const&, int, float, float)
 T IntersectRayWithBox(Ray_t const&, Vector const&, Vector const&, float, CBaseTrace*, float*)
 T IntersectRayWithBox(Vector const&, Vector const&, Vector const&, Vector const&, float, BoxTraceInfo_t*)
 T IntersectRayWithBox(Vector const&, Vector const&, Vector const&, Vector const&, float, CBaseTrace*, float*)
 T IntersectRayWithOBB(Ray_t const&, matrix3x4_t const&, Vector const&, Vector const&, float, CBaseTrace*)
 T IntersectRayWithOBB(Vector const&, Vector const&, matrix3x4_t const&, Vector const&, Vector const&, float, BoxTraceInfo_t*)
 T IntersectRayWithOBB(Vector const&, Vector const&, matrix3x4_t const&, Vector const&, Vector const&, float, CBaseTrace*)
 T IntersectRayWithSphere(Vector const&, Vector const&, Vector const&, float, float*, float*)
 T IntervalTimer::Now() const
 T InvalidateQueryCache()
 T InvalidateUniqueId(UniqueId_t*)
 T IsAntlion(CBaseEntity*)
 T IsAntlionWorker(CBaseEntity*)
 T IsBoxIntersectingBox(Vector const&, Vector const&, Vector const&, Vector const&)
 T IsBoxIntersectingRay(Vector const&, Vector const&, Ray_t const&, float)
 T IsBoxIntersectingRay(Vector const&, Vector const&, Vector const&, Vector const&, float)
 T IsBoxIntersectingSphere(Vector const&, Vector const&, Vector const&, float)
 T IsExplosionTraceBlocked(CGameTrace*)
 T IsInCommentaryMode()
 T IsListeningToCommentary()
 T IsOBBIntersectingOBB(Vector const&, QAngle const&, Vector const&, Vector const&, Vector const&, QAngle const&, Vector const&, Vector const&, float)
 T IsPointInBox(Vector const&, Vector const&, Vector const&)
 T IsRayIntersectingSphere(Vector const&, Vector const&, Vector const&, float, float)
 T IsRunningScriptedScene(CBaseFlex*, bool)
 T IsRunningScriptedSceneAndNotPaused(CBaseFlex*, bool)
 T IsRunningScriptedSceneWithSpeech(CBaseFlex*, bool)
 T IsRunningScriptedSceneWithSpeechAndNotPaused(CBaseFlex*, bool)
 T IsStaticPointEntity(CBaseEntity*)
 T IsUniqueIdEqual(UniqueId_t const&, UniqueId_t const&)
 T IterateActivePhysicsEntities(void (*)(CBaseEntity*))
 T KeyValues::AddSubKey(KeyValues*)
 T KeyValues::CreateKeyUsingKnownLastChild(char const*, KeyValues*)
 T KeyValues::FindKey(char const*, bool)
 T KeyValues::GetFloat(char const*, float)
 T KeyValues::GetInt(char const*, int)
 T KeyValues::GetName() const
 T KeyValues::GetString(char const*, char const*)
 T KeyValues::GetStringForSymbolClassic(int)
 T KeyValues::GetSymbolForStringClassic(char const*, bool)
 T KeyValues::GetUint64(char const*, unsigned long long)
 T KeyValues::KeyValues(char const*)
 T KeyValues::LoadFromBuffer(char const*, CUtlBuffer&, IBaseFileSystem*, char const*)
 T KeyValues::LoadFromBuffer(char const*, char const*, IBaseFileSystem*, char const*)
 T KeyValues::LoadFromFile(IBaseFileSystem*, char const*, char const*, bool)
 T KeyValues::MakeCopy() const
 T KeyValues::ParseIncludedKeys(char const*, char const*, IBaseFileSystem*, char const*, CUtlVector<KeyValues*, CUtlMemory<KeyValues*, int> >&)
 T KeyValues::ReadToken(CUtlBuffer&, bool&, bool&)
 T KeyValues::RecursiveLoadFromBuffer(char const*, CUtlBuffer&)
 T KeyValues::RecursiveMergeKeyValues(KeyValues*)
 T KeyValues::RecursiveSaveToFile(CUtlBuffer&, int, bool, bool)
 T KeyValues::RecursiveSaveToFile(IBaseFileSystem*, void*, CUtlBuffer*, int, bool, bool)
 T KeyValues::RemoveEverything()
 T KeyValues::SaveKeyToFile(KeyValues*, IBaseFileSystem*, void*, CUtlBuffer*, int, bool, bool)
 T KeyValues::SetInt(char const*, int)
 T KeyValues::SetString(char const*, char const*)
 T KeyValues::SetUint64(char const*, unsigned long long)
 T KeyValues::WriteConvertedString(IBaseFileSystem*, void*, CUtlBuffer*, char const*)
 T KeyValues::deleteThis()
 T KeyValues::operator delete(void*)
 T KeyValues::operator new(unsigned long)
 T KillTargets(char const*)
 T Kochanek_Bartels_Spline(float, float, float, Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
 T Kochanek_Bartels_Spline_NormalizeX(float, float, float, Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
 T LinkChild(CBaseEntity*, CBaseEntity*)
 T LookaheadPath(Vector const&, AI_Waypoint_t*, float, Vector&)
 T LookupActivity(CStudioHdr*, char const*)
 T LookupSequence(CStudioHdr*, char const*)
 T MD5Update(MD5Context_t*, unsigned char const*, unsigned int)
 T MD5_PseudoRandom(unsigned int)
 T MPForceCameraCallback(IConVar*, char const*, float)
 T MPTimeLimitCallback(IConVar*, char const*, float)
 T MapCycleFileChangedCallback(IConVar*, char const*, float)
 T MapEntity_GetNumKeysInEntity(char const*)
 T MapEntity_ParseAllEntities(char const*, IMapEntityFilter*, bool)
 T MapEntity_ParseEntity(CBaseEntity*&, char const*, IMapEntityFilter*)
 T MapEntity_ParseToken(char const*, char*)
 T MapEntity_PrecacheEntity(char const*, int&)
 T MapEntity_SkipToNextEntity(char const*, char*)
 T MathLib_Init(float, float, float, int, bool, bool, bool, bool)
 T MatrixAngles(matrix3x4_t const&, Quaternion&, Vector&)
 T MatrixAngles(matrix3x4_t const&, float*)
 T MatrixBuildRotateZ(VMatrix&, float)
 T MatrixBuildRotationAboutAxis(VMatrix&, Vector const&, float)
 T MatrixBuildRotationAboutAxis(Vector const&, float, matrix3x4_t&)
 T MatrixCopy(matrix3x4_t const&, matrix3x4_t&)
 T MatrixFromAngles(QAngle const&, VMatrix&)
 T MatrixGetColumn(matrix3x4_t const&, int, Vector&)
 T MatrixInitialize(matrix3x4_t&, Vector const&, Vector const&, Vector const&, Vector const&)
 T MatrixInvert(matrix3x4_t const&, matrix3x4_t&)
 T MatrixMultiply(VMatrix const&, VMatrix const&, VMatrix&)
 T MatrixSetColumn(Vector const&, int, matrix3x4_t&)
 T MatrixSetIdentity(VMatrix&)
 T MatrixToAngles(VMatrix const&, QAngle&)
 T MessageEnd()
 T MessageWriteAngles(QAngle const&)
 T MessageWriteBool(bool)
 T MessageWriteByte(int)
 T MessageWriteChar(int)
 T MessageWriteFloat(float)
 T MessageWriteLong(int)
 T MessageWriteShort(int)
 T MessageWriteString(char const*)
 T MessageWriteVec3Coord(Vector const&)
 T MessageWriteVec3Normal(Vector const&)
 T MissingSceneWarning(char const*)
 T ModelSoundsCacheInit()
 T ModelSoundsCacheShutdown()
 T ModelSoundsCache_FinishModel(CStudioHdr*)
 T ModelSoundsCache_LoadModel(char const*)
 T ModelSoundsCache_PrecacheScriptSound(char const*)
 T MoveHelperServer()
 T MovieExplosion::GetServerClass()
 T MovieExplosion::YouForgotToImplementOrDeclareServerClass()
 T MovieExplosion::~MovieExplosion()
 T MultiCoverCompare(AI_EnemyInfo_t* const*, AI_EnemyInfo_t* const*)
 T NAI_Hull::Height(int)
 T NAI_Hull::Length(int)
 T NAI_Hull::LookupId(char const*)
 T NAI_Hull::Maxs(int)
 T NAI_Hull::Mins(int)
 T NAI_Hull::Name(int)
 T NAI_Hull::SmallMaxs(int)
 T NAI_Hull::SmallMins(int)
 T NAI_Hull::Width(int)
 T NDebugOverlay::Axis(Vector const&, QAngle const&, float, bool, float)
 T NDebugOverlay::Box(Vector const&, Vector const&, Vector const&, int, int, int, int, float)
 T NDebugOverlay::BoxAngles(Vector const&, Vector const&, Vector const&, QAngle const&, int, int, int, int, float)
 T NDebugOverlay::BoxDirection(Vector const&, Vector const&, Vector const&, Vector const&, int, int, int, int, float)
 T NDebugOverlay::Circle(Vector const&, QAngle const&, float, int, int, int, int, bool, float)
 T NDebugOverlay::Circle(Vector const&, Vector const&, Vector const&, float, int, int, int, int, bool, float)
 T NDebugOverlay::Cross3D(Vector const&, Vector const&, Vector const&, int, int, int, bool, float)
 T NDebugOverlay::Cross3D(Vector const&, float, int, int, int, bool, float)
 T NDebugOverlay::Cross3DOriented(Vector const&, QAngle const&, float, int, int, int, bool, float)
 T NDebugOverlay::DrawGroundCrossHairOverlay()
 T NDebugOverlay::DrawTickMarkedLine(Vector const&, Vector const&, float, int, int, int, int, bool, float)
 T NDebugOverlay::EntityBounds(CBaseEntity const*, int, int, int, int, float)
 T NDebugOverlay::EntityText(int, int, char const*, float, int, int, int, int)
 T NDebugOverlay::EntityTextAtPosition(Vector const&, int, char const*, float, int, int, int, int)
 T NDebugOverlay::Grid(Vector const&)
 T NDebugOverlay::HorzArrow(Vector const&, Vector const&, float, int, int, int, int, bool, float)
 T NDebugOverlay::Line(Vector const&, Vector const&, int, int, int, bool, float)
 T NDebugOverlay::Sphere(Vector const&, QAngle const&, float, int, int, int, int, bool, float)
 T NDebugOverlay::SweptBox(Vector const&, Vector const&, Vector const&, Vector const&, QAngle const&, int, int, int, int, float)
 T NDebugOverlay::Text(Vector const&, char const*, bool, float)
 T NDebugOverlay::Triangle(Vector const&, Vector const&, Vector const&, int, int, int, int, bool, float)
 T NDebugOverlay::VertArrow(Vector const&, Vector const&, float, int, int, int, int, bool, float)
 T NDebugOverlay::YawArrow(Vector const&, float, float, float, int, int, int, int, bool, float)
 T NPCPhysics_CreateSolver(CAI_BaseNPC*, CBaseEntity*, bool, float)
 T NPC_CheckBrushExclude(CBaseEntity*, CBaseEntity*)
 T NPC_Rollermine_DropFromPoint(Vector const&, CBaseEntity*, char const*)
 T NPC_Rollermine_IsRollermine(CBaseEntity*)
 T NWCEdit::AirNodePlacementPosition()
 T NWCEdit::CreateAILink(CBasePlayer*)
 T NWCEdit::CreateAINode(CBasePlayer*)
 T NWCEdit::DestroyAILink(CBasePlayer*)
 T NWCEdit::DestroyAINode(CBasePlayer*)
 T NWCEdit::IsWCVersionValid()
 T NWCEdit::RememberEntityPosition(CBaseEntity*)
 T NWCEdit::UndoDestroyAINode()
 T NWCEdit::UpdateEntityPosition(CBaseEntity*)
 T OnBaseCombatWeaponCreated(CBaseCombatWeapon*)
 T OnBaseCombatWeaponDestroyed(CBaseCombatWeapon*)
 T OverrideMoveCache_ForceRepopulateList()
 T OverrideMoveCache_LevelInitPreEntity()
 T OverrideMoveCache_LevelShutdownPostEntity()
 T ParseKeyvalue(void*, typedescription_t*, int, char const*, char const*)
 T ParseParticleEffects(bool, bool)
 T ParseParticleEffectsMap(char const*, bool, IFileList*)
 T ParticleSmokeGrenade::GetDataDescMap()
 T ParticleSmokeGrenade::GetServerClass()
 T ParticleSmokeGrenade::ParticleSmokeGrenade()
 T ParticleSmokeGrenade::UpdateTransmitState()
 T ParticleSmokeGrenade::YouForgotToImplementOrDeclareServerClass()
 T ParticleSmokeGrenade::~ParticleSmokeGrenade()
 T Particle_Test_Start(CBasePlayer*, char const*, bool)
 T PassServerEntityFilter(IHandleEntity const*, IHandleEntity const*)
 T PathFindDirection(CPathTrack*, Vector const&, Vector const&)
 T PauseActorsScriptedScenes(CBaseFlex*, bool)
 T PhysAddShadow(CBaseEntity*)
 T PhysBreakSound(CBaseEntity*, IPhysicsObject*, Vector)
 T PhysCallbackDamage(CBaseEntity*, CTakeDamageInfo const&)
 T PhysCallbackDamage(CBaseEntity*, CTakeDamageInfo const&, gamevcollisionevent_t&, int)
 T PhysCallbackImpulse(IPhysicsObject*, Vector const&, Vector const&)
 T PhysCallbackRemove(IServerNetworkable*)
 T PhysCallbackSetVelocity(IPhysicsObject*, Vector const&)
 T PhysCannonAccountableForObject(CBaseCombatWeapon*, CBaseEntity*)
 T PhysCannonBeginUpgrade(CBaseAnimating*)
 T PhysCannonForceDrop(CBaseCombatWeapon*, CBaseEntity*)
 T PhysCannonGetHeldEntity(CBaseCombatWeapon*)
 T PhysCannonGetHeldObjectMass(CBaseCombatWeapon*, IPhysicsObject*)
 T PhysCleanupFrictionSounds(CBaseEntity*)
 T PhysCollisionDust(gamevcollisionevent_t*, surfacedata_t*)
 T PhysCollisionScreenShake(gamevcollisionevent_t*, int)
 T PhysCollisionSound(CBaseEntity*, IPhysicsObject*, int, int, int, float, float)
 T PhysComputeSlideDirection(IPhysicsObject*, Vector const&, Vector const&, Vector*, Vector*, float)
 T PhysCreateBbox(Vector const&, Vector const&)
 T PhysCreateVirtualTerrain(CBaseEntity*, objectparams_t const&)
 T PhysCreateWorld_Shared(CBaseEntity*, vcollide_t*, objectparams_t const&)
 T PhysDestroyObject(IPhysicsObject*, CBaseEntity*)
 T PhysDisableEntityCollisions(CBaseEntity*, CBaseEntity*)
 T PhysDisableEntityCollisions(IPhysicsObject*, IPhysicsObject*)
 T PhysEnableEntityCollisions(CBaseEntity*, CBaseEntity*)
 T PhysEnableEntityCollisions(IPhysicsObject*, IPhysicsObject*)
 T PhysEnableFloating(IPhysicsObject*, bool)
 T PhysEntityCollisionsAreDisabled(CBaseEntity*, CBaseEntity*)
 T PhysFindOrAddVehicleScript(char const*, vehicleparams_t*, vehiclesounds_t*)
 T PhysFlushVehicleScripts()
 T PhysForceClearVelocity(IPhysicsObject*)
 T PhysFrictionEffect(Vector&, Vector, float, int, int)
 T PhysFrictionSound(CBaseEntity*, IPhysicsObject*, char const*, short&, float)
 T PhysFrictionSound(CBaseEntity*, IPhysicsObject*, float, int, int)
 T PhysGetEntityMass(CBaseEntity*)
 T PhysGetListOfPenetratingEntities(CBaseEntity*, CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >&)
 T PhysGetMassCenterOverride(CBaseEntity*, vcollide_t*, solid_t&)
 T PhysGetTriggerEvent(triggerevent_t*, CBaseEntity*)
 T PhysHasContactWithOtherInDirection(IPhysicsObject*, Vector const&)
 T PhysIsFinalTick()
 T PhysIsInCallback()
 T PhysModelCreate(CBaseEntity*, int, Vector const&, QAngle const&, solid_t*)
 T PhysModelCreateBox(CBaseEntity*, Vector const&, Vector const&, Vector const&, bool)
 T PhysModelCreateCustom(CBaseEntity*, CPhysCollide const*, Vector const&, QAngle const&, char const*, bool, solid_t*)
 T PhysModelCreateOBB(CBaseEntity*, Vector const&, Vector const&, Vector const&, QAngle const&, bool)
 T PhysModelCreateUnmoveable(CBaseEntity*, int, Vector const&, QAngle const&)
 T PhysModelParseSolid(solid_t&, CBaseEntity*, int)
 T PhysModelParseSolidByIndex(solid_t&, CBaseEntity*, int, int)
 T PhysModelParseSolidByIndex(solid_t&, CBaseEntity*, vcollide_t*, int)
 T PhysOnCleanupDeleteList()
 T PhysParseSurfaceData(IPhysicsSurfaceProps*, IFileSystem*)
 T PhysRemoveShadow(CBaseEntity*)
 T PhysSetEntityGameFlags(CBaseEntity*, unsigned short)
 T PhysSetMassCenterOverride(masscenteroverride_t&)
 T PhysSolidOverride(solid_t&, string_t)
 T PhysTeleportConstrainedEntity(CBaseEntity*, IPhysicsObject*, IPhysicsObject*, Vector const&, QAngle const&, bool)
 T PhysicsCommand(CCommand const&, void (*)(CBaseEntity*))
 T PhysicsGameSystem()
 T PhysicsImpactSound(CBaseEntity*, IPhysicsObject*, int, int, int, float, float)
 T PhysicsSplash(IPhysicsFluidController*, IPhysicsObject*, CBaseEntity*)
 T Physics_RunThinkFunctions(bool)
 T Physics_SimulateEntity(CBaseEntity*)
 T Pickup_DefaultPhysGunLaunchVelocity(Vector const&, float)
 T Pickup_ForcePhysGunOpen(CBaseEntity*, CBasePlayer*)
 T Pickup_ForcePlayerToDropThisObject(CBaseEntity*)
 T Pickup_GetPreferredCarryAngles(CBaseEntity*, CBasePlayer*, matrix3x4_t&, QAngle&)
 T Pickup_OnAttemptPhysGunPickup(CBaseEntity*, CBasePlayer*, PhysGunPickup_t)
 T Pickup_OnPhysGunDrop(CBaseEntity*, CBasePlayer*, PhysGunDrop_t)
 T Pickup_OnPhysGunPickup(CBaseEntity*, CBasePlayer*, PhysGunPickup_t)
 T Pickup_PhysGunLaunchAngularImpulse(CBaseEntity*, PhysGunForce_t)
 T Pickup_PhysGunLaunchVelocity(CBaseEntity*, Vector const&, PhysGunForce_t)
 T Pickup_ShouldPuntUseLaunchForces(CBaseEntity*, PhysGunForce_t)
 T PlayLockSounds(CBaseEntity*, locksound_t*, int, int)
 T PlayerHasMegaPhysCannon()
 T PlayerMove()
 T PlayerPickupControllerIsHoldingEntity(CBaseEntity*, CBaseEntity*)
 T PlayerPickupGetHeldObjectMass(CBaseEntity*, IPhysicsObject*)
 T PlayerPickupObject(CBasePlayer*, CBaseEntity*)
 T PointCameraSetupVisibility(CBaseEntity*, int, unsigned char*, int)
 T PointOnLineNearestPoint(Vector const&, Vector const&, Vector const&)
 T PostFrameNavigationSystem()
 T PostSimulation_SetVelocityEvent(IPhysicsObject*, Vector const&)
 T PrecacheCustomResponseSystem(char const*)
 T PrecacheFileWeaponInfoDatabase(IFileSystem*, unsigned char const*)
 T PrecacheInstancedScene(char const*)
 T PrecacheMaterial(char const*)
 T PrecacheParticleSystem(char const*)
 T PrecachePhysicsSounds()
 T PrecachePointTemplates()
 T PrecacheStandardParticleSystems()
 T PrecacheVGuiScreen(char const*)
 T ProcessQueryCacheUpdate(QueryCacheUpdateRecord_t&)
 T PropBreakableCapEdictsOnCreateAll(int, IPhysicsObject*, breakablepropparams_t const&, CBaseEntity*, int)
 T PropBreakableCreateAll(int, IPhysicsObject*, Vector const&, QAngle const&, Vector const&, Vector const&, float, float, int, CBaseEntity*, bool)
 T PropBreakableCreateAll(int, IPhysicsObject*, breakablepropparams_t const&, CBaseEntity*, int, bool, bool)
 T PropBreakablePrecacheAll(string_t)
 T PropIsGib(CBaseEntity*)
 T Q_UTF32ToUTF8(wchar_t const*, char*, int, EStringConvertErrorPolicy)
 T Q_log2(int)
 T QuaternionAlign(Quaternion const&, Quaternion const&, Quaternion&)
 T QuaternionAngleDiff(Quaternion const&, Quaternion const&)
 T QuaternionAngles(Quaternion const&, QAngle&)
 T QuaternionAngles(Quaternion const&, RadianEuler&)
 T QuaternionBlend(Quaternion const&, Quaternion const&, float, Quaternion&)
 T QuaternionBlendNoAlign(Quaternion const&, Quaternion const&, float, Quaternion&)
 T QuaternionIdentityBlend(Quaternion const&, float, Quaternion&)
 T QuaternionMatrix(Quaternion const&, Vector const&, matrix3x4_t&)
 T QuaternionMatrix(Quaternion const&, matrix3x4_t&)
 T QuaternionMult(Quaternion const&, Quaternion const&, Quaternion&)
 T QuaternionNormalize(Quaternion&)
 T QuaternionScale(Quaternion const&, float, Quaternion&)
 T QuaternionSlerp(Quaternion const&, Quaternion const&, float, Quaternion&)
 T QuaternionSlerpNoAlign(Quaternion const&, Quaternion const&, float, Quaternion&)
 T QueryCacheEntry_t::IssueQuery()
 T RadiusDamage(CTakeDamageInfo const&, Vector const&, float, int, CBaseEntity*)
 T RagdollActivate(ragdoll_t&, vcollide_t*, int, bool)
 T RagdollApplyAnimationAsVelocity(ragdoll_t&, matrix3x4_t const*, matrix3x4_t const*, float)
 T RagdollCreate(ragdoll_t&, ragdollparams_t const&, IPhysicsEnvironment*)
 T RagdollDestroy(ragdoll_t&)
 T RagdollGetBoneMatrix(ragdoll_t const&, CBoneAccessor&, int)
 T RagdollIsAsleep(ragdoll_t const&)
 T RagdollManager_SaveImportant(CAI_BaseNPC*)
 T RagdollSetupCollisions(ragdoll_t&, vcollide_t*, int)
 T RagdollSolveSeparation(ragdoll_t&, CBaseEntity*)
 T Ragdoll_GetAngleOverrideString(char*, int, CBaseEntity*)
 T Ragdoll_GetRagdoll(CBaseEntity*)
 T Ragdoll_IsPropRagdoll(CBaseEntity*)
 T RandomInterval(interval_t const&)
 T RangeCompressor(float, float, float, float)
 T ReadDMXHeader(CUtlBuffer&, char*, int, int&, char*, int, int&)
 T ReadEncryptedKVFile(IFileSystem*, char const*, unsigned char const*, bool)
 T ReadInterval(char const*)
 T ReadUsercmd(bf_read*, CUserCmd*, CUserCmd*)
 T ReadWeaponDataFromFileForSlot(IFileSystem*, char const*, unsigned short*, unsigned char const*)
 T RegisterHapticMessages()
 T RegisterUserMessages()
 T ReloadSceneFromDisk(CBaseEntity*)
 T RemapAngleRange(float, float, float)
 T RemapViewAngles(ViewSmoothingData_t*, QAngle&)
 T RemoveActorFromScriptedScenes(CBaseFlex*, bool, bool, char const*)
 T ReportPositionChanged(CBaseEntity*)
 T ReportVPhysicsStateChanged(IPhysicsObject*, CBaseEntity*, bool)
 T ResetActivityIndexes(CStudioHdr*)
 T ResetEventIndexes(CStudioHdr*)
 T ResetGlobalState()
 T ResetWindspeed()
 T RespawnEntities()
 T ResponseGroup::ResponseGroup(ResponseGroup const&)
 T ResponseGroup::operator=(ResponseGroup const&)
 T RestoreGlobalState(CSaveRestoreData*)
 T ResumeActorsScriptedScenes(CBaseFlex*, bool)
 T RocketTrail::CreateRocketTrail()
 T RocketTrail::FollowEntity(CBaseEntity*, char const*)
 T RocketTrail::GetDataDescMap()
 T RocketTrail::GetServerClass()
 T RocketTrail::RocketTrail()
 T RocketTrail::SetEmit(bool)
 T RocketTrail::YouForgotToImplementOrDeclareServerClass()
 T RocketTrail::~RocketTrail()
 T RotationDelta(QAngle const&, QAngle const&, QAngle*)
 T RotationDeltaAxisAngle(QAngle const&, QAngle const&, Vector&, float&)
 T Rule::Rule(Rule const&)
 T Rule::operator=(Rule const&)
 T Rule::~Rule()
 T SENTENCEG_GetIndex(char const*)
 T SENTENCEG_Init()
 T SENTENCEG_Lookup(char const*)
 T SENTENCEG_PickRndSz(char const*)
 T SENTENCEG_PlayRndI(edict_t*, int, float, soundlevel_t, int, int)
 T SENTENCEG_PlayRndSz(edict_t*, char const*, float, soundlevel_t, int, int)
 T SENTENCEG_PlaySentenceIndex(edict_t*, int, float, soundlevel_t, int, int)
 T SENTENCEG_PlaySequentialSz(edict_t*, char const*, float, soundlevel_t, int, int, int, int)
 T SaveGlobalState(CSaveRestoreData*)
 T SaveInit(int)
 T ScaleBones(CStudioHdr const*, Quaternion*, Vector*, int, float, int)
 T SceneManager_ClientActive(CBasePlayer*)
 T Scene_Printf(char const*, ...)
 T ScriptInfo_CalculateFOV(float, float, int, int, bool)
 T SeatPrioritySort(CPassengerSeatTransition const*, CPassengerSeatTransition const*)
 T SeedRandSIMD(unsigned int)
 T SelectDeathPoseActivityAndFrame(CBaseAnimating*, CTakeDamageInfo const&, int, Activity&, int&)
 T SelectHeaviestSequence(CStudioHdr*, int)
 T SelectWeightedSequence(CStudioHdr*, int, int)
 T SendProp::SendProp()
 T SendProp::~SendProp()
 T SendPropAngle(char const*, int, int, int, int, void (*)(SendProp const*, void const*, void const*, DVariant*, int, int))
 T SendPropArray3(char const*, int, int, int, SendProp, void* (*)(SendProp const*, void const*, void const*, CSendProxyRecipients*, int))
 T SendPropBool(char const*, int, int)
 T SendPropDataTable(char const*, int, SendTable*, void* (*)(SendProp const*, void const*, void const*, CSendProxyRecipients*, int))
 T SendPropEHandle(char const*, int, int, int, void (*)(SendProp const*, void const*, void const*, DVariant*, int, int))
 T SendPropExclude(char const*, char const*)
 T SendPropFloat(char const*, int, int, int, int, float, float, void (*)(SendProp const*, void const*, void const*, DVariant*, int, int))
 T SendPropInt(char const*, int, int, int, int, void (*)(SendProp const*, void const*, void const*, DVariant*, int, int))
 T SendPropIntWithMinusOneFlag(char const*, int, int, int, void (*)(SendProp const*, void const*, void const*, DVariant*, int, int))
 T SendPropPredictableId(char const*, int, int)
 T SendPropQAngles(char const*, int, int, int, int, void (*)(SendProp const*, void const*, void const*, DVariant*, int, int))
 T SendPropString(char const*, int, int, int, void (*)(SendProp const*, void const*, void const*, DVariant*, int, int))
 T SendPropStringT(char const*, int, int)
 T SendPropTime(char const*, int, int)
 T SendPropUtlVector(char*, int, int, void (*)(void*, int, int), int, SendProp, void* (*)(SendProp const*, void const*, void const*, CSendProxyRecipients*, int))
 T SendPropVector(char const*, int, int, int, int, float, float, void (*)(SendProp const*, void const*, void const*, DVariant*, int, int))
 T SendProxyArrayLength_PlayerArray(void const*, int)
 T SendProxy_AngleToFloat(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_Angles(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_AnimTime(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_ClientSideAnimation(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_Color32ToInt(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_CropFlagsToPlayerFlagBitsLength(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_DataTablePtrToDataTable(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_DataTableToDataTable(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_EHandleToInt(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_FishAngle(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_FlexWeights(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_FloatToFloat(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_FuncRotatingAngle(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_FuncRotatingOrigin(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_FuncRotatingSimulationTime(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_HL2GameRules(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_HL2MPRules(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_Int16ToInt32(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_Int32ToInt32(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_Int8ToInt32(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_IntAddOne(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_LengthTable(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_OnlyToTeam(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_Origin(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_PlayerList(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_QAngles(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_SendActiveLocalWeaponDataTable(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_SendBaseCombatCharacterLocalDataTable(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_SendLocalDataTable(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_SendLocalWeaponDataTable(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_SendNonLocalWeaponDataTable(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_ShortAddOne(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_SimulationTime(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_StringT_To_String(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_StringToString(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_String_tToString(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_TeamplayRoundBasedRules(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_TestProxyToggle(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_UInt16ToInt32(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_UInt32ToInt32(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_UInt8ToInt32(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_UtlVectorElement(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_UtlVectorElement_DataTable(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_UtlVectorLength(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_VectorToVector(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendTable::Construct(SendProp*, int, char const*)
 T SendTable::SendTable()
 T SendTable::SendTable(SendProp*, int, char const*)
 T SendTable::~SendTable()
 T ServiceEventQueue()
 T SetActivityForSequence(CStudioHdr*, int)
 T SetBodygroup(CStudioHdr*, int&, int, int)
 T SetDebugBits(CBasePlayer*, char const*, int)
 T SetEventIndexForSequence(mstudioseqdesc_t&)
 T SetIdentityMatrix(matrix3x4_t&)
 T SetLaserDotTarget(CBaseEntity*, CBaseEntity*)
 T SetSerializationDelimiter(CUtlCharConversion*)
 T SetupLightNormalFromProps(QAngle const&, float, float, Vector&)
 T SetupMatrixAngles(QAngle const&)
 T SetupParentsForSpawnList(int, HierarchicalSpawn_t*)
 T SharedRandomFloat(char const*, float, float, int)
 T SharedRandomInt(char const*, int, int, int)
 T SharedVehicleViewSmoothing(CBasePlayer*, Vector*, QAngle*, bool, bool, Vector const&, ViewSmoothingData_t*, float*)
 T ShouldRemoveThisRagdoll(CBaseAnimating*)
 T SignbitsForPlane(cplane_t*)
 T SimThink_EntityChanged(CBaseEntity*)
 T SimThink_ListCopy(CBaseEntity**, int)
 T SimThink_ListCount()
 T SinCos(float, float*, float*)
 T SlerpBones(CStudioHdr const*, Quaternion*, Vector*, mstudioseqdesc_t&, int, QuaternionAligned const*, Vector const*, float, int)
 T SmokeTrail::CreateSmokeTrail()
 T SmokeTrail::FollowEntity(CBaseEntity*, char const*)
 T SmokeTrail::GetDataDescMap()
 T SmokeTrail::GetServerClass()
 T SmokeTrail::KeyValue(char const*, char const*)
 T SmokeTrail::SmokeTrail()
 T SmokeTrail::YouForgotToImplementOrDeclareServerClass()
 T SmokeTrail::~SmokeTrail()
 T SolveQuadratic(float, float, float, float&, float&)
 T SoundCommandLessFunc(SoundCommand_t* const&, SoundCommand_t* const&)
 T SoundEmitterSystem()
 T SpawnAllEntities(int, HierarchicalSpawn_t*, bool)
 T SpawnBlood(Vector, Vector const&, int, float)
 T SpawnHierarchicalList(int, HierarchicalSpawn_t*, bool)
 T Spline_Normalize(Vector const&, Vector const&, Vector const&, Vector const&, Vector&, Vector&)
 T SplitContext(char const*, char*, int, char*, int, float*)
 T SporeExplosion::CreateSporeExplosion()
 T SporeExplosion::GetDataDescMap()
 T SporeExplosion::GetServerClass()
 T SporeExplosion::InputDisable(inputdata_t&)
 T SporeExplosion::InputEnable(inputdata_t&)
 T SporeExplosion::Spawn()
 T SporeExplosion::SporeExplosion()
 T SporeExplosion::YouForgotToImplementOrDeclareServerClass()
 T SporeExplosion::~SporeExplosion()
 T SporeTrail::GetDataDescMap()
 T SporeTrail::GetServerClass()
 T SporeTrail::SporeTrail()
 T SporeTrail::YouForgotToImplementOrDeclareServerClass()
 T SporeTrail::~SporeTrail()
 T SquadSortFunc(SquadMemberInfo_t const*, SquadMemberInfo_t const*)
 T StandardFilterRules(IHandleEntity*, int)
 T SteamInternal_Init_SteamAppList(ISteamAppList**)
 T SteamInternal_Init_SteamApps(ISteamApps**)
 T SteamInternal_Init_SteamClient(ISteamClient**)
 T SteamInternal_Init_SteamController(ISteamController**)
 T SteamInternal_Init_SteamFriends(ISteamFriends**)
 T SteamInternal_Init_SteamGameSearch(ISteamGameSearch**)
 T SteamInternal_Init_SteamGameServer(ISteamGameServer**)
 T SteamInternal_Init_SteamGameServerApps(ISteamApps**)
 T SteamInternal_Init_SteamGameServerHTTP(ISteamHTTP**)
 T SteamInternal_Init_SteamGameServerInventory(ISteamInventory**)
 T SteamInternal_Init_SteamGameServerNetworking(ISteamNetworking**)
 T SteamInternal_Init_SteamGameServerStats(ISteamGameServerStats**)
 T SteamInternal_Init_SteamGameServerUGC(ISteamUGC**)
 T SteamInternal_Init_SteamGameServerUtils(ISteamUtils**)
 T SteamInternal_Init_SteamHTMLSurface(ISteamHTMLSurface**)
 T SteamInternal_Init_SteamHTTP(ISteamHTTP**)
 T SteamInternal_Init_SteamInput(ISteamInput**)
 T SteamInternal_Init_SteamInventory(ISteamInventory**)
 T SteamInternal_Init_SteamMatchmaking(ISteamMatchmaking**)
 T SteamInternal_Init_SteamMatchmakingServers(ISteamMatchmakingServers**)
 T SteamInternal_Init_SteamMusic(ISteamMusic**)
 T SteamInternal_Init_SteamMusicRemote(ISteamMusicRemote**)
 T SteamInternal_Init_SteamNetworking(ISteamNetworking**)
 T SteamInternal_Init_SteamParentalSettings(ISteamParentalSettings**)
 T SteamInternal_Init_SteamRemoteStorage(ISteamRemoteStorage**)
 T SteamInternal_Init_SteamScreenshots(ISteamScreenshots**)
 T SteamInternal_Init_SteamUGC(ISteamUGC**)
 T SteamInternal_Init_SteamUser(ISteamUser**)
 T SteamInternal_Init_SteamUserStats(ISteamUserStats**)
 T SteamInternal_Init_SteamUtils(ISteamUtils**)
 T SteamInternal_Init_SteamVideo(ISteamVideo**)
 T StopScriptedScene(CBaseFlex*, CHandle<CBaseEntity>)
 T StrLess(char const* const&, char const* const&)
 T Studio_AlignIKMatrix(matrix3x4_t&, Vector const&)
 T Studio_AnimMovement(mstudioanimdesc_t*, float, float, Vector&, QAngle&)
 T Studio_AnimPosition(mstudioanimdesc_t*, float, Vector&, QAngle&)
 T Studio_BoneIndexByName(CStudioHdr const*, char const*)
 T Studio_BuildMatrices(CStudioHdr const*, QAngle const&, Vector const&, Vector const*, Quaternion const*, int, float, matrix3x4_t*, int)
 T Studio_CPS(CStudioHdr const*, mstudioseqdesc_t&, int, float const*)
 T Studio_CalcBoneToBoneTransform(CStudioHdr const*, int, int, matrix3x4_t&)
 T Studio_CreateBoneCache(bonecacheparams_t&)
 T Studio_DestroyBoneCache(memhandle_t__*)
 T Studio_Duration(CStudioHdr const*, int, float const*)
 T Studio_FindAnimDistance(mstudioanimdesc_t*, float)
 T Studio_FindAttachment(CStudioHdr const*, char const*)
 T Studio_FindSeqDistance(CStudioHdr const*, int, float const*, float)
 T Studio_GetBoneCache(memhandle_t__*)
 T Studio_GetController(CStudioHdr const*, int, float)
 T Studio_GetDefaultSurfaceProps(CStudioHdr*)
 T Studio_GetKeyValueText(CStudioHdr const*, int)
 T Studio_GetMass(CStudioHdr*)
 T Studio_GetPoseParameter(CStudioHdr const*, int, float)
 T Studio_IKAnimationError(CStudioHdr const*, mstudioikrule_t*, mstudioanimdesc_t const*, float, Vector&, Quaternion&, float&)
 T Studio_IKRuleWeight(mstudioikrule_t&, mstudioanimdesc_t const*, float, int&, float&)
 T Studio_IKSequenceError(CStudioHdr const*, mstudioseqdesc_t&, int, float, int, float const*, mstudioanimdesc_t**, float*, ikcontextikrule_t&)
 T Studio_InvalidateBoneCache(memhandle_t__*)
 T Studio_LocalPoseParameter(CStudioHdr const*, float const*, mstudioseqdesc_t&, int, int, float&, int&)
 T Studio_SeqAnims(CStudioHdr const*, mstudioseqdesc_t&, int, float const*, mstudioanimdesc_t**, float*)
 T Studio_SeqMovement(CStudioHdr const*, int, float, float, float const*, Vector&, QAngle&)
 T Studio_SeqVelocity(CStudioHdr const*, int, float, float const*, Vector&)
 T Studio_SetController(CStudioHdr const*, int, float, float&)
 T Studio_SetPoseParameter(CStudioHdr const*, int, float, float&)
 T Studio_SolveIK(int, int, int, Vector&, Vector&, Vector&, matrix3x4_t*)
 T Studio_SolveIK(int, int, int, Vector&, matrix3x4_t*)
 T Studio_SolveIK(mstudioikchain_t*, Vector&, matrix3x4_t*)
 T SweepBoxToStudio(IPhysicsSurfaceProps*, Ray_t const&, CStudioHdr*, mstudiohitboxset_t*, matrix3x4_t**, int, CGameTrace&)
 T Sys_LoadLibrary(char const*, Sys_Flags)
 T Sys_LoadModule(char const*, Sys_Flags)
 T TE_ArmorRicochet(IRecipientFilter&, float, Vector const*, Vector const*)
 T TE_BSPDecal(IRecipientFilter&, float, Vector const*, int, int)
 T TE_BeamEntPoint(IRecipientFilter&, float, int, Vector const*, int, Vector const*, int, int, int, int, float, float, float, int, float, int, int, int, int, int)
 T TE_BeamEnts(IRecipientFilter&, float, int, int, int, int, int, int, float, float, float, int, float, int, int, int, int, int)
 T TE_BeamFollow(IRecipientFilter&, float, int, int, int, float, float, float, float, float, float, float, float)
 T TE_BeamLaser(IRecipientFilter&, float, int, int, int, int, int, int, float, float, float, int, float, int, int, int, int, int)
 T TE_BeamPoints(IRecipientFilter&, float, Vector const*, Vector const*, int, int, int, int, float, float, float, int, float, int, int, int, int, int)
 T TE_BeamRing(IRecipientFilter&, float, int, int, int, int, int, int, float, float, int, float, int, int, int, int, int, int)
 T TE_BeamRingPoint(IRecipientFilter&, float, Vector const&, float, float, int, int, int, int, float, float, int, float, int, int, int, int, int, int)
 T TE_BeamSpline(IRecipientFilter&, float, int, Vector*)
 T TE_BloodSprite(IRecipientFilter&, float, Vector const*, Vector const*, int, int, int, int, int)
 T TE_BloodStream(IRecipientFilter&, float, Vector const*, Vector const*, int, int, int, int, int)
 T TE_BreakModel(IRecipientFilter&, float, Vector const&, QAngle const&, Vector const&, Vector const&, int, int, int, float, int)
 T TE_BubbleTrail(IRecipientFilter&, float, Vector const*, Vector const*, float, int, int, float)
 T TE_Bubbles(IRecipientFilter&, float, Vector const*, Vector const*, float, int, int, float)
 T TE_ClientProjectile(IRecipientFilter&, float, Vector const*, Vector const*, int, int, CBaseEntity*)
 T TE_ConcussiveExplosion(IRecipientFilter&, float, Vector const*, float, int, int, Vector const*)
 T TE_Decal(IRecipientFilter&, float, Vector const*, Vector const*, int, int, int)
 T TE_DispatchEffect(IRecipientFilter&, float, Vector const&, char const*, CEffectData const&)
 T TE_Dust(IRecipientFilter&, float, Vector const&, Vector const&, float, float)
 T TE_DynamicLight(IRecipientFilter&, float, Vector const*, int, int, int, int, float, float, float)
 T TE_EnergySplash(IRecipientFilter&, float, Vector const*, Vector const*, bool)
 T TE_Explosion(IRecipientFilter&, float, Vector const*, int, float, int, int, int, int, Vector const*, unsigned char)
 T TE_Fizz(IRecipientFilter&, float, CBaseEntity const*, int, int, int)
 T TE_FootprintDecal(IRecipientFilter&, float, Vector const*, Vector const*, int, int, unsigned char)
 T TE_GaussExplosion(IRecipientFilter&, float, Vector const&, Vector const&, int)
 T TE_GlowSprite(IRecipientFilter&, float, Vector const*, int, float, float, int)
 T TE_HL2MPFireBullets(int, Vector const&, Vector const&, int, int, int, float, bool, bool)
 T TE_KillPlayerAttachments(IRecipientFilter&, float, int)
 T TE_LargeFunnel(IRecipientFilter&, float, Vector const*, int, int)
 T TE_MetalSparks(IRecipientFilter&, float, Vector const*, Vector const*)
 T TE_MuzzleFlash(IRecipientFilter&, float, Vector const&, QAngle const&, float, int)
 T TE_PhysicsProp(IRecipientFilter&, float, int, int, Vector const&, QAngle const&, Vector const&, int, int)
 T TE_PlayerDecal(IRecipientFilter&, float, Vector const*, int, int)
 T TE_ProjectDecal(IRecipientFilter&, float, Vector const*, QAngle const*, float, int)
 T TE_ShatterSurface(IRecipientFilter&, float, Vector const*, QAngle const*, Vector const*, Vector const*, float, float, float, ShatterSurface_t, int, int, int, int, int, int)
 T TE_ShowLine(IRecipientFilter&, float, Vector const*, Vector const*)
 T TE_Smoke(IRecipientFilter&, float, Vector const*, int, float, int)
 T TE_Sparks(IRecipientFilter&, float, Vector const*, int, int, Vector const*)
 T TE_Sprite(IRecipientFilter&, float, Vector const*, int, float, int)
 T TE_SpriteSpray(IRecipientFilter&, float, Vector const*, Vector const*, int, int, float, int)
 T TE_WorldDecal(IRecipientFilter&, float, Vector const*, int)
 T TaskFailureToString(int)
 T Templates_Add(CBaseEntity*, char const*, int)
 T Templates_FindByIndex(int)
 T Templates_FindByTargetName(char const*)
 T Templates_GetEntityIOFixedMapData(int)
 T Templates_GetStringSize(int)
 T Templates_IndexRequiresEntityIOFixup(int)
 T Templates_ReconnectIOForGroup(CPointTemplate*)
 T Templates_StartUniqueInstance()
 T Test_CreateEntity(CCommand const&)
 T Test_InitRandomEntitySpawner(CCommand const&)
 T Test_ProxyToggle_EnableProxy(CCommand const&)
 T Test_ProxyToggle_SetValue(CCommand const&)
 T Test_RandomPlayerPosition()
 T Test_RandomizeInPVS(CCommand const&)
 T Test_RemoveAllRandomEntities()
 T Test_SpawnRandomEntities(CCommand const&)
 T TextToSoundLevel(char const*)
 T ThinkRebalanceCompare(AIRebalanceInfo_t const*, AIRebalanceInfo_t const*)
 T TimedEventMgr_LessFunc(CEventRegister* const&, CEventRegister* const&)
 T TimescaleChanged(IConVar*, char const*, float)
 T TraceToStudio(IPhysicsSurfaceProps*, Ray_t const&, CStudioHdr*, mstudiohitboxset_t*, matrix3x4_t**, int, Vector const&, float, CGameTrace&)
 T TrainSpeed(int, int)
 T TransferChildren(CBaseEntity*, CBaseEntity*)
 T TransferPhysicsObject(CBaseEntity*, CBaseEntity*, bool)
 T TransformAABB(matrix3x4_t const&, Vector const&, Vector const&, Vector&, Vector&)
 T TransformAnglesToLocalSpace(QAngle const&, matrix3x4_t const&)
 T TransformAnglesToWorldSpace(QAngle const&, matrix3x4_t const&)
 T UTIL_AddDebugLine(Vector const&, Vector const&, bool, bool)
 T UTIL_BloodDecalTrace(CGameTrace*, int)
 T UTIL_BloodDrips(Vector const&, Vector const&, int, int)
 T UTIL_BloodImpact(Vector const&, Vector const&, int, int)
 T UTIL_BloodSpray(Vector const&, Vector const&, int, int, int)
 T UTIL_BloodStream(Vector const&, Vector const&, int, int)
 T UTIL_BubbleTrail(Vector const&, Vector const&, int)
 T UTIL_Bubbles(Vector const&, Vector const&, int)
 T UTIL_CheckBottom(CBaseEntity*, ITraceFilter*, float)
 T UTIL_ClearTrace(CGameTrace&)
 T UTIL_ClientPVSIsExpanded()
 T UTIL_ClientPrintAll(int, char const*, char const*, char const*, char const*, char const*)
 T UTIL_ClientPrintFilter(IRecipientFilter&, int, char const*, char const*, char const*, char const*, char const*)
 T UTIL_ClipPunchAngleOffset(QAngle&, QAngle const&, QAngle const&)
 T UTIL_ColorStringToLinearFloatColor(Vector&, char const*)
 T UTIL_CreateAntlionDust(Vector const&, QAngle const&, bool)
 T UTIL_CreateScaledPhysObject(CBaseAnimating*, float)
 T UTIL_DecalTrace(CGameTrace*, char const*)
 T UTIL_DecodeICE(unsigned char*, int, unsigned char const*)
 T UTIL_DisableRemoveImmediate()
 T UTIL_DrawOverlayLines()
 T UTIL_DrawPositioningOverlay(float)
 T UTIL_DropToFloor(CBaseEntity*, unsigned int, CBaseEntity*)
 T UTIL_EmitAmbientSound(int, Vector const&, char const*, float, soundlevel_t, int, int, float, float*)
 T UTIL_EmitGroupIDSuit(edict_t*, int)
 T UTIL_EmitGroupnameSuit(edict_t*, char const*)
 T UTIL_EmitSoundSuit(edict_t*, char const*)
 T UTIL_EnableRemoveImmediate()
 T UTIL_EntitiesAlongRay(Ray_t const&, CFlaggedEntitiesEnum*)
 T UTIL_EntitiesInBox(Vector const&, Vector const&, CFlaggedEntitiesEnum*)
 T UTIL_EntitiesInPVS(CBaseEntity*, CBaseEntity*)
 T UTIL_EntitiesInSphere(Vector const&, float, CFlaggedEntitiesEnum*)
 T UTIL_EntityByIndex(int)
 T UTIL_EntityHasMatchingRootParent(CBaseEntity*, CBaseEntity*)
 T UTIL_EntityInSolid(CBaseEntity*)
 T UTIL_FindClientInPVS(Vector const&, Vector const&)
 T UTIL_FindClientInPVS(edict_t*)
 T UTIL_FindClientInVisibilityPVS(edict_t*)
 T UTIL_FindWaterSurface(Vector const&, float, float)
 T UTIL_FreeFile(unsigned char*)
 T UTIL_GetCommandClient()
 T UTIL_GetCommandClientIndex()
 T UTIL_GetDebugColorForRelationship(int, int&, int&, int&)
 T UTIL_GetListenServerHost()
 T UTIL_GetLocalPlayer()
 T UTIL_GetModDir(char*, unsigned int)
 T UTIL_GetPlayerConnectionInfo(int, int&, int&)
 T UTIL_GetSimulationInterval()
 T UTIL_HudHintText(CBaseEntity*, char const*)
 T UTIL_HudMessage(CBasePlayer*, hudtextparms_s const&, char const*)
 T UTIL_HudMessageAll(hudtextparms_s const&, char const*)
 T UTIL_ImpactTrace(CGameTrace*, int, char const*)
 T UTIL_IsAR2CombineBall(CBaseEntity*)
 T UTIL_IsCombineBall(CBaseEntity*)
 T UTIL_IsCommandIssuedByServerAdmin()
 T UTIL_IsLowViolence()
 T UTIL_IsMasterTriggered(string_t, CBaseEntity*)
 T UTIL_ItemCanBeTouchedByPlayer(CBaseEntity*, CBasePlayer*)
 T UTIL_LoadActivityRemapFile(char const*, char const*, CUtlVector<CActivityRemap, CUtlMemory<CActivityRemap, int> >&)
 T UTIL_LoadFileForMe(char const*, int*)
 T UTIL_LogPrintf(char const*, ...)
 T UTIL_ParentToWorldSpace(CBaseEntity*, Vector&, QAngle&)
 T UTIL_ParentToWorldSpace(CBaseEntity*, Vector&, Quaternion&)
 T UTIL_PlayerByCommandArg(char const*)
 T UTIL_PlayerByIndex(int)
 T UTIL_PlayerBySteamID(CSteamID const&)
 T UTIL_PlayerByUserId(int)
 T UTIL_PlayerDecalTrace(CGameTrace*, int)
 T UTIL_PointAtEntity(CBaseEntity*, CBaseEntity*)
 T UTIL_PointAtNamedEntity(CBaseEntity*, string_t)
 T UTIL_PointOnLineNearestPoint(Vector const&, Vector const&, Vector const&, bool)
 T UTIL_PrecacheDecal(char const*, bool)
 T UTIL_PrecacheOther(char const*, char const*)
 T UTIL_PredictedPosition(CBaseEntity*, float, Vector*)
 T UTIL_RandomBloodVector()
 T UTIL_Remove(CBaseEntity*)
 T UTIL_Remove(IServerNetworkable*)
 T UTIL_RemoveHierarchy(CBaseEntity*)
 T UTIL_RemoveImmediate(CBaseEntity*)
 T UTIL_RestartAmbientSounds()
 T UTIL_SayText2Filter(IRecipientFilter&, CBasePlayer*, bool, char const*, char const*, char const*, char const*, char const*)
 T UTIL_SayTextFilter(IRecipientFilter&, char const*, CBasePlayer*, bool)
 T UTIL_ScaleForGravity(float)
 T UTIL_ScreenFade(CBaseEntity*, color32_s const&, float, float, int)
 T UTIL_ScreenFadeAll(color32_s const&, float, float, int)
 T UTIL_ScreenFadeWrite(ScreenFade_t const&, CBaseEntity*)
 T UTIL_ScreenShake(Vector const&, float, float, float, float, ShakeCommand_t, bool)
 T UTIL_ScreenShakeObject(CBaseEntity*, Vector const&, float, float, float, float, ShakeCommand_t, bool)
 T UTIL_SetClientVisibilityPVS(edict_t*, unsigned char const*, int)
 T UTIL_SetModel(CBaseEntity*, char const*)
 T UTIL_SetOrigin(CBaseEntity*, Vector const&, bool)
 T UTIL_SetSize(CBaseEntity*, Vector const&, Vector const&)
 T UTIL_ShouldShowBlood(int)
 T UTIL_ShowMessage(char const*, CBasePlayer*)
 T UTIL_ShowMessageAll(char const*)
 T UTIL_Smoke(Vector const&, float, float)
 T UTIL_SnapDirectionToAxis(Vector&, float)
 T UTIL_StringToColor32(color32_s*, char const*)
 T UTIL_StringToFloatArray(float*, int, char const*)
 T UTIL_StringToIntArray(int*, int, char const*)
 T UTIL_StringToVector(float*, char const*)
 T UTIL_StripToken(char const*, char*, int)
 T UTIL_TraceEntity(CBaseEntity*, Vector const&, Vector const&, unsigned int, CGameTrace*)
 T UTIL_TraceEntity(CBaseEntity*, Vector const&, Vector const&, unsigned int, IHandleEntity const*, int, CGameTrace*)
 T UTIL_TraceEntity(CBaseEntity*, Vector const&, Vector const&, unsigned int, ITraceFilter*, CGameTrace*)
 T UTIL_TraceLineFilterEntity(CBaseEntity*, Vector const&, Vector const&, unsigned int, int, CGameTrace*)
 T UTIL_TraceModel(Vector const&, Vector const&, Vector const&, Vector const&, CBaseEntity*, int, CGameTrace*)
 T UTIL_Tracer(Vector const&, Vector const&, int, int, float, bool, char const*, int)
 T UTIL_TransferPoseParameters(CBaseEntity*, CBaseEntity*)
 T UTIL_ValidateSoundName(string_t&, char const*)
 T UTIL_VarArgs(char const*, ...)
 T UTIL_VecToPitch(Vector const&)
 T UTIL_VecToYaw(Vector const&)
 T UTIL_ViewPunch(Vector const&, QAngle, float, bool)
 T UTIL_WaterLevel(Vector const&, float, float)
 T UTIL_WorldToParentSpace(CBaseEntity*, Vector&, QAngle&)
 T UTIL_WorldToParentSpace(CBaseEntity*, Vector&, Quaternion&)
 T UTIL_YawToVector(float)
 T UniqueIdFromString(UniqueId_t*, char const*, int)
 T UnlinkChild(CBaseEntity*, CBaseEntity*)
 T UnlinkFromParent(CBaseEntity*)
 T Unserialize(CUtlBuffer&, CUtlBinaryBlock&)
 T Unserialize(CUtlBuffer&, CUtlString&)
 T Unserialize(CUtlBuffer&, Color&)
 T Unserialize(CUtlBuffer&, QAngle&)
 T Unserialize(CUtlBuffer&, Quaternion&)
 T Unserialize(CUtlBuffer&, UniqueId_t&)
 T Unserialize(CUtlBuffer&, VMatrix&)
 T Unserialize(CUtlBuffer&, Vector&)
 T Unserialize(CUtlBuffer&, Vector2D&)
 T Unserialize(CUtlBuffer&, Vector4D&)
 T Unserialize(CUtlBuffer&, bool&)
 T Unserialize(CUtlBuffer&, float&)
 T Unserialize(CUtlBuffer&, int&)
 T UnserializeDMX(CUtlBuffer&, CDmxElement**, char const*)
 T UnserializeTextDMX(char const*, CUtlBuffer&, CDmxElement**)
 T UpdateAllClientData()
 T UpdateQueryCache()
 T UserMessageBegin(IRecipientFilter&, char const*)
 T UtlStringLessFunc(CUtlString const&, CUtlString const&)
 T UtlVectorTemplate<CAnimationLayer, CUtlMemory<CAnimationLayer, int> >::EnsureCapacity(void*, int, int)
 T UtlVectorTemplate<CHandle<CBaseFlex>, CUtlMemory<CHandle<CBaseFlex>, int> >::EnsureCapacity(void*, int, int)
 T VMatrix::InverseTR(VMatrix&) const
 T VMatrix::MatrixMul(VMatrix const&, VMatrix&) const
 T VMatrix::SetupMatrixOrgAngles(Vector const&, QAngle const&)
 T VMatrix::Transpose() const
 T VMatrix::operator=(VMatrix const&)
 T V_DefaultExtension(char*, char const*, int)
 T V_ExtractFileExtension(char const*, char*, int)
 T V_FileBase(char const*, char*, int)
 T V_FixSlashes(char*, char)
 T V_GetFileExtension(char const*)
 T V_IsAbsolutePath(char const*)
 T V_RemoveDotSlashes(char*, char, bool)
 T V_SetExtension(char*, char const*, int)
 T V_SplitString(char const*, char const*, CUtlVector<char*, CUtlMemory<char*, int> >&)
 T V_SplitString2(char const*, char const**, int, CUtlVector<char*, CUtlMemory<char*, int> >&)
 T V_StripExtension(char const*, char*, int)
 T V_StripFilename(char*)
 T V_StripLastDir(char*, int)
 T V_StripTrailingSlash(char*)
 T V_atof(char const*)
 T V_atoi(char const*)
 T V_atoi64(char const*)
 T V_snprintf(char*, int, char const*, ...)
 T V_stricmp(char const*, char const*)
 T V_stristr(char const*, char const*)
 T V_stristr(char*, char const*)
 T V_strlower(char*)
 T V_strncat(char*, char const*, unsigned long, int)
 T V_strnchr(char const*, char, int)
 T V_strncmp(char const*, char const*, int)
 T V_strncpy(char*, char const*, int)
 T V_strnicmp(char const*, char const*, int)
 T V_strnistr(char const*, char const*, int)
 T V_vsnprintf(char*, int, char const*, char*)
 T V_vsnprintfRet(char*, int, char const*, char*, bool*)
 T VecCheckThrow(CBaseEntity*, Vector const&, Vector, float, float, Vector*, Vector*)
 T VecCheckToss(CBaseEntity*, ITraceFilter*, Vector, Vector, float, float, bool, Vector*, Vector*)
 T VecCheckToss(CBaseEntity*, Vector, Vector, float, float, bool, Vector*, Vector*)
 T Vector3DMultiply(VMatrix const&, Vector const&, Vector&)
 T VectorAngles(Vector const&, QAngle&)
 T VectorAngles(Vector const&, Vector const&, QAngle&)
 T VectorIRotate(float const*, matrix3x4_t const&, float*)
 T VectorITransform(float const*, matrix3x4_t const&, float*)
 T VectorRotate(Vector const&, QAngle const&, Vector&)
 T VectorRotate(float const*, matrix3x4_t const&, float*)
 T VectorTransform(float const*, matrix3x4_t const&, float*)
 T VectorVectors(Vector const&, Vector&, Vector&)
 T VectorYawRotate(Vector const&, float, Vector&)
 T VerifySequenceIndex(CStudioHdr*)
 T W_Precache()
 T WatchPositionChanges(CBaseEntity*, CBaseEntity*)
 T WaveTrace(char const*, char const*)
 T WeaponManager_AddManaged(CBaseEntity*)
 T WeaponManager_AmmoMod(CBaseCombatWeapon*)
 T WorldSpaceSlerp(CStudioHdr const*, Quaternion*, Vector*, mstudioseqdesc_t&, int, Quaternion const*, Vector const*, float, int)
 T WorldToLocalRotation(VMatrix const&, Vector const&, float)
 T _InvRSquared(float const*)
 T _SSE_InvRSquared(float const*)
 T _SSE_RSqrtAccurate(float)
 T _SSE_RSqrtFast(float)
 T _SSE_Sqrt(float)
 T _SSE_VectorNormalizeFast(Vector&)
 T _VectorNormalize(Vector&)
 T _VectorNormalizeFast(Vector&)
 T __CreateGameRules_CHL2MPRules()
 T __CreateGameRules_CHalfLife2()
 T __CreateGameRules_CMultiplayRules()
 T __CreateGameRules_CTeamplayRules()
 T __clang_call_terminate
 T _rsqrtf(float)
 T _sqrtf(float)
 T bf_read::ReadBitCoord()
 T bf_read::ReadBits(void*, int)
 T bf_read::ReadFloat()
 T bf_read::SetOverflowFlag()
 T bf_write::WriteBitAngles(QAngle const&)
 T bf_write::WriteBitCoord(float)
 T bf_write::WriteBitNormal(float)
 T bf_write::WriteBitVec3Coord(Vector const&)
 T bf_write::WriteBitVec3Normal(Vector const&)
 T bf_write::WriteBits(void const*, int)
 T bf_write::WriteByte(int)
 T bf_write::WriteChar(int)
 T bf_write::WriteFloat(float)
 T bf_write::WriteLong(long)
 T bf_write::WriteShort(int)
 T bf_write::WriteString(char const*)
 T bool ForEachPlayer<DisableAutokick>(DisableAutokick&)
 T bool Unserialize<CUtlBinaryBlock>(CUtlBuffer&, CUtlVector<CUtlBinaryBlock, CUtlMemory<CUtlBinaryBlock, int> >&)
 T bool Unserialize<CUtlString>(CUtlBuffer&, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >&)
 T bool Unserialize<Color>(CUtlBuffer&, CUtlVector<Color, CUtlMemory<Color, int> >&)
 T bool Unserialize<QAngle>(CUtlBuffer&, CUtlVector<QAngle, CUtlMemory<QAngle, int> >&)
 T bool Unserialize<Quaternion>(CUtlBuffer&, CUtlVector<Quaternion, CUtlMemory<Quaternion, int> >&)
 T bool Unserialize<UniqueId_t>(CUtlBuffer&, CUtlVector<UniqueId_t, CUtlMemory<UniqueId_t, int> >&)
 T bool Unserialize<VMatrix>(CUtlBuffer&, CUtlVector<VMatrix, CUtlMemory<VMatrix, int> >&)
 T bool Unserialize<Vector2D>(CUtlBuffer&, CUtlVector<Vector2D, CUtlMemory<Vector2D, int> >&)
 T bool Unserialize<Vector4D>(CUtlBuffer&, CUtlVector<Vector4D, CUtlMemory<Vector4D, int> >&)
 T bool Unserialize<Vector>(CUtlBuffer&, CUtlVector<Vector, CUtlMemory<Vector, int> >&)
 T bool Unserialize<bool>(CUtlBuffer&, CUtlVector<bool, CUtlMemory<bool, int> >&)
 T bool Unserialize<float>(CUtlBuffer&, CUtlVector<float, CUtlMemory<float, int> >&)
 T bool Unserialize<int>(CUtlBuffer&, CUtlVector<int, CUtlMemory<int, int> >&)
 T bool const& CNetworkVarBase<bool, CBasePlayer::NetworkVar_m_fOnTarget>::operator=<bool>(bool const&)
 T bool const& CNetworkVarBase<bool, CColorCorrection::NetworkVar_m_bEnabled>::operator=<bool>(bool const&)
 T bool const& CNetworkVarBase<bool, CSceneEntity::NetworkVar_m_bPaused>::operator=<bool>(bool const&)
 T bool const& CNetworkVarBase<bool, CWeaponFrag::NetworkVar_m_bRedraw>::operator=<bool>(bool const&)
 T bool const& CNetworkVarBase<bool, CWeaponShotgun::NetworkVar_m_bNeedPump>::operator=<bool>(bool const&)
 T bool const& CNetworkVarBase<bool, CWeapon_SLAM::NetworkVar_m_bDetonatorArmed>::operator=<bool>(bool const&)
 T bool const& CNetworkVarBase<bool, CWeapon_SLAM::NetworkVar_m_bNeedDetonatorDraw>::operator=<bool>(bool const&)
 T bool const& CNetworkVarBase<bool, CWeapon_SLAM::NetworkVar_m_bNeedReload>::operator=<bool>(bool const&)
 T cc_GotoNextMapInCycle()
 T cc_ScrambleTeams(CCommand const&)
 T cc_SkipNextMapInCycle()
 T cc_SwitchTeams(CCommand const&)
 T datamap_t* DataMapInit<AISquadEnemyInfo_t>(AISquadEnemyInfo_t*)
 T datamap_t* DataMapInit<CAI_ActBusyBehavior>(CAI_ActBusyBehavior*)
 T datamap_t* DataMapInit<CAI_ActBusyGoal>(CAI_ActBusyGoal*)
 T datamap_t* DataMapInit<CAI_ActBusyQueueGoal>(CAI_ActBusyQueueGoal*)
 T datamap_t* DataMapInit<CAI_AllyManager>(CAI_AllyManager*)
 T datamap_t* DataMapInit<CAI_AllySpeechManager>(CAI_AllySpeechManager*)
 T datamap_t* DataMapInit<CAI_BaseActor>(CAI_BaseActor*)
 T datamap_t* DataMapInit<CAI_BaseNPC>(CAI_BaseNPC*)
 T datamap_t* DataMapInit<CAI_BasePhysicsFlyingBot>(CAI_BasePhysicsFlyingBot*)
 T datamap_t* DataMapInit<CAI_BattleLine>(CAI_BattleLine*)
 T datamap_t* DataMapInit<CAI_FollowBehavior>(CAI_FollowBehavior*)
 T datamap_t* DataMapInit<CAI_GoalEntity>(CAI_GoalEntity*)
 T datamap_t* DataMapInit<CAI_Hint>(CAI_Hint*)
 T datamap_t* DataMapInit<CAI_LeadGoal>(CAI_LeadGoal*)
 T datamap_t* DataMapInit<CAI_Motor>(CAI_Motor*)
 T datamap_t* DataMapInit<CAI_Navigator>(CAI_Navigator*)
 T datamap_t* DataMapInit<CAI_NetworkManager>(CAI_NetworkManager*)
 T datamap_t* DataMapInit<CAI_Path>(CAI_Path*)
 T datamap_t* DataMapInit<CAI_PlayerAlly>(CAI_PlayerAlly*)
 T datamap_t* DataMapInit<CAI_PoliceGoal>(CAI_PoliceGoal*)
 T datamap_t* DataMapInit<CAI_RadialLinkController>(CAI_RadialLinkController*)
 T datamap_t* DataMapInit<CAI_Relationship>(CAI_Relationship*)
 T datamap_t* DataMapInit<CAI_ScriptConditions>(CAI_ScriptConditions*)
 T datamap_t* DataMapInit<CAI_ScriptedSchedule>(CAI_ScriptedSchedule*)
 T datamap_t* DataMapInit<CAI_ScriptedSentence>(CAI_ScriptedSentence*)
 T datamap_t* DataMapInit<CAI_ScriptedSequence>(CAI_ScriptedSequence*)
 T datamap_t* DataMapInit<CAI_Senses>(CAI_Senses*)
 T datamap_t* DataMapInit<CAI_Squad>(CAI_Squad*)
 T datamap_t* DataMapInit<CAPCController>(CAPCController*)
 T datamap_t* DataMapInit<CAPCMissile>(CAPCMissile*)
 T datamap_t* DataMapInit<CAlyxEmpEffect>(CAlyxEmpEffect*)
 T datamap_t* DataMapInit<CAmbientGeneric>(CAmbientGeneric*)
 T datamap_t* DataMapInit<CAnimationLayer>(CAnimationLayer*)
 T datamap_t* DataMapInit<CAntlionTemplateMaker>(CAntlionTemplateMaker*)
 T datamap_t* DataMapInit<CAssaultPoint>(CAssaultPoint*)
 T datamap_t* DataMapInit<CBarnacleTongueTip>(CBarnacleTongueTip*)
 T datamap_t* DataMapInit<CBaseAnimating>(CBaseAnimating*)
 T datamap_t* DataMapInit<CBaseAnimatingOverlay>(CBaseAnimatingOverlay*)
 T datamap_t* DataMapInit<CBaseButton>(CBaseButton*)
 T datamap_t* DataMapInit<CBaseCombatCharacter>(CBaseCombatCharacter*)
 T datamap_t* DataMapInit<CBaseCombatWeapon>(CBaseCombatWeapon*)
 T datamap_t* DataMapInit<CBaseDoor>(CBaseDoor*)
 T datamap_t* DataMapInit<CBaseEntity>(CBaseEntity*)
 T datamap_t* DataMapInit<CBaseEntityOutput>(CBaseEntityOutput*)
 T datamap_t* DataMapInit<CBaseFilter>(CBaseFilter*)
 T datamap_t* DataMapInit<CBaseGrenade>(CBaseGrenade*)
 T datamap_t* DataMapInit<CBaseGrenadeConcussion>(CBaseGrenadeConcussion*)
 T datamap_t* DataMapInit<CBaseHeadcrab>(CBaseHeadcrab*)
 T datamap_t* DataMapInit<CBaseHelicopter>(CBaseHelicopter*)
 T datamap_t* DataMapInit<CBaseNPCMaker>(CBaseNPCMaker*)
 T datamap_t* DataMapInit<CBasePlatTrain>(CBasePlatTrain*)
 T datamap_t* DataMapInit<CBasePlayer>(CBasePlayer*)
 T datamap_t* DataMapInit<CBasePropDoor>(CBasePropDoor*)
 T datamap_t* DataMapInit<CBaseServerVehicle>(CBaseServerVehicle*)
 T datamap_t* DataMapInit<CBaseTeamObjectiveResource>(CBaseTeamObjectiveResource*)
 T datamap_t* DataMapInit<CBaseTrigger>(CBaseTrigger*)
 T datamap_t* DataMapInit<CBaseViewModel>(CBaseViewModel*)
 T datamap_t* DataMapInit<CBlackHeadcrab>(CBlackHeadcrab*)
 T datamap_t* DataMapInit<CBoneFollowerManager>(CBoneFollowerManager*)
 T datamap_t* DataMapInit<CBounceBomb>(CBounceBomb*)
 T datamap_t* DataMapInit<CBreakable>(CBreakable*)
 T datamap_t* DataMapInit<CBreakableProp>(CBreakableProp*)
 T datamap_t* DataMapInit<CBreakableSurface>(CBreakableSurface*)
 T datamap_t* DataMapInit<CBubbling>(CBubbling*)
 T datamap_t* DataMapInit<CBugBaitSensor>(CBugBaitSensor*)
 T datamap_t* DataMapInit<CChangeLevel>(CChangeLevel*)
 T datamap_t* DataMapInit<CCitizenResponseSystem>(CCitizenResponseSystem*)
 T datamap_t* DataMapInit<CColorCorrection>(CColorCorrection*)
 T datamap_t* DataMapInit<CColorCorrectionVolume>(CColorCorrectionVolume*)
 T datamap_t* DataMapInit<CCommentaryAuto>(CCommentaryAuto*)
 T datamap_t* DataMapInit<CCommentarySystem>(CCommentarySystem*)
 T datamap_t* DataMapInit<CCopyRecipientFilter>(CCopyRecipientFilter*)
 T datamap_t* DataMapInit<CCraneTip>(CCraneTip*)
 T datamap_t* DataMapInit<CCredits>(CCredits*)
 T datamap_t* DataMapInit<CCrossbowBolt>(CCrossbowBolt*)
 T datamap_t* DataMapInit<CDecal>(CDecal*)
 T datamap_t* DataMapInit<CDynamicLight>(CDynamicLight*)
 T datamap_t* DataMapInit<CDynamicProp>(CDynamicProp*)
 T datamap_t* DataMapInit<CEmbers>(CEmbers*)
 T datamap_t* DataMapInit<CEntityDissolve>(CEntityDissolve*)
 T datamap_t* DataMapInit<CEntityFlame>(CEntityFlame*)
 T datamap_t* DataMapInit<CEnvBeam>(CEnvBeam*)
 T datamap_t* DataMapInit<CEnvEffectsScript>(CEnvEffectsScript*)
 T datamap_t* DataMapInit<CEnvEntityMaker>(CEnvEntityMaker*)
 T datamap_t* DataMapInit<CEnvExplosion>(CEnvExplosion*)
 T datamap_t* DataMapInit<CEnvFade>(CEnvFade*)
 T datamap_t* DataMapInit<CEnvFireSensor>(CEnvFireSensor*)
 T datamap_t* DataMapInit<CEnvGlobal>(CEnvGlobal*)
 T datamap_t* DataMapInit<CEnvGunfire>(CEnvGunfire*)
 T datamap_t* DataMapInit<CEnvHeadcrabCanister>(CEnvHeadcrabCanister*)
 T datamap_t* DataMapInit<CEnvLaser>(CEnvLaser*)
 T datamap_t* DataMapInit<CEnvMicrophone>(CEnvMicrophone*)
 T datamap_t* DataMapInit<CEnvPlayerSurfaceTrigger>(CEnvPlayerSurfaceTrigger*)
 T datamap_t* DataMapInit<CEnvProjectedTexture>(CEnvProjectedTexture*)
 T datamap_t* DataMapInit<CEnvScreenOverlay>(CEnvScreenOverlay*)
 T datamap_t* DataMapInit<CEnvShake>(CEnvShake*)
 T datamap_t* DataMapInit<CEnvSoundscape>(CEnvSoundscape*)
 T datamap_t* DataMapInit<CEnvSpark>(CEnvSpark*)
 T datamap_t* DataMapInit<CEnvTonemapController>(CEnvTonemapController*)
 T datamap_t* DataMapInit<CEnvTracer>(CEnvTracer*)
 T datamap_t* DataMapInit<CEnvWind>(CEnvWind*)
 T datamap_t* DataMapInit<CFire>(CFire*)
 T datamap_t* DataMapInit<CFishPool>(CFishPool*)
 T datamap_t* DataMapInit<CFlare>(CFlare*)
 T datamap_t* DataMapInit<CFogController>(CFogController*)
 T datamap_t* DataMapInit<CFuncCombineBallSpawner>(CFuncCombineBallSpawner*)
 T datamap_t* DataMapInit<CFuncLadder>(CFuncLadder*)
 T datamap_t* DataMapInit<CFuncMoveLinear>(CFuncMoveLinear*)
 T datamap_t* DataMapInit<CFuncPlat>(CFuncPlat*)
 T datamap_t* DataMapInit<CFuncRotating>(CFuncRotating*)
 T datamap_t* DataMapInit<CFuncTank>(CFuncTank*)
 T datamap_t* DataMapInit<CFuncTankAirboatGun>(CFuncTankAirboatGun*)
 T datamap_t* DataMapInit<CFuncTankCombineCannon>(CFuncTankCombineCannon*)
 T datamap_t* DataMapInit<CFuncTankTrain>(CFuncTankTrain*)
 T datamap_t* DataMapInit<CFuncTrackChange>(CFuncTrackChange*)
 T datamap_t* DataMapInit<CFuncTrackTrain>(CFuncTrackTrain*)
 T datamap_t* DataMapInit<CFuncTrain>(CFuncTrain*)
 T datamap_t* DataMapInit<CFuncTrainControls>(CFuncTrainControls*)
 T datamap_t* DataMapInit<CGamePlayerZone>(CGamePlayerZone*)
 T datamap_t* DataMapInit<CGameUI>(CGameUI*)
 T datamap_t* DataMapInit<CGameWeaponManager>(CGameWeaponManager*)
 T datamap_t* DataMapInit<CGib>(CGib*)
 T datamap_t* DataMapInit<CGibShooter>(CGibShooter*)
 T datamap_t* DataMapInit<CGlobalState>(CGlobalState*)
 T datamap_t* DataMapInit<CGrenadeAR2>(CGrenadeAR2*)
 T datamap_t* DataMapInit<CGrenadeBeam>(CGrenadeBeam*)
 T datamap_t* DataMapInit<CGrenadeBeamChaser>(CGrenadeBeamChaser*)
 T datamap_t* DataMapInit<CGrenadeBugBait>(CGrenadeBugBait*)
 T datamap_t* DataMapInit<CGrenadeFrag>(CGrenadeFrag*)
 T datamap_t* DataMapInit<CGrenadeHelicopter>(CGrenadeHelicopter*)
 T datamap_t* DataMapInit<CGrenadeHomer>(CGrenadeHomer*)
 T datamap_t* DataMapInit<CGrenadePathfollower>(CGrenadePathfollower*)
 T datamap_t* DataMapInit<CGunTarget>(CGunTarget*)
 T datamap_t* DataMapInit<CHL2_Player>(CHL2_Player*)
 T datamap_t* DataMapInit<CHLSelectFireMachineGun>(CHLSelectFireMachineGun*)
 T datamap_t* DataMapInit<CHelicopterChunk>(CHelicopterChunk*)
 T datamap_t* DataMapInit<CItem>(CItem*)
 T datamap_t* DataMapInit<CItemSoda>(CItemSoda*)
 T datamap_t* DataMapInit<CItem_AmmoCrate>(CItem_AmmoCrate*)
 T datamap_t* DataMapInit<CItem_DynamicResupply>(CItem_DynamicResupply*)
 T datamap_t* DataMapInit<CItem_ItemCrate>(CItem_ItemCrate*)
 T datamap_t* DataMapInit<CKeepUpright>(CKeepUpright*)
 T datamap_t* DataMapInit<CLight>(CLight*)
 T datamap_t* DataMapInit<CLogicActiveAutosave>(CLogicActiveAutosave*)
 T datamap_t* DataMapInit<CLogicAuto>(CLogicAuto*)
 T datamap_t* DataMapInit<CLogicBranch>(CLogicBranch*)
 T datamap_t* DataMapInit<CLogicBranchList>(CLogicBranchList*)
 T datamap_t* DataMapInit<CLogicCase>(CLogicCase*)
 T datamap_t* DataMapInit<CLogicCompare>(CLogicCompare*)
 T datamap_t* DataMapInit<CLogicCompareInteger>(CLogicCompareInteger*)
 T datamap_t* DataMapInit<CLogicLineToEntity>(CLogicLineToEntity*)
 T datamap_t* DataMapInit<CLogicMeasureMovement>(CLogicMeasureMovement*)
 T datamap_t* DataMapInit<CLogicPlayerProxy>(CLogicPlayerProxy*)
 T datamap_t* DataMapInit<CLogicRelay>(CLogicRelay*)
 T datamap_t* DataMapInit<CLookDoor>(CLookDoor*)
 T datamap_t* DataMapInit<CLookDoorThinker>(CLookDoorThinker*)
 T datamap_t* DataMapInit<CMathColorBlend>(CMathColorBlend*)
 T datamap_t* DataMapInit<CMathCounter>(CMathCounter*)
 T datamap_t* DataMapInit<CMathRemap>(CMathRemap*)
 T datamap_t* DataMapInit<CMessage>(CMessage*)
 T datamap_t* DataMapInit<CMissile>(CMissile*)
 T datamap_t* DataMapInit<CMomentaryRotButton>(CMomentaryRotButton*)
 T datamap_t* DataMapInit<CMortarShell>(CMortarShell*)
 T datamap_t* DataMapInit<CMultiSource>(CMultiSource*)
 T datamap_t* DataMapInit<CNPCSimpleTalker>(CNPCSimpleTalker*)
 T datamap_t* DataMapInit<CNPCSpawnDestination>(CNPCSpawnDestination*)
 T datamap_t* DataMapInit<CNPC_Antlion>(CNPC_Antlion*)
 T datamap_t* DataMapInit<CNPC_AntlionGuard>(CNPC_AntlionGuard*)
 T datamap_t* DataMapInit<CNPC_AttackHelicopter>(CNPC_AttackHelicopter*)
 T datamap_t* DataMapInit<CNPC_Barnacle>(CNPC_Barnacle*)
 T datamap_t* DataMapInit<CNPC_Barney>(CNPC_Barney*)
 T datamap_t* DataMapInit<CNPC_BaseScanner>(CNPC_BaseScanner*)
 T datamap_t* DataMapInit<CNPC_BaseZombie>(CNPC_BaseZombie*)
 T datamap_t* DataMapInit<CNPC_Bullseye>(CNPC_Bullseye*)
 T datamap_t* DataMapInit<CNPC_CScanner>(CNPC_CScanner*)
 T datamap_t* DataMapInit<CNPC_CeilingTurret>(CNPC_CeilingTurret*)
 T datamap_t* DataMapInit<CNPC_Citizen>(CNPC_Citizen*)
 T datamap_t* DataMapInit<CNPC_CombineCamera>(CNPC_CombineCamera*)
 T datamap_t* DataMapInit<CNPC_CombineDropship>(CNPC_CombineDropship*)
 T datamap_t* DataMapInit<CNPC_CombineGunship>(CNPC_CombineGunship*)
 T datamap_t* DataMapInit<CNPC_CraneDriver>(CNPC_CraneDriver*)
 T datamap_t* DataMapInit<CNPC_Dog>(CNPC_Dog*)
 T datamap_t* DataMapInit<CNPC_EnemyFinder>(CNPC_EnemyFinder*)
 T datamap_t* DataMapInit<CNPC_FloorTurret>(CNPC_FloorTurret*)
 T datamap_t* DataMapInit<CNPC_GroundTurret>(CNPC_GroundTurret*)
 T datamap_t* DataMapInit<CNPC_Launcher>(CNPC_Launcher*)
 T datamap_t* DataMapInit<CNPC_Manhack>(CNPC_Manhack*)
 T datamap_t* DataMapInit<CNPC_MetroPolice>(CNPC_MetroPolice*)
 T datamap_t* DataMapInit<CNPC_PlayerCompanion>(CNPC_PlayerCompanion*)
 T datamap_t* DataMapInit<CNPC_PoisonZombie>(CNPC_PoisonZombie*)
 T datamap_t* DataMapInit<CNPC_RollerMine>(CNPC_RollerMine*)
 T datamap_t* DataMapInit<CNPC_Stalker>(CNPC_Stalker*)
 T datamap_t* DataMapInit<CNPC_Strider>(CNPC_Strider*)
 T datamap_t* DataMapInit<CNPC_Vortigaunt>(CNPC_Vortigaunt*)
 T datamap_t* DataMapInit<CNewRecharge>(CNewRecharge*)
 T datamap_t* DataMapInit<CNewWallHealth>(CNewWallHealth*)
 T datamap_t* DataMapInit<CParticleSystem>(CParticleSystem*)
 T datamap_t* DataMapInit<CPathCorner>(CPathCorner*)
 T datamap_t* DataMapInit<CPathTrack>(CPathTrack*)
 T datamap_t* DataMapInit<CPhysBox>(CPhysBox*)
 T datamap_t* DataMapInit<CPhysConstraint>(CPhysConstraint*)
 T datamap_t* DataMapInit<CPhysConstraintSystem>(CPhysConstraintSystem*)
 T datamap_t* DataMapInit<CPhysConvert>(CPhysConvert*)
 T datamap_t* DataMapInit<CPhysExplosion>(CPhysExplosion*)
 T datamap_t* DataMapInit<CPhysForce>(CPhysForce*)
 T datamap_t* DataMapInit<CPhysImpact>(CPhysImpact*)
 T datamap_t* DataMapInit<CPhysMagnet>(CPhysMagnet*)
 T datamap_t* DataMapInit<CPhysMotor>(CPhysMotor*)
 T datamap_t* DataMapInit<CPhysicsCannister>(CPhysicsCannister*)
 T datamap_t* DataMapInit<CPhysicsNPCSolver>(CPhysicsNPCSolver*)
 T datamap_t* DataMapInit<CPhysicsProp>(CPhysicsProp*)
 T datamap_t* DataMapInit<CPhysicsPropRespawnable>(CPhysicsPropRespawnable*)
 T datamap_t* DataMapInit<CPhysicsSpring>(CPhysicsSpring*)
 T datamap_t* DataMapInit<CPlayerResource>(CPlayerResource*)
 T datamap_t* DataMapInit<CPointAngleSensor>(CPointAngleSensor*)
 T datamap_t* DataMapInit<CPointAngularVelocitySensor>(CPointAngularVelocitySensor*)
 T datamap_t* DataMapInit<CPointCamera>(CPointCamera*)
 T datamap_t* DataMapInit<CPointCommentaryNode>(CPointCommentaryNode*)
 T datamap_t* DataMapInit<CPointDevShotCamera>(CPointDevShotCamera*)
 T datamap_t* DataMapInit<CPointHurt>(CPointHurt*)
 T datamap_t* DataMapInit<CPointPlayerMoveConstraint>(CPointPlayerMoveConstraint*)
 T datamap_t* DataMapInit<CPointProximitySensor>(CPointProximitySensor*)
 T datamap_t* DataMapInit<CPointPush>(CPointPush*)
 T datamap_t* DataMapInit<CPointSpotlight>(CPointSpotlight*)
 T datamap_t* DataMapInit<CPointTemplate>(CPointTemplate*)
 T datamap_t* DataMapInit<CPointVelocitySensor>(CPointVelocitySensor*)
 T datamap_t* DataMapInit<CPoseController>(CPoseController*)
 T datamap_t* DataMapInit<CProjectedDecal>(CProjectedDecal*)
 T datamap_t* DataMapInit<CPropAPC>(CPropAPC*)
 T datamap_t* DataMapInit<CPropAirboat>(CPropAirboat*)
 T datamap_t* DataMapInit<CPropCombineBall>(CPropCombineBall*)
 T datamap_t* DataMapInit<CPropCrane>(CPropCrane*)
 T datamap_t* DataMapInit<CPropThumper>(CPropThumper*)
 T datamap_t* DataMapInit<CPropVehicle>(CPropVehicle*)
 T datamap_t* DataMapInit<CPropVehicleDriveable>(CPropVehicleDriveable*)
 T datamap_t* DataMapInit<CPropVehiclePrisonerPod>(CPropVehiclePrisonerPod*)
 T datamap_t* DataMapInit<CProtoSniper>(CProtoSniper*)
 T datamap_t* DataMapInit<CRagdollBoogie>(CRagdollBoogie*)
 T datamap_t* DataMapInit<CRagdollProp>(CRagdollProp*)
 T datamap_t* DataMapInit<CRagdollPropAttached>(CRagdollPropAttached*)
 T datamap_t* DataMapInit<CRallyPoint>(CRallyPoint*)
 T datamap_t* DataMapInit<CRecharge>(CRecharge*)
 T datamap_t* DataMapInit<CRevertSaved>(CRevertSaved*)
 T datamap_t* DataMapInit<CRopeAnchor>(CRopeAnchor*)
 T datamap_t* DataMapInit<CSatchelCharge>(CSatchelCharge*)
 T datamap_t* DataMapInit<CSceneEntity>(CSceneEntity*)
 T datamap_t* DataMapInit<CSceneListManager>(CSceneListManager*)
 T datamap_t* DataMapInit<CSceneManager>(CSceneManager*)
 T datamap_t* DataMapInit<CScriptIntro>(CScriptIntro*)
 T datamap_t* DataMapInit<CScriptedTarget>(CScriptedTarget*)
 T datamap_t* DataMapInit<CSniperBullet>(CSniperBullet*)
 T datamap_t* DataMapInit<CSparkTrail>(CSparkTrail*)
 T datamap_t* DataMapInit<CSpeaker>(CSpeaker*)
 T datamap_t* DataMapInit<CSprite>(CSprite*)
 T datamap_t* DataMapInit<CTankTrainAI>(CTankTrainAI*)
 T datamap_t* DataMapInit<CTargetGunshipCrash>(CTargetGunshipCrash*)
 T datamap_t* DataMapInit<CTeamControlPoint>(CTeamControlPoint*)
 T datamap_t* DataMapInit<CTeamControlPointMaster>(CTeamControlPointMaster*)
 T datamap_t* DataMapInit<CTeamControlPointRound>(CTeamControlPointRound*)
 T datamap_t* DataMapInit<CTeamRoundTimer>(CTeamRoundTimer*)
 T datamap_t* DataMapInit<CTeamSpawnPoint>(CTeamSpawnPoint*)
 T datamap_t* DataMapInit<CTeamTrainWatcher>(CTeamTrainWatcher*)
 T datamap_t* DataMapInit<CTeamVehicleSpawnPoint>(CTeamVehicleSpawnPoint*)
 T datamap_t* DataMapInit<CTesla>(CTesla*)
 T datamap_t* DataMapInit<CTestTraceline>(CTestTraceline*)
 T datamap_t* DataMapInit<CTimerEntity>(CTimerEntity*)
 T datamap_t* DataMapInit<CTriggerAreaCapture>(CTriggerAreaCapture*)
 T datamap_t* DataMapInit<CTriggerBrush>(CTriggerBrush*)
 T datamap_t* DataMapInit<CTriggerCamera>(CTriggerCamera*)
 T datamap_t* DataMapInit<CTriggerGravity>(CTriggerGravity*)
 T datamap_t* DataMapInit<CTriggerHurt>(CTriggerHurt*)
 T datamap_t* DataMapInit<CTriggerImpact>(CTriggerImpact*)
 T datamap_t* DataMapInit<CTriggerLook>(CTriggerLook*)
 T datamap_t* DataMapInit<CTriggerMultiple>(CTriggerMultiple*)
 T datamap_t* DataMapInit<CTriggerProximity>(CTriggerProximity*)
 T datamap_t* DataMapInit<CTriggerRemove>(CTriggerRemove*)
 T datamap_t* DataMapInit<CTriggerSoundscape>(CTriggerSoundscape*)
 T datamap_t* DataMapInit<CTriggerVPhysicsMotion>(CTriggerVPhysicsMotion*)
 T datamap_t* DataMapInit<CTriggerWateryDeath>(CTriggerWateryDeath*)
 T datamap_t* DataMapInit<CTriggerWeaponDissolve>(CTriggerWeaponDissolve*)
 T datamap_t* DataMapInit<CTriggerWind>(CTriggerWind*)
 T datamap_t* DataMapInit<CTripmineGrenade>(CTripmineGrenade*)
 T datamap_t* DataMapInit<CTurretTipController>(CTurretTipController*)
 T datamap_t* DataMapInit<CVortigauntChargeToken>(CVortigauntChargeToken*)
 T datamap_t* DataMapInit<CVoteController>(CVoteController*)
 T datamap_t* DataMapInit<CWallHealth>(CWallHealth*)
 T datamap_t* DataMapInit<CWaterBullet>(CWaterBullet*)
 T datamap_t* DataMapInit<CWateryDeathLeech>(CWateryDeathLeech*)
 T datamap_t* DataMapInit<CWeaponBugBait>(CWeaponBugBait*)
 T datamap_t* DataMapInit<CWeapon_SLAM>(CWeapon_SLAM*)
 T datamap_t* DataMapInit<CWeightButton>(CWeightButton*)
 T datamap_t* DataMapInit<CWindowPane>(CWindowPane*)
 T datamap_t* DataMapInit<EventQueuePrioritizedEvent_t>(EventQueuePrioritizedEvent_t*)
 T datamap_t* DataMapInit<magnetted_objects_t>(magnetted_objects_t*)
 T datamap_t* DataMapInit<vehiclesounds_t>(vehiclesounds_t*)
 T dyld_stub_binding_helper
 T float const& CNetworkVarBase<float, CBaseAnimating::NetworkVar_m_flCycle>::operator=<int>(int const&)
 T float const& CNetworkVarBase<float, CBaseAnimating::NetworkVar_m_flModelScale>::operator=<float>(float const&)
 T float const& CNetworkVarBase<float, CBaseAnimating::NetworkVar_m_flPlaybackRate>::operator=<double>(double const&)
 T float const& CNetworkVarBase<float, CBaseAnimating::NetworkVar_m_flPlaybackRate>::operator=<int>(int const&)
 T float const& CNetworkVarBase<float, CBaseCombatCharacter::NetworkVar_m_flNextAttack>::operator=<float>(float const&)
 T float const& CNetworkVarBase<float, CBaseCombatWeapon::NetworkVar_m_flNextPrimaryAttack>::operator=<float>(float const&)
 T float const& CNetworkVarBase<float, CBaseCombatWeapon::NetworkVar_m_flNextSecondaryAttack>::operator=<float>(float const&)
 T float const& CNetworkVarBase<float, CBaseCombatWeapon::NetworkVar_m_flTimeWeaponIdle>::operator=<float>(float const&)
 T float const& CNetworkVarBase<float, CBaseFire::NetworkVar_m_flScale>::operator=<float>(float const&)
 T float const& CNetworkVarBase<float, CBaseFire::NetworkVar_m_flScaleTime>::operator=<float>(float const&)
 T float const& CNetworkVarBase<float, CCitadelEnergyCore::NetworkVar_m_flStartTime>::operator=<float>(float const&)
 T float const& CNetworkVarBase<float, CFlare::NetworkVar_m_flTimeBurnOut>::operator=<float>(float const&)
 T float const& CNetworkVarBase<float, CNPC_Manhack::NetworkVar_m_flEnginePitch1Time>::operator=<float>(float const&)
 T float const& CNetworkVarBase<float, CNPC_Manhack::NetworkVar_m_flEnginePitch2Time>::operator=<float>(float const&)
 T float const& CNetworkVarBase<float, CNPC_RollerMine::NetworkVar_m_flActiveTime>::operator=<float>(float const&)
 T float const& CNetworkVarBase<float, CTeamRoundTimer::NetworkVar_m_flTimerEndTime>::operator=<float>(float const&)
 T float const& CNetworkVarBase<float, CWeaponPistol::NetworkVar_m_flSoonestPrimaryAttack>::operator=<float>(float const&)
 T float16::ConvertFloatTo16bits(float)
 T fogparams_t::NetworkStateChanged()
 T fogparams_t::NetworkStateChanged(void*)
 T int CRestore::ReadSimple<Quaternion>(Quaternion*, int, int)
 T int CRestore::ReadSimple<VMatrix>(VMatrix*, int, int)
 T int CRestore::ReadSimple<Vector>(Vector*, int, int)
 T int CRestore::ReadSimple<bool>(bool*, int, int)
 T int CRestore::ReadSimple<char>(char*, int, int)
 T int CRestore::ReadSimple<float>(float*, int, int)
 T int CRestore::ReadSimple<int>(int*, int, int)
 T int CRestore::ReadSimple<interval_t>(interval_t*, int, int)
 T int CRestore::ReadSimple<short>(short*, int, int)
 T int CUtlHashtable<CBaseEntityModelLoadProxy, empty_t, PointerHashFunctor, PointerEqualFunctor, CBaseEntity*>::DoRemove<CBaseEntity*>(CBaseEntity*, unsigned int)
 T int CUtlSortVector<CBaseEntity*, CSortedEntityList::CEntityReportLess, CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> > >::FindLessOrEqual<CBaseEntity*>(CBaseEntity* const&, bool*) const
 T int CUtlSortVector<CDmxAttribute*, CDmxAttributeLess, CUtlVector<CDmxAttribute*, CUtlMemory<CDmxAttribute*, int> > >::Find<CDmxAttribute*>(CDmxAttribute* const&) const
 T int ServerClassInit<DT_AI_BaseNPC::ignored>(DT_AI_BaseNPC::ignored*)
 T int ServerClassInit<DT_AR2Explosion::ignored>(DT_AR2Explosion::ignored*)
 T int ServerClassInit<DT_AlyxEmpEffect::ignored>(DT_AlyxEmpEffect::ignored*)
 T int ServerClassInit<DT_AnimTimeMustBeFirst::ignored>(DT_AnimTimeMustBeFirst::ignored*)
 T int ServerClassInit<DT_Animationlayer::ignored>(DT_Animationlayer::ignored*)
 T int ServerClassInit<DT_BCCLocalPlayerExclusive::ignored>(DT_BCCLocalPlayerExclusive::ignored*)
 T int ServerClassInit<DT_Barnacle::ignored>(DT_Barnacle::ignored*)
 T int ServerClassInit<DT_BaseAnimating::ignored>(DT_BaseAnimating::ignored*)
 T int ServerClassInit<DT_BaseAnimatingOverlay::ignored>(DT_BaseAnimatingOverlay::ignored*)
 T int ServerClassInit<DT_BaseBeam::ignored>(DT_BaseBeam::ignored*)
 T int ServerClassInit<DT_BaseCombatCharacter::ignored>(DT_BaseCombatCharacter::ignored*)
 T int ServerClassInit<DT_BaseCombatWeapon::ignored>(DT_BaseCombatWeapon::ignored*)
 T int ServerClassInit<DT_BaseDoor::ignored>(DT_BaseDoor::ignored*)
 T int ServerClassInit<DT_BaseEntity::ignored>(DT_BaseEntity::ignored*)
 T int ServerClassInit<DT_BaseFlex::ignored>(DT_BaseFlex::ignored*)
 T int ServerClassInit<DT_BaseGrenade::ignored>(DT_BaseGrenade::ignored*)
 T int ServerClassInit<DT_BaseHL2MPBludgeonWeapon::ignored>(DT_BaseHL2MPBludgeonWeapon::ignored*)
 T int ServerClassInit<DT_BaseHL2MPCombatWeapon::ignored>(DT_BaseHL2MPCombatWeapon::ignored*)
 T int ServerClassInit<DT_BaseHLBludgeonWeapon::ignored>(DT_BaseHLBludgeonWeapon::ignored*)
 T int ServerClassInit<DT_BaseHLCombatWeapon::ignored>(DT_BaseHLCombatWeapon::ignored*)
 T int ServerClassInit<DT_BaseHelicopter::ignored>(DT_BaseHelicopter::ignored*)
 T int ServerClassInit<DT_BaseParticleEntity::ignored>(DT_BaseParticleEntity::ignored*)
 T int ServerClassInit<DT_BasePlayer::ignored>(DT_BasePlayer::ignored*)
 T int ServerClassInit<DT_BaseProjectile::ignored>(DT_BaseProjectile::ignored*)
 T int ServerClassInit<DT_BasePropDoor::ignored>(DT_BasePropDoor::ignored*)
 T int ServerClassInit<DT_BaseTeamObjectiveResource::ignored>(DT_BaseTeamObjectiveResource::ignored*)
 T int ServerClassInit<DT_BaseTempEntity::ignored>(DT_BaseTempEntity::ignored*)
 T int ServerClassInit<DT_BaseViewModel::ignored>(DT_BaseViewModel::ignored*)
 T int ServerClassInit<DT_Beam::ignored>(DT_Beam::ignored*)
 T int ServerClassInit<DT_BeamPredictableId::ignored>(DT_BeamPredictableId::ignored*)
 T int ServerClassInit<DT_BoneFollower::ignored>(DT_BoneFollower::ignored*)
 T int ServerClassInit<DT_BreakableProp::ignored>(DT_BreakableProp::ignored*)
 T int ServerClassInit<DT_BreakableSurface::ignored>(DT_BreakableSurface::ignored*)
 T int ServerClassInit<DT_CFish::ignored>(DT_CFish::ignored*)
 T int ServerClassInit<DT_CitadelEnergyCore::ignored>(DT_CitadelEnergyCore::ignored*)
 T int ServerClassInit<DT_CollisionProperty::ignored>(DT_CollisionProperty::ignored*)
 T int ServerClassInit<DT_ColorCorrection::ignored>(DT_ColorCorrection::ignored*)
 T int ServerClassInit<DT_ColorCorrectionVolume::ignored>(DT_ColorCorrectionVolume::ignored*)
 T int ServerClassInit<DT_CombineGunship::ignored>(DT_CombineGunship::ignored*)
 T int ServerClassInit<DT_Corpse::ignored>(DT_Corpse::ignored*)
 T int ServerClassInit<DT_CrossbowBolt::ignored>(DT_CrossbowBolt::ignored*)
 T int ServerClassInit<DT_DetailController::ignored>(DT_DetailController::ignored*)
 T int ServerClassInit<DT_DustTrail::ignored>(DT_DustTrail::ignored*)
 T int ServerClassInit<DT_DynamicLight::ignored>(DT_DynamicLight::ignored*)
 T int ServerClassInit<DT_DynamicProp::ignored>(DT_DynamicProp::ignored*)
 T int ServerClassInit<DT_EffectData::ignored>(DT_EffectData::ignored*)
 T int ServerClassInit<DT_Embers::ignored>(DT_Embers::ignored*)
 T int ServerClassInit<DT_EntityDissolve::ignored>(DT_EntityDissolve::ignored*)
 T int ServerClassInit<DT_EntityFlame::ignored>(DT_EntityFlame::ignored*)
 T int ServerClassInit<DT_EntityParticleTrail::ignored>(DT_EntityParticleTrail::ignored*)
 T int ServerClassInit<DT_EntityParticleTrailInfo::ignored>(DT_EntityParticleTrailInfo::ignored*)
 T int ServerClassInit<DT_EnvHeadcrabCanister::ignored>(DT_EnvHeadcrabCanister::ignored*)
 T int ServerClassInit<DT_EnvHeadcrabCanisterShared::ignored>(DT_EnvHeadcrabCanisterShared::ignored*)
 T int ServerClassInit<DT_EnvParticleScript::ignored>(DT_EnvParticleScript::ignored*)
 T int ServerClassInit<DT_EnvProjectedTexture::ignored>(DT_EnvProjectedTexture::ignored*)
 T int ServerClassInit<DT_EnvScreenEffect::ignored>(DT_EnvScreenEffect::ignored*)
 T int ServerClassInit<DT_EnvScreenOverlay::ignored>(DT_EnvScreenOverlay::ignored*)
 T int ServerClassInit<DT_EnvStarfield::ignored>(DT_EnvStarfield::ignored*)
 T int ServerClassInit<DT_EnvTonemapController::ignored>(DT_EnvTonemapController::ignored*)
 T int ServerClassInit<DT_EnvWind::ignored>(DT_EnvWind::ignored*)
 T int ServerClassInit<DT_EnvWindShared::ignored>(DT_EnvWindShared::ignored*)
 T int ServerClassInit<DT_FireSmoke::ignored>(DT_FireSmoke::ignored*)
 T int ServerClassInit<DT_FireTrail::ignored>(DT_FireTrail::ignored*)
 T int ServerClassInit<DT_Flare::ignored>(DT_Flare::ignored*)
 T int ServerClassInit<DT_FogController::ignored>(DT_FogController::ignored*)
 T int ServerClassInit<DT_FuncAreaPortalWindow::ignored>(DT_FuncAreaPortalWindow::ignored*)
 T int ServerClassInit<DT_FuncConveyor::ignored>(DT_FuncConveyor::ignored*)
 T int ServerClassInit<DT_FuncLadder::ignored>(DT_FuncLadder::ignored*)
 T int ServerClassInit<DT_FuncMonitor::ignored>(DT_FuncMonitor::ignored*)
 T int ServerClassInit<DT_FuncOccluder::ignored>(DT_FuncOccluder::ignored*)
 T int ServerClassInit<DT_FuncReflectiveGlass::ignored>(DT_FuncReflectiveGlass::ignored*)
 T int ServerClassInit<DT_FuncRotating::ignored>(DT_FuncRotating::ignored*)
 T int ServerClassInit<DT_FuncSmokeVolume::ignored>(DT_FuncSmokeVolume::ignored*)
 T int ServerClassInit<DT_FuncTrackTrain::ignored>(DT_FuncTrackTrain::ignored*)
 T int ServerClassInit<DT_Func_Dust::ignored>(DT_Func_Dust::ignored*)
 T int ServerClassInit<DT_Func_LOD::ignored>(DT_Func_LOD::ignored*)
 T int ServerClassInit<DT_GameRulesProxy::ignored>(DT_GameRulesProxy::ignored*)
 T int ServerClassInit<DT_HL2GameRules::ignored>(DT_HL2GameRules::ignored*)
 T int ServerClassInit<DT_HL2Local::ignored>(DT_HL2Local::ignored*)
 T int ServerClassInit<DT_HL2MPGameRulesProxy::ignored>(DT_HL2MPGameRulesProxy::ignored*)
 T int ServerClassInit<DT_HL2MPMachineGun::ignored>(DT_HL2MPMachineGun::ignored*)
 T int ServerClassInit<DT_HL2MPRagdoll::ignored>(DT_HL2MPRagdoll::ignored*)
 T int ServerClassInit<DT_HL2MPRules::ignored>(DT_HL2MPRules::ignored*)
 T int ServerClassInit<DT_HL2MP_Player::ignored>(DT_HL2MP_Player::ignored*)
 T int ServerClassInit<DT_HL2_Player::ignored>(DT_HL2_Player::ignored*)
 T int ServerClassInit<DT_HLMachineGun::ignored>(DT_HLMachineGun::ignored*)
 T int ServerClassInit<DT_HLSelectFireMachineGun::ignored>(DT_HLSelectFireMachineGun::ignored*)
 T int ServerClassInit<DT_HalfLife2Proxy::ignored>(DT_HalfLife2Proxy::ignored*)
 T int ServerClassInit<DT_HandleTest::ignored>(DT_HandleTest::ignored*)
 T int ServerClassInit<DT_InfoLadderDismount::ignored>(DT_InfoLadderDismount::ignored*)
 T int ServerClassInit<DT_InfoLightingRelative::ignored>(DT_InfoLightingRelative::ignored*)
 T int ServerClassInit<DT_InfoOverlayAccessor::ignored>(DT_InfoOverlayAccessor::ignored*)
 T int ServerClassInit<DT_InfoTeleporterCountdown::ignored>(DT_InfoTeleporterCountdown::ignored*)
 T int ServerClassInit<DT_LaserDot::ignored>(DT_LaserDot::ignored*)
 T int ServerClassInit<DT_LightGlow::ignored>(DT_LightGlow::ignored*)
 T int ServerClassInit<DT_Local::ignored>(DT_Local::ignored*)
 T int ServerClassInit<DT_LocalActiveWeaponData::ignored>(DT_LocalActiveWeaponData::ignored*)
 T int ServerClassInit<DT_LocalPlayerExclusive::ignored>(DT_LocalPlayerExclusive::ignored*)
 T int ServerClassInit<DT_LocalWeaponData::ignored>(DT_LocalWeaponData::ignored*)
 T int ServerClassInit<DT_MaterialModifyControl::ignored>(DT_MaterialModifyControl::ignored*)
 T int ServerClassInit<DT_MortarShell::ignored>(DT_MortarShell::ignored*)
 T int ServerClassInit<DT_MovieExplosion::ignored>(DT_MovieExplosion::ignored*)
 T int ServerClassInit<DT_NPC_AntlionGuard::ignored>(DT_NPC_AntlionGuard::ignored*)
 T int ServerClassInit<DT_NPC_Barney::ignored>(DT_NPC_Barney::ignored*)
 T int ServerClassInit<DT_NPC_Manhack::ignored>(DT_NPC_Manhack::ignored*)
 T int ServerClassInit<DT_NPC_Strider::ignored>(DT_NPC_Strider::ignored*)
 T int ServerClassInit<DT_NPC_Vortigaunt::ignored>(DT_NPC_Vortigaunt::ignored*)
 T int ServerClassInit<DT_OverlayVars::ignored>(DT_OverlayVars::ignored*)
 T int ServerClassInit<DT_ParticleFire::ignored>(DT_ParticleFire::ignored*)
 T int ServerClassInit<DT_ParticlePerformanceMonitor::ignored>(DT_ParticlePerformanceMonitor::ignored*)
 T int ServerClassInit<DT_ParticleSmokeGrenade::ignored>(DT_ParticleSmokeGrenade::ignored*)
 T int ServerClassInit<DT_ParticleSystem::ignored>(DT_ParticleSystem::ignored*)
 T int ServerClassInit<DT_PhysBox::ignored>(DT_PhysBox::ignored*)
 T int ServerClassInit<DT_PhysBoxMultiplayer::ignored>(DT_PhysBoxMultiplayer::ignored*)
 T int ServerClassInit<DT_PhysMagnet::ignored>(DT_PhysMagnet::ignored*)
 T int ServerClassInit<DT_PhysicsProp::ignored>(DT_PhysicsProp::ignored*)
 T int ServerClassInit<DT_PhysicsPropMultiplayer::ignored>(DT_PhysicsPropMultiplayer::ignored*)
 T int ServerClassInit<DT_Plasma::ignored>(DT_Plasma::ignored*)
 T int ServerClassInit<DT_PlayerResource::ignored>(DT_PlayerResource::ignored*)
 T int ServerClassInit<DT_PlayerState::ignored>(DT_PlayerState::ignored*)
 T int ServerClassInit<DT_PointCamera::ignored>(DT_PointCamera::ignored*)
 T int ServerClassInit<DT_PointCommentaryNode::ignored>(DT_PointCommentaryNode::ignored*)
 T int ServerClassInit<DT_PoseController::ignored>(DT_PoseController::ignored*)
 T int ServerClassInit<DT_Precipitation::ignored>(DT_Precipitation::ignored*)
 T int ServerClassInit<DT_PredictableId::ignored>(DT_PredictableId::ignored*)
 T int ServerClassInit<DT_PredictedViewModel::ignored>(DT_PredictedViewModel::ignored*)
 T int ServerClassInit<DT_PropAirboat::ignored>(DT_PropAirboat::ignored*)
 T int ServerClassInit<DT_PropCombineBall::ignored>(DT_PropCombineBall::ignored*)
 T int ServerClassInit<DT_PropCrane::ignored>(DT_PropCrane::ignored*)
 T int ServerClassInit<DT_PropVehicleDriveable::ignored>(DT_PropVehicleDriveable::ignored*)
 T int ServerClassInit<DT_PropVehiclePrisonerPod::ignored>(DT_PropVehiclePrisonerPod::ignored*)
 T int ServerClassInit<DT_ProxyToggle::ignored>(DT_ProxyToggle::ignored*)
 T int ServerClassInit<DT_ProxyToggle_ProxiedData::ignored>(DT_ProxyToggle_ProxiedData::ignored*)
 T int ServerClassInit<DT_QuadraticBeam::ignored>(DT_QuadraticBeam::ignored*)
 T int ServerClassInit<DT_Ragdoll::ignored>(DT_Ragdoll::ignored*)
 T int ServerClassInit<DT_RagdollManager::ignored>(DT_RagdollManager::ignored*)
 T int ServerClassInit<DT_Ragdoll_Attached::ignored>(DT_Ragdoll_Attached::ignored*)
 T int ServerClassInit<DT_RocketTrail::ignored>(DT_RocketTrail::ignored*)
 T int ServerClassInit<DT_RollerMine::ignored>(DT_RollerMine::ignored*)
 T int ServerClassInit<DT_RopeKeyframe::ignored>(DT_RopeKeyframe::ignored*)
 T int ServerClassInit<DT_RotorWashEmitter::ignored>(DT_RotorWashEmitter::ignored*)
 T int ServerClassInit<DT_SceneEntity::ignored>(DT_SceneEntity::ignored*)
 T int ServerClassInit<DT_ScriptIntro::ignored>(DT_ScriptIntro::ignored*)
 T int ServerClassInit<DT_ServerAnimationData::ignored>(DT_ServerAnimationData::ignored*)
 T int ServerClassInit<DT_ShadowControl::ignored>(DT_ShadowControl::ignored*)
 T int ServerClassInit<DT_SlideshowDisplay::ignored>(DT_SlideshowDisplay::ignored*)
 T int ServerClassInit<DT_SmokeStack::ignored>(DT_SmokeStack::ignored*)
 T int ServerClassInit<DT_SmokeTrail::ignored>(DT_SmokeTrail::ignored*)
 T int ServerClassInit<DT_SporeExplosion::ignored>(DT_SporeExplosion::ignored*)
 T int ServerClassInit<DT_SporeTrail::ignored>(DT_SporeTrail::ignored*)
 T int ServerClassInit<DT_SpotlightEnd::ignored>(DT_SpotlightEnd::ignored*)
 T int ServerClassInit<DT_Sprite::ignored>(DT_Sprite::ignored*)
 T int ServerClassInit<DT_SpriteOriented::ignored>(DT_SpriteOriented::ignored*)
 T int ServerClassInit<DT_SpriteTrail::ignored>(DT_SpriteTrail::ignored*)
 T int ServerClassInit<DT_SteamJet::ignored>(DT_SteamJet::ignored*)
 T int ServerClassInit<DT_Sun::ignored>(DT_Sun::ignored*)
 T int ServerClassInit<DT_TEAntlionDust::ignored>(DT_TEAntlionDust::ignored*)
 T int ServerClassInit<DT_TEArmorRicochet::ignored>(DT_TEArmorRicochet::ignored*)
 T int ServerClassInit<DT_TEBSPDecal::ignored>(DT_TEBSPDecal::ignored*)
 T int ServerClassInit<DT_TEBeamEntPoint::ignored>(DT_TEBeamEntPoint::ignored*)
 T int ServerClassInit<DT_TEBeamEnts::ignored>(DT_TEBeamEnts::ignored*)
 T int ServerClassInit<DT_TEBeamFollow::ignored>(DT_TEBeamFollow::ignored*)
 T int ServerClassInit<DT_TEBeamLaser::ignored>(DT_TEBeamLaser::ignored*)
 T int ServerClassInit<DT_TEBeamPoints::ignored>(DT_TEBeamPoints::ignored*)
 T int ServerClassInit<DT_TEBeamRing::ignored>(DT_TEBeamRing::ignored*)
 T int ServerClassInit<DT_TEBeamRingPoint::ignored>(DT_TEBeamRingPoint::ignored*)
 T int ServerClassInit<DT_TEBeamSpline::ignored>(DT_TEBeamSpline::ignored*)
 T int ServerClassInit<DT_TEBloodSprite::ignored>(DT_TEBloodSprite::ignored*)
 T int ServerClassInit<DT_TEBloodStream::ignored>(DT_TEBloodStream::ignored*)
 T int ServerClassInit<DT_TEBreakModel::ignored>(DT_TEBreakModel::ignored*)
 T int ServerClassInit<DT_TEBubbleTrail::ignored>(DT_TEBubbleTrail::ignored*)
 T int ServerClassInit<DT_TEBubbles::ignored>(DT_TEBubbles::ignored*)
 T int ServerClassInit<DT_TEClientProjectile::ignored>(DT_TEClientProjectile::ignored*)
 T int ServerClassInit<DT_TEConcussiveExplosion::ignored>(DT_TEConcussiveExplosion::ignored*)
 T int ServerClassInit<DT_TEDecal::ignored>(DT_TEDecal::ignored*)
 T int ServerClassInit<DT_TEDust::ignored>(DT_TEDust::ignored*)
 T int ServerClassInit<DT_TEDynamicLight::ignored>(DT_TEDynamicLight::ignored*)
 T int ServerClassInit<DT_TEEffectDispatch::ignored>(DT_TEEffectDispatch::ignored*)
 T int ServerClassInit<DT_TEEnergySplash::ignored>(DT_TEEnergySplash::ignored*)
 T int ServerClassInit<DT_TEExplosion::ignored>(DT_TEExplosion::ignored*)
 T int ServerClassInit<DT_TEFizz::ignored>(DT_TEFizz::ignored*)
 T int ServerClassInit<DT_TEFootprintDecal::ignored>(DT_TEFootprintDecal::ignored*)
 T int ServerClassInit<DT_TEGaussExplosion::ignored>(DT_TEGaussExplosion::ignored*)
 T int ServerClassInit<DT_TEGlowSprite::ignored>(DT_TEGlowSprite::ignored*)
 T int ServerClassInit<DT_TEHL2MPFireBullets::ignored>(DT_TEHL2MPFireBullets::ignored*)
 T int ServerClassInit<DT_TEImpact::ignored>(DT_TEImpact::ignored*)
 T int ServerClassInit<DT_TEKillPlayerAttachments::ignored>(DT_TEKillPlayerAttachments::ignored*)
 T int ServerClassInit<DT_TELargeFunnel::ignored>(DT_TELargeFunnel::ignored*)
 T int ServerClassInit<DT_TEMetalSparks::ignored>(DT_TEMetalSparks::ignored*)
 T int ServerClassInit<DT_TEMuzzleFlash::ignored>(DT_TEMuzzleFlash::ignored*)
 T int ServerClassInit<DT_TEParticleSystem::ignored>(DT_TEParticleSystem::ignored*)
 T int ServerClassInit<DT_TEPhysicsProp::ignored>(DT_TEPhysicsProp::ignored*)
 T int ServerClassInit<DT_TEPlayerDecal::ignored>(DT_TEPlayerDecal::ignored*)
 T int ServerClassInit<DT_TEProjectedDecal::ignored>(DT_TEProjectedDecal::ignored*)
 T int ServerClassInit<DT_TEShatterSurface::ignored>(DT_TEShatterSurface::ignored*)
 T int ServerClassInit<DT_TEShowLine::ignored>(DT_TEShowLine::ignored*)
 T int ServerClassInit<DT_TESmoke::ignored>(DT_TESmoke::ignored*)
 T int ServerClassInit<DT_TESparks::ignored>(DT_TESparks::ignored*)
 T int ServerClassInit<DT_TESprite::ignored>(DT_TESprite::ignored*)
 T int ServerClassInit<DT_TESpriteSpray::ignored>(DT_TESpriteSpray::ignored*)
 T int ServerClassInit<DT_TEWorldDecal::ignored>(DT_TEWorldDecal::ignored*)
 T int ServerClassInit<DT_Team::ignored>(DT_Team::ignored*)
 T int ServerClassInit<DT_TeamRoundTimer::ignored>(DT_TeamRoundTimer::ignored*)
 T int ServerClassInit<DT_TeamTrainWatcher::ignored>(DT_TeamTrainWatcher::ignored*)
 T int ServerClassInit<DT_TeamplayRoundBasedRules::ignored>(DT_TeamplayRoundBasedRules::ignored*)
 T int ServerClassInit<DT_TeamplayRoundBasedRulesProxy::ignored>(DT_TeamplayRoundBasedRulesProxy::ignored*)
 T int ServerClassInit<DT_Tesla::ignored>(DT_Tesla::ignored*)
 T int ServerClassInit<DT_TestTraceline::ignored>(DT_TestTraceline::ignored*)
 T int ServerClassInit<DT_VGuiScreen::ignored>(DT_VGuiScreen::ignored*)
 T int ServerClassInit<DT_VortigauntChargeToken::ignored>(DT_VortigauntChargeToken::ignored*)
 T int ServerClassInit<DT_VortigauntEffectDispel::ignored>(DT_VortigauntEffectDispel::ignored*)
 T int ServerClassInit<DT_VoteController::ignored>(DT_VoteController::ignored*)
 T int ServerClassInit<DT_WORLD::ignored>(DT_WORLD::ignored*)
 T int ServerClassInit<DT_WaterBullet::ignored>(DT_WaterBullet::ignored*)
 T int ServerClassInit<DT_WaterLODControl::ignored>(DT_WaterLODControl::ignored*)
 T int ServerClassInit<DT_Weapon357::ignored>(DT_Weapon357::ignored*)
 T int ServerClassInit<DT_WeaponAR2::ignored>(DT_WeaponAR2::ignored*)
 T int ServerClassInit<DT_WeaponAnnabelle::ignored>(DT_WeaponAnnabelle::ignored*)
 T int ServerClassInit<DT_WeaponBugBait::ignored>(DT_WeaponBugBait::ignored*)
 T int ServerClassInit<DT_WeaponCrossbow::ignored>(DT_WeaponCrossbow::ignored*)
 T int ServerClassInit<DT_WeaponCrowbar::ignored>(DT_WeaponCrowbar::ignored*)
 T int ServerClassInit<DT_WeaponCubemap::ignored>(DT_WeaponCubemap::ignored*)
 T int ServerClassInit<DT_WeaponCycler::ignored>(DT_WeaponCycler::ignored*)
 T int ServerClassInit<DT_WeaponFrag::ignored>(DT_WeaponFrag::ignored*)
 T int ServerClassInit<DT_WeaponHL2MPBase::ignored>(DT_WeaponHL2MPBase::ignored*)
 T int ServerClassInit<DT_WeaponPhysCannon::ignored>(DT_WeaponPhysCannon::ignored*)
 T int ServerClassInit<DT_WeaponPistol::ignored>(DT_WeaponPistol::ignored*)
 T int ServerClassInit<DT_WeaponRPG::ignored>(DT_WeaponRPG::ignored*)
 T int ServerClassInit<DT_WeaponSMG1::ignored>(DT_WeaponSMG1::ignored*)
 T int ServerClassInit<DT_WeaponShotgun::ignored>(DT_WeaponShotgun::ignored*)
 T int ServerClassInit<DT_WeaponStunStick::ignored>(DT_WeaponStunStick::ignored*)
 T int ServerClassInit<DT_Weapon_SLAM::ignored>(DT_Weapon_SLAM::ignored*)
 T int V_sprintf_safe<260ul>(char (&) [260ul], char const*, ...)
 T int const& CNetworkVarBase<int, CBaseAnimating::NetworkVar_m_nBody>::operator=<int>(int const&)
 T int const& CNetworkVarBase<int, CBaseCombatWeapon::NetworkVar_m_iState>::operator=<int>(int const&)
 T int const& CNetworkVarBase<int, CBaseEntity::NetworkVar_m_spawnflags>::operator&=<int>(int const&)
 T int const& CNetworkVarBase<int, CBaseEntity::NetworkVar_m_spawnflags>::operator|=<int>(int const&)
 T int const& CNetworkVarBase<int, CBaseFire::NetworkVar_m_nFlags>::operator&=<int>(int const&)
 T int const& CNetworkVarBase<int, CBaseFire::NetworkVar_m_nFlags>::operator|=<int>(int const&)
 T int const& CNetworkVarBase<int, CBeam::NetworkVar_m_nNumBeamEnts>::operator=<int>(int const&)
 T int const& CNetworkVarBase<int, CCitadelEnergyCore::NetworkVar_m_nState>::operator=<int>(int const&)
 T int const& CNetworkVarBase<int, CFunc_Dust::NetworkVar_m_DustFlags>::operator|=<int>(int const&)
 T int const& CNetworkVarBase<int, CMaterialModifyControl::NetworkVar_m_nModifyMode>::operator=<MaterialModifyMode_t>(MaterialModifyMode_t const&)
 T int const& CNetworkVarBase<int, CNPC_Manhack::NetworkVar_m_nEnginePitch1>::operator=<int>(int const&)
 T int const& CNetworkVarBase<int, CNPC_Manhack::NetworkVar_m_nEnginePitch2>::operator=<int>(int const&)
 T int const& CNetworkVarBase<int, CPropAirboat::NetworkVar_m_nAmmoCount>::operator=<int>(int const&)
 T int const& CNetworkVarBase<int, CRopeKeyframe::NetworkVar_m_RopeFlags>::operator|=<int>(int const&)
 T int const& CNetworkVarBase<int, CRopeKeyframe::NetworkVar_m_RopeLength>::operator=<int>(int const&)
 T int const& CNetworkVarBase<int, CRopeKeyframe::NetworkVar_m_iRopeMaterialModelIndex>::operator=<int>(int const&)
 T int const& CNetworkVarBase<int, CRopeKeyframe::NetworkVar_m_nSegments>::operator=<int>(int const&)
 T int const& CNetworkVarBase<int, CSmokeStack::NetworkVar_m_bEmit>::operator=<bool>(bool const&)
 T int const& CNetworkVarBase<int, CSmokeStack::NetworkVar_m_iMaterialModel>::operator=<int>(int const&)
 T int const& CNetworkVarBase<int, CSteamJet::NetworkVar_m_bEmit>::operator=<bool>(bool const&)
 T int const& CNetworkVarBase<int, CTeamTrainWatcher::NetworkVar_m_iTrainSpeedLevel>::operator=<int>(int const&)
 T int const& CNetworkVarBase<int, CWeapon_SLAM::NetworkVar_m_tSlamState>::operator=<int>(int const&)
 T kill_helper(CCommand const&, bool)
 T killvector_helper(CCommand const&, bool)
 T locksound_t::GetDataDescMap()
 T mstudioanimdesc_t::pAnim(int*) const
 T mstudioanimdesc_t::pAnim(int*, float&) const
 T mstudioanimdesc_t::pHierarchy(int) const
 T mstudioanimdesc_t::pIKRule(int) const
 T nexttoken(char*, unsigned long, char const*, char)
 T non-virtual thunk to CAI_BaseActor::UseSemaphore()
 T non-virtual thunk to CAI_BaseHumanoid::OnMoveBlocked(AIMoveResult_t*)
 T non-virtual thunk to CAI_BaseNPC::CalcYawSpeed()
 T non-virtual thunk to CAI_BaseNPC::OnCalcBaseMove(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T non-virtual thunk to CAI_BaseNPC::OnObstructionPreSteer(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T non-virtual thunk to CAI_BasePhysicsFlyingBot::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_BestEnemy()
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_CanFlinch()
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_CanRunAScriptedNPCInteraction(bool)
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_GatherConditions()
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_GetDefaultNavGoalTolerance()
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_GetFlinchActivity(bool, bool)
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_GetMaxTacticalLateralMovement()
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_GetReasonableFacingDist()
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_HandleAnimEvent(animevent_t*)
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_IsCrouchedActivity(Activity)
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_IsCrouching()
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_IsInterruptable()
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_IsNavigationUrgent()
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_IsValidCover(Vector const&, CAI_Hint const*)
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_IsValidEnemy(CBaseEntity*)
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_IsValidShootPosition(Vector const&, CAI_Node*, CAI_Hint const*)
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_ModifyOrAppendCriteria(AI_CriteriaSet&)
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_NPC_TranslateActivity(Activity)
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_OnCalcBaseMove(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_OnFriendDamaged(CBaseCombatCharacter*, CBaseEntity*)
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_OnSeeEntity(CBaseEntity*)
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_OnTakeDamage_Alive(CTakeDamageInfo const&)
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_QueryHearSound(CSound*)
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_SelectSchedule()
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_ShouldIgnoreSound(CSound*)
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_ShouldPlayerAvoid()
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_Teleport(Vector const*, QAngle const*, Vector const*)
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_TranslateSchedule(int)
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::OnCalcBaseMove(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T non-virtual thunk to CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_BestEnemy()
 T non-virtual thunk to CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_CanFlinch()
 T non-virtual thunk to CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_CanRunAScriptedNPCInteraction(bool)
 T non-virtual thunk to CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_GatherConditions()
 T non-virtual thunk to CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_GetDefaultNavGoalTolerance()
 T non-virtual thunk to CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_GetFlinchActivity(bool, bool)
 T non-virtual thunk to CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_GetMaxTacticalLateralMovement()
 T non-virtual thunk to CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_GetReasonableFacingDist()
 T non-virtual thunk to CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_HandleAnimEvent(animevent_t*)
 T non-virtual thunk to CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_IsCrouchedActivity(Activity)
 T non-virtual thunk to CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_IsCrouching()
 T non-virtual thunk to CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_IsInterruptable()
 T non-virtual thunk to CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_IsNavigationUrgent()
 T non-virtual thunk to CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_IsValidCover(Vector const&, CAI_Hint const*)
 T non-virtual thunk to CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_IsValidEnemy(CBaseEntity*)
 T non-virtual thunk to CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_IsValidShootPosition(Vector const&, CAI_Node*, CAI_Hint const*)
 T non-virtual thunk to CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_ModifyOrAppendCriteria(AI_CriteriaSet&)
 T non-virtual thunk to CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_NPC_TranslateActivity(Activity)
 T non-virtual thunk to CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_OnCalcBaseMove(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T non-virtual thunk to CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_OnFriendDamaged(CBaseCombatCharacter*, CBaseEntity*)
 T non-virtual thunk to CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_OnSeeEntity(CBaseEntity*)
 T non-virtual thunk to CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_OnTakeDamage_Alive(CTakeDamageInfo const&)
 T non-virtual thunk to CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_QueryHearSound(CSound*)
 T non-virtual thunk to CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_SelectSchedule()
 T non-virtual thunk to CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_ShouldIgnoreSound(CSound*)
 T non-virtual thunk to CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_ShouldPlayerAvoid()
 T non-virtual thunk to CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_Teleport(Vector const*, QAngle const*, Vector const*)
 T non-virtual thunk to CAI_BehaviorHost<CAI_BlendedNPC>::BackBridge_TranslateSchedule(int)
 T non-virtual thunk to CAI_BehaviorHost<CAI_BlendedNPC>::OnCalcBaseMove(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T non-virtual thunk to CAI_GoalEntity::OnEntityCreated(CBaseEntity*)
 T non-virtual thunk to CAI_GoalEntity::OnEntityDeleted(CBaseEntity*)
 T non-virtual thunk to CAI_LeadGoal::GetConceptModifiers(char const*)
 T non-virtual thunk to CAI_LeadGoal::OnEvent(int)
 T non-virtual thunk to CAI_LeadGoal_Weapon::GetConceptModifiers(char const*)
 T non-virtual thunk to CAI_Navigator::CalcYawSpeed()
 T non-virtual thunk to CAI_Navigator::OnCalcBaseMove(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T non-virtual thunk to CAI_Navigator::OnFailedLocalNavigation(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T non-virtual thunk to CAI_Navigator::OnFailedSteer(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T non-virtual thunk to CAI_Navigator::OnInsufficientStopDist(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T non-virtual thunk to CAI_Navigator::OnMoveBlocked(AIMoveResult_t*)
 T non-virtual thunk to CAI_Navigator::OnMoveExecuteFailed(AILocalMoveGoal_t const&, AIMoveTrace_t const&, AIMotorMoveResult_t, AIMoveResult_t*)
 T non-virtual thunk to CAI_Navigator::OnMoveStalled(AILocalMoveGoal_t const&)
 T non-virtual thunk to CAI_Navigator::OnObstructionPreSteer(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T non-virtual thunk to CAI_PlayerAlly::OnSpokeConcept(char const*, AI_Response*)
 T non-virtual thunk to CAI_PlayerAlly::OnStartSpeaking()
 T non-virtual thunk to CAI_Relationship::OnEntityDeleted(CBaseEntity*)
 T non-virtual thunk to CAI_Relationship::OnEntitySpawned(CBaseEntity*)
 T non-virtual thunk to CAI_ScriptConditions::OnEntitySpawned(CBaseEntity*)
 T non-virtual thunk to CAI_SpeechFilter::OnEntityCreated(CBaseEntity*)
 T non-virtual thunk to CAI_SpeechFilter::OnEntityDeleted(CBaseEntity*)
 T non-virtual thunk to CBaseAchievement::GetAchievementID()
 T non-virtual thunk to CBaseAchievement::GetCount()
 T non-virtual thunk to CBaseAchievement::GetFlags()
 T non-virtual thunk to CBaseAchievement::GetGoal()
 T non-virtual thunk to CBaseAchievement::GetName()
 T non-virtual thunk to CBaseAchievement::GetPointValue()
 T non-virtual thunk to CBaseAchievement::IsAchieved()
 T non-virtual thunk to CBaseAchievement::SetShowOnHUD(bool)
 T non-virtual thunk to CBaseAchievement::ShouldHideUntilAchieved()
 T non-virtual thunk to CBaseAchievement::ShouldSaveWithGame()
 T non-virtual thunk to CBaseAchievement::ShouldShowOnHUD()
 T non-virtual thunk to CBaseGrenade::~CBaseGrenade()
 T non-virtual thunk to CBaseGrenadeConcussion::~CBaseGrenadeConcussion()
 T non-virtual thunk to CBaseGrenadeContact::~CBaseGrenadeContact()
 T non-virtual thunk to CBaseGrenadeTimed::~CBaseGrenadeTimed()
 T non-virtual thunk to CBaseProjectile::~CBaseProjectile()
 T non-virtual thunk to CBasePropDoor::~CBasePropDoor()
 T non-virtual thunk to CBaseViewModel::GetOwnerViaInterface()
 T non-virtual thunk to CBounceBomb::ForcePhysgunOpen(CBasePlayer*)
 T non-virtual thunk to CBounceBomb::HasPreferredCarryAnglesForPlayer(CBasePlayer*)
 T non-virtual thunk to CBounceBomb::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T non-virtual thunk to CBounceBomb::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T non-virtual thunk to CBounceBomb::PreferredCarryAngles()
 T non-virtual thunk to CBreakable::GetBasePropData()
 T non-virtual thunk to CBreakable::GetBreakableCount()
 T non-virtual thunk to CBreakable::GetBreakableModel()
 T non-virtual thunk to CBreakable::GetBreakableSkin()
 T non-virtual thunk to CBreakable::GetDmgModBullet()
 T non-virtual thunk to CBreakable::GetDmgModClub()
 T non-virtual thunk to CBreakable::GetDmgModExplosive()
 T non-virtual thunk to CBreakable::GetExplosiveDamage()
 T non-virtual thunk to CBreakable::GetExplosiveRadius()
 T non-virtual thunk to CBreakable::GetMaxBreakableSize()
 T non-virtual thunk to CBreakable::GetMultiplayerBreakMode() const
 T non-virtual thunk to CBreakable::GetPhysicsDamageTable()
 T non-virtual thunk to CBreakable::GetPhysicsMode()
 T non-virtual thunk to CBreakable::HasInteraction(propdata_interactions_t)
 T non-virtual thunk to CBreakable::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T non-virtual thunk to CBreakable::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T non-virtual thunk to CBreakable::SetBasePropData(string_t)
 T non-virtual thunk to CBreakable::SetBreakableCount(int)
 T non-virtual thunk to CBreakable::SetBreakableModel(string_t)
 T non-virtual thunk to CBreakable::SetBreakableSkin(int)
 T non-virtual thunk to CBreakable::SetDmgModBullet(float)
 T non-virtual thunk to CBreakable::SetDmgModClub(float)
 T non-virtual thunk to CBreakable::SetDmgModExplosive(float)
 T non-virtual thunk to CBreakable::SetExplosiveDamage(float)
 T non-virtual thunk to CBreakable::SetExplosiveRadius(float)
 T non-virtual thunk to CBreakable::SetInteraction(propdata_interactions_t)
 T non-virtual thunk to CBreakable::SetMaxBreakableSize(int)
 T non-virtual thunk to CBreakable::SetMultiplayerBreakMode(mp_break_t)
 T non-virtual thunk to CBreakable::SetPhysicsDamageTable(string_t)
 T non-virtual thunk to CBreakable::SetPhysicsMode(int)
 T non-virtual thunk to CBreakable::SetPropDataBlocksLOS(bool)
 T non-virtual thunk to CBreakable::SetPropDataIsAIWalkable(bool)
 T non-virtual thunk to CBreakableProp::GetBasePropData()
 T non-virtual thunk to CBreakableProp::GetBreakableCount()
 T non-virtual thunk to CBreakableProp::GetBreakableModel()
 T non-virtual thunk to CBreakableProp::GetBreakableSkin()
 T non-virtual thunk to CBreakableProp::GetDmgModBullet()
 T non-virtual thunk to CBreakableProp::GetDmgModClub()
 T non-virtual thunk to CBreakableProp::GetDmgModExplosive()
 T non-virtual thunk to CBreakableProp::GetExplosiveDamage()
 T non-virtual thunk to CBreakableProp::GetExplosiveRadius()
 T non-virtual thunk to CBreakableProp::GetMaxBreakableSize()
 T non-virtual thunk to CBreakableProp::GetMultiplayerBreakMode() const
 T non-virtual thunk to CBreakableProp::GetPhysicsDamageTable()
 T non-virtual thunk to CBreakableProp::GetPhysicsMode()
 T non-virtual thunk to CBreakableProp::HasInteraction(propdata_interactions_t)
 T non-virtual thunk to CBreakableProp::HasPreferredCarryAnglesForPlayer(CBasePlayer*)
 T non-virtual thunk to CBreakableProp::OnAttemptPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T non-virtual thunk to CBreakableProp::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T non-virtual thunk to CBreakableProp::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T non-virtual thunk to CBreakableProp::PhysGunLaunchAngularImpulse()
 T non-virtual thunk to CBreakableProp::PreferredCarryAngles()
 T non-virtual thunk to CBreakableProp::SetBasePropData(string_t)
 T non-virtual thunk to CBreakableProp::SetBreakableCount(int)
 T non-virtual thunk to CBreakableProp::SetBreakableModel(string_t)
 T non-virtual thunk to CBreakableProp::SetBreakableSkin(int)
 T non-virtual thunk to CBreakableProp::SetDmgModBullet(float)
 T non-virtual thunk to CBreakableProp::SetDmgModClub(float)
 T non-virtual thunk to CBreakableProp::SetDmgModExplosive(float)
 T non-virtual thunk to CBreakableProp::SetExplosiveDamage(float)
 T non-virtual thunk to CBreakableProp::SetExplosiveRadius(float)
 T non-virtual thunk to CBreakableProp::SetInteraction(propdata_interactions_t)
 T non-virtual thunk to CBreakableProp::SetMaxBreakableSize(int)
 T non-virtual thunk to CBreakableProp::SetMultiplayerBreakMode(mp_break_t)
 T non-virtual thunk to CBreakableProp::SetPhysicsDamageTable(string_t)
 T non-virtual thunk to CBreakableProp::SetPhysicsMode(int)
 T non-virtual thunk to CBreakableProp::SetPropDataBlocksLOS(bool)
 T non-virtual thunk to CBreakableProp::SetPropDataIsAIWalkable(bool)
 T non-virtual thunk to CCollisionEvent::AdditionalCollisionChecksThisTick(int)
 T non-virtual thunk to CCollisionEvent::ObjectSleep(IPhysicsObject*)
 T non-virtual thunk to CCollisionEvent::ObjectWake(IPhysicsObject*)
 T non-virtual thunk to CCollisionEvent::ShouldCollide(IPhysicsObject*, IPhysicsObject*, void*, void*)
 T non-virtual thunk to CCollisionEvent::ShouldFreezeContacts(IPhysicsObject**, int)
 T non-virtual thunk to CCollisionEvent::ShouldFreezeObject(IPhysicsObject*)
 T non-virtual thunk to CCollisionEvent::ShouldSolvePenetration(IPhysicsObject*, IPhysicsObject*, void*, void*, float)
 T non-virtual thunk to CCombineDropshipContainer::~CCombineDropshipContainer()
 T non-virtual thunk to CDecalEmitterSystem::Init()
 T non-virtual thunk to CDecalEmitterSystem::LevelInitPreEntity()
 T non-virtual thunk to CDecalEmitterSystem::Shutdown()
 T non-virtual thunk to CDecalEmitterSystem::~CDecalEmitterSystem()
 T non-virtual thunk to CDefaultResponseSystem::Init()
 T non-virtual thunk to CDefaultResponseSystem::LevelInitPostEntity()
 T non-virtual thunk to CDefaultResponseSystem::LevelInitPreEntity()
 T non-virtual thunk to CDefaultResponseSystem::Shutdown()
 T non-virtual thunk to CDefaultResponseSystem::~CDefaultResponseSystem()
 T non-virtual thunk to CDirtySpatialPartitionEntityList::OnPostQuery(int)
 T non-virtual thunk to CDirtySpatialPartitionEntityList::OnPreQuery(int)
 T non-virtual thunk to CDirtySpatialPartitionEntityList::OnPreQuery_V1()
 T non-virtual thunk to CDynamicProp::NotifyPositionChanged(CBaseEntity*)
 T non-virtual thunk to CDynamicProp::~CDynamicProp()
 T non-virtual thunk to CEmptyConVar::GetName() const
 T non-virtual thunk to CEmptyConVar::IsFlagSet(int) const
 T non-virtual thunk to CEmptyConVar::SetValue(char const*)
 T non-virtual thunk to CEmptyConVar::SetValue(float)
 T non-virtual thunk to CEmptyConVar::SetValue(int)
 T non-virtual thunk to CEntFireAutoCompletionFunctor::CommandCompletionCallback(char const*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >&)
 T non-virtual thunk to CEventLog::Init()
 T non-virtual thunk to CEventLog::Shutdown()
 T non-virtual thunk to CEventLog::~CEventLog()
 T non-virtual thunk to CFishPool::FireGameEvent(IGameEvent*)
 T non-virtual thunk to CFishPool::~CFishPool()
 T non-virtual thunk to CFunctor2<void (*)(CFunctor**, unsigned int), CFunctor**, int, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >::~CFunctor2()
 T non-virtual thunk to CFunctor2<void (*)(IPhysicsObject*, Vector const&), IPhysicsObject*, Vector, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >::~CFunctor2()
 T non-virtual thunk to CFunctor3<void (*)(IPhysicsObject*, Vector const&, Vector const&), IPhysicsObject*, Vector, Vector, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >::~CFunctor3()
 T non-virtual thunk to CFunctor4<CBaseEntity* (*)(CBaseEntity*, CBaseEntity*, bool, float), CBaseEntity*, CBaseEntity*, bool, float, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >::~CFunctor4()
 T non-virtual thunk to CGib::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T non-virtual thunk to CGib::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T non-virtual thunk to CGrenadeAR2::~CGrenadeAR2()
 T non-virtual thunk to CGrenadeBeam::~CGrenadeBeam()
 T non-virtual thunk to CGrenadeBugBait::~CGrenadeBugBait()
 T non-virtual thunk to CGrenadeFrag::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T non-virtual thunk to CGrenadeFrag::~CGrenadeFrag()
 T non-virtual thunk to CGrenadeHelicopter::HasPreferredCarryAnglesForPlayer(CBasePlayer*)
 T non-virtual thunk to CGrenadeHelicopter::PreferredCarryAngles()
 T non-virtual thunk to CGrenadeHelicopter::~CGrenadeHelicopter()
 T non-virtual thunk to CGrenadeHomer::~CGrenadeHomer()
 T non-virtual thunk to CGrenadePathfollower::~CGrenadePathfollower()
 T non-virtual thunk to CHL2EventLog::Name()
 T non-virtual thunk to CHL2EventLog::~CHL2EventLog()
 T non-virtual thunk to CHLTVDirector::FrameUpdatePostEntityThink()
 T non-virtual thunk to CHLTVDirector::GetDelay()
 T non-virtual thunk to CHLTVDirector::GetDirectorTick()
 T non-virtual thunk to CHLTVDirector::GetHLTVServer()
 T non-virtual thunk to CHLTVDirector::GetModEvents()
 T non-virtual thunk to CHLTVDirector::GetPVSEntity()
 T non-virtual thunk to CHLTVDirector::GetPVSOrigin()
 T non-virtual thunk to CHLTVDirector::Init()
 T non-virtual thunk to CHLTVDirector::IsActive()
 T non-virtual thunk to CHLTVDirector::LevelInitPostEntity()
 T non-virtual thunk to CHLTVDirector::Name()
 T non-virtual thunk to CHLTVDirector::SetHLTVServer(IHLTVServer*)
 T non-virtual thunk to CHLTVDirector::Shutdown()
 T non-virtual thunk to CHLTVDirector::~CHLTVDirector()
 T non-virtual thunk to CItem::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T non-virtual thunk to CItem::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T non-virtual thunk to CItem_ItemCrate::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T non-virtual thunk to CItem_ItemCrate::~CItem_ItemCrate()
 T non-virtual thunk to CKeepUpright::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)
 T non-virtual thunk to CLagCompensationManager::FinishLagCompensation(CBasePlayer*)
 T non-virtual thunk to CLagCompensationManager::IsCurrentlyDoingLagCompensation() const
 T non-virtual thunk to CLagCompensationManager::StartLagCompensation(CBasePlayer*, CUserCmd*)
 T non-virtual thunk to CLogicNavigation::OnEntitySpawned(CBaseEntity*)
 T non-virtual thunk to CMemberFunctor0<CParallelProcessor<QueryCacheUpdateRecord_t, CFuncJobItemProcessor<QueryCacheUpdateRecord_t> >*, void (CParallelProcessor<QueryCacheUpdateRecord_t, CFuncJobItemProcessor<QueryCacheUpdateRecord_t> >::*)(), CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>::~CMemberFunctor0()
 T non-virtual thunk to CMemberFunctor0<CPropCombineBall*, void (CPropCombineBall::*)(), CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>::~CMemberFunctor0()
 T non-virtual thunk to CMemberFunctor1<CAI_Navigator*, bool (CAI_Navigator::*)(Vector const&), Vector, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>::~CMemberFunctor1()
 T non-virtual thunk to CMemberFunctor1<CNPC_RollerMine*, void (CNPC_RollerMine::*)(CBaseEntity*), CBaseEntity*, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>::~CMemberFunctor1()
 T non-virtual thunk to CMemberFunctor2<CAI_Navigator*, bool (CAI_Navigator::*)(AI_NavGoal_t const&, unsigned int), AI_NavGoal_t, unsigned int, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>::~CMemberFunctor2()
 T non-virtual thunk to CMemberFunctor3<CBreakableProp*, void (CBreakableProp::*)(Vector const&, Vector const&, QAngle const&), Vector, Vector, QAngle, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>::~CMemberFunctor3()
 T non-virtual thunk to CNPCBaseInteractive<CAI_BaseNPC>::AlyxFinishedInteraction()
 T non-virtual thunk to CNPCBaseInteractive<CAI_BaseNPC>::AlyxStartedInteraction()
 T non-virtual thunk to CNPCBaseInteractive<CAI_BaseNPC>::CanInteractWith(CAI_BaseNPC*)
 T non-virtual thunk to CNPCBaseInteractive<CAI_BaseNPC>::HasBeenInteractedWith()
 T non-virtual thunk to CNPCBaseInteractive<CAI_BaseNPC>::NotifyInteraction(CAI_BaseNPC*)
 T non-virtual thunk to CNPCBaseInteractive<CAI_BasePhysicsFlyingBot>::AlyxFinishedInteraction()
 T non-virtual thunk to CNPCBaseInteractive<CAI_BasePhysicsFlyingBot>::AlyxStartedInteraction()
 T non-virtual thunk to CNPCBaseInteractive<CAI_BasePhysicsFlyingBot>::CanInteractWith(CAI_BaseNPC*)
 T non-virtual thunk to CNPCBaseInteractive<CAI_BasePhysicsFlyingBot>::HasBeenInteractedWith()
 T non-virtual thunk to CNPCBaseInteractive<CAI_BasePhysicsFlyingBot>::NotifyInteraction(CAI_BaseNPC*)
 T non-virtual thunk to CNPC_Antlion::OnObstructionPreSteer(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T non-virtual thunk to CNPC_BaseScanner::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T non-virtual thunk to CNPC_BaseScanner::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T non-virtual thunk to CNPC_BaseZombie::OnInsufficientStopDist(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T non-virtual thunk to CNPC_Breen::UseSemaphore()
 T non-virtual thunk to CNPC_Citizen::UseSemaphore()
 T non-virtual thunk to CNPC_FloorTurret::CanInteractWith(CAI_BaseNPC*)
 T non-virtual thunk to CNPC_FloorTurret::HasBeenInteractedWith()
 T non-virtual thunk to CNPC_FloorTurret::HasPreferredCarryAnglesForPlayer(CBasePlayer*)
 T non-virtual thunk to CNPC_FloorTurret::NotifyInteraction(CAI_BaseNPC*)
 T non-virtual thunk to CNPC_FloorTurret::OnAttemptPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T non-virtual thunk to CNPC_FloorTurret::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T non-virtual thunk to CNPC_FloorTurret::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T non-virtual thunk to CNPC_FloorTurret::PreferredCarryAngles()
 T non-virtual thunk to CNPC_Manhack::CanInteractWith(CAI_BaseNPC*)
 T non-virtual thunk to CNPC_Manhack::HasBeenInteractedWith()
 T non-virtual thunk to CNPC_Manhack::NotifyInteraction(CAI_BaseNPC*)
 T non-virtual thunk to CNPC_Manhack::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T non-virtual thunk to CNPC_Manhack::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T non-virtual thunk to CNPC_MetroPolice::OnObstructionPreSteer(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T non-virtual thunk to CNPC_PlayerCompanion::OnObstructionPreSteer(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T non-virtual thunk to CNPC_RollerMine::CanInteractWith(CAI_BaseNPC*)
 T non-virtual thunk to CNPC_RollerMine::HasBeenInteractedWith()
 T non-virtual thunk to CNPC_RollerMine::NotifyInteraction(CAI_BaseNPC*)
 T non-virtual thunk to CNPC_RollerMine::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T non-virtual thunk to CNPC_RollerMine::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T non-virtual thunk to CNPC_Strider::GetEntity()
 T non-virtual thunk to CNPC_Strider::GetMinigunOnTargetTime()
 T non-virtual thunk to CNPC_Strider::GetMinigunRateOfFire()
 T non-virtual thunk to CNPC_Strider::GetMinigunShootDowntime()
 T non-virtual thunk to CNPC_Strider::GetMinigunShootDuration()
 T non-virtual thunk to CNPC_Strider::GetMinigunShootVariation()
 T non-virtual thunk to CNPC_Strider::GetViewCone(StriderMinigunViewcone_t&)
 T non-virtual thunk to CNPC_Strider::NewTarget()
 T non-virtual thunk to CNPC_Strider::OnMinigunStartShooting(CBaseEntity*)
 T non-virtual thunk to CNPC_Strider::OnMinigunStopShooting(CBaseEntity*)
 T non-virtual thunk to CNPC_Strider::ShootMinigun(Vector const*, float, Vector const&)
 T non-virtual thunk to CNPC_Strider::UpdateMinigunControls(float&, float&)
 T non-virtual thunk to CNotifyList::OnEntityCreated(CBaseEntity*)
 T non-virtual thunk to CNotifyList::OnEntityDeleted(CBaseEntity*)
 T non-virtual thunk to COrnamentProp::~COrnamentProp()
 T non-virtual thunk to CPhysBox::HasPreferredCarryAnglesForPlayer(CBasePlayer*)
 T non-virtual thunk to CPhysBox::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T non-virtual thunk to CPhysBox::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T non-virtual thunk to CPhysBox::PreferredCarryAngles()
 T non-virtual thunk to CPhysBoxMultiplayer::GetMass()
 T non-virtual thunk to CPhysBoxMultiplayer::GetMultiplayerPhysicsMode()
 T non-virtual thunk to CPhysBoxMultiplayer::IsAsleep()
 T non-virtual thunk to CPhysHinge::NotifyVPhysicsStateChanged(IPhysicsObject*, CBaseEntity*, bool)
 T non-virtual thunk to CPhysHinge::~CPhysHinge()
 T non-virtual thunk to CPhysMagnet::ConstraintBroken(IPhysicsConstraint*)
 T non-virtual thunk to CPhysSaveRestoreBlockHandler::AssociateModel(IPhysicsObject*, CPhysCollide const*)
 T non-virtual thunk to CPhysSaveRestoreBlockHandler::AssociateModel(IPhysicsObject*, int)
 T non-virtual thunk to CPhysSaveRestoreBlockHandler::ForgetAllModels()
 T non-virtual thunk to CPhysSaveRestoreBlockHandler::ForgetModel(IPhysicsObject*)
 T non-virtual thunk to CPhysSaveRestoreBlockHandler::NoteBBox(Vector const&, Vector const&, CPhysCollide*)
 T non-virtual thunk to CPhysSaveRestoreBlockHandler::OnEntityCreated(CBaseEntity*)
 T non-virtual thunk to CPhysSaveRestoreBlockHandler::OnEntityDeleted(CBaseEntity*)
 T non-virtual thunk to CPhysSlideConstraint::NotifyVPhysicsStateChanged(IPhysicsObject*, CBaseEntity*, bool)
 T non-virtual thunk to CPhysSlideConstraint::~CPhysSlideConstraint()
 T non-virtual thunk to CPhysSphere::~CPhysSphere()
 T non-virtual thunk to CPhysicsCannister::HasPreferredCarryAnglesForPlayer(CBasePlayer*)
 T non-virtual thunk to CPhysicsCannister::OnAttemptPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T non-virtual thunk to CPhysicsCannister::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T non-virtual thunk to CPhysicsCannister::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T non-virtual thunk to CPhysicsCannister::PhysGunLaunchAngularImpulse()
 T non-virtual thunk to CPhysicsCannister::PhysGunLaunchVelocity(Vector const&, float)
 T non-virtual thunk to CPhysicsCannister::PreferredCarryAngles()
 T non-virtual thunk to CPhysicsCannister::ShouldPuntUseLaunchForces(PhysGunForce_t)
 T non-virtual thunk to CPhysicsNPCSolver::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)
 T non-virtual thunk to CPhysicsProp::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T non-virtual thunk to CPhysicsProp::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T non-virtual thunk to CPhysicsProp::~CPhysicsProp()
 T non-virtual thunk to CPhysicsPropMultiplayer::GetMass()
 T non-virtual thunk to CPhysicsPropMultiplayer::GetMultiplayerPhysicsMode()
 T non-virtual thunk to CPhysicsPropMultiplayer::GetPhysicsMode()
 T non-virtual thunk to CPhysicsPropMultiplayer::IsAsleep()
 T non-virtual thunk to CPhysicsPropMultiplayer::SetPhysicsMode(int)
 T non-virtual thunk to CPhysicsPropMultiplayer::~CPhysicsPropMultiplayer()
 T non-virtual thunk to CPhysicsPropRespawnable::~CPhysicsPropRespawnable()
 T non-virtual thunk to CPlayerInfo::ChangeTeam(int)
 T non-virtual thunk to CPlayerInfo::GetAbsAngles()
 T non-virtual thunk to CPlayerInfo::GetAbsOrigin()
 T non-virtual thunk to CPlayerInfo::GetArmorValue()
 T non-virtual thunk to CPlayerInfo::GetDeathCount()
 T non-virtual thunk to CPlayerInfo::GetFragCount()
 T non-virtual thunk to CPlayerInfo::GetHealth()
 T non-virtual thunk to CPlayerInfo::GetLastUserCommand()
 T non-virtual thunk to CPlayerInfo::GetMaxHealth()
 T non-virtual thunk to CPlayerInfo::GetModelName()
 T non-virtual thunk to CPlayerInfo::GetName()
 T non-virtual thunk to CPlayerInfo::GetNetworkIDString()
 T non-virtual thunk to CPlayerInfo::GetPlayerMaxs()
 T non-virtual thunk to CPlayerInfo::GetPlayerMins()
 T non-virtual thunk to CPlayerInfo::GetTeamIndex()
 T non-virtual thunk to CPlayerInfo::GetUserID()
 T non-virtual thunk to CPlayerInfo::GetWeaponName()
 T non-virtual thunk to CPlayerInfo::IsConnected()
 T non-virtual thunk to CPlayerInfo::IsDead()
 T non-virtual thunk to CPlayerInfo::IsFakeClient()
 T non-virtual thunk to CPlayerInfo::IsHLTV()
 T non-virtual thunk to CPlayerInfo::IsInAVehicle()
 T non-virtual thunk to CPlayerInfo::IsObserver()
 T non-virtual thunk to CPlayerInfo::IsPlayer()
 T non-virtual thunk to CPlayerInfo::IsReplay()
 T non-virtual thunk to CPropAPC::ProcessMovement(CBasePlayer*, CMoveData*)
 T non-virtual thunk to CPropAirboat::AllowBlockedExit(CBaseCombatCharacter*, int)
 T non-virtual thunk to CPropAirboat::EnterVehicle(CBaseCombatCharacter*)
 T non-virtual thunk to CPropAirboat::ExitVehicle(int)
 T non-virtual thunk to CPropAirboat::PassengerShouldReceiveDamage(CTakeDamageInfo&)
 T non-virtual thunk to CPropAirboat::PreExitVehicle(CBaseCombatCharacter*, int)
 T non-virtual thunk to CPropAirboat::ProcessMovement(CBasePlayer*, CMoveData*)
 T non-virtual thunk to CPropCombineBall::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T non-virtual thunk to CPropCombineBall::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T non-virtual thunk to CPropCombineBall::ShouldPuntUseLaunchForces(PhysGunForce_t)
 T non-virtual thunk to CPropCrane::AllowBlockedExit(CBaseCombatCharacter*, int)
 T non-virtual thunk to CPropCrane::AllowMidairExit(CBaseCombatCharacter*, int)
 T non-virtual thunk to CPropCrane::CanEnterVehicle(CBaseEntity*)
 T non-virtual thunk to CPropCrane::CanExitVehicle(CBaseEntity*)
 T non-virtual thunk to CPropCrane::EnterVehicle(CBaseCombatCharacter*)
 T non-virtual thunk to CPropCrane::ExitVehicle(int)
 T non-virtual thunk to CPropCrane::FinishMove(CBasePlayer*, CUserCmd*, CMoveData*)
 T non-virtual thunk to CPropCrane::GetDriver()
 T non-virtual thunk to CPropCrane::GetVehicleScriptName()
 T non-virtual thunk to CPropCrane::ItemPostFrame(CBasePlayer*)
 T non-virtual thunk to CPropCrane::PassengerShouldReceiveDamage(CTakeDamageInfo&)
 T non-virtual thunk to CPropCrane::PreExitVehicle(CBaseCombatCharacter*, int)
 T non-virtual thunk to CPropCrane::ProcessMovement(CBasePlayer*, CMoveData*)
 T non-virtual thunk to CPropCrane::SetVehicleEntryAnim(bool)
 T non-virtual thunk to CPropCrane::SetVehicleExitAnim(bool, Vector)
 T non-virtual thunk to CPropCrane::SetupMove(CBasePlayer*, CUserCmd*, IMoveHelper*, CMoveData*)
 T non-virtual thunk to CPropDoorRotating::~CPropDoorRotating()
 T non-virtual thunk to CPropVehicle::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T non-virtual thunk to CPropVehicleDriveable::AllowBlockedExit(CBaseCombatCharacter*, int)
 T non-virtual thunk to CPropVehicleDriveable::AllowMidairExit(CBaseCombatCharacter*, int)
 T non-virtual thunk to CPropVehicleDriveable::CanEnterVehicle(CBaseEntity*)
 T non-virtual thunk to CPropVehicleDriveable::CanExitVehicle(CBaseEntity*)
 T non-virtual thunk to CPropVehicleDriveable::EnterVehicle(CBaseCombatCharacter*)
 T non-virtual thunk to CPropVehicleDriveable::ExitVehicle(int)
 T non-virtual thunk to CPropVehicleDriveable::FinishMove(CBasePlayer*, CUserCmd*, CMoveData*)
 T non-virtual thunk to CPropVehicleDriveable::GetDriver()
 T non-virtual thunk to CPropVehicleDriveable::GetVehicleScriptName()
 T non-virtual thunk to CPropVehicleDriveable::ItemPostFrame(CBasePlayer*)
 T non-virtual thunk to CPropVehicleDriveable::NPC_AddPassenger(CAI_BaseNPC*, string_t, int)
 T non-virtual thunk to CPropVehicleDriveable::NPC_CanEnterVehicle(CAI_BaseNPC*, bool)
 T non-virtual thunk to CPropVehicleDriveable::NPC_CanExitVehicle(CAI_BaseNPC*, bool)
 T non-virtual thunk to CPropVehicleDriveable::NPC_FinishedEnterVehicle(CAI_BaseNPC*, bool)
 T non-virtual thunk to CPropVehicleDriveable::NPC_FinishedExitVehicle(CAI_BaseNPC*, bool)
 T non-virtual thunk to CPropVehicleDriveable::NPC_RemovePassenger(CAI_BaseNPC*)
 T non-virtual thunk to CPropVehicleDriveable::PassengerShouldReceiveDamage(CTakeDamageInfo&)
 T non-virtual thunk to CPropVehicleDriveable::PreExitVehicle(CBaseCombatCharacter*, int)
 T non-virtual thunk to CPropVehicleDriveable::ProcessMovement(CBasePlayer*, CMoveData*)
 T non-virtual thunk to CPropVehicleDriveable::SetVehicleEntryAnim(bool)
 T non-virtual thunk to CPropVehicleDriveable::SetVehicleExitAnim(bool, Vector)
 T non-virtual thunk to CPropVehicleDriveable::SetupMove(CBasePlayer*, CUserCmd*, IMoveHelper*, CMoveData*)
 T non-virtual thunk to CPropVehiclePrisonerPod::AllowBlockedExit(CBaseCombatCharacter*, int)
 T non-virtual thunk to CPropVehiclePrisonerPod::AllowMidairExit(CBaseCombatCharacter*, int)
 T non-virtual thunk to CPropVehiclePrisonerPod::CanEnterVehicle(CBaseEntity*)
 T non-virtual thunk to CPropVehiclePrisonerPod::CanExitVehicle(CBaseEntity*)
 T non-virtual thunk to CPropVehiclePrisonerPod::EnterVehicle(CBaseCombatCharacter*)
 T non-virtual thunk to CPropVehiclePrisonerPod::ExitVehicle(int)
 T non-virtual thunk to CPropVehiclePrisonerPod::FinishMove(CBasePlayer*, CUserCmd*, CMoveData*)
 T non-virtual thunk to CPropVehiclePrisonerPod::GetDriver()
 T non-virtual thunk to CPropVehiclePrisonerPod::GetVehicleScriptName()
 T non-virtual thunk to CPropVehiclePrisonerPod::ItemPostFrame(CBasePlayer*)
 T non-virtual thunk to CPropVehiclePrisonerPod::PassengerShouldReceiveDamage(CTakeDamageInfo&)
 T non-virtual thunk to CPropVehiclePrisonerPod::PreExitVehicle(CBaseCombatCharacter*, int)
 T non-virtual thunk to CPropVehiclePrisonerPod::ProcessMovement(CBasePlayer*, CMoveData*)
 T non-virtual thunk to CPropVehiclePrisonerPod::SetVehicleEntryAnim(bool)
 T non-virtual thunk to CPropVehiclePrisonerPod::SetVehicleExitAnim(bool, Vector)
 T non-virtual thunk to CPropVehiclePrisonerPod::SetupMove(CBasePlayer*, CUserCmd*, IMoveHelper*, CMoveData*)
 T non-virtual thunk to CPropVehiclePrisonerPod::~CPropVehiclePrisonerPod()
 T non-virtual thunk to CPropVehicleViewController::ExitVehicle(int)
 T non-virtual thunk to CPropVehicleViewController::SetupMove(CBasePlayer*, CUserCmd*, IMoveHelper*, CMoveData*)
 T non-virtual thunk to CRagdollProp::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T non-virtual thunk to CRagdollProp::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T non-virtual thunk to CRagdollProp::PhysGunLaunchAngularImpulse()
 T non-virtual thunk to CRopeKeyframe::NotifyPositionChanged(CBaseEntity*)
 T non-virtual thunk to CRopeKeyframe::~CRopeKeyframe()
 T non-virtual thunk to CRotorWashShooter::DoWashPush(float, Vector const&)
 T non-virtual thunk to CSatchelCharge::~CSatchelCharge()
 T non-virtual thunk to CSceneEntity::CheckEvent(float, CChoreoScene*, CChoreoEvent*)
 T non-virtual thunk to CSceneEntity::EndEvent(float, CChoreoScene*, CChoreoEvent*)
 T non-virtual thunk to CSceneEntity::ProcessEvent(float, CChoreoScene*, CChoreoEvent*)
 T non-virtual thunk to CSceneEntity::StartEvent(float, CChoreoScene*, CChoreoEvent*)
 T non-virtual thunk to CServerNetworkProperty::FireEvent()
 T non-virtual thunk to CSoundControllerImp::LevelShutdownPreEntity()
 T non-virtual thunk to CSoundControllerImp::OnRestore()
 T non-virtual thunk to CSoundControllerImp::PreClientUpdate()
 T non-virtual thunk to CSoundControllerImp::~CSoundControllerImp()
 T non-virtual thunk to CTeamTrainWatcher::FireGameEvent(IGameEvent*)
 T non-virtual thunk to CTeamTrainWatcher::~CTeamTrainWatcher()
 T non-virtual thunk to CToolFrameworkServer::PreSetupVisibility()
 T non-virtual thunk to CTriggerAreaCapture::~CTriggerAreaCapture()
 T non-virtual thunk to CTriggerHurt::~CTriggerHurt()
 T non-virtual thunk to CTriggerVPhysicsMotion::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)
 T non-virtual thunk to CTripmineGrenade::~CTripmineGrenade()
 T non-virtual thunk to CTurretTipController::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)
 T non-virtual thunk to ConVar::GetName() const
 T non-virtual thunk to ConVar::IsFlagSet(int) const
 T non-virtual thunk to ConVar::SetValue(char const*)
 T non-virtual thunk to ConVar::SetValue(float)
 T non-virtual thunk to ConVar::SetValue(int)
 T physicssound::AddBreakSound(CUtlVector<physicssound::breaksound_t, CUtlMemory<physicssound::breaksound_t, int> >&, Vector const&, unsigned short)
 T physicssound::AddImpactSound(physicssound::soundlist_t&, void*, int, int, IPhysicsObject*, int, int, float, float)
 T physicssound::PlayBreakSounds(CUtlVector<physicssound::breaksound_t, CUtlMemory<physicssound::breaksound_t, int> >&)
 T physicssound::PlayImpactSounds(physicssound::soundlist_t&)
 T rand
 T respawn(CBaseEntity*, bool)
 T response_interval_t<float16_with_assign>::ToInterval(interval_t&) const
 T sky3dparams_t::NetworkStateChanged()
 T sky3dparams_t::NetworkStateChanged(void*)
 T sky3dparams_t::NetworkVar_fog::NetworkStateChanged()
 T sky3dparams_t::NetworkVar_fog::NetworkStateChanged(void*)
 T studiohdr_t::GetAnimBlock(int) const
 T studiohdr_t::GetAutoplayList(unsigned short**) const
 T studiohdr_t::GetVirtualModel() const
 T studiohdr_t::SetActivityListVersion(int) const
 T sv_allow_point_servercommand_changed(IConVar*, char const*, float)
 T unsigned int CUtlHashtable<CBaseEntityModelLoadProxy, empty_t, PointerHashFunctor, PointerEqualFunctor, CBaseEntity*>::DoInsert<CBaseEntity*>(CBaseEntity*, unsigned int)
 T unsigned int CUtlHashtable<CUtlConstStringBase<char>, empty_t, DefaultHashFunctor<CUtlConstStringBase<char> >, DefaultEqualFunctor<CUtlConstStringBase<char> >, char const*>::DoLookup<char const*>(char const*, unsigned int, unsigned int*) const
 T variant_t::Convert(_fieldtypes)
 T variant_t::Set(_fieldtypes, void*)
 T variant_t::SetEntity(CBaseEntity*)
 T variant_t::SetOther(void*)
 T variant_t::ToString() const
 T vehicle_crashsound_t::GetDataDescMap()
 T vehicle_gear_t::GetDataDescMap()
 T vehiclesounds_t::GetDataDescMap()
 T virtualgroup_t::GetStudioHdr() const
 T void CCallQueueT<CTSQueue<CFunctor*, false> >::QueueCall<CBreakableProp*, CBreakableProp, void, Vector const&, Vector const&, QAngle const&, Vector, Vector, QAngle>(CBreakableProp*, void (CBreakableProp::*)(Vector const&, Vector const&, QAngle const&), Vector const&, Vector const&, QAngle const&)
 T void CCallQueueT<CTSQueue<CFunctor*, false> >::QueueCall<CNPC_RollerMine*, CNPC_RollerMine, void, CBaseEntity*, CBaseEntity*>(CNPC_RollerMine*, void (CNPC_RollerMine::*)(CBaseEntity*), CBaseEntity* const&)
 T washentity_t::GetDataDescMap()
 ThreadGetCurrentId
 ThreadInterlockedAssignIf
 ThreadInterlockedAssignIf64
 ThreadInterlockedCompareExchangePointer
 ThreadInterlockedDecrement
 ThreadInterlockedExchange
 ThreadInterlockedExchangeAdd
 ThreadInterlockedExchangePointer
 ThreadInterlockedIncrement
 Warning
 _DefaultRuneLocale
 _ExitOnFatalAssert
 _SpewInfo
 _SpewMessage
 _Unwind_Resume
 __cxa_atexit
 __cxa_begin_catch
 __cxa_guard_abort
 __cxa_guard_acquire
 __cxa_guard_release
 __cxa_pure_virtual
 __dynamic_cast
 __error
 __gxx_personality_v0
 __maskrune
 __stack_chk_fail
 __stack_chk_guard
 __tolower
 acos
 acosf
 asctime
 asin
 atan
 atan2
 atan2f
 atof
 atoi
 b (anonymous namespace)::__g_CreateCPlayerInfoManager_V1IPlayerInfoManager_V1_reg
 b ACT_CROW_LAND
 b ACT_CROW_SOAR
 b ACT_CROW_TAKEOFF
 b ACT_DOOR_LOCKED
 b ACT_DOOR_OPEN
 b ACT_SCANNER_FLARE_START
 b ACT_SCANNER_RETRACT_PRONGS
 b ACT_STALKER_WORK
 b AE_ACTBUSY_WEAPON_FIRE_OFF
 b AE_ACTBUSY_WEAPON_FIRE_ON
 b AE_CROW_FLY
 b AE_CROW_HOP
 b AE_CROW_TAKEOFF
 b AIN_DEF_TARGET
 b AddMultiDamage(CTakeDamageInfo const&, CBaseEntity*)::warningCount
 b Bias(float, float)::lastExponent
 b CAI_BaseNPC::FindNamedEntity(char const*, IEntityFindFilter*)::playerwarningcount
 b CAI_BaseNPC::FindNamedEntity(char const*, IEntityFindFilter*)::selfwarningcount
 b CAI_BaseNPC::NPCThink()::timer
 b CAI_BaseNPC::PreNPCThink()::pHostTimescale
 b CAI_BaseNPC::RebalanceThinks()::iPrevTick
 b CAI_BaseNPC::RebalanceThinks()::nRebalanceableThinksInTick
 b CAI_BaseNPC::RebalanceThinks()::nThinksInTick
 b CAI_BaseNPC::RebalanceThinks()::rebalanceCandidates
 b CAI_BaseNPC::ResolveActivityToSequence(Activity, int&, Activity&, Activity&)::lastWarnActivity
 b CAI_BaseNPC::ResolveActivityToSequence(Activity, int&, Activity&, Activity&)::pLastWarn
 b CAI_BaseNPC::ResolveActivityToSequence(Activity, int&, Activity&, Activity&)::timeLastWarn
 b CAI_BaseNPC::TranslateActivity(Activity, Activity*)::sUniqueActivities
 b CAI_BaseNPC::UpdateEfficiency(bool)::vPlayerEyePosition
 b CAI_BaseNPC::UpdateEfficiency(bool)::vPlayerForward
 b CAI_FollowBehavior::GetFollowPoint()::invalid
 b CAI_NetworkEditTools::DrawAINetworkOverlay()::endDrawNode
 b CAI_NetworkEditTools::DrawAINetworkOverlay()::flDrawDuration
 b CAI_NetworkEditTools::DrawAINetworkOverlay()::startDrawNode
 b CAI_Path::BaseGoalPosition() const::vecResult
 b CAI_Path::NextWaypointPos() const::invalid
 b CAI_Pathfinder::CTriDebugOverlay::AddTriOverlayLine(Vector const&, Vector const&, int, int, int, bool)::overCounter
 b CAI_TacticalServices::FindCoverNode(Vector const&, Vector const&, Vector const&, float, float)::nSearchRandomizer
 b CAI_TacticalServices::FindLosNode(Vector const&, Vector const&, float, float, float, FlankType_t, Vector const&, float)::nSearchRandomizer
 b CAI_TrackPather::TargetPathAcrossDirection() const::s_Result
 b CBaseCombatCharacter::FindEntityRelationship(CBaseEntity*)::dummy
 b CBaseCombatWeapon::GetBulletSpread()::cone
 b CBaseEntity::FireBullets(FireBulletsInfo_t const&)::tracerCount
 b CBaseEntity::KeyValue(char const*, char const*)::szBuf
 b CBaseEntity::TakeDamage(CTakeDamageInfo const&)::warningCount
 b CBasePlayer::EyeAngles()::angEyeWorld
 b CBasePlayer::UpdateStepSound(surfacedata_t*, Vector const&, Vector const&)::iSkipStep
 b CBeam::GetAbsEndPos() const::vecAbsPos
 b CC_CollisionTest(CCommand const&)::first
 b CC_CollisionTest(CCommand const&)::targets
 b CC_KDTreeTest(CCommand const&)::bFirst
 b CC_KDTreeTest(CCommand const&)::vecTargets
 b CC_Player_SetModel(CCommand const&)::szName
 b CC_ToggleDuck()::bChecked
 b CC_ToggleDuck()::pCVcl_forwardspeed
 b CChoreoEvent::GetDescription()::description
 b CCollisionProperty::CollisionToWorldTransform() const::s_matTemp
 b CCollisionProperty::CollisionToWorldTransform() const::s_nIndex
 b CCurveData::GetBoundedSample(ICurveDataAccessor*, int, bool&)::nullend
 b CCurveData::GetBoundedSample(ICurveDataAccessor*, int, bool&)::nullstart
 b CDataManagerBase::GetForFreeByIndex(unsigned short)::__executeCount
 b CFlexAnimationTrack::GetBoundedSample(int, bool&, int)::nullend
 b CFlexAnimationTrack::GetBoundedSample(int, bool&, int)::nullstart
 b CHL2MPMachineGun::GetBulletSpread()::cone
 b CMultiplayRules::DetermineMapCycleFilename(char*, int, bool)::szLastResult
 b CNPC_Bullseye::CanBeAnEnemyOf(CBaseEntity*)::flFullFov
 b CNPC_Citizen::GetSquadCommandRepresentative()::hCurrent
 b CNPC_Citizen::GetSquadCommandRepresentative()::lastTime
 b CNPC_Citizen::SelectModel()::madereslists
 b CNPC_FloorTurret::PreferredCarryAngles()::g_prefAngles
 b CNPC_FloorTurret::Spawn()::nextSkin
 b CParticleSystemDefinition_UnpackInit::s_pUnpack
 b CPlayerMove::RunCommand(CBasePlayer*, CUserCmd*, IMoveHelper*)::s_dblLastWarningTime
 b CResponseSystem::ParseRule()::instancedCriteria
 b CResponseSystem::ResponseWarning(char const*, ...)::string
 b CServerGameClients::ClientSettingsChanged(edict_t*)::pMax
 b CServerGameClients::ClientSettingsChanged(edict_t*)::pMaxUpdateRate
 b CServerGameClients::ClientSettingsChanged(edict_t*)::pMin
 b CServerGameClients::ClientSettingsChanged(edict_t*)::pMinUpdateRate
 b CServerGameDLL::GetServerBrowserGameData()::rchResult
 b CStudioHdr::CActivityToSequenceMapping::SelectWeightedSequence(CStudioHdr*, int, int)::__executeCount
 b CStudioHdr::GroupStudioHdr(int)::__executeCount
 b CStudioHdr::pSeqdesc(int)::s_nil_seq
 b CTestTraceline::Spin()::traceline_spin
 b CTextStat::GetTextStatsList()::theList
 b CUtlSymbol::Initialize()::symbolsInitialized
 b CalcLocalHierarchyAnimation(CStudioHdr const*, matrix3x4_t*, CBoneBitList&, Vector*, Quaternion*, mstudiobone_t const*, mstudiolocalhierarchy_t*, int, int, float, int, float, int)::rootXform
 b ConVarRef::Init(char const*, bool)::bFirst
 b CreateStuckTable()::firsttime
 b DescribeAxis(int)::sz
 b EntityFactoryDictionary()::s_EntityFactory
 b GetAmmoDef()::bInitted
 b GetAmmoDef()::def
 b GetPhysObjSaveRestoreOps(PhysInterfaceId_t)::inited
 b GetSceneManager()::s_SceneManager
 b GetSequenceLinearMotion(CStudioHdr*, int, float const*, Vector*)::__executeCount
 b GetUniverse()::steamUniverse
 b KeyValues::SaveKeyToFile(KeyValues*, IBaseFileSystem*, void*, CUtlBuffer*, int, bool, bool)::buf
 b ListRecentNPCSpeechCmd
 b MissingSceneWarning(char const*)::missing
 b MoveHelperServer()::s_MoveHelperServer
 b ParticleChildrenInfo_t_UnpackInit::s_pUnpack
 b PhysFrame(float)::lastObjectCount
 b TheTacticalMissions()::manager
 b UTIL_EntitiesInPVS(CBaseEntity*, CBaseEntity*)::lastOrg
 b UTIL_EntitiesInPVS(CBaseEntity*, CBaseEntity*)::pvs
 b UTIL_VarArgs(char const*, ...)::string
 b WaveTrace(char const*, char const*)::s_WaveTrace
 b _ZL8ice_sbox.0
 b _ZL8ice_sbox.1
 b _ZL8ice_sbox.2
 b _ZL8ice_sbox.3
 b __g_CServerDLLSharedAppSystems_singleton
 b __g_CServerGameEnts_singleton
 b __g_CreateCEffectsServerIEffects_reg
 b __g_CreateCGameMovementIGameMovement_reg
 b __g_CreateCHLTVDirectorIHLTVDirector_reg
 b __g_CreateCPlayerInfoManagerIPlayerInfoManager_reg
 b __g_CreateCPluginBotManagerIBotManager_reg
 b __g_CreateCPluginHelpersCheckIPluginHelpersCheck_reg
 b __g_CreateCServerChoreoToolsIServerChoreoTools_reg
 b __g_CreateCServerDLLSharedAppSystemsIServerDLLSharedAppSystems_reg
 b __g_CreateCServerGameClientsIServerGameClients003_reg
 b __g_CreateCServerGameClientsIServerGameClients_reg
 b __g_CreateCServerGameDLLIServerGameDLL_reg
 b __g_CreateCServerGameEntsIServerGameEnts_reg
 b __g_CreateCServerGameTagsIServerGameTags_reg
 b __g_CreateCServerToolsIServerTools001_reg
 b __g_CreateCServerToolsIServerTools002_reg
 b __g_CreateCServerToolsIServerTools_reg
 b __g_GameRulesRegister_CHL2MPRules
 b __g_GameRulesRegister_CHalfLife2
 b __g_GameRulesRegister_CMultiplayRules
 b __g_GameRulesRegister_CTeamplayRules
 b __proxy_SendProxy_ClientSideAnimation
 b __proxy_SendProxy_FlexWeights
 b __proxy_SendProxy_OnlyToTeam
 b __proxy_SendProxy_SendActiveLocalWeaponDataTable
 b __proxy_SendProxy_SendBaseCombatCharacterLocalDataTable
 b __proxy_SendProxy_SendLocalWeaponDataTable
 b __proxy_SendProxy_SendNonLocalWeaponDataTable
 b __proxy_SendProxy_SendPredictableId
 b __proxy_SendProxy_TestProxyToggle
 b _firesmoke
 b _plasma
 b ai_ally_manager
 b ai_ally_speech_manager
 b ai_battle_line
 b ai_changehintgroup
 b ai_changetarget
 b ai_citizen_response_system
 b ai_clear_bad_links_command
 b ai_debug_node_connect_command
 b ai_disable
 b ai_dump_hints_command
 b ai_goal_actbusy
 b ai_goal_actbusy_queue
 b ai_goal_assault
 b ai_goal_follow
 b ai_goal_lead
 b ai_goal_lead_weapon
 b ai_goal_police
 b ai_goal_standoff
 b ai_hint
 b ai_hull
 b ai_network
 b ai_network_build_helper
 b ai_next_hull
 b ai_nodes
 b ai_relationship
 b ai_resume
 b ai_script_conditions
 b ai_set_move_height_epsilon_command
 b ai_show_connect
 b ai_show_connect_fly
 b ai_show_connect_jump
 b ai_show_graph_connect
 b ai_show_grid
 b ai_show_hints
 b ai_show_hull
 b ai_show_node_command
 b ai_show_visibility
 b ai_sound
 b ai_speechfilter
 b ai_step
 b ai_test_los_command
 b ainet_generate_report_command
 b ainet_generate_report_only_command
 b air_density
 b airboat_fatal_stress
 b aiscripted_schedule
 b aitesthull
 b ambient_generic
 b anim_3wayblend
 b apc_missile
 b ar2explosion
 b assault_assaultpoint
 b assault_rallypoint
 b basehl2mpcombatweapon
 b basehlcombatweapon
 b baseprojectile
 b beam
 b birds_debug
 b bloodspray
 b bodyque
 b bounce_bomb
 b buddha_command
 b bugswap
 b bullseye_strider_focus
 b callvote_command
 b cast_hull_command
 b cast_ray_command
 b ch_createairboat
 b ch_createjeep
 b cl_spewscriptintro
 b clear_debug_overlays_command
 b collision_test
 b color_correction
 b color_correction_volume
 b combine_bouncemine
 b combine_mine
 b commentary_auto
 b commentary_cvarsnotchanging
 b commentary_finishnode
 b concussiveblast
 b crane_tip
 b create_flashlight
 b creditsdone
 b crossbow_bolt
 b cycler
 b cycler_actor
 b cycler_blender
 b cycler_flex
 b cycler_weapon
 b cycler_wreckage
 b dbghist_addline
 b dbghist_dump
 b defaultresponsesytem
 b dispcoll_drawplane
 b drawcross
 b drawline
 b dump_entity_sizes_command
 b dump_globals_command
 b dumpentityfactories
 b dumpeventqueue
 b dumpgamestringtable
 b dynamic_prop
 b ent_absbox
 b ent_attachments
 b ent_autoaim
 b ent_bbox
 b ent_cancelpendingentfires
 b ent_create
 b ent_dump
 b ent_fire
 b ent_info
 b ent_keyvalue
 b ent_messages
 b ent_name
 b ent_orient
 b ent_pause
 b ent_pivot
 b ent_rbox
 b ent_remove
 b ent_remove_all
 b ent_rotate
 b ent_setname
 b ent_show_response_criteria
 b ent_step
 b ent_teleport
 b ent_text
 b ent_viewoffset
 b ent_watery_leech
 b entity_blocker
 b entityflame
 b env_alyxemp
 b env_ar2explosion
 b env_beam
 b env_beverage
 b env_blood
 b env_bubbles
 b env_citadel_energy_core
 b env_credits
 b env_debughistory
 b env_detail_controller
 b env_dustpuff
 b env_dusttrail
 b env_effectscript
 b env_embers
 b env_entity_dissolver
 b env_entity_igniter
 b env_entity_maker
 b env_explosion
 b env_fade
 b env_fire
 b env_fire_trail
 b env_firesensor
 b env_firesource
 b env_flare
 b env_fog_controller
 b env_funnel
 b env_global
 b env_glow
 b env_gunfire
 b env_headcrabcanister
 b env_hudhint
 b env_laser
 b env_laserdot
 b env_lightglow
 b env_message
 b env_microphone
 b env_movieexplosion
 b env_muzzleflash
 b env_particle_performance_monitor
 b env_particle_trail
 b env_particlefire
 b env_particlelight
 b env_particlescript
 b env_particlesmokegrenade
 b env_physexplosion
 b env_physimpact
 b env_physwire
 b env_player_surface_trigger
 b env_projectedtexture
 b env_quadraticbeam
 b env_ragdoll_boogie
 b env_rockettrail
 b env_rotorshooter
 b env_rotorwash_emitter
 b env_screeneffect
 b env_screenoverlay
 b env_shake
 b env_shooter
 b env_smokestack
 b env_smoketrail
 b env_soundscape
 b env_soundscape_proxy
 b env_soundscape_triggerable
 b env_spark
 b env_speaker
 b env_splash
 b env_sporeexplosion
 b env_sporetrail
 b env_sprite
 b env_sprite_oriented
 b env_spritetrail
 b env_starfield
 b env_steam
 b env_steamjet
 b env_sun
 b env_texturetoggle
 b env_tonemap_controller
 b env_tracer
 b env_viewpunch
 b env_wind
 b env_zoom
 b event_queue_saveload_proxy
 b explode_command
 b explodevector_command
 b f05
 b f3
 b fadein
 b fadeout
 b filter_activator_class
 b filter_activator_mass_greater
 b filter_activator_name
 b filter_activator_team
 b filter_base
 b filter_combineball_type
 b filter_damage_type
 b filter_enemy
 b filter_multi
 b find_ent
 b find_ent_index
 b firetarget
 b fish
 b floorturret_tipcontroller
 b fov_command
 b funCBaseFlex
 b func_areaportal
 b func_areaportalwindow
 b func_breakable
 b func_breakable_surf
 b func_brush
 b func_button
 b func_clip_vphysics
 b func_combine_ball_spawner
 b func_conveyor
 b func_door
 b func_door_rotating
 b func_dustcloud
 b func_dustmotes
 b func_fish_pool
 b func_guntarget
 b func_healthcharger
 b func_illusionary
 b func_ladderendpoint
 b func_lod
 b func_lookdoor
 b func_monitor
 b func_movelinear
 b func_occluder
 b func_physbox
 b func_physbox_multiplayer
 b func_plat
 b func_platrot
 b func_precipitation
 b func_proprrespawnzone
 b func_pushable
 b func_recharge
 b func_reflective_glass
 b func_rot_button
 b func_rotating
 b func_smokevolume
 b func_tank
 b func_tank_combine_cannon
 b func_tankairboatgun
 b func_tankapcrocket
 b func_tanklaser
 b func_tankmortar
 b func_tankphyscannister
 b func_tankpulselaser
 b func_tankrocket
 b func_tanktrain
 b func_trackautochange
 b func_trackchange
 b func_tracktrain
 b func_train
 b func_traincontrols
 b func_useableladder
 b func_vehicleclip
 b func_wall
 b func_wall_toggle
 b func_water
 b func_water_analog
 b func_weight_button
 b gGlobalState
 b gNullWeaponInfo
 b gTankSpread
 b g_AISystemHook
 b g_AR2Explosion_ClassReg
 b g_AchievementSaveThread
 b g_AimManager
 b g_AnchorList
 b g_BreakModelsPrecached
 b g_CAI_BaseNPC_ClassReg
 b g_CAchievementHLXKillEliteSoldierWithOwnEnergyBall_Helper
 b g_CAchievementHLXKillSoldierWithOwnGrenade_Helper
 b g_CAchievementHLXKillWithHopper_Helper
 b g_CAchievementHLXKillWithManhack_Helper
 b g_CAchievementHLXKillWithOneEnergyBall_Helper
 b g_CAchievementHLXKillWithPhysicsObjects_Helper
 b g_CAlyxEmpEffect_ClassReg
 b g_CBaseAnimatingOverlay_ClassReg
 b g_CBaseAnimating_ClassReg
 b g_CBaseCombatCharacter_ClassReg
 b g_CBaseCombatWeapon_ClassReg
 b g_CBaseDoor_ClassReg
 b g_CBaseEntity_ClassReg
 b g_CBaseFlex_ClassReg
 b g_CBaseGrenade_ClassReg
 b g_CBaseHL2MPBludgeonWeapon_ClassReg
 b g_CBaseHL2MPCombatWeapon_ClassReg
 b g_CBaseHLBludgeonWeapon_ClassReg
 b g_CBaseHLCombatWeapon_ClassReg
 b g_CBaseHelicopter_ClassReg
 b g_CBaseParticleEntity_ClassReg
 b g_CBasePlayer_ClassReg
 b g_CBaseProjectile_ClassReg
 b g_CBasePropDoor_ClassReg
 b g_CBaseTeamObjectiveResource_ClassReg
 b g_CBaseTempEntity_ClassReg
 b g_CBaseViewModel_ClassReg
 b g_CBeam_ClassReg
 b g_CBoneFollower_ClassReg
 b g_CBreakableProp_ClassReg
 b g_CBreakableSurface_ClassReg
 b g_CCitadelEnergyCore_ClassReg
 b g_CColorCorrectionVolume_ClassReg
 b g_CColorCorrection_ClassReg
 b g_CCorpse_ClassReg
 b g_CCrossbowBolt_ClassReg
 b g_CDynamicLight_ClassReg
 b g_CDynamicProp_ClassReg
 b g_CEmbers_ClassReg
 b g_CEntityDissolve_ClassReg
 b g_CEntityFlame_ClassReg
 b g_CEntityParticleTrail_ClassReg
 b g_CEnvDetailController_ClassReg
 b g_CEnvHeadcrabCanister_ClassReg
 b g_CEnvParticleScript_ClassReg
 b g_CEnvProjectedTexture_ClassReg
 b g_CEnvQuadraticBeam_ClassReg
 b g_CEnvScreenEffect_ClassReg
 b g_CEnvScreenOverlay_ClassReg
 b g_CEnvStarfield_ClassReg
 b g_CEnvTonemapController_ClassReg
 b g_CEnvWind_ClassReg
 b g_CFireSmoke_ClassReg
 b g_CFireTrail_ClassReg
 b g_CFish_ClassReg
 b g_CFlare_ClassReg
 b g_CFogController_ClassReg
 b g_CFuncAreaPortalWindow_ClassReg
 b g_CFuncConveyor_ClassReg
 b g_CFuncLadder_ClassReg
 b g_CFuncMonitor_ClassReg
 b g_CFuncOccluder_ClassReg
 b g_CFuncReflectiveGlass_ClassReg
 b g_CFuncRotating_ClassReg
 b g_CFuncSmokeVolume_ClassReg
 b g_CFuncTrackTrain_ClassReg
 b g_CFunc_Dust_ClassReg
 b g_CFunc_LOD_ClassReg
 b g_CGameRulesProxy_ClassReg
 b g_CHL2MPGameRulesProxy_ClassReg
 b g_CHL2MPMachineGun_ClassReg
 b g_CHL2MPRagdoll_ClassReg
 b g_CHL2MP_Player_ClassReg
 b g_CHL2_Player_ClassReg
 b g_CHLMachineGun_ClassReg
 b g_CHLSelectFireMachineGun_ClassReg
 b g_CHalfLife2Proxy_ClassReg
 b g_CHandleTest_ClassReg
 b g_CInfoLadderDismount_ClassReg
 b g_CInfoLightingRelative_ClassReg
 b g_CInfoOverlayAccessor_ClassReg
 b g_CInfoTeleporterCountdown_ClassReg
 b g_CLaserDot_ClassReg
 b g_CLightGlow_ClassReg
 b g_CMaterialModifyControl_ClassReg
 b g_CMortarShell_ClassReg
 b g_CNPC_AntlionGuard_ClassReg
 b g_CNPC_Barnacle_ClassReg
 b g_CNPC_Barney_ClassReg
 b g_CNPC_CombineGunship_ClassReg
 b g_CNPC_Manhack_ClassReg
 b g_CNPC_RollerMine_ClassReg
 b g_CNPC_Strider_ClassReg
 b g_CNPC_Vortigaunt_ClassReg
 b g_CParticleFire_ClassReg
 b g_CParticlePerformanceMonitor_ClassReg
 b g_CParticleSystem_ClassReg
 b g_CPhysBoxMultiplayer_ClassReg
 b g_CPhysBox_ClassReg
 b g_CPhysMagnet_ClassReg
 b g_CPhysicsPropMultiplayer_ClassReg
 b g_CPhysicsProp_ClassReg
 b g_CPlasma_ClassReg
 b g_CPlayerResource_ClassReg
 b g_CPointCamera_ClassReg
 b g_CPointCommentaryNode_ClassReg
 b g_CPoseController_ClassReg
 b g_CPrecipitation_ClassReg
 b g_CPredictedViewModel_ClassReg
 b g_CPropAirboat_ClassReg
 b g_CPropCombineBall_ClassReg
 b g_CPropCrane_ClassReg
 b g_CPropVehicleDriveable_ClassReg
 b g_CPropVehiclePrisonerPod_ClassReg
 b g_CRagdollManager_ClassReg
 b g_CRagdollPropAttached_ClassReg
 b g_CRagdollProp_ClassReg
 b g_CRopeKeyframe_ClassReg
 b g_CRotorWashEmitter_ClassReg
 b g_CSceneEntity_ClassReg
 b g_CScriptIntro_ClassReg
 b g_CShadowControl_ClassReg
 b g_CSlideshowDisplay_ClassReg
 b g_CSmokeStack_ClassReg
 b g_CSpotlightEnd_ClassReg
 b g_CSpriteOriented_ClassReg
 b g_CSpriteTrail_ClassReg
 b g_CSprite_ClassReg
 b g_CSteamJet_ClassReg
 b g_CSun_ClassReg
 b g_CTEAntlionDust_ClassReg
 b g_CTEArmorRicochet_ClassReg
 b g_CTEBSPDecal_ClassReg
 b g_CTEBaseBeam_ClassReg
 b g_CTEBeamEntPoint_ClassReg
 b g_CTEBeamEnts_ClassReg
 b g_CTEBeamFollow_ClassReg
 b g_CTEBeamLaser_ClassReg
 b g_CTEBeamPoints_ClassReg
 b g_CTEBeamRingPoint_ClassReg
 b g_CTEBeamRing_ClassReg
 b g_CTEBeamSpline_ClassReg
 b g_CTEBloodSprite_ClassReg
 b g_CTEBloodStream_ClassReg
 b g_CTEBreakModel_ClassReg
 b g_CTEBubbleTrail_ClassReg
 b g_CTEBubbles_ClassReg
 b g_CTEClientProjectile_ClassReg
 b g_CTEConcussiveExplosion_ClassReg
 b g_CTEDecal_ClassReg
 b g_CTEDust_ClassReg
 b g_CTEDynamicLight_ClassReg
 b g_CTEEffectDispatch_ClassReg
 b g_CTEEnergySplash_ClassReg
 b g_CTEExplosion_ClassReg
 b g_CTEFizz_ClassReg
 b g_CTEFootprintDecal_ClassReg
 b g_CTEGaussExplosion_ClassReg
 b g_CTEGlowSprite_ClassReg
 b g_CTEHL2MPFireBullets_ClassReg
 b g_CTEImpact_ClassReg
 b g_CTEKillPlayerAttachments_ClassReg
 b g_CTELargeFunnel_ClassReg
 b g_CTEMetalSparks_ClassReg
 b g_CTEMuzzleFlash_ClassReg
 b g_CTEParticleSystem_ClassReg
 b g_CTEPhysicsProp_ClassReg
 b g_CTEPlayerDecal_ClassReg
 b g_CTEProjectedDecal_ClassReg
 b g_CTEShatterSurface_ClassReg
 b g_CTEShowLine_ClassReg
 b g_CTESmoke_ClassReg
 b g_CTESparks_ClassReg
 b g_CTESpriteSpray_ClassReg
 b g_CTESprite_ClassReg
 b g_CTEWorldDecal_ClassReg
 b g_CTeamRoundTimer_ClassReg
 b g_CTeamTrainWatcher_ClassReg
 b g_CTeam_ClassReg
 b g_CTeamplayRoundBasedRulesProxy_ClassReg
 b g_CTesla_ClassReg
 b g_CTestTraceline_ClassReg
 b g_CTest_ProxyToggle_Networkable_ClassReg
 b g_CVGuiScreen_ClassReg
 b g_CVortigauntChargeToken_ClassReg
 b g_CVortigauntEffectDispel_ClassReg
 b g_CVoteController_ClassReg
 b g_CWaterBullet_ClassReg
 b g_CWaterLODControl_ClassReg
 b g_CWeapon357_ClassReg
 b g_CWeaponAR2_ClassReg
 b g_CWeaponAnnabelle_ClassReg
 b g_CWeaponBugBait_ClassReg
 b g_CWeaponCrossbow_ClassReg
 b g_CWeaponCrowbar_ClassReg
 b g_CWeaponCubemap_ClassReg
 b g_CWeaponCycler_ClassReg
 b g_CWeaponFrag_ClassReg
 b g_CWeaponHL2MPBase_ClassReg
 b g_CWeaponPhysCannon_ClassReg
 b g_CWeaponPistol_ClassReg
 b g_CWeaponRPG_ClassReg
 b g_CWeaponSMG1_ClassReg
 b g_CWeaponShotgun_ClassReg
 b g_CWeaponStunStick_ClassReg
 b g_CWeapon_SLAM_ClassReg
 b g_CWorld_ClassReg
 b g_CleanupDefaultRelationships
 b g_CleanupSymbolTable
 b g_ConceptInfoMap
 b g_Controller
 b g_DataObjectAccessSystem
 b g_DecalSystem
 b g_DefaultViewVectors
 b g_DeleteList
 b g_DustTrail_ClassReg
 b g_EdictTouchLinks
 b g_EntityGroundLinks
 b g_EntityListSystem
 b g_GameMovement
 b g_GameStringPool
 b g_GameUI
 b g_GlobalSymbolDataOps
 b g_HL2MPViewVectors
 b g_HLMoveData
 b g_HighestActivity
 b g_HighestEvent
 b g_InRestore
 b g_KeyValues2ErrorStack
 b g_LagCompensationManager
 b g_LogFileHandle
 b g_Managers
 b g_MasterResupply
 b g_Mathlib_GammaToLinear
 b g_Mathlib_LinearToGamma
 b g_MessageEntities
 b g_ModelSoundsCache
 b g_ModelSoundsCacheSaver
 b g_ModelSoundsSymbolHelper
 b g_MovieExplosion_ClassReg
 b g_NotifyList
 b g_NpcTimeThisFrame
 b g_OneWayTransition
 b g_ParticleSmokeGrenade_ClassReg
 b g_PhysAverageSimTime
 b g_PlayerMove
 b g_RS
 b g_RecipientFilterPredictionSystem
 b g_RestoredEntities
 b g_RocketTrail_ClassReg
 b g_ServerBenchmark
 b g_ServerChoreoTools
 b g_ServerTools
 b g_SmokeTrail_ClassReg
 b g_SoundEmitterSystem
 b g_SporeExplosion_ClassReg
 b g_SporeTrail_ClassReg
 b g_StartTimeCurThink
 b g_StudioBoneCache
 b g_TEAntlionDust
 b g_TEArmorRicochet
 b g_TEBSPDecal
 b g_TEBeamEntPoint
 b g_TEBeamEnts
 b g_TEBeamFollow
 b g_TEBeamLaser
 b g_TEBeamPoints
 b g_TEBeamRing
 b g_TEBeamRingPoint
 b g_TEBeamSpline
 b g_TEBloodSprite
 b g_TEBloodStream
 b g_TEBreakModel
 b g_TEBubbleTrail
 b g_TEBubbles
 b g_TEClientProjectile
 b g_TEConcussiveExplosion
 b g_TEDecal
 b g_TEDust
 b g_TEDynamicLight
 b g_TEEffectDispatch
 b g_TEEnergySplash
 b g_TEExplosion
 b g_TEFizz
 b g_TEFootprintDecal
 b g_TEGaussExplosion
 b g_TEGlowSprite
 b g_TEHL2MPFireBullets
 b g_TEImpact
 b g_TEKillPlayerAttachments
 b g_TELargeFunnel
 b g_TEMetalSparks
 b g_TEMuzzleFlash
 b g_TEPlayerDecal
 b g_TEProjectedDecal
 b g_TEShatterSurface
 b g_TEShowLine
 b g_TESmoke
 b g_TESparks
 b g_TESprite
 b g_TESpriteSpray
 b g_TESystem
 b g_TEWorldDecal
 b g_TeleportStack
 b g_Templates
 b g_ThinkChecker
 b g_ToolFrameworkServer
 b g_TouchManager
 b g_TouchTrace
 b g_UserMessages
 b g_VisibilityCache
 b g_WatcherList
 b g_WorldEntity
 b g_bPermitDirectSoundPrecache
 b g_bTracingVsCommentaryNodes
 b g_bludgeonMaxs
 b g_bludgeonMins
 b g_iDebuggingTransition
 b g_nCommandClientIndex
 b g_pClassnameSpawnPriority
 b g_pClientPutInServerOverride
 b g_pClosecaption
 b g_pMsgBuffer
 b g_pNextLink
 b g_pPrecacheRegisters
 b g_pSoundEnt
 b g_pTestObj
 b g_pcv_ThreadMode
 b g_pcv_commentary
 b g_pcv_hideServer
 b game_end
 b game_gib_manager
 b game_player_equip
 b game_player_team
 b game_ragdoll_manager
 b game_score
 b game_text
 b game_ui
 b game_weapon_manager
 b game_zone_player
 b generic_actor
 b gib
 b gibshooter
 b give_command
 b givecurrentammo
 b global_set
 b god
 b grenade
 b grenade_ar2
 b grenade_beam
 b grenade_beam_chaser
 b grenade_helicopter
 b grenade_homer
 b grenade_pathfollower
 b groundlist
 b guard variable for CAI_BaseNPC::NPCThink()::timer
 b guard variable for CAI_BaseNPC::RebalanceThinks()::rebalanceCandidates
 b guard variable for CAI_BaseNPC::TranslateActivity(Activity, Activity*)::sUniqueActivities
 b guard variable for CAI_BaseNPC::UpdateEfficiency(bool)::vPlayerEyePosition
 b guard variable for CAI_BaseNPC::UpdateEfficiency(bool)::vPlayerForward
 b guard variable for CAI_FollowBehavior::GetFollowPoint()::invalid
 b guard variable for CAI_Path::BaseGoalPosition() const::vecResult
 b guard variable for CAI_Path::NextWaypointPos() const::invalid
 b guard variable for CAI_TrackPather::TargetPathAcrossDirection() const::s_Result
 b guard variable for CBaseCombatCharacter::FindEntityRelationship(CBaseEntity*)::dummy
 b guard variable for CBaseCombatWeapon::GetBulletSpread()::cone
 b guard variable for CBasePlayer::EyeAngles()::angEyeWorld
 b guard variable for CBeam::GetAbsEndPos() const::vecAbsPos
 b guard variable for CCollisionProperty::CollisionToWorldTransform() const::s_matTemp
 b guard variable for CCurveData::GetBoundedSample(ICurveDataAccessor*, int, bool&)::nullend
 b guard variable for CCurveData::GetBoundedSample(ICurveDataAccessor*, int, bool&)::nullstart
 b guard variable for CFlexAnimationTrack::GetBoundedSample(int, bool&, int)::nullend
 b guard variable for CFlexAnimationTrack::GetBoundedSample(int, bool&, int)::nullstart
 b guard variable for CHL2MPMachineGun::GetBulletSpread()::cone
 b guard variable for CNPC_Bullseye::CanBeAnEnemyOf(CBaseEntity*)::flFullFov
 b guard variable for CNPC_Citizen::GetSquadCommandRepresentative()::hCurrent
 b guard variable for CNPC_FloorTurret::PreferredCarryAngles()::g_prefAngles
 b guard variable for CServerGameClients::ClientSettingsChanged(edict_t*)::pMax
 b guard variable for CServerGameClients::ClientSettingsChanged(edict_t*)::pMaxUpdateRate
 b guard variable for CServerGameClients::ClientSettingsChanged(edict_t*)::pMin
 b guard variable for CServerGameClients::ClientSettingsChanged(edict_t*)::pMinUpdateRate
 b guard variable for CStudioHdr::pSeqdesc(int)::s_nil_seq
 b guard variable for CTestTraceline::Spin()::traceline_spin
 b guard variable for CTextStat::GetTextStatsList()::theList
 b guard variable for CalcLocalHierarchyAnimation(CStudioHdr const*, matrix3x4_t*, CBoneBitList&, Vector*, Quaternion*, mstudiobone_t const*, mstudiolocalhierarchy_t*, int, int, float, int, float, int)::rootXform
 b guard variable for EntityFactoryDictionary()::s_EntityFactory
 b guard variable for GetAmmoDef()::def
 b guard variable for GetSceneManager()::s_SceneManager
 b guard variable for GetUniverse()::steamUniverse
 b guard variable for MissingSceneWarning(char const*)::missing
 b guard variable for MoveHelperServer()::s_MoveHelperServer
 b guard variable for TheTacticalMissions()::manager
 b guard variable for UTIL_EntitiesInPVS(CBaseEntity*, CBaseEntity*)::lastOrg
 b guard variable for WaveTrace(char const*, char const*)::s_WaveTrace
 b hammer_update_entity_command
 b hammer_update_safe_entities_command
 b hammer_updateignorelist
 b handle_dummy
 b handle_test
 b helicopter_chunk
 b hl2_gamerules
 b hl2mp_gamerules
 b hl2mp_ragdoll
 b hud_airboathint_numentries
 b hullcolor
 b hurtme
 b ice_sboxes_initialised
 b info_apc_missile_hint
 b info_camera_link
 b info_constraint_anchor
 b info_hint
 b info_intermission
 b info_ladder_dismount
 b info_landmark
 b info_lighting_relative
 b info_mass_center
 b info_node
 b info_node_air
 b info_node_air_hint
 b info_node_climb
 b info_node_hint
 b info_node_link
 b info_node_link_controller
 b info_npc_spawn_destination
 b info_null
 b info_overlay_accessor
 b info_particle_system
 b info_player_combine
 b info_player_deathmatch
 b info_player_rebel
 b info_player_start
 b info_player_teamspawn
 b info_projecteddecal
 b info_radial_link_controller
 b info_snipertarget
 b info_target
 b info_target_command_point
 b info_target_gunshipcrash
 b info_target_helicopter_crash
 b info_teleport_destination
 b info_teleporter_countdown
 b info_vehicle_groundspawn
 b infodecal
 b instanced_scripted_scene
 b item_ammo_357
 b item_ammo_357_large
 b item_ammo_ar2
 b item_ammo_ar2_altfire
 b item_ammo_ar2_large
 b item_ammo_crate
 b item_ammo_crossbow
 b item_ammo_pistol
 b item_ammo_pistol_large
 b item_ammo_smg1
 b item_ammo_smg1_grenade
 b item_ammo_smg1_large
 b item_ar2_grenade
 b item_battery
 b item_box_buckshot
 b item_box_flare_rounds
 b item_box_lrounds
 b item_box_mrounds
 b item_box_sniper_rounds
 b item_box_srounds
 b item_dynamic_resupply
 b item_flare_round
 b item_healthcharger
 b item_healthkit
 b item_healthvial
 b item_item_crate
 b item_large_box_lrounds
 b item_large_box_mrounds
 b item_large_box_srounds
 b item_ml_grenade
 b item_rpg_round
 b item_sodacan
 b item_suit
 b item_suitcharger
 b kdtree_test
 b keyframe_rope
 b keyframe_track
 b kill_command
 b killvector_command
 b light
 b light_dynamic
 b light_environment
 b light_glspot
 b light_spot
 b lineartoscreen
 b lineartotexture
 b logic_active_autosave
 b logic_auto
 b logic_autosave
 b logic_branch
 b logic_branch_listener
 b logic_case
 b logic_choreographed_scene
 b logic_collision_pair
 b logic_compare
 b logic_lineto
 b logic_measure_movement
 b logic_multicompare
 b logic_navigation
 b logic_playerproxy
 b logic_proximity
 b logic_relay
 b logic_scene_list_manager
 b logic_timer
 b lookdoorthinker
 b m_ActivityRemapDatabase
 b m_WeaponInfoDatabase
 b m_hRepellantList
 b material_modify_control
 b math_colorblend
 b math_counter
 b math_remap
 b mission_list_command
 b mission_show_command
 b mod_load_showstall
 b model_studio
 b momentary_door
 b momentary_rot_button
 b monster_furniture
 b monster_generic
 b mortarshell
 b motdfile
 b motdfile_text
 b move_keyframed
 b move_rope
 b mp_disable_autokick_command
 b mp_forcerespawnplayers
 b mp_forcewin_command
 b mp_scrambleteams
 b mp_switchteams
 b mp_tournament_allow_non_admin_restart
 b mp_tournament_restart
 b multisource
 b nFrameNumber
 b nPropBreakablesPerFrameCount
 b noclip
 b npc_alyx
 b npc_ammo_deplete_command
 b npc_antlion
 b npc_antlion_template_maker
 b npc_antlionguard
 b npc_apcdriver
 b npc_barnacle
 b npc_barnacle_swallow
 b npc_barnacle_tongue_tip
 b npc_barney
 b npc_bipass
 b npc_breen
 b npc_bullseye
 b npc_citizen
 b npc_clawscanner
 b npc_combat
 b npc_combine
 b npc_combine_camera
 b npc_combine_s
 b npc_combinedropship
 b npc_combinegunship
 b npc_concussiongrenade
 b npc_conditions
 b npc_contactgrenade
 b npc_cranedriver
 b npc_create
 b npc_create_aimed
 b npc_crow
 b npc_cscanner
 b npc_destroy
 b npc_destroy_unselected
 b npc_dog
 b npc_eli
 b npc_enemies
 b npc_enemyfinder
 b npc_enemyfinder_combinecannon
 b npc_fisherman
 b npc_focus
 b npc_freeze
 b npc_freeze_unselected_command
 b npc_furniture
 b npc_gman
 b npc_go
 b npc_go_do_run
 b npc_go_random
 b npc_grenade_bugbait
 b npc_grenade_frag
 b npc_handgrenade
 b npc_headcrab
 b npc_headcrab_black
 b npc_headcrab_fast
 b npc_headcrab_poison
 b npc_heal_command
 b npc_heli_avoidbox
 b npc_heli_avoidsphere
 b npc_heli_nobomb
 b npc_helicopter
 b npc_helicoptersensor
 b npc_ichthyosaur
 b npc_kill
 b npc_kleiner
 b npc_launcher
 b npc_maker
 b npc_manhack
 b npc_metropolice
 b npc_missiledefense
 b npc_monk
 b npc_mossman
 b npc_nearest
 b npc_newnpc
 b npc_pigeon
 b npc_poisonzombie
 b npc_relationships
 b npc_reset
 b npc_rollermine
 b npc_route
 b npc_satchel
 b npc_seagull
 b npc_select
 b npc_sniper
 b npc_speakall_command
 b npc_squads
 b npc_stalker
 b npc_steering
 b npc_steering_all
 b npc_strider
 b npc_task_text
 b npc_tasks
 b npc_teleport
 b npc_template_maker
 b npc_thinknow_command
 b npc_tripmine
 b npc_turret_ceiling
 b npc_turret_floor
 b npc_turret_ground
 b npc_vehicledriver
 b npc_viewcone
 b npc_vortigaunt
 b npc_zombie
 b npc_zombie_torso
 b num_teams
 b old_armor
 b particle_test_start
 b particle_test_stop
 b path_corner
 b path_corner_crash
 b path_track
 b phys_ballsocket
 b phys_bone_follower
 b phys_constraint
 b phys_constraintsystem
 b phys_convert
 b phys_hinge
 b phys_keepupright
 b phys_lengthconstraint
 b phys_magnet
 b phys_motor
 b phys_penetration_error_time
 b phys_pulleyconstraint
 b phys_ragdollconstraint
 b phys_ragdollmagnet
 b phys_slideconstraint
 b phys_spring
 b phys_thruster
 b phys_torque
 b physics_budget_command
 b physics_cannister
 b physics_constraints_command
 b physics_debug_entity_command
 b physics_entity_solver
 b physics_highlight_active_command
 b physics_npc_solver
 b physics_prop
 b physics_prop_ragdoll
 b physics_report_active_command
 b physics_select_command
 b physicsshadowupdate_render
 b physswap
 b picker
 b player
 b player_loadsaved
 b player_manager
 b player_pickup
 b player_speedmod
 b player_weaponstrip
 b point_anglesensor
 b point_angularvelocitysensor
 b point_antlion_repellant
 b point_apc_controller
 b point_bonusmaps_accessor
 b point_bugbait
 b point_camera
 b point_clientcommand
 b point_combine_ball_launcher
 b point_commentary_node
 b point_commentary_viewpoint
 b point_devshot_camera
 b point_enable_motion_fixup
 b point_gamestats_counter
 b point_hurt
 b point_message
 b point_playermoveconstraint
 b point_posecontroller
 b point_proximity_sensor
 b point_push
 b point_servercommand
 b point_spotlight
 b point_teleport
 b point_template
 b point_tesla
 b point_velocitysensor
 b point_viewcontrol
 b precache_function_EffectsPrecache
 b precache_other_entityflame
 b precache_other_item_battery
 b precache_other_item_healthkit
 b precache_other_item_healthvial
 b precache_other_player
 b precache_other_spraycan
 b precache_other_team_round_timer
 b precache_other_vgui_screen
 b precache_weapon_weapon_357
 b precache_weapon_weapon_ar2
 b precache_weapon_weapon_crossbow
 b precache_weapon_weapon_crowbar
 b precache_weapon_weapon_frag
 b precache_weapon_weapon_physcannon
 b precache_weapon_weapon_pistol
 b precache_weapon_weapon_rpg
 b precache_weapon_weapon_shotgun
 b precache_weapon_weapon_slam
 b precache_weapon_weapon_smg1
 b precache_weapon_weapon_stunstick
 b predicted_viewmodel
 b prop_combine_ball
 b prop_debug
 b prop_door_rotating
 b prop_dropship_container
 b prop_dynamic
 b prop_dynamic_create
 b prop_dynamic_ornament
 b prop_dynamic_override
 b prop_physics
 b prop_physics_create
 b prop_physics_multiplayer
 b prop_physics_override
 b prop_physics_respawnable
 b prop_ragdoll
 b prop_ragdoll_attached
 b prop_sphere
 b prop_thumper
 b prop_vehicle
 b prop_vehicle_airboat
 b prop_vehicle_apc
 b prop_vehicle_crane
 b prop_vehicle_driveable
 b prop_vehicle_prisoner_pod
 b proto_sniper
 b raggib
 b report_entities_command
 b report_simthinklist_command
 b report_soundpatch_command
 b report_touchlinks_command
 b reserved_spot
 b resetGameStats
 b restart_entities
 b rope_anchor
 b rpg_missile
 b rr_reloadresponsesystems_command
 b s_BoneMutex
 b s_BraceCharacters
 b s_BuildReverseMap
 b s_CombatCharVisCache
 b s_DebugHistory
 b s_DirtyKDTree
 b s_EffectServer
 b s_EmptyConVar
 b s_GameStats_Singleton
 b s_GameSystems
 b s_GameSystemsPerFrame
 b s_HL2EventLog
 b s_HLTVDirector
 b s_HashChains
 b s_LastEntityReasonableEmitTime
 b s_LightMutex
 b s_ListEnemyfinders
 b s_Microphones
 b s_ParticleSystemMgr
 b s_QCache
 b s_RemoveImmediateSemaphore
 b s_RndOrder
 b s_SIMDRandContexts
 b s_SteamAPIContext
 b s_SteamGameServerAPIContext
 b s_SuccessfulSpeculatives
 b s_TEPhysicsProp
 b s_VictimList
 b s_WastedSpeculativeUpdates
 b s_bAllocatorInitialized
 b s_bConnected
 b s_bInDMXContext
 b s_bMMXEnabled
 b s_bRegistered
 b s_bRunningWithDebugModules
 b s_bSSE2Enabled
 b s_bSSEEnabled
 b s_bSystemsInitted
 b s_detailController
 b s_factories
 b s_iAngryZombies
 b s_nCVarFlag
 b s_nNumCacheMisses
 b s_nNumCacheQueries
 b s_pClassLists
 b s_pMapName
 b s_pNonModifiedPointerProxyHead
 b s_pPerFrameSystemList
 b s_pSystemList
 b s_pTokenBuf
 b s_szPseudoUniqueID
 b s_szSaveFileName
 b s_szStatUploadRegistryKeyName
 b s_vecWindVelocity
 b say_command
 b say_team_command
 b scene_async_prefetch_spew
 b scene_clamplookat
 b scene_flush_command
 b scene_forcecombined
 b scene_manager
 b scene_maxcaptionradius
 b scene_print
 b scene_showfaceto
 b scene_showlook
 b scene_showmoveto
 b scene_showunlock
 b script_intro
 b scripted_scene
 b scripted_sentence
 b scripted_sequence
 b scripted_target
 b server_game_time_command
 b setang
 b setang_exact_command
 b setmodel
 b setpos_command
 b setpos_exact_command
 b sg_DynamicLoadHandlers
 b shadow_control
 b shake
 b showtriggers_toggle
 b simple_physics_brush
 b simple_physics_prop
 b sk_airboat_drain_rate
 b sk_airboat_max_ammo
 b sk_airboat_recharge_rate
 b sk_apc_missile_damage
 b sk_suitcharger
 b sk_suitcharger_citadel
 b sk_suitcharger_citadel_maxarmor
 b sky_camera
 b smoothstairs
 b sniperbullet
 b soundent
 b soundpatch_captionlength
 b soundscape_flush_command
 b spark_shower
 b sparktrail
 b speechListIndex
 b speechListSounds
 b spotlight_end
 b spraycan
 b squadinsignia
 b st_szNextMap
 b st_szNextSpot
 b surfaceprop_command
 b sv_autoladderdismount
 b sv_benchmark_autovprofrecord
 b sv_benchmark_force_start_command
 b sv_benchmark_numticks
 b sv_clockcorrection_msecs
 b sv_findsoundname_command
 b sv_ladder_useonly
 b sv_ladderautomountdot
 b sv_lagcompensation_teleport_dist
 b sv_maxusrcmdprocessticks
 b sv_maxusrcmdprocessticks_holdaim
 b sv_optimizedmovement
 b sv_playerperfhistorycount
 b sv_querycache_stats_command
 b sv_soundemitter_filecheck_command
 b sv_soundemitter_flush_command
 b sv_soundemitter_trace
 b sv_soundscape_printdebuginfo_command
 b sv_thinktimecheck
 b tanktrain_ai
 b tanktrain_aitarget
 b target_cdaudio
 b target_changegravity
 b te_tester
 b team_control_point
 b team_control_point_master
 b team_control_point_round
 b team_manager
 b team_names
 b team_round_timer
 b team_scores
 b team_train_watcher
 b test_dispatcheffect
 b test_effect
 b test_entity_blocker
 b test_proxytoggle
 b test_traceline
 b texturetolinear
 b tf2_feetyawrunscale
 b timeleft_command
 b toggle_duck
 b toggle_zoom
 b trigger
 b trigger_apply_impulse
 b trigger_autosave
 b trigger_brush
 b trigger_capture_area
 b trigger_cdaudio
 b trigger_changelevel
 b trigger_gravity
 b trigger_hurt
 b trigger_impact
 b trigger_look
 b trigger_multiple
 b trigger_once
 b trigger_physics_trap
 b trigger_playermovement
 b trigger_proximity
 b trigger_push
 b trigger_remove
 b trigger_rpgfire
 b trigger_serverragdoll
 b trigger_soundscape
 b trigger_teleport
 b trigger_teleport_relative
 b trigger_togglesave
 b trigger_transition
 b trigger_vphysics_motion
 b trigger_waterydeath
 b trigger_weapon_dissolve
 b trigger_weapon_strip
 b trigger_wind
 b tv_allow_camera_man
 b tv_allow_static_shots
 b tv_delay
 b use
 b variant_t::ToString() const::szBuf
 b vec2_invalid
 b vec2_origin
 b vec4_invalid
 b vec4_origin
 b vehicle_flushscript_command
 b vehicle_viewcontroller
 b vgui_screen
 b vgui_screen_team
 b vgui_slideshow_display
 b viewmodel
 b violence_ablood
 b violence_agibs
 b violence_hblood
 b violence_hgibs
 b vort_charge_token
 b vort_effect_dispel
 b vote_controller
 b voxeltree_box
 b voxeltree_playerview
 b voxeltree_sphere
 b voxeltree_view
 b water_lod_control
 b waterbullet
 b wc_air_edit_further
 b wc_air_edit_nearer
 b wc_air_node_edit
 b wc_create
 b wc_destroy
 b wc_destroy_undo
 b wc_link_edit
 b weapon_357
 b weapon_annabelle
 b weapon_ar2
 b weapon_bugbait
 b weapon_crossbow
 b weapon_crowbar
 b weapon_cubemap
 b weapon_frag
 b weapon_hl2mp_base
 b weapon_physcannon
 b weapon_pistol
 b weapon_rpg
 b weapon_shotgun
 b weapon_slam
 b weapon_smg1
 b weapon_stunstick
 b window_pane
 b world_items
 b worldspawn
 ceil
 ceilf
 cos
 cosf
 d (anonymous namespace)::s_PlayerInfoManager_V1
 d ACHIEVEMENT_SAVE_RESTORE_VERSION
 d AI_DEFAULT_STANDOFF_PARAMS
 d AI_SAVE_RESTORE_VERSION
 d CAI_BaseNPC::ClearSenseConditions()::conditionsToClear
 d CAI_BaseNPC::DrawDebugTextOverlays()::pMoveNames
 d CAI_BaseNPC::NPCThink()::ppszEfficiencies
 d CAI_BaseNPC::NPCThink()::ppszMoveEfficiencies
 d CAI_BaseNPC::OnListened()::conditionsToClear
 d CAI_BaseNPC::OnLooked(int)::conditionsToClear
 d CAI_BaseNPC::PreNPCThink()::frameTimeLimit
 d CAI_BaseNPC::PreNPCThink()::iPrevFrame
 d CAI_BaseNPC::ReportAIState()::pStateNames
 d CAI_BaseNPC::SetScriptedScheduleIgnoreConditions(Interruptability_t)::g_DamageConditions
 d CAI_BaseNPC::SetScriptedScheduleIgnoreConditions(Interruptability_t)::g_GeneralConditions
 d CAI_BaseNPC::UpdateEfficiency(bool)::iPrevFrame
 d CAI_ExpresserHost_NPC_DoModifyOrAppendCriteria(CAI_BaseNPC*, AI_CriteriaSet&)::pStateNames
 d CAI_Navigator::SimplifyPathForward(float)::fullScanParams
 d CAI_Navigator::SimplifyPathQuick()::quickScanParams
 d CAI_PolicingBehavior::AnnouncePolicing()::pWarnings
 d CBaseButton::DrawDebugTextOverlays()::pszStates
 d CBaseCombatWeapon::GetProficiencyValues()::defaultWeaponProficiencyTable
 d CBaseHL2MPCombatWeapon::GetDefaultProficiencyValues()::g_BaseWeaponProficiencyTable
 d CBaseHLCombatWeapon::GetDefaultProficiencyValues()::g_BaseWeaponProficiencyTable
 d CBounceBomb::Spawn()::nextSkin
 d CDecal::StaticDecal()::CTraceFilterValidForDecal::ShouldHitEntity(IHandleEntity*, int)::ppszIgnoredClasses
 d CGlobalState::DumpGlobals()::estates
 d CHL2MP_Player::State_LookupInfo(HL2MPPlayerState)::playerStateInfos
 d CHLTVDirector::GetModEvents()::s_modevents
 d CNPC_Antlion::CorpseGib(CTakeDamageInfo const&)::s_nBodyBone
 d CNPC_Citizen::SelectModel()::CitizenTypeMappings
 d CNPC_CombineDropship::InputNPCFinishDustoff(inputdata_t&)::g_Conditions
 d CNPC_MetroPolice::AnnounceHarrassment()::pWarnings
 d CNPC_MetroPolice::IdleSound()::pQuestion
 d CNPC_MetroPolice::IdleSound()::pResponse
 d CNPC_Vortigaunt::SetScriptedScheduleIgnoreConditions(Interruptability_t)::g_VortConditions
 d COMMENTARY_SAVE_RESTORE_VERSION
 d CRestore::ReadFields(char const*, void*, datamap_t*, typedescription_t*, int)::lastName
 d CWeaponAR2::GetProficiencyValues()::proficiencyTable
 d CWeaponSMG1::GetProficiencyValues()::proficiencyTable
 d CZombie::GatherConditions()::conditionsToClear
 d EVENTQUEUE_SAVE_RESTORE_VERSION
 d GetAttachTypeFromString(char const*)::pAttachmentNames
 d GetMassEquivalent(float)::masstext
 d PHYS_SAVE_RESTORE_VERSION
 d PrecacheInstancedScene(char const*)::nMakingReslists
 d RESPONSESYSTEM_SAVE_RESTORE_VERSION
 d TEMPLATE_SAVE_RESTORE_VERSION
 d __g_CServerGameTags_singleton
 d antlionGuardAngularTable
 d antlionGuardLinearTable
 d cappedPlayerAngularTable
 d cappedPlayerLinearTable
 d constraintevents
 d dyld__mach_header
 d gCappedPlayerImpactDamageTable
 d gDamageTableRegistry
 d gTitleComments
 d g_ActivityDataOps
 d g_AntlionFollowFormation
 d g_AntlionFollowFormationSlots
 d g_CommanderFollowFormation
 d g_CommanderFollowFormationSlots
 d g_ConVarAccessor
 d g_DefaultLightstyles
 d g_DynamicResupplyAmmoItems
 d g_DynamicResupplyHealthItems
 d g_EntFireAutoComplete
 d g_Helper
 d g_HunterFollowFormation
 d g_HunterFollowFormationSlots
 d g_MediumFollowFormation
 d g_MediumFollowFormationSlots
 d g_NameMap
 d g_NullSurface
 d g_ProficiencyNames
 d g_ServerSideFlexControllers
 d g_SidekickFollowFormation
 d g_SidekickFollowFormationSlots
 d g_SimpleFollowFormation
 d g_SimpleFollowFormationSlots
 d g_TightFollowFormation
 d g_TightFollowFormationSlots
 d g_VortigauntFollowFormation
 d g_VortigauntFollowFormationSlots
 d g_WideFollowFormation
 d g_WideFollowFormationSlots
 d g_bCleanupDatObject
 d g_bEnableProxy
 d g_pSoundLevels
 d g_ppszModelLocs
 d g_ppszRandomHeads
 d glassAngularTable
 d glassLinearTable
 d npcAngularTable
 d npcLinearTable
 d pCraneFollowerBoneNames
 d pFollowerBoneNames
 d playerAngularTable
 d playerCallback
 d playerLinearTable
 d playerVehicleAngularTable
 d playerVehicleLinearTable
 d s_BotManager
 d s_ChildOperatorDefinition
 d s_DamageTypeToStrTable
 d s_DefaultAccessor
 d s_DefaultParticleSystemQuery
 d s_IKSaveRestoreOp
 d s_LastFileLoadingFrom
 d s_NameMap
 d s_ParticleSystemQuery
 d s_PlayerInfoManager
 d s_PreserveEnts
 d s_RemapOperatorNameTable
 d s_SoundPatchSaveRestoreOps
 d s_nDLLIdentifier
 d s_pBogusFogMaps
 d s_pChunkModelName
 d s_pConversionArrays_NoEscConversion
 d s_pConversionArrays_StringCharConversion
 d s_pGibModelName
 d s_pHeadcrabClass
 d typeinfo for (anonymous namespace)::CPlayerInfoManager_V1
 d typeinfo for (anonymous namespace)::IPlayerInfoManager_V1
 d typeinfo for CDecal::StaticDecal()::CTraceFilterValidForDecal
 d typeinfo for CHL2MPRules::CleanUpMap()::CHL2MPMapEntityFilter
 d typeinfo for CNPC_BaseZombie::FindNearestPhysicsObject(int)::CZombieSwatEntitiesEnum
 d vtable for (anonymous namespace)::CPlayerInfoManager_V1
 d vtable for CDecal::StaticDecal()::CTraceFilterValidForDecal
 d vtable for CHL2MPRules::CleanUpMap()::CHL2MPMapEntityFilter
 d vtable for CNPC_BaseZombie::FindNearestPhysicsObject(int)::CZombieSwatEntitiesEnum
 dlclose
 dlerror
 dlopen
 dlsym
 expf
 floor
 floorf
 fmaxf
 fminf
 fmod
 fmodf
 free
 g_ClockSpeedMillisecondsMultiplier
 g_ClockSpeedSecondsMultiplier
 g_VProfCurrentProfile
 g_pThreadPool
 g_pVCR
 getcwd
 localtime
 log
 log10
 logf
 malloc
 memcmp
 memcpy
 memmove
 memset
 memset_pattern16
 operator delete(void*)
 operator delete[](void*)
 operator new(unsigned long)
 operator new[](unsigned long)
 pow
 printf
 pthread_mutex_destroy
 pthread_mutex_init
 pthread_mutex_lock
 pthread_mutex_unlock
 pthread_mutexattr_init
 pthread_mutexattr_settype
 qsort
 r .memset_pattern
 r AI_NAVIGATOR_SAVE_VERSION
 r CAI_BaseNPC::NPCThink()::g_DecisionIntervals
 r CAI_BaseNPC::StartNPC()::nextThinkTimes
 r CAI_BaseNPC::UpdateEfficiency(bool)::mappings
 r CAI_BaseNPC::UpdateEfficiency(bool)::stateBase
 r CAI_Motor::MoveNormalExecute(AILocalMoveGoal_t const&)::moveResults
 r CAI_Navigator::Move(float)::failures
 r CAI_Pathfinder::CTriDebugOverlay::AddTriOverlayLines(Vector const&, Vector const&, Vector const&, AIMoveTrace_t const&, AIMoveTrace_t const&, bool)::s_TriangulationColor
 r CAI_ScriptConditions::EvalState(CAI_ScriptConditions::EvalArgs_t const&)::stateVals
 r CAI_ScriptedSchedule::StartSchedule(CAI_BaseNPC*)::forcedStatesMap
 r CBaseGameStats_Driver::SendData()::szFileName
 r CBasePlayer::FindUseEntity()::tangents
 r CFuncTankAPCRocket::Fire(int, Vector const&, Vector const&, CBaseEntity*, bool)::s_pSide
 r CPropAPC::FireRocket()::s_pSide
 r MAX_LOCAL_NAV_DIST_FLY
 r MAX_LOCAL_NAV_DIST_GROUND
 r MAX_PROBE_DIST
 r NO_PVS_ROUTE_SIMPLIFY_TIME_DELAY
 r PLANE_SOLVER_THINK_FREQUENCY
 r QUICK_SIMPLIFY_TIME_DELAY
 r ROUTE_SIMPLIFY_TIME_DELAY
 r TIME_DELAY_FULL_DIRECT_PROBE
 r UTIL_PlayerByCommandArg(char const*)::szPrefix
 r gSizes
 r g_AI_MoveSuggWeights
 r g_nRandomValues
 r ice_keyrot
 r ice_pbox
 r ice_smod
 r ice_sxor
 r pulCRCTable
 r s_ExtIndices
 r s_MatIndices
 r s_pAttributeSize
 r s_pReactionFraction
 r s_pShotCountFraction
 r typeinfo name for (anonymous namespace)::CPlayerInfoManager_V1
 r typeinfo name for (anonymous namespace)::IPlayerInfoManager_V1
 r typeinfo name for CDecal::StaticDecal()::CTraceFilterValidForDecal
 r typeinfo name for CHL2MPRules::CleanUpMap()::CHL2MPMapEntityFilter
 r typeinfo name for CNPC_BaseZombie::FindNearestPhysicsObject(int)::CZombieSwatEntitiesEnum
 raise
 realloc
 sin
 sinf
 sscanf
 std::string::_M_mutate(unsigned long, unsigned long, unsigned long)
 std::string::_Rep::_M_destroy(std::allocator<char> const&)
 std::string::_Rep::_S_empty_rep_storage
 std::string::assign(char const*, unsigned long)
 std::terminate()
 strcasecmp
 strcat
 strchr
 strcmp
 strcpy
 strdup
 strlen
 strncasecmp
 strncat
 strncmp
 strncpy
 strrchr
 strstr
 strtod$UNIX2003
 strtok
 strtol
 strtoul
 t (anonymous namespace)::CPlayerInfoManager_V1::GetPlayerInfo(edict_t*)
 t (anonymous namespace)::__CreateCPlayerInfoManager_V1IPlayerInfoManager_V1_interface()
 t AlignBoxes(matrix3x4_t*, Vector const&, Vector const&)
 t BuildTeleportList_r(CBaseEntity*, CUtlVector<TeleportListEntry_t, CUtlMemory<TeleportListEntry_t, int> >&)
 t CC_FadeIn(CCommand const&)
 t CC_FadeOut(CCommand const&)
 t CC_ResetGameStats(CCommand const&)
 t CDecal::StaticDecal()::CTraceFilterValidForDecal::ShouldHitEntity(IHandleEntity*, int)
 t CHL2MPRules::CleanUpMap()::CHL2MPMapEntityFilter::CreateNextEntity(char const*)
 t CHL2MPRules::CleanUpMap()::CHL2MPMapEntityFilter::ShouldCreateEntity(char const*)
 t CNPC_BaseZombie::FindNearestPhysicsObject(int)::CZombieSwatEntitiesEnum::EnumElement(IHandleEntity*)
 t CalcAnimation(CStudioHdr const*, Vector*, Quaternion*, mstudioseqdesc_t&, int, int, float, int)
 t CalcDecompressedAnimation(mstudiocompressedikerror_t const*, int, float, Vector&, Quaternion&)
 t CalcLocalHierarchyAnimation(CStudioHdr const*, matrix3x4_t*, CBoneBitList&, Vector*, Quaternion*, mstudiobone_t const*, mstudiolocalhierarchy_t*, int, int, float, int, float, int)
 t CalcZeroframeData(CStudioHdr const*, studiohdr_t const*, virtualgroup_t const*, mstudiobone_t const*, mstudioanimdesc_t&, float, Vector*, Quaternion*, int, float)
 t CallbackHighlight(CBaseEntity*)
 t CallbackReport(CBaseEntity*)
 t ChoreEventStartTimeLessFunc(CChoreoEvent* const&, CChoreoEvent* const&)
 t ClipRayToHitbox(Ray_t const&, mstudiobbox_t*, matrix3x4_t&, CGameTrace&)
 t CompareSpawnOrder(HierarchicalSpawn_t*, HierarchicalSpawn_t*)
 t ComputePushStartMatrix(matrix3x4_t&, CBaseEntity*, pushblock_t const&)
 t ComputeSeparatingPlane(matrix3x4_t const&, matrix3x4_t const&, Vector const&, Vector const&, float, cplane_t*)
 t ComputeSpawnHierarchyDepth_r(CBaseEntity*)
 t CreateAirboat(CBasePlayer*)
 t CreateJeep(CBasePlayer*)
 t Create_CAchievementHLXKillEliteSoldierWithOwnEnergyBall()
 t Create_CAchievementHLXKillSoldierWithOwnGrenade()
 t Create_CAchievementHLXKillWithHopper()
 t Create_CAchievementHLXKillWithManhack()
 t Create_CAchievementHLXKillWithOneEnergyBall()
 t Create_CAchievementHLXKillWithPhysicsObjects()
 t CreditsDone_f()
 t DebugConstraints(CBaseEntity*)
 t DescribeGroundList(CBaseEntity*)
 t FindPassableSpace(CBasePlayer*, Vector const&, float, Vector&)
 t GameEventLessFunc(CHLTVGameEvent const&, CHLTVGameEvent const&)
 t GetAllChildren_r(CBaseEntity*, CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >&)
 t GetFadeParms(CCommand const&, float&, color32_s&)
 t InvokeMethod(void (IGameSystem::*)(), char const*)
 t InvokeMethodReverseOrder(void (IGameSystem::*)())
 t InvokePerFrameMethod(void (IGameSystemPerFrame::*)(), char const*)
 t ListRecentNPCSpeech()
 t MD5Transform(unsigned int*, unsigned int const*)
 t MarkVPhysicsDebug(CBaseEntity*)
 t NearbyDismountLessFunc(NearbyDismount_t const&, NearbyDismount_t const&)
 t OutputVPhysicsDebugInfo(CBaseEntity*)
 t PhysFrame(float)
 t PhysicsCheckSweep(CBaseEntity*, Vector const&, Vector const&, CGameTrace*)
 t PostSimulation_ImpulseEvent(IPhysicsObject*, Vector const&, Vector const&)
 t PostUpdateQueryCache()
 t PreUpdateQueryCache()
 t ProcessNavigationQueries(CFunctor**, unsigned int)
 t SendProxy_Empty(SendProp const*, void const*, void const*, DVariant*, int, int)
 t SendProxy_PredictableIdToInt(SendProp const*, void const*, void const*, DVariant*, int, int)
 t SendProxy_SendPredictableId(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 t SendProxy_Solid(SendProp const*, void const*, void const*, DVariant*, int, int)
 t SendProxy_SolidFlags(SendProp const*, void const*, void const*, DVariant*, int, int)
 t SetMinMaxSize(CBaseEntity*, Vector const&, Vector const&)
 t UTIL_FindClientInPVSGuts(edict_t*, unsigned char*, unsigned int)
 t UTIL_GetCurrentCheckClient()
 t ValidateMOTDFilename(IConVar*, char const*, float)
 t VoiceServerDebug(char const*, ...)
 t WriteAchievementGlobalState(KeyValues*, bool)
 t _GLOBAL__sub_I_AI_Criteri.tmp.rel_multiplayer_osx_builder.50004.ii
 t _GLOBAL__sub_I_AI_Respons.tmp.rel_multiplayer_osx_builder.50160.ii
 t _GLOBAL__sub_I_BaseAnimat.tmp.rel_multiplayer_osx_builder.50262.ii
 t _GLOBAL__sub_I_CRagdollMa.tmp.rel_multiplayer_osx_builder.50400.ii
 t _GLOBAL__sub_I_Commentary.tmp.rel_multiplayer_osx_builder.50382.ii
 t _GLOBAL__sub_I_EffectsSer.tmp.rel_multiplayer_osx_builder.50430.ii
 t _GLOBAL__sub_I_EntityDiss.tmp.rel_multiplayer_osx_builder.50442.ii
 t _GLOBAL__sub_I_EntityFlam.tmp.rel_multiplayer_osx_builder.50448.ii
 t _GLOBAL__sub_I_EntityPart.tmp.rel_multiplayer_osx_builder.49337.ii
 t _GLOBAL__sub_I_EntityPart.tmp.rel_multiplayer_osx_builder.50460.ii
 t _GLOBAL__sub_I_EnvBeam.tmp.rel_multiplayer_osx_builder.50472.ii
 t _GLOBAL__sub_I_EnvFade.tmp.rel_multiplayer_osx_builder.50478.ii
 t _GLOBAL__sub_I_EnvHudHint.tmp.rel_multiplayer_osx_builder.50484.ii
 t _GLOBAL__sub_I_EnvLaser.tmp.rel_multiplayer_osx_builder.50490.ii
 t _GLOBAL__sub_I_EnvMessage.tmp.rel_multiplayer_osx_builder.50496.ii
 t _GLOBAL__sub_I_EnvShake.tmp.rel_multiplayer_osx_builder.50508.ii
 t _GLOBAL__sub_I_EnvSpark.tmp.rel_multiplayer_osx_builder.50514.ii
 t _GLOBAL__sub_I_Func_Monit.tmp.rel_multiplayer_osx_builder.50911.ii
 t _GLOBAL__sub_I_GameStats.tmp.rel_multiplayer_osx_builder.49385.ii
 t _GLOBAL__sub_I_MaterialMo.tmp.rel_multiplayer_osx_builder.51555.ii
 t _GLOBAL__sub_I_PointAngul.tmp.rel_multiplayer_osx_builder.51782.ii
 t _GLOBAL__sub_I_RagdollBoo.tmp.rel_multiplayer_osx_builder.51835.ii
 t _GLOBAL__sub_I_ServerNetw.tmp.rel_multiplayer_osx_builder.51896.ii
 t _GLOBAL__sub_I_SkyCamera.tmp.rel_multiplayer_osx_builder.51908.ii
 t _GLOBAL__sub_I_SoundEmitt.tmp.rel_multiplayer_osx_builder.49770.ii
 t _GLOBAL__sub_I_Sprite.tmp.rel_multiplayer_osx_builder.49780.ii
 t _GLOBAL__sub_I_SpriteTrai.tmp.rel_multiplayer_osx_builder.49788.ii
 t _GLOBAL__sub_I_TemplateEn.tmp.rel_multiplayer_osx_builder.52052.ii
 t _GLOBAL__sub_I_WaterLODCo.tmp.rel_multiplayer_osx_builder.52406.ii
 t _GLOBAL__sub_I_achievemen.tmp.rel_multiplayer_osx_builder.49180.ii
 t _GLOBAL__sub_I_achievemen.tmp.rel_multiplayer_osx_builder.49193.ii
 t _GLOBAL__sub_I_activityli.tmp.rel_multiplayer_osx_builder.49209.ii
 t _GLOBAL__sub_I_ai_allyman.tmp.rel_multiplayer_osx_builder.50797.ii
 t _GLOBAL__sub_I_ai_baseact.tmp.rel_multiplayer_osx_builder.49888.ii
 t _GLOBAL__sub_I_ai_basenpc.tmp.rel_multiplayer_osx_builder.49899.ii
 t _GLOBAL__sub_I_ai_basenpc.tmp.rel_multiplayer_osx_builder.49908.ii
 t _GLOBAL__sub_I_ai_basenpc.tmp.rel_multiplayer_osx_builder.49926.ii
 t _GLOBAL__sub_I_ai_basenpc.tmp.rel_multiplayer_osx_builder.49932.ii
 t _GLOBAL__sub_I_ai_behavio.tmp.rel_multiplayer_osx_builder.49944.ii
 t _GLOBAL__sub_I_ai_behavio.tmp.rel_multiplayer_osx_builder.49950.ii
 t _GLOBAL__sub_I_ai_behavio.tmp.rel_multiplayer_osx_builder.49955.ii
 t _GLOBAL__sub_I_ai_behavio.tmp.rel_multiplayer_osx_builder.49962.ii
 t _GLOBAL__sub_I_ai_behavio.tmp.rel_multiplayer_osx_builder.49966.ii
 t _GLOBAL__sub_I_ai_behavio.tmp.rel_multiplayer_osx_builder.49974.ii
 t _GLOBAL__sub_I_ai_behavio.tmp.rel_multiplayer_osx_builder.49980.ii
 t _GLOBAL__sub_I_ai_behavio.tmp.rel_multiplayer_osx_builder.50801.ii
 t _GLOBAL__sub_I_ai_behavio.tmp.rel_multiplayer_osx_builder.50802.ii
 t _GLOBAL__sub_I_ai_behavio.tmp.rel_multiplayer_osx_builder.50815.ii
 t _GLOBAL__sub_I_ai_behavio.tmp.rel_multiplayer_osx_builder.50821.ii
 t _GLOBAL__sub_I_ai_blended.tmp.rel_multiplayer_osx_builder.49986.ii
 t _GLOBAL__sub_I_ai_concomm.tmp.rel_multiplayer_osx_builder.49992.ii
 t _GLOBAL__sub_I_ai_default.tmp.rel_multiplayer_osx_builder.50010.ii
 t _GLOBAL__sub_I_ai_dynamic.tmp.rel_multiplayer_osx_builder.50015.ii
 t _GLOBAL__sub_I_ai_goal_po.tmp.rel_multiplayer_osx_builder.50825.ii
 t _GLOBAL__sub_I_ai_goalent.tmp.rel_multiplayer_osx_builder.50028.ii
 t _GLOBAL__sub_I_ai_hint.tmp.rel_multiplayer_osx_builder.50034.ii
 t _GLOBAL__sub_I_ai_hull.tmp.rel_multiplayer_osx_builder.50037.ii
 t _GLOBAL__sub_I_ai_inituti.tmp.rel_multiplayer_osx_builder.50046.ii
 t _GLOBAL__sub_I_ai_localna.tmp.rel_multiplayer_osx_builder.50064.ii
 t _GLOBAL__sub_I_ai_looktar.tmp.rel_multiplayer_osx_builder.50068.ii
 t _GLOBAL__sub_I_ai_memory.tmp.rel_multiplayer_osx_builder.50074.ii
 t _GLOBAL__sub_I_ai_motor.tmp.rel_multiplayer_osx_builder.50080.ii
 t _GLOBAL__sub_I_ai_movepro.tmp.rel_multiplayer_osx_builder.50088.ii
 t _GLOBAL__sub_I_ai_movesho.tmp.rel_multiplayer_osx_builder.50092.ii
 t _GLOBAL__sub_I_ai_navigat.tmp.rel_multiplayer_osx_builder.50112.ii
 t _GLOBAL__sub_I_ai_network.tmp.rel_multiplayer_osx_builder.50116.ii
 t _GLOBAL__sub_I_ai_network.tmp.rel_multiplayer_osx_builder.50122.ii
 t _GLOBAL__sub_I_ai_pathfin.tmp.rel_multiplayer_osx_builder.50136.ii
 t _GLOBAL__sub_I_ai_playera.tmp.rel_multiplayer_osx_builder.50148.ii
 t _GLOBAL__sub_I_ai_relatio.tmp.rel_multiplayer_osx_builder.50154.ii
 t _GLOBAL__sub_I_ai_route.tmp.rel_multiplayer_osx_builder.50163.ii
 t _GLOBAL__sub_I_ai_scriptc.tmp.rel_multiplayer_osx_builder.50184.ii
 t _GLOBAL__sub_I_ai_senses.tmp.rel_multiplayer_osx_builder.50190.ii
 t _GLOBAL__sub_I_ai_sentenc.tmp.rel_multiplayer_osx_builder.50194.ii
 t _GLOBAL__sub_I_ai_speech.tmp.rel_multiplayer_osx_builder.50202.ii
 t _GLOBAL__sub_I_ai_speechf.tmp.rel_multiplayer_osx_builder.50208.ii
 t _GLOBAL__sub_I_ai_spotlig.tmp.rel_multiplayer_osx_builder.50833.ii
 t _GLOBAL__sub_I_ai_squad.tmp.rel_multiplayer_osx_builder.50214.ii
 t _GLOBAL__sub_I_ai_squadsl.tmp.rel_multiplayer_osx_builder.50218.ii
 t _GLOBAL__sub_I_ai_tactica.tmp.rel_multiplayer_osx_builder.50226.ii
 t _GLOBAL__sub_I_ai_trackpa.tmp.rel_multiplayer_osx_builder.50235.ii
 t _GLOBAL__sub_I_ai_utils.tmp.rel_multiplayer_osx_builder.50244.ii
 t _GLOBAL__sub_I_ai_waypoin.tmp.rel_multiplayer_osx_builder.50250.ii
 t _GLOBAL__sub_I_antlion_du.tmp.rel_multiplayer_osx_builder.50839.ii
 t _GLOBAL__sub_I_antlion_ma.tmp.rel_multiplayer_osx_builder.50844.ii
 t _GLOBAL__sub_I_ar2_explos.tmp.rel_multiplayer_osx_builder.50851.ii
 t _GLOBAL__sub_I_base_playe.tmp.rel_multiplayer_osx_builder.49281.ii
 t _GLOBAL__sub_I_baseachiev.tmp.rel_multiplayer_osx_builder.49229.ii
 t _GLOBAL__sub_I_baseanimat.tmp.rel_multiplayer_osx_builder.50254.ii
 t _GLOBAL__sub_I_basebludge.tmp.rel_multiplayer_osx_builder.50266.ii
 t _GLOBAL__sub_I_basecombat.tmp.rel_multiplayer_osx_builder.49235.ii
 t _GLOBAL__sub_I_basecombat.tmp.rel_multiplayer_osx_builder.49239.ii
 t _GLOBAL__sub_I_basecombat.tmp.rel_multiplayer_osx_builder.50274.ii
 t _GLOBAL__sub_I_basecombat.tmp.rel_multiplayer_osx_builder.50280.ii
 t _GLOBAL__sub_I_baseentity.tmp.rel_multiplayer_osx_builder.49247.ii
 t _GLOBAL__sub_I_baseentity.tmp.rel_multiplayer_osx_builder.50286.ii
 t _GLOBAL__sub_I_baseflex.tmp.rel_multiplayer_osx_builder.50292.ii
 t _GLOBAL__sub_I_basegrenad.tmp.rel_multiplayer_osx_builder.49253.ii
 t _GLOBAL__sub_I_basegrenad.tmp.rel_multiplayer_osx_builder.50298.ii
 t _GLOBAL__sub_I_basegrenad.tmp.rel_multiplayer_osx_builder.50304.ii
 t _GLOBAL__sub_I_basegrenad.tmp.rel_multiplayer_osx_builder.50310.ii
 t _GLOBAL__sub_I_basehlcomb.tmp.rel_multiplayer_osx_builder.49413.ii
 t _GLOBAL__sub_I_basehlcomb.tmp.rel_multiplayer_osx_builder.50855.ii
 t _GLOBAL__sub_I_basemultip.tmp.rel_multiplayer_osx_builder.50316.ii
 t _GLOBAL__sub_I_basepartic.tmp.rel_multiplayer_osx_builder.49259.ii
 t _GLOBAL__sub_I_baseplayer.tmp.rel_multiplayer_osx_builder.49265.ii
 t _GLOBAL__sub_I_baseprojec.tmp.rel_multiplayer_osx_builder.49268.ii
 t _GLOBAL__sub_I_basetempen.tmp.rel_multiplayer_osx_builder.50322.ii
 t _GLOBAL__sub_I_baseviewmo.tmp.rel_multiplayer_osx_builder.49273.ii
 t _GLOBAL__sub_I_baseviewmo.tmp.rel_multiplayer_osx_builder.50328.ii
 t _GLOBAL__sub_I_beam_share.tmp.rel_multiplayer_osx_builder.49289.ii
 t _GLOBAL__sub_I_bitbuf.tmp.rel_multiplayer_osx_builder.27245.ii
 t _GLOBAL__sub_I_bmodels.tmp.rel_multiplayer_osx_builder.50346.ii
 t _GLOBAL__sub_I_bone_setup.tmp.rel_multiplayer_osx_builder.63619.ii
 t _GLOBAL__sub_I_buttons.tmp.rel_multiplayer_osx_builder.50351.ii
 t _GLOBAL__sub_I_cbase.tmp.rel_multiplayer_osx_builder.50358.ii
 t _GLOBAL__sub_I_cbasehelic.tmp.rel_multiplayer_osx_builder.50863.ii
 t _GLOBAL__sub_I_cbasesprit.tmp.rel_multiplayer_osx_builder.50869.ii
 t _GLOBAL__sub_I_choreoeven.tmp.rel_multiplayer_osx_builder.59965.ii
 t _GLOBAL__sub_I_citadel_ef.tmp.rel_multiplayer_osx_builder.50875.ii
 t _GLOBAL__sub_I_client.tmp.rel_multiplayer_osx_builder.50364.ii
 t _GLOBAL__sub_I_collisionp.tmp.rel_multiplayer_osx_builder.49295.ii
 t _GLOBAL__sub_I_colorcorre.tmp.rel_multiplayer_osx_builder.50370.ii
 t _GLOBAL__sub_I_colorcorre.tmp.rel_multiplayer_osx_builder.50376.ii
 t _GLOBAL__sub_I_combine_mi.tmp.rel_multiplayer_osx_builder.50879.ii
 t _GLOBAL__sub_I_controlent.tmp.rel_multiplayer_osx_builder.50388.ii
 t _GLOBAL__sub_I_convar.tmp.rel_multiplayer_osx_builder.87907.ii
 t _GLOBAL__sub_I_decals.tmp.rel_multiplayer_osx_builder.49313.ii
 t _GLOBAL__sub_I_dmxattribu.tmp.rel_multiplayer_osx_builder.27887.ii
 t _GLOBAL__sub_I_dmxelement.tmp.rel_multiplayer_osx_builder.27888.ii
 t _GLOBAL__sub_I_dmxloader.tmp.rel_multiplayer_osx_builder.59863.ii
 t _GLOBAL__sub_I_dmxloadert.tmp.rel_multiplayer_osx_builder.27890.ii
 t _GLOBAL__sub_I_doors.tmp.rel_multiplayer_osx_builder.50410.ii
 t _GLOBAL__sub_I_dynamiclig.tmp.rel_multiplayer_osx_builder.50418.ii
 t _GLOBAL__sub_I_effect_dis.tmp.rel_multiplayer_osx_builder.49317.ii
 t _GLOBAL__sub_I_effects.tmp.rel_multiplayer_osx_builder.50422.ii
 t _GLOBAL__sub_I_entity_too.tmp.rel_multiplayer_osx_builder.50466.ii
 t _GLOBAL__sub_I_entitybloc.tmp.rel_multiplayer_osx_builder.50436.ii
 t _GLOBAL__sub_I_entitylist.tmp.rel_multiplayer_osx_builder.50454.ii
 t _GLOBAL__sub_I_env_alyxem.tmp.rel_multiplayer_osx_builder.50887.ii
 t _GLOBAL__sub_I_env_debugh.tmp.rel_multiplayer_osx_builder.50520.ii
 t _GLOBAL__sub_I_env_detail.tmp.rel_multiplayer_osx_builder.49340.ii
 t _GLOBAL__sub_I_env_effect.tmp.rel_multiplayer_osx_builder.50526.ii
 t _GLOBAL__sub_I_env_entity.tmp.rel_multiplayer_osx_builder.50531.ii
 t _GLOBAL__sub_I_env_headcr.tmp.rel_multiplayer_osx_builder.49420.ii
 t _GLOBAL__sub_I_env_headcr.tmp.rel_multiplayer_osx_builder.50890.ii
 t _GLOBAL__sub_I_env_partic.tmp.rel_multiplayer_osx_builder.50538.ii
 t _GLOBAL__sub_I_env_player.tmp.rel_multiplayer_osx_builder.50544.ii
 t _GLOBAL__sub_I_env_projec.tmp.rel_multiplayer_osx_builder.50550.ii
 t _GLOBAL__sub_I_env_screen.tmp.rel_multiplayer_osx_builder.50554.ii
 t _GLOBAL__sub_I_env_speake.tmp.rel_multiplayer_osx_builder.50899.ii
 t _GLOBAL__sub_I_env_starfi.tmp.rel_multiplayer_osx_builder.50905.ii
 t _GLOBAL__sub_I_env_textur.tmp.rel_multiplayer_osx_builder.50562.ii
 t _GLOBAL__sub_I_env_tonema.tmp.rel_multiplayer_osx_builder.50566.ii
 t _GLOBAL__sub_I_env_zoom.tmp.rel_multiplayer_osx_builder.50575.ii
 t _GLOBAL__sub_I_envmicroph.tmp.rel_multiplayer_osx_builder.50502.ii
 t _GLOBAL__sub_I_event_temp.tmp.rel_multiplayer_osx_builder.50586.ii
 t _GLOBAL__sub_I_eventlist.tmp.rel_multiplayer_osx_builder.49355.ii
 t _GLOBAL__sub_I_explode.tmp.rel_multiplayer_osx_builder.50592.ii
 t _GLOBAL__sub_I_filters.tmp.rel_multiplayer_osx_builder.50599.ii
 t _GLOBAL__sub_I_fire.tmp.rel_multiplayer_osx_builder.50603.ii
 t _GLOBAL__sub_I_fire_smoke.tmp.rel_multiplayer_osx_builder.50611.ii
 t _GLOBAL__sub_I_fish.tmp.rel_multiplayer_osx_builder.50617.ii
 t _GLOBAL__sub_I_fogcontrol.tmp.rel_multiplayer_osx_builder.50623.ii
 t _GLOBAL__sub_I_fourwheelv.tmp.rel_multiplayer_osx_builder.50627.ii
 t _GLOBAL__sub_I_func_areap.tmp.rel_multiplayer_osx_builder.50632.ii
 t _GLOBAL__sub_I_func_areap.tmp.rel_multiplayer_osx_builder.50641.ii
 t _GLOBAL__sub_I_func_areap.tmp.rel_multiplayer_osx_builder.50647.ii
 t _GLOBAL__sub_I_func_break.tmp.rel_multiplayer_osx_builder.50650.ii
 t _GLOBAL__sub_I_func_break.tmp.rel_multiplayer_osx_builder.50659.ii
 t _GLOBAL__sub_I_func_dust.tmp.rel_multiplayer_osx_builder.50665.ii
 t _GLOBAL__sub_I_func_ladde.tmp.rel_multiplayer_osx_builder.49361.ii
 t _GLOBAL__sub_I_func_ladde.tmp.rel_multiplayer_osx_builder.50671.ii
 t _GLOBAL__sub_I_func_lod.tmp.rel_multiplayer_osx_builder.50677.ii
 t _GLOBAL__sub_I_func_movel.tmp.rel_multiplayer_osx_builder.50683.ii
 t _GLOBAL__sub_I_func_occlu.tmp.rel_multiplayer_osx_builder.50687.ii
 t _GLOBAL__sub_I_func_recha.tmp.rel_multiplayer_osx_builder.50917.ii
 t _GLOBAL__sub_I_func_refle.tmp.rel_multiplayer_osx_builder.50695.ii
 t _GLOBAL__sub_I_func_smoke.tmp.rel_multiplayer_osx_builder.50701.ii
 t _GLOBAL__sub_I_func_tank.tmp.rel_multiplayer_osx_builder.50923.ii
 t _GLOBAL__sub_I_game.tmp.rel_multiplayer_osx_builder.50707.ii
 t _GLOBAL__sub_I_game_ui.tmp.rel_multiplayer_osx_builder.50743.ii
 t _GLOBAL__sub_I_gameinterf.tmp.rel_multiplayer_osx_builder.50717.ii
 t _GLOBAL__sub_I_gamemoveme.tmp.rel_multiplayer_osx_builder.49365.ii
 t _GLOBAL__sub_I_gamerules.tmp.rel_multiplayer_osx_builder.49373.ii
 t _GLOBAL__sub_I_gamestring.tmp.rel_multiplayer_osx_builder.49391.ii
 t _GLOBAL__sub_I_gamevars_s.tmp.rel_multiplayer_osx_builder.49397.ii
 t _GLOBAL__sub_I_gameweapon.tmp.rel_multiplayer_osx_builder.50735.ii
 t _GLOBAL__sub_I_genericact.tmp.rel_multiplayer_osx_builder.50747.ii
 t _GLOBAL__sub_I_genericmon.tmp.rel_multiplayer_osx_builder.50755.ii
 t _GLOBAL__sub_I_gib.tmp.rel_multiplayer_osx_builder.50759.ii
 t _GLOBAL__sub_I_globalstat.tmp.rel_multiplayer_osx_builder.50773.ii
 t _GLOBAL__sub_I_grenade_ar.tmp.rel_multiplayer_osx_builder.50927.ii
 t _GLOBAL__sub_I_grenade_be.tmp.rel_multiplayer_osx_builder.50935.ii
 t _GLOBAL__sub_I_grenade_bu.tmp.rel_multiplayer_osx_builder.50941.ii
 t _GLOBAL__sub_I_grenade_fr.tmp.rel_multiplayer_osx_builder.50947.ii
 t _GLOBAL__sub_I_grenade_ho.tmp.rel_multiplayer_osx_builder.50952.ii
 t _GLOBAL__sub_I_grenade_pa.tmp.rel_multiplayer_osx_builder.50959.ii
 t _GLOBAL__sub_I_grenade_sa.tmp.rel_multiplayer_osx_builder.51416.ii
 t _GLOBAL__sub_I_grenade_tr.tmp.rel_multiplayer_osx_builder.51420.ii
 t _GLOBAL__sub_I_guntarget.tmp.rel_multiplayer_osx_builder.50780.ii
 t _GLOBAL__sub_I_h_cycler.tmp.rel_multiplayer_osx_builder.51476.ii
 t _GLOBAL__sub_I_hintsystem.tmp.rel_multiplayer_osx_builder.49409.ii
 t _GLOBAL__sub_I_hl2_ai_net.tmp.rel_multiplayer_osx_builder.50965.ii
 t _GLOBAL__sub_I_hl2_eventl.tmp.rel_multiplayer_osx_builder.50969.ii
 t _GLOBAL__sub_I_hl2_gameru.tmp.rel_multiplayer_osx_builder.49427.ii
 t _GLOBAL__sub_I_hl2_player.tmp.rel_multiplayer_osx_builder.50977.ii
 t _GLOBAL__sub_I_hl2_player.tmp.rel_multiplayer_osx_builder.50983.ii
 t _GLOBAL__sub_I_hl2_trigge.tmp.rel_multiplayer_osx_builder.50988.ii
 t _GLOBAL__sub_I_hl2mp_clie.tmp.rel_multiplayer_osx_builder.51434.ii
 t _GLOBAL__sub_I_hl2mp_cvar.tmp.rel_multiplayer_osx_builder.51440.ii
 t _GLOBAL__sub_I_hl2mp_game.tmp.rel_multiplayer_osx_builder.49451.ii
 t _GLOBAL__sub_I_hl2mp_game.tmp.rel_multiplayer_osx_builder.51446.ii
 t _GLOBAL__sub_I_hl2mp_play.tmp.rel_multiplayer_osx_builder.49457.ii
 t _GLOBAL__sub_I_hl2mp_play.tmp.rel_multiplayer_osx_builder.51450.ii
 t _GLOBAL__sub_I_hl_gamemov.tmp.rel_multiplayer_osx_builder.49439.ii
 t _GLOBAL__sub_I_hl_playerm.tmp.rel_multiplayer_osx_builder.50993.ii
 t _GLOBAL__sub_I_hltvdirect.tmp.rel_multiplayer_osx_builder.51461.ii
 t _GLOBAL__sub_I_igamesyste.tmp.rel_multiplayer_osx_builder.49563.ii
 t _GLOBAL__sub_I_info_camer.tmp.rel_multiplayer_osx_builder.51482.ii
 t _GLOBAL__sub_I_info_overl.tmp.rel_multiplayer_osx_builder.51486.ii
 t _GLOBAL__sub_I_info_telep.tmp.rel_multiplayer_osx_builder.51001.ii
 t _GLOBAL__sub_I_intermissi.tmp.rel_multiplayer_osx_builder.51493.ii
 t _GLOBAL__sub_I_item_ammo.tmp.rel_multiplayer_osx_builder.51007.ii
 t _GLOBAL__sub_I_item_batte.tmp.rel_multiplayer_osx_builder.51013.ii
 t _GLOBAL__sub_I_item_dynam.tmp.rel_multiplayer_osx_builder.51018.ii
 t _GLOBAL__sub_I_item_healt.tmp.rel_multiplayer_osx_builder.51025.ii
 t _GLOBAL__sub_I_item_itemc.tmp.rel_multiplayer_osx_builder.51031.ii
 t _GLOBAL__sub_I_item_suit.tmp.rel_multiplayer_osx_builder.51034.ii
 t _GLOBAL__sub_I_item_world.tmp.rel_multiplayer_osx_builder.51500.ii
 t _GLOBAL__sub_I_keyframe.tmp.rel_multiplayer_osx_builder.63627.ii
 t _GLOBAL__sub_I_lightglow.tmp.rel_multiplayer_osx_builder.51503.ii
 t _GLOBAL__sub_I_lights.tmp.rel_multiplayer_osx_builder.51508.ii
 t _GLOBAL__sub_I_logic_meas.tmp.rel_multiplayer_osx_builder.51532.ii
 t _GLOBAL__sub_I_logic_navi.tmp.rel_multiplayer_osx_builder.51540.ii
 t _GLOBAL__sub_I_logicauto.tmp.rel_multiplayer_osx_builder.51517.ii
 t _GLOBAL__sub_I_logicentit.tmp.rel_multiplayer_osx_builder.51524.ii
 t _GLOBAL__sub_I_logicrelay.tmp.rel_multiplayer_osx_builder.51528.ii
 t _GLOBAL__sub_I_look_door.tmp.rel_multiplayer_osx_builder.51043.ii
 t _GLOBAL__sub_I_maprules.tmp.rel_multiplayer_osx_builder.51552.ii
 t _GLOBAL__sub_I_message_en.tmp.rel_multiplayer_osx_builder.51566.ii
 t _GLOBAL__sub_I_modelentit.tmp.rel_multiplayer_osx_builder.51572.ii
 t _GLOBAL__sub_I_monster_du.tmp.rel_multiplayer_osx_builder.51049.ii
 t _GLOBAL__sub_I_monstermak.tmp.rel_multiplayer_osx_builder.51576.ii
 t _GLOBAL__sub_I_movement.tmp.rel_multiplayer_osx_builder.51590.ii
 t _GLOBAL__sub_I_movevars_s.tmp.rel_multiplayer_osx_builder.49583.ii
 t _GLOBAL__sub_I_movie_expl.tmp.rel_multiplayer_osx_builder.51596.ii
 t _GLOBAL__sub_I_multiplay_.tmp.rel_multiplayer_osx_builder.49606.ii
 t _GLOBAL__sub_I_ndebugover.tmp.rel_multiplayer_osx_builder.51600.ii
 t _GLOBAL__sub_I_npc_BaseZo.tmp.rel_multiplayer_osx_builder.51103.ii
 t _GLOBAL__sub_I_npc_Poison.tmp.rel_multiplayer_osx_builder.51260.ii
 t _GLOBAL__sub_I_npc_alyx.tmp.rel_multiplayer_osx_builder.51055.ii
 t _GLOBAL__sub_I_npc_antlio.tmp.rel_multiplayer_osx_builder.51059.ii
 t _GLOBAL__sub_I_npc_antlio.tmp.rel_multiplayer_osx_builder.51067.ii
 t _GLOBAL__sub_I_npc_apcdri.tmp.rel_multiplayer_osx_builder.51073.ii
 t _GLOBAL__sub_I_npc_attack.tmp.rel_multiplayer_osx_builder.51079.ii
 t _GLOBAL__sub_I_npc_barnac.tmp.rel_multiplayer_osx_builder.51085.ii
 t _GLOBAL__sub_I_npc_barney.tmp.rel_multiplayer_osx_builder.51091.ii
 t _GLOBAL__sub_I_npc_basesc.tmp.rel_multiplayer_osx_builder.51094.ii
 t _GLOBAL__sub_I_npc_breen.tmp.rel_multiplayer_osx_builder.51109.ii
 t _GLOBAL__sub_I_npc_bullse.tmp.rel_multiplayer_osx_builder.51113.ii
 t _GLOBAL__sub_I_npc_citize.tmp.rel_multiplayer_osx_builder.51115.ii
 t _GLOBAL__sub_I_npc_combin.tmp.rel_multiplayer_osx_builder.51127.ii
 t _GLOBAL__sub_I_npc_combin.tmp.rel_multiplayer_osx_builder.51131.ii
 t _GLOBAL__sub_I_npc_combin.tmp.rel_multiplayer_osx_builder.51139.ii
 t _GLOBAL__sub_I_npc_combin.tmp.rel_multiplayer_osx_builder.51145.ii
 t _GLOBAL__sub_I_npc_combin.tmp.rel_multiplayer_osx_builder.51149.ii
 t _GLOBAL__sub_I_npc_craned.tmp.rel_multiplayer_osx_builder.51157.ii
 t _GLOBAL__sub_I_npc_crow.tmp.rel_multiplayer_osx_builder.51163.ii
 t _GLOBAL__sub_I_npc_dog.tmp.rel_multiplayer_osx_builder.51169.ii
 t _GLOBAL__sub_I_npc_eli.tmp.rel_multiplayer_osx_builder.51175.ii
 t _GLOBAL__sub_I_npc_enemyf.tmp.rel_multiplayer_osx_builder.51179.ii
 t _GLOBAL__sub_I_npc_fisher.tmp.rel_multiplayer_osx_builder.51187.ii
 t _GLOBAL__sub_I_npc_gman.tmp.rel_multiplayer_osx_builder.51193.ii
 t _GLOBAL__sub_I_npc_headcr.tmp.rel_multiplayer_osx_builder.51197.ii
 t _GLOBAL__sub_I_npc_ichthy.tmp.rel_multiplayer_osx_builder.51205.ii
 t _GLOBAL__sub_I_npc_kleine.tmp.rel_multiplayer_osx_builder.51211.ii
 t _GLOBAL__sub_I_npc_launch.tmp.rel_multiplayer_osx_builder.51218.ii
 t _GLOBAL__sub_I_npc_manhac.tmp.rel_multiplayer_osx_builder.51222.ii
 t _GLOBAL__sub_I_npc_metrop.tmp.rel_multiplayer_osx_builder.51230.ii
 t _GLOBAL__sub_I_npc_missil.tmp.rel_multiplayer_osx_builder.51233.ii
 t _GLOBAL__sub_I_npc_monk.tmp.rel_multiplayer_osx_builder.51242.ii
 t _GLOBAL__sub_I_npc_mossma.tmp.rel_multiplayer_osx_builder.51248.ii
 t _GLOBAL__sub_I_npc_player.tmp.rel_multiplayer_osx_builder.51254.ii
 t _GLOBAL__sub_I_npc_roller.tmp.rel_multiplayer_osx_builder.51266.ii
 t _GLOBAL__sub_I_npc_scanne.tmp.rel_multiplayer_osx_builder.51270.ii
 t _GLOBAL__sub_I_npc_stalke.tmp.rel_multiplayer_osx_builder.51278.ii
 t _GLOBAL__sub_I_npc_stride.tmp.rel_multiplayer_osx_builder.51284.ii
 t _GLOBAL__sub_I_npc_talker.tmp.rel_multiplayer_osx_builder.51608.ii
 t _GLOBAL__sub_I_npc_turret.tmp.rel_multiplayer_osx_builder.51290.ii
 t _GLOBAL__sub_I_npc_turret.tmp.rel_multiplayer_osx_builder.51296.ii
 t _GLOBAL__sub_I_npc_turret.tmp.rel_multiplayer_osx_builder.51302.ii
 t _GLOBAL__sub_I_npc_vehicl.tmp.rel_multiplayer_osx_builder.51612.ii
 t _GLOBAL__sub_I_npc_vortig.tmp.rel_multiplayer_osx_builder.51308.ii
 t _GLOBAL__sub_I_npc_zombie.tmp.rel_multiplayer_osx_builder.51314.ii
 t _GLOBAL__sub_I_obstacle_p.tmp.rel_multiplayer_osx_builder.49617.ii
 t _GLOBAL__sub_I_particle_f.tmp.rel_multiplayer_osx_builder.51620.ii
 t _GLOBAL__sub_I_particle_l.tmp.rel_multiplayer_osx_builder.51626.ii
 t _GLOBAL__sub_I_particle_p.tmp.rel_multiplayer_osx_builder.49629.ii
 t _GLOBAL__sub_I_particle_s.tmp.rel_multiplayer_osx_builder.51632.ii
 t _GLOBAL__sub_I_particle_s.tmp.rel_multiplayer_osx_builder.51636.ii
 t _GLOBAL__sub_I_particles.tmp.rel_multiplayer_osx_builder.2659.ii
 t _GLOBAL__sub_I_particlesy.tmp.rel_multiplayer_osx_builder.49621.ii
 t _GLOBAL__sub_I_pathcorner.tmp.rel_multiplayer_osx_builder.51642.ii
 t _GLOBAL__sub_I_pathtrack.tmp.rel_multiplayer_osx_builder.51650.ii
 t _GLOBAL__sub_I_phys_contr.tmp.rel_multiplayer_osx_builder.51716.ii
 t _GLOBAL__sub_I_physconstr.tmp.rel_multiplayer_osx_builder.51656.ii
 t _GLOBAL__sub_I_physics.tmp.rel_multiplayer_osx_builder.51662.ii
 t _GLOBAL__sub_I_physics_bo.tmp.rel_multiplayer_osx_builder.51666.ii
 t _GLOBAL__sub_I_physics_ca.tmp.rel_multiplayer_osx_builder.51672.ii
 t _GLOBAL__sub_I_physics_ma.tmp.rel_multiplayer_osx_builder.49646.ii
 t _GLOBAL__sub_I_physics_ma.tmp.rel_multiplayer_osx_builder.51692.ii
 t _GLOBAL__sub_I_physics_np.tmp.rel_multiplayer_osx_builder.51698.ii
 t _GLOBAL__sub_I_physics_pr.tmp.rel_multiplayer_osx_builder.51702.ii
 t _GLOBAL__sub_I_physics_sa.tmp.rel_multiplayer_osx_builder.49652.ii
 t _GLOBAL__sub_I_physobj.tmp.rel_multiplayer_osx_builder.51707.ii
 t _GLOBAL__sub_I_plasma.tmp.rel_multiplayer_osx_builder.51720.ii
 t _GLOBAL__sub_I_player.tmp.rel_multiplayer_osx_builder.51728.ii
 t _GLOBAL__sub_I_player_com.tmp.rel_multiplayer_osx_builder.51744.ii
 t _GLOBAL__sub_I_player_lag.tmp.rel_multiplayer_osx_builder.51752.ii
 t _GLOBAL__sub_I_player_res.tmp.rel_multiplayer_osx_builder.51762.ii
 t _GLOBAL__sub_I_playerinfo.tmp.rel_multiplayer_osx_builder.51732.ii
 t _GLOBAL__sub_I_playerloca.tmp.rel_multiplayer_osx_builder.51740.ii
 t _GLOBAL__sub_I_plugin_che.tmp.rel_multiplayer_osx_builder.51770.ii
 t _GLOBAL__sub_I_point_apc_.tmp.rel_multiplayer_osx_builder.51320.ii
 t _GLOBAL__sub_I_point_bonu.tmp.rel_multiplayer_osx_builder.49668.ii
 t _GLOBAL__sub_I_point_came.tmp.rel_multiplayer_osx_builder.51800.ii
 t _GLOBAL__sub_I_point_devs.tmp.rel_multiplayer_osx_builder.51806.ii
 t _GLOBAL__sub_I_point_play.tmp.rel_multiplayer_osx_builder.51812.ii
 t _GLOBAL__sub_I_point_pose.tmp.rel_multiplayer_osx_builder.49680.ii
 t _GLOBAL__sub_I_point_spot.tmp.rel_multiplayer_osx_builder.51818.ii
 t _GLOBAL__sub_I_point_temp.tmp.rel_multiplayer_osx_builder.51824.ii
 t _GLOBAL__sub_I_pointangle.tmp.rel_multiplayer_osx_builder.51774.ii
 t _GLOBAL__sub_I_pointhurt.tmp.rel_multiplayer_osx_builder.51788.ii
 t _GLOBAL__sub_I_pointtelep.tmp.rel_multiplayer_osx_builder.51794.ii
 t _GLOBAL__sub_I_predicted_.tmp.rel_multiplayer_osx_builder.49698.ii
 t _GLOBAL__sub_I_prop_combi.tmp.rel_multiplayer_osx_builder.51326.ii
 t _GLOBAL__sub_I_prop_thump.tmp.rel_multiplayer_osx_builder.51332.ii
 t _GLOBAL__sub_I_props.tmp.rel_multiplayer_osx_builder.51830.ii
 t _GLOBAL__sub_I_props_shar.tmp.rel_multiplayer_osx_builder.49704.ii
 t _GLOBAL__sub_I_proto_snip.tmp.rel_multiplayer_osx_builder.51338.ii
 t _GLOBAL__sub_I_querycache.tmp.rel_multiplayer_osx_builder.49708.ii
 t _GLOBAL__sub_I_ragdoll_ma.tmp.rel_multiplayer_osx_builder.51842.ii
 t _GLOBAL__sub_I_ragdoll_sh.tmp.rel_multiplayer_osx_builder.49714.ii
 t _GLOBAL__sub_I_recipientf.tmp.rel_multiplayer_osx_builder.51848.ii
 t _GLOBAL__sub_I_rope.tmp.rel_multiplayer_osx_builder.51854.ii
 t _GLOBAL__sub_I_rotorwash.tmp.rel_multiplayer_osx_builder.51344.ii
 t _GLOBAL__sub_I_saverestor.tmp.rel_multiplayer_osx_builder.49728.ii
 t _GLOBAL__sub_I_sceneentit.tmp.rel_multiplayer_osx_builder.49737.ii
 t _GLOBAL__sub_I_sceneentit.tmp.rel_multiplayer_osx_builder.51864.ii
 t _GLOBAL__sub_I_script_int.tmp.rel_multiplayer_osx_builder.51350.ii
 t _GLOBAL__sub_I_scripted.tmp.rel_multiplayer_osx_builder.51878.ii
 t _GLOBAL__sub_I_scriptedta.tmp.rel_multiplayer_osx_builder.51884.ii
 t _GLOBAL__sub_I_sendproxy.tmp.rel_multiplayer_osx_builder.51888.ii
 t _GLOBAL__sub_I_serverbenc.tmp.rel_multiplayer_osx_builder.49178.ii
 t _GLOBAL__sub_I_shadowcont.tmp.rel_multiplayer_osx_builder.51900.ii
 t _GLOBAL__sub_I_simtimer.tmp.rel_multiplayer_osx_builder.49756.ii
 t _GLOBAL__sub_I_slideshow_.tmp.rel_multiplayer_osx_builder.51912.ii
 t _GLOBAL__sub_I_smoke_trai.tmp.rel_multiplayer_osx_builder.51926.ii
 t _GLOBAL__sub_I_smokestack.tmp.rel_multiplayer_osx_builder.51920.ii
 t _GLOBAL__sub_I_sound.tmp.rel_multiplayer_osx_builder.51932.ii
 t _GLOBAL__sub_I_soundent.tmp.rel_multiplayer_osx_builder.51938.ii
 t _GLOBAL__sub_I_soundenvel.tmp.rel_multiplayer_osx_builder.49774.ii
 t _GLOBAL__sub_I_soundscape.tmp.rel_multiplayer_osx_builder.51944.ii
 t _GLOBAL__sub_I_soundscape.tmp.rel_multiplayer_osx_builder.51950.ii
 t _GLOBAL__sub_I_spotlighte.tmp.rel_multiplayer_osx_builder.51956.ii
 t _GLOBAL__sub_I_sprite_per.tmp.rel_multiplayer_osx_builder.51962.ii
 t _GLOBAL__sub_I_sse.tmp.rel_multiplayer_osx_builder.27799.ii
 t _GLOBAL__sub_I_steamjet.tmp.rel_multiplayer_osx_builder.51974.ii
 t _GLOBAL__sub_I_studio.tmp.rel_multiplayer_osx_builder.63646.ii
 t _GLOBAL__sub_I_subs.tmp.rel_multiplayer_osx_builder.51978.ii
 t _GLOBAL__sub_I_sun.tmp.rel_multiplayer_osx_builder.51986.ii
 t _GLOBAL__sub_I_tactical_m.tmp.rel_multiplayer_osx_builder.51990.ii
 t _GLOBAL__sub_I_takedamage.tmp.rel_multiplayer_osx_builder.49800.ii
 t _GLOBAL__sub_I_tanktrain.tmp.rel_multiplayer_osx_builder.51998.ii
 t _GLOBAL__sub_I_te.tmp.rel_multiplayer_osx_builder.52002.ii
 t _GLOBAL__sub_I_te_armorri.tmp.rel_multiplayer_osx_builder.52100.ii
 t _GLOBAL__sub_I_te_basebea.tmp.rel_multiplayer_osx_builder.52106.ii
 t _GLOBAL__sub_I_te_beament.tmp.rel_multiplayer_osx_builder.52110.ii
 t _GLOBAL__sub_I_te_beament.tmp.rel_multiplayer_osx_builder.52114.ii
 t _GLOBAL__sub_I_te_beamfol.tmp.rel_multiplayer_osx_builder.52124.ii
 t _GLOBAL__sub_I_te_beamlas.tmp.rel_multiplayer_osx_builder.52128.ii
 t _GLOBAL__sub_I_te_beampoi.tmp.rel_multiplayer_osx_builder.52136.ii
 t _GLOBAL__sub_I_te_beamrin.tmp.rel_multiplayer_osx_builder.52140.ii
 t _GLOBAL__sub_I_te_beamrin.tmp.rel_multiplayer_osx_builder.52148.ii
 t _GLOBAL__sub_I_te_beamspl.tmp.rel_multiplayer_osx_builder.52154.ii
 t _GLOBAL__sub_I_te_bloodsp.tmp.rel_multiplayer_osx_builder.52160.ii
 t _GLOBAL__sub_I_te_bloodst.tmp.rel_multiplayer_osx_builder.52163.ii
 t _GLOBAL__sub_I_te_breakmo.tmp.rel_multiplayer_osx_builder.52172.ii
 t _GLOBAL__sub_I_te_bspdeca.tmp.rel_multiplayer_osx_builder.52178.ii
 t _GLOBAL__sub_I_te_bubbles.tmp.rel_multiplayer_osx_builder.52184.ii
 t _GLOBAL__sub_I_te_bubblet.tmp.rel_multiplayer_osx_builder.52187.ii
 t _GLOBAL__sub_I_te_clientp.tmp.rel_multiplayer_osx_builder.52196.ii
 t _GLOBAL__sub_I_te_decal.tmp.rel_multiplayer_osx_builder.52202.ii
 t _GLOBAL__sub_I_te_dynamic.tmp.rel_multiplayer_osx_builder.52208.ii
 t _GLOBAL__sub_I_te_effect_.tmp.rel_multiplayer_osx_builder.52211.ii
 t _GLOBAL__sub_I_te_energys.tmp.rel_multiplayer_osx_builder.52220.ii
 t _GLOBAL__sub_I_te_explosi.tmp.rel_multiplayer_osx_builder.52226.ii
 t _GLOBAL__sub_I_te_fizz.tmp.rel_multiplayer_osx_builder.52232.ii
 t _GLOBAL__sub_I_te_footpri.tmp.rel_multiplayer_osx_builder.52235.ii
 t _GLOBAL__sub_I_te_gaussex.tmp.rel_multiplayer_osx_builder.51354.ii
 t _GLOBAL__sub_I_te_glasssh.tmp.rel_multiplayer_osx_builder.52244.ii
 t _GLOBAL__sub_I_te_glowspr.tmp.rel_multiplayer_osx_builder.52250.ii
 t _GLOBAL__sub_I_te_hl2mp_s.tmp.rel_multiplayer_osx_builder.51458.ii
 t _GLOBAL__sub_I_te_impact.tmp.rel_multiplayer_osx_builder.52256.ii
 t _GLOBAL__sub_I_te_killpla.tmp.rel_multiplayer_osx_builder.52262.ii
 t _GLOBAL__sub_I_te_largefu.tmp.rel_multiplayer_osx_builder.52268.ii
 t _GLOBAL__sub_I_te_muzzlef.tmp.rel_multiplayer_osx_builder.52272.ii
 t _GLOBAL__sub_I_te_particl.tmp.rel_multiplayer_osx_builder.52278.ii
 t _GLOBAL__sub_I_te_physics.tmp.rel_multiplayer_osx_builder.52286.ii
 t _GLOBAL__sub_I_te_playerd.tmp.rel_multiplayer_osx_builder.52293.ii
 t _GLOBAL__sub_I_te_project.tmp.rel_multiplayer_osx_builder.52292.ii
 t _GLOBAL__sub_I_te_showlin.tmp.rel_multiplayer_osx_builder.52300.ii
 t _GLOBAL__sub_I_te_smoke.tmp.rel_multiplayer_osx_builder.52310.ii
 t _GLOBAL__sub_I_te_sparks.tmp.rel_multiplayer_osx_builder.52316.ii
 t _GLOBAL__sub_I_te_sprite.tmp.rel_multiplayer_osx_builder.52319.ii
 t _GLOBAL__sub_I_te_sprites.tmp.rel_multiplayer_osx_builder.52323.ii
 t _GLOBAL__sub_I_te_worldde.tmp.rel_multiplayer_osx_builder.52334.ii
 t _GLOBAL__sub_I_team.tmp.rel_multiplayer_osx_builder.52010.ii
 t _GLOBAL__sub_I_team_contr.tmp.rel_multiplayer_osx_builder.52014.ii
 t _GLOBAL__sub_I_team_contr.tmp.rel_multiplayer_osx_builder.52022.ii
 t _GLOBAL__sub_I_team_contr.tmp.rel_multiplayer_osx_builder.52023.ii
 t _GLOBAL__sub_I_team_objec.tmp.rel_multiplayer_osx_builder.52034.ii
 t _GLOBAL__sub_I_team_spawn.tmp.rel_multiplayer_osx_builder.52040.ii
 t _GLOBAL__sub_I_team_train.tmp.rel_multiplayer_osx_builder.52046.ii
 t _GLOBAL__sub_I_teamplay_g.tmp.rel_multiplayer_osx_builder.49810.ii
 t _GLOBAL__sub_I_teamplay_r.tmp.rel_multiplayer_osx_builder.49818.ii
 t _GLOBAL__sub_I_teamplayro.tmp.rel_multiplayer_osx_builder.49804.ii
 t _GLOBAL__sub_I_tesla.tmp.rel_multiplayer_osx_builder.52064.ii
 t _GLOBAL__sub_I_test_ehand.tmp.rel_multiplayer_osx_builder.49824.ii
 t _GLOBAL__sub_I_test_proxy.tmp.rel_multiplayer_osx_builder.52082.ii
 t _GLOBAL__sub_I_test_stres.tmp.rel_multiplayer_osx_builder.52086.ii
 t _GLOBAL__sub_I_testfuncti.tmp.rel_multiplayer_osx_builder.52070.ii
 t _GLOBAL__sub_I_testtracel.tmp.rel_multiplayer_osx_builder.52076.ii
 t _GLOBAL__sub_I_toolframew.tmp.rel_multiplayer_osx_builder.52343.ii
 t _GLOBAL__sub_I_trains.tmp.rel_multiplayer_osx_builder.52346.ii
 t _GLOBAL__sub_I_trigger_ar.tmp.rel_multiplayer_osx_builder.52364.ii
 t _GLOBAL__sub_I_triggers.tmp.rel_multiplayer_osx_builder.52358.ii
 t _GLOBAL__sub_I_usermessag.tmp.rel_multiplayer_osx_builder.49836.ii
 t _GLOBAL__sub_I_util.tmp.rel_multiplayer_osx_builder.52370.ii
 t _GLOBAL__sub_I_util_share.tmp.rel_multiplayer_osx_builder.49840.ii
 t _GLOBAL__sub_I_utlbuffer.tmp.rel_multiplayer_osx_builder.27443.ii
 t _GLOBAL__sub_I_utlsymbol.tmp.rel_multiplayer_osx_builder.27461.ii
 t _GLOBAL__sub_I_vehicle_ai.tmp.rel_multiplayer_osx_builder.51362.ii
 t _GLOBAL__sub_I_vehicle_ap.tmp.rel_multiplayer_osx_builder.51368.ii
 t _GLOBAL__sub_I_vehicle_ba.tmp.rel_multiplayer_osx_builder.52382.ii
 t _GLOBAL__sub_I_vehicle_ba.tmp.rel_multiplayer_osx_builder.52388.ii
 t _GLOBAL__sub_I_vehicle_cr.tmp.rel_multiplayer_osx_builder.51374.ii
 t _GLOBAL__sub_I_vehicle_pr.tmp.rel_multiplayer_osx_builder.51378.ii
 t _GLOBAL__sub_I_vehicle_vi.tmp.rel_multiplayer_osx_builder.49844.ii
 t _GLOBAL__sub_I_vehicle_vi.tmp.rel_multiplayer_osx_builder.51386.ii
 t _GLOBAL__sub_I_vguiscreen.tmp.rel_multiplayer_osx_builder.52394.ii
 t _GLOBAL__sub_I_voice_game.tmp.rel_multiplayer_osx_builder.49852.ii
 t _GLOBAL__sub_I_vote_contr.tmp.rel_multiplayer_osx_builder.49179.ii
 t _GLOBAL__sub_I_waterbulle.tmp.rel_multiplayer_osx_builder.52400.ii
 t _GLOBAL__sub_I_wcedit.tmp.rel_multiplayer_osx_builder.52410.ii
 t _GLOBAL__sub_I_weapon_357.tmp.rel_multiplayer_osx_builder.49469.ii
 t _GLOBAL__sub_I_weapon_ann.tmp.rel_multiplayer_osx_builder.51392.ii
 t _GLOBAL__sub_I_weapon_ar2.tmp.rel_multiplayer_osx_builder.49475.ii
 t _GLOBAL__sub_I_weapon_bug.tmp.rel_multiplayer_osx_builder.51396.ii
 t _GLOBAL__sub_I_weapon_cgu.tmp.rel_multiplayer_osx_builder.51404.ii
 t _GLOBAL__sub_I_weapon_cro.tmp.rel_multiplayer_osx_builder.49481.ii
 t _GLOBAL__sub_I_weapon_cro.tmp.rel_multiplayer_osx_builder.49485.ii
 t _GLOBAL__sub_I_weapon_cub.tmp.rel_multiplayer_osx_builder.52418.ii
 t _GLOBAL__sub_I_weapon_fla.tmp.rel_multiplayer_osx_builder.51410.ii
 t _GLOBAL__sub_I_weapon_fra.tmp.rel_multiplayer_osx_builder.49493.ii
 t _GLOBAL__sub_I_weapon_hl2.tmp.rel_multiplayer_osx_builder.49499.ii
 t _GLOBAL__sub_I_weapon_hl2.tmp.rel_multiplayer_osx_builder.49505.ii
 t _GLOBAL__sub_I_weapon_hl2.tmp.rel_multiplayer_osx_builder.49511.ii
 t _GLOBAL__sub_I_weapon_hl2.tmp.rel_multiplayer_osx_builder.49517.ii
 t _GLOBAL__sub_I_weapon_par.tmp.rel_multiplayer_osx_builder.49860.ii
 t _GLOBAL__sub_I_weapon_phy.tmp.rel_multiplayer_osx_builder.49521.ii
 t _GLOBAL__sub_I_weapon_pis.tmp.rel_multiplayer_osx_builder.49529.ii
 t _GLOBAL__sub_I_weapon_rpg.tmp.rel_multiplayer_osx_builder.49535.ii
 t _GLOBAL__sub_I_weapon_sho.tmp.rel_multiplayer_osx_builder.49541.ii
 t _GLOBAL__sub_I_weapon_sla.tmp.rel_multiplayer_osx_builder.49547.ii
 t _GLOBAL__sub_I_weapon_smg.tmp.rel_multiplayer_osx_builder.49553.ii
 t _GLOBAL__sub_I_weapon_stu.tmp.rel_multiplayer_osx_builder.49559.ii
 t _GLOBAL__sub_I_weight_but.tmp.rel_multiplayer_osx_builder.52424.ii
 t _GLOBAL__sub_I_world.tmp.rel_multiplayer_osx_builder.52430.ii
 t __CreateCEffectsServerIEffects_interface()
 t __CreateCGameMovementIGameMovement_interface()
 t __CreateCHLTVDirectorIHLTVDirector_interface()
 t __CreateCPlayerInfoManagerIPlayerInfoManager_interface()
 t __CreateCPluginBotManagerIBotManager_interface()
 t __CreateCPluginHelpersCheckIPluginHelpersCheck_interface()
 t __CreateCServerChoreoToolsIServerChoreoTools_interface()
 t __CreateCServerDLLSharedAppSystemsIServerDLLSharedAppSystems_interface()
 t __CreateCServerGameClientsIServerGameClients003_interface()
 t __CreateCServerGameClientsIServerGameClients_interface()
 t __CreateCServerGameDLLIServerGameDLL_interface()
 t __CreateCServerGameEntsIServerGameEnts_interface()
 t __CreateCServerGameTagsIServerGameTags_interface()
 t __CreateCServerToolsIServerTools001_interface()
 t __CreateCServerToolsIServerTools002_interface()
 t __CreateCServerToolsIServerTools_interface()
 t __cxx_global_array_dtor
 t __cxx_global_array_dtor106
 t __cxx_global_array_dtor153
 t __cxx_global_array_dtor173
 t __cxx_global_array_dtor18
 t __cxx_global_array_dtor184
 t __cxx_global_array_dtor189
 t __cxx_global_array_dtor19
 t __cxx_global_array_dtor191
 t __cxx_global_array_dtor195
 t __cxx_global_array_dtor207
 t __cxx_global_array_dtor211
 t __cxx_global_array_dtor217
 t __cxx_global_array_dtor258
 t __cxx_global_array_dtor280
 t __cxx_global_array_dtor29
 t __cxx_global_array_dtor31
 t __cxx_global_array_dtor33
 t __cxx_global_array_dtor34
 t __cxx_global_array_dtor349
 t __cxx_global_array_dtor397
 t __cxx_global_array_dtor407
 t __cxx_global_array_dtor41
 t __cxx_global_array_dtor410
 t __cxx_global_array_dtor423
 t __cxx_global_array_dtor46
 t __cxx_global_array_dtor47
 t __cxx_global_array_dtor48
 t __cxx_global_array_dtor51
 t __cxx_global_array_dtor53
 t __cxx_global_array_dtor57
 t __cxx_global_array_dtor63
 t __cxx_global_array_dtor67
 t __cxx_global_array_dtor73
 t __cxx_global_array_dtor74
 t __cxx_global_array_dtor80
 t __cxx_global_array_dtor81
 t __cxx_global_array_dtor85
 t __cxx_global_array_dtor90
 t __cxx_global_array_dtor93
 t __cxx_global_array_dtor99
 t ai_clear_bad_links(CCommand const&)
 t ai_debug_node_connect(CCommand const&)
 t ai_dump_hints(CCommand const&)
 t ai_set_move_height_epsilon(CCommand const&)
 t ai_show_node(CCommand const&)
 t ai_test_los(CCommand const&)
 t ainet_generate_report(CCommand const&)
 t ainet_generate_report_only(CCommand const&)
 t buddha(CCommand const&)
 t callvote(CCommand const&)
 t cast_hull(CCommand const&)
 t cast_ray(CCommand const&)
 t clear_debug_overlays(CCommand const&)
 t dump_entity_sizes(CCommand const&)
 t dump_globals(CCommand const&)
 t explode(CCommand const&)
 t explodevector(CCommand const&)
 t fov(CCommand const&)
 t give(CCommand const&)
 t hammer_update_entity(CCommand const&)
 t hammer_update_safe_entities(CCommand const&)
 t kill(CCommand const&)
 t killvector(CCommand const&)
 t mission_list(CCommand const&)
 t mission_show(CCommand const&)
 t mp_disable_autokick(CCommand const&)
 t mp_forcewin(CCommand const&)
 t npc_ammo_deplete(CCommand const&)
 t npc_freeze_unselected(CCommand const&)
 t npc_heal(CCommand const&)
 t npc_speakall(CCommand const&)
 t npc_thinknow(CCommand const&)
 t physics_budget(CCommand const&)
 t physics_constraints(CCommand const&)
 t physics_debug_entity(CCommand const&)
 t physics_highlight_active(CCommand const&)
 t physics_report_active(CCommand const&)
 t physics_select(CCommand const&)
 t report_entities(CCommand const&)
 t report_simthinklist(CCommand const&)
 t report_soundpatch(CCommand const&)
 t report_touchlinks(CCommand const&)
 t rr_reloadresponsesystems(CCommand const&)
 t say(CCommand const&)
 t say_team(CCommand const&)
 t scene_flush(CCommand const&)
 t server_game_time(CCommand const&)
 t setang_exact(CCommand const&)
 t setpos(CCommand const&)
 t setpos_exact(CCommand const&)
 t soundscape_flush(CCommand const&)
 t surfaceprop(CCommand const&)
 t sv_benchmark_force_start(CCommand const&)
 t sv_findsoundname(CCommand const&)
 t sv_querycache_stats(CCommand const&)
 t sv_soundemitter_filecheck(CCommand const&)
 t sv_soundemitter_flush(CCommand const&)
 t sv_soundscape_printdebuginfo(CCommand const&)
 t timeleft(CCommand const&)
 t vehicle_flushscript(CCommand const&)
 tan
 time
 typeinfo for CThread
 vsnprintf
 vtable for __cxxabiv1::__class_type_info
 vtable for __cxxabiv1::__si_class_type_info
 vtable for __cxxabiv1::__vmi_class_type_info
 vtune
 wcslen
 wcstol
 wcstoll
